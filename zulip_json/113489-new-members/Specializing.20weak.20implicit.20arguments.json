[
    {
        "content": "<p>I'm trying to work with the inductive definition in mathlib. If I didn't misinterpret the notation, it uses weak implicit arguments in the forall quantifier, which I am having trouble trying to specialize, since unlike normal arguments, h a does not specialize the hypothesis with argument a. The exact example I'm trying to do is below. How does one deal with these weak implicit arguments?</p>\n<div class=\"codehilite\"><pre><span></span>def bijective&#39; {α β} (f : α → β) : Prop :=\n    ∃ f&#39; : β → α, (∀ a : α, f&#39; (f a) = a) ∧ (∀ b : β, f (f&#39; b) = b)\n\ntheorem bijective_iff_bijective&#39; {α β} (f : α → β) : bijective f ↔ bijective&#39; f :=\nbegin\n    dunfold bijective bijective&#39; surjective injective, split,\n        {intro h, cases h with h1 h2, existsi λ b, classical.some (h2 b), simp, split,\n            {intro a, have h3 := some_spec (h2 (f a)), sorry}, -- How to resolve this?\n            {sorry}},\n        {sorry},\n    done\nend\n</pre></div>",
        "id": 181288450,
        "sender_full_name": "Li Yao'an",
        "timestamp": 1574328989
    },
    {
        "content": "<p>You don't really need to in this case, you can just fill the <code>sorry</code> with <code>exact h1 h3</code></p>",
        "id": 181297157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574337335
    },
    {
        "content": "<p>but you can apply a weak implicit using <code>@h1 (some _) a</code></p>",
        "id": 181297225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574337388
    },
    {
        "content": "<p>Note also the <code>choose</code> tactic:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bijective&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">bijective_iff_bijective&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bijective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">bijective&#39;</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">f&#39;</span> <span class=\"n\">h&#39;</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181304320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574343330
    }
]