[
    {
        "content": "<p>A while ago I was porting some code from Coq to Lean and it was going very well, but there was one definition that reduces to something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n    <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>I get \"unexpected occurrence of recursive function\" on <code>bar</code>. Is there any way to make this kind of definition work, and prove termination? I'm actually kind of surprised it worked in Coq in the first place...</p>",
        "id": 134713724,
        "sender_full_name": "Scott Olson",
        "timestamp": 1538010235
    },
    {
        "content": "<p>Effectively, you need to prove that <code>foo</code> only calls <code>bar</code> with something smaller than <code>n+1</code>, which it does in this case. Maybe it's technically possible, but the equation compiler in particular doesn't support it?</p>",
        "id": 134713786,
        "sender_full_name": "Scott Olson",
        "timestamp": 1538010287
    },
    {
        "content": "<p>It this example, you can inline <code>foo</code> but I assume that's not an option with what you're working on ...</p>",
        "id": 134717621,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538016324
    },
    {
        "content": "<p>Otherwise, you can make <code>foo</code> and <code>bar</code> into mutually recursive functions</p>",
        "id": 134717700,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538016444
    },
    {
        "content": "<p>It is possible but inconvenient to inline <code>foo</code> in the real code. It turned out more convenient to use a different approach to defining <code>bar</code> entirely.</p>\n<p>When I try a mutually recursive approach, I still get the same \"unexpected occurrence of recursive function\" error (which comes from the pattern compiler, I assume):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mutual</span> <span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span>\n<span class=\"k\">with</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n<span class=\"k\">with</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 134719571,
        "sender_full_name": "Scott Olson",
        "timestamp": 1538019835
    },
    {
        "content": "<p>When I find the time, I'll look up the original Coq example again for comparison.</p>",
        "id": 134719682,
        "sender_full_name": "Scott Olson",
        "timestamp": 1538019988
    },
    {
        "content": "<p>the idea is to define <code>bar</code> and <code>foo bar</code> by mutual recursion</p>",
        "id": 134719755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538020109
    },
    {
        "content": "<p>so you wouldn't have that first parameter in <code>foo</code></p>",
        "id": 134719758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538020125
    },
    {
        "content": "<p>What Mario said</p>",
        "id": 134719838,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538020235
    },
    {
        "content": "<p>So that would look like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mutual</span> <span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span>\n<span class=\"k\">with</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"c1\">-- this will be trouble because `n` doesn&#39;t decrease</span>\n<span class=\"k\">with</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 134720141,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538020740
    },
    {
        "content": "<p>Hmm, I suspect I still haven't fully understood, but here's my latest attempt:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- (To be clear this is elsewhere, can&#39;t be changed, inconvenient to inline.)</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"n\">mutual</span> <span class=\"n\">def</span> <span class=\"n\">foo_bar</span><span class=\"o\">,</span> <span class=\"n\">bar</span>\n<span class=\"k\">with</span> <span class=\"n\">foo_bar</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">n</span>\n<span class=\"k\">with</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo_bar</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>Which has the same \"unexpected occurrence of recursive function\" message.</p>",
        "id": 134720156,
        "sender_full_name": "Scott Olson",
        "timestamp": 1538020768
    },
    {
        "content": "<p>that is trouble, because you need to know that <code>foo</code> doesn't look at future values of <code>bar</code></p>",
        "id": 134720226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538020851
    },
    {
        "content": "<p>Yeah, it's definitely fair for Lean to reject it. I think I'll come back to this thread when I've found the Coq example to compare with</p>",
        "id": 134720245,
        "sender_full_name": "Scott Olson",
        "timestamp": 1538020904
    },
    {
        "content": "<p>One option, used with things like <code>list.map</code>, is to use a theorem like <code>map_congr</code> to acquire an assumption that is needed for the recursion, or use a partial function like <code>list.pmap</code></p>",
        "id": 134720292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538020947
    },
    {
        "content": "<p>I <em>think</em> the difference is Coq allowed the code with an explicit termination proof, whereas Lean's equation compiler won't even touch it</p>",
        "id": 134720313,
        "sender_full_name": "Scott Olson",
        "timestamp": 1538020988
    },
    {
        "content": "<p>Unlike simpler examples where you just need to prove something is decreasing</p>",
        "id": 134720318,
        "sender_full_name": "Scott Olson",
        "timestamp": 1538021021
    },
    {
        "content": "<p>lean allows explicit termination proofs, but you have to thread the proof through in a kind of awkward way</p>",
        "id": 134720321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538021027
    },
    {
        "content": "<p>I would need a more concrete example to demonstrate</p>",
        "id": 134720365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538021057
    },
    {
        "content": "<p>I've got to head out for now but I'll come back to this with more details</p>",
        "id": 134720386,
        "sender_full_name": "Scott Olson",
        "timestamp": 1538021129
    }
]