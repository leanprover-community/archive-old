[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435815\">Lucas Teixeira</span> has marked this topic as resolved.</p>",
        "id": 252524911,
        "sender_full_name": "Notification Bot",
        "timestamp": 1631131814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Prop.20.3A.3D.20Sort.200.20Motivation/near/252337831\">said</a>:</p>\n<blockquote>\n<p>Of course, both <code>false</code> and <code>P</code> are terms; however, only <code>P</code> is a type, and so, we can have <code>h : P</code> but <code>f : false</code> would be a nonsense.</p>\n</blockquote>\n<p>One thing I wanted to note: <code>false</code> is <em>very</em> much a type and <code>f : false</code> has a very important meaning: it is a proof of <code>false</code>! Successfully constructing such an <code>f</code> proves Lean's type theory inconsistent. Thus, we very much hope that such a thing is impossible. Assuming it is not possible, <code>false</code> is thus what is called an <em>uninhabited</em> type. That is, a type where it is impossible to construct a term/proof of that type. One can construct uninhabited types of universes other than <code>Prop</code> as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">uninhabited</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"c1\">-- ok, but hopefully impossible to construct a term of type `uninhabited` (without additional axioms)</span>\n</code></pre></div>",
        "id": 290192629,
        "sender_full_name": "Mac",
        "timestamp": 1658291636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Prop.20.3A.3D.20Sort.200.20Motivation/near/252344809\">said</a>:</p>\n<blockquote>\n<p>(noting again that <code>Sort -1</code> doesn't exist)</p>\n</blockquote>\n<p>I'm sorry to reopen this can of worms.  I was reading this with some interest and am wondering if part of the <code>-1</code> confusion comes directly from the documentation.  This is definitely mentioned somewhere in the Lean docs (TPIL?) but also just hovering over <code>Type</code> :  The popup I get is the following:</p>\n<p>\"A type universe. Type ≡ Type 0, Type u ≡ Sort (u + 1)\" </p>\n<p>Now, I might be second-guessing the OP here but since Lean also says that <code>Prop ≡ Sort 0</code>, by the display this would seem to imply that </p>\n<p><code>Prop  ≡ Sort 0 ≡ Sort (-1 + 1)  ≡ Type -1</code></p>\n<p>Maybe the documentation should help clarify this?</p>",
        "id": 291139157,
        "sender_full_name": "Tom",
        "timestamp": 1658981573
    },
    {
        "content": "<p>That feels like arguing that <code>(0 : ℕ) = (-1 + 1)</code>; the statement itself isn't meaningful because there is no <code>-</code> operator</p>",
        "id": 291252514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659042645
    },
    {
        "content": "<p>Similarly here, <code>u</code> is represented internally by a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/level\">docs#level</a>, which has no notion of negation</p>",
        "id": 291252616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659042709
    },
    {
        "content": "<p>Just to be clear:  I am not making any claims about the validity of the conclusion - I am just second-guessing how someone (like e.g. OP) might have arrived at it, and also whether an explanation/clarification in the docs might help.</p>",
        "id": 291271270,
        "sender_full_name": "Tom",
        "timestamp": 1659055349
    }
]