[
    {
        "content": "<p>Hello. I would like to access the equivalence class of an element in a quotient (by an equivalence relation) as a subset of the \"original\" set. What is the best way to go about this? I found the <code>\\[[ \\]]</code> notation but it seems that this refers to the equivalence class as an element of the quotient. Should I just take the preimage under <code>quotient.mk</code>?</p>",
        "id": 218855076,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607098908
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 218855151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607098934
    },
    {
        "content": "<p>I don't think we have equivalence classes! I might be wrong. I just usually define <code>cl(x):={y | y R x}</code></p>",
        "id": 218855186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607098949
    },
    {
        "content": "<p>But I've only ever needed them when doing UG demo stuff like partitions = equiv relns</p>",
        "id": 218855224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607098970
    },
    {
        "content": "<p>So maybe to give some more context I am trying to prove that the quotient of a compact hausdorff space by its connected components is again hausdorff. To do this I want to apply the \"normality\" condition of my space to the connected components (which are the equivalence classes). So I need to access the equivalence classes somehow, but I am given elements in my quotient space so I am unsure how to proceed. So I know that I can just take a point in my class and then take the connected component of this, but then I dont know that its the equivalence class. So I want to access the equivalence class in such a way that lean knows its the equivalence class. Based on Kevins answer it seems that I should use <code>quotient.mk \\inv</code>?</p>",
        "id": 218855952,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607099309
    },
    {
        "content": "<p>I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.classes\">docs#setoid.classes</a> which is the set of all equivalence classes, and whose definition makes me think the official mathlib way is just something like what Kevin wrote</p>",
        "id": 218855968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607099314
    },
    {
        "content": "<p>I think I lied -- I think that 50% of the time I used to write <code>x R y</code>. However, when I realised that R need not be an equivalence relation I started thinking about \"the elements of x\" and started to use <code>y R x</code> consistently.</p>",
        "id": 218856078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607099374
    },
    {
        "content": "<p>Preimage under <code>quotient.mk</code> is probably quite easy to prove equal to that definition as well, so it shouldn't matter much</p>",
        "id": 218856082,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607099377
    },
    {
        "content": "<p>Ah okay thanks then I will proceed like that</p>",
        "id": 218856203,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607099412
    },
    {
        "content": "<p>The usual way to do this is with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.exact\">docs#quotient.exact</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.sound\">docs#quotient.sound</a></p>",
        "id": 218856226,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607099426
    },
    {
        "content": "<p>It just occurred to me that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> could be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∋</mo></mrow><annotation encoding=\"application/x-tex\">\\ni</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∋</span></span></span></span> rather than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span></span></span></span></p>",
        "id": 218856265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607099443
    },
    {
        "content": "<p>Those are the two main functions I use whenever I deal with quotients to translate back an forth to the original relation</p>",
        "id": 218856312,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607099467
    },
    {
        "content": "<p>Next you'll be saying we could write things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≥</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\ge y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>",
        "id": 218856466,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607099528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/quotients.20and.20equivalence.20classes/near/218856312\">said</a>:</p>\n<blockquote>\n<p>Those are the two main functions I use whenever I deal with quotients to translate back an forth to the original relation</p>\n</blockquote>\n<p>Oh okay, I did read those too but it did not occur to me how I should use them in my situation as I am directly given elements of the quotient, so as far as I know they are not of the form <code>\\[[ x \\]]</code>. Unless lean somehow still knows this behind the scenes?</p>",
        "id": 218856621,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607099603
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.exists_rep\">docs#quotient.exists_rep</a></p>",
        "id": 218856653,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607099621
    },
    {
        "content": "<p>That lets you choose representatives</p>",
        "id": 218856676,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607099631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/quotients.20and.20equivalence.20classes/near/218856653\">said</a>:</p>\n<blockquote>\n<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.exists_rep\">docs#quotient.exists_rep</a></p>\n</blockquote>\n<p>oh great. Thats much better, I was using quotient.out</p>",
        "id": 218856739,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607099647
    },
    {
        "content": "<p>Or the induction principle says you can prove something for all elements of the quotient if you can prove it for everything of the form <code>[[x]]</code></p>",
        "id": 218856770,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607099663
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/init/data/quot.html#quotient.induction_on\">https://leanprover-community.github.io/mathlib_docs/init/data/quot.html#quotient.induction_on</a></p>",
        "id": 218856812,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607099679
    },
    {
        "content": "<p>In a tactic proof, you can use <del><code>cases</code></del><code>rcases</code> or <code>induction</code> to get a representative.</p>",
        "id": 218856845,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607099695
    },
    {
        "content": "<p>I thought you need <code>rcases</code> for that</p>",
        "id": 218856895,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607099713
    },
    {
        "content": "<p>You're right <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 218856925,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607099731
    },
    {
        "content": "<p>(I do think induction works as well though)</p>",
        "id": 218856972,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607099754
    },
    {
        "content": "<p>right, which means you can use <code>rintro \\&lt;x\\&gt;</code> as well</p>",
        "id": 218857053,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607099778
    },
    {
        "content": "<p>By the way, if you are working with <code>quotient</code>, are you using something like <code>local attribute [instance]</code> to impose the \"same connected component\" relation?</p>",
        "id": 218857162,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607099849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/quotients.20and.20equivalence.20classes/near/218857162\">said</a>:</p>\n<blockquote>\n<p>By the way, if you are working with <code>quotient</code>, are you using something like <code>local attribute [instance]</code> to impose the \"same connected component\" relation?</p>\n</blockquote>\n<p>No, I just manually constructed the relation by saying x ~ y if <code>x \\in connected_component y</code> and then proved that it was an equivalence relation</p>",
        "id": 218857421,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607099961
    },
    {
        "content": "<p>I also showed that it was the same as saying that the connected components were equal</p>",
        "id": 218857461,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607099983
    },
    {
        "content": "<p>or you can just use <code>quotient.xxxx'</code></p>",
        "id": 218857617,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607100037
    },
    {
        "content": "<p>So you can either make the setoid a local instance, like Reid said, or you need to put <code>'</code> next to all of these <code>quotient.foo </code>functions</p>",
        "id": 218857624,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607100039
    },
    {
        "content": "<p>I don't think you want a global instance on any compact hausdorff space</p>",
        "id": 218857660,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607100051
    },
    {
        "content": "<p>But you also form the quotient space, right?</p>",
        "id": 218857662,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100051
    },
    {
        "content": "<p>and what is the advantage of doing this?</p>",
        "id": 218857689,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607100061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/quotients.20and.20equivalence.20classes/near/218857662\">said</a>:</p>\n<blockquote>\n<p>But you also form the quotient space, right?</p>\n</blockquote>\n<p>yes</p>",
        "id": 218857706,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607100066
    },
    {
        "content": "<p>I mean the quotient is just a finite discrete space isn't it</p>",
        "id": 218857787,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607100093
    },
    {
        "content": "<p>What Kenny said--the design of quotients is a little odd because <code>setoid</code> being a type class means you should have only one instance of it per type</p>",
        "id": 218857831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100122
    },
    {
        "content": "<p>but there's also no reason you wouldn't have other instances on some types that just happen to also be compact Hausdorff spaces or whatever</p>",
        "id": 218857933,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100151
    },
    {
        "content": "<p>So using a local instance should work okay in this case</p>",
        "id": 218857970,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/quotients.20and.20equivalence.20classes/near/218857787\">said</a>:</p>\n<blockquote>\n<p>I mean the quotient is just a finite discrete space isn't it</p>\n</blockquote>\n<p>I think that it can be profinite, e.g. Z_p is totally disconnected so the equivalence relation is just trivial here.</p>",
        "id": 218858061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607100212
    },
    {
        "content": "<p>Oh okay so I defined <code>instance procompletion_setoid</code></p>",
        "id": 218858087,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607100226
    },
    {
        "content": "<p>and now I should add  <code>local attribute [instance]</code> above or something?</p>",
        "id": 218858172,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607100253
    },
    {
        "content": "<p>I think there's a way to do it in a single declaration, but usually people just write <code>def</code> and then <code>local attribute [instance] procompletion_setoid</code></p>",
        "id": 218858234,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100283
    },
    {
        "content": "<p>below it</p>",
        "id": 218858247,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100287
    },
    {
        "content": "<p>Ah okay</p>",
        "id": 218858271,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607100300
    },
    {
        "content": "<p>and then, when you want to use the instance somewhere else, you also write the same <code>local attribute [instance]</code> there</p>",
        "id": 218858278,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100303
    },
    {
        "content": "<p>Oh so now I have made it into a \"global\" instance?</p>",
        "id": 218858322,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607100325
    },
    {
        "content": "<p>and this works out pretty well</p>",
        "id": 218858327,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100327
    },
    {
        "content": "<p>Yes... and most likely a global instance for basically every topological space (with whatever conditions you imposed)</p>",
        "id": 218858371,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100349
    },
    {
        "content": "<p>So this was why I had to write Profinite.procompletion_setoid everywhere <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 218858672,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607100470
    },
    {
        "content": "<p>oh yeah, it's weird that <code>quotient</code> itself takes the setoid explicitly</p>",
        "id": 218858866,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100545
    },
    {
        "content": "<p>You could organize it something like this:<br>\ndefine the <code>setoid</code>, make it a local instance and then define<br>\n<code>def connected_components_quotient (X : Type*) [topological_space X] := quotient connected_components_setoid</code><br>\n(in general, this definition makes sense for general spaces <code>X</code>)</p>",
        "id": 218859098,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100630
    },
    {
        "content": "<p>then write an instance saying that <code>connected_components_quotient X</code> is Hausdorff if <code>X</code> is--at this point you no longer need the <code>setoid</code> instance in the statement (but you probably still need it for the proof)</p>",
        "id": 218859228,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100695
    },
    {
        "content": "<p>Thanks! I will try this</p>",
        "id": 218859344,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607100734
    },
    {
        "content": "<p>actually I guess it's Hausdorff even if <code>X</code> isn't</p>",
        "id": 218859372,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100743
    },
    {
        "content": "<p>is that right? I guess the proof will answer that question <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 218859436,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100768
    },
    {
        "content": "<p>No (I think) that's not right. Can't think of an example though...</p>",
        "id": 218859517,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607100812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/quotients.20and.20equivalence.20classes/near/218859436\">said</a>:</p>\n<blockquote>\n<p>is that right? I guess the proof will answer that question <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>Oh I thuoght that the proof would use that compact Hausdorff spaces are normal? And that connected components are closed</p>",
        "id": 218859537,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607100821
    },
    {
        "content": "<p>Oh I see, I had something wrong in my head</p>",
        "id": 218859881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607100967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> It would be nice to prove the universal property mentioned here:<br>\n<a href=\"https://stacks.math.columbia.edu/tag/08ZL\">https://stacks.math.columbia.edu/tag/08ZL</a></p>",
        "id": 218861859,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607101823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/quotients.20and.20equivalence.20classes/near/218861859\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132603\">Calle Sönne</span> It would be nice to prove the universal property mentioned here:<br>\n<a href=\"https://stacks.math.columbia.edu/tag/08ZL\">https://stacks.math.columbia.edu/tag/08ZL</a></p>\n</blockquote>\n<p>Oh yes, I will try doing that. (after I prove the hausdorff thing <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>)</p>",
        "id": 218862028,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607101910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/quotients.20and.20equivalence.20classes/near/218855968\">said</a>:</p>\n<blockquote>\n<p>I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.classes\">docs#setoid.classes</a> which is the set of all equivalence classes, and whose definition makes me think the official mathlib way is just something like what Kevin wrote</p>\n</blockquote>\n<p>So if people generally dont use the setoid.classes stuff, then what results do you use to show equivalence classes are disjoint?</p>",
        "id": 218866786,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607103952
    },
    {
        "content": "<p>Oh so maybe you use the <a href=\"http://quot.foo\">quot.foo</a> stuff for that</p>",
        "id": 218867007,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607104045
    },
    {
        "content": "<p>You'll probably find that any question about equivalence classes can be reformulated as a question about quotients somehow.</p>",
        "id": 218867193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607104118
    },
    {
        "content": "<p>If <code>[[a]] = [[b]]</code> then <code>R a b</code> is precisely <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.exact\">docs#quotient.exact</a></p>",
        "id": 218867931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607104409
    },
    {
        "content": "<p>Or if you want the converse that's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.sound\">docs#quotient.sound</a></p>",
        "id": 218868733,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607104702
    },
    {
        "content": "<p>I guess disjointness would be shown via an instance of <code>nontrivial (quotient mysetoid)</code>?</p>",
        "id": 218938308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607180261
    }
]