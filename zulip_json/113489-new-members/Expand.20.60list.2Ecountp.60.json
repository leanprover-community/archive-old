[
    {
        "content": "<p>Hi. I have the following goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">list.countp</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>How can I tell lean to expand <code>countp</code> and evaluate and actually prove this? It seems to me that by definition, lean should do this already:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">countp</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">countp</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">countp</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>Here is reproducible code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime_norm_num</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.prime_counting</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfo</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">prime_counting'</span> <span class=\"n\">count</span> <span class=\"n\">prime</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">list.countp</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">prime_counting'</span> <span class=\"n\">count</span> <span class=\"n\">prime</span> <span class=\"n\">list.countp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 323105905,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674503746
    },
    {
        "content": "<p>There has been far less effort been put into making Lean 3 compute like this than there has been into developing a large body of theorems. I don't even know how to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">list.filter</span> <span class=\"n\">prime</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 323111220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674505467
    },
    {
        "content": "<p>Actually surprisingly, an unfold, combined with a tactic that evaluates <code>prime n</code>, works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">list.filter</span> <span class=\"n\">prime</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">list.filter</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>However, I am not sure why <code>unfold list.countp</code> doesn't, it gives <code>simplify tactic failed to simplify</code>, despite them having similar structures.</p>",
        "id": 323112899,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674506054
    },
    {
        "content": "<p>Oh nice! Mimicing your trick:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">list.countp</span> <span class=\"n\">prime</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">list.countp</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 323113725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674506332
    },
    {
        "content": "<p>The fact that some thought has to be given to navigating the minefield is just an indication that people have not put too much effort into this kind of question. Perhaps one reason for this is that lean 3 begins to struggle with computations of any kind of non-trivial size. This is the sort of question which you might hope a tactic in Lean 4 can solve much more efficiently.</p>",
        "id": 323114103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674506452
    },
    {
        "content": "<p>I have certainly put a lot of thought into problems of this form. The issue is that at least currently, <code>norm_num</code> basically needs custom implementations for every function you want to compute with, unless you can live with the fortuitous interaction it has with <code>simp</code> (which is often enough for list problems like this)</p>",
        "id": 323114701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674506701
    },
    {
        "content": "<p>Yes -- you wrote <code>norm_num</code> and many custom extensions to it! Example <a href=\"https://xenaproject.wordpress.com/2018/07/26/617-is-prime/\">here</a>. But it was a one person show in Lean 3 and I for one had no motivation for trying to get stuff like this working in mathlib3 because it always seemed to me that lean 4 would be a far more appropriate tool for this kind of job.</p>",
        "id": 323114975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674506812
    },
    {
        "content": "<p>for an example like this I think the best approach is just to give the function a name (since this is the prime pi function after all) and implement a <code>norm_num</code> extension for it</p>",
        "id": 323114984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674506815
    },
    {
        "content": "<p>Lean 4 doesn't bring anything fundamentally new here, there are a few extra features that sometimes help like <code>simp</code> being able to prove stuff by <code>decide</code> sometimes but mostly it looks the same except that numerics are more practical because of bignum arithmetic</p>",
        "id": 323115124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674506884
    },
    {
        "content": "<p>I see, I will definitely look into mathlib4 soon, once I get comfortable with mathlib3 and have the mental capacity haha. By the way, I modified your code to not require explicitly writing out the list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prime_counting</span><span class=\"o\">,</span> <span class=\"n\">prime_counting'</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">,</span> <span class=\"n\">list.range</span><span class=\"o\">],</span>\n\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.range_core</span><span class=\"o\">,</span> <span class=\"n\">list.countp</span><span class=\"o\">],</span> <span class=\"c1\">-- recursively simp.</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But then since <code>countp</code> by definition has a if-then-else branch, the tree grows exponentially I believe.</p>",
        "id": 323115143,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674506888
    },
    {
        "content": "<p>Seems to me that you're already half way towards writing the custom extension! However I would discourage you from doing this in mathlib3 because any changes to <code>norm_num</code> right now would need to be manually ported to mathlib4.</p>",
        "id": 323115314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674506970
    },
    {
        "content": "<p>more like reimplemented</p>",
        "id": 323115366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674506988
    },
    {
        "content": "<p>Alright!</p>",
        "id": 323115457,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674507013
    },
    {
        "content": "<p>we're implementing norm_num extensions on an as needed basis right now</p>",
        "id": 323115466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674507016
    },
    {
        "content": "<p>If I do get to implement the <code>norm_num</code> extension for <code>prime_counting</code> at some point, probably a good idea to get <a href=\"https://www.wikiwand.com/en/Meissel%E2%80%93Lehmer_algorithm\">Meissel-Lehmer Algorithm</a> in too, since I believe it runs in O(n^(2/3+epsilon))</p>",
        "id": 323116134,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674507249
    },
    {
        "content": "<p>Note that <code>norm_num</code> is (at least currently) primarily concerned with the small-numbers case, which is why primality checking is done using trial division instead of more sophisticated approaches with a better asymptotic complexity</p>",
        "id": 323117948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674507913
    },
    {
        "content": "<p>there isn't much point in having an algorithm that only pays off when the numbers are so big that other implementation limits are hit first</p>",
        "id": 323118040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674507955
    },
    {
        "content": "<p>Ahh, that makes sense. Maybe I will add it as an extension, similar to the lucas-lehmer test?</p>",
        "id": 323118571,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674508161
    },
    {
        "content": "<p>lucas-lehmer is also not a 100% correct test, right?</p>",
        "id": 323118642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674508194
    },
    {
        "content": "<p>this makes it less useful for proof purposes</p>",
        "id": 323118738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674508214
    },
    {
        "content": "<p>because we don't really care about certificates for compositeness, those are trivial</p>",
        "id": 323118853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674508260
    },
    {
        "content": "<p>I think it is 100% correct for mersenne numbers - at least the wikipedia page suggests so. What I meant was to implement it as a separate tactic (<code>lucas_lehmer.run_test</code>) that user can use instead if required for some reason :)</p>",
        "id": 323119488,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674508551
    },
    {
        "content": "<p>if we have the method available it makes sense to use it by default after switching based on the size of the number. I don't know whether it helps in these algorithms to know what the answer is before you start the computation (which is the usual situation in certificate generation)</p>",
        "id": 323119882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674508699
    },
    {
        "content": "<p>I guess you wouldn't be using it on mersenne numbers in the first place (if it's part of the algorithm for <code>prime n</code> or <code>prime_counting n</code>), because that would require recognizing mersenne numbers which seems like an unnecessary step</p>",
        "id": 323120035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674508770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/Expand.20.60list.2Ecountp.60/near/323116134\">said</a>:</p>\n<blockquote>\n<p>If I do get to implement the <code>norm_num</code> extension for <code>prime_counting</code> at some point, probably a good idea to get <a href=\"https://www.wikiwand.com/en/Meissel%E2%80%93Lehmer_algorithm\">Meissel-Lehmer Algorithm</a> in too, since I believe it runs in O(n^(2/3+epsilon))</p>\n</blockquote>\n<p>Take a look at <a href=\"https://github.com/kimwalisch/primecount\">https://github.com/kimwalisch/primecount</a> if you haven't :)</p>",
        "id": 323140926,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1674518648
    },
    {
        "content": "<p>Yea I have, it is very cool, they computed the current prime_pi record didn't they?</p>",
        "id": 323141736,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674519092
    }
]