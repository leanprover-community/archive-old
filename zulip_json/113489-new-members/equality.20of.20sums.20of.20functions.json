[
    {
        "content": "<p>If I have a goal of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"bp\">=</span>  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>what's the tactic step to get back to a goal of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"bp\">=</span>  <span class=\"err\">∑</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 208090313,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598448502
    },
    {
        "content": "<p>Basically, the reverse of a <code>congr</code> step.</p>",
        "id": 208090335,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598448514
    },
    {
        "content": "<p>don't get there to begin with</p>",
        "id": 208090601,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598448653
    },
    {
        "content": "<p>use <code>congr' 1</code></p>",
        "id": 208090607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598448657
    },
    {
        "content": "<p>think about it. what you ask doesn't make sense logically</p>",
        "id": 208090648,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598448684
    },
    {
        "content": "<p>the sum being equal doesn't imply the functions being equal</p>",
        "id": 208090655,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598448690
    },
    {
        "content": "<p>I'm finding it cumbersome to rearrange terms inside a sum of sums. So I was hoping to unwrap two levels down, move things around on the LHS, then <code>revert ...; refine congr_fun _</code> and then place the sums back.</p>",
        "id": 208091045,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598448923
    },
    {
        "content": "<p>Aren't you asking the following question: \"How do I prove that if \\sum f(n) = \\sum g(n) then f = g\"? The answer is \"it can't be done because it's not true in general\"</p>",
        "id": 208091168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598448975
    },
    {
        "content": "<p>It seems like your question is backwards, and so the answer is <code>congr</code></p>",
        "id": 208091277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598449035
    },
    {
        "content": "<p>I think I get what you mean</p>",
        "id": 208091569,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598449127
    },
    {
        "content": "<p>So I'll have to stick with <code>simp_rw [mul_comm, mul_assoc]</code> etc</p>",
        "id": 208091629,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598449149
    }
]