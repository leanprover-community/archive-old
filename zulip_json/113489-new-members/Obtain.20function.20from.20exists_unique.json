[
    {
        "content": "<p>If the conclusion of a lemma is that there exists a unique object, I'd like to have a function that gives me that object:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_floor</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span> <span class=\"c1\">-- want to use my_lemma, not a an explicit construction of the floor function!</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>How would I do that? Thanks!</p>",
        "id": 212594951,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1602093048
    },
    {
        "content": "<p>(Ideally, my_floor would spit out not only an integer, but a pair of an integer and a proof of the two inequalities)</p>",
        "id": 212595115,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1602093132
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_floor</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">my_lemma</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_floor_spec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">my_floor</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">my_floor</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">my_lemma</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_floor_unique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">my_floor</span> <span class=\"n\">x</span><span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">my_lemma</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 212595483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602093338
    },
    {
        "content": "<p>How come using <code>obtain</code> on <code>my_lemma</code> doesn't work for this</p>",
        "id": 212595842,
        "sender_full_name": "Julian Berman",
        "timestamp": 1602093511
    },
    {
        "content": "<p>(I see it doesn't, but I expected it to I guess)</p>",
        "id": 212595860,
        "sender_full_name": "Julian Berman",
        "timestamp": 1602093521
    },
    {
        "content": "<p>Oh it's saying you can't do that if <code>my_floor</code> is to return an integer and not a proposition?</p>",
        "id": 212596075,
        "sender_full_name": "Julian Berman",
        "timestamp": 1602093625
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , I think this is what I want...</p>",
        "id": 212596095,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1602093632
    },
    {
        "content": "<p>\"<code>cases</code> only eliminates into <code>Prop</code>\"</p>",
        "id": 212622490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602106661
    },
    {
        "content": "<p>If you have a proof of \"exists x, ...\" and you want an x, then if your goal is a prop you can have it using cases, but if your goal is a type eg if you're building a function, then the virtual machine can't get data from the proposition because it can't cross from the prop universe into the type universe. You can extract it but you have to use a classical axiom. The easiest way in tactic mode is using the <code>choose</code> tactic -- this is what I usually direct beginners to rather than all this classical.some stuff</p>",
        "id": 212622802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602106843
    },
    {
        "content": "<p>Basically you're using the axiom of choice in an essential way so obtain can't do it because obtain is constructive</p>",
        "id": 212622922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602106933
    },
    {
        "content": "<p>The CS axiom of choice that is -- getting from Prop to Type.</p>",
        "id": 212622966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602106964
    },
    {
        "content": "<p>Is there an analogy for the CS axiom of choice between other universe levels?</p>",
        "id": 212623423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602107250
    }
]