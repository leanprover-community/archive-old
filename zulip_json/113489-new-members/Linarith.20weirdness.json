[
    {
        "content": "<p>I'm trying to do problem 79 from the tutorials, and I have the following. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">bdd_below_segment</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">continuous_at_pt</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">negfcont</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">continuous_at_pt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">xicc</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuous_opposite</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"n\">xicc</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">negfub</span> <span class=\"o\">:=</span> <span class=\"n\">bdd_above_segment</span> <span class=\"n\">negfcont</span><span class=\"o\">,</span>\n\n  <span class=\"n\">cases</span> <span class=\"n\">negfub</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n\n  <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">xicc</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hm</span> <span class=\"n\">x</span> <span class=\"n\">xicc</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Before the last <code>linarith</code> line,  my last hypothesis is <code>hm: -f x ≤ m</code> my goal is <code>-m ≤ f x</code>. However, linarith can't finish this. My solution seems isomorphic to the one in the solutions file. </p>\n<p>I'm sure I'm missing something simple, but I'm stumped. Can anyone help me with this?</p>",
        "id": 207055083,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1597553558
    },
    {
        "content": "<p>I'll check, but in the meantime, try uncommenting <code>set_option pp.beta true</code> at the top.  You should then see that hypothesis or goal is not what you think it is.  Use <code>dsimp only</code> or <code>dsimp only at hm</code> to beta reduce the lambda expression.</p>",
        "id": 207055261,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597553918
    },
    {
        "content": "<p><code>library_search</code> will find the lemma that does this in this case.</p>",
        "id": 207055273,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597553986
    },
    {
        "content": "<p>I'm not sure why linarith doesn't but by setting <code>set_option trace.linarith true</code> we can see that it makes it to <code>[f x - -m &lt; 0, -f x - m ≤ 0]</code></p>",
        "id": 207055329,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597554041
    },
    {
        "content": "<p>Ok, I just checked.  The hypothesis is actually</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>The issue is that <code>linarith</code> does not try to beta reduce terms when it figures out all the variables and coefficients.</p>",
        "id": 207055332,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597554046
    },
    {
        "content": "<p>I remember it being especially frustrating running into this exact issue in this exact exercise when I was first learning Lean.  (I've been meaning to submit a PR to remove the <code>set_option pp.beta true</code> from the tutorial, but I haven't gotten around to it.)</p>",
        "id": 207055386,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597554129
    },
    {
        "content": "<p>Another thing you can do instead of <code>dsimp only at hm</code> is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"n\">at</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>which tells Lean to try to unify <code>hm</code> with the given expression, replacing <code>hm</code> with the given expression.  You can put <code>_</code> holes in a <code>change</code> tactic, too.</p>",
        "id": 207055450,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597554281
    }
]