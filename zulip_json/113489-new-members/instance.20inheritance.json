[
    {
        "content": "<p>I'm trying to get a <code>topological_space</code> instance on a structure extending continuous functions, how do I get the induced <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/compact_open.html#continuous_map.compact_open\">compact-open topology</a>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">X</span> <span class=\"kd\">extends</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>  <span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">X.top</span> <span class=\"o\">:</span>  <span class=\"n\">topological_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>   <span class=\"bp\">...</span>   <span class=\"bp\">@</span><span class=\"n\">continuous_map.compact_open</span> <span class=\"n\">α</span> <span class=\"n\">β</span>  <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 286636019,
        "sender_full_name": "Roberto Alvarez",
        "timestamp": 1655536554
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.induced\">docs#topological_space.induced</a>?</p>",
        "id": 286636326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655536950
    },
    {
        "content": "<p>With <code>X.to_continuous_function</code> or whatever the name of <code>C(α,β)</code> is</p>",
        "id": 286636366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655537006
    },
    {
        "content": "<p>Oh if you make it a subtype it will automatically get <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.topological_space\">docs#subtype.topological_space</a> (which is defined using topological_space.induced), and I don't see any special benefit of naming the <code>boundary</code> field ...</p>",
        "id": 286636516,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655537167
    },
    {
        "content": "<p>Thanks! This does the trick:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">X.top</span> <span class=\"o\">:</span>  <span class=\"n\">topological_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">exact</span> <span class=\"n\">topological_space.induced</span> <span class=\"o\">(</span><span class=\"n\">X.to_continuous_map</span><span class=\"o\">)</span> <span class=\"n\">continuous_map.compact_open</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 286636551,
        "sender_full_name": "Roberto Alvarez",
        "timestamp": 1655537216
    },
    {
        "content": "<p>And doesn't C(α,β) automatically get the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.compact_open\">docs#continuous_map.compact_open</a> instance?</p>",
        "id": 286636666,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655537380
    },
    {
        "content": "<p>I don't know how to check it</p>",
        "id": 286636794,
        "sender_full_name": "Roberto Alvarez",
        "timestamp": 1655537540
    },
    {
        "content": "<p>in this case <code>exact topological_space.induced (X.to_continuous_map) (by apply_instance)</code> works if the instance on C(α,β) can be inferred, and using <code>by show_term { apply_instance }</code> you should be able to see what instance you actually get. (Indeed it's the compact-open.)</p>",
        "id": 286636928,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655537771
    },
    {
        "content": "<p>Cool! Thanks</p>",
        "id": 286637928,
        "sender_full_name": "Roberto Alvarez",
        "timestamp": 1655539444
    },
    {
        "content": "<p>Hi !!!<br>\nI'm struggling with a very simple proof, could someone help me ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I would like to do it by contradiction but I don't know how to do it ...</p>",
        "id": 286656110,
        "sender_full_name": "rambip",
        "timestamp": 1655565345
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"509282\">@rambip</span> -- probably a bit better to ask this in a new topic, you can do that by changing the thing after the <code>&gt;</code> just above where you typed your message next time. (Someone may move your message so don't worry about it now).</p>\n<p>As for your question -- this theorem is in lean core actually, it's <code>Nat.add_right_cancel</code>, so you can do <code>theorem t: ∀ x y a: Nat, (x+a = y+a) -&gt; (x = y) := λ _ _ _ =&gt; Nat.add_right_cancel</code> for a term mode proof, or if you are learning some basic tactics, the spelling is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.add_right_cancel</span>\n</code></pre></div>",
        "id": 286657072,
        "sender_full_name": "Julian Berman",
        "timestamp": 1655566725
    }
]