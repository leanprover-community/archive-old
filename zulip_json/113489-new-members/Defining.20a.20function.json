[
    {
        "content": "<p>Say you have a type X and a proof that x : X can only take on n distinct cases. Is it then possible to define a function from X to some type Y using each of those cases without necessarily making X an inductive type?</p>",
        "id": 300531318,
        "sender_full_name": "King Arthur",
        "timestamp": 1664022668
    },
    {
        "content": "<p>The way to do this depends a lot on the way you prove that <code>x : X</code> can only take on <code>n</code> distinct values. For example, we have the notation <code>![1, 2, 3]</code> for writing a function <code>fin 3 → ℤ</code>. So if you have a surjective function <code>f : fin n → X</code> then you can take the section of <code>f</code> and compose it with a function like <code>![...]</code>.</p>",
        "id": 300533078,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1664023498
    },
    {
        "content": "<p>Good to know! But for the sake of simplicity, let's say there are only two cases: like, maybe <code>x : X</code> is either some object <code>e : X</code> or anything else that isn't <code>e</code>. How would I approach making <code>f : X → Y</code> using these two cases?</p>",
        "id": 300534485,
        "sender_full_name": "King Arthur",
        "timestamp": 1664024275
    },
    {
        "content": "<p>You can use an <code>if</code> expression: <code>def f (x : X) := if h : x = e then _ else _</code> (see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ite\">docs#ite</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dite\">docs#dite</a>)</p>",
        "id": 300535071,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1664024525
    },
    {
        "content": "<p>I see, thanks!</p>",
        "id": 300535178,
        "sender_full_name": "King Arthur",
        "timestamp": 1664024585
    },
    {
        "content": "<p>Also, is it possible to define a function from a set of ordered pairs, given a proof that it passes the vertical line test?</p>",
        "id": 300687580,
        "sender_full_name": "King Arthur",
        "timestamp": 1664137246
    },
    {
        "content": "<p>Not without classical.some but yes</p>",
        "id": 300689007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664138284
    },
    {
        "content": "<p>I'm fine with classical.some haha. is there any specific API for this task? or is this a lot more complicated than I'm thinking it is</p>",
        "id": 300689818,
        "sender_full_name": "King Arthur",
        "timestamp": 1664138929
    },
    {
        "content": "<p>Not complicated. What's the set you have? What if the caller of the function gives you a term that isn't in any of the pairs?</p>",
        "id": 300690200,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1664139282
    },
    {
        "content": "<p>right, fair. but let's say you do also have a proof that there's a unique pair for every single object in the domain. would that be enough?</p>",
        "id": 300690704,
        "sender_full_name": "King Arthur",
        "timestamp": 1664139716
    },
    {
        "content": "<p>I imagine the expression of that assumption is \"H : forall x : X, exists p in s, p.1 = x\", then your function is \"lambda x, (classical.some (H x)).2\"</p>",
        "id": 300690911,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1664139846
    },
    {
        "content": "<p>You don't even need a unique pair to define the function, just a pair.</p>",
        "id": 300690933,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1664139885
    },
    {
        "content": "<p>oh neat, thanks!</p>",
        "id": 300690955,
        "sender_full_name": "King Arthur",
        "timestamp": 1664139906
    },
    {
        "content": "<p>Or you can phrase it like \"H : forall x : X, exists y : Y, (x, y) in s\", and the function is \"lambda x, classical.some (H x)\"</p>",
        "id": 300691086,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1664140027
    }
]