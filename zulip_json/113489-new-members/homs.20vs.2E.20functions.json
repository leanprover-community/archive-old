[
    {
        "content": "<p>More beginner questions, hope that’s ok. My goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⇑</span><span class=\"n\">h2</span> <span class=\"bp\">∘</span> <span class=\"bp\">⇑</span><span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>but what I really want (to apply suitable lemmas) is what I can’t express better than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">monoid_hom.comp</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">monoid_hom.id</span> <span class=\"n\">G</span>\n</code></pre></div>\n<p>How do I go about this? Is there a way to apply this lemma (<code>is_free_group.hom_ext</code>) to the above goal and have lean somehow figure out that both sides are indeed homs?</p>",
        "id": 267791676,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642024506
    },
    {
        "content": "<p>mathlib has the style tendency to not use pointfree (comp) lemmas, but use fully applied lemmas. so often such goals are solved by using an extensionality lemma (or tactic) first</p>",
        "id": 267792627,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642025013
    },
    {
        "content": "<p>So in this case, you might have a proof of that lemma, let's say named <code>H</code>, and use <code>congr_fun H _</code></p>",
        "id": 267792745,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642025066
    },
    {
        "content": "<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> always helps to give concrete examples</p>",
        "id": 267792880,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642025155
    },
    {
        "content": "<p>I hope we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.coe_comp\">docs#monoid_hom.coe_comp</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.coe_id\">docs#monoid_hom.coe_id</a> (EDIT: no <code>coe_id</code> unfortunately), then you could do it as follows:</p>",
        "id": 267793308,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642025376
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">monoid_hom.coe_id</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">monoid_hom.id</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monoid_hom.comp</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">monoid_hom.id</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"bp\">∘</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">monoid_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">monoid_hom.coe_id</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 267793738,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642025588
    },
    {
        "content": "<p>Now in fact <code>coe_comp</code> and <code>coe_id</code> are true by definition, so you can actually cheat a bit and say:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monoid_hom.comp</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">monoid_hom.id</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"bp\">∘</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">coe_fn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>where <code>coe_fn</code> is the name of the double uparrow <code>⇑</code> implicitly converting a hom to a function.</p>",
        "id": 267794168,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642025825
    },
    {
        "content": "<p>That proof term works, thanks. At least the <code>sorry</code> is gone, and maybe I’ll learn how to do it more pretty later :)</p>",
        "id": 267795219,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642026129
    }
]