[
    {
        "content": "<p>For eg:  Your goal is to show a=b =&gt; c=d. How do you replace this goal to c!=d =&gt; a!=b? <br>\nThank You!</p>",
        "id": 179440831,
        "sender_full_name": "Quantum Horizon",
        "timestamp": 1572447768
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">library_search</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">Q</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">Q</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- not_imp_not</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I am learning to tame <code>library_search</code> slowly but surely.</p>",
        "id": 179441395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572448041
    },
    {
        "content": "<p>You can also try <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#contrapose\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#contrapose\">the <code>contrapose</code> tactic</a> in mathlib.</p>",
        "id": 179441422,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572448055
    },
    {
        "content": "<p>Does this tactic only do the other way to the OP though?</p>",
        "id": 179441513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572448098
    },
    {
        "content": "<p>Oh no it's exactly the right way</p>",
        "id": 179441552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572448123
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">push_neg</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 179441999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572448352
    },
    {
        "content": "<blockquote>\n<p>You can also try <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#contrapose\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#contrapose\">the <code>contrapose</code> tactic</a> in mathlib.</p>\n</blockquote>\n<p>Thank you for your reply. I am afraid, I am not having success using it. I have tried 'contrapose,'  'rw contrapose' and 'apply contrapose'. <br>\nI am trying to solve level 13, World 2 on the number theory game: <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a></p>",
        "id": 179442852,
        "sender_full_name": "Quantum Horizon",
        "timestamp": 1572448818
    },
    {
        "content": "<p>Those levels are not properly documented. Some of the lemmas are stated in an inconvenient manner, and I have not properly explained the key point that computer scientists think that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\implies</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span> is a function and they think that <code>≠ </code> is a function as well.</p>",
        "id": 179445009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572449941
    },
    {
        "content": "<p>I am in the process of working on proper documentation right now. I would be interested to know if you had had any difficulty with levels 3-1 to 3-8 and 4-1 to 4-7.</p>",
        "id": 179445085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572449992
    },
    {
        "content": "<blockquote>\n<p>I am in the process of working on proper documentation right now. I would be interested to know if you had had any difficulty with levels 3-1 to 3-8 and 4-1 to 4-7.</p>\n</blockquote>\n<p>I just finished the game and found it mostly easy (but I already have a little experience with formal provers). In particular, the commutativity theorems, which are referred as \"bosses\", are not more difficult than the other levels, in my opinion. The only level that took me a bit more of time was 3.12: my main mistake was to try to do induction on a, while it is more appropriate to do it on b and c (the fact that you need two inductions is itself an element of difficulty).</p>\n<p>Other than that, for a few levels I used tactics that had not been introduced already. For example, I don't think the instruction ever say how to destruct inequality (I don't remember the level number). I could carry on only because I already suspected that inequality is \"equality implies false\". In the same and possibly other levels you also need to that you can use exfalso or directly destruct false.</p>",
        "id": 179446076,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1572450489
    },
    {
        "content": "<p>Documenting destructing inequality is what I will be working on within an hour. I had not realised until today that you can solve all of world 4 including all prerequisites without ever using the <code>intro</code> tactic. Everyone is complaining that this is what they don't know how to do and I'm trying to fix it ASAP.</p>",
        "id": 179447411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572451185
    },
    {
        "content": "<blockquote>\n<p>Those levels are not properly documented. Some of the lemmas are stated in an inconvenient manner, and I have not properly explained the key point that computer scientists think that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\implies</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span> is a function and they think that <code>≠ </code> is a function as well.</p>\n</blockquote>\n<p>Just did world 3, level 1-8. It was quite easy apart from Level 7 which was more challenging than others and was not required to do level 8. I will let you know, how I do with world 4.</p>",
        "id": 179449081,
        "sender_full_name": "Quantum Horizon",
        "timestamp": 1572452062
    },
    {
        "content": "<blockquote>\n<p>I am in the process of working on proper documentation right now. I would be interested to know if you had had any difficulty with levels 3-1 to 3-8 and 4-1 to 4-7.</p>\n</blockquote>\n<p>There is a problem with level 9, world 3. It says a!=0 <strong>implies </strong>b!=0 implies ab!=0. It should be a!=0 '<strong>and</strong>' b!=0.</p>",
        "id": 179449513,
        "sender_full_name": "Quantum Horizon",
        "timestamp": 1572452306
    },
    {
        "content": "<blockquote>\n<p>It says a!=0 implies b!=0 implies ab!=0. It should be a!=0 'and' b!=0.</p>\n</blockquote>\n<p>Note that <code>a ≠ 0 → b ≠ 0 → a * b ≠ 0</code> should be read as <code>a ≠ 0 → (b ≠ 0 → a * b ≠ 0)</code> and <code>x → (y → z))</code> is equivalent to <code>((x ∧ y) → z)</code>. So there are two assumptions to the theorem, and you can apply <code>intro</code> twice to get at them.</p>",
        "id": 179450274,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1572452803
    },
    {
        "content": "<p>Computer scientists think that the form with two implications is the correct way to state theorems with two assumptions, and I'm inclined to agree with them :)</p>",
        "id": 179450310,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1572452821
    },
    {
        "content": "<p>AFAICT, it's the first level with two assumptions, so I would suggest to explain what's going on there</p>",
        "id": 179451190,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1572453367
    },
    {
        "content": "<blockquote>\n<p>There is a problem with level 9, world 3. It says a!=0 <strong>implies </strong>b!=0 implies ab!=0. It should be a!=0 '<strong>and</strong>' b!=0.</p>\n</blockquote>\n<p>Mathematicians do not know Curry-Howard! This is exactly the point! It's so interesting! It's really easy to train them all to use <code>rw</code> and <code>induction</code> but their way of thinking about implicitions is so different to Lean's that it can be really confusing. The first tactic taught in TPIL is <code>apply</code>.</p>",
        "id": 179456430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572456743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You may be way ahead of me, but having an example that focuses on doing something fun with or exploits currying/partial application might be helpful for readers.</p>",
        "id": 180024734,
        "sender_full_name": "Chris B",
        "timestamp": 1573041638
    },
    {
        "content": "<p>I am writing some levels now which might be very appropriate for this sort of thing. Thanks!</p>",
        "id": 180026111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573042856
    }
]