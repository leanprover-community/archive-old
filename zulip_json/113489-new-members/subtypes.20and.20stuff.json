[
    {
        "content": "<p>I have two conceptual questions. I'll ask them together because I think the answers might be related and are generally about automated type conversion/coercion etc..</p>\n<p>1) In my little project I often work with <code>(p: prime_spectrum A)</code> (<code>prime_spectrum</code> is defined as <code>def prime_spectrum := {I : ideal R // I.is_prime}</code> so I think it is a subtype, right?) so whenever I want to use a fact about ideals I have to enter <code>p.val</code> instead of <code>p</code>, is there a general way in Lean to lift all properties to a subtype? For example, I defined</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lifting the partial order of ideals to a partial order on prime ideals.</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_le_prime_spec</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]:</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">prime_spectrum</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p.val</span> <span class=\"bp\">≤</span> <span class=\"n\">q.val</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>which I was wondering if there was an approach to not do that manually?</p>\n<p>2) I made the following two definitions. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_integrally_closed</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">A</span><span class=\"o\">]:=</span>\n  <span class=\"n\">integral_closure</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">loc</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">localization</span> <span class=\"o\">(</span><span class=\"n\">p.val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime_compl</span>\n</code></pre></div>\n<p>The first one takes an integral domain, the second one defines a localisation at a prime ideal.<br>\nNow the latter should be an integral domain and thus I would want to be able to do <code>is_integrally_closed (loc A p)</code> but this doesn't type check as Lean doesn't know it is a integral domain (I think <code>localization</code> returns a quotient type, not sure what that is).</p>\n<p>What is the structure of lemma I would need to prove and how do I make Lean automatically find it?</p>\n<p>Thank you for the help and sorry for the long question!</p>",
        "id": 227470967,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614101803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> The order on <code>prime_spectrum</code> was added to mathlib last week. Do you have the latest version?</p>",
        "id": 227471234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614101895
    },
    {
        "content": "<p>no</p>",
        "id": 227471284,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614101911
    },
    {
        "content": "<p>good call</p>",
        "id": 227471322,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614101929
    },
    {
        "content": "<p>Also, it is recommended to write <code>x.as_ideal</code> instead of <code>x.val</code>. For <code>x.as_ideal</code> there are special lemmas and instances that for example automatically add the fact that it is a prime ideal to the typeclass system.</p>",
        "id": 227471345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614101942
    },
    {
        "content": "<p>do I just run <code>leanproject upgrade-mathlib</code> or is there more to it?</p>",
        "id": 227471715,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614102078
    },
    {
        "content": "<p>that should do it, are you working in a project that depends on mathlib?</p>",
        "id": 227471824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614102123
    },
    {
        "content": "<p>Or on mathlib itself?</p>",
        "id": 227471867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614102126
    },
    {
        "content": "<p>Note that <code>is_integrally_closed</code> is also already in mathlib, I think.</p>",
        "id": 227471902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614102141
    },
    {
        "content": "<p>And schemes are there, so the stuff about localizations must probably be there as well in one form or another.</p>",
        "id": 227471954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614102161
    },
    {
        "content": "<p>nvm worked. after restarting VS</p>",
        "id": 227471959,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614102164
    },
    {
        "content": "<p>I'll look again. But the conceptual questions would still be useful, assuming stuff wasn't already in the mathlib</p>",
        "id": 227472295,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614102282
    },
    {
        "content": "<p>especially (2)</p>",
        "id": 227472312,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614102290
    },
    {
        "content": "<p>would it be like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">loc_of_integral_domain</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"n\">A</span><span class=\"o\">):</span>\n  <span class=\"n\">integral_domain</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"n\">A</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 227472376,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614102313
    },
    {
        "content": "<p>(I think I missed something here that was mentioned somewhere in a tutorial)</p>",
        "id": 227472485,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614102363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/subtypes.20and.20stuff/near/227471867\">said</a>:</p>\n<blockquote>\n<p>Or on mathlib itself?</p>\n</blockquote>\n<p>a project that depends on mathlib. Don't feel comfortable enough with lean yet to contribute to mathlib. (but I have a notion of a regular local ring in terms of Krull dimension, so they might eventually be of interest if I learn enough how to write a nice API around stuff )</p>",
        "id": 227475025,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614103273
    },
    {
        "content": "<p>so, if you have a project that depends on mathlib, then yes <code>leanproject up</code> will do the job, and you don't have to worry about your commits on master fighting with mathlib master.</p>",
        "id": 227476138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614103675
    },
    {
        "content": "<p>also... if you already have Krull dimension and regular local ring and you are potentially interested in contributing to mathlib, then I suggest you start with some small PRs</p>",
        "id": 227476333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614103730
    },
    {
        "content": "<p>It doesn't make sense to write 3500 lines of code, and discover that you need to rewrite all of it because mathlib wants the basics to be a bit different or more general etc...</p>",
        "id": 227476418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614103767
    },
    {
        "content": "<p>once you have 500 lines of code, look for 100 self-contained lines (e.g. basics of Krull dimension) and PR them</p>",
        "id": 227476470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614103791
    },
    {
        "content": "<p>good call. I mean I have <em>a definition</em> of both, but basically no facts about them, so it's not really helpful (yet).</p>",
        "id": 227479596,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614104950
    }
]