[
    {
        "content": "<p>(From <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#exercises\">here</a>) I would like hints for this. So I understand I have to get a function with type signature (p ↔ ¬p) → false, so the function has to start with <code>(λhpnp:(p↔¬p), )</code> and then prove <code>false</code> by getting a contradiction by reaching a term and its negation. I thought doing <code>hpnp.mp hpnp</code>, but <code>hpnp</code> is not of type <code>p</code>. How do I proceed?</p>",
        "id": 228070811,
        "sender_full_name": "Kritixi Lithos",
        "timestamp": 1614446298
    },
    {
        "content": "<p>This is a frequently asked question, see e.g. <a href=\"#narrow/stream/113489-new-members/topic/.C2.AC.20(p.20.E2.86.94.20.C2.AC.20p)\">this thread</a>.</p>",
        "id": 228071401,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614446996
    },
    {
        "content": "<p>Does <a href=\"#narrow/stream/113489-new-members/topic/.C2.AC.20%28p.20.E2.86.94.20.C2.AC.20p%29/near/194285992\">this link</a> link to the top of it? That might be a better place to start.</p>",
        "id": 228071525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614447090
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (yes it links to the top of it) and <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>. I had forgotten the lambda resulting from proving false from assumption <code>hp:p</code> is itself of type ¬p. So converting your proof to lambda functions gives the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">hpnp</span><span class=\"o\">,</span><span class=\"n\">absurd</span><span class=\"o\">(</span><span class=\"n\">hpnp.mpr</span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">hp</span><span class=\"o\">:</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">absurd</span> <span class=\"n\">hp</span><span class=\"o\">(</span><span class=\"n\">hpnp.mp</span> <span class=\"n\">hp</span><span class=\"o\">)))(</span><span class=\"bp\">λ</span><span class=\"n\">hp</span><span class=\"o\">:</span><span class=\"n\">p</span><span class=\"o\">,((</span><span class=\"n\">absurd</span> <span class=\"n\">hp</span><span class=\"o\">(</span><span class=\"n\">hpnp.mp</span> <span class=\"n\">hp</span><span class=\"o\">)))))</span>\n</code></pre></div>\n<p>Edit: also searching for <code>¬(p ↔ ¬p)</code> using the search tool doesn't yield any results for me</p>",
        "id": 228072784,
        "sender_full_name": "Kritixi Lithos",
        "timestamp": 1614448526
    },
    {
        "content": "<p>If you're fond of term mode proofs, <a href=\"#narrow/stream/113489-new-members/topic/basics/near/185070320\">this post of mine</a> shows how you can derive a proof like that by \"chasing underscores\".</p>",
        "id": 228073301,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614449110
    },
    {
        "content": "<p>Is it possible to do better than 31 characters?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩,(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"bp\">$λ</span> <span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 228073326,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1614449152
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 228073392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614449190
    },
    {
        "content": "<p>Probably any proof is \"better\", even if it's not shorter :)</p>",
        "id": 228073405,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1614449217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> you don't need the spaces after the lambdas, right?</p>",
        "id": 228073432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614449273
    },
    {
        "content": "<p>This is a dangerous game...</p>",
        "id": 228073502,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614449325
    },
    {
        "content": "<p><span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> Oh, good point. I thought that it wouldn't work since the lambda changes color in VS Code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩,(</span><span class=\"bp\">λ</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"bp\">$λ</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 228073527,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1614449357
    },
    {
        "content": "<p>I wonder if <a href=\"https://en.wikipedia.org/wiki/Kolmogorov_complexity\">Kolmogorov</a> would approve of <code>simp</code>.</p>",
        "id": 228073539,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614449379
    },
    {
        "content": "<p>Down to 27:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--27</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,(</span><span class=\"bp\">λ</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"bp\">$</span><span class=\"n\">a.2c</span><span class=\"o\">)</span><span class=\"bp\">$λ</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">a.1c</span> <span class=\"n\">c</span>\n\n<span class=\"c1\">--28</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,(</span><span class=\"bp\">λ</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">a.1c</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">$</span><span class=\"n\">a.2</span><span class=\"bp\">$λ</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">a.1c</span> <span class=\"n\">c</span>\n\n<span class=\"c1\">--28</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩,(</span><span class=\"bp\">λ</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"bp\">$λ</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 228074233,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1614450061
    },
    {
        "content": "<p>i think yes, the kolmogorov complexity is an information theoretic argument and has nothing to do with what is available in the language</p>\n<p>information theoretic laws are perpetual and there is no way to break them <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 228111600,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1614495746
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 228112334,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1614496599
    },
    {
        "content": "<p>Information theoretic laws are also only asymptotic and say nothing about the capabilities of the language. Really it doesn't apply to the lean proof task at all, because as kevin showed <code>by simp</code> works here, and one can imagine a souped up version of <code>simp</code> that proves every provable statement by enumeration, so lean proofs can be O(1) no matter the statement. In fact, even if you ban tactics, it's possible to get <code>rfl</code> to do this too, although I don't know if it's possible to get unbounded recursion during reduction, so it's really something like O(inverse ackermann) (except even slower than that, it's the inverse of the fastest growing functions in DTT which are truly stupendous).</p>",
        "id": 228116472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614501852
    }
]