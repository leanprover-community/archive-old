[
    {
        "content": "<p>Hello there, I am working through the proof that left identity and left inverse implies a group from <br>\n<a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">https://leanprover-community.github.io/mathematics_in_lean/</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mul_right_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>          <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h₂</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>                        <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>But I face some difficulty. I don't see why line 6 fails.</p>",
        "id": 198437635,
        "sender_full_name": "Syx Pek",
        "timestamp": 1590152057
    },
    {
        "content": "<p>The left arrow means you want to rewrite using <code>h₂</code> from <code>a</code> to <code>(a⁻¹)⁻¹</code>. Using just <code>rw h₂</code> works fine!</p>",
        "id": 198437899,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590152277
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mul_right_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>          <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h₂</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>                        <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198437960,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590152294
    },
    {
        "content": "<p>I see. But why doesn't the approach I suggested would fail. It says in the documentation, that it rewrites only the first copy of it, but it seems to rewrite all copies?</p>",
        "id": 198438317,
        "sender_full_name": "Syx Pek",
        "timestamp": 1590152535
    },
    {
        "content": "<p>Out of interest where did you read that it rewrites only the first copy?</p>",
        "id": 198438607,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590152737
    },
    {
        "content": "<p>In my experience it normally rewrites every instance :/</p>",
        "id": 198438674,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590152774
    },
    {
        "content": "<p>I <em>think</em> that it'll rewrite all copies of the first instance it finds, if that makes sense. That is, if you do <code>rw add_comm</code> and your term has a bunch of <code>a + b</code> and <code>c + d</code>, it'll change all of the <code>a+b</code> to <code>b+a</code> but none of the <code>c+d</code></p>",
        "id": 198438702,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590152796
    },
    {
        "content": "<p>It says \"Sometimes the left-hand side of an identity can match more than one subterm in the pattern, in which case the rewrite tactic chooses the first match it finds when traversing the term. If that is not the one you want, you can use additional arguments to specify the appropriate subterm.\" on <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html</a></p>",
        "id": 198438877,
        "sender_full_name": "Syx Pek",
        "timestamp": 1590152950
    },
    {
        "content": "<p>Yeah, so seemingly it chooses the first match and applies that one as much as it can</p>",
        "id": 198439058,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590153057
    },
    {
        "content": "<p>Yes, it is a confusing description of a confusing behavior</p>",
        "id": 198439111,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590153103
    },
    {
        "content": "<p>There is also <code>nth_rewrite</code> if you want control over this. (As well as the <code>occs</code> configuration argument for <code>rw</code>, which is even more confusingly specified.)</p>",
        "id": 198449384,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590158606
    },
    {
        "content": "<p>But usually <code>conv</code> to zoom into the place you're interested in is clearer and more maintainable.</p>",
        "id": 198449405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590158623
    }
]