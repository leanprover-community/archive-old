[
    {
        "content": "<p>Given the following mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ttype</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">ty_bool</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_abs</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_true</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_false</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">ctxtype</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lookup_list</span> <span class=\"o\">:</span> <span class=\"n\">ctxtype</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">head</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"n\">n</span>  <span class=\"o\">:=</span> <span class=\"n\">lookup_list</span> <span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">list.nil</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">in_ctx</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">:</span><span class=\"n\">ctxtype</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lookup_list</span> <span class=\"n\">ctx</span> <span class=\"n\">idx</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ttype</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t_ᾰ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">inctx</span> <span class=\"o\">:</span> <span class=\"n\">lookup_list</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lookup_list</span> <span class=\"n\">at</span> <span class=\"n\">inctx</span><span class=\"o\">,</span> <span class=\"c1\">--here</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I would expect the rewrite to produce a term in the context of the form <code>some T = some S</code>. However, it instead produces two goals, one of which is unprovable (<code>¬ 0 = 0</code>). What is happening here?</p>\n<p>Thanks,</p>",
        "id": 230846932,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616066587
    },
    {
        "content": "<p>It seems to be matching the second equation rather than the first?</p>",
        "id": 230847788,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616067110
    },
    {
        "content": "<p>I'm guessing the unprovable goal comes from this <code>lookup_list.equations._eqn_3 : ∀ (head : ttype) (tail : list ttype) (n : ℤ), ¬n = 0 → lookup_list (head :: tail) n = lookup_list tail (n - 1)</code></p>",
        "id": 230847873,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616067153
    },
    {
        "content": "<p>But I'm not sure why it's matching the second one rather than the first.</p>",
        "id": 230847986,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616067236
    },
    {
        "content": "<p>I have no idea about the reasons, but in any case, to solve your goal, instead of <code>rw</code> you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ttype</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t_ᾰ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">inctx</span> <span class=\"o\">:</span> <span class=\"n\">lookup_list</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lookup_list</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">inctx</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ttype</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t_ᾰ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">inctx</span> <span class=\"o\">:</span> <span class=\"n\">lookup_list</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">lookup_list</span> <span class=\"n\">at</span> <span class=\"n\">inctx</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">inctx</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and it works.</p>",
        "id": 230849231,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1616067974
    },
    {
        "content": "<p>Thanks! I made a lemma with this workaround for now until I find the root cause.</p>",
        "id": 230850257,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616068582
    },
    {
        "content": "<p>On an unrelated note,  is <code>lookup_list</code> intended to find the nth element in the context? If so, is there a reason for it to have an <code>int</code> argument instead of a <code>nat</code> one? I imagine for some proofs and defs it would be easier to work with <code>nat</code>. And also, if it helps, there exists <a href=\"https://leanprover-community.github.io/mathlib_docs/init/data/list/basic.html#list.nth\">list.nth</a> which does precisely that.</p>",
        "id": 230852502,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1616069788
    },
    {
        "content": "<p>It has an int argument because I forgot to change it back while I was experimenting with different types.</p>\n<p>list.nth is a great suggestion, and it doesn't have this issue! Thank you <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 230854313,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616070702
    }
]