[
    {
        "content": "<p>I'm going through <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes-and-instances\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes-and-instances\">TPIL's chapter on typeclasses</a> and while messing around tried the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">default</span> <span class=\"n\">ℚ</span> <span class=\"c1\">-- no type class instance of inhabited ℚ</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">default</span> <span class=\"n\">ℝ</span> <span class=\"c1\">-- timeout</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">default</span> <span class=\"n\">ℂ</span> <span class=\"c1\">-- timeout</span>\n</pre></div>\n\n\n<p><code>#check</code> succeeds on the last two.</p>\n<p>Questions: Is the lack of something like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>in data.rat just an oversight or was this intentional? Why do the other two lines time out?</p>\n<p>Meta-question: am I right that this doesn't really matter; i.e. <code>default</code> is unlikely to be used in an \"actual\" proof?</p>",
        "id": 132070075,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1534192326
    },
    {
        "content": "<p>I suspect that <code>#reduce</code> fails on the last two because the reals and complexes are in general a pain to compute with -- they don't have decidable equality and they might well not even have an algorithm for printing out a real number. What would you expect  sqrt(2) to look like in Lean? Is it supposed to print out all the digits? :-)</p>\n<p>I would imagine that Q not being inhabited, if true, is an oversight.</p>",
        "id": 132070230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534192536
    },
    {
        "content": "<p>They time out because a real number is built from a Cauchy sequence, and making a Cauchy sequence requires a proof that the sequence is Cauchy. When you #reduce a real, it will try to unfold this proof to axioms, and this will be huge.</p>",
        "id": 132070343,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534192641
    },
    {
        "content": "<p>Thanks, that makes sense! Out of curiosity, what would be the right way to get Lean to spit out the default elements for ℝ and ℂ then?</p>",
        "id": 132070420,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1534192708
    },
    {
        "content": "<p>The best way to check what they are is to look at the definition of the inhabited instance. Reals don't have decidable equality, so given a real, lean cannot tell if it equals zero or not.</p>",
        "id": 132070513,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534192824
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">d</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n\n<span class=\"cm\">def d : inhabited ℝ :=</span>\n<span class=\"cm\">real.inhabited</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">inhabited</span> <span class=\"c1\">-- inhabited ℝ</span>\n\n<span class=\"c1\">-- Now right-click on real.inhabited and select &quot;peek definition&quot;</span>\n</pre></div>",
        "id": 132070886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534193272
    },
    {
        "content": "<p>I only mention this because I know of no other way of figuring out the real number which was used other than by looking at the source. I don't know how to look at the definition of d directly, as it were.</p>",
        "id": 132071991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534194475
    },
    {
        "content": "<p>Ah, OK, so in general, <code>instance : typeclass something</code> can be accessed with <code>something.typeclass</code>. I must have read this somewhere...</p>\n<p>Knowing that I can just <code>#print real.inhabited</code> and read off <code>{default := 0}.</code></p>\n<p>As an aside, it seems that <code>rat</code> is missing a bunch of other stuff too, like <code>rat.ring</code>, <code>rat.add_group</code>, <code>rat.field</code>, etc. although they're all an easy <code>by apply_instance</code> away.</p>",
        "id": 132072791,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1534195378
    },
    {
        "content": "<p>waitwaitwait. If <code>by apply_instance</code> works, it's there.</p>",
        "id": 132072805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534195412
    },
    {
        "content": "<p>A lot of these instances might be being inferred automatically. For example, Lean knows that any <code>field</code> is automatically a <code>comm_ring</code>, a <code>ring</code>, an <code>add_monoid</code> etc etc.</p>",
        "id": 132072874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534195457
    },
    {
        "content": "<blockquote>\n<p>waitwaitwait. If <code>by apply_instance</code> works, it's there.</p>\n</blockquote>\n<p>Maybe I used the wrong words, but I was referring to the following behavior:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span> <span class=\"c1\">-- unknown identifier</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">rat</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span> <span class=\"c1\">-- Lean is happy</span>\n</pre></div>",
        "id": 132072906,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1534195517
    },
    {
        "content": "<p>Another way of discovering the name is<br>\n ```lean<br>\ndef foo : inhabited real := by apply_instance<br>\n#print foo</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 132072965,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534195569
    },
    {
        "content": "<p>Bryan, this is not a bug, this is what the type class system is about</p>",
        "id": 132072972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534195589
    },
    {
        "content": "<p>You get cascading for free</p>",
        "id": 132072982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534195605
    },
    {
        "content": "<blockquote>\n<p>Bryan, this is not a bug, this is what the type class system is about</p>\n</blockquote>\n<p>Right, I didn't intend to imply that there were any bugs other than in my understanding.</p>",
        "id": 132073073,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1534195688
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/254\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/254\">https://github.com/leanprover/mathlib/pull/254</a></p>",
        "id": 132073292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534195948
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">x</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n\n<span class=\"cm\">def x : comm_ring ℚ :=</span>\n<span class=\"cm\">field.to_comm_ring ℚ</span>\n\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>Lean knows that the rationals are a commutative ring, but the instance is not called <code>rat.comm_ring</code>, it's called something else. </p>\n<p>If <code>X</code> is an inductive type and there's something called <code>X.foo</code>, and if <code>a</code> has type <code>X</code>, then you can sometimes talk about <code>a.foo</code> on a good day. But that's not what's happening here. It's not <code>rat</code> that has type <code>comm_ring</code>, it's some other thing which has type <code>comm_ring rat</code>.</p>",
        "id": 132073578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534196312
    },
    {
        "content": "<blockquote>\n<p>Lean knows that the rationals are a commutative ring, but the instance is not called <code>rat.comm_ring</code>, it's called something else. </p>\n</blockquote>\n<p>I don't think it has a name, it's just inferred from <code>rat.discrete_linear_ordered_field</code> or something.</p>",
        "id": 132073675,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534196464
    },
    {
        "content": "<p>I guess the term is <code>field.to_comm_ring ℚ</code> and there's no name for this term. On the other hand when <code>instance : foo bar  := blah </code> is run, Lean has a go at naming the instance itself using some vaguely sane algorithm.</p>",
        "id": 132073758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534196623
    },
    {
        "content": "<p>It looks like <code>field.to_comm_ring</code> itself is created automatically from <code>extends comm_ring</code> in the <code>class field</code> declaration.</p>",
        "id": 132074255,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1534197294
    },
    {
        "content": "<p>Yeah, that's a cool part of type class inference. The projectors get constructed automatically.</p>",
        "id": 132074504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534197670
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">d</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n\n<span class=\"cm\">def d : comm_monoid.{0} rat :=</span>\n<span class=\"cm\">@linear_ordered_comm_ring.to_comm_monoid.{0} rat</span>\n<span class=\"cm\">  (@decidable_linear_ordered_comm_ring.to_linear_ordered_comm_ring.{0} rat</span>\n<span class=\"cm\">     (@discrete_linear_ordered_field.to_decidable_linear_ordered_comm_ring.{0} rat rat.discrete_linear_ordered_field))</span>\n\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>Type class inference is quite clever.</p>",
        "id": 132074849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534198171
    },
    {
        "content": "<p>It looks much more persistent than clever when I put on <code>set_option trace.class_instances true</code> <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 132075092,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1534198528
    }
]