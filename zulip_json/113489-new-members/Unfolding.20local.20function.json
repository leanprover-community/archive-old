[
    {
        "content": "<p>It seems when using let to declare a function in a block of tactics that rw/simp/unfold don’t work on it. Is there a different tactic needed for that? FWIW, I’m defining a local function to apply an induction principle and need to prove some  properties of it. Also, it’s technically a closure</p>",
        "id": 310122676,
        "sender_full_name": "Felipe",
        "timestamp": 1668483414
    },
    {
        "content": "<p><code>dsimp only [name_of_your_function]</code> should work. I forgot whether <code>simp only</code> is supposed to work ...</p>",
        "id": 310122823,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668483562
    },
    {
        "content": "<p><code>simp_rw F</code> might also work (where <code>F</code> is the name of your function)</p>",
        "id": 310123670,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668484485
    },
    {
        "content": "<p>Which version of Lean is it for?</p>",
        "id": 310163827,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668505838
    },
    {
        "content": "<p>Unless it is explicitly said, we always talk about Lean 3 (except in the Lean4 stream of course).</p>",
        "id": 310164083,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668505935
    },
    {
        "content": "<p>I was confused because I never saw <code>simp_rw</code> before.</p>",
        "id": 310164430,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668506076
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp_rw\">Here</a> it is.</p>",
        "id": 310164567,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668506134
    },
    {
        "content": "<p>Oh! It looks delicious!</p>",
        "id": 310164735,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668506180
    },
    {
        "content": "<p>If <code>rw</code> gives the infamous \"motive is not type correct\" error, then <code>simp_rw</code> is the first thing to try.</p>",
        "id": 310165049,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668506292
    },
    {
        "content": "<p>It's also very useful to rewrite under binders.</p>",
        "id": 310165118,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668506321
    },
    {
        "content": "<p>Thanks! Is there an equivalent in Lean4?</p>",
        "id": 310166585,
        "sender_full_name": "Felipe",
        "timestamp": 1668506805
    },
    {
        "content": "<p>If you use mathlib4 there is a direct replacement <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/SimpRw.html#Mathlib.Tactic.tacticSimp_rw__\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/SimpRw.html#Mathlib.Tactic.tacticSimp_rw__</a></p>",
        "id": 310167005,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668506933
    },
    {
        "content": "<p>Thanks. I'm still getting \"invalid 'simp', proposition expected\" when I do <code>simp_rw [f] at X</code> But I was able to work around by switching to term mode</p>",
        "id": 310254482,
        "sender_full_name": "Felipe",
        "timestamp": 1668534221
    },
    {
        "content": "<p>What is <code>f</code> and <code>X</code> in your context?</p>",
        "id": 310259121,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668535686
    },
    {
        "content": "<p>Is this related to <a href=\"https://proofassistants.stackexchange.com/questions/1846/proving-with-non-structural-recursion-in-lean4\">https://proofassistants.stackexchange.com/questions/1846/proving-with-non-structural-recursion-in-lean4</a>?  My answer hopefully will get you started, but this group might better help you complete your proof.</p>",
        "id": 310393762,
        "sender_full_name": "Jason Rute",
        "timestamp": 1668600495
    },
    {
        "content": "<p>Thank you! Your answer did indeed get me on the right track. Seeing the autogenerated lemmas helped me figure out the issue in the original recursive definition and I was able to fix</p>",
        "id": 310737473,
        "sender_full_name": "Felipe",
        "timestamp": 1668737906
    }
]