[
    {
        "content": "<p>Specifically, I want a way to extract the base-n digits of a number as a list. Does this already exist?</p>",
        "id": 147407947,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1541805834
    },
    {
        "content": "<p>that seems pretty specialized, so i doubt it</p>",
        "id": 147408048,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541805932
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">to_digits</span> <span class=\"mi\">2</span> <span class=\"mi\">100</span> <span class=\"c1\">--[0, 0, 1, 0, 0, 1, 1]</span>\n</pre></div>",
        "id": 147408056,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541805940
    },
    {
        "content": "<p>woah, i'm wrong</p>",
        "id": 147408061,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541805951
    },
    {
        "content": "<p>That's just there so numerals can be printed and parsed.</p>",
        "id": 147408167,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541806066
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/repr.lean#L77\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/repr.lean#L77\">Here it is in core lean</a>. As a newbie to functional programming, I thought this was super cool.</p>",
        "id": 147410490,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1541809159
    },
    {
        "content": "<p>oh so that's how <code>repr</code> works :-)</p>",
        "id": 147411489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541810713
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">repr2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">to_digits</span> <span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">digit_char</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"bp\">.</span><span class=\"n\">as_string</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">10000</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_repr2</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">repr2</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">7</span> <span class=\"c1\">-- 111</span>\n</pre></div>\n\n\n<p>woo I have binary Lean!</p>",
        "id": 147411727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541811084
    },
    {
        "content": "<p>Hide that in xenalib somwhere and confuse everyone.</p>",
        "id": 147412552,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541812346
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">to_digits</span> <span class=\"mi\">2</span> <span class=\"mi\">100</span> <span class=\"c1\">--[0, 0, 1, 0, 0, 1, 1]</span>\n</pre></div>\n\n\n</blockquote>\n<p>Nice!</p>",
        "id": 147431978,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1541853683
    },
    {
        "content": "<p>The way to find it is to think \"hmm, how are naturals being printed?\" then \"hmm, what is the definition of <code>nat.repr</code>?\"</p>",
        "id": 147432166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541854096
    }
]