[
    {
        "content": "<p>Is there a way to get a suffix from a list, or more generally a slice of a list?<br>\nSomething like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">suffix</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">suffix</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 229699693,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615394782
    },
    {
        "content": "<p>A combination of <code>take</code> and <code>reverse</code> would work. Or if you know the length already, <code>drop</code>.</p>",
        "id": 229700153,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615394926
    },
    {
        "content": "<p>I don't understand how <code>[A, B].suffix 3 = []</code> is true though</p>",
        "id": 229700230,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615394949
    },
    {
        "content": "<p>For any reasonable <code>suffix</code></p>",
        "id": 229700253,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615394957
    },
    {
        "content": "<p>I'm thinking python-style</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">:]</span>\n</code></pre></div>",
        "id": 229700321,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615394984
    },
    {
        "content": "<p>Maybe taking the second component of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.split_at\">docs#list.split_at</a> is what you want?</p>",
        "id": 229700716,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615395118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/Suffix.20of.20list/near/229700716\">said</a>:</p>\n<blockquote>\n<p>Maybe taking the second component of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.split_at\">docs#list.split_at</a> is what you want?</p>\n</blockquote>\n<p>That looks promising:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">split_at</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"o\">([</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">],</span> <span class=\"o\">[])</span>\n</code></pre></div>",
        "id": 229700923,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615395177
    },
    {
        "content": "<p>It returns <code>[]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.defs</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">([</span><span class=\"sc\">'A'</span><span class=\"o\">,</span><span class=\"sc\">'B'</span><span class=\"o\">,</span><span class=\"sc\">'C'</span><span class=\"o\">,</span><span class=\"sc\">'D'</span><span class=\"o\">,</span><span class=\"sc\">'E'</span><span class=\"o\">,</span><span class=\"sc\">'F'</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">split_at</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n<span class=\"c1\">-- ['D', 'E', 'F']</span>\n<span class=\"k\">#eval</span> <span class=\"o\">([</span><span class=\"sc\">'A'</span><span class=\"o\">,</span><span class=\"sc\">'B'</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">split_at</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n<span class=\"c1\">-- []</span>\n</code></pre></div>",
        "id": 229701533,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615395373
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.split_at_eq_take_drop\">docs#list.split_at_eq_take_drop</a></p>",
        "id": 229701664,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615395422
    },
    {
        "content": "<p>So provably equal to my first definition</p>",
        "id": 229701731,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615395443
    },
    {
        "content": "<p>Yep, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.drop\">docs#list.drop</a> is what you want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.defs</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">([</span><span class=\"sc\">'A'</span><span class=\"o\">,</span><span class=\"sc\">'B'</span><span class=\"o\">,</span><span class=\"sc\">'C'</span><span class=\"o\">,</span><span class=\"sc\">'D'</span><span class=\"o\">,</span><span class=\"sc\">'E'</span><span class=\"o\">,</span><span class=\"sc\">'F'</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ['D', 'E', 'F']</span>\n<span class=\"k\">#eval</span> <span class=\"o\">([</span><span class=\"sc\">'A'</span><span class=\"o\">,</span><span class=\"sc\">'B'</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"c1\">-- []</span>\n</code></pre></div>",
        "id": 229701991,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615395530
    },
    {
        "content": "<p>Ohhh, perfect :)</p>",
        "id": 229702070,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615395559
    },
    {
        "content": "<p>Oh, you mean <code>suffix 3</code> as in<code> suffix after removing 3 elements</code>. Yes, that's <code>drop</code></p>",
        "id": 229702377,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615395645
    },
    {
        "content": "<p>Well I actually meant suffix as _the last n elements_, but <code>drop</code> turns out to work better for my purposes :)</p>",
        "id": 229702588,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615395712
    }
]