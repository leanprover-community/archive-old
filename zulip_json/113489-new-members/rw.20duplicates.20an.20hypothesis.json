[
    {
        "content": "<p>In the following example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.roots_of_unity</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.minimal_polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_primitive_root</span> <span class=\"n\">μ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">n</span> <span class=\"n\">μ</span> <span class=\"n\">h</span> <span class=\"n\">hpos</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">primitive_root_is_integral</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℤ</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">minimal_polynomial</span> <span class=\"o\">(</span><span class=\"n\">primitive_root_is_integral</span> <span class=\"n\">h</span> <span class=\"n\">hpos</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hn</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">--it creates another h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">--now the second h is μ = 1</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>when I use <code>rw hn at h</code>, it creates a new hypothesis <code>h</code>, keeping also the old one. I think because <code>h</code> is hidden in the goal, that is displayed as <code>minimal_polynomial _ = X - 1</code>. In any case I don't know how to use this, <code>rw h</code> doesn't work. I also created a new hypothesis <code>muone : μ = 1</code> to be sure that I am using the correct one, but <code>rw muone</code>  says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">minimal_polynomial</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How can I use that <code>μ = 1</code>? Thank you! </p>\n<p>Note that I know how to prove that the minimal polynomial of <code>1 : K</code> is <code>X - 1</code>, that's not the problem.</p>",
        "id": 217556567,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606059453
    },
    {
        "content": "<p><code>subst hn</code> might work, as might <code>simp [hn] at *</code>. But they might not (I'm not at a computer right now)</p>",
        "id": 217556833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606059867
    },
    {
        "content": "<p>You're right that lean demands that h is preserved because it's in the goal</p>",
        "id": 217556849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606059894
    },
    {
        "content": "<p>when you get that motive error, simplest work around is to use simp_rw</p>",
        "id": 217557000,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606060116
    },
    {
        "content": "<p>So what you want to prove is that the minimal polynomial of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>-st root of unity is <code>X-1</code> right?</p>",
        "id": 217557001,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1606060121
    },
    {
        "content": "<p><code>subst</code> does exactly what I want, thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ! I have to understand  what is the difference between <code>rw</code> and <code>subs</code>...</p>",
        "id": 217557017,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606060153
    },
    {
        "content": "<p>and how do you close the <code>goal</code>, finally?</p>",
        "id": 217557108,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1606060292
    },
    {
        "content": "<p><code>subst hn</code> says \"completely rip out <code>n</code> from the entire local context all in one go and replace all occurrences with 1\". <code>rw hn at h</code> rewrites only at h, and then tries to clear the old h but the clear fails because h is still being used somewhere.</p>",
        "id": 217557110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606060294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span>  The point is that I need to prove it <em>stated like that</em> (it is indeed one step in a more interesting lemma, and morally the easy step, I was surprised to get stuck on it).</p>",
        "id": 217557164,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606060342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20duplicates.20an.20hypothesis/near/217557164\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span>  The point is that I need to prove it <em>stated like that</em> (it is indeed one step in a more interesting lemma, and morally the easy step, I was surprised to get stuck on it).</p>\n</blockquote>\n<p>Yes, yes, I got that: I was trying to understand the statement. But I got that your point was about <code>rw</code> versus <code>subst</code>. At any rate, how do you finish with <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's suggestion?</p>",
        "id": 217557177,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1606060377
    },
    {
        "content": "<p>Yakov's suggestion works in situations where the <code>subst</code> trick doesn't, because the <code>subst</code> trick only works if the hypothesis is <code>&lt;variable&gt; = ...</code> or <code> ... = &lt;variable&gt;</code></p>",
        "id": 217557186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606060398
    },
    {
        "content": "<p><code>simp_rw hn at h</code> has the same effect as <code>rw hn at h</code>, it creates another <code>h</code>.</p>",
        "id": 217557262,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606060535
    },
    {
        "content": "<p><code>simp_rw muone</code> indeed does not give any error,  and the goal becomes <code>minimal_polynomial _ = X - 1</code>. If I go on the underscore VS Code says <code>λ {x : K}, is_integral ℤ x</code>, that confuses me...</p>",
        "id": 217557331,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606060617
    },
    {
        "content": "<p>Nothing wrong with having another h</p>",
        "id": 217557344,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606060660
    },
    {
        "content": "<p>The simplified <code>h</code> will be after the unsimplified one, so it will be the one lean uses in rewrites etc</p>",
        "id": 217557399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606060726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20duplicates.20an.20hypothesis/near/217557331\">said</a>:</p>\n<blockquote>\n<p><code>simp_rw muone</code> indeed does not give any error,  and the goal becomes <code>minimal_polynomial _ = X - 1</code>. If I go on the underscore VS Code says <code>λ {x : K}, is_integral ℤ x</code>, that confuses me...</p>\n</blockquote>\n<p>This happened also with your code, no? Well, at least the first part</p>",
        "id": 217557409,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1606060748
    },
    {
        "content": "<p>You can also make a new hypothesis with \"have newh : is_primitive_root mu 1 := by...\"</p>",
        "id": 217557414,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606060760
    },
    {
        "content": "<p>You should maybe rewrite at <code>h |-</code></p>",
        "id": 217557416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606060762
    },
    {
        "content": "<p>You'll also need to rw at hpos</p>",
        "id": 217557474,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606060818
    },
    {
        "content": "<p>Maybe I am confused, but it seems that <code>subst</code> is the only way I found to make <code>μ</code> disappears (replaced by <code>1</code>) from the goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.roots_of_unity</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.minimal_polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_primitive_root</span> <span class=\"n\">μ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">n</span> <span class=\"n\">μ</span> <span class=\"n\">h</span> <span class=\"n\">hpos</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">primitive_root_is_integral</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℤ</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">minimal_polynomial</span> <span class=\"o\">(</span><span class=\"n\">primitive_root_is_integral</span> <span class=\"n\">h</span> <span class=\"n\">hpos</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">muone</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"c1\">--  simp_rw muone, --goal says λ {x : K}, is_integral ℤ x</span>\n<span class=\"c1\">--  subst muone, --goal says is_integral ℤ 1</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217558050,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606061690
    },
    {
        "content": "<p>But how do you intend to prove the result? I still haven't understood the problem with two <code>h</code></p>",
        "id": 217558127,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1606061795
    },
    {
        "content": "<p>The two <code>h</code> was not a real problem, just something looked weird to me. Once the goal becomes to prove that the minimal polynomial of <code>1</code> is <code>X - 1</code> it's OK, see <a href=\"https://github.com/leanprover-community/mathlib/issues/5062\">#5062</a>. The problem was that I wasn't able to modify the goal, even knowing <code>μ = 1</code>, the goal was still about the minimal polynomial of <code>μ</code>.</p>",
        "id": 217558220,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606061970
    },
    {
        "content": "<p>Ah, I see now.</p>",
        "id": 217558228,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1606061995
    }
]