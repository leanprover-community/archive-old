[
    {
        "content": "<p>Here is the theorem (either prime or composite) that I am trying to prove (I also gave some helper lemmas that are already proven). I created a lemma called <code>dvd_n_less_than_n</code> but I cannot seem to apply it. I commented this near the end of my theorem. Please help.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">dvd</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n<span class=\"n\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dvd</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n<span class=\"n\">def</span> <span class=\"n\">composite</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span><span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">greater_than_not_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">ne_bot_of_gt</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dvd_n_less_than_n</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">dvd</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"bp\">_</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_left</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"bp\">≤_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_iff_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"bp\">_</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">either_prime_or_composite</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ge</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">composite</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">prime</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">composite</span><span class=\"o\">,</span>\n\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n        <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">linarith</span><span class=\"o\">,</span>\n        <span class=\"o\">}</span> <span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n           <span class=\"k\">let</span> <span class=\"n\">hu_left</span><span class=\"o\">:=</span> <span class=\"n\">hu</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n           <span class=\"n\">rw</span> <span class=\"n\">dvd</span> <span class=\"n\">at</span> <span class=\"n\">hu_left</span><span class=\"o\">,</span>\n           <span class=\"n\">cases</span> <span class=\"n\">hu_left</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n\n           <span class=\"k\">have</span> <span class=\"n\">u_g_k</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">&gt;</span><span class=\"n\">k</span><span class=\"o\">),</span>\n           <span class=\"o\">{</span>\n<span class=\"c1\">--               by library_search,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n           <span class=\"o\">},</span>\n           <span class=\"n\">cases</span> <span class=\"n\">u_g_k</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">use</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n                <span class=\"n\">use</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n                <span class=\"n\">split</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                <span class=\"n\">split</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">u_g_k</span><span class=\"o\">,</span>\n\n                <span class=\"k\">let</span> <span class=\"n\">hu_mid</span><span class=\"o\">:=</span> <span class=\"n\">hu</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n\n                <span class=\"k\">have</span> <span class=\"n\">u_ge_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">u_zero</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"k\">have</span> <span class=\"n\">n_zero</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">subst</span> <span class=\"n\">u_zero</span><span class=\"o\">,</span>\n                        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                        <span class=\"n\">exact</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">u_ge_2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">u_less_2</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">&lt;</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"k\">have</span> <span class=\"n\">u_eq_1</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n<span class=\"c1\">--                    by library_search,</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">hu_mid</span> <span class=\"n\">u_eq_1</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n\n                <span class=\"k\">have</span> <span class=\"n\">k_ge_n</span><span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">uk_ge_2n</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n<span class=\"c1\">--                    by library_search,</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">canonically_ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul</span> <span class=\"n\">u_ge_2</span> <span class=\"n\">k_ge_n</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">n_ge_2n</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">twon_gt_n</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">use</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n                <span class=\"n\">use</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n                <span class=\"n\">split</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                <span class=\"n\">split</span><span class=\"o\">,</span>\n                <span class=\"c1\">--exact u_g_k,</span>\n\n                <span class=\"k\">let</span> <span class=\"n\">hu_mid</span><span class=\"o\">:=</span> <span class=\"n\">hu</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n\n                <span class=\"k\">have</span> <span class=\"n\">u_ge_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">u_zero</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"k\">have</span> <span class=\"n\">n_zero</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">subst</span> <span class=\"n\">u_zero</span><span class=\"o\">,</span>\n                        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                        <span class=\"n\">exact</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">u_ge_2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">u_less_2</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">&lt;</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"k\">have</span> <span class=\"n\">u_eq_1</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n<span class=\"c1\">--                    by library_search,</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">hu_mid</span> <span class=\"n\">u_eq_1</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n\n                <span class=\"k\">have</span> <span class=\"n\">k_ge_n</span><span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">uk_ge_2n</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n<span class=\"c1\">--                    by library_search,</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">canonically_ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul</span> <span class=\"n\">u_ge_2</span> <span class=\"n\">k_ge_n</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">n_ge_2n</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">twon_gt_n</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n                <span class=\"k\">have</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">dvd</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">ne_bot_of_gt</span> <span class=\"n\">ge</span><span class=\"o\">,</span>\n                <span class=\"o\">}</span>\n\n                <span class=\"c1\">--apply dvd_n_less_than_n,-- I have the lemma proved above but can&#39;t use it</span>\n\n            <span class=\"o\">},</span>\n\n\n            <span class=\"n\">split</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n\n            <span class=\"n\">split</span><span class=\"o\">,</span>\n\n            <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n            <span class=\"n\">refl</span><span class=\"o\">,</span>\n\n            <span class=\"c1\">--apply dvd_n_less_than_n, I have the lemma proved above but can&#39;t use it</span>\n\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195340256,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1587916559
    },
    {
        "content": "<p>Please supply the correct imports, especially if you are pasting 200 lines of code already <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 195340609,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587917037
    },
    {
        "content": "<p>You're missing a comma before the first commented-out <code>apply</code></p>",
        "id": 195340658,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587917055
    },
    {
        "content": "<p>however, in my opinion the main problem is that your proof is too big and inefficient</p>",
        "id": 195340662,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587917069
    },
    {
        "content": "<p>I can't get Lean to show the tactic state after <code>apply dvd_n_less_than_n</code>, and I suspect the reason is that the proof uses <code>linarith</code> about 20 times.</p>",
        "id": 195340698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587917132
    },
    {
        "content": "<p>Thanks, it was the comma that was messing things up.</p>",
        "id": 195340880,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1587917382
    }
]