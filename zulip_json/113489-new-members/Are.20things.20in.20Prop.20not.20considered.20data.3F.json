[
    {
        "content": "<p>Hi. In the following snippet, I don't need to add <code>noncomputable</code> in the first line. Why is this so? Am I not producing data?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">l1</span> <span class=\"o\">:=</span> <span class=\"n\">classical.choice</span> <span class=\"o\">⟨</span><span class=\"n\">true</span><span class=\"o\">⟩</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">l2</span> <span class=\"o\">:=</span> <span class=\"n\">classical.choice</span> <span class=\"o\">⟨</span><span class=\"n\">tt</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">l1</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">classical.choice _</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 259225949,
        "sender_full_name": "Shashank Pathak",
        "timestamp": 1635334961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364879\">@Shashank Pathak</span> Right. Lean has proof irrelevance. So Props are not data.</p>",
        "id": 259226466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635335234
    },
    {
        "content": "<p><code>Prop</code> (and <code>Type</code>) are erased at run-time, meaning that given <code>P : Prop</code> there's no way to extract information out of <code>P</code>.</p>",
        "id": 259227812,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635336060
    },
    {
        "content": "<p><code>bool</code> isn't erased at runtime, because you can use <code>bool.rec</code> to determine the value of a <code>bool</code>.</p>",
        "id": 259227957,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635336148
    },
    {
        "content": "<p>Separately, proofs (<code>h : P</code> where <code>P : Prop</code>) are also erased because you cannot distinguish different inhabitants of a proposition at all (even noncomputably) due to proof irrelevance.</p>",
        "id": 259228291,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635336315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Are.20things.20in.20Prop.20not.20considered.20data.3F/near/259227812\">said</a>:</p>\n<blockquote>\n<p><code>Prop</code> (and <code>Type</code>) are erased at run-time, meaning that given <code>P : Prop</code> there's no way to extract information out of <code>P</code>.</p>\n</blockquote>\n<p>What does extracting information mean exactly? For example, if I had some term of type <code>bool</code>, how can I extract information out of it?</p>",
        "id": 259240414,
        "sender_full_name": "Shashank Pathak",
        "timestamp": 1635342206
    },
    {
        "content": "<p>For example, you can pattern match on the <code>bool</code> and then print different messages to the screen in the two cases.</p>",
        "id": 259240671,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635342302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Are.20things.20in.20Prop.20not.20considered.20data.3F/near/259240671\">said</a>:</p>\n<blockquote>\n<p>For example, you can pattern match on the <code>bool</code> and then print different messages to the screen in the two cases.</p>\n</blockquote>\n<p>Oh, thanks. I saw it now that I can't pattern match on <code>Prop</code>. But why is <code>Prop</code> not considered data?</p>",
        "id": 259295190,
        "sender_full_name": "Shashank Pathak",
        "timestamp": 1635363542
    },
    {
        "content": "<p>I think the idea is that \"data\" is something that lets you make decisions during a computation.  Given a <code>Prop</code>, there's no general procedure to tell whether what you have is equal to <code>true</code> or <code>false</code>, so you can't make decisions, so it's not data.</p>",
        "id": 259296782,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635364295
    },
    {
        "content": "<p>Terms of <code>bool</code> on the other hand all represent procedures that, if you run them long enough, will eventually evaluate to <code>tt</code> or <code>ff</code>, so you can make decisions based on which it is, so it's data.</p>",
        "id": 259297262,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635364505
    },
    {
        "content": "<p>If you find such an algorithm, let us know what <code>#eval if P = NP then 1 else 0</code> evaluates to</p>",
        "id": 259298063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635364819
    },
    {
        "content": "<p>And moreover, with propositional extensionality and classical logic, the only two values of <code>Prop</code> are <code>true</code> and <code>false</code>, so there's no other data you could ever extract from a <code>Prop</code>, either</p>",
        "id": 259298890,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635365185
    },
    {
        "content": "<p>Okay, so this is what I understand.</p>\n<p>if I use choice to obtain a term of <code>bool</code> or <code>nat</code>, I need to mark it as <code>noncomputable</code> as a flag because I don't know its 'value', although for other terms which have been obtained constructively, I know the 'value'. </p>\n<p>But if I use choice to obtain a term of <code>Prop</code>, there's no need to flag it or anything because I cannot extract data from it anyhow.</p>\n<p>I hope this makes sense. Please correct me if I'm wrong.</p>",
        "id": 259308657,
        "sender_full_name": "Shashank Pathak",
        "timestamp": 1635369815
    }
]