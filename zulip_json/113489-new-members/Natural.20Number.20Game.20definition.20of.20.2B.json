[
    {
        "content": "<p>I have been going through the Natural Numbers Game in order to get into LEAN, but I came across the definition of + in the natural numbers and I am a bit confused. Why can we define this operation inductively? Using only the three \"properties\" given to me by the game so far (0 : mynat, succ : mynat -&gt; mynat, induction), I don't get why + : mynat -&gt; mynat must exist, or even why it is well-defined.</p>\n<p>I guess my question is: Given only these three \"properties\" of mynat, are inductively defined functions like + well-defined, and if not, what else must be added to mynat in order to define/create/prove-to-exist a function like + in LEAN?</p>",
        "id": 250382568,
        "sender_full_name": "Liam Axon",
        "timestamp": 1629739055
    },
    {
        "content": "<p>If I am not mistaken, is is not <code>+ : mynat -&gt; mynat</code>. It should be <code>+ : mynat -&gt; mynat -&gt; mynat</code> instead.</p>",
        "id": 250383070,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629739293
    },
    {
        "content": "<p>You can see the full definition of the operation <code>+</code> on the type <code>mynat</code> here:<br>\n<a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/mynat/add.lean\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/mynat/add.lean</a></p>",
        "id": 250384200,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629739803
    },
    {
        "content": "<p>If you want to understand why the operation <code>+</code> is well-defined, focus on these three lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The syntactic sugar for replacing <code>add x y</code> by <code>x + y</code> is done somewhere else; it is not important here.</p>",
        "id": 250384676,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629739997
    },
    {
        "content": "<p>By being \"well-defined\", you mean that the expansion (the chain of substitutions according to the definition) ends somewhere? Or are you asking about why the formal definition (<code>mynat.definition</code>) corresponds to our notion of adding natural numbers correctly?</p>",
        "id": 250385235,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629740238
    },
    {
        "content": "<p>In order to understand how <code>mynat</code> work, start with the definition here:<br>\n<a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/mynat/definition.lean\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/mynat/definition.lean</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n</code></pre></div>\n<p>You can see that the following terms all satisfy the definition of <code>mynat</code>:<br>\n<code>zero</code>, <code>succ(zero)</code>, <code>succ(succ(zero))</code>, <code>succ(succ(succ(zero)))</code><br>\nThe crucial thing is that every term of the type <code>mynat</code> is either <code>zero</code> or <code>succ n</code> for some <code>n : mynat</code>. Therefore, you can patternmatch on them in the definition of any operation on <code>mynat</code>. If you cover both cases (i.e., that the argument is either <code>zero</code> or <code>succ n</code>), then nothing will surprise you. The result will be well-defined as long as the right side of the definition is written well.</p>",
        "id": 250387391,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629741342
    },
    {
        "content": "<p>basically, this is guaranteed by <code>rec</code>, a function on all inductive types. handwavily, <code>rec</code> guarantees that if you cover all constructors, you can make an inductive definition of not only properties, but data.</p>\n<p>for example, think of this inductive type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Enum</span>\n<span class=\"bp\">|</span> <span class=\"n\">Blue</span> <span class=\"o\">:</span> <span class=\"n\">Enum</span>\n<span class=\"bp\">|</span> <span class=\"n\">Red</span> <span class=\"o\">:</span> <span class=\"n\">Enum</span>\n<span class=\"bp\">|</span> <span class=\"n\">Yellow</span> <span class=\"o\">:</span> <span class=\"n\">Enum</span>\n</code></pre></div>\n<p>If you have <code>f Blue</code>, <code>f Red</code> and <code>f Yellow</code> then definitely you have <code>f x</code> for any <code>x : Enum</code>. this is pretty much the signature for <code>Enum.rec</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"n\">eliminator</span> <span class=\"n\">Enum.rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Enum</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">},</span> <span class=\"n\">motive</span> <span class=\"n\">Enum.Blue</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">Enum.Red</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">Enum.Yellow</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Enum</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Now, on top of that, if you have a <code>self-referential</code> type, like <code>mynat</code>, you also get given the value at that point. that's because the function was \"already defined there\" - how could you have constructed the value if not?*. So for example, for the standard definition of <code>ℕ</code>, this is <code>rec</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"n\">eliminator</span> <span class=\"n\">nat.rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">},</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Now, say <code>motive</code> is <code>ℕ → (ℕ → ℕ)</code> (like addition - remember that → is right-associative in Lean), then you need <code>addition 0</code>, (which is the identity function, and given <code>addition n</code>, you need to create <code>addition (n+1)</code> (that is, <code>λ x, x+1</code>).</p>\n<p>Now, the reason this is actually well-defined (and why I starred things) is because you do actually have some constraints (I've always seem then referred as \"positivity constraints\") on inductive types; for example, this isn't valid:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">bad</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">no</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">bad</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">bad</span>\n</code></pre></div>\n<p>because <code>rec</code> would cause nonsense (I don't have the thinking to cause an explicit contradiction, sadly, but I know some people here know it). But <code>rec</code> is really super cool; for example, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_solvable_by_rad\">docs#is_solvable_by_rad</a>. Also, for some thinking; what do you think <code>false.rec</code> is? (<code>false</code> is the empty inductive type)</p>",
        "id": 250387608,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629741464
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> , I did mean + : mynat -&gt; mynat -&gt; mynat.</p>",
        "id": 250387637,
        "sender_full_name": "Liam Axon",
        "timestamp": 1629741477
    },
    {
        "content": "<p>Read also the answer by <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>. He explains how the inductive types work in general.</p>",
        "id": 250388094,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629741662
    },
    {
        "content": "<p>It does looks like rec is what I was looking for :). But, I still have a question about defining the \"add\" function, though. I guess I'm not seeing why mynat fits the necessary constraints.</p>",
        "id": 250388394,
        "sender_full_name": "Liam Axon",
        "timestamp": 1629741807
    },
    {
        "content": "<p>Lemme give you an example, ok? Do you understand the representation that e.g. the number 3 is represented by <code>succ(succ(succ(zero)))</code> and so on?</p>",
        "id": 250388534,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629741888
    },
    {
        "content": "<p>Yeah, that makes sense to me.</p>",
        "id": 250388583,
        "sender_full_name": "Liam Axon",
        "timestamp": 1629741918
    },
    {
        "content": "<p>Good. Suppose you want to compute <code>3 + 2</code>.</p>",
        "id": 250388711,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629741967
    },
    {
        "content": "<p>Syntactically, this expresses <code>mynat.add 3 2</code> to be clear.</p>",
        "id": 250388802,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629742016
    },
    {
        "content": "<p>We can do this by 3 + 2 = succ(3 + 1) = succ(succ(3 + 0))...</p>",
        "id": 250388836,
        "sender_full_name": "Liam Axon",
        "timestamp": 1629742037
    },
    {
        "content": "<p>Yes.</p>",
        "id": 250388850,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629742048
    },
    {
        "content": "<p>We are starting with <code>add succ(succ(succ(zero))) succ(succ(zero))</code>. This gets replaced by <code>succ (add succ(succ(succ(zero))) succ(zero))</code>.</p>",
        "id": 250388982,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629742114
    },
    {
        "content": "<p>This in turn gets replaced by <code>succ (succ (add succ(succ(succ(zero))) zero))</code>.</p>",
        "id": 250389045,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629742148
    },
    {
        "content": "<p>Thank makes sense, thank you :). But... this only works if every number has only one pre-successor, right?</p>",
        "id": 250389073,
        "sender_full_name": "Liam Axon",
        "timestamp": 1629742168
    },
    {
        "content": "<p>Finally we have <code>succ (succ (succ(succ(succ(zero))) ))</code>.</p>",
        "id": 250389099,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629742183
    },
    {
        "content": "<p>Are you interested in other-than-standard model of natural numbers? Or what are you asking about now?</p>",
        "id": 250389218,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629742238
    },
    {
        "content": "<p>Yeah, I guess I am asking about other models.</p>",
        "id": 250389362,
        "sender_full_name": "Liam Axon",
        "timestamp": 1629742321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"434552\">Liam Axon</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Number.20Game.20definition.20of.20.2B/near/250389073\">said</a>:</p>\n<blockquote>\n<p>Thank makes sense, thank you :). But... this only works if every number has only one pre-successor, right?</p>\n</blockquote>\n<p>inductive types aren't like PA where you can have junk</p>",
        "id": 250389400,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629742326
    },
    {
        "content": "<p>they're guaranteed to be sufficient but only just</p>",
        "id": 250389407,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629742332
    },
    {
        "content": "<p>no non-standard number nonsense</p>",
        "id": 250389419,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629742342
    },
    {
        "content": "<p>By definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n</code></pre></div>\n<p>every number except zero has exactly one predecessor. The term <code>t : mynat</code> is either <code>t = zero</code> or <code>t = succ n</code> for some <code>n : mynat</code>. It cannot be anything else.</p>",
        "id": 250389446,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629742365
    },
    {
        "content": "<p>Thank you! That clears things up. I didn't see that part of the definition</p>",
        "id": 250389710,
        "sender_full_name": "Liam Axon",
        "timestamp": 1629742500
    },
    {
        "content": "<p>*And, I wouldn't have known what it meant if I had, so thanks for explaining it to me :)</p>",
        "id": 250389761,
        "sender_full_name": "Liam Axon",
        "timestamp": 1629742530
    },
    {
        "content": "<p>You're always welcome!</p>",
        "id": 250389813,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1629742558
    }
]