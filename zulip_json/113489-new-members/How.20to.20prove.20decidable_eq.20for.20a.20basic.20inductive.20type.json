[
    {
        "content": "<p>I have a trivial type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"c1\">-- .... a few more constructors with no arguments</span>\n</code></pre></div>\n\n\n<p>Trying to prove it is a <code>fintype</code> I need to prove <code>decidable_eq Foo</code>. How would I do that without listing all possible combinations of members of foo in a long pattern match?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">A</span> <span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">B</span> <span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- .....  and now I still need all the possible false combinations</span>\n</code></pre></div>",
        "id": 206867725,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1597350910
    },
    {
        "content": "<p>Add <code>@[derive decidable_eq]</code> on the line before <code>inductive Foo</code></p>",
        "id": 206867781,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597350947
    },
    {
        "content": "<p>Over in a different thread <a href=\"#narrow/stream/113489-new-members/topic/integrable_on/near/206626876\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/integrable_on/near/206626876</a> we talked about these proofs very recently too.</p>",
        "id": 206868013,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597351069
    },
    {
        "content": "<p>Oh that's how you automatically derive instances! Thank you!</p>\n<p>Is this covered in some reference manual?</p>",
        "id": 206868668,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1597351391
    },
    {
        "content": "<p>Sadly, no. There's an open issue for basic docs here: <a href=\"https://github.com/leanprover-community/mathlib/issues/3533\">#3533</a></p>",
        "id": 206869120,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597351585
    },
    {
        "content": "<p>I've always meant to ask this; why does <code>instance : decidable_eq MyType := by tactic.mk_dec_eq_instance</code> work in some cases when deriving with <code>@[derive decidable_eq]</code> fails? I don't have an example on hand but I swear this is a thing.</p>",
        "id": 206869804,
        "sender_full_name": "Chris B",
        "timestamp": 1597351919
    },
    {
        "content": "<p>I've never witnessed that. Please share the example if you find it</p>",
        "id": 206872812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597353380
    },
    {
        "content": "<p>On the same problem, what is the best way to provide a <code>finset</code> for <code>Foo</code>? (goal is still to prove Foo is a <code>fintype</code>). I have this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">elms</span>  <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span>\n</code></pre></div>\n\n\n<p>but it forces me to list explicitly every constructor. What would be a better way?</p>\n<p>In general, shouldn't the fact that Foo is a <code>fintype</code> be automatically derivable?</p>",
        "id": 206873875,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1597354004
    },
    {
        "content": "<p>click on the link.</p>",
        "id": 206874558,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597354348
    },
    {
        "content": "<p>I couldn't find a strategy in there that doesn't involve an exhaustive listing of all constructors. Am I missing one?</p>",
        "id": 206876114,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1597355416
    },
    {
        "content": "<p>this is on my todo list</p>",
        "id": 206876128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597355430
    },
    {
        "content": "<p>ideally you could write <code>@[derive fintype]</code> but the derive handler isn't written</p>",
        "id": 206876163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597355460
    },
    {
        "content": "<p>so you have to list the constructors for now</p>",
        "id": 206876176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597355473
    },
    {
        "content": "<p>Thanks for your help folks!</p>",
        "id": 206876475,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1597355678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329777\">@Sebastián Galkin</span> This has been checked off the todo list as of <a href=\"https://github.com/leanprover-community/mathlib/issues/3772\">#3772</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">fintype</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 206904839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597389807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20prove.20decidable_eq.20for.20a.20basic.20inductive.20type/near/206904839\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"329777\">Sebastián Galkin</span> This has been checked off the todo list as of <a href=\"https://github.com/leanprover-community/mathlib/issues/3772\">#3772</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">fintype</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>which has now been merged</p>",
        "id": 207030886,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597512261
    }
]