[
    {
        "content": "<p>I managed (god knows how…) to pass around the problem, but I had the following issue :<br>\nInstead of having to prove something like <code>x ∈ s</code>, as I expected, Lean wanted me to prove <code>x ∈ λ (x : α), x ∈ s</code><br>\nand nothing had me change this to what I wanted.<br>\nI tried <code>change…</code> and <code>set_like.mem_set_of_eq</code> for example.</p>",
        "id": 263783428,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638730829
    },
    {
        "content": "<p>That usually indicates you took a wrong term somewhere -- for example using <code>apply</code> with a lemma that expects a predicate but everything is in terms of sets. Sometimes this is a problem with mathlib's lemmas (in which case you sharing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> could be helpful).</p>\n<p>I'm surprised <code>change x ∈ s</code> didn't work to get things back to normal.</p>",
        "id": 263783924,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638731509
    },
    {
        "content": "<p>something like that , except that H was defined as a <code>stabilizer…</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≤</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.mem_of_subset_of_mem</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">--- oops</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263786798,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638735440
    },
    {
        "content": "<p>In that case, <code>change x ∈ K</code> makes the job, so I suspect that the formula for the stabilizer, while looking the same when rendered by VSCode, was not definably equal.</p>",
        "id": 263786976,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638735696
    },
    {
        "content": "<p>Looks like the problem is that your ∈'s are for subgroups and not sets</p>",
        "id": 263787129,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1638735861
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≤</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set_like.le_def</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span><span class=\"n\">set_like.mem_coe</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">hx</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.mem_of_subset_of_mem</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ x ∈ ↑K</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263787222,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1638735973
    },
    {
        "content": "<p>I'm not sure if this constitutes \"subverting the API\", but <code>h</code> itself is the lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≤</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263787265,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638736046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> What are the coercion rewrites doing? Any reason not do do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≤</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set_like.le_def</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263787330,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638736128
    },
    {
        "content": "<p>Oh, good point - I was trying to get to the point where <code>set.mem_of_subset_of_mem</code> made sense, but there is no need for that</p>",
        "id": 263787421,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1638736292
    },
    {
        "content": "<p>Removing these <code>set.mem_of_subset_of_mem</code> improved many other lines of my code ! Thanks !</p>",
        "id": 263787796,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638736804
    }
]