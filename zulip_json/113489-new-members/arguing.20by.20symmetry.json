[
    {
        "content": "<p>In maths for humans, we frequently shortcut the second half of the proof of an equivalence or an equality by arguing by symmetry. Is there a way to emulate this with Lean's tactics?</p>\n<p>For example,  suppose my goal is an equality of sets A = B, and all my assumptions are symmetric in A and B. I would like to <code>split</code> the goal into two inclusions, prove one of them, and then just write some combination of <code>symmetry</code> and <code>repeat</code> for the other inclusion. </p>\n<p>Does that make sense, and is it possible?</p>",
        "id": 288332260,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1656861260
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#wlog\">tactic#wlog</a> can be used for that type of thing</p>",
        "id": 288333555,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656862852
    },
    {
        "content": "<p>More generally though, you can handle this manually with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"k\">from</span> <span class=\"n\">set.subset.antisymm</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"n\">hB</span> <span class=\"n\">hA</span><span class=\"o\">),</span>\n<span class=\"c1\">-- now prove just one direction</span>\n</code></pre></div>",
        "id": 288333827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656863281
    },
    {
        "content": "<p>Thanks! After much contemplation, I think I've finally managed to figure out what the \"manual\" option is doing, and I got it to work in a baby case. </p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#wlog\">tactic#wlog</a> also looks very stylish, but it's still unclear to me how to apply it in the kind of scenario I was asking about.  I think I understand the example in the documentation, where for two natural numbers one can assume wlog m &lt;= n because one can prove the disjunction (m &lt;= n or n &lt;= m).  But what disjunction to look at for proving A(m,n) = A(n,m) or P(m,n) \\&lt;-&gt; P(n,m)?</p>",
        "id": 288344246,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1656877931
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? You should hopefully be able to make a fully self-contained baby example/abstraction of the problem you want to solve.</p>",
        "id": 288345477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656879610
    },
    {
        "content": "<p>Sorry, I'm just asking out of curiosity and not because I'm running up against a problem.  My baby example is from one of your sheets:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- **</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>At the point marked <code>**</code> I have 2 goals which differ only by a permutation of the roles of A and B, so I'd like to say that it suffices to prove one of them.</p>\n<p>Here's how I understood the \"manual\" solution (no invocation of <code>ext</code> and <code>split</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A'</span> <span class=\"n\">B'</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">A'</span> <span class=\"bp\">∩</span> <span class=\"n\">B'</span> <span class=\"bp\">⊆</span> <span class=\"n\">B'</span> <span class=\"bp\">∩</span> <span class=\"n\">A'</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">set.subset.antisymm</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">B</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">A'</span> <span class=\"n\">B'</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">hB</span> <span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">hA</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288372039,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1656917072
    },
    {
        "content": "<p>Right! So do you still have a question and if so can you formalise it?</p>",
        "id": 288373397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656918374
    },
    {
        "content": "<p>I suspect the question is <em>\"how can use <code>wlog</code> to prove the above instead of <code>suffices</code>\"</em></p>",
        "id": 288373678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656918606
    },
    {
        "content": "<p>Yes, that is the part I still don't understand.</p>",
        "id": 288375769,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1656920113
    },
    {
        "content": "<p>I guess I don't know how to use WLOG in maths to solve this particular problem. WLOG is for things like \"WLOG a&lt;=b\" when the goal is symmetric in a and b. I guess I'd use <code>suffices</code> here.</p>",
        "id": 288377877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656921572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"507231\">@Marcus Zibrowius</span> I know this doesn't answer your question, but it might be nice to know that you can golf this to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">and.comm</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 288378308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656921793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> OK, that's reassuring. So <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#wlog\">tactic#wlog</a> applies in exactly the situations in which we'd usually say wlog, the situation I was wondering about is not one of them,  and the confusion only arose because my initial question wasn't clear enough. Thank you.</p>",
        "id": 288381131,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1656923548
    },
    {
        "content": "<p>Let's say your tactic proof for the first half cares that it's P(A, B) and not P(B, A). But the actually body would still hold if all the As were B and all the Bs were A. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#swap_var\">tactic#swap_var</a></p>",
        "id": 288407180,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656939826
    },
    {
        "content": "<p>Right, three new commands I learn in this way <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> (<code>swap_var</code>, <code>work_on_goal</code>, <code>all_goals</code>). Using <code>swap_var</code> does have the advantage over <code>suffices ...</code> that I don't need to explicitly type out what the goal is.</p>",
        "id": 288422116,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1656948724
    },
    {
        "content": "<p>The downside in <code>swap_var</code> is that it's a little less robust, as instead of arguing mathematically that you only need to prove things in one direction, you're saying \"just apply each of these steps to each direction separately\".</p>",
        "id": 288426829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656951412
    },
    {
        "content": "<p>Absolutely, it is a very dumb tactic that relies on getting the proof in _just_ the right way. But with that restriction, it is meant to be a very fast tactic.</p>",
        "id": 288428371,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656952368
    },
    {
        "content": "<p>Here's a variant on Eric's proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inter_comm_aux</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">and_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subset.antisymm</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">inter_comm_aux</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It's not uncommon to see an auxiliary lemma like this.</p>",
        "id": 288428957,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656952780
    },
    {
        "content": "<p>I think that's usually the case only if the auxiliary lemma holds true more generally than the bidirectional one (or provides more convenient notation)</p>",
        "id": 288429062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656952823
    },
    {
        "content": "<p>(Don't mind that the specific proofs I used were different from Eric's. I just thought I'd mix things up by doing things more using tactics.)</p>",
        "id": 288429100,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656952846
    },
    {
        "content": "<p>Something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/commute.neg_left\">docs#commute.neg_left</a>  vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/commute.neg_left_iff\">docs#commute.neg_left_iff</a> is a good example of where it's better to add the auxiliary lemma like that</p>",
        "id": 288429158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656952891
    },
    {
        "content": "<p>If you really want to use <code>wlog</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"n\">using</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">A</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">not_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">h.mpr</span> <span class=\"n\">_</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.mem_inter_iff</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288541750,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1657032941
    },
    {
        "content": "<p>Hello,</p>\n<p>My question is also about how to transpose in Lean an argument <em>by symmetry</em> but when symmetry applies to hypotheses.</p>\n<p>Say you have an inductive predicate <code>P : X → Prop</code> and a (provably symmetric) relation <code>Q : X → X → Prop</code> and you want to prove <code>∀ x y, P x → P y → Q x y</code>. A direct way to proceed is along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Px</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Py</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">Px</span> <span class=\"n\">generalizing</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">Py</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- lots of cases</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>If there are <em>n</em> cases in the definition of <code>P</code>, then you end up with <em>n²</em> cases, although the proof could be simplified into <em>n(n+1)/2</em> by symmetry. Is there a tactic or a common practice to perform this simplification?</p>\n<p>I did not include my actual use case for simplicity but I can provide it if relevant. The context is proving a confluence result, where <code>P x</code> means that <code>x</code> is a reduct of some term <code>w</code> and <code>Q x y</code> mean that <code>x</code> and <code>y</code> have a common reduct.</p>",
        "id": 289157358,
        "sender_full_name": "Emmanuel Beffara",
        "timestamp": 1657526786
    },
    {
        "content": "<p>If you have some order, then you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#wlog\">tactic#wlog</a>. AFAIK, we don't have anything better yet.</p>",
        "id": 289170923,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657535037
    }
]