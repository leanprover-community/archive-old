[
    {
        "content": "<ol>\n<li>I can see what it's saying in the first error but I don't know how to fix it.</li>\n<li>I don't understand the second error</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">probability_mass_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal_ordinal</span>\n\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">marginalize1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">β</span><span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"err\">∑&#39;</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- type mismatch, term</span>\n<span class=\"c1\">--   λ (b : β), ∑&#39; (a : α), ⇑f (a, b)</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   β → nnreal</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   pmf β</span>\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">marginalize2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"err\">∑&#39;</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">independent</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">marginalize1</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">marginalize2</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- type mismatch at application</span>\n<span class=\"c1\">--   marginalize1 f</span>\n<span class=\"c1\">-- term</span>\n<span class=\"c1\">--   f</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   pmf (α × β) : Type u</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   Type ? : Type (?+1)</span>\n</code></pre></div>",
        "id": 207567406,
        "sender_full_name": "Iocta",
        "timestamp": 1597953478
    },
    {
        "content": "<p>The type <code>pmf α</code> is <code>{ f : α → nnreal // has_sum f 1 }</code> , so to construct a term you need a pair <code> α → nnreal</code> and a proof that the sum is 1, you can write this as a pair with langle rangle.</p>",
        "id": 207568037,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597953774
    },
    {
        "content": "<p>Ok that makes sense</p>",
        "id": 207568244,
        "sender_full_name": "Iocta",
        "timestamp": 1597953885
    },
    {
        "content": "<p>Does that also explain the second error (how)?</p>",
        "id": 207569531,
        "sender_full_name": "Iocta",
        "timestamp": 1597954630
    },
    {
        "content": "<p>ie </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">probability_mass_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal_ordinal</span>\n\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">marginalize1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">β</span><span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span>\n   <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"err\">∑&#39;</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n   <span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">pmf</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n   <span class=\"kn\">end</span>\n<span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nhds</span>\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">marginalize2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"err\">∑&#39;</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)),</span> <span class=\"n\">sorry</span> <span class=\"bp\">⟩</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">independent</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">marginalize1</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">marginalize2</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- type mismatch at application</span>\n<span class=\"c1\">--   marginalize1 f</span>\n<span class=\"c1\">-- term</span>\n<span class=\"c1\">--   f</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   pmf (α × β) : Type u</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   Type ? : Type (?+1)</span>\n</code></pre></div>",
        "id": 207569745,
        "sender_full_name": "Iocta",
        "timestamp": 1597954787
    },
    {
        "content": "<p>Did you get the first ones working? I'm not running lean right now so I can't check unfortunately, you might have to add <code>f.val</code> in some places too.</p>",
        "id": 207569751,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597954797
    },
    {
        "content": "<p>Oh this is because <code>marginalize1</code> takes alpha and beta as explicit arguments (try <code>#check marginalize1</code> to see them).</p>",
        "id": 207570893,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597955477
    },
    {
        "content": "<p>So you can change your variables line to <code>variables {α β : Type u}</code> to make them implicit.</p>",
        "id": 207570934,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597955496
    },
    {
        "content": "<p>easy fix :-)</p>",
        "id": 207571025,
        "sender_full_name": "Iocta",
        "timestamp": 1597955526
    }
]