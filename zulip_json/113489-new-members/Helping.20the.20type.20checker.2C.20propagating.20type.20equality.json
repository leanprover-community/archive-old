[
    {
        "content": "<p>What can I do with the  following piece of code ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">variable</span> <span class=\"n\">my_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_sub</span> <span class=\"o\">(</span><span class=\"n\">new_x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">new_y</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">new_x</span> <span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">new_x</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">new_y</span> <span class=\"k\">else</span> <span class=\"n\">my_fun</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>It does not type check because <code>new_y</code> has type <code>f  new_x</code>,  but should have type <code>f x</code>.  It is easy to prove that <code>f x = f new_x</code> from <code>x=y</code>, but how do I have convince the type checker that is true?</p>",
        "id": 253055648,
        "sender_full_name": "Justin Pearson",
        "timestamp": 1631522419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"434371\">@Justin Pearson</span> You can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">variable</span> <span class=\"n\">my_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">my_fun</span> <span class=\"c1\">-- Π (x : ℕ), ℕ → f x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_sub</span> <span class=\"o\">(</span><span class=\"n\">new_x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">new_y</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">new_x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">new_x</span>\n  <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">new_y</span> <span class=\"o\">})</span> <span class=\"c1\">-- new_y</span>\n  <span class=\"k\">else</span> <span class=\"n\">my_fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"c1\">-- my_fun x</span>\n</code></pre></div>\n<p>but I think it will be hard to work with this definition.</p>",
        "id": 253056388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631522890
    },
    {
        "content": "<p>Can you explain what you are trying to do exactly?</p>",
        "id": 253056402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631522902
    },
    {
        "content": "<p>Does <code>my_fun</code> actually have the type that you intended it to have?</p>",
        "id": 253056422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631522913
    },
    {
        "content": "<p>Note that <code>my_sub</code> is precisely <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.update\">docs#function.update</a></p>",
        "id": 253056936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631523270
    },
    {
        "content": "<p>The example has been reduced down to work on the naturals.  I'm modelling multi-sorted first order logic, and this is a version of the substitution function.   An assignment has a type that is something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span>   <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>So given a sort 's' it should have a value in the type (f s).  Maybe there is a better way of doing this?</p>",
        "id": 253056949,
        "sender_full_name": "Justin Pearson",
        "timestamp": 1631523281
    },
    {
        "content": "<p>You could also use <code>dite</code>,  a dependent version of <code>if</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">variable</span> <span class=\"n\">my_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">new_x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">new_y</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">new_x</span> <span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_sub</span> <span class=\"o\">(</span><span class=\"n\">new_x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">new_y</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">new_x</span> <span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">new_x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.symm.rec_on</span> <span class=\"n\">new_y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">my_fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 253085095,
        "sender_full_name": "Justus Springer",
        "timestamp": 1631538095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"384542\">@Justus Springer</span> , the <code>if h : x = new_x then ... else ...</code> in <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>'s message above is syntax for <code>dite</code>.</p>",
        "id": 253103346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631544917
    },
    {
        "content": "<p>Oh right, I didn't know you could do that</p>",
        "id": 253104198,
        "sender_full_name": "Justus Springer",
        "timestamp": 1631545204
    }
]