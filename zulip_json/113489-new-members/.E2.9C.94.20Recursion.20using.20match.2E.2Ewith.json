[
    {
        "content": "<p>Hi all, I have a question that I'm sure has a simple solution: I have a function <code>f : {n : ℕ} → vector X (n + 1) → Y</code> and I'd like to lift this to a function <code>f' : f : {n : ℕ} → vector X (n + 1) → vector Y (n + 1)</code>. The idea is <code>f' [a_0,  ..., a_n] = [f' [a_0, ..., a_n], f'[a_0, ..., a_n - 1], ...]</code>. However, Lean does not like this, it seems because <code>match ... with</code> doesn't produce a hypothesis? Not entirely sure. I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iter_simp</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span>      <span class=\"o\">:=</span> <span class=\"n\">vector.nil</span>\n    <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>  <span class=\"o\">:=</span> <span class=\"n\">iter_simp</span> <span class=\"n\">m</span> <span class=\"n\">f</span> <span class=\"n\">xs.tail</span>\n    <span class=\"kd\">end</span>\n</code></pre></div>\n<p>and Lean tells me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">iter_simp</span> <span class=\"n\">m</span> <span class=\"n\">f</span> <span class=\"n\">xs.tail</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">xs.tail</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">vector</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">vector</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Any hints? (edit: this is Lean 3)</p>",
        "id": 278565972,
        "sender_full_name": "Eleanor McMurtry",
        "timestamp": 1649689025
    },
    {
        "content": "<p>Can you make your code into a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> by adding appropriate imports/open/open_locales? I never use vectors and I can't get the <code>::ᵥ</code> notation working.</p>",
        "id": 278566670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649689280
    },
    {
        "content": "<p>done — it's just <code>import tactic</code> that gets what I need</p>",
        "id": 278566746,
        "sender_full_name": "Eleanor McMurtry",
        "timestamp": 1649689316
    },
    {
        "content": "<p>This seems to work: does it solve your problem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iter_simp</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">vector.nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">xs</span>  <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">iter_simp</span> <span class=\"n\">m</span> <span class=\"n\">f</span> <span class=\"n\">xs.tail</span>\n</code></pre></div>",
        "id": 278567304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649689496
    },
    {
        "content": "<p>hooray, it does! Cheers Kevin. Looks like the \"generic recipe\" is to just lift the match to the top level here (even if this means a little repetition)</p>",
        "id": 278567635,
        "sender_full_name": "Eleanor McMurtry",
        "timestamp": 1649689612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"493586\">Eleanor McMurtry</span> has marked this topic as resolved.</p>",
        "id": 278567647,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649689616
    }
]