[
    {
        "content": "<p>Hi everybody! My name is Jeremy Sorkin and I am a Math and Computer Science double major at the College of Wooster. I am very new to Lean, as I have only just started looking into it for a research project.<br>\nI have been trying to formalize some basic First-order Logic into Lean and was wondering if you guys could help me close a very trivial goal that I’ve been stuck on.</p>\n<p>I’ve written a function <code>signature.formula.relation</code> that takes as input a Natural number <code>n</code> and FOL formula <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span> and returns the set of relational symbols of arity <code>n</code> that occur in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span>  <span class=\"n\">signature.formula.relation</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">signature</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">σ.formula</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">σ.nrary</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">@</span><span class=\"n\">signature.formula.relational</span> <span class=\"n\">σ</span> <span class=\"n\">n2</span> <span class=\"n\">r</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">insert</span> <span class=\"n\">r</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"n\">signature.formula.for_all</span> <span class=\"n\">x</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">φ.relation</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"n\">signature.formula.if_then</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">φ.relation</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">ψ.relation</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"n\">signature.formula.equation</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span>  <span class=\"n\">signature.formula.false</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n</code></pre></div>\n<p>I want to prove a very trivial result about my function which is: if I give it a formula of the form “r t1 t2 … tn” where r is a relational symbol of arity n and ti are all terms, then r is in the set signature.formula.relation (r t1 t2 … tn) n : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">signature</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n        <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">σ.nrary</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">σ.term</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span>  <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">signature.formula.relation</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">signature.formula.relational</span> <span class=\"n\">r</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It’s a really trivial result because, since r is a relational symbol of arity n it is by definition in the set  signature.formula.relation (r t1 t2 … tn) n, however after a good couple hours I still haven’t been able to get anywhere.</p>\n<p>Here is a minimum working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span> <span class=\"n\">tactic.find</span> <span class=\"n\">tactic.tidy</span> <span class=\"n\">tactic.ring</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">logic</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span> <span class=\"n\">tactic</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">@[derive inhabited]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">signature</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">functional_symbol</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">pempty</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">relational_symbol</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">pempty</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">modality</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">pempty</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">ulift</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">dec_vars</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">vars</span> <span class=\"bp\">.</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">arity</span> <span class=\"o\">:</span> <span class=\"n\">functional_symbol</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">rarity</span> <span class=\"o\">:</span> <span class=\"n\">relational_symbol</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">marity</span> <span class=\"o\">:</span> <span class=\"n\">modality</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- the type of functional symbols of arity n</span>\n<span class=\"kd\">def</span> <span class=\"n\">signature.nary</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">signature</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ.functional_symbol</span> <span class=\"bp\">|</span> <span class=\"n\">σ.arity</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- the type of relational symbols of arity n</span>\n<span class=\"kd\">def</span> <span class=\"n\">signature.nrary</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">signature</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">σ.relational_symbol</span> <span class=\"bp\">|</span> <span class=\"n\">σ.rarity</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">signature.term</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">signature</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">σ.vars</span> <span class=\"bp\">→</span> <span class=\"n\">signature.term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span>  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ.nary</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">signature.term</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">signature.term</span>\n\n<span class=\"kd\">inductive</span>  <span class=\"n\">signature.formula</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">signature</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">relational</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">σ.nrary</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">σ.term</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">signature.formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">for_all</span> <span class=\"o\">:</span>  <span class=\"n\">σ.vars</span> <span class=\"bp\">→</span>  <span class=\"n\">signature.formula</span> <span class=\"bp\">→</span>  <span class=\"n\">signature.formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">if_then</span> <span class=\"o\">:</span>  <span class=\"n\">signature.formula</span> <span class=\"bp\">→</span>  <span class=\"n\">signature.formula</span> <span class=\"bp\">→</span>  <span class=\"n\">signature.formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">equation</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">σ.term</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">signature.formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"o\">:</span>  <span class=\"n\">signature.formula</span>\n\n<span class=\"kd\">def</span>  <span class=\"n\">signature.formula.relation</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">signature</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">σ.formula</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">σ.nrary</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">@</span><span class=\"n\">signature.formula.relational</span> <span class=\"n\">σ</span> <span class=\"n\">n2</span> <span class=\"n\">r</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">insert</span> <span class=\"n\">r</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"n\">signature.formula.for_all</span> <span class=\"n\">x</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">φ.relation</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"n\">signature.formula.if_then</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">φ.relation</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">ψ.relation</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"n\">signature.formula.equation</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span>  <span class=\"n\">signature.formula.false</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">signature</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n        <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">σ.nrary</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">σ.term</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span>  <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">signature.formula.relation</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">signature.formula.relational</span> <span class=\"n\">r</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">logic</span>\n</code></pre></div>\n<p>Thanks again guys!</p>",
        "id": 234701809,
        "sender_full_name": "Jeremy Sorkin",
        "timestamp": 1618501647
    },
    {
        "content": "<p><code>unfold signature.formula.relation, simp</code> will do it!</p>",
        "id": 234703964,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1618502412
    },
    {
        "content": "<p>Thanks a ton Eric!<br>\nI figured it was something super-simple but was absolutely stuck for hours.</p>",
        "id": 234707944,
        "sender_full_name": "Jeremy Sorkin",
        "timestamp": 1618503771
    },
    {
        "content": "<p>You can usually combine <code>unfold</code> and <code>simp</code>: <code>simp [signature.formula.relation]</code> also works.</p>",
        "id": 234711772,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618505143
    }
]