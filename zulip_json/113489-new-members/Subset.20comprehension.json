[
    {
        "content": "<p>I'm trying to define the following function </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wp_set</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Program</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">WP</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">IDGA</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'd like to use set comprehension of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">S.A</span> <span class=\"bp\">|</span> <span class=\"n\">wpt</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>where <code>d : Defines P.D n</code>. My structure <code>S</code> comes equipped with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">S.a_def</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">IDGA</span><span class=\"o\">},</span> <span class=\"n\">I</span> <span class=\"bp\">∈</span> <span class=\"n\">S.A</span> <span class=\"bp\">→</span> <span class=\"n\">Defines</span> <span class=\"n\">P.D</span> <span class=\"bp\">↑</span><span class=\"n\">I</span>\n</code></pre></div>\n<p>so I'd like to make the set comprehension become </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">S.A</span> <span class=\"bp\">|</span> <span class=\"n\">wpt</span> <span class=\"o\">(</span><span class=\"n\">S.a_def</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>where <code>h</code> records the fact that I have chosen <code>n</code>  so that <code>n ∈ S.A</code>, but I the context doesn't contain any term <code>h : n ∈ S.A</code>.<br>\nIs there any way to restructure this set comprehension so that I can get such an <code>h</code>?</p>",
        "id": 228315384,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1614636642
    },
    {
        "content": "<p>Do you really want <code>set IDGA</code>, which is the type of sets of <code>IDGA</code>, or perhaps the subtype of <code>IDGA</code>, where each term of the subtype satisfies <code>wpt d = some w</code>?</p>",
        "id": 228315800,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614636801
    },
    {
        "content": "<p>Well, I plan on taking intersections and set differences later, so I had envisioned using sets. But I'm open to seeing a solution that gives a subtype of IDGA if it's really easier here.</p>",
        "id": 228316478,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1614637017
    },
    {
        "content": "<p>Does lean even allow <code>\\in</code> on the left of <code>|</code> in a set comprehension (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sep\">docs#has_sep</a>)?</p>",
        "id": 228317034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614637277
    },
    {
        "content": "<p>Huh, I guess it does. I've never seen that before!</p>",
        "id": 228317497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614637465
    },
    {
        "content": "<p>I've use <code>\\in</code> on the left in other parts of my project with no problem. I also tried moving it to the right of <code>|</code> at some point to see if that helped, but it still doesn't help me access any term <code>h : n \\in S.A</code>. That is, I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">S.A</span> <span class=\"bp\">\\</span><span class=\"n\">and</span>  <span class=\"n\">wpt</span> <span class=\"o\">(</span><span class=\"n\">S.a_def</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228317535,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1614637480
    },
    {
        "content": "<p>Yes, it does. Here, you need a Union:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">⋃</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 228317544,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614637486
    },
    {
        "content": "<p>You could also do:</p>",
        "id": 228317571,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614637505
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228317679,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614637551
    },
    {
        "content": "<p>Interesting. I'll give that a try.</p>",
        "id": 228317930,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1614637661
    },
    {
        "content": "<p>Ok, so the second option definitely type checks. I used </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">S.A</span><span class=\"o\">),</span> <span class=\"n\">wpt</span> <span class=\"o\">(</span><span class=\"n\">S.a_def</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">w</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I'm somewhat worried about the existential though, because that might cause problems with computability down the line. So I'll try the first solutions as well.</p>",
        "id": 228318973,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1614638104
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 228319285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614638242
    },
    {
        "content": "<p>Existentials with a hypothesis in their binder shouldn't affect computability</p>",
        "id": 228319438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614638312
    },
    {
        "content": "<p>It's only when the binder/witness is in Type that that becomes a problem; <code>Exist.rec</code> is happy to eliminate into <code>Prop</code> without invoking choice.</p>",
        "id": 228319533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614638361
    },
    {
        "content": "<p>Right. I had trouble when I knew something existed (even when I knew it was unique) and I was trying to use that fact to instantiate a term in a function. Since, as you say, it's being used in a hypothesis, I should be ok here. </p>\n<p>I have a hard time anticipating where my mathematical intuition breaks down in the face of computability! </p>\n<p>Thanks to both of you for your help!</p>",
        "id": 228320403,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1614638753
    }
]