[
    {
        "content": "<p>How exactly are field accessors defined in terms of <code>rec</code>? For instance, in this snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">A.x</span>\n</code></pre></div>\n<p>It prints</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">A.x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">[</span><span class=\"n\">A.x</span> <span class=\"n\">self</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I guess this is some pretty-printer artifact. First, I don't understand the square brackets there (obviously they don't represent a singleton list). Second, how can the function being defined reference itself? I was expecting to see a use of <code>A.rec</code> instead.</p>",
        "id": 262932870,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1638111376
    },
    {
        "content": "<p>On mobile so I cant link to it sorry but I answered a similar question about and on June 3rd with: The square brackets denote a macro, this is really a part of the internals  of lean not seen too often, so while I don't know a good reference, looking at tpil and the reference manual and mathlib docs suffices for normal notation.<br>\nTo see what it really is we can ask lean to unfold the macro with a short metaprogram:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">run_cmd</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n<span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">and.left</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">e.unfold_all_macros</span> <span class=\"n\">d.value</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to see that the definition is really</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">and.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>as for why it is written in this weird way, I can only assume there are some C-level efficiency reasons that this gets special treatment.</p>",
        "id": 262933430,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638112122
    }
]