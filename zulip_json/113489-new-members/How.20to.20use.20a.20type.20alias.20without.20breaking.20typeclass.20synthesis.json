[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">History</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">die</span> <span class=\"bp\">//</span> <span class=\"n\">die</span> <span class=\"err\">∈</span> <span class=\"n\">dice</span><span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">claims</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">HistoryToActions</span> <span class=\"o\">({</span><span class=\"n\">die</span> <span class=\"bp\">//</span> <span class=\"n\">die</span> <span class=\"err\">∈</span> <span class=\"n\">dice</span><span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">claims</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"n\">Action</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">actions</span><span class=\"bp\">.</span><span class=\"k\">begin</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">actions</span><span class=\"bp\">.</span><span class=\"k\">begin</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">actions</span><span class=\"bp\">.</span><span class=\"n\">later</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">⟩</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">Particle</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"bp\">::</span>\n    <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">probability</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">infosets</span> <span class=\"o\">:</span> <span class=\"n\">Infosets</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">is_updateable</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>This piece of code typechecks as written above, but when I replace <code>{die // die ∈ dice} × list {i // ∃ v, claims.read i = v}</code> with <code>History</code> in <code>ha</code>'s type, I get an error that it cannot synthesize the typeclass instances for <code>(infosets : Infosets ha)</code>. The particular typeclass instance is <code>has_lt History</code>. What should I do here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">History</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">History</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Also, it occurred to me that I could try providing it directly, but I am not sure which tactic to use here. Even if this could work, I'd prefer it if I could instruct the compiler to inline the alias rather than doing this.</p>\n<p>Sorry about not giving a simplified example - I gave it a shot, but there are a lot of hierarchies that I do not know how to pare down without significant effort.</p>",
        "id": 179036569,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571997528
    },
    {
        "content": "<p><code>instance : has_lt History := by {unfold History, apply_instance}</code></p>",
        "id": 179036676,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571997629
    },
    {
        "content": "<p>Alternatively, <code>@[derive has_lt] def History : Type* := ...</code></p>",
        "id": 179036694,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571997643
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 179036833,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571997798
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>maximum class-instance resolution depth has been reached (the limit can be increased by setting option &#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option &#39;trace.class_instances&#39;)\n</pre></div>\n\n\n<p>The advice worked for my previous problem, but now I am running into this issue. I am not even sure for which typeclass instance it is looking for. How do I find that out? I tried turning on the trace, but the instance it is looking for there should be available, so I am thinking it should be something else.</p>",
        "id": 179044693,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572006578
    },
    {
        "content": "<p>Also, is it possible to derive <code>decidable_rel</code> using the first form? Something like...<code>@[derive has_lt, derive decidable_rel] def Die := {die // die ∈ dice}</code>? The issue with <code>decidable_rel</code> is that it depends on <code>has_lt</code>.</p>",
        "id": 179045550,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572007317
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">has_lt</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Die</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">die</span> <span class=\"bp\">//</span> <span class=\"n\">die</span> <span class=\"err\">∈</span> <span class=\"n\">dice</span><span class=\"o\">}</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">has_lt</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">PastClaims</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">claims</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">has_lt</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">History</span> <span class=\"o\">:=</span> <span class=\"n\">Die</span> <span class=\"bp\">×</span> <span class=\"n\">PastClaims</span>\n</pre></div>\n\n\n<p>I need <code>decidable_rel</code> for these 3, but forget about the previous question for a bit. I thought I would be able to do it once I made up my mind, but now that I am trying I find I have absolutely no idea how Lean deals with decidability of propositions. I am not even sure how it would work for regular nats and not these slightly more complex structures.</p>\n<p>How should I do this? I could use some good examples of how <code>decidable_rel</code> works.</p>",
        "id": 179047641,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572009044
    },
    {
        "content": "<p>It's impossible to debug a max class instance error without a fully working example demonstrating the error.</p>",
        "id": 179048436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572009643
    },
    {
        "content": "<p>You can turn certain traces on and look at debug output, but you have to know what you're looking for.</p>",
        "id": 179048469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572009673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<p>I see. Well in this case, I am sure that the problem is because it is looking for the missing <code>decidable_rel</code> for <code>History</code>. I managed to track it down by using <code>@</code> on the offending function and manually checking all the arguments.</p>",
        "id": 179048797,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572009942
    },
    {
        "content": "<p>Type class inference is complicated and is going to be one of the big changes in Lean 4. There are people here who know how to work with what we have, and no doubt they could sort out your specific problem if any of them had the time, but we have also been collecting lists of when typeclass inference fails or works badly, and the devs are going to see if they can come up with something better in Lean 4. It's being implemented right now, is my understanding.</p>",
        "id": 179048937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572010057
    },
    {
        "content": "<p><code>History</code> isn't a relation, is it? You can't give it a <code>decidable_rel</code> instance.</p>",
        "id": 179049201,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572010249
    },
    {
        "content": "<p>You might be able to derive decidable equality. <code>@[derive [has_lt, decidable_eq]]</code>. You'd need this to be successful on <code>Die</code> and <code>PastClaims</code> first to have any hope on <code>History</code>.</p>",
        "id": 179049254,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572010308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> </p>\n<blockquote>\n<p><code>History</code> isn't a relation, is it? You can't give it a <code>decidable_rel</code> instance.</p>\n</blockquote>\n<p>No, I meant for the <code>a &lt; b</code> where <code>a b : History</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">History_decidable_rel</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">History</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Something like this.</p>",
        "id": 179049378,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572010372
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span><span class=\"o\">,</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]]</span> <span class=\"n\">def</span> <span class=\"n\">Die</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">die</span> <span class=\"bp\">//</span> <span class=\"n\">die</span> <span class=\"err\">∈</span> <span class=\"n\">dice</span><span class=\"o\">}</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span><span class=\"o\">,</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]]</span> <span class=\"n\">def</span> <span class=\"n\">PastClaims</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">claims</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span><span class=\"o\">,</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]]</span> <span class=\"n\">def</span> <span class=\"n\">History</span> <span class=\"o\">:=</span> <span class=\"n\">Die</span> <span class=\"bp\">×</span> <span class=\"n\">PastClaims</span>\n</pre></div>\n\n\n<p>This works for me. But <code>decidable_rel</code> is tricky in that it needs to be passed the specific <code>has_lt</code> instance by hand. That is how it was in the few places where I used it. So just putting <code>@[derive [has_lt, decidable_rel]] def Die := {die // die ∈ dice}</code> fails for me.</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  decidable_rel Die\nterm\n  Die\nhas type\n  Type : Type 1\nbut is expected to have type\n  ?m_1 → ?m_1 → Prop : Sort (max ? 1)\n</pre></div>\n\n\n<p>It seems this mechanism is passing it <code>Die</code> directly rather than the less-than function for <code>Die</code>.</p>",
        "id": 179049723,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572010605
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">response</span> <span class=\"o\">{</span><span class=\"n\">ℍ</span> <span class=\"err\">𝔸</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">ℍ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>I have a bunch of functions like this one where I declare that a type has <code>has_lt</code> and then also that the relation is decidable.</p>",
        "id": 179049926,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572010726
    },
    {
        "content": "<p>Ah. Yeah, the derive handler definitely won't work for that. You'll need to define it manually and unfold enough so that <code>apply_instance</code> sees the decidability. Something like <code>instance History_decidable_rel : decidable_rel ((&lt;) : History -&gt; History -&gt; Prop) := ...</code></p>",
        "id": 179049931,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572010731
    },
    {
        "content": "<p>Where <code>...</code> does some unfolding and then calls <code>apply_instance</code>.</p>",
        "id": 179049979,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572010767
    },
    {
        "content": "<p>I am following your advice.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">nat_decidable_rel</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n        <span class=\"n\">apply_instance</span>\n    <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>As a sanity check this does work for nats.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">has_lt</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Die</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">die</span> <span class=\"bp\">//</span> <span class=\"n\">die</span> <span class=\"err\">∈</span> <span class=\"n\">dice</span><span class=\"o\">}</span>\n<span class=\"kn\">instance</span> <span class=\"n\">Die_decidable_rel</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Die</span> <span class=\"bp\">→</span> <span class=\"n\">Die</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n        <span class=\"n\">apply_instance</span>\n    <span class=\"o\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Tactic State\n1 goal\na b : Die\n⊢ decidable (a &lt; b)\ndudo.lean:29:8: error\ntactic.mk_instance failed to generate instance for\n  decidable (a &lt; b)\nstate:\na b : Die\n⊢ decidable (a &lt; b)\n</pre></div>\n\n\n<p>For <code>Die</code> not so much. It cannot find the instance. I am trying to see whether I can get it to so it only compares the first argument (which is a nat), but I cannot unfold <code>has_lt.lt</code> here. What should I do?</p>",
        "id": 179050614,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572011278
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Die</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">die</span> <span class=\"bp\">//</span> <span class=\"n\">die</span> <span class=\"err\">∈</span> <span class=\"n\">dice</span><span class=\"o\">}</span>\n<span class=\"kn\">instance</span> <span class=\"n\">Die_has_lt</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">Die</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">Die_decidable_rel</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Die</span> <span class=\"bp\">→</span> <span class=\"n\">Die</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</pre></div>\n\n\n<p>I get it now. I won't be sure until I go over the subtype, but it seems that the default <code>has_lt</code> was not good for my use case. I should be able to make this work now.</p>",
        "id": 179052977,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572012867
    },
    {
        "content": "<p>Hmmm...I can't find anything on <code>has_lt</code> for subtypes in the core library's <code>init.data.subtype</code> folder. There is no much there. Is it somewhere else? If so, where?</p>",
        "id": 179053250,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572013066
    },
    {
        "content": "<p>Is there any way to track down the instance that is being inferred?</p>",
        "id": 179053416,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572013175
    },
    {
        "content": "<blockquote>\n<p>Hmmm...I can't find anything on <code>has_lt</code> for subtypes in the core library's <code>init.data.subtype</code> folder. There is no much there. Is it somewhere else? If so, where?</p>\n</blockquote>\n<p>Are you using mathlib?</p>",
        "id": 179053560,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572013257
    },
    {
        "content": "<p>A bit convoluted, but you can write, for example,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>which will print <code>nat.has_lt</code>, then</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_lt</span>\n</pre></div>\n\n\n<p>which will output something you don't care about, but now you can use jump-to-definition on <code>nat.has_lt</code></p>",
        "id": 179053904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572013481
    },
    {
        "content": "<p>Apparently, the function is <code>preorder.to_has_lt</code>. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_lt</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">order_laws_tac</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>When I try to track it down by Ctrl + left click, it just puts me at the class definition. I am not sure where to go from there.</p>",
        "id": 179054616,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572014026
    },
    {
        "content": "<p>Ah, in that case try <code>set_option pp.all true</code> before the <code>#print</code>, and try to guess where the actual instance is, or post the output here</p>",
        "id": 179054713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572014077
    },
    {
        "content": "<p><code>preorder.to_has_lt</code> extracts the <code>has_lt</code> instance from a <code>preorder</code> instance</p>",
        "id": 179054967,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572014231
    },
    {
        "content": "<p>it's automatically generated by that <code>class preorder</code> declaration</p>",
        "id": 179055046,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572014284
    },
    {
        "content": "<p>Ah, I see. So that is why I get sent to the typeclass definition. I guess the question now becomes of how to track down where the subtype is declared as a preorder.</p>",
        "id": 179055264,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572014412
    },
    {
        "content": "<p>Then I would be able to find the implementation of <code>has_lt</code> for it. What would be the best way to do this?</p>",
        "id": 179055484,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572014539
    },
    {
        "content": "<p>Are you talking about why nat is a preorder? You can just use the trick Reid showed you again:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">x</span> <span class=\"c1\">-- partial_order.to_preorder ℕ</span>\n</pre></div>\n\n\n<p>The preorder on nat comes from the partial order on nat.</p>",
        "id": 179057791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572015990
    }
]