[
    {
        "content": "<p>Is this the best way to define a concrete <code>finset</code> ? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>I was looking around here: <a href=\"https://leanprover-community.github.io/mathlib_docs_demo/data/finset/basic.html#finset\">https://leanprover-community.github.io/mathlib_docs_demo/data/finset/basic.html#finset</a> but I couldn't see the notation for constructing a concrete finset aside from this:</p>\n<blockquote>\n<p>Finset constructions</p>\n<div class=\"codehilite\"><pre><span></span><code>singleton: Denoted by {a}; the finset consisting of one element.\nfinset.empty: Denoted by ∅. The finset associated to any type consisting of no elements.\nfinset.range: For any n : ℕ, range n is equal to {0, 1, ... , n - 1} ⊆ ℕ. This convention is consistent with other languages and normalizes card (range n) = n. Beware, n is not in range n.\nfinset.attach: Given s : finset α, attach s forms a finset of elements of the subtype {a // a ∈ s}; in other words, it attaches elements to a proof of membership in the set.\n</code></pre></div>\n\n</blockquote>",
        "id": 272806572,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645538668
    },
    {
        "content": "<p>yes that's a way to construct a finset, although it has some disadvantages since for example it's not obvious that it has cardinality 3</p>",
        "id": 272807198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645538957
    },
    {
        "content": "<p>What are one of the other methods to construct that set?</p>",
        "id": 272807345,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539016
    },
    {
        "content": "<p>If you can construct the set in such a way that nodup is automatically true, then you can use the constructor <code>finset.mk</code> instead</p>",
        "id": 272807374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539034
    },
    {
        "content": "<p>is <code>.mk</code> a method for any structure?</p>",
        "id": 272807496,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539094
    },
    {
        "content": "<p>Most of the finsets constructed in <code>data.fintype.basic</code> are like this, for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bool.fintype/src\">src#bool.fintype</a></p>",
        "id": 272807630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539149
    },
    {
        "content": "<p><code>finset.mk</code> is the constructor of <code>finset</code></p>",
        "id": 272807683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539175
    },
    {
        "content": "<p>usually written with angle brackets</p>",
        "id": 272807712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539189
    },
    {
        "content": "<p>in the linked example, <code>⟨tt ::ₘ ff ::ₘ 0, by simp⟩ : finset bool</code></p>",
        "id": 272807749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539205
    },
    {
        "content": "<p><code>::ₘ</code> is this notation for appending them together somehow?</p>",
        "id": 272807872,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539249
    },
    {
        "content": "<p>that's notation for multiset.cons</p>",
        "id": 272807888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539259
    },
    {
        "content": "<p>you can also write <code>⟦[1, 2]⟧</code></p>",
        "id": 272807935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539282
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 272807965,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539297
    },
    {
        "content": "<p>to build a multiset from a list</p>",
        "id": 272807974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539299
    },
    {
        "content": "<p>So another way of building it could be like : <code> finset.mk ⟦[1, 2, 3]⟧ (by simp)</code> ? ( Looks like it works)</p>",
        "id": 272808205,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539399
    },
    {
        "content": "<p>If I want to get the minimum element of a list I've tried <code>(finset.mk ⟦[1, 2, 3]⟧ (by simp)).min</code> which becomes <code>(some 1)</code> what does <code>some</code> mean?</p>",
        "id": 272808433,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539499
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.min\">docs#finset.min</a> returns an option</p>",
        "id": 272808469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539517
    },
    {
        "content": "<p>I just checked out that definition: <a href=\"/user_uploads/3121/zdW-VmpwQcz3xpPnTAsZbtRZ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/zdW-VmpwQcz3xpPnTAsZbtRZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/zdW-VmpwQcz3xpPnTAsZbtRZ/image.png\"></a></div>",
        "id": 272808551,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539557
    },
    {
        "content": "<p>Could you help me understand that?</p>",
        "id": 272808592,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539576
    },
    {
        "content": "<p>a value of <code>option A</code> is either <code>none</code> or <code>some a</code> where <code>a : A</code></p>",
        "id": 272808635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539599
    },
    {
        "content": "<p>it is used to indicate the possibility of failure in functions</p>",
        "id": 272808723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539627
    },
    {
        "content": "<p>I see</p>",
        "id": 272808732,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539632
    },
    {
        "content": "<p>So like if the set was empty</p>",
        "id": 272808751,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539640
    },
    {
        "content": "<p>yes, read the doc</p>",
        "id": 272808773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539649
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.min\">docs#finset.min</a></p>",
        "id": 272808822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539681
    },
    {
        "content": "<p>But since we know our set isn't empty we can do something like this right? <code>finset.min' (finset.mk ⟦[1, 2, 3]⟧ (by simp)) (by simp)</code> ?</p>",
        "id": 272808845,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539688
    },
    {
        "content": "<p>you tell me, does it typecheck?</p>",
        "id": 272808885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539704
    },
    {
        "content": "<p>it evals to <code>1</code> so yes!</p>",
        "id": 272808972,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539726
    },
    {
        "content": "<p>there you have it</p>",
        "id": 272809001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539739
    },
    {
        "content": "<p>Is that really the shortest way to get the min of a non-empty finset though?</p>",
        "id": 272809014,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539744
    },
    {
        "content": "<p>there are other ways to write that expression that are shorter in terms of characters, but that's the function to call</p>",
        "id": 272809092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645539782
    },
    {
        "content": "<p>Ok, I understand</p>",
        "id": 272809118,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539793
    },
    {
        "content": "<p>Thanks for helping me with this</p>",
        "id": 272809141,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645539803
    },
    {
        "content": "<p>I'm having some trouble using this feature in a theorem: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">7</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset.min'</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The <code>simp</code> doesn't seem to solve it: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simplify</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">simplify</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">7</span><span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">S.nonempty</span>\n</code></pre></div>",
        "id": 272810308,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645540317
    },
    {
        "content": "<p><code>by simp [h₃]</code></p>",
        "id": 272810450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645540381
    },
    {
        "content": "<p>the theorem is also false</p>",
        "id": 272810519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645540410
    },
    {
        "content": "<p>probably you just want to use <code>min</code> instead if the proof is complex though</p>",
        "id": 272810670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645540459
    },
    {
        "content": "<p>Ah ok, so something like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">7</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset.min</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 272810983,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645540581
    },
    {
        "content": "<p>What if I wanted to do some operation on the <code>finset.min S</code> like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">7</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">30</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.min</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 272811384,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645540797
    },
    {
        "content": "<p>It doesn't seem to work out because the goal state becomes: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h₀</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span> <span class=\"bp\">/</span> <span class=\"mi\">25</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">261</span> <span class=\"bp\">/</span> <span class=\"mi\">100</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">53</span> <span class=\"bp\">/</span> <span class=\"mi\">20</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">271</span> <span class=\"bp\">/</span> <span class=\"mi\">100</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">279</span> <span class=\"bp\">/</span> <span class=\"mi\">100</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"mi\">141</span> <span class=\"bp\">/</span> <span class=\"mi\">50</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">143</span> <span class=\"bp\">/</span> <span class=\"mi\">50</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">19</span><span class=\"o\">,</span>\n<span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">7</span><span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 272811498,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645540829
    },
    {
        "content": "<p>The examples are very contrived, but you would do something like <code>\\exists s \\in S.min, s/10 = 3</code></p>",
        "id": 272811559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645540865
    },
    {
        "content": "<p>So <code>S.min : option R</code>, but what allows us to use the <code>\\in</code> operator on that?</p>",
        "id": 272811960,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645541044
    },
    {
        "content": "<p>there is an instance of <code>has_mem A (option A)</code></p>",
        "id": 272812057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645541086
    }
]