[
    {
        "content": "<p>When my students want to prove something about a positive natural number, a number of them seem to naturally write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>forgetting to give a name to the hypothesis that <code>n &gt; 0</code>.  Surprisingly to me, Lean actually <em>accepts</em> this syntax, but it appears that it interprets <code>(n &gt; 0)</code> to mean <code>(n : ℕ) (H : n &gt; 0)</code>, so that <code>foo</code> actually ends up with <em>two</em> arguments named <code>n</code>, one of which is positive.  I will restrain myself from opining on whether I think this is a good design choice and merely ask, where is it documented and what exactly are the rules governing it?  I couldn't find it on a quick look through the reference manual.  Is it something like \"if when expecting a variable declaration Lean finds instead just a bare term of the form <code>x R a</code> where <code>R</code> is a binary relation and <code>x</code> is a variable name, it interprets this as meaning <code>(x : A) (H : x R a)</code>\"?</p>",
        "id": 315654058,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1670955242
    },
    {
        "content": "<p>It is an outgrowth of the hack to support <code>\\forall n &gt; 0, p n</code>, <code>\\exists n &gt; 0, p n</code> etc</p>",
        "id": 315655475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670955667
    },
    {
        "content": "<p>the rule is that <code>(x1 ... xn R a)</code> is a binder, and is expanded to <code>(x1 : _) (H : x1 R a) ... (xn : _) (H : xn R a)</code></p>",
        "id": 315655757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670955759
    },
    {
        "content": "<p>Thanks.  Is it documented anywhere?</p>",
        "id": 315660995,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1670957357
    },
    {
        "content": "<p>not that I know of</p>",
        "id": 315661477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670957506
    },
    {
        "content": "<p>well, there is this: <a href=\"https://github.com/leanprover-community/lean/blob/1f4fec79d25c9a357871f0df896f01b24fbfc35c/src/frontends/lean/parser.cpp#L1037-L1044\">https://github.com/leanprover-community/lean/blob/1f4fec79d25c9a357871f0df896f01b24fbfc35c/src/frontends/lean/parser.cpp#L1037-L1044</a></p>",
        "id": 315661796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670957630
    }
]