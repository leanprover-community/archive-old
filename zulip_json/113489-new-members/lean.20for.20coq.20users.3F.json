[
    {
        "content": "<p>Hello, is there a Lean introduction aimed at Coq users?</p>",
        "id": 196833976,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1588887754
    },
    {
        "content": "<p>There is a lean/coq cheat sheet although it is pretty dated</p>",
        "id": 196835558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588888687
    },
    {
        "content": "<p><a href=\"https://github.com/jldodds/coq-lean-cheatsheet\" title=\"https://github.com/jldodds/coq-lean-cheatsheet\">https://github.com/jldodds/coq-lean-cheatsheet</a></p>",
        "id": 196835574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588888705
    },
    {
        "content": "<p>Thank you very much! Can I have Lean on VSCode behave like CoqIDE, that is, instead of having the goal screen follow the cursor, manually go forward command by command?</p>",
        "id": 196837224,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1588889755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/lean.20for.20coq.20users.3F/near/196837224\" title=\"#narrow/stream/113489-new-members/topic/lean.20for.20coq.20users.3F/near/196837224\">said</a>:</p>\n<blockquote>\n<p>Thank you very much! Can I have Lean on VSCode behave like CoqIDE, that is, instead of having the goal screen follow the cursor, manually go forward command by command?</p>\n</blockquote>\n<p>Thanks for asking this, I also would like to know this ...</p>",
        "id": 196837566,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588889986
    },
    {
        "content": "<p>I don't use vscode but I think there's a button with \"freeze\" in its name that maybe you can use to stop the goal window from changing when you move the cursor?</p>",
        "id": 196838117,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588890389
    },
    {
        "content": "<p>Yes, indeed, there is a freeze function! However it seems much less convenient than having shortcuts to step through the proof.</p>",
        "id": 196838665,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1588890781
    },
    {
        "content": "<p>That shortcut is pressing the <span aria-label=\"down\" class=\"emoji emoji-2b07\" role=\"img\" title=\"down\">:down:</span> key <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 196838734,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588890836
    },
    {
        "content": "<p>I must be failing to imagine the use case which is not covered by one of these two</p>",
        "id": 196838802,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588890869
    },
    {
        "content": "<p>It is mostly a matter of convenience, or getting used to. Maybe some trickery with multiple cursors could be attempted, if VSCode supports it.</p>",
        "id": 196838966,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1588890990
    },
    {
        "content": "<p>I think normal usage is to never use the freeze button--I use emacs which doesn't have an equivalent feature as far as I know.</p>",
        "id": 196839608,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588891449
    },
    {
        "content": "<blockquote>\n<p>Thank you very much! Can I have Lean on VSCode behave like CoqIDE, that is, instead of having the goal screen follow the cursor, manually go forward command by command?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  I would really love to understand where this question come from. Coq's iron curtain moving up and down the proof is one of the first thing I mention when explaining how Lean is more user friendly than Coq, sometimes even before the general use of unicode. And I've never met any Coq user defending that. Usually people mumble there is some extension somewhere which fixes this issue in Coq but it's no longer compatible with current Coq (this is general theme with what I've seen from Coq: there are so many people hacking it that almost every issue has been fixed by someone but there aren't any pair of fixes that are compatible). What do you do with the iron curtain that you cannot do with your up and down arrow key in Lean? Do you know you can even use left and right arrows in Lean to have a finer view of the proof state, for instance in case of multiple rewriting in the same tactic invocation? </p>\n<p>I have no difficulties imagining how trying another proof assistant can be frustrating, if only because your muscle memory keeps typing the wrong keywords or notation. And I know SSReflect has really nice tactics that Lean is missing. But I honestly have no idea why anyone would want the rigid curtain that prevents you from inspecting tactic state anywhere in your file without recompiling.</p>",
        "id": 196869791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588926619
    },
    {
        "content": "<p>Is it something like <a href=\"https://xkcd.com/1172/\" title=\"https://xkcd.com/1172/\">https://xkcd.com/1172/</a> again?</p>",
        "id": 196869948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588926751
    },
    {
        "content": "<p>I was actually going to say that while I think the iron curtain is not something we should replicate, I have had use for a second cursor where I want to see the goal state (live). For instance if I'm adding lemmas to a <code>simp[]</code> call and I want to see the goal state at the end of the line, or perhaps two tactics later</p>",
        "id": 196871271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588927897
    },
    {
        "content": "<p>Nothing a widget cannot solve, I guess.</p>",
        "id": 196872060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588928517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> will probably tell you he has already implemented this in some VScode plugin (-;</p>",
        "id": 196872113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588928543
    },
    {
        "content": "<p>I think it can be done in vscode, but not via widgets if I understand them correctly</p>",
        "id": 196872141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588928577
    },
    {
        "content": "<p>This is definitely doable in the VScode extension without any change on the Lean side.</p>",
        "id": 196872933,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588929189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/lean.20for.20coq.20users.3F/near/196871271\" title=\"#narrow/stream/113489-new-members/topic/lean.20for.20coq.20users.3F/near/196871271\">said</a>:</p>\n<blockquote>\n<p>I was actually going to say that while I think the iron curtain is not something we should replicate, I have had use for a second cursor where I want to see the goal state (live). For instance if I'm adding lemmas to a <code>simp[]</code> call and I want to see the goal state at the end of the line, or perhaps two tactics later</p>\n</blockquote>\n<p>You are not the only one.  <a href=\"https://github.com/leanprover/vscode-lean/issues/151\" title=\"https://github.com/leanprover/vscode-lean/issues/151\">https://github.com/leanprover/vscode-lean/issues/151</a></p>",
        "id": 196873142,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588929341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  It's basically what Mario said, I would like to easily keep the goal state from one line in view while changing a different line.  It doesn't even need to be dynamic (though that would be awesome) -- is there a keyboard shortcut for \"freeze display\"?</p>",
        "id": 196924238,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588958357
    },
    {
        "content": "<p>Not by default, but you can add one by searching for \"toggle updating\" in VS Code's keyboard shortcuts.</p>",
        "id": 196924597,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588958535
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 196924960,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588958715
    },
    {
        "content": "<p>I must have missed something about that when I tried Coq, because the iron curtain thing looked like the opposite of dynamic.</p>",
        "id": 196924982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588958732
    },
    {
        "content": "<p>By the way, I'm still very much interested in seeing your exercises.</p>",
        "id": 196925026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588958754
    },
    {
        "content": "<p>I will start a separate topic in <a class=\"stream\" data-stream-id=\"187764\" href=\"/#narrow/stream/187764-Lean-for-teaching\">#Lean for teaching</a> , is that the polite thing to do on Zulip?</p>",
        "id": 196925481,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588958934
    },
    {
        "content": "<p>Sure. Great!</p>",
        "id": 196926161,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588959274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/lean.20for.20coq.20users.3F/near/196924238\" title=\"#narrow/stream/113489-new-members/topic/lean.20for.20coq.20users.3F/near/196924238\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span>  It's basically what Mario said, I would like to easily keep the goal state from one line in view while changing a different line.  It doesn't even need to be dynamic (though that would be awesome) -- is there a keyboard shortcut for \"freeze display\"?</p>\n</blockquote>\n<p>I don't understand -- does clicking the \"pause\" button not do exactly what you want here?</p>",
        "id": 196931685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588961930
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/4RCiLSRY41w-wYTty0psytvW/pause.png\" title=\"pause.png\">pause.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4RCiLSRY41w-wYTty0psytvW/pause.png\" title=\"pause.png\"><img src=\"/user_uploads/3121/4RCiLSRY41w-wYTty0psytvW/pause.png\"></a></div>",
        "id": 196931749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588961970
    },
    {
        "content": "<p>I clicked the \"pause\" icon and it froze the Lean Goal window; I can restart with the \"play\" icon which I'm pointing out with my cursor. The cursor in the left hand window is at the bottom of the proof and I can type stuff there without the right hand window changing. <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> is that what you're looking for or have I misunderstood?</p>",
        "id": 196931885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588962047
    },
    {
        "content": "<p>I think Heather was asking about a keyboard shortcut for the pause button, and as far as I understand she managed to set one up.</p>",
        "id": 196931976,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588962095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I like the flexibility that Lean gives for inspecting the proof state. However, I would prefer to have <em>inspecting the proof state</em> and <em>editing/navigating around the code</em> as separate actions.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> gives one example where this would be useful. Another would be not having <code>unknown identifier</code> errors while typing. While this could be fixed by adding more \"intelligence\" to Lean/the VSCode plugin, I would rather be able to control where the \"proof state cursor\" is myself.</p>",
        "id": 196941946,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1588967213
    },
    {
        "content": "<p>Why can this not be solved with the \"pause\" button?</p>",
        "id": 196944560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588968540
    },
    {
        "content": "<p>Indeed, the pause button and <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>'s suggestion are viable solutions.</p>",
        "id": 196945431,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1588969034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> I recently made a PR <a href=\"https://github.com/leanprover-community/vscode-lean/issues/158\" title=\"https://github.com/leanprover-community/vscode-lean/issues/158\">vscode-lean#158</a> that should give you some of this flexibility. The way it works is you trigger the \"Toggle Sticky Position\" command, and then it drops a mark in your code where the goal state will now be reported rather than at the cursor. Unlike Coq's iron curtain, it is live updating, although if you put the mark far below the cursor it might take a while to get feedback since you have to wait for those orange bars to clear first.</p>",
        "id": 196973235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588998873
    }
]