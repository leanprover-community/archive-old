[
    {
        "content": "<p>Has anyone formalized the Intermediate Value Theorem on Lean? I'm confused about some steps of the proof :(</p>",
        "id": 188043366,
        "sender_full_name": "Elizabeth",
        "timestamp": 1581534719
    },
    {
        "content": "<p>There are some versions of the IVT in this file here, but I'm not sure how explanatory they are: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/algebra/ordered.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/algebra/ordered.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/topology/algebra/ordered.lean</a></p>",
        "id": 188045604,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581536055
    },
    {
        "content": "<p>If you post some code, maybe we can give you specific advice.</p>",
        "id": 188045622,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581536067
    },
    {
        "content": "<p>Well, I'm just revising for a test and confused for the proof my lecturer showed me, so I wonder if Lean could help to explain the idea more clearly. Anyway, thank you very much.</p>",
        "id": 188046541,
        "sender_full_name": "Elizabeth",
        "timestamp": 1581536648
    },
    {
        "content": "<p>In principle, the answer should be yes. However, with the way mathlib works, I'm afraid it won't really work.</p>",
        "id": 188046613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581536726
    },
    {
        "content": "<p>mathlib focuses on getting the most general statement with the shortest proof. So it doesn't aim for readability or explaining ideas/details.</p>",
        "id": 188046656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581536758
    },
    {
        "content": "<p>In other words, all the information is there (there can't be any gaps in the proofs), but you'll probably have to work in order to understand what's going on.</p>",
        "id": 188046748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581536807
    },
    {
        "content": "<p>You could try applying a procedure like<br>\n(0. Obtain a built copy of mathlib)</p>\n<ol>\n<li>Find a theorem whose proof you want to understand. Probably <code>is_connected_Icc</code> is a good starting place.</li>\n<li>Open the file in an IDE, step through the lines of the tactic proof and watch how the tactic state changes. Ignore the actual tactics and try to justify the steps for yourself just looking at the tactic state.</li>\n<li>If there's a step you don't understand, hopefully the corresponding tactic names a relevant theorem. Look at the type of that theorem and if you don't understand why it is true then go back to step 1.</li>\n</ol>",
        "id": 188048177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581537712
    },
    {
        "content": "<p>Elizabeth, you're in my class right?<br>\nI have proved the intermediate value theorem in LEAN the same way our professor had taught us so it might be helpful?<br>\nHere it is (scroll down to line 237): <a href=\"https://github.com/JasonKYi/M4000x_LEAN_formalisation/blob/master/src/M40002/M40002_C5.lean\" target=\"_blank\" title=\"https://github.com/JasonKYi/M4000x_LEAN_formalisation/blob/master/src/M40002/M40002_C5.lean\">https://github.com/JasonKYi/M4000x_LEAN_formalisation/blob/master/src/M40002/M40002_C5.lean</a></p>",
        "id": 188050440,
        "sender_full_name": "Jason KY.",
        "timestamp": 1581539378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253947\">@Elizabeth</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 188050848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581539646
    },
    {
        "content": "<p>I think it's super cool that <span class=\"user-mention\" data-user-id=\"253947\">@Elizabeth</span> even thought to ask this question, and even cooler that <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> has an answer!</p>",
        "id": 188050851,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581539648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> Wow, that's a monster proof (-;</p>",
        "id": 188051140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581539901
    },
    {
        "content": "<p>Typo at <a href=\"https://github.com/JasonKYi/M4000x_LEAN_formalisation/blob/master/src/M40002/M40002_C5.lean#L453\" target=\"_blank\" title=\"https://github.com/JasonKYi/M4000x_LEAN_formalisation/blob/master/src/M40002/M40002_C5.lean#L453\">https://github.com/JasonKYi/M4000x_LEAN_formalisation/blob/master/src/M40002/M40002_C5.lean#L453</a><br>\nYou want <code>-- closed interval is compact</code></p>",
        "id": 188051203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581539980
    },
    {
        "content": "<p>Ah yes, that's what I want :D</p>",
        "id": 188051267,
        "sender_full_name": "Jason KY.",
        "timestamp": 1581540028
    },
    {
        "content": "<p>Two remarks: (1) Do you know about the lean formatter that Patrick wrote? Kevin used it for the Sandwich theorem at some point.</p>",
        "id": 188051286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581540051
    },
    {
        "content": "<p>If you sprinkle some comments in your proofs, that could turn this into a beautiful page</p>",
        "id": 188051304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581540078
    },
    {
        "content": "<p>(2) Do you know about <code>simp</code>? You have lots of theorems of the form <code>slightly_complicated = easier</code>. If you tag them with <code>@[simp]</code> then the simplifier can use them when you call the <code>simp</code> tactic.</p>",
        "id": 188051387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581540127
    },
    {
        "content": "<p>Yeah! I formalised our intro module using it! <br>\nI think this was an earlier version<br>\n<a href=\"http://wwwf.imperial.ac.uk/~buzzard/M40001/html/M40001/M40001_4.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/M40001/html/M40001/M40001_4.html\">http://wwwf.imperial.ac.uk/~buzzard/M40001/html/M40001/M40001_4.html</a></p>",
        "id": 188051392,
        "sender_full_name": "Jason KY.",
        "timestamp": 1581540129
    },
    {
        "content": "<p>Nice</p>",
        "id": 188051443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581540184
    },
    {
        "content": "<blockquote>\n<p>(2) Do you know about <code>simp</code>? You have lots of theorems of the form <code>slightly_complicated = easier</code>. If you tag them with <code>@[simp]</code> then the simplifier can use them when you call the <code>simp</code> tactic.</p>\n</blockquote>\n<p>I don't know why but <code>simp</code> seems to slow my pc down quite a lot so I try to avoid it.</p>",
        "id": 188051447,
        "sender_full_name": "Jason KY.",
        "timestamp": 1581540189
    },
    {
        "content": "<p>Is there a way to make it go faster?</p>",
        "id": 188051458,
        "sender_full_name": "Jason KY.",
        "timestamp": 1581540204
    },
    {
        "content": "<p>Ok, I see.</p>",
        "id": 188051460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581540205
    },
    {
        "content": "<p>Do you have a pre-compiled mathlib?</p>",
        "id": 188051466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581540216
    },
    {
        "content": "<p>I would assume so. I think otherwise you would see other slowdowns already.</p>",
        "id": 188051485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581540239
    },
    {
        "content": "<p>I believe so, yeah</p>",
        "id": 188051526,
        "sender_full_name": "Jason KY.",
        "timestamp": 1581540247
    },
    {
        "content": "<p>I followed all the steps on the website atleast</p>",
        "id": 188051544,
        "sender_full_name": "Jason KY.",
        "timestamp": 1581540269
    },
    {
        "content": "<p>I'm not an expert on such performance issues. But <code>simp</code> should make a pc so slow that it becomes annoying</p>",
        "id": 188051551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581540274
    },
    {
        "content": "<p>Unless your pc is &gt; 10 yrs old.</p>",
        "id": 188051582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581540304
    },
    {
        "content": "<p>I normally just use simp and then convert it back with <code>set_option trace.simplify.rewrite true</code> so it becomes fast again</p>",
        "id": 188051678,
        "sender_full_name": "Jason KY.",
        "timestamp": 1581540375
    },
    {
        "content": "<p>There is <code>squeeze_simp</code> to tell you what <code>simp</code> did</p>",
        "id": 188051695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581540398
    },
    {
        "content": "<p>You can then call <code>simp only [foo, bar]</code> which is usually an order of magnitude faster than <code>simp</code></p>",
        "id": 188051715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581540420
    },
    {
        "content": "<p>Ah! I'm gonna try it out</p>",
        "id": 188051754,
        "sender_full_name": "Jason KY.",
        "timestamp": 1581540455
    },
    {
        "content": "<p>Nice! That's way better than writing <code>set_option trace.simplify.rewrite true</code> every time</p>",
        "id": 188051850,
        "sender_full_name": "Jason KY.",
        "timestamp": 1581540537
    },
    {
        "content": "<blockquote>\n<p>Two remarks: (1) Do you know about the lean formatter that Patrick wrote? Kevin used it for the Sandwich theorem at some point.</p>\n</blockquote>\n<p>Jason has written a bunch of stuff in the format of Patrick's formatter, but we couldn't get the formatter to work :-( <a href=\"https://github.com/leanprover-community/format_lean/issues/7\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean/issues/7\">https://github.com/leanprover-community/format_lean/issues/7</a></p>",
        "id": 188055105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581543072
    },
    {
        "content": "<p>OMG!!! Thank you very much!!! It really helps! (Good luck for tomorrow's test <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> :))))</p>",
        "id": 188055117,
        "sender_full_name": "Elizabeth",
        "timestamp": 1581543081
    }
]