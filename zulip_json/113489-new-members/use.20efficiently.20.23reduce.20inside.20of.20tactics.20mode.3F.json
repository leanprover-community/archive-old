[
    {
        "content": "<p>Hello,<br>\nWhen we (with Ödül and some colleagues from the Institute) tried to prove that any function from a discrete topological space to any other topological space is continuous, as we attempted to state it in Thm discrete_left_adj_forget by the code below, we have seen the corresponding infoview in Lean, respectively.<br>\nLean code:</p>\n<div class=\"codehilite\" data-code-language=\"def\"><pre><span></span><code> ∀ (U : set Y), (Y_top.is_open U) → (X_top.is_open (preimage f U))\ndef top_discrete (X : Type) : topological_space X := topological_space.mk\n(λ (S : set X), true)\n(trivial)\n(begin\n    intros H1 H2 H3 H4,\n     trivial,\nend)\n(begin\n intros H1 H2,\ntrivial,\nend)\ntheorem discrete_left_adjoint_forget {X : Type} : ∀ {Y : Type}\n(Y_top : topological_space Y) (f : X → Y), continuous (top_discrete X) Y_top f :=\nbegin\nintros Y Y_top f,\nintros U,\nend\n</code></pre></div>\n<p>Lean infoview:</p>\n<div class=\"codehilite\" data-code-language=\"xy\"><pre><span></span><code>Y_top: topological_space Y\n f: X → Y\n U: set Y\n U_open: Y_top.is_open U\n ⊢ (top_discrete X).is_open (f ⁻¹' U)\n</code></pre></div>\n<p>\"We would like to evaluate this function (top_discrete X).is_open (preimage f U) to be \"true’’ in Lean infoview, since in top_discrete’’ we defined this function using the lambda expression which turns out to be \"True\".  When we #reduce (top_discrete X).is_open (preimage f U) outside of the tactics mode, then it evaluates it as being \"true\". So even though it can do it outside of tactics mode, this is not the case inside of the proof and now we are trying to find a way to make lean show that this expression is as true inside of proof. </p>\n<p>Thanks in advance.</p>",
        "id": 260206204,
        "sender_full_name": "Elif Sacikara (Alumni)",
        "timestamp": 1635978572
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 260207164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635979198
    },
    {
        "content": "<p>Could you read the link <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and adjust your post so that it becomes much easier to help you,</p>",
        "id": 260207263,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635979238
    },
    {
        "content": "<p>I moved the post to a new thread</p>",
        "id": 260207343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635979285
    },
    {
        "content": "<p>yes, it's much easier to help if we can just cut and paste what you post -- so add in the imports, definitions etc</p>",
        "id": 260207729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635979520
    },
    {
        "content": "<p>It looks like something has gone wrong with the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> above</p>",
        "id": 260207836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635979588
    },
    {
        "content": "<p>Yes, the triple back ticks need to be on a line of their own like in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 260207891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635979628
    },
    {
        "content": "<p>I still tried to reconstruct the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and arrived at:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cont</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X_top</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y_top</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Y_top.is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X_top.is_open</span> <span class=\"o\">(</span><span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">top_discrete</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space.mk</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">trivial</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"n\">H3</span> <span class=\"n\">H4</span><span class=\"o\">,</span>\n     <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kd\">begin</span>\n <span class=\"n\">intros</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">discrete_left_adjoint_forget</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">Y_top</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">cont</span> <span class=\"o\">(</span><span class=\"n\">top_discrete</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">Y_top</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">Y</span> <span class=\"n\">Y_top</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">U</span> <span class=\"n\">U_open</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't really see any question here.</p>",
        "id": 260208052,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635979739
    },
    {
        "content": "<p>And I need to go to bed now, sorry.</p>",
        "id": 260208163,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635979803
    },
    {
        "content": "<p>There's no tactic that applies <code>#reduce</code> to the current goal, but since you already know the goal reduces to <code>true</code> you can change the goal with <code>change true,</code> or just provide a proof of <code>true</code> directly with <code>trivial</code>.</p>",
        "id": 260208190,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635979834
    },
    {
        "content": "<p>I think the answer is <code>dsimp only [top_discrete]</code>, if the question is what I think it is</p>",
        "id": 260208194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635979842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/use.20efficiently.20.23reduce.20inside.20of.20tactics.20mode.3F/near/260208190\">said</a>:</p>\n<blockquote>\n<p>There's no tactic that applies <code>#reduce</code> to the current goal, but since you already know the goal reduces to <code>true</code> you can change the goal with <code>change true,</code> or just provide a proof of <code>true</code> directly with <code>trivial</code>.</p>\n</blockquote>\n<p>Thanks for the comment and the suggestion. We can complete the proof by \"trivial\" for sure but we suppose that some day in the future while we are working in a long proof and while doing so when we give our definition a while ago before our proof and if we suppose that we do not remember if it exactly turns out to be ``true\" in the definition, is there is a way of seeing this value inside of the proof or a way of making Lean possible to do it?</p>",
        "id": 260209320,
        "sender_full_name": "Elif Sacikara (Alumni)",
        "timestamp": 1635980534
    },
    {
        "content": "<p>If you open a quote with <code> ` </code> then close it with <code> ` </code> and not <code> \" </code> (you can just edit your post just above)</p>",
        "id": 260209603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635980698
    },
    {
        "content": "<p>This is a full code, sorry for the clumsiness: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">is_open</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">is_open_univ</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">is_open_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">∩</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n <span class=\"o\">(</span><span class=\"n\">is_open_sUnion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">sUnion</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">topological_space.is_open_univ</span>\n\n <span class=\"kd\">lemma</span> <span class=\"n\">empty_set_open</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">topological_space.is_open</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n <span class=\"kd\">begin</span>\n   <span class=\"k\">have</span> <span class=\"n\">hEmptyUnion</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space.is_open_sUnion</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n   <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"bp\">∅</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">exact</span> <span class=\"n\">not_mem_empty</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n   <span class=\"n\">rw</span> <span class=\"n\">sUnion_empty</span> <span class=\"n\">at</span> <span class=\"n\">hEmptyUnion</span><span class=\"o\">,</span>\n   <span class=\"n\">apply</span> <span class=\"n\">hEmptyUnion</span><span class=\"o\">,</span>\n   <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"k\">have</span> <span class=\"n\">H4</span> <span class=\"o\">:=</span> <span class=\"n\">H2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n   <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"n\">H4</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finite_inter_open</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">topological_space.is_open</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">topological_space.is_open</span> <span class=\"o\">(</span><span class=\"n\">sInter</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"kd\">begin</span>\n   <span class=\"n\">apply</span> <span class=\"n\">finite.induction_on</span> <span class=\"n\">hC</span><span class=\"o\">,</span>\n   <span class=\"n\">rw</span> <span class=\"n\">sInter_empty</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span>\n     <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n     <span class=\"n\">exact</span> <span class=\"n\">topological_space.is_open_univ</span><span class=\"o\">,</span>\n   <span class=\"o\">},</span>\n   <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">a_not_in_s</span> <span class=\"n\">s_finite</span> <span class=\"n\">s_family_open</span> <span class=\"n\">hAllOpen</span><span class=\"o\">,</span>\n   <span class=\"n\">rw</span> <span class=\"n\">sInter_insert</span><span class=\"o\">,</span>\n   <span class=\"n\">apply</span> <span class=\"n\">topological_space.is_open_inter</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span>\n     <span class=\"n\">apply</span> <span class=\"n\">hAllOpen</span><span class=\"o\">,</span>\n     <span class=\"n\">simp</span><span class=\"o\">,</span>\n   <span class=\"o\">},</span>\n   <span class=\"o\">{</span>\n     <span class=\"n\">apply</span> <span class=\"n\">s_family_open</span><span class=\"o\">,</span>\n     <span class=\"n\">intro</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">f_aux</span> <span class=\"o\">:=</span> <span class=\"n\">hAllOpen</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n     <span class=\"n\">intro</span> <span class=\"n\">H_aux_2</span><span class=\"o\">,</span>\n     <span class=\"n\">apply</span> <span class=\"n\">f_aux</span><span class=\"o\">,</span>\n     <span class=\"n\">exact</span> <span class=\"n\">mem_insert_of_mem</span> <span class=\"n\">a</span> <span class=\"n\">H_aux_2</span><span class=\"o\">,</span>\n   <span class=\"o\">}</span>\n <span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">continuous</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">topological_space.is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">topological_space.is_open</span> <span class=\"o\">(</span><span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">top_discrete</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space.mk</span>\n <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">trivial</span><span class=\"o\">)</span>\n <span class=\"o\">(</span>\n   <span class=\"kd\">begin</span>\n     <span class=\"n\">intros</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"n\">H3</span> <span class=\"n\">H4</span><span class=\"o\">,</span>\n     <span class=\"n\">trivial</span><span class=\"o\">,</span>\n   <span class=\"kd\">end</span>\n <span class=\"o\">)</span>\n <span class=\"o\">(</span>\n   <span class=\"kd\">begin</span>\n     <span class=\"n\">intros</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n     <span class=\"n\">trivial</span><span class=\"o\">,</span>\n   <span class=\"kd\">end</span>\n <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 260209645,
        "sender_full_name": "Elif Sacikara (Alumni)",
        "timestamp": 1635980726
    },
    {
        "content": "<p>You can reduce things by hand in the middle of a proof, using tactics like <code>dunfold</code>, <code>delta</code> and <code>dsimp</code></p>",
        "id": 260209835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635980840
    }
]