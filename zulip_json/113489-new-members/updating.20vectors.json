[
    {
        "content": "<p>Hi! Can anyone provide some pointers here? I'm trying to define a function that updates a vector at a given index. This seems to work, but it's very unwieldy:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">update_nth</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">idx</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">idx</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"err\">$</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">of_fn</span> <span class=\"n\">id</span>\n</pre></div>\n\n\n<p>In particular, proving elementary lemmas on it seems near impossible:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">update_nth_helper</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">update_nth</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">update_nth</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>I'd like to provide a recursive definition, but I can't get it to work. Lean seems to think <code>n</code> is fixed.</p>\n<p>Any tips on best approach here?</p>",
        "id": 151447262,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544536970
    },
    {
        "content": "<p>another way to define that function is using <code>vector.nth</code> with <code>vector.of_fn</code></p>",
        "id": 151447862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544537476
    },
    {
        "content": "<p>or by referring to <code>list.update_nth</code></p>",
        "id": 151447871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544537491
    },
    {
        "content": "<p>ooh, there is a <code>list.update_nth</code>? hadn't seen that! thanks!</p>",
        "id": 151447990,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544537569
    },
    {
        "content": "<p>as for <code>n</code> fixed, that happens when you put it left of the colon</p>",
        "id": 151447994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544537575
    },
    {
        "content": "<p>I'd like to put it right of the colon, but then I cannot name it any more, correct?</p>",
        "id": 151448014,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544537597
    },
    {
        "content": "<p>sure you can</p>",
        "id": 151448021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544537605
    },
    {
        "content": "<p>and almost all other arguments depend on it :o</p>",
        "id": 151448026,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544537610
    },
    {
        "content": "<p>oh wow</p>",
        "id": 151448036,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544537618
    },
    {
        "content": "<p>i feel silly now</p>",
        "id": 151448050,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544537631
    },
    {
        "content": "<p>can u provide 1 more hint on how <code>vector.nth</code> + <code>vector.of_fn</code> would work?</p>",
        "id": 151448115,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544537654
    },
    {
        "content": "<p><code>list.update_nth</code> worked beautifully btw - thanks a million mario!</p>",
        "id": 151448713,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544538138
    },
    {
        "content": "<p>I guess Mario might have been thinking of something like <code>vector.of_fn (λ k, if k = n then a else v.nth k)</code>.</p>",
        "id": 151448913,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1544538339
    },
    {
        "content": "<p>Depending on your application here, you might consider using <code>array</code> instead of <code>vector</code>.</p>",
        "id": 151448958,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1544538369
    },
    {
        "content": "<p>:O</p>",
        "id": 151449413,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544538811
    },
    {
        "content": "<p>what's the trade-off?</p>",
        "id": 151449421,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544538822
    },
    {
        "content": "<p>array is already basically functions from <code>fin n</code></p>",
        "id": 151449598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544538934
    },
    {
        "content": "<p>it's also more efficient for computational purposes, dunno if that matters</p>",
        "id": 151449663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544538964
    },
    {
        "content": "<p>plus this function already exists on <code>array</code>, it's called <code>array.write</code> and it's the most basic array function (everything else is in terms of it) so you should be in a good place wrt lemmas</p>",
        "id": 151449711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544539019
    },
    {
        "content": "<p>i like that</p>",
        "id": 151449741,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544539045
    },
    {
        "content": "<p>thanks a bunch folks!</p>",
        "id": 151449751,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544539056
    },
    {
        "content": "<p>can't wait to see your presentation on p-adic numbers this thursday btw <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> :-)</p>",
        "id": 151449887,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544539163
    },
    {
        "content": "<p>Hmm, yeah, I should finish those slides at some point.</p>",
        "id": 151450160,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1544539363
    },
    {
        "content": "<p>^^</p>",
        "id": 151450283,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1544539463
    }
]