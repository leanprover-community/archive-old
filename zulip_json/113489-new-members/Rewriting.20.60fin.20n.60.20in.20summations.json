[
    {
        "content": "<p>Apologies for the long-winded non-m we:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.clifford_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.sign</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">clifford_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">Q</span>\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">blade.pre</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">blade</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">pre</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a.k</span> <span class=\"bp\">*</span> <span class=\"n\">b.k</span><span class=\"o\">,</span> <span class=\"n\">a.factors</span> <span class=\"bp\">++</span> <span class=\"n\">b.factors</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">[]⟩,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">pre.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.append_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">pre.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.nil_append</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">pre.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.append_nil</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a.k</span><span class=\"o\">,</span> <span class=\"n\">a.factors</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">pre.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">pre.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_factors</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"bp\">=</span> <span class=\"n\">a.factors</span> <span class=\"bp\">++</span> <span class=\"n\">b.factors</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_k</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a.k</span> <span class=\"bp\">*</span> <span class=\"n\">b.k</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Q</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">blade.pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">clifford_algebra</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"n\">b.k</span> <span class=\"bp\">•</span> <span class=\"bp\">∑</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">b.factors.length</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">equiv.perm.sign</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b.factors.map</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">Q</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">blade.pre</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]⟩</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Q</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">of_k</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">of_factors</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eval_mul_of</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">blade.pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.eval</span> <span class=\"bp\">=</span> <span class=\"n\">b.eval</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">of</span> <span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">of</span> <span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">blade.pre.eval</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- HERE</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.factors</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factors</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">a.factors.length.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- subst this,  --fails</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eval_mul_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">blade.pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.eval</span> <span class=\"bp\">=</span> <span class=\"n\">b.eval</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">blade.pre.eval</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- HERE</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c.factors</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">c.k</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">c.k</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">((</span><span class=\"bp\">•</span><span class=\"o\">)</span> <span class=\"n\">c.k</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- creates 18 goals!!</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>  <span class=\"c1\">-- new tactic, `very_sorry`?</span>\n    <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pre</span>\n<span class=\"kd\">end</span> <span class=\"n\">blade</span>\n</code></pre></div>\n<p>On the lines marked <code>HERE</code>, the goal contains some obviously simplifiable subexpressions of the form <code>(a ++ b).length</code>. However, I can't work out any way to rewrite them with <code>list.length_append</code>, and attempting to hammer the problem with <code>convert</code> yields a ridiculous number of very similar goals.</p>",
        "id": 217439260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605896302
    },
    {
        "content": "<p>Taking  a look now. But it might work if you replace the <code>fin long-value-here</code> with a <code>fin k</code>, then induct on <code>k</code></p>",
        "id": 217439657,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605896517
    },
    {
        "content": "<p>You need to have some way of breaking down a sum over equiv.perm, a la <code>fin.sum_univ_succ</code>. Been thinking of making one, but haven't gotten there yet.</p>",
        "id": 217439768,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605896562
    },
    {
        "content": "<p>Right, obviously I'm missing a lot of lemmas to do the full proof here</p>",
        "id": 217439813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605896589
    },
    {
        "content": "<p>But I'm annoyed that I can't apply the lemmas that I do have (<code>list.length_append</code>, <code>of_factors</code>, etc) to simplify the problem a little</p>",
        "id": 217439865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605896615
    },
    {
        "content": "<p>Maybe have a lemma that distributes <code>eval</code> over a <code>*</code>?</p>",
        "id": 217439894,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605896627
    },
    {
        "content": "<p>I don't think it distributes in any helpful way</p>",
        "id": 217440036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605896687
    },
    {
        "content": "<p>Also my definition is wrong anyway - this question is about the rewrites, rather than whether my definitions make sense</p>",
        "id": 217440239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605896791
    },
    {
        "content": "<p>One of the issues is that the summands are on different types.</p>",
        "id": 217440827,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605897101
    },
    {
        "content": "<p>Yeah, that probably is where the pain is</p>",
        "id": 217441135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605897256
    },
    {
        "content": "<p>So perhaps summing over some mix of <code>list.range</code> and <code>list.permutations</code> would work better</p>",
        "id": 217441153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605897268
    },
    {
        "content": "<p>The docs in <code>data/equiv/basic</code> say <code>group structure on equiv.perm α. More lemmas about equiv.perm can be found in data/equiv/perm.</code> but I can't find that <code>data/equiv/perm</code> file</p>",
        "id": 217443629,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605898554
    },
    {
        "content": "<p>Hmm, it seems that <code>data/equiv/perm</code> didn't even exist when that module doc was added: <a href=\"https://github.com/leanprover-community/mathlib/tree/3f7bf3ca2284d614ee2119edebd5d3db7f923803/src/data/equiv\">https://github.com/leanprover-community/mathlib/tree/3f7bf3ca2284d614ee2119edebd5d3db7f923803/src/data/equiv</a></p>",
        "id": 217444912,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605899160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> do you know which file you meant to refer to in that module doc?</p>\n<p>(As the reviewer of that PR, I should have asked this much earlier <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 217445337,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605899356
    },
    {
        "content": "<p>The files in <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/group_theory/perm\"><code>group_theory/perm</code></a> might fit the bill.</p>",
        "id": 217446399,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605899789
    },
    {
        "content": "<p>I'm sorry for the typo.</p>",
        "id": 217539825,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1606031296
    }
]