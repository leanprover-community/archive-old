[
    {
        "content": "<p>What's the notation to use with the rewrite tactic to control which instances within the goal statement get rewritten?  I was working from an old version of Avigad et al.'s \"Theorem Proving in Lean\" tutorial (Chapter 11) which says that \"For example, rewrite t at {1, 3} specifies that only the first and third occurrences should be replaced\", but I can't get this to work (I'm using a fresh install of VSCode, and I've also tried it at <a href=\"https://leanprover.github.io/live/latest/\">https://leanprover.github.io/live/latest/</a>)</p>\n<p>Has this notation been deprecated?  Is there an alternative notation to achieve the same effect?</p>",
        "id": 243626509,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1624440400
    },
    {
        "content": "<p>Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"n\">occurrences.pos</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]},</span>\n</code></pre></div>",
        "id": 243626665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624440511
    },
    {
        "content": "<p>Ah, great, thanks!  Is this already in the documentation somewhere that I missed?</p>",
        "id": 243626912,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1624440683
    },
    {
        "content": "<p>I don't know...</p>",
        "id": 243626939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624440707
    },
    {
        "content": "<p>I think <code>nth_rewrite</code> tends to get used instead of <code>occs</code>? There was some weird bugs, iirc</p>",
        "id": 243632017,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624443876
    },
    {
        "content": "<p><code>occs</code> only replaces <em>different</em> instantiations of the pattern you're rewriting by. If the exact subexpression appears multiple times, you'll need to use <code>nth_rewrite</code>.</p>",
        "id": 243735790,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1624502229
    },
    {
        "content": "<p>In the example I was looking at we have a term <code>H1 : a = b</code> and the goal is <code>f a a a = 0</code>, and using <code>rewrite [H1] {occs := occurrences.pos [1,3]}</code> successfully re-writes the goal to <code>f b a b = 0</code> as intended.  So I'm not clear on what you mean by \"different instantiations\" vs \"exact subexpression\".  Isn't this a case where we have the exact subexpression <code>a</code> appearing multiple times?</p>",
        "id": 243752306,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1624521235
    },
    {
        "content": "<p>When you have a rewrite that can be instatiated (like an equality within a forall statement) rewrite occs first picks the instantiation then applies to the occurences, does experimenting with this example help?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">--nth_rewrite 0 h, -- rewrites the first 1+ 1 = 2*1</span>\n<span class=\"c1\">--nth_rewrite 1 h, -- rewrites 2 + 2 = 2*2</span>\n<span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"n\">occurrences.pos</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]},</span> <span class=\"c1\">-- this doesn't rewrite 2 + 2 = 2*2 we have to do rw [h 2] to do so somehow.</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 243895322,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1624614767
    },
    {
        "content": "<p>Ah, yes, I get it now!  Thanks very much for this explanation.</p>",
        "id": 243907791,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1624623693
    },
    {
        "content": "<p>At least, I think I get it.  Does <code>rewrite [h] {occs := occurrences.pos [...]}</code>always grab the first thing that matches (in this case, matching <code>n</code> to <code>1</code>)?  And then our choice of what to put in the square brackets after <code>pos</code> governs which occurrences of that thing (in this case, which occurrences of <code>1+1</code>) to replace.  If I've got that right, is there any way to force it to grab the second match instead (matching <code>n</code> with <code>2</code>)?  Or is it best just to give up on <code>occs</code> altogether and always just use <code>nth_rewrite</code> instead (which I guess is what Scott was saying yesterday)?</p>",
        "id": 243909227,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1624624498
    },
    {
        "content": "<p>If <code>nth_rewrite</code> works, I would go with that. At some point is was a bit buggy for me. But maybe that has been fixed in the mean time.</p>",
        "id": 243909839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624624876
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 243939218,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1624638547
    }
]