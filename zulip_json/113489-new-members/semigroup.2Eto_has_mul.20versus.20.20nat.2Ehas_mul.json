[
    {
        "content": "<p>Consider the following proof attempt to a simple lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">factorial_divide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmn</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">):</span>\n<span class=\"o\">((</span><span class=\"n\">m.factorial</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span><span class=\"o\">))</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">n.factorial</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">chosse_mul</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">n.choose</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">m.factorial</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n.factorial</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.choose_eq_factorial_div_factorial</span> <span class=\"n\">hmn</span><span class=\"o\">],</span>\n      <span class=\"c1\">-- simp [div_mul_eq_mul_div], why doesn't this work?</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">dvd.intro_left</span> <span class=\"o\">((</span><span class=\"n\">n.choose</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n    <span class=\"c1\">-- exact choose_mul, why doesn't this work?</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm a bit stumped that e.g. in the after the line <code>apply dvd.intro_left ((n.choose m)),</code> I see the exact same state in the goal and in choose_mul in the lean infoview. When I click on the terms, I can see there is some difference, but how can I actually get control over how the division/multiplication is done when defining <code>choose_mul</code>?</p>",
        "id": 226723350,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613595059
    },
    {
        "content": "<p>The second question is easy to answer -- you made a typo :-) <code>chosse</code> -&gt; <code>choose</code></p>",
        "id": 226723621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613595172
    },
    {
        "content": "<p>cool, that explains solves the second \"why doesn't this work?\"!</p>",
        "id": 226723867,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613595279
    },
    {
        "content": "<p>As for the first, <code>#check @div_mul_eq_mul_div</code> shows you that it's a theorem which applies to <code>comm_group_with_zero</code>s, and the naturals are not an example of a <code>comm_group_with_zero</code>.</p>",
        "id": 226723882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613595289
    },
    {
        "content": "<p>In fact there will not be a theorem of the form <code>(a / b) * b = a</code> for naturals, because this is not true in general, e.g. <code>(3 / 2) * 2 = 1 * 2 = 2</code> :-/</p>",
        "id": 226724013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613595360
    },
    {
        "content": "<p>to prove <code>a / b * b = a</code> for nats you need the assumption that b divides a, which unfortunately is what you're trying to prove :-/</p>",
        "id": 226724127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613595405
    },
    {
        "content": "<p>The result you're trying to prove is already in the library -- it's called <code>nat.factorial_mul_factorial_dvd_factorial</code>, so you can prove it with <code>by library_search</code>. But if you're looking for a proof of your own then maybe this doesn't help.</p>",
        "id": 226724426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613595530
    },
    {
        "content": "<p>There is also <code>nat.choose_mul_factorial_mul_factorial</code></p>",
        "id": 226724642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613595608
    },
    {
        "content": "<p>Thanks I will just check out how those proofs work! (and meanwhile just use them)</p>",
        "id": 226724772,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1613595660
    }
]