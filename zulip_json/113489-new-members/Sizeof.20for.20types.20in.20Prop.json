[
    {
        "content": "<p>I am currently refactoring a type to be in Prop instead of Type and this is breaking the well-foundedness proof of a function since the <code>mytype.sizeof</code> function doesn't exist anymore. Is there an easy way to fix this? And why is there no <code>sizeof</code> for types in Prop (that only eliminates into Prop or so..)?</p>",
        "id": 191400945,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584890247
    },
    {
        "content": "<p>there is no way to define a <code>sizeof</code> for Prop valued inductive predicates, unless they are large eliminating</p>",
        "id": 191401009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584890308
    },
    {
        "content": "<p>or if they have some other special property specific to the set up</p>",
        "id": 191401039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584890348
    },
    {
        "content": "<p>do you have an example?</p>",
        "id": 191401151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584890481
    },
    {
        "content": "<p>From the type checker I sent you. I figured out how to put Judgement into Prop, but now this lemma is breaking:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">typing_pi</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span><span class=\"o\">},</span> <span class=\"n\">Judgement</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Judgement</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Judgement</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">s</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">r</span> <span class=\"n\">ta</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ta</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Judgement</span><span class=\"bp\">.</span><span class=\"n\">conv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">typing_pi</span> <span class=\"n\">tr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Context</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Judgement</span><span class=\"bp\">.</span><span class=\"n\">weaken</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">s</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"n\">j</span> <span class=\"n\">js</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">j2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">typing_pi</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Judgement</span><span class=\"bp\">.</span><span class=\"n\">weaken</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">s</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"n\">j2</span> <span class=\"n\">js</span><span class=\"bp\">⟩</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n<span class=\"n\">rcases</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">Judgement</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 191401228,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584890586
    },
    {
        "content": "<p>More specifically the <code>using_well_founded</code> part</p>",
        "id": 191401241,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584890604
    },
    {
        "content": "<p>I can push the whole code to Github in half an hour or so</p>",
        "id": 191401350,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584890762
    },
    {
        "content": "<p>Use tactic mode and <code>induction</code> to prove it, instead of using the equation compiler</p>",
        "id": 191401409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584890834
    },
    {
        "content": "<p>is that well founded metric different from the usual structural order on <code>Judgment</code>?</p>",
        "id": 191401481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584890896
    },
    {
        "content": "<p>can't typecheck so I might have the details wrong, but the setup should look something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">typing_pi</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Judgement</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Judgement</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191401589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891038
    },
    {
        "content": "<p>What is this usual order?</p>",
        "id": 191401595,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584891048
    },
    {
        "content": "<p>Structural recursion</p>",
        "id": 191401609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891070
    },
    {
        "content": "<blockquote>\n<p>is that well founded metric different from the usual structural order on Judgment?</p>\n</blockquote>\n<p>I still don't understand that</p>",
        "id": 191401671,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584891127
    },
    {
        "content": "<p>I shouldn't actually call it an order since we're talking about props here, it's an order on the terms at the metalevel</p>",
        "id": 191401703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891202
    },
    {
        "content": "<p>basically the arguments to a constructor are less than the conclusion, and the structural order is the minimal order satisfying that property</p>",
        "id": 191401776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891267
    },
    {
        "content": "<p>The problem with the induction tactic is that it doesn't recognize that not all constructors can give that type and makes me prove the lemma for all of them.</p>",
        "id": 191401811,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584891325
    },
    {
        "content": "<p>that's what the <code>generalize</code> line is for</p>",
        "id": 191401828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891338
    },
    {
        "content": "<p>You can follow up the <code>induction</code> line with <code>; cases e</code> and it should clear those cases up</p>",
        "id": 191401838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891362
    },
    {
        "content": "<p>The second generalize says get_local tactic failed, unknown 'x' local</p>",
        "id": 191401880,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584891386
    },
    {
        "content": "<p>Same with b but not with a or e</p>",
        "id": 191401896,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584891418
    },
    {
        "content": "<p>show me your code?</p>",
        "id": 191401904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891436
    },
    {
        "content": "<p>Using only <code>generalize a e</code> followed by <code>cases e</code> doesnt help</p>",
        "id": 191401911,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584891447
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma typing_pi : Π {g x a b t}, Judgement g (Exp.pi x a b) t → ∃ s, Judgement g a (Exp.sort s) :=\nbegin\n  intros g x a b t h,\n  generalize e : Exp.pi x a b = y,\n  induction h generalizing a e, cases e,\nend\n</pre></div>",
        "id": 191401920,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584891457
    },
    {
        "content": "<p>Or all of it?</p>",
        "id": 191401921,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584891462
    },
    {
        "content": "<p>the <code>generalize</code> line fails?</p>",
        "id": 191401931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891482
    },
    {
        "content": "<p>Oh, you have to intro <code>h</code> after the <code>generalize</code></p>",
        "id": 191401980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891514
    },
    {
        "content": "<p>Better, no get_local error. But still too many cases</p>\n<div class=\"codehilite\"><pre><span></span>lemma typing_pi : Π {g x a b t}, Judgement g (Exp.pi x a b) t → ∃ s, Judgement g a (Exp.sort s) :=\nbegin\n  intros g x a b t,\n  generalize e : Exp.pi x a b = y, intro h,\n  induction h generalizing x a b e, cases e,\nend\n</pre></div>",
        "id": 191402009,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584891574
    },
    {
        "content": "<p>semicolon before <code>cases</code></p>",
        "id": 191402018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891595
    },
    {
        "content": "<p>Oh, that does the trick!</p>",
        "id": 191402066,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584891618
    },
    {
        "content": "<p>Where can I read more about that black magic?</p>",
        "id": 191402074,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584891632
    },
    {
        "content": "<p>which part?</p>",
        "id": 191402090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891655
    },
    {
        "content": "<p><code>tac1; tac2</code> does <code>tac1</code>, and then does <code>tac2</code> on every subgoal created by <code>tac1</code></p>",
        "id": 191402100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891682
    },
    {
        "content": "<p>Ah okay!</p>",
        "id": 191402111,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584891715
    },
    {
        "content": "<p>Let's see if I can prove it now</p>",
        "id": 191402164,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584891737
    },
    {
        "content": "<p><code>tac1, tac2</code>  by contrast applies <code>tac2</code> in the context of all the goals created by <code>tac1</code>, which for most tactics means that it will only do something to the first goal created by <code>tac1</code></p>",
        "id": 191402168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891744
    },
    {
        "content": "<p>You can also do <code>tac1; [tac2, tac2, tac2, tac2, tac2]</code> to apply <code>tac2</code> on all the goals created by <code>tac1</code></p>",
        "id": 191402196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584891813
    },
    {
        "content": "<p>Alright:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">typing_pi</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span><span class=\"o\">},</span> <span class=\"n\">Judgement</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Judgement</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"n\">generalizing</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h_ih_a</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">Judgement</span><span class=\"bp\">.</span><span class=\"n\">weaken</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h_noShadowing</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h_a_1</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">h_s1</span><span class=\"o\">,</span> <span class=\"n\">h_a</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"k\">from</span> <span class=\"n\">h_ih_a_1</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Though I have to say that I found the old version a lot more readable..</p>",
        "id": 191402744,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584892604
    }
]