[
    {
        "content": "<p>Say I have the following 'lemma':</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>\n\n\n<p>Lean will not accept this, because it does not realize at <code>h'</code> that <code>a</code> and <code>b</code> have the same type due to <code>h</code>.<br>\nOne way to fix this is to remove <code>h</code> and replace all occurrences of <code>β</code> with <code>α</code>.<br>\nHowever, is there a way to reason before or inside the definition of <code>h'</code> that it type-checks?</p>",
        "id": 210631337,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1600543866
    },
    {
        "content": "<p>You can either use <code>heq</code> instead of <code>=</code> for <code>h'</code>, which is regarded evil, or you turn <code>h</code> into an <code>equiv</code>.</p>",
        "id": 210631518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600544113
    },
    {
        "content": "<p>If you say that <code>\\a</code> and <code>\\b</code> are equivalent types, then you can push <code>a</code> through the equivalence and assert (in <code>h'</code>) that its image is equal to <code>b</code>.</p>",
        "id": 210631547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600544158
    },
    {
        "content": "<p>I would recommend the later approach.</p>",
        "id": 210631593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600544167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Reasoning.20about.20types.20within.2Fbefore.20lemma.20parameter/near/210631518\">said</a>:</p>\n<blockquote>\n<p>You can either use <code>heq</code> instead of <code>=</code> for <code>h'</code>, which is regarded evil, or you turn <code>h</code> into an <code>equiv</code>.</p>\n</blockquote>\n<p>(Perhaps see also <a href=\"#narrow/stream/113488-general/topic/heq.20alternative/near/210378730\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/heq.20alternative/near/210378730</a> which is a really great trick.)</p>",
        "id": 210631953,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600544630
    },
    {
        "content": "<p>The fact that the first solution is regarded evil is due to equality of types being evil, right?<br>\nEither way, thanks for the suggestions! I will be trying Kyle/Reid's trick first, it looks very interesting.</p>",
        "id": 210632578,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1600545440
    },
    {
        "content": "<p>I still got stuck on this, maybe one of you can help. This is what I want to define, written in terms of <code>heq</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">lift_on&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">q</span> <span class=\"n\">t</span> <span class=\"n\">ht</span>\n</code></pre></div>\n\n\n<p>My best attempt</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">q</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">ht</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">fa</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">fb</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf&#39;</span> <span class=\"o\">:</span> <span class=\"n\">fa</span> <span class=\"bp\">==</span> <span class=\"n\">fb</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">ht</span> <span class=\"n\">at</span> <span class=\"n\">fb</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">hf&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">fa</span> <span class=\"bp\">=</span> <span class=\"n\">fb</span> <span class=\"o\">:=</span> <span class=\"n\">eq_of_heq</span> <span class=\"n\">hf&#39;</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>arrives at the not very useful error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">eq_of_heq</span> <span class=\"n\">hf&#39;</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">hf&#39;</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">heq</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">fa</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">fb</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">heq</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">fa</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">fb</span>\n</code></pre></div>",
        "id": 210636682,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1600551609
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">lift_on&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">q</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">hrec_on</span> <span class=\"n\">q</span> <span class=\"n\">f</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210636988,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600552120
    },
    {
        "content": "<p>I guess it's pretty much just <code>quotient.hrec_on</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">lift_on&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">q</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">hrec_on</span> <span class=\"n\">q</span> <span class=\"n\">f</span> <span class=\"n\">hf</span>\n</code></pre></div>",
        "id": 210637276,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600552590
    },
    {
        "content": "<p>Oh wow! I didn't realize it was already in mathlib. <br>\nI guess that was to be expected.<br>\nThanks again!</p>",
        "id": 210637475,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1600552930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"320867\">Daan van Gent</span> <a href=\"#narrow/stream/113489-new-members/topic/Reasoning.20about.20types.20within.2Fbefore.20lemma.20parameter/near/210631337\">said</a>:</p>\n<blockquote>\n<p>Say I have the following 'lemma':</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>\n\n\n<p>Lean will not accept this, because it does not realize at <code>h'</code> that <code>a</code> and <code>b</code> have the same type due to <code>h</code>.<br>\nOne way to fix this is to remove <code>h</code> and replace all occurrences of <code>β</code> with <code>α</code>.<br>\nHowever, is there a way to reason before or inside the definition of <code>h'</code> that it type-checks?</p>\n</blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 210637533,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600553047
    }
]