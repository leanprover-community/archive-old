[
    {
        "content": "<p>This is a more comp-sci question but : when I have a Lean file open in VS code, is Lean \"always running\" or \"always compiling\"? what's the diff between \"run-time\" and \"compile-time\"? Follow up Q : is Lean \"dynamically typed\" or \"statically typed\"?</p>",
        "id": 240952267,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622558624
    },
    {
        "content": "<p>lean is statically typed. I don't think the runtime/compile time distinction really applies to Lean 3, though this might change in Lean 4</p>",
        "id": 240955033,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622559679
    },
    {
        "content": "<p>lean proofs can be interactively checked by the language server (for example, if you are composing a proof in vscode) and they can also be compiled to olean files to precompute certain things for efficiency. when proofs are compiled to oleans, the time needed to check the proofs when you open vscode and interact with lean through the language server is significantly reduced because the language server can take advantage of the precomputation results stored in the olean files</p>",
        "id": 240955625,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622559881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20does.20'statically.20typed'.20and.20'dynamically.20typed'.20mean.3F/near/240955625\">said</a>:</p>\n<blockquote>\n<p>lean proofs can be interactively checked by the language server (for example, if you are composing a proof in vscode) and they can also be compiled to olean files to precompute certain things for efficiency. when proofs are compiled to oleans, the time needed to check the proofs when you open vscode and interact with lean through the language server is significantly reduced because the language server can take advantage of the precomputation results stored in the olean files</p>\n</blockquote>\n<p>oh, I didn't know of this \"language server\" component. This is the thing that's checking the typing judgements?</p>",
        "id": 240956444,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622560131
    },
    {
        "content": "<p>yeah vscode interacts with the language server through STDIN/STDOUT. the word \"server\" is used here because the language server \"serves\" vscode, it doesn't mean that the language server is listening on a tcp port and accepting network connections</p>",
        "id": 240956660,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622560210
    },
    {
        "content": "<p>so it looks more like \"<code>vscode  &lt;-- language server &lt;-- Lean</code>\"? I thought the \"compiling\" <em>is</em> the \"type checking\" though?</p>",
        "id": 240956905,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622560318
    },
    {
        "content": "<p>I think the Lean type checkers like Trepplein etc do a lot less than Lean, which runs algorithms like <code>ring</code> etc.</p>",
        "id": 240957059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622560364
    },
    {
        "content": "<p>no compiling is not type checking at all. and the language server _is_ lean <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> it's an interface that lean provides</p>",
        "id": 240957134,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622560389
    },
    {
        "content": "<p>maybe what I'm looking for is an overview of what happens from when I write <code>example : N -&gt; N := </code> to the orange(?) line appearing in vscode saying I've forgotten something.</p>",
        "id": 240957730,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622560646
    },
    {
        "content": "<p>read this to sate your curiosity <a href=\"https://microsoft.github.io/language-server-protocol/\">https://microsoft.github.io/language-server-protocol/</a></p>",
        "id": 240957996,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622560756
    },
    {
        "content": "<p>I think there is some confusion here. Lean (discussing lean 3) has a server mode <code>lean --server</code>. When you have a <code>.lean</code> file open in VSCode, the VSCode extension that understands lean files can spawn such a server. When viewing a file, VSCode passes information to the server using the LSP, and displays messages/results it receives, also via the LSP</p>",
        "id": 240958422,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622560926
    },
    {
        "content": "<p>The thing that is doing the \"typing judgements\" is the Lean server. The server has loaded in code (either interpreted from <code>.lean</code> files or from \"compiled\" <code>.olean</code> files), so it can understand the text VSCode is sending it. It sends back information, like tactic state, types, etc.</p>",
        "id": 240958672,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622561032
    },
    {
        "content": "<p>(Note that Lean 3's server doesn't use the LSP, but its <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/widget_server.md\">own protocol</a>. Lean 4's server does use the LSP.)</p>",
        "id": 240958826,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622561089
    },
    {
        "content": "<p>The orange line is a way that VSCode is interpreting an issue that is expressed using the protocol of communication. The issue was generated by Lean, given the line(s) VSCode made available to it. Additionally, the issue has information about where in the file the issue is at, which VSCode provides visually as the orange line.</p>",
        "id": 240958938,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622561140
    },
    {
        "content": "<p>so pictorially... \"<code>current-file-in-vscode  &lt;--&gt; Lean-server &lt;-- oleans</code>\", where the <code>Lean-server</code> <em>is</em> Lean, the typing-judgements established coming from <code>oleans</code> as well as <code>current-file-in-vscode</code>?</p>",
        "id": 240959231,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622561252
    },
    {
        "content": "<p>I think so</p>",
        "id": 240959473,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622561338
    },
    {
        "content": "<p>waait, so <code>Lean-server</code> is running \"real time\"?  but this doesn't count as the \"code running\"?</p>\n<p>(I apologise for my ignorance about computers <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> )</p>",
        "id": 240960138,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622561608
    },
    {
        "content": "<p>in some sense... this does count as the code running. some parts of proof checking involve running algorithms in a bytecode virtual machine</p>",
        "id": 240960258,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622561655
    },
    {
        "content": "<p>and generally speaking the lean language server is happy to run every algorithm you throw at it provided that the algorithm doesn't take too much time</p>",
        "id": 240960464,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622561752
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/data.list.merge_sort\">docs#data.list.merge_sort</a> for example is an algorithm</p>",
        "id": 240960669,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622561836
    },
    {
        "content": "<p>oops i mean <a href=\"https://leanprover-community.github.io/mathlib_docs/data/list/sort.html#list.merge_sort\">https://leanprover-community.github.io/mathlib_docs/data/list/sort.html#list.merge_sort</a></p>",
        "id": 240960768,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622561874
    },
    {
        "content": "<p>so is it more like... we're constantly \"debugging\" and <code>Lean-server</code> is the thing that helps us do that? (I confess I don't exactly know what 'debugging' means either.)</p>",
        "id": 240961329,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622562119
    },
    {
        "content": "<p>yes. we're constantly debugging. lean is a revolutionary programming language: the programming environment constantly verifies and executes the program</p>",
        "id": 240961496,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622562182
    },
    {
        "content": "<p>get used to the new normal</p>",
        "id": 240961576,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622562224
    },
    {
        "content": "<p>you'll never want to code in a traditional programming language ever again <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 240961878,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622562339
    },
    {
        "content": "<p>Revolution aside :P, I'd kind of look at it quite similarly to a traditional web application.</p>",
        "id": 241076908,
        "sender_full_name": "Julian Berman",
        "timestamp": 1622582195
    },
    {
        "content": "<p>When you edit a file, that's like making a web request to a web server, and the web server gets back to you with some response.</p>",
        "id": 241076994,
        "sender_full_name": "Julian Berman",
        "timestamp": 1622582227
    }
]