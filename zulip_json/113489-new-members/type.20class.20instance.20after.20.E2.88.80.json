[
    {
        "content": "<p>If I can do</p>",
        "id": 256906042,
        "sender_full_name": "Anders Kaseorg",
        "timestamp": 1633821072
    },
    {
        "content": "<p>I don't know the answer to your question, but I was able to modify the second example to get it to typecheck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">α</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">α</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 256909640,
        "sender_full_name": "David Renshaw",
        "timestamp": 1633824699
    },
    {
        "content": "<p>and in Lean 4 this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 256910589,
        "sender_full_name": "David Renshaw",
        "timestamp": 1633825692
    },
    {
        "content": "<p><code>by exactI</code> is the solution here, searching for it will find other threads</p>",
        "id": 256910763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633825904
    },
    {
        "content": "<p>But in short, <code>has_add</code> is a type class so you should be using square brackets and putting things before the colon so that the type class inference system can find them (note that the type class inference system does not look in the local context so that's why you get the error, however normally if a type class hypothesis has made it into the local context it's because square brackets were used)</p>",
        "id": 256939175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633856502
    },
    {
        "content": "<p>Strictly the square brackets have nothing to do with it and have no effect <em>inside</em> the lemma they are arguments to, although typically you still want them for the <em>users</em> of you lemma</p>",
        "id": 256941390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633858828
    }
]