[
    {
        "content": "<p>What's the recommended way of saying \"the maximum of n numbers\", for example in the form of a function <code>list nat -&gt; nat</code>?<br>\nI thought about doing <code>l.maximum.iget</code>, where <code>l : list nat</code>, but does this have a good API like <code>max</code> does? Or is there a better way?</p>",
        "id": 247554646,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1627545817
    },
    {
        "content": "<p>What happens when the list is empty?</p>",
        "id": 247554673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627545839
    },
    {
        "content": "<p>There is Sup of course! But this is different to max because the sup might not be in the set (when the list is empty).</p>",
        "id": 247554755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627545898
    },
    {
        "content": "<p>For finsets there's both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.max\">docs#finset.max</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sup\">docs#finset.sup</a></p>",
        "id": 247555438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627546454
    },
    {
        "content": "<p>I know that the list is not empty, so I can provide a proof of this if needed. But I don't think it matters, with the <code>iget</code> function you will get the default inhabitant of the type and statements like <code>forall x ∈ l, x ≤ l.maximum.iget</code> should hold hold trivially by exfalso.</p>",
        "id": 247555455,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1627546470
    },
    {
        "content": "<p>The sup version is <code>Sup { x | x ∈ l }</code></p>",
        "id": 247555528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627546528
    },
    {
        "content": "<p>But Sup is noncomputable, and <code>finset.max</code> has the same issue as <code>list.maximum</code> in that it returns an <code>option</code>.</p>",
        "id": 247555855,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1627546788
    },
    {
        "content": "<p>Ah, but <code>finset.sup</code> is both computable and doesn't return <code>option</code>, that's what I was looking for</p>",
        "id": 247555930,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1627546833
    },
    {
        "content": "<p>As a stopgap (I have an upcoming PR on this), you can use list.foldr max l 0</p>",
        "id": 247574954,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627560991
    },
    {
        "content": "<p>Or, over a multiset, multiset.fold max max_commutative m 0</p>",
        "id": 247574991,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627561030
    },
    {
        "content": "<p>Modulo argument order, which I don't remember currently</p>",
        "id": 247575001,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627561042
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.max'\">docs#finset.max'</a></p>",
        "id": 247575025,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627561070
    }
]