[
    {
        "content": "<p>I have to admit, I'm not totally clear on the subtleties of supporting both constructive and classical logic, but bottom line, <code>classical.some</code> is <code>noncomputable</code>, so I think ∃ in Lean must \"mean\" the classical, non-constructive ∃.</p>\n<p>Is there a stronger form of ∃ that carries a value, so that it supports a computable analogue of <code>classical.some</code>?</p>",
        "id": 200427510,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1591801061
    },
    {
        "content": "<p>There's the <code>inhabited</code> typeclass</p>",
        "id": 200427645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591801113
    },
    {
        "content": "<p>The point is that <code>∃ x, P</code> has type <code>Prop</code> and you can't constructively get back to <code>Type</code> land from there.</p>",
        "id": 200427787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591801171
    },
    {
        "content": "<blockquote>\n<p>Is there a stronger form of ∃ that carries a value, so that it supports a computable analogue of classical.some?</p>\n</blockquote>\n<p><code>Σ</code>, but it's not Prop-valued.</p>",
        "id": 200427929,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1591801218
    },
    {
        "content": "<p>right, I am definitely not looking for Sigma. thanks.</p>",
        "id": 200427969,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1591801235
    },
    {
        "content": "<p>However, not understanding the split between <code>Prop</code> and <code>Type</code> may be why I'm confused</p>",
        "id": 200428133,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1591801307
    },
    {
        "content": "<p>You can't have a <code>Prop</code>-valued <code>exists</code> with a projection to <code>Type</code> that preserves values. <code>Prop</code> is proof irrelevant, so any two proofs of <code>∃ x, P</code> are equal, even if they're proved with different witnesses. A function that recovers the witnesses would have different values on equal inputs.</p>",
        "id": 200429206,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1591801779
    },
    {
        "content": "<p>There is also <code>trunc {x // P}</code>, which is in Type but is nevertheless a subsingleton like <code>∃ x, P</code></p>",
        "id": 200429832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591802050
    },
    {
        "content": "<p>So the worst of both worlds?</p>",
        "id": 200429898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591802076
    },
    {
        "content": "<p>I suppose so, depending on your POV</p>",
        "id": 200429953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591802112
    },
    {
        "content": "<p><code>trunc {x // P}</code> is the one that corresponds to the existential quantifier as used in the HoTT book, for example.</p>",
        "id": 200432582,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591803227
    },
    {
        "content": "<p>The upshot of <code>trunc</code> is that you get computable unique choice. So if you e.g. have <code>f : X -&gt; Y</code> with <code>inj : injective f</code> and <code>surj : \\Pi y, trunc { x // f x = y }</code> then you get a computable inverse <code>g : Y -&gt; X</code>, from <code>trunc.rec</code>.</p>",
        "id": 200454781,
        "sender_full_name": "David Wärn",
        "timestamp": 1591812726
    }
]