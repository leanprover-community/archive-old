[
    {
        "content": "<p>the following code works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reflexive_a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but the below code doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">variable</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reflexive_a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the only difference between the two sets of code is that in working example <code>h1 : reflexive R</code> is an argument to the lemma and in the non-working example, <code>h1 : reflexive R</code> is a <code>variable</code>. The error I get on the non-working example is, <code>unknown identifier 'h1'</code>.</p>\n<p>could anyone tell me what's going wrong?</p>",
        "id": 273292542,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645827621
    },
    {
        "content": "<p>Lean has different rules about prop variables -- if you do <code>include h1</code> it will work, i.e.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reflexive_a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273292767,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645827744
    },
    {
        "content": "<p>I think the rules are something like that they only get included if some other argument uses them -- #TPIL should say for sure</p>",
        "id": 273292812,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645827776
    },
    {
        "content": "<p>oh okay, so it's only a problem with Prop. Thanks!</p>",
        "id": 273293019,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645827894
    },
    {
        "content": "<p>Sorry maybe I've misspoke about that bit as well:</p>\n<blockquote>\n<p>Variables are only included in declarations where they are actually mentioned. More precisely, they must be mentioned outside of a tactic block; because variables can appear and can be renamed dynamically in a tactic proof, there is no reliable way of determining when a name used in a tactic proof refers to an element of the context in which the theorem is parsed, and Lean does not try to guess. You can manually ask Lean to include a variable in every definition in a section with the include command.</p>\n</blockquote>\n<p>From <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html?highlight=included%20in#more-on-sections\">https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html?highlight=included%20in#more-on-sections</a></p>",
        "id": 273293195,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645828002
    }
]