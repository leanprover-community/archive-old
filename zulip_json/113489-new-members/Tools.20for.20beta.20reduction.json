[
    {
        "content": "<p>I have following code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">limit_start_irrelevant</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">Hε</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">Hε</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">Hn</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ineq</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">Hn</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_sub_right_of_add_le</span> <span class=\"n\">Hn</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_le_self</span> <span class=\"n\">n</span> <span class=\"n\">N</span><span class=\"o\">)),</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_sub_right_of_add_le</span> <span class=\"n\">Hn</span><span class=\"o\">),</span>  <span class=\"c1\">-- Tactic state 1 here</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">-- Tactic state 2 here</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span> <span class=\"n\">ineq</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Tactic state 1:</p>\n<div class=\"codehilite\"><pre><span></span>a : ℕ → ℝ,\nk : ℕ,\nl : ℝ,\nh : is_limit (λ (n : ℕ), a (n + k)) l,\nε : ℝ,\nHε : ε &gt; 0,\nN n : ℕ,\nHn : n ≥ N + k,\nineq : k ≤ n,\nH : |(λ (n : ℕ), a (n + k)) (n - k) - l| &lt; ε\n⊢ |a n - l| &lt; ε\n</pre></div>\n\n\n<p>Tactic state 2:</p>\n<div class=\"codehilite\"><pre><span></span>a : ℕ → ℝ,\nk : ℕ,\nl : ℝ,\nh : is_limit (λ (n : ℕ), a (n + k)) l,\nε : ℝ,\nHε : ε &gt; 0,\nN n : ℕ,\nHn : n ≥ N + k,\nineq : k ≤ n,\nH : |a (n - k + k) - l| &lt; ε\n⊢ |a n - l| &lt; ε\n</pre></div>\n\n\n<p>Right now I am forced to use simp only to beta reduce H, because otherwise rw doesnt work. Is there any special tools for beta reduction I could use? Simp only feels unnecessary.</p>",
        "id": 159222707,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550915387
    },
    {
        "content": "<p>I see that I can use convert H as well, but this also feels like overkill.</p>",
        "id": 159222755,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550915416
    },
    {
        "content": "<p>you could use <code>dsimp only</code> as well</p>",
        "id": 159223145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550916290
    },
    {
        "content": "<p>If you play with the options you can get it to simplify almost nothing except beta reduction, but there isn't a dedicated command for it</p>",
        "id": 159223165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550916342
    },
    {
        "content": "<p>If you want to change H to something definitionally equal, you can just write \"change [thing you want] at H\"</p>",
        "id": 159223266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550916503
    },
    {
        "content": "<p>As Kevin wrote, you can use change to force rewriting to something definitionaly equivalent. But in this case you want to use <code>convert</code> anyway, because you also want to make Lean realize you need <code>n-k+k=n</code> or something like that. What is it you don't like in my version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">limit_start_irrelevant</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M1P1</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">Hε</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">Hε</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">Hn</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_sub_left_of_add_le</span> <span class=\"n\">Hn</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_add</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_sub</span><span class=\"o\">],</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159226619,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550923132
    },
    {
        "content": "<p>I like your version much better, but I wont learn anything if I just copy-paste it into my file. I was comparing my code to yours and rewriting it in the process.</p>",
        "id": 159230282,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550930096
    },
    {
        "content": "<p>Also, speaking about your code, The last line: <code> repeat { linarith }, </code> seems to remove 3 goals. Why is that?</p>",
        "id": 159230433,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550930350
    },
    {
        "content": "<p>The last goal is instantly solved by one of the hypothesis, so does linarith (or repeat?) just try the hypothesis on the next goal to see if it works?</p>",
        "id": 159230514,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550930489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> <code>repeat {linarith},</code> is just the same as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n<span class=\"c1\">-- until one of them fails</span>\n</pre></div>",
        "id": 159231931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550933143
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">repeat_aux</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">set_goals</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">reverse</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">::</span><span class=\"n\">gs</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">ok</span> <span class=\"err\">←</span> <span class=\"n\">try_core</span> <span class=\"o\">(</span><span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"k\">match</span> <span class=\"n\">ok</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">repeat_aux</span> <span class=\"n\">gs</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">::</span><span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span>    <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">gs&#39;</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat_aux</span> <span class=\"o\">(</span><span class=\"n\">gs&#39;</span> <span class=\"bp\">++</span> <span class=\"n\">gs</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- This tactic is applied to each goal. If the application succeeds,</span>\n<span class=\"cm\">    the tactic is applied recursively to all the generated subgoals until it eventually fails.</span>\n<span class=\"cm\">    The recursion stops in a subgoal when the tactic has failed to make progress.</span>\n<span class=\"cm\">    The tactic `repeat` never fails. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span> <span class=\"n\">repeat_aux</span> <span class=\"n\">t</span> <span class=\"n\">gs</span> <span class=\"o\">[]</span>\n</pre></div>",
        "id": 159232076,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550933402
    },
    {
        "content": "<p>Ah, for some reason I thought it meant reapeat once.</p>",
        "id": 159232668,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1550934412
    },
    {
        "content": "<p>that would be <code>iterate 2</code></p>",
        "id": 159232840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550934665
    }
]