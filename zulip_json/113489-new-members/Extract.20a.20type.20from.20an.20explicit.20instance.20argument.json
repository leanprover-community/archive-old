[
    {
        "content": "<p>I often find myself writing code like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>It unwraps implicitly into <code>I T M inst_monad</code>.</p>\n<p>Given concrete <code>X</code>, I can't call <code>I X</code>, because it needs a monad. So I need to write <code>@I X Y my</code>, where <code>my</code> captures monad instance for <code>Y</code>. I'm ok with it, but my intuition is that I can somehow write <code>I (T : Type) (m : Monad M)</code> and call <code>I</code> somehow in such way that <code>Y</code> is \"inferred\" from <code>my</code>?..</p>",
        "id": 287082535,
        "sender_full_name": "cognivore",
        "timestamp": 1655916963
    },
    {
        "content": "<p>Just to clarify, is this Lean 4?</p>",
        "id": 287083342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655917294
    },
    {
        "content": "<p>Why don't you make M explicit?</p>",
        "id": 287083465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655917331
    }
]