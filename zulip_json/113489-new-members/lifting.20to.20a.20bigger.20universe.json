[
    {
        "content": "<p>If I have a theorem proved for objects that are required to be in the same universe and I now have two objects of different universes, how can I apply the theorem? I believe I should be able to use the fact that universes are cumulative to say that both objects are really in the max of the two universes, but I don't know how this is supposed to work.</p>\n<p>Here's a mwe of the kind of thing I would like to be able to do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">p_of_algebra</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 206748950,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597265039
    },
    {
        "content": "<p>It's not true in this much generality. For example <code>p</code> can express that <code>u</code> and <code>v</code> are the same universe (I can explain how to do this if you are curious). You need to make use of the definition of <code>p</code> somehow.</p>",
        "id": 206749281,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597265226
    },
    {
        "content": "<p>Probably you will have to prove a theorem along the lines of <code>p F E</code> iff <code>p (ulift F) (ulift E)</code>.</p>",
        "id": 206749385,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597265283
    },
    {
        "content": "<p>Well, simpler than my original idea is just</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"err\">≃</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206749914,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597265529
    },
    {
        "content": "<p>How hard is it to prove something of the form <code>p F E \\iff p (ulift F) (ulift E)</code>? The case where I would actually like to do this is for the primitive element theorem. But right now I don't even really know how to consistently get Lean to recognize that <code>ulift F</code> is a field</p>",
        "id": 206750740,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597265923
    },
    {
        "content": "<p>not hard at all, if <code>≃</code> is <code>equiv</code></p>",
        "id": 206750821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597265973
    },
    {
        "content": "<p>that's just a couple compositions with <code>equiv.ulift</code></p>",
        "id": 206750843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597265989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/lifting.20to.20a.20bigger.20universe/near/206750821\">said</a>:</p>\n<blockquote>\n<p>not hard at all, if <code>≃</code> is <code>equiv</code></p>\n</blockquote>\n<p>I don't really know what this means</p>",
        "id": 206750950,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597266025
    },
    {
        "content": "<p>oh wait, I misread, I thought that the definition said <code>F ≃ E</code></p>",
        "id": 206750991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597266046
    },
    {
        "content": "<p><code>p F E \\iff p (ulift F) (ulift E)</code> is obviously false if <code>p</code> asserts that they are the same universe</p>",
        "id": 206751079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597266077
    },
    {
        "content": "<p>assuming that is <code>p F E \\iff p (ulift.{u u'} F) (ulift.{v v'} E)</code></p>",
        "id": 206751154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597266099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/lifting.20to.20a.20bigger.20universe/near/206751079\">said</a>:</p>\n<blockquote>\n<p><code>p F E \\iff p (ulift F) (ulift E)</code> is obviously false if <code>p</code> asserts that they are the same universe</p>\n</blockquote>\n<p>yeah, that's what Reid said</p>",
        "id": 206751155,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597266100
    },
    {
        "content": "<p>But I want to do this in a case where it's true (and I can prove it's true, but only in a complicated way).</p>",
        "id": 206751269,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597266132
    },
    {
        "content": "<p>Specifically for the primitive element theorem</p>",
        "id": 206751288,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597266140
    },
    {
        "content": "<p>What are you trying to do? You can use <code>ulift</code> to put them both in a <em>common</em> universe</p>",
        "id": 206751304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597266146
    },
    {
        "content": "<p>It depends on what <code>p</code> is of course--one would imagine there is a large class of such <code>p</code> for which the proof could be produced automatically somehow, but I'm not sure what exactly that class is. I'm also not aware of any example of someone trying to prove a statement like this.</p>",
        "id": 206751308,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597266149
    },
    {
        "content": "<p>It's basically a souped-up version of equivalence under isomorphism</p>",
        "id": 206751362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597266179
    },
    {
        "content": "<p>You can prove <code>p (ulift.{u (max u v)} F) (ulift.{v (max u v)} E)</code>, because this is just <code>Type (max u v) ≃ Type (max u v)</code></p>",
        "id": 206751399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597266200
    },
    {
        "content": "<p>The specific case I want to do is <a href=\"https://github.com/pglutz/galois_theory/blob/remove_subfield/src/primitive_element.lean#L614\">here</a></p>",
        "id": 206751423,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597266218
    },
    {
        "content": "<p>I want to know if there's an easier way to do it</p>",
        "id": 206751447,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597266232
    },
    {
        "content": "<p>I don't see any universes in that code so it's hard to see what the issue is without compiling</p>",
        "id": 206751608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597266295
    },
    {
        "content": "<p>This looks easier than what I had in mind</p>",
        "id": 206751651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597266316
    },
    {
        "content": "<p>well, unless you had to write <code>inclusion.separable</code>, <code>inclusion.finite_dimensional</code> etc. and you are counting that as part of the work</p>",
        "id": 206751739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597266356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> why don't you just work with one universe <code>u</code> everywhere? That's what mathematicians have been doing for centuries</p>",
        "id": 206752414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597266658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/lifting.20to.20a.20bigger.20universe/near/206751739\">said</a>:</p>\n<blockquote>\n<p>well, unless you had to write <code>inclusion.separable</code>, <code>inclusion.finite_dimensional</code> etc. and you are counting that as part of the work</p>\n</blockquote>\n<p>We did.</p>",
        "id": 206752449,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597266675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/lifting.20to.20a.20bigger.20universe/near/206752414\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> why don't you just work with one universe <code>u</code> everywhere? That's what mathematicians have been doing for centuries</p>\n</blockquote>\n<p>We were just following the conventions in mathlib.</p>",
        "id": 206752483,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597266695
    },
    {
        "content": "<p>I've seen people breaking these conventions for reasons very similar to what you are experiencing</p>",
        "id": 206752583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597266743
    },
    {
        "content": "<p>Just to be clear -- I mean within mathlib</p>",
        "id": 206752644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597266766
    },
    {
        "content": "<p>The computer scientists aren't going to be using the primitive element theorem and the mathematicians live in type if they're doing field theory so I have never seen the use of being maximally polymorphic in situations where there is more than one universe and you're reasoning</p>",
        "id": 206752825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597266832
    },
    {
        "content": "<p>Am I right in thinking that bilinear forms need the spaces to be in the same universe for some reason?</p>",
        "id": 206752965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597266886
    },
    {
        "content": "<p>It's pretty hard to imagine using the primitive element theorem when the fields are in different universes, especially considering that one is finite dimensional over the other.</p>",
        "id": 206752987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597266896
    },
    {
        "content": "<p>I guess we might as well keep the current proof though since we've already done it (and the version I linked to is not the main one, it's from a branch where I was trying to get rid of all the stuff like <code>inclusion.separable</code> to make things simpler)</p>",
        "id": 206754506,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597267623
    }
]