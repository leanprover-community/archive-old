[
    {
        "content": "<p>This isn't in math lib, is there any chance someone can help me prove it?</p>\n<div class=\"codehilite\"><pre><span></span>lemma pow_inj (a b c : ℕ) (h : 2 ≤ a) : a^b = a^c → b = c := sorry\n</pre></div>\n\n\n<p>Thanks in advance!</p>",
        "id": 179992274,
        "sender_full_name": "Ainsley Pahljina",
        "timestamp": 1573000179
    },
    {
        "content": "<p>I needed this same lemma too! My proof is <a href=\"https://github.com/b-mehta/lean-experiments/blob/master/number_theory_q5.lean#L32\" target=\"_blank\" title=\"https://github.com/b-mehta/lean-experiments/blob/master/number_theory_q5.lean#L32\">here</a>, but if you want hints rather than a solution, I'd suggest proving that pow is monotonic, and using that.</p>",
        "id": 179992474,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573000386
    },
    {
        "content": "<p>Useful library functions you might need include: <code>pow_lt_pow_of_lt_right</code>, <code>le_antisymm</code>,  and other easy things about linear orders such as <code>not_le_of_lt</code></p>",
        "id": 179992508,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573000442
    },
    {
        "content": "<p>Actually, monotonic was the wrong word to use, I'm suggesting you first prove</p>\n<div class=\"codehilite\"><pre><span></span>example { a b c : ℕ } ( h : 2 ≤ a ) ( k : a^b ≤ a^c ) : b ≤ c\n</pre></div>",
        "id": 179992583,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573000507
    },
    {
        "content": "<p>Avoid \\ge as a rule -- rewrite using \\le</p>",
        "id": 180007499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573024046
    },
    {
        "content": "<p>Edited, thanks</p>",
        "id": 180020892,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573037930
    },
    {
        "content": "<p>Is \\ge just sugar over \\le?</p>",
        "id": 180020907,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573037948
    },
    {
        "content": "<p>Most of the time: yes, but some parts of Lean are sensitive to the sugar</p>",
        "id": 180022940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573039875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232317\">@Ainsley Pahljina</span>  or <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>, it would be great to PR this to mathlib!</p>",
        "id": 180295437,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1573272773
    },
    {
        "content": "<p>I'll try to make this PR later today!</p>",
        "id": 180306437,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573294631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Where would this sort of thing belong? In <code>data/nat/basic.lean</code>, maybe?</p>",
        "id": 180321274,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573318380
    },
    {
        "content": "<p>Yes.</p>",
        "id": 180326983,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1573326703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  PR here: <a href=\"https://github.com/leanprover-community/mathlib/pull/1683\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1683\">https://github.com/leanprover-community/mathlib/pull/1683</a></p>",
        "id": 180621271,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573649199
    }
]