[
    {
        "content": "<p>So I'm trying to prove two things, namely the identity morphism is an isomorphism and composition of isomorphisms is an isomorphism. I'd like to use these proofs to show that the maximal groupoid of C is a subcategory of C.</p>\n<p>For identity morphism, looking through <code>isomorphism.lean</code>, there is a statement that proves that identity morphisms are isomorphisms. I'm probably overcomplicating this, but is there a way to prove it in the way I've set it up? Is there even a point to proving it this way?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"c1\">-- this transitively imports</span>\n<span class=\"c1\">-- category_theory.category</span>\n<span class=\"c1\">-- category_theory.functor</span>\n<span class=\"c1\">-- category_theory.natural_transformation</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">isomorphism</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">identity_is_iso</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">hcomp</span> <span class=\"o\">:</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"err\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n        <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">id_comp</span><span class=\"o\">]},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hinv2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>When it comes to composition of morphisms, I pretty much have the same questions. What I have is really overcomplicating something I think is supposed to be really simple. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"c1\">-- this transitively imports</span>\n<span class=\"c1\">-- category_theory.category</span>\n<span class=\"c1\">-- category_theory.functor</span>\n<span class=\"c1\">-- category_theory.natural_transformation</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">isomorphism</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n\n<span class=\"c1\">-- need f.hom ≫ g.hom ≫ g.inv ≫ f.inv = 𝟙 X</span>\n<span class=\"n\">def</span> <span class=\"n\">hom_comp_is_iso</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">≅</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">≅</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">hfx</span> <span class=\"o\">:</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">:=</span>\n        <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hfy</span> <span class=\"o\">:</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"err\">≫</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:=</span>\n        <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hgy</span> <span class=\"o\">:</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">:=</span>\n        <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hgz</span> <span class=\"o\">:</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Z</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:=</span>\n        <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">hfin1</span> <span class=\"o\">:</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"err\">≫</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">:=</span>\n        <span class=\"k\">calc</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">:</span>\n            <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span> <span class=\"err\">≫</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">:</span>\n            <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"err\">≫</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">:</span>\n            <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"c1\">-- incredibly inefficient. not even gonna bother with this.</span>\n<span class=\"c1\">-- figure out how to rephrase.</span>\n</code></pre></div>\n\n\n<p>Also, are these definitions good to use in proving that the maximal groupoid is a subcategory? Is there another way I should be phrasing things? I want to be able to explicitly see what's going on because I'm still getting used to Lean syntax. It seems like there's a proof of <code>Groupoid.{v u}</code> being <code>large_category.{max v u}</code>, but I don't really see why a groupoid must necessarily be a large category. Unless I'm misunderstanding, should there be some way of proving groupoids are just categories, not necessarily large/small?</p>",
        "id": 202244266,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593362622
    },
    {
        "content": "<p>Oops, looks like I was using out-of-date syntax for this stuff, don't know if that changes things much</p>",
        "id": 202244529,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593363030
    },
    {
        "content": "<p>There was a patch some time ago which means you don't need to explicitly name and include the category instance</p>",
        "id": 202244530,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593363032
    },
    {
        "content": "<p>Gotcha, I'll change that</p>",
        "id": 202244544,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593363049
    },
    {
        "content": "<p>Also for the identity iso stuff, I think you are overcomplicating it a bit. In particular, notice that <code>is_iso</code> is a class with three fields, to construct the fact that it's an iso you just need to supply those three fields - you can get their names by doing <code>{!!}</code> (instead of begin/end) and the lightbulb will have an option about a skeleton</p>",
        "id": 202244568,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593363114
    },
    {
        "content": "<p>Does that also apply to the composition stuff?</p>",
        "id": 202244618,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593363160
    },
    {
        "content": "<p>Yeah, it applies to basically anything where you want to prove <code>is_iso</code> directly</p>",
        "id": 202244651,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593363235
    },
    {
        "content": "<p>Okay, good to know. Thanks! I might come back into this thread later once I rewrite stuff if things aren't working still</p>",
        "id": 202244693,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593363271
    },
    {
        "content": "<p>On your <code>Groupoid</code> thing, <code>Groupoid</code> is actually the category of groupoids, so it should be a large category. I think you want <code>groupoid</code>, which is the type of a groupoid</p>",
        "id": 202246030,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593365339
    },
    {
        "content": "<p>Oh, that makes a lot of sense, thanks</p>",
        "id": 202255746,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593378967
    },
    {
        "content": "<p>I figured out <code>identity_is_iso</code> but I can't seem to get the composition one - maybe my syntax is off?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"c1\">-- this transitively imports</span>\n<span class=\"c1\">-- category_theory.category</span>\n<span class=\"c1\">-- category_theory.functor</span>\n<span class=\"c1\">-- category_theory.natural_transformation</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">isomorphism</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n\n<span class=\"c1\">-- need f.hom ≫ g.hom ≫ g.inv ≫ f.inv = 𝟙 X and vice versa</span>\n<span class=\"n\">def</span> <span class=\"n\">iso_comp_is_iso</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_iso</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_iso</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">inv</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">inv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"c1\">--by rw [category.assoc ] sorry,--is_iso.hom_inv_id&#39; g],</span>\n  <span class=\"n\">inv_hom_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202255838,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593379084
    },
    {
        "content": "<p>The error I'm getting is at the equals sign before <code>𝟙 X</code> and it looks like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"err\">&#39;</span><span class=\"n\">hom_inv_id&#39;&#39;</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">inv</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">inv</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"err\">⁇</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">inv</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">inv</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;obviously&quot;</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 202255851,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593379127
    },
    {
        "content": "<p>You put what you need to prove where you were supposed to put a proof.</p>",
        "id": 202255881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593379170
    },
    {
        "content": "<p>Oh, oops. Thanks!</p>",
        "id": 202255940,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593379219
    }
]