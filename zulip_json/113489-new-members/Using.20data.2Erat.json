[
    {
        "content": "<p>I'm struggling with proving basic things for rational numbers - could anyone provide some hints for this problem?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 180929895,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573941297
    },
    {
        "content": "<p>I can't find anything useful in <code>data.rat.basic</code></p>",
        "id": 180930138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573941735
    },
    {
        "content": "<p>Yeah, similarly</p>",
        "id": 180930145,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573941779
    },
    {
        "content": "<p><code>rat.mk a b</code> equals <code>(\\u a) / (\\u b)</code> right? (\\u being the up arrow)</p>",
        "id": 180930269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573942028
    },
    {
        "content": "<p>I think I've got the skeleton of the proof, with some (I think easy) technicalities missing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_div_cancel</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_eq_mk</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mul_def</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">div_mk_div_cancel_left</span><span class=\"o\">],</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 180930274,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573942071
    },
    {
        "content": "<blockquote>\n<p><code>rat.mk a b</code> equals <code>(\\u a) / (\\u b)</code> right? (\\u being the up arrow)</p>\n</blockquote>\n<p>Yeah, if the <code>\\u</code> are casting correctly to Q</p>",
        "id": 180930382,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573942212
    },
    {
        "content": "<p>If you rewrite with that first, then it should be a general <code>div_mul</code> or something</p>",
        "id": 180930454,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573942395
    },
    {
        "content": "<p>Well, after more facts about casts I guess...</p>",
        "id": 180930462,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573942417
    },
    {
        "content": "<p><code>rw [rat.mk_eq_div, rat.mk_eq_div], simp, rw div_div_eq_div_mul</code> does it, thanks!</p>",
        "id": 180930689,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573942855
    },
    {
        "content": "<p>Is the idea that you're not supposed to be using <code>rat.mk</code>?</p>",
        "id": 180930786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573943014
    },
    {
        "content": "<p>BTW, is there any good reason <em>not</em> to define structures on <code>data.rat</code> by <code>equiv.discrete_field (_ : equiv data.rat (fraction_field int))</code>? Won't we get many theorems for free in this case?</p>",
        "id": 180930854,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1573943146
    },
    {
        "content": "<p><code>data.rat</code> says: \"It is defined as the set of pairs ⟨n, d⟩ of integers such that <code>d</code> is positive and <code>n</code> and <code>d</code> are coprime. This representation is preferred to the quotient because without periodic reduction, the numerator and denominator can grow exponentially (for example, adding 1/2 to itself repeatedly).\"</p>",
        "id": 180930899,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573943182
    },
    {
        "content": "<p>The best solution is to use division and not <code>rat.mk</code></p>",
        "id": 180930901,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573943203
    },
    {
        "content": "<p>Coerce everything to Q first?</p>",
        "id": 180930907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573943217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I was talking about operations on <code>rat</code> and theorems about these operations, not the data type.</p>",
        "id": 180930930,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1573943252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  Ah okay, my mistake</p>",
        "id": 180930982,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573943298
    },
    {
        "content": "<p>Most operations (except for <code>neg</code>?) need \"cancel numerator and denominator\" step anyway.</p>",
        "id": 180930993,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1573943343
    },
    {
        "content": "<p>And this is exactly what functions from <code>equiv/algebra</code> will do.</p>",
        "id": 180930997,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1573943368
    },
    {
        "content": "<blockquote>\n<p>The best solution is to use division and not <code>rat.mk</code></p>\n</blockquote>\n<p>This is so much less painful, thanks!!</p>",
        "id": 180931816,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573944944
    },
    {
        "content": "<p>I think the way it works is that there's a \"mathlib standard way\" to do things, and you have to learn it for the things you want to do.</p>",
        "id": 180931860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573944991
    },
    {
        "content": "<p>Often you can learn it by simply reading the relevant mathlib files.</p>",
        "id": 180931867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573945015
    },
    {
        "content": "<p><code>rat.mk</code> is indeed supposed to be internal to the <code>data.rat</code> file and not used once <code>\\u a / \\u b</code> works</p>",
        "id": 180931879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573945048
    },
    {
        "content": "<p>unless you care about computation and need a more efficient way of building the number</p>",
        "id": 180931889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573945081
    },
    {
        "content": "<p>Is there some general way of finding out this sort of thing? Reading the mathlib files around data/rat seemed to mostly use <code>rat.mk</code></p>",
        "id": 180931995,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573945207
    },
    {
        "content": "<p>I suspect that Chris has used rat sufficiently often to know the tricks. Should his observation be made in the module docstring?</p>",
        "id": 180932015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573945265
    },
    {
        "content": "<p>I'd certainly have appreciated that</p>",
        "id": 180932019,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573945286
    },
    {
        "content": "<p>I think it probably should since it's something I've seen a few people do.</p>",
        "id": 180932021,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573945293
    },
    {
        "content": "<p>Maybe a docstring on <code>rat.mk</code> as well.</p>",
        "id": 180932065,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573945337
    },
    {
        "content": "<p>Tangentially related, I've now got my goal in a slightly nicer form, but there's <code>\\u</code>s around - I can't tell if they're casting my nats up to ints or to Q, is there some way I could find out?</p>",
        "id": 180932072,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573945357
    },
    {
        "content": "<p>I can't help but thinking that it shouldn't matter nowadays, because of all the cast tactics. One answer to your question is to write <code>set_option pp.all true</code> above your work.</p>",
        "id": 180932093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573945424
    },
    {
        "content": "<p>There might be a less drastic way to do it. This way tells you exactly which term you're looking at.</p>",
        "id": 180932137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573945456
    },
    {
        "content": "<p>Yikes, that's far harder to parse</p>",
        "id": 180932147,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573945498
    },
    {
        "content": "<p>Wait - cast tactics</p>",
        "id": 180932164,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573945530
    },
    {
        "content": "<p>If you post fully working code I can try and make sense of the <code>pp.all</code> output if you want</p>",
        "id": 180932168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573945553
    },
    {
        "content": "<p><code>norm_cast</code> and friends should I think sort out problems with casts from nat to int to rat nowadays.</p>",
        "id": 180932217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573945585
    },
    {
        "content": "<p>I didn't know cast tactics were a thing! <code>norm_cast</code> managed perfectly</p>",
        "id": 180932218,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573945593
    },
    {
        "content": "<p>You are trying to do mathematics in Lean and you are running into exactly the problems which me and my students started running into two years ago, but you have the advantage that some of our problems were solved by computer scientists in the mean time.</p>",
        "id": 180932276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573945688
    },
    {
        "content": "<p>This is why I have so much hope in this software.</p>",
        "id": 180932278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573945699
    },
    {
        "content": "<p>When I came here I asked how to prove <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo>+</mo><mn>2</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">2+2=4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span> and they said \"which 2?\" and I said \"the real number 2\" and they said \"oh boy that's hard\"</p>",
        "id": 180932282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573945732
    },
    {
        "content": "<p>That's good to hear - I think I'd still like some documentation for this sort of thing</p>",
        "id": 180932294,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573945778
    },
    {
        "content": "<p>When Chris came here he asked how to prove <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><msup><mi>x</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>3</mn><mi>x</mi><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">(x+y)^3=x^3+3x^2y+3xy^2+y^3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\">3</span><span class=\"mord mathdefault\">x</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> and they said \"oh boy that's hard\"</p>",
        "id": 180932295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573945779
    },
    {
        "content": "<p>but then people like Rob and Mario and people supervised by them pop out of the woodwork and write tactics which solve these things.</p>",
        "id": 180932337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573945812
    },
    {
        "content": "<p>to clarify, <code>2 + 2 = 4</code> is not hard at all, but it is hard to \"do it without doing it\" because that's asking to have a general procedure</p>",
        "id": 180932692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573946596
    },
    {
        "content": "<p><code>example {α : Type*} [has_one α] [has_add α] : (2 : α) + 2 = 4 := rfl</code></p>",
        "id": 180932699,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573946624
    },
    {
        "content": "<p>I think the precise example was <code>(1 : real) \\ne 2</code></p>",
        "id": 180932740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573946644
    },
    {
        "content": "<p>and there was no <code>norm_num</code> at the time</p>",
        "id": 180932744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573946653
    },
    {
        "content": "<p>and the other one was <code>(2 : real)^2 - 3 * 2 + 2 = 0</code></p>",
        "id": 180932747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573946683
    },
    {
        "content": "<p>it's still easy, it's just that you get upset when I tell you that the answer is to reduce <code>1 != 2</code> to <code>1 &lt; 2</code> and then <code>0 &lt; 1</code> and finish</p>",
        "id": 180932750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573946703
    },
    {
        "content": "<p>2 years ago this was harder for a newbie, that's all I'm saying.</p>",
        "id": 180932755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573946730
    },
    {
        "content": "<p>you don't want <em>that</em> proof</p>",
        "id": 180932757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573946739
    },
    {
        "content": "<p>I want that <code>1 : real</code> and <code>2 : real</code> are not equal by schoolkid, because any schoolkid knows it.</p>",
        "id": 180932796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573946769
    },
    {
        "content": "<p>And we now have that with <code>norm_num</code></p>",
        "id": 180932798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573946780
    },
    {
        "content": "<p>exactly, you want a proof which doesn't look like a proof</p>",
        "id": 180932800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573946788
    },
    {
        "content": "<p>Right. It's obvious so it doesn't need a proof.</p>",
        "id": 180932802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573946802
    },
    {
        "content": "<p>that's false</p>",
        "id": 180932804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573946808
    },
    {
        "content": "<p>Not to a mathematician.</p>",
        "id": 180932807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573946816
    },
    {
        "content": "<p>but you want a tactic to pretend it is true</p>",
        "id": 180932808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573946818
    },
    {
        "content": "<p>Right. I want to speak to Lean like a mathematician.</p>",
        "id": 180932815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573946830
    },
    {
        "content": "<blockquote>\n<p>it's still easy, it's just that you get upset when I tell you that the answer is to reduce <code>1 != 2</code> to <code>1 &lt; 2</code> and then <code>0 &lt; 1</code> and finish</p>\n</blockquote>\n<p>Can you do this <code>example : (1 : ℂ) ≠ 2 :=</code>? You're even allowed to use <code>norm_num</code> if you want.</p>",
        "id": 180932818,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573946849
    },
    {
        "content": "<p>Why do you think I sunk several hours this evening into making <code>X + Y</code> make sense for <code>X Y : set real</code>?</p>",
        "id": 180932819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573946852
    },
    {
        "content": "<p>In that case, I would either reduce to <code>0 != 1</code>, or for larger numbers I would interpret them in real or nat and then use <code>&lt;</code></p>",
        "id": 180932861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573946893
    },
    {
        "content": "<p>This (<code>X + Y</code>) is something which doesn't even need a definition for mathematicians, they will expect to be able to sum subsets of the reals, but we can't do it in mathlib yet.</p>",
        "id": 180932863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573946911
    },
    {
        "content": "<p>We can do it, but the notation is funky</p>",
        "id": 180932867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573946928
    },
    {
        "content": "<p>it is <code>(+) &lt;$&gt; X &lt;*&gt; Y</code></p>",
        "id": 180932869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573946940
    },
    {
        "content": "<p>Yeah well not only do I want <code>X + Y</code> to work, but I want <code>X + (Y + Z)</code> to be provably <code>X + Y + Z</code> by undergraduate.</p>",
        "id": 180932878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573946994
    },
    {
        "content": "<p>There is also the issue that this notation is very general and overloaded in maths</p>",
        "id": 180932928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573947035
    },
    {
        "content": "<p>sure but the notation here is reasonable. It's standard in maths to add two subsets of the reals when you're teaching sups.</p>",
        "id": 180932937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573947074
    },
    {
        "content": "<p>you also have things like <code>A + a</code> and <code>B - A</code> (and <code>-A</code> is already being used for complement)</p>",
        "id": 180932944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573947086
    },
    {
        "content": "<p>Yes sure, we do that too, but I'm not asking for that yet :D</p>",
        "id": 180932957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573947101
    },
    {
        "content": "<p>I'm just asking for X+Y which I don't think is unreasonable. Do you have a problem with the PR or are you just observing that I won't be able to get much further?</p>",
        "id": 180933012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573947132
    },
    {
        "content": "<p>I would suggest you not pretend this is actually addition of sets</p>",
        "id": 180933014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573947138
    },
    {
        "content": "<p>use another notation</p>",
        "id": 180933019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573947152
    },
    {
        "content": "<p>But you're happy to have <code>X * Y</code> for <code>X Y : set M</code> with <code>monoid M</code>?</p>",
        "id": 180933022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573947173
    },
    {
        "content": "<p>I think it's probably a bad idea, because it will beg the question</p>",
        "id": 180933030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573947210
    },
    {
        "content": "<p>But this is already in mathlib.</p>",
        "id": 180933032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573947223
    },
    {
        "content": "<p>probably a sneak attack</p>",
        "id": 180933035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573947236
    },
    {
        "content": "<p>I'm happy to make the additive version local notation, I definitely want it in the real number game</p>",
        "id": 180933073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573947243
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/61ccaf65c4cfc9c6ff103463342e034347eb8b89/src/algebra/pointwise.lean#L27\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/61ccaf65c4cfc9c6ff103463342e034347eb8b89/src/algebra/pointwise.lean#L27\">https://github.com/leanprover-community/mathlib/blob/61ccaf65c4cfc9c6ff103463342e034347eb8b89/src/algebra/pointwise.lean#L27</a></p>",
        "id": 180933078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573947279
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/61ccaf65c4cfc9c6ff103463342e034347eb8b89/src/algebra/pointwise.lean#L65\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/61ccaf65c4cfc9c6ff103463342e034347eb8b89/src/algebra/pointwise.lean#L65\">https://github.com/leanprover-community/mathlib/blob/61ccaf65c4cfc9c6ff103463342e034347eb8b89/src/algebra/pointwise.lean#L65</a></p>",
        "id": 180933079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573947296
    },
    {
        "content": "<p>I note that they're not instances.</p>",
        "id": 180933090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573947325
    },
    {
        "content": "<p>How about I make them defs?</p>",
        "id": 180933092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573947336
    },
    {
        "content": "<p>I mean <a href=\"https://github.com/leanprover-community/mathlib/blob/a9a8e6975cf8b7c9b75edb0231c207ae5f2b9a17/src/algebra/pointwise.lean#L188\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/a9a8e6975cf8b7c9b75edb0231c207ae5f2b9a17/src/algebra/pointwise.lean#L188\">https://github.com/leanprover-community/mathlib/blob/a9a8e6975cf8b7c9b75edb0231c207ae5f2b9a17/src/algebra/pointwise.lean#L188</a> and <a href=\"https://github.com/leanprover-community/mathlib/blob/a9a8e6975cf8b7c9b75edb0231c207ae5f2b9a17/src/algebra/pointwise.lean#L191\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/a9a8e6975cf8b7c9b75edb0231c207ae5f2b9a17/src/algebra/pointwise.lean#L191\">https://github.com/leanprover-community/mathlib/blob/a9a8e6975cf8b7c9b75edb0231c207ae5f2b9a17/src/algebra/pointwise.lean#L191</a> (change from instance to def)</p>",
        "id": 180933145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573947425
    },
    {
        "content": "<p>Oh, I see I was involved in merging <a href=\"https://github.com/leanprover-community/mathlib/issues/854\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/854\">#854</a> and I think the reason was because it didn't make them instances</p>",
        "id": 180933193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573947500
    },
    {
        "content": "<p>If it's just a def, then it's just a theory about these operations and this is certainly useful</p>",
        "id": 180933208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573947545
    },
    {
        "content": "<p>make it a local instance and you should be golden</p>",
        "id": 180933215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573947577
    },
    {
        "content": "<blockquote>\n<p>it is <code>(+) &lt;$&gt; X &lt;*&gt; Y</code></p>\n</blockquote>\n<p>If Hales had his controlled natural language, could he have <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mo>+</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X+Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> meaning this? I have realised that sometimes one can use the CNL instead of notation.</p>",
        "id": 180936128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573953091
    },
    {
        "content": "<p>anything is possible</p>",
        "id": 180936182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573953146
    },
    {
        "content": "<p>My understanding is that he wants a language which is readable both by humans and by Lean.</p>",
        "id": 180936199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573953186
    },
    {
        "content": "<p>the translator might become unbounded in complexity, but it's not exactly an unsolvable problem from the CS point of view</p>",
        "id": 180936212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573953241
    },
    {
        "content": "<p>it's just that once you pin down an actual notation system, certain things become more difficult or impossible because the limitations are explicit</p>",
        "id": 180936256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573953272
    },
    {
        "content": "<p>If you are okay with a behemoth of a notation parser, then anything is possible, but it makes it harder for the user to predict what things mean if the parser isn't perfect, fails on some input, or gives a wrong result</p>",
        "id": 180936313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573953381
    },
    {
        "content": "<p>I recall seeing snippets of Hales's CNL and if I understand correctly the proposed solution is to have an unambiguous notation system (in the form of a bunch of tex macros) which \"decays\" to lean notation and also to latex notation, and I see no problem with this except that I thought that mathematicians can't tolerate unambiguous notation. If putting things in the latex context helps mathematicians get over this mental hurdle then I'm all for it</p>",
        "id": 180936388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573953593
    },
    {
        "content": "<p>I would have said mathematical notation is often ambiguous. I guess whether or not something is ambiguous depends on how much of the context you consider. This ability isn't even just about being a human, it depends on knowing which of the possible interpretations is plausible, and consistent with the surrounding arguments, etc.</p>",
        "id": 180937212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573955283
    },
    {
        "content": "<p>As a lame example, I'm always going to guess <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\sin^2 x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.871868em;vertical-align:0em;\"></span><span class=\"mop\"><span class=\"mop\">sin</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.871868em;\"><span style=\"top:-3.12076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> means <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>sin</mi><mo>⁡</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">(\\sin x)^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> because there's no plausible reason to ever have <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>sin</mi><mo>⁡</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sin(\\sin x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>, and then if in the next line it is replaced by <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>−</mo><msup><mo><mi>cos</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">1 - \\cos^2 x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mop\"><span class=\"mop\">cos</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>, then I'm even more certain.</p>",
        "id": 180937281,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573955411
    },
    {
        "content": "<p>However you end up doing it, it seems reasonable to give the machine something more specific but present an abbreviated, ambiguous form to the human reader</p>",
        "id": 180937452,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573955863
    },
    {
        "content": "<p>Norm Megill, the author of metamath, has some strong opinions on this which I partly agree with. Even if notations are unambiguous in the computer, if they are ambiguated during printing, then it is easy to create misleading statements. This is what \"Pollack consistency\" is all about. I don't like the idea that the statement of a theorem should not be understandable without its proof, but I very commonly have to deal with this when reading actual maths papers</p>",
        "id": 180937564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573956115
    },
    {
        "content": "<p>When I started using Lean I was really all for mathematical imprecision to be possible, like <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(X)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> just meaning <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">{</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>x</mi><mo>∈</mo><mi>X</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{f(x):x\\in X\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 180937662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573956267
    },
    {
        "content": "<p>In some ways it makes sense: as a method of human communication, we often use the \"principle of charity\", where we take the most lenient possible understanding in order to justify an argument, and sometimes this can be taken to extremes in maths where you have folks like Mochizuki who produce something that clearly fails to communicate but the maths community is only willing to say \"we aren't sure if this is correct\" even after years of analysis rather than \"this is nonsense\" like a formal theorem prover would do</p>",
        "id": 180937679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573956337
    },
    {
        "content": "<p>But the more I use it the more I realise that actually I think we should start to think as mathematicans about firstly forcing ourselves to distinguish between these closely-related (for us) notions and secondly about formalising exactly the notation-cheats which we are prepared to tolerate. If one mathematician is  genuinely using a piece of notation to mean one thing in dependent type theory, and another mathematician is using the same piece of notation to mean a different thing, then that should be OK, as long as each mathematician is consistent. That's what we want from our notation.</p>",
        "id": 180937736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573956436
    },
    {
        "content": "<p>I think even this, the CS people are happy to tolerate, provided the different notations go in different namespaces or some similar broad scoping. But then they say \"but you promise not to use these at the same time, right?\" and you say \"uhh...\". Of course some enterprising mathematician is later going to want to work in both fields, and use both conflicting notations, maybe apologize but use them anyway, and now the CS person is scratching their head trying to figure out what means what when and how you can possibly tell</p>",
        "id": 180937847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573956644
    },
    {
        "content": "<p>Well we don't really know how we can tell either, but it's easy</p>",
        "id": 180937971,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573956911
    },
    {
        "content": "<p>humans have the advantage here, because they can \"cross that bridge when they come to it\", give it a bit of thought, and maybe change the game if it's too hard (by changing notations later)</p>",
        "id": 180938034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573957020
    },
    {
        "content": "<p>How do we tell whether <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊗</span></span></span></span> is the tensor product of modules, the tensor product of elements or the tensor product of maps? It's hard to imagine being confused about this--provided you understand roughly what is going on.</p>",
        "id": 180938164,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573957271
    },
    {
        "content": "<p>Maybe Lean 3 can just about do this, with overloaded notations</p>",
        "id": 180938166,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573957283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> found a very subtle notational instance in Bourbaki where I think the completion notation was being used in some very subtle ways.</p>",
        "id": 180938496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573958038
    },
    {
        "content": "<p>Perhaps it's not the case for metamath, but Lean already does a lot of context-sensitive elaboration anyways, so I'm not sure you lose much by erasing more distinctions.</p>",
        "id": 180938536,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573958054
    },
    {
        "content": "<p>in metamath we use only global notations, with variables acting as local notations when needed</p>",
        "id": 180938624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573958256
    },
    {
        "content": "<p>as I said, Norm definitely doesn't want \"hidden magic\" and all metamath terms are basically <code>pp.all</code></p>",
        "id": 180938668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573958302
    },
    {
        "content": "<p>I think it's impressive how close metamath gets to a passable mathematical notation with zero implicit arguments and no type inference</p>",
        "id": 180938678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573958363
    },
    {
        "content": "<p>Why don't you make type inference for metamath using prolog?</p>",
        "id": 180938720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573958452
    },
    {
        "content": "<p>that would be an interesting project</p>",
        "id": 180938727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573958469
    },
    {
        "content": "<p>I mean metamath the language doesn't have type inference</p>",
        "id": 180938730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573958490
    },
    {
        "content": "<p>the IDEs have a couple things that get close to type inference</p>",
        "id": 180938731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573958506
    },
    {
        "content": "<p>Gotcha. Do the IDE's use prolog or do they roll their own -- didn't Leo roll his own?</p>",
        "id": 180938775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573958535
    },
    {
        "content": "<p>And they're rolling out a completely new one for Lean 4 I guess.</p>",
        "id": 180938779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573958577
    },
    {
        "content": "<p>I wrote a \"prolog-like search\" but it doesn't do any backtracking, so it only uses lemmas that are always useful to apply when applicable</p>",
        "id": 180938786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573958596
    },
    {
        "content": "<p>there isn't much distinction made between goals that are about typing and goals that are theorems</p>",
        "id": 180938791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573958637
    },
    {
        "content": "<p>of course, the whole point of DTT is that the distinction is fuzzy</p>",
        "id": 180938843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573958672
    },
    {
        "content": "<p>Can you say that thing about goals within type theory? By a goal do you mean a proposition or a proof?</p>",
        "id": 180938857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573958707
    },
    {
        "content": "<p>a metavariable standing for a proof of a known expression</p>",
        "id": 180938865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573958741
    },
    {
        "content": "<p>i.e. what the tactic state normally calls a goal</p>",
        "id": 180938908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573958764
    },
    {
        "content": "<p>Are you talking about <code>expr</code>?</p>",
        "id": 180938912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573958770
    },
    {
        "content": "<p>I don't know anything about how the tactic state works.</p>",
        "id": 180938914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573958783
    },
    {
        "content": "<p>All I know is that it's a much better fit for my brain than term mode</p>",
        "id": 180938917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573958809
    },
    {
        "content": "<p>you have a hole where a proof is expected, and you refine that hole with a partial proof</p>",
        "id": 180938919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573958813
    },
    {
        "content": "<p>right</p>",
        "id": 180938928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573958824
    },
    {
        "content": "<p>sure, that's how almost every theorem prover works</p>",
        "id": 180938930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573958830
    },
    {
        "content": "<p>But in programming languages, where it is an outgrowth of term construction, you work from the bottom up, inferring types of known expressions rather than refining unknown proofs of known types</p>",
        "id": 180938972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573958919
    },
    {
        "content": "<p>There was once a tactic called <code>back</code> that I thought was going to land in mathlib, not sure what happened to it. The tactic I wrote for metamath was basically that, and it allowed you to discharge a variety of problems like equality proofs (rewrite), closure proofs (typing), and other limited decision procedures similar to type class inference like continuity inference</p>",
        "id": 180939040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573959106
    },
    {
        "content": "<p>Interestingly, continuity inference in metamath is possible by a matching based method that doesn't work in lean because of the way lambdas are handled in type theory</p>",
        "id": 180939090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573959182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Hi! People are talking about <code>back</code>. How are things going? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 180996503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574066338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I've made several serious attempts at parsing metamath statements in that web-rendered version of <code>set.mm</code>. I've always failed miserably. I really can't read mm at the moment. There is quite a gap to bridge. With lean I had no such issue at all.</p>",
        "id": 180996615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574066434
    },
    {
        "content": "<p>In the corner of every metamath page, there is a \"structured version\" button, that is trying out an experimental rendering method using mathjax instead of unicode. Does that help at all? We are of course always looking for ways to increase readability</p>",
        "id": 180996717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574066536
    },
    {
        "content": "<p>What is a good example...</p>",
        "id": 180996761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574066626
    },
    {
        "content": "<p>Let me see if I can parse PNT</p>",
        "id": 180996768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574066638
    },
    {
        "content": "<p>I end up on a page like this: <a href=\"http://us.metamath.org/mpeuni/mudivsum.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/mudivsum.html\">http://us.metamath.org/mpeuni/mudivsum.html</a> and nothing feels familiar...</p>",
        "id": 180996867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574066761
    },
    {
        "content": "<p>I don't know how to pronounce <code>mpeuni</code>. I can make a guess for <code>mudivsum</code></p>",
        "id": 180996918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574066791
    },
    {
        "content": "<p>it stands for metamath proof explorer, unicode version</p>",
        "id": 180996935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574066831
    },
    {
        "content": "<p>mudivsum says that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≤</mo><mi>x</mi></mrow></msub><mfrac><mrow><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><mi>n</mi></mfrac><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{n\\le x}\\frac{\\mu(n)}n=O(1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.404889em;vertical-align:-0.39488900000000005em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.14546899999999996em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.39488900000000005em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">μ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 180997009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574066898
    },
    {
        "content": "<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span> is the number-theoretic Mobius function</p>",
        "id": 180997021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574066917
    },
    {
        "content": "<p>If you wanted to know what \"sum\", \"mu\", or \"O(1)\" mean in that statement, you can find them in the \"syntax hints\" at the bottom of the page</p>",
        "id": 180997052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574066982
    },
    {
        "content": "<p>Aha, I see</p>",
        "id": 180997125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574067065
    }
]