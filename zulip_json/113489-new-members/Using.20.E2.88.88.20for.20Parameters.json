[
    {
        "content": "<p>How does <code>∈</code> behave when it is used for function parameters?<br>\nE.g. consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">vertices</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">second</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">vertices</span><span class=\"o\">,</span> <span class=\"n\">a.first</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Hovering over <code>first</code>'s parameter <code>a</code> shows that it is of type <code>α</code>. I found this a bit unexpected, because I thought it would also come with a proof that it is a member of <code>vertices</code>.<br>\nWhere I run into a problem though is with the term <code>a.first</code>. Hovering over <code>a</code> here again shows <code>a : α</code>, but I get the error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>\n<p>I can kind of understand that Lean is complaining, since <code>first</code> expects <code>a ∈ vertices</code> and not just an <code>a : α</code>. But since <code>second</code> declares <code>a ∈ vertices</code>, I don't get why I can't pass it to <code>first</code>.</p>",
        "id": 221017062,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609091439
    },
    {
        "content": "<p><code>a ∈ g.vertices</code> is just a proposition and so you can give it a label, e.g. <code>def is_source_node {g : digraph ι α ε} (a ∈ g.vertices) : Prop := ...</code> should probably be <code>def is_source_node {g : digraph ι α ε} (ha : a ∈ g.vertices) : Prop :=</code></p>",
        "id": 221017126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609091625
    },
    {
        "content": "<p>if you want help with Lean errors then it's much easier for everyone involved if you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> by the way. That way experienced users can view the same errors you're seeing in the same context.</p>",
        "id": 221017173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609091671
    },
    {
        "content": "<p>e.g. I'm assuing you have some <code>variable (a : alpha)</code> somewhere or maybe <code>variable {a : alpha}</code> -- these things all make a difference and you're not showing them in your question right now.</p>",
        "id": 221017186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609091739
    },
    {
        "content": "<p><code>a.is_source_node</code> is short for <code>(type of a).is_source_node a</code></p>",
        "id": 221017233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609091797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20.E2.88.88.20for.20Parameters/near/221017173\">said</a>:</p>\n<blockquote>\n<p>if you want help with Lean errors then it's much easier for everyone involved if you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> by the way. That way experienced users can view the same errors you're seeing in the same context.</p>\n</blockquote>\n<p>I've updated the code above to be a MWE.</p>",
        "id": 221017463,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609092228
    },
    {
        "content": "<p>I'm surprised your code compiles! <code>a</code> is not defined. I would have written it like this: <code>def first {a : α} (ha : a ∈ vertices) : Prop := true</code></p>",
        "id": 221017557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609092399
    },
    {
        "content": "<p>I was hoping that <code>a ∈ vertices</code> would provide a concise way of declaring the variable and the corresponding membership-proof in one term. But I guess <code>{a : α} (ha : a ∈ vertices)</code> will have to do.<br>\nThanks!</p>",
        "id": 221017570,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609092454
    },
    {
        "content": "<p><code>second</code> does not compile because <code>a.first</code> doesn't make sense. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">vertices</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">second</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">vertices</span><span class=\"o\">),</span> <span class=\"n\">first</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 221017614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609092526
    },
    {
        "content": "<p>I think there's some syntax sugar that lets you write <code>a \\in S</code> even if <code>a</code> is not defined, and lean automatically replaces it by <code>{a : ??} (ha : a \\in S)</code> or something like that...</p>",
        "id": 221019221,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609095756
    },
    {
        "content": "<p>Here's an example to illustrate this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221019247,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609095821
    },
    {
        "content": "<p>This probably has something to do with the <code>out_param</code> in the definition of <code>has_mem</code>, but I don't know how it actually works...</p>",
        "id": 221019303,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609095903
    },
    {
        "content": "<p>Here's a slightly minimized version of Kevin's code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">vertices</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">second</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">vertices</span><span class=\"o\">),</span> <span class=\"n\">first</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">second'</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">vertices</span><span class=\"o\">),</span> <span class=\"n\">first</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Note that <code>second'</code> isn't good because <code>H</code> is an automatically generated name.</p>",
        "id": 221019801,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609096829
    },
    {
        "content": "<p>Yes, whenever <code>(a op b)</code> appears as a binder (anywhere), where <code>op</code> is a binary operator, it is elaborated to <code>(a) (H : a op b)</code>. This is why <code>first</code> works (you can see that it has this type if you <code>#print</code> it afterwards). The reason <code>second</code> doesn't work is because the type of <code>a</code> is not known until the typeclass argument in <code>a ∈ vertices</code> is resolved, and dot notation requires typing info before typeclass instance resolution. (Also, <code>a.first</code> doesn't work anyway because <code>first</code> is not in the namespace of the type of <code>a</code>.)</p>",
        "id": 221020998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609099091
    },
    {
        "content": "<p>I don't think <code>out_param</code> is relevant here, this works for <code>&lt;</code> too</p>",
        "id": 221020999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609099095
    },
    {
        "content": "<p>Yeah, you're right. I have no idea what <code>out_param</code> actually does...</p>",
        "id": 221021423,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609099828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> actually are you sure that <code>out_param</code> doesn't play a role? E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`∈'`</span> <span class=\"n\">b</span>       <span class=\"o\">:=</span> <span class=\"n\">foo.foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kd\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈'</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- fail</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`∈''`</span> <span class=\"n\">b</span>       <span class=\"o\">:=</span> <span class=\"n\">foo'.foo'</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kd\">instance</span> <span class=\"n\">bar'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈''</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- okay</span>\n</code></pre></div>",
        "id": 221021617,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609100242
    },
    {
        "content": "<p>Hmm... Is there an outparam on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_lt\">docs#has_lt</a> after all?</p>",
        "id": 221021683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609100327
    },
    {
        "content": "<p>No, but lean can deduce the type of <code>a</code> in <code>a &lt; 3</code> from the type of 3.</p>",
        "id": 221021756,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609100462
    },
    {
        "content": "<p>The purpose of <code>out_param</code> is to allow the typeclass problem <code>has_mem ? (finset A)</code> to be solved, setting <code>? = A</code></p>",
        "id": 221022551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609101795
    },
    {
        "content": "<p>without the out_param, it would not perform the typeclass search until both sides are known</p>",
        "id": 221022562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609101828
    },
    {
        "content": "<p>The reason <code>a &lt; 3</code> infers the type of <code>a</code> is because of unification - <code>lt</code> has the type <code>A -&gt; A -&gt; Prop</code></p>",
        "id": 221022610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609101864
    },
    {
        "content": "<p>if it had the type <code>A -&gt; B -&gt; Prop</code> then it wouldn't work, even if there was an instance <code>has_lt nat nat</code></p>",
        "id": 221022616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609101885
    },
    {
        "content": "<p>but if <code>lt</code> had the type <code>out_param A -&gt; B -&gt; Prop</code> then lean would be able to infer <code>a : nat</code></p>",
        "id": 221022628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609101929
    },
    {
        "content": "<p>the binder thing is orthogonal to that, although it works well with a left outparam as in has_mem. As long as you give the type some other way it still works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`∈'`</span> <span class=\"n\">b</span>       <span class=\"o\">:=</span> <span class=\"n\">foo.foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kd\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈'</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 221022717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609102081
    }
]