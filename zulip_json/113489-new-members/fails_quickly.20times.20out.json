[
    {
        "content": "<p>I'm stuck on PR <a href=\"https://github.com/leanprover-community/mathlib/issues/8673\">#8673</a>, failing the lint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Run</span> <span class=\"bp\">./</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">mk_all.sh</span>\n<span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">deep</span> <span class=\"n\">recursion</span> <span class=\"n\">was</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">replace'</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">stack</span> <span class=\"n\">space</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">system</span><span class=\"o\">)</span>\n<span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">deep</span> <span class=\"n\">recursion</span> <span class=\"n\">was</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">replace'</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">stack</span> <span class=\"n\">space</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">system</span><span class=\"o\">)</span>\n<span class=\"n\">deep</span> <span class=\"n\">recursion</span> <span class=\"n\">was</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">replace'</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">stack</span> <span class=\"n\">space</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">system</span><span class=\"o\">)</span>\n<span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">deep</span> <span class=\"n\">recursion</span> <span class=\"n\">was</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">replace'</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">stack</span> <span class=\"n\">space</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">system</span><span class=\"o\">)</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">Process</span> <span class=\"n\">completed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>I think it's objecting to this instance <a href=\"https://github.com/leanprover-community/mathlib/pull/8673/files#diff-955f5d05cac3345a253a4f9d7d0a9d97914339b75b6a52e9a7501b4bccc7386bR420\">https://github.com/leanprover-community/mathlib/pull/8673/files#diff-955f5d05cac3345a253a4f9d7d0a9d97914339b75b6a52e9a7501b4bccc7386bR420</a></p>\n<p>However, I can't see what needs to be done to make it go green?</p>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 251138442,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1630249748
    },
    {
        "content": "<p>Does the linter fail locally? Then you can change the instance to a def and find out if you're right</p>",
        "id": 251145733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630257737
    },
    {
        "content": "<p>Yes, it fails locally. If I change it to a def (and delete any subsequent statements depending on the instance) then the linter passes.</p>",
        "id": 251148785,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1630261071
    },
    {
        "content": "<p>But that doesn't help me know what to do about it...</p>",
        "id": 251155101,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1630267950
    },
    {
        "content": "<p>That instance forms a loop with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/distrib_lattice.to_lattice\">docs#distrib_lattice.to_lattice</a></p>",
        "id": 251155365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630268267
    },
    {
        "content": "<p>So therefore cannot safely be an instance, no matter the priority</p>",
        "id": 251155431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630268324
    },
    {
        "content": "<p>(this is not the case in lean 4 I think)</p>",
        "id": 251155438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630268337
    },
    {
        "content": "<p>Thanks. So how would I prove something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⊔</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">⊔</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>without using class inference? I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">sup_inf_right</span> <span class=\"o\">(</span><span class=\"n\">lattice_ordered_comm_group_to_distrib_lattice</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>but that doesn't work.</p>",
        "id": 251195928,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1630310454
    },
    {
        "content": "<p>I thought perhaps</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">distrib_lattice</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>would help, but it doesn't. Sorry, I seem to be stabbing around in the dark here.</p>",
        "id": 251243533,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1630336007
    },
    {
        "content": "<p>You should just change it from <code>instance</code> to <code>def</code></p>",
        "id": 251246583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630337256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/fails_quickly.20times.20out/near/251246583\">said</a>:</p>\n<blockquote>\n<p>You should just change it from <code>instance</code> to <code>def</code></p>\n</blockquote>\n<p>Right, but then I can't see what to do <a href=\"https://github.com/leanprover-community/mathlib/pull/8673/files#diff-955f5d05cac3345a253a4f9d7d0a9d97914339b75b6a52e9a7501b4bccc7386bR455\">here</a> where I need to make use of the fact that α is (mathematically)  a distributive lattice?</p>",
        "id": 251247841,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1630337685
    },
    {
        "content": "<p>What's in the context (the hypotheses in the goal window) at that point?</p>",
        "id": 251249369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630338257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/fails_quickly.20times.20out/near/251249369\">said</a>:</p>\n<blockquote>\n<p>What's in the context (the hypotheses in the goal window) at that point?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lattice_ordered_group.lean</span><span class=\"o\">:</span><span class=\"mi\">455</span><span class=\"o\">:</span><span class=\"mi\">12</span>\n<span class=\"n\">Tactic</span> <span class=\"n\">state</span>\n<span class=\"n\">widget</span>\n<span class=\"n\">filter</span><span class=\"o\">:</span>\n<span class=\"n\">no</span> <span class=\"n\">filter</span>\n<span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"n\">α</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"n\">α</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">has_mul.mul</span> <span class=\"n\">has_le.le</span>\n<span class=\"n\">abc</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">lattice_ordered_group.lean</span><span class=\"o\">:</span><span class=\"mi\">455</span><span class=\"o\">:</span><span class=\"mi\">2</span>\n<span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">⊔</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">⊔</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">has_mul.mul</span> <span class=\"n\">has_le.le</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 251250509,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1630338795
    },
    {
        "content": "<p>I think you should either:</p>\n<ul>\n<li>replace <code>lattice α</code> with <code>distrib_lattice α</code> in that lemma</li>\n<li>add a <code>letI : distrib_lattice α := lattice_ordered_comm_group_to_distrib_lattice _</code> inside that proof</li>\n</ul>",
        "id": 251251219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630339094
    },
    {
        "content": "<p>The PR has gone green with <code>letI</code>. Thank you very much.</p>",
        "id": 251286824,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1630353928
    }
]