[
    {
        "content": "<p>I tried to practice some induction in lean and in the process used division on nat (which I know from discussions here one should try to avoid). If one decides to use it anyway, I found the following lemma helpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_div''</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hca</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hba</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">-- We can prove the statement by splitting into cases: Either c=0,</span>\n<span class=\"c1\">-- in which case the statement holds by definition or c&gt;0, in which</span>\n<span class=\"c1\">-- case we have to work.</span>\n<span class=\"n\">cases</span> <span class=\"n\">le_or_gt</span> <span class=\"n\">c</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">hc</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat.le_zero_iff</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.div_zero</span><span class=\"o\">]</span>\n<span class=\"o\">},</span>\n<span class=\"c1\">-- As / is defined as the floor function on / on ℕ, we can multiply</span>\n<span class=\"c1\">-- by c to obtain the result provided that c ∣ (a+b) and c&gt;0.</span>\n<span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">nat.div_eq_iff_eq_mul_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n<span class=\"c1\">-- We show that (a+b)=c(a/c+b/c) using that c∣a and c∣b by assumption.</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span><span class=\"o\">,</span>\n<span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"n\">assumption</span><span class=\"o\">},</span>\n<span class=\"c1\">-- c&gt;0 in this case.</span>\n<span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"c1\">-- c ∣ (a+b) holds since c∣a and c∣b.</span>\n<span class=\"n\">exact</span> <span class=\"n\">dvd_add</span> <span class=\"n\">hca</span> <span class=\"n\">hba</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is this somewhere in mathlib? The only thing I could find was the following in data/nat/modeq.lean and I didn't manage to use it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_div</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">+</span>\n  <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 222421250,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1610452849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span> it doesn't seem to be in mathlib, and I agree that it looks useful</p>",
        "id": 222422165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610453554
    },
    {
        "content": "<p>You could use <code>add_div</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_div''</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hca</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hba</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">-- We can prove the statement by splitting into cases: Either c=0,</span>\n<span class=\"c1\">-- in which case the statement holds by definition or c&gt;0, in which</span>\n<span class=\"c1\">-- case we have to work.</span>\n<span class=\"n\">cases</span> <span class=\"n\">le_or_gt</span> <span class=\"n\">c</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">hc</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat.le_zero_iff</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.div_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.add_div</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.mod_eq_zero_of_dvd</span> <span class=\"n\">hca</span><span class=\"o\">,</span> <span class=\"n\">nat.mod_eq_zero_of_dvd</span> <span class=\"n\">hba</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n<span class=\"n\">exact</span> <span class=\"n\">hc.lt.not_le</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222422359,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1610453731
    },
    {
        "content": "<p>Golfed using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.add_div_eq_of_add_mod_lt\">docs#nat.add_div_eq_of_add_mod_lt</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.add_div_eq_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hca</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hba</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"n\">nat.add_div_eq_of_add_mod_lt</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.mod_eq_zero_of_dvd</span> <span class=\"n\">hca</span><span class=\"o\">,</span> <span class=\"n\">nat.mod_eq_zero_of_dvd</span> <span class=\"n\">hba</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.pos_of_ne_zero</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222423474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610454549
    },
    {
        "content": "<p>Are both assumptions necessary, they are there in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.add_div_of_dvd\">docs#int.add_div_of_dvd</a> too, but it seems to me you only need <code>c\\|a</code> or <code>c\\|b</code> in both the nat and int versions?</p>",
        "id": 222439823,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610462616
    },
    {
        "content": "<p>No, they're not necessary, which is why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.add_div_eq_of_add_mod_lt\">docs#nat.add_div_eq_of_add_mod_lt</a> exists</p>",
        "id": 222440133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610462739
    },
    {
        "content": "<p>But I guess the fact we have the lemma for int is an argument in itself for having <code>nat.add_div_of_dvd</code></p>",
        "id": 222440176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610462760
    },
    {
        "content": "<p>Oh I agree we should have the lemma! But let's add the best version, and fix the old one too <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 222440491,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610462892
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.add_div_eq_of_dvd</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hca</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"n\">nat.add_div_eq_of_add_mod_lt</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.mod_eq_zero_of_dvd</span> <span class=\"n\">hca</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222444867,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610464655
    },
    {
        "content": "<p>Why <code>hca</code> over <code>hcb</code>?</p>",
        "id": 222447646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610465670
    },
    {
        "content": "<p>I mean, I guess commutativity of addition lets you recover the other one</p>",
        "id": 222447718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610465700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Thanks a lot for your comments and improvements.</p>",
        "id": 222486584,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1610481755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> For int there is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.add_mul_div_left\">docs#int.add_mul_div_left</a>, which is basically the same but formulated slightly differently.</p>",
        "id": 222782530,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1610657680
    },
    {
        "content": "<p>Ah, thank you! I had some vague memory that this already existed, but it must have been that version indeed</p>",
        "id": 222782627,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610657726
    },
    {
        "content": "<p>Should the nat version be added anyway? For consistency maybe formulated in the same way?</p>",
        "id": 222783052,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1610657922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span> if the nat version is missing, then yes, please add it (if you are planning a PR)</p>",
        "id": 222784273,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610658483
    },
    {
        "content": "<p>I can give it a try. Can you (or someone else) give me permission to push to a branch?</p>",
        "id": 222792439,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1610662458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span> what's your github username?</p>",
        "id": 222792571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610662495
    },
    {
        "content": "<p>Julian-Kuelshammer</p>",
        "id": 222792678,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1610662532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span> invitation sent</p>",
        "id": 222792928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610662599
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 222793411,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1610662695
    },
    {
        "content": "<p>The corresponding PR (my first to mathlib) just got merged. Thanks everyone for the comments and improvements.</p>",
        "id": 222971095,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1610788744
    },
    {
        "content": "<p>Congrats!</p>",
        "id": 222972168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610790405
    }
]