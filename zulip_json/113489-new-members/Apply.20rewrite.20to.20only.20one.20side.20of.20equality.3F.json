[
    {
        "content": "<p>Can I apply a rewrite to only one side of an equality? For context, I'm doing the exercises in section 2.2 of Mathematics in Lean, and I have this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_identity_unique</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_left_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>After <code>mul_left_inv a</code>, the proof goal is <code>a⁻¹ * a * b = a⁻¹ * a</code>, but I would like it to be <code>a⁻¹ * a * b = 1</code> (although I realise in this particular case, the proof is actually shorter if I let lean rewrite both sides)</p>",
        "id": 226987910,
        "sender_full_name": "Paul",
        "timestamp": 1613751765
    },
    {
        "content": "<p><code>conv_lhs</code>, <code>conv_rhs</code>, and <code>conv</code> are relevant: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#conv\">https://leanprover-community.github.io/mathlib_docs/tactics.html#conv</a></p>",
        "id": 226989005,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1613752071
    },
    {
        "content": "<p>Ah perfect, thanks! I used conv_lhs like this and it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_identity_unique</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_left_inv</span> <span class=\"n\">a</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226989280,
        "sender_full_name": "Paul",
        "timestamp": 1613752187
    },
    {
        "content": "<p>Also see the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nth_rewrite%20/%20nth_rewrite_lhs%20/%20nth_rewrite_rhs\"><code>nth_rewrite</code> tactic</a>.</p>",
        "id": 226989297,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613752195
    }
]