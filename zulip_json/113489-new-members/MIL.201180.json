[
    {
        "content": "<p>I have this context </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span>\n<span class=\"n\">monof</span><span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span>\n<span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>proof <code>exact h monof h'</code> fails with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>How do I fix it?</p>\n<p>Here's the full thing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">monof</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span>  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">monof</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 302991527,
        "sender_full_name": "boris",
        "timestamp": 1665223192
    },
    {
        "content": "<p>Sorry this was probably wrong</p>",
        "id": 302992443,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665223655
    },
    {
        "content": "<p>Wait</p>",
        "id": 302992534,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665223686
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">monof</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span>  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">monof</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>what Riccardo wrote. this works</p>",
        "id": 302992700,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1665223801
    },
    {
        "content": "<p>I should stop trying to answer using only my phone <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 302992828,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665223845
    },
    {
        "content": "<p>it was the correct answer, I would say you shouldn't</p>",
        "id": 302993122,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1665223983
    },
    {
        "content": "<p>Even better!</p>",
        "id": 302993162,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665224002
    },
    {
        "content": "<p>thank you!</p>",
        "id": 302993615,
        "sender_full_name": "boris",
        "timestamp": 1665224219
    },
    {
        "content": "<p>I see. Lean is so good at knowing what type things are, it's confusing when it doesn't</p>",
        "id": 302993923,
        "sender_full_name": "boris",
        "timestamp": 1665224384
    },
    {
        "content": "<p>Boris, we are sorry that the error message is so unhelpful. When you see this kind of puzzling error message, there are two things to check: if you are trying to apply a lemma, you should carefully check the type class assumptions of the lemma (the assumptions written in square brackets), otherwise you need to check Lean understood what you meant by clicking on terms in the info view (assuming you are using VSCode). If your case, after stating the inequality, you can click on 0 and 1 in the infoview to see they are natural numbers.</p>",
        "id": 302994005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665224418
    },
    {
        "content": "<p>I didn't realise I could inspect the types in Infoview like that! That's really handy. Thanks for guiding me through it,  very helpful.</p>",
        "id": 302994352,
        "sender_full_name": "boris",
        "timestamp": 1665224604
    },
    {
        "content": "<p>Here is an example of the first case I mentioned above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_inv_eq_one</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- rewrite tactic failed, did not find instance of the pattern in the</span>\n  <span class=\"c1\">-- target expression _ = 1</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">mul_inv_eq_one</span> <span class=\"c1\">-- this is a lemma about (multiplicative) groups</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">mul_inv_cancel</span> <span class=\"c1\">-- this is the lemma we wanted</span>\n</code></pre></div>",
        "id": 302995140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665224985
    },
    {
        "content": "<p>In that sample I try to invoke a lemma whose name is very promising and Lean seems blind when it declares it cannot match the target with the pattern <code>_ = 1</code>. But what Lean really means is it doesn't see the <code>1</code> of a group (for the multiplication operation), as you can see by reviewing the square-bracket argument of that lemma.</p>",
        "id": 302995368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665225089
    }
]