[
    {
        "content": "<p>I'm trying to learn more about how to lift definitions into quotients. I've proved that if two lists are equivalent up to rotation, then so are their inverses. How can I use this to define a <code>reverse</code> for my <code>cycle</code>, which is the quotient of a list by rotation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.rotate</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.erase_dup</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reverse_rotate</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l.rotate</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"bp\">=</span> <span class=\"n\">l.reverse.rotate</span> <span class=\"o\">(</span><span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">l.length</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">length_reverse</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">rotate_eq_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">generalizing</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rotate_cons_succ</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">rotate_rotate</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rotate_cons_succ</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_rotated</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">l.rotate</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l'</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">~</span><span class=\"n\">r</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1000</span> <span class=\"o\">:=</span> <span class=\"n\">is_rotated</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_rotated.setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">is_rotated</span><span class=\"o\">,</span> <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_rotated.reverse</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span><span class=\"n\">r</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.reverse</span> <span class=\"bp\">~</span><span class=\"n\">r</span> <span class=\"n\">l'.reverse</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_rotated_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">reverse_rotate</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cycle</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_rotated.setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">cycle</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cycle</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">quot.mk</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">cycle</span>\n</code></pre></div>",
        "id": 235274732,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618882160
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.map\">docs#quotient.map</a> maybe?</p>",
        "id": 235293320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618899785
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.map'\">docs#quotient.map'</a> if you're not using setoid as a typeclass</p>",
        "id": 235293543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618899930
    },
    {
        "content": "<p>Amazing, thank you!</p>",
        "id": 235340636,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618924204
    },
    {
        "content": "<p>You can thank <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> who told me about this trick when I was writing my class on quotients last month :-)</p>",
        "id": 235342233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618924890
    },
    {
        "content": "<p>Is there a reason to use the primed <code>quotient</code> methods over the underlying <code>quot</code> methods?</p>",
        "id": 235343546,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618925424
    },
    {
        "content": "<p>The primed methods attempt to find the setoids using the <code>{}</code> system, and the unprimed ones attempt to find it using the <code>[]</code> system. In your example you didn't make the setoids an instance so the unprimed methods might not work.</p>",
        "id": 235344546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618925798
    },
    {
        "content": "<p>I think those systems have got fancier names but I forgot them. Oh <code>[]</code> is type class inference system.</p>",
        "id": 235344600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618925825
    },
    {
        "content": "<p><code>{}</code> is unification</p>",
        "id": 235344621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618925837
    },
    {
        "content": "<p>Right, that's the difference between <code>quotient.map</code> and <code>quotient.map'</code>. But <code>quotient.map'</code> is just <code>quot.map</code>. So why not just use <code>quot.map</code>?</p>",
        "id": 235344784,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618925905
    },
    {
        "content": "<p>Someone remarked at some point about the philosophical difference in the purpose between <code>quot</code> and <code>quotient</code> and I guess that's what I'm wondering about here too.</p>",
        "id": 235344936,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618925985
    },
    {
        "content": "<p>They're defeq, but if you have a stetoid, you may as well use the quotient API in case you run into <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.exact\">docs#quotient.exact</a> which is better than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.exact\">docs#quot.exact</a></p>",
        "id": 235345664,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618926258
    }
]