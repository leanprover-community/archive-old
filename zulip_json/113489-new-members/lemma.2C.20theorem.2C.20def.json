[
    {
        "content": "<p>it seems that the three keywords are equivalent. why does Lean have those aliases?</p>",
        "id": 225269701,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612511844
    },
    {
        "content": "<p><code>lemma</code> and <code>theorem</code> are equivalent. They are proof irrelevant. <code>def</code> is for data.</p>",
        "id": 225269876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612512003
    },
    {
        "content": "<p>So you cannot use <code>lemma</code> and <code>def</code> interchangeably</p>",
        "id": 225269898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612512026
    },
    {
        "content": "<p>can you please post a code snippet where i can't replace <code>lemma</code>/<code>theorem</code> with <code>def</code>, that'd be much appreciated</p>",
        "id": 225269952,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612512099
    },
    {
        "content": "<p>or I can always replace lemma/theorem with def but there are some cases where I can't replace def with lemma/theorem?</p>",
        "id": 225270035,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612512172
    },
    {
        "content": "<p>Sure, you can use <code>def</code> when you would use <code>lemma</code>. I don't think it will break much.</p>",
        "id": 225270156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612512275
    },
    {
        "content": "<p>But if you replace def with lemma then your proofs about the definition will break</p>",
        "id": 225270206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612512336
    },
    {
        "content": "<p>that clears it up, thanks!</p>",
        "id": 225270313,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612512422
    },
    {
        "content": "<p>one more question, why does this definition work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">accumulate</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">input</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">list.reverse_rec_on</span> <span class=\"n\">input</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">head</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">value</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">accumulated</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">accumulated</span> <span class=\"bp\">+</span> <span class=\"n\">value</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>wow i can define a function using syntax that looks like a proof</p>",
        "id": 225270591,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612512669
    },
    {
        "content": "<p>If you use a tactic like <code>rw</code> when defining data then you might find that the term generated by Lean is nasty, meaning that you will have difficulty proving theorems about your definition. Here you should be fine though -- you can <code>#print accumulate</code> after the definition and check that it looks reasonable</p>",
        "id": 225270887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612512952
    },
    {
        "content": "<p>Tactics like <code>rw</code> generate proof terms with <code>eq.rec</code> in, often buried under other junk, so it's unwise to use them in definitions</p>",
        "id": 225270985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612513044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> tactics like <code>intro</code> and <code>exact</code> are very \"transparent\" tactics (my terminology). They just put terms together using the basic building blocks of lambda calculus. So those tactics are safe to use in definitions. But as Kevin explains, other tactics create really ugly terms which you don't want in your definitions.</p>",
        "id": 225274551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612515908
    }
]