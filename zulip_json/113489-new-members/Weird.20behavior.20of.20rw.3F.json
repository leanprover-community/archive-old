[
    {
        "content": "<p>I'm trying to shorten the following proof:</p>\n<div class=\"codehilite\"><pre><span></span>lemma sqr_roots_one (x : ℝ) (p : x ^ 2 = 1) : x = 1 ∨ x = -1 := begin\ncases le_total x 0,\nright,\nrw [neg_eq_iff_neg_eq.1],\nrw [← sqrt_sqr (neg_le_neg h), pow_two, neg_mul_neg, ← pow_two, p, sqrt_one],\nleft, rw [← sqrt_sqr h, p, sqrt_one],\nend\n</pre></div>\n\n\n<p>But when I try to combine the two adjacent rw tactics into one it doesn't work.</p>",
        "id": 134890495,
        "sender_full_name": "Sebastian Zimmer",
        "timestamp": 1538243294
    },
    {
        "content": "<p>That's because <code>rw [neg_eq_iff_neg_eq.1],</code> solved your goal, but created a new one. <code>rw [eq_neg_iff_eq_neg],</code> should allow you to merge the goals.<br>\nIncidentally, here's the shortest proof</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">sqr_roots_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">mul_self_eq_one_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p</span>\n</pre></div>",
        "id": 134890652,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538243723
    },
    {
        "content": "<p>Lol I feel like I searched for everything except mul_self <span class=\"emoji emoji-1f615\" title=\"oh no\">:oh_no:</span></p>",
        "id": 134890698,
        "sender_full_name": "Sebastian Zimmer",
        "timestamp": 1538243864
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">sqr_roots_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">mul_self_eq_one_iff</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">pow_two</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 134890804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538244048
    },
    {
        "content": "<p>I think this is one area the library isn't entirely consistent. There's a mix of pow_two and mul_self.</p>",
        "id": 134890854,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538244147
    },
    {
        "content": "<p>For the record I found this way that lets you write the original with a merged <code>rw</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">sqr_roots_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">right</span><span class=\"o\">,</span>\n<span class=\"n\">symmetry</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_eq_iff_neg_eq</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">sqrt_sqr</span> <span class=\"o\">(</span><span class=\"n\">neg_le_neg</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">neg_mul_neg</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">sqrt_one</span><span class=\"o\">],</span>\n<span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">sqrt_sqr</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">sqrt_one</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134890928,
        "sender_full_name": "Scott Olson",
        "timestamp": 1538244320
    },
    {
        "content": "<p>(Didn't work without <code>symmetry</code> first because of the way <code>neg_eq_iff_neg_eq</code> is written)</p>",
        "id": 134891047,
        "sender_full_name": "Scott Olson",
        "timestamp": 1538244520
    },
    {
        "content": "<p>This is probably a stupid question but how do I prove 2 \\neq 0 in \\com ?</p>",
        "id": 134892753,
        "sender_full_name": "Sebastian Zimmer",
        "timestamp": 1538248120
    },
    {
        "content": "<p>I noticed there is a theorem <code>two_ne_zero</code> that sounded promising but doesn't seem to work</p>",
        "id": 134892763,
        "sender_full_name": "Sebastian Zimmer",
        "timestamp": 1538248179
    },
    {
        "content": "<p>I think it's <code>two_ne_zero'</code>. Not a stupid question.</p>",
        "id": 134892866,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538248371
    },
    {
        "content": "<p>Thanks that worked. What is the difference between <code>two_ne_zero</code>  and <code>two_ne_zero'</code>?</p>",
        "id": 134893098,
        "sender_full_name": "Sebastian Zimmer",
        "timestamp": 1538248839
    },
    {
        "content": "<p>Different typeclass requirements, I guess:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">two_ne_zero</span>\n<span class=\"c1\">-- two_ne_zero : ∀ {α : Type u_1} [_inst_1 : linear_ordered_field α], 2 ≠ 0</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">two_ne_zero&#39;</span>\n<span class=\"c1\">-- two_ne_zero&#39; : ∀ {α : Type u_1} [_inst_1 : add_monoid α] [_inst_2 : has_one α] [_inst_3 : char_zero α], 2 ≠ 0</span>\n</pre></div>",
        "id": 134893823,
        "sender_full_name": "Scott Olson",
        "timestamp": 1538250590
    },
    {
        "content": "<p>It's a core thing. Every linear ordered field has characteristic zero, but <code>two_ne_zero</code> is in core, so it can't be changed, and therefore we need a version for <code>char_zero</code> as well.</p>",
        "id": 134893977,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538250917
    }
]