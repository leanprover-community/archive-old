[
    {
        "content": "<p>This is probably very basic but I'm having trouble finding something for it. Suppose I have a long term like a+b+c+d and I want to introduce a new name, say n, for use of it in a proof. How would I do that? I thought <code>have</code> would be the obvious answer but it doesn't seem to give me any sort of assumption like <code>n=a+b+c+d</code> which I could then rewrite with.</p>",
        "id": 251312755,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1630368019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312947\">@Wojtek Wawrów</span> You can use <code>let n := a + b + c + d</code>, and then, when you need to look under the hood, use <code>rw n</code> to replace <code>n</code> with <code>a + b + c + d</code>.</p>",
        "id": 251312974,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630368143
    },
    {
        "content": "<p>The difference between <code>let</code> and <code>have</code> is precisely what you noticed: <code>have n := a + b + c + d</code> forgets how <code>n</code> was defined.</p>",
        "id": 251313034,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630368192
    },
    {
        "content": "<p>That's perfect, thank you!</p>",
        "id": 251313409,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1630368477
    },
    {
        "content": "<p>We also have the (essentially equivalent) tactic called <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#set\">tactic#set</a> with the syntax being <code>set n := a + b + c + d with hn</code> which will introduce an assumption <code>hn : n = a + b + c + d</code> into context.</p>",
        "id": 251313638,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630368644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Actually, <code>rw n</code> doesn't seem to work - I'm getting <code>rewrite tactic failed, lemma is not an equality nor a iff</code> when I try it</p>",
        "id": 251313714,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1630368718
    },
    {
        "content": "<p>I think <code>dsimp [n]</code> should work.</p>",
        "id": 251313758,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630368731
    },
    {
        "content": "<p>Maybe <code>unfold n</code>? (or <code>delta n</code>)</p>",
        "id": 251313761,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630368737
    },
    {
        "content": "<p>dsimp works, but neither unfold nor delta seems to. I think I will go with <code>set .. with ...</code> solution (rewriting using the given name works)</p>",
        "id": 251313927,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1630368876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20a.20new.20term/near/251313034\">said</a>:</p>\n<blockquote>\n<p>The difference between <code>let</code> and <code>have</code> is precisely what you noticed: <code>have n := a + b + c + d</code> forgets how <code>n</code> was defined.</p>\n</blockquote>\n<p>Wow, thank you! This resolved a lot of my confusion.</p>",
        "id": 252339448,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1631034971
    }
]