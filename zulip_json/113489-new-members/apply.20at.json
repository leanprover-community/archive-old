[
    {
        "content": "<p>Sorry if this is a dumb question.  If I have a hypothesis <code>x : A</code> and a lemma <code>f : A -&gt; B</code>, is there a tactic that will replace my hypothesis <code>x : A</code> by <code>x : B</code>?  In Coq I would write <code>apply f in x</code>.  In Lean I expected to be able to write <code>apply f at x</code> since that's the syntax used for <code>rewrite</code>, <code>simp</code>, <code>unfold</code>, etc. acting on a hypothesis, but it doesn't work.  Is there a standard tactic that does this?</p>",
        "id": 307215969,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1667256330
    },
    {
        "content": "<p><code>replace x := f x</code></p>",
        "id": 307216423,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667256506
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_fun\">tactic#apply_fun</a></p>",
        "id": 307216490,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667256534
    },
    {
        "content": "<p>hmmm actually <code>apply_fun</code> doesn't work.</p>",
        "id": 307216803,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667256660
    },
    {
        "content": "<p>but <code>replace</code> will work, of course.</p>",
        "id": 307216835,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667256674
    },
    {
        "content": "<p>Sorry, I was stupid -- apply_fun will apply <code>f</code> to things like <code>h : a = b</code> where <code>a b : A</code>, yielding <code>h : f a = f b</code></p>",
        "id": 307217005,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667256738
    },
    {
        "content": "<p><code>specialize f x</code> should work, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#specialize\">tactic#specialize</a></p>",
        "id": 307219828,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1667257926
    },
    {
        "content": "<p><code>specialize</code> is <code>replace f := f x</code> not <code>replace x := f x</code></p>",
        "id": 307220771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667258489
    },
    {
        "content": "<p><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/modus.20ponens.20in.20context/near/256886236\"><code>apply at</code> has been suggested before</a></p>",
        "id": 307221021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667258637
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/Apply.20in.20an.20assumption.3F/near/197823015\">And here</a>, <a href=\"#narrow/stream/113489-new-members/topic/noob.20question.28s.29/near/195672273\">and here</a></p>",
        "id": 307221519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667258928
    },
    {
        "content": "<p>Ok, thanks.  That's disappointing that it doesn't exist.</p>",
        "id": 307338493,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1667316635
    },
    {
        "content": "<p>Is this a good idea for Mathlib4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"apply\"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"at\"</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">replace</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 307341079,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667317353
    },
    {
        "content": "<p>Do you want <code>apply [f] at h</code> or are we rebelling against the <code>[]</code>?</p>",
        "id": 307342008,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1667317628
    },
    {
        "content": "<p>why the <code>[f]</code>?</p>",
        "id": 307342073,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667317653
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"apply\"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"at\"</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">replace</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">a</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 307342093,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667317662
    },
    {
        "content": "<p>What I expect from <code>rw</code>?</p>",
        "id": 307342109,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1667317667
    },
    {
        "content": "<p>Oh, do you want to be able to apply multiple functions as well? That's an interesting idea!</p>",
        "id": 307342237,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667317697
    },
    {
        "content": "<p>It would be nice.</p>",
        "id": 307342301,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1667317719
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"apply\"</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">fs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"s2\">\"at\"</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">f</span> <span class=\"k\">in</span> <span class=\"n\">fs.getElems</span> <span class=\"k\">do</span>\n    <span class=\"n\">Elab.Tactic.evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">replace</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 307343623,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667318129
    },
    {
        "content": "<p>There's probably a better way to handle the parsing</p>",
        "id": 307343812,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667318172
    },
    {
        "content": "<p>From my post here, I'd argue the semantics should be to insert underscores:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Apply.20in.20an.20assumption.3F/near/307221790\">said</a>:</p>\n<blockquote>\n<p>Should the semantics instead be <code>replace h := f _* h</code>? That way <code>apply f _ _ at h</code> is similar to <code>apply f at h</code> in the same way that <code>apply f _ _</code> is similar to <code>apply f</code>.</p>\n</blockquote>",
        "id": 307392255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667332375
    },
    {
        "content": "<p>It would, because as I said above you could end up with a discrete order.</p>",
        "id": 307398059,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667334554
    }
]