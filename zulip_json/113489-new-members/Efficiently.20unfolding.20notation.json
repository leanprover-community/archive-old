[
    {
        "content": "<p>How is one supposed to unfold notation that comes from type classes? E.g. :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">not_mem_mem_compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I want to be able to unfold the notation <code>-S</code> using the definition of <code>compl</code>, so I would write <code>unfold compl</code>. This doesn't work, as I need to also tell it to unfold <code>has_neg.neg</code>, as the <code>-</code> notation is given for compl as an instance of the type class <code>has_neg</code>. Is there a better way to do this than <code>unfold has_neg.neg compl</code>? I want to be able to think of the notation as an abbreviation for <code>compl</code>, but here it is demanding an extra step. It doesn't seem similar steps are necessary for the notation <code>+</code> on <code>nat</code>, which is introduced the same way, with <code>has_add</code>. Is there an attribute I can give something so that <code>unfold</code> knows to incorporate <code>has_neg</code>?</p>",
        "id": 197793073,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589631534
    },
    {
        "content": "<p>Three backticks and then a newline</p>",
        "id": 197793092,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589631583
    },
    {
        "content": "<p>Thanks, fixed it.</p>",
        "id": 197793101,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589631601
    },
    {
        "content": "<p>I think you also need these two steps to unfold <code>+</code> on nats, no?</p>",
        "id": 197793146,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589631620
    },
    {
        "content": "<p>Or maybe the difference is <code>+</code> has an equational lemma which is phrased in terms of the notation?</p>",
        "id": 197793156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589631643
    },
    {
        "content": "<p>Because you probably only want to unfold <code>+</code> when you're also applying one of the two defining equations.</p>",
        "id": 197793176,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589631677
    },
    {
        "content": "<p>Why does this work?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">):=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197793181,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589631690
    },
    {
        "content": "<p>Because <code>refl</code> works up to definitional equality</p>",
        "id": 197793189,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589631701
    },
    {
        "content": "<p>Er, well okay the exact reason is a bit complicated</p>",
        "id": 197793235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589631733
    },
    {
        "content": "<p>If you said <code>exact rfl</code>, then the reason would be that <code>exact</code> works up to definitional equality</p>",
        "id": 197793239,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589631756
    },
    {
        "content": "<p>How does <code>refl</code> know to access <code>has_add.add</code> while <code>unfold</code> and <code>dunfold</code> doesn't?</p>",
        "id": 197793243,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589631763
    },
    {
        "content": "<p><code>refl</code> doesn't know anything about <code>has_add</code></p>",
        "id": 197793252,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589631781
    },
    {
        "content": "<p><code>refl</code> says: the goal is equality, so I'll supply <code>eq.rfl</code> as the proof term</p>",
        "id": 197793279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589631798
    },
    {
        "content": "<p>and <code>eq.rfl : 1 + 0 = 1</code>, so Lean is happy</p>",
        "id": 197793293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589631813
    },
    {
        "content": "<p>In order to check this <code>eq.rfl : 1 + 0 = 1</code>, Lean knows that <code>+</code> is notation for <code>has_add.add</code> and it knows how to reduce <code>has_add.add</code> applied to the <code>has_add</code> instance for <code>nat</code> to get <code>nat.add</code>, and then how to unfold <code>nat.add</code> to its definition in terms of <code>nat.rec</code>, and then how to reduce <code>nat.rec</code> applied to <code>0</code>, etc. But this is all happening outside the tactic layer.</p>",
        "id": 197793357,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589631907
    },
    {
        "content": "<p>On the other hand, <code>unfold</code> means: replace the named thing with its definition (possibly applying equational lemmas).</p>",
        "id": 197793369,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589631956
    },
    {
        "content": "<p>You didn't give an example involving <code>+</code> and <code>unfold</code>, so it's not analogous.</p>",
        "id": 197793411,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589631967
    },
    {
        "content": "<p>So in some sense <code>refl</code> is \"smarter\" or has access to more stuff than <code>unfold' (but as you say it's all happening outside of tactic layer). So </code>refl<code> can figure out definitions that </code>unfold` can't without being fed them explicitly?</p>",
        "id": 197793420,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589632003
    },
    {
        "content": "<p>If anything, <code>refl</code> is dumber.</p>",
        "id": 197793427,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589632026
    },
    {
        "content": "<p>There are several layers at work here, and several different notions of equality.</p>",
        "id": 197793432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589632058
    },
    {
        "content": "<p>And your point about not having an example of <code>+</code> and <code>unfold</code> is fair; you made me realize why I thought you didn't need the two unfolding steps for <code>nat</code>, which was wrong, but that led to the question about <code>refl</code>.</p>",
        "id": 197793476,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589632086
    },
    {
        "content": "<p>If you don't mind, whenever you say <code>refl</code>, I'll pretend you said <code>exact rfl</code>, since that cuts out an irrelevant step (deciding which kind of reflexivity to use).</p>",
        "id": 197793486,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589632105
    },
    {
        "content": "<p>I think I'm getting the general picture now. My final question about this topic is how you would prove the (trivial) theorem above:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">not_mem_mem_compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197793502,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589632166
    },
    {
        "content": "<p><code>exact</code> is a tactic that uses the term you give it to close the goal. The term only has to match the goal up to definitional equality, which means up to unfolding anything that needs unfolding.</p>",
        "id": 197793513,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589632194
    },
    {
        "content": "<p>Noting that</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">compl</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 197793554,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589632218
    },
    {
        "content": "<p>Well, one way is just <code>:= h</code></p>",
        "id": 197793557,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589632245
    },
    {
        "content": "<p>or <code>:= by exact h</code>--this takes advantage of definitional equality</p>",
        "id": 197793577,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589632268
    },
    {
        "content": "<p>Ok, because everything holds definitionally, exact can figure it out.</p>",
        "id": 197793586,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589632275
    },
    {
        "content": "<p>alternatively, there is probably already a lemma which says precisely this</p>",
        "id": 197793591,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589632282
    },
    {
        "content": "<p>Probably named something like <code>mem_compl</code> or <code>mem_compl_iff</code></p>",
        "id": 197793598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589632295
    },
    {
        "content": "<p>Using that is better practice in principle, since it insulates you from the specific definition of <code>compl</code></p>",
        "id": 197793646,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589632324
    },
    {
        "content": "<p>Yeah, I just wanted an example. Thanks for your help! I think (most of) my confusion has been resolved. And your last comment makes sense.</p>",
        "id": 197793654,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589632356
    },
    {
        "content": "<p>In the natural number game, <code>zero_add</code> is a theorem which is proved by induction, but <code>add_zero</code> can be proved by <code>refl</code>. Definitional equality is not mathematical, in some sense; it depends on exactly how an object is defined, rather than the way a mathematician thinks about it (where there might be several different definitions of one thing, all equivalent).</p>",
        "id": 197794665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589633942
    }
]