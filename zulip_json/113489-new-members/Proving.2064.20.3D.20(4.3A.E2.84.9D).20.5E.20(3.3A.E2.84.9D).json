[
    {
        "content": "<p>Hi! I've been in difficulty when I tried to prove this equality, I've browsed through the other topics and found some subtlety in type theory, but I think this one is provable as they are both of type ℝ, but I don't know exactly how when <code>norm_cast</code> failed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span> <span class=\"o\">(</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span> <span class=\"o\">(</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span> <span class=\"o\">(</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>These simple examples above work magically( The 3rd one will panic when I use <code>norm_cast</code>), but when it comes to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span> <span class=\"o\">(</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">pow_succ'</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Cheating like <code>norm_cast</code> or <code>simp</code> won't work...<br>\nIf possible, how can I see what's going on under the hood when I apply <code>norm_cast</code> or <code>simp</code>? I think maybe that helps to inspect how it succeeds in the simple ones.</p>",
        "id": 237137307,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1620035504
    },
    {
        "content": "<p>My suggestion: rewrite it to <code>4^((3:nat):real)</code> with norm_cast, use a lemma to turn it into <code>4^(3:nat)</code> and then norm_num</p>",
        "id": 237137520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620035641
    },
    {
        "content": "<p>I've found some lemma which lift the first argument of pow, like <code>nat.cast_pow</code>, but I didn't find what I need that can lift the exponent.</p>",
        "id": 237145206,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1620040270
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.rpow_nat_cast\">docs#real.rpow_nat_cast</a></p>",
        "id": 237145416,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1620040398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.2064.20.3D.20.284.3A.E2.84.9D.29.20.5E.20.283.3A.E2.84.9D.29/near/237145416\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.rpow_nat_cast\">docs#real.rpow_nat_cast</a></p>\n</blockquote>\n<p>Thank you! <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>,  that saved my day. I managed to finish this proof by following the hint.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">real.rpow_nat_cast</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237145728,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1620040572
    },
    {
        "content": "<p>This is a nice opportunity to use <code>calc</code> blocks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">real.rpow_nat_cast</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span>\n</code></pre></div>",
        "id": 237178794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620055159
    }
]