[
    {
        "content": "<p>I'm trying to prove {a,b} = {b,a}, (as an exercise in being able to handle using bracket notation for finite sets within lean). Unfortunately I've reached a wall and can't find any help online- any help greatly appreciated!</p>",
        "id": 272081756,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644996875
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">mwe</a>?</p>",
        "id": 272081878,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644996977
    },
    {
        "content": "<p>I'm not sure the bracket notation works for finsets, though I'm not sure why.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>At the notation, it gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">34</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_insert</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 272082049,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644997159
    },
    {
        "content": "<p>@Kyle Thanks for the suggestion - This is the sort of template I'd like to be filled in:</p>\n<p>variable {U : Type}<br>\nconstant A : set U<br>\nconstants a b : U </p>\n<p>axiom ax2 : {a,b} = A</p>\n<p>lemma l5 : {a,b} = {b,a} := <br>\nbegin <br>\n  sorry <br>\nend</p>",
        "id": 272082172,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644997278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> the above is my mwe</p>",
        "id": 272082311,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644997404
    },
    {
        "content": "<p>(PS i'm very new!)</p>",
        "id": 272082377,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644997448
    },
    {
        "content": "<p>just struggling with bracket notations for sets; cant find much online, although basic proofs in propositional and predicate calculus have been fine (and there is a lot of documentation about the latter online - but seemingly not for sets)</p>",
        "id": 272082431,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644997513
    },
    {
        "content": "<p>Well, if you look at the definition of finset, it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nodup</span> <span class=\"o\">:</span> <span class=\"n\">nodup</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This tells you that a finset consists of <em>two</em> gadgets: a <em>multiset</em> and a proof that there are no duplicates. Are you aware of this?</p>",
        "id": 272082540,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644997595
    },
    {
        "content": "<p>If you want to practice with sets, I would advise that you do not start with finsets. Unlike \"usual\" math, finite sets in Lean are not an easy version of general sets.</p>",
        "id": 272082604,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644997668
    },
    {
        "content": "<p>Thanks, I'd like to revise my above question to that of just sets, and ignore finsets for the time being</p>",
        "id": 272082698,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644997745
    },
    {
        "content": "<p>so something like the below is working better (revising kyle's code):</p>\n<p>example {α : Type*} {a b : α} : ({a, b} : set α) = ({b, a} : set α) :=<br>\nbegin</p>\n<p>end</p>",
        "id": 272082721,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644997789
    },
    {
        "content": "<p>(PS no i'm not aware of that technicality about finsets and multisets - as i mentioned i'm v new; i've just done proofs in predicate and propositional logic so far <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 272082833,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644997886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Finset.20question/near/272082049\">said</a>:</p>\n<blockquote>\n<p>I'm not sure the bracket notation works for finsets, though I'm not sure why.</p>\n</blockquote>\n<p>You need <code>decidable_eq A</code></p>",
        "id": 272082923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644997949
    },
    {
        "content": "<p>So the goal is to prove the above identity. I presume I need some tactics and a library, and (preferably) an illustration of something like the proof or some ideas</p>",
        "id": 272082935,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644997958
    },
    {
        "content": "<p>and the original question should be solvable by <code>simp</code></p>",
        "id": 272082959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644997985
    },
    {
        "content": "<p>i'd like to try and prove it as manually as possible (so for the moment i'd like to leave tactics like simp aside if i can)</p>",
        "id": 272083059,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644998056
    },
    {
        "content": "<p>the underlying theorem is something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.insert_comm\">docs#finset.insert_comm</a></p>",
        "id": 272083096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644998081
    },
    {
        "content": "<p>which the docs helpfully redirect to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.insert_singleton_comm\">docs#finset.insert_singleton_comm</a></p>",
        "id": 272083126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644998107
    },
    {
        "content": "<p>Sure,  this is not a problem! One thing you might want is some result telling that if some conditions are met, then two sets are equal. So you might start your proof with <code>apply set.eq_of</code> and then look at what VS code does. It will show a list of all results starting with this name, and this can give you an idea on which to pick.</p>",
        "id": 272083154,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644998135
    },
    {
        "content": "<p>If you are wondering how to prove something like that, the standard approach is to apply <code>finset.ext</code> and <code>simp</code> to turn it into <code>x = a \\/ x = b &lt;-&gt; x = b \\/ x = a</code> which is basic propositional logic</p>",
        "id": 272083179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644998162
    },
    {
        "content": "<p>the <code>simp</code> in this case is doing the dirty work of rewriting <code>x \\in insert a s &lt;-&gt; x = a \\/ x \\in s</code> and <code>x \\in singleton b &lt;-&gt; x = b</code></p>",
        "id": 272083262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644998221
    },
    {
        "content": "<p>That's v helpful - thanks! I guess I'm struggling with the language of how and where I can use bracket notation if anything, so if i work through this example it should help.</p>",
        "id": 272083281,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644998247
    },
    {
        "content": "<p>here's that proof spelled out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or.comm</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272083349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644998288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Finset.20question/near/272082604\">said</a>:</p>\n<blockquote>\n<p>If you want to practice with sets, I would advise that you do not start with finsets. Unlike \"usual\" math, finite sets in Lean are not an easy version of general sets.</p>\n</blockquote>\n<p>That's only true if you attempt to use the definition directly. If you make use of the API, especially <code>finset.ext</code> and the simp lemmas, you get an experience very similar to working with general sets</p>",
        "id": 272083419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644998373
    },
    {
        "content": "<p>Great! Thanks guys - i'll now try and extend <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's proof for the case of {a,b,c} = {c,b,a} by myself to practice <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 272083521,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644998420
    },
    {
        "content": "<p>just for comparison, here's the same proof over <code>set</code> instead of <code>finset</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or.comm</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272083588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644998471
    },
    {
        "content": "<p>there appears to be some inconsistency in the use of <code>_iff</code> suffixes but otherwise it's exactly the same</p>",
        "id": 272083616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644998496
    },
    {
        "content": "<p>you can also replace the first two lines with <code>ext x,</code> which works on both <code>set</code> and <code>finset</code></p>",
        "id": 272083714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644998557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Finset.20question/near/272083588\">said</a>:</p>\n<blockquote>\n<p>just for comparison, here's the same proof over <code>set</code> instead of <code>finset</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or.comm</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ah that's what i'm after I think</p>",
        "id": 272083721,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644998563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477899\">David Landsberg</span> has marked this topic as resolved.</p>",
        "id": 272083912,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644998720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I noticed that we had <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_Union\">docs#set.mem_Union</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_bUnion_iff\">docs#set.mem_bUnion_iff</a> . Do we care about these inconsistencies?</p>",
        "id": 272084461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644999100
    },
    {
        "content": "<p>Well yes, although I'm sure there is bikeshedding to be had</p>",
        "id": 272084546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644999151
    },
    {
        "content": "<p>I would prefer the version without the _iff</p>",
        "id": 272084554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644999162
    },
    {
        "content": "<p>Erm apparently I'm wrong anyway? I could have sworn this happened to me yesterday</p>",
        "id": 272084558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644999166
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_insert_iff\">docs#set.mem_insert_iff</a> is probably a better choice to make the point</p>",
        "id": 272084601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644999209
    },
    {
        "content": "<p>some of this inconsistency is because these lemmas predate me and the naming sense I imposed on the library in the early stages</p>",
        "id": 272084713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644999277
    },
    {
        "content": "<p>in particular one thing I pushed hard for was more iff statements instead of one-way lemmas</p>",
        "id": 272084794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644999353
    },
    {
        "content": "<p>in a lot of cases the iff statements didn't even exist so when they were added they got the longer name</p>",
        "id": 272084860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644999386
    },
    {
        "content": "<p>By the way, the code examples you post in Zulip will be easier to read if you surround them in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 272102633,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1645010271
    },
    {
        "content": "<p>... I was wondering how to do that <span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> Thanks </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">variables</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l4</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">t1</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">s1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">set.ext</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">or.comm</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272102905,
        "sender_full_name": "David Landsberg",
        "timestamp": 1645010407
    },
    {
        "content": "<p>you have too many <code>:</code> in the lemma statement</p>",
        "id": 272106135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645012592
    },
    {
        "content": "<p>drop the one after <code>l4</code></p>",
        "id": 272106151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645012606
    },
    {
        "content": "<p>generally, you should always be able to replace <code>example</code> with <code>lemma thm_name</code> (not <code>lemma thm_name:</code>!) without issue</p>",
        "id": 272106226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645012657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Finset.20question/near/272106226\">said</a>:</p>\n<blockquote>\n<p>generally, you should always be able to replace <code>example</code> with <code>lemma thm_name</code> (not <code>lemma thm_name:</code>!) without issue</p>\n</blockquote>\n<p>Thanks again Mario. Can't stress enough how valuable advice like this is - you've saved me yet another hour of grinding!</p>",
        "id": 272106951,
        "sender_full_name": "David Landsberg",
        "timestamp": 1645013078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477899\">David Landsberg</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Finset.20question/near/272106951\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Finset.20question/near/272106226\">said</a>:</p>\n<blockquote>\n<p>generally, you should always be able to replace <code>example</code> with <code>lemma thm_name</code> (not <code>lemma thm_name:</code>!) without issue</p>\n</blockquote>\n<p>Thanks again Mario. Can't stress enough how valuable advice like this is - you've saved me yet another hour of grinding!</p>\n</blockquote>\n<p>Seems like this might be a counter-example however - I get errors for the lemma, but not the example </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l9</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">t1</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">s1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or.comm</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">t1</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">s1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or.comm</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272107241,
        "sender_full_name": "David Landsberg",
        "timestamp": 1645013279
    },
    {
        "content": "<p>But I guess the answer is I need to be more precise with my typing - perhaps the interpreter was being more charitable for my examples than my lemmas!</p>",
        "id": 272107367,
        "sender_full_name": "David Landsberg",
        "timestamp": 1645013368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477899\">David Landsberg</span> has marked this topic as resolved.</p>",
        "id": 272107531,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645013482
    },
    {
        "content": "<p>Indeed, I lied, and I was wondering how long it would take you to run across the counterexample - it turns out not long at all. The short answer is that <code>example</code> and <code>def</code> allow the body of the def to influence elaboration of the type, while <code>lemma</code> and <code>theorem</code> do not, with the idea that proofs of <code>lemma</code>s can be elaborated asynchronously, since we only need the statement of the lemma for later theorems. If the body / proof of a lemma could influence the statement, then we would not be able to skip proofs.</p>",
        "id": 272113796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645017447
    },
    {
        "content": "<p><code>example</code>s are also elaborated asynchronously, unlike <code>def</code>; this is okay for <code>example</code> because we cannot refer to the constructed definition after the fact</p>",
        "id": 272113968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645017542
    }
]