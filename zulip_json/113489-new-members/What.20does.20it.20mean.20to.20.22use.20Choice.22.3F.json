[
    {
        "content": "<p>In maths, we are often given a surjection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo>:</mo><mi>α</mi><mo>→</mo><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\pi : \\alpha \\to \\beta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>α</mi><mo>→</mo><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">f : \\alpha \\to \\gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> which preserves preimages of elements in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span> and want to lift <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> to a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>:</mo><mi>β</mi><mo>→</mo><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">g : \\beta \\to \\gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span></span></span></span>. I've written what I believe is a faithful representation of the \"mathematical argument\" in Lean : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">quotient_exists_lift</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hπ</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"n\">π</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">π</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">hπ</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">hπ</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">hπ</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>My questions are : </p>\n<ol>\n<li>I have used <code>classical.some</code> in the proof, so does this count as having \"used choice\" as we say it in maths? </li>\n<li>The second part of the constructor corresponds in the \"mathematical argument\" to checking the function is well-defined and \"independent of choice of representative\". Does this mean I have \"not used choice\" or is this just a coincidence in the language?</li>\n<li>I understand that using <code>classical.choice</code> or any of its corollaries means I have to mark my theorems <code>noncomputable</code>. Is the reverse true and how is this related to when we have \"used choice\" in maths? In particular, since Lean did not complain that the above theorem is noncomputable, does it mean I have \"not used choice\"?</li>\n</ol>",
        "id": 201295239,
        "sender_full_name": "Ken Lee",
        "timestamp": 1592498891
    },
    {
        "content": "<p><code>definition</code> and <code>theorem</code> are treated differently here, I think.</p>",
        "id": 201295521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592499013
    },
    {
        "content": "<ol>\n<li>Yes. You can do <code>#print axioms quotient_exists_lift</code> to see</li>\n</ol>",
        "id": 201295543,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592499026
    },
    {
        "content": "<p>If you <code>#print axioms quotient_exists_lift</code> -- nvm <del>Bryan</del> Bhavik's faster</p>",
        "id": 201295552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592499028
    },
    {
        "content": "<p>So fast that I got <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> to post in my stead!</p>",
        "id": 201295787,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592499137
    },
    {
        "content": "<ol start=\"2\">\n<li>The second part of the constructor corresponds to showing that you've got an actual lift of f, rather than just any function <code>beta -&gt; gamma</code></li>\n</ol>",
        "id": 201295795,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592499140
    },
    {
        "content": "<p>Oops, sorry Bhavik...</p>",
        "id": 201295947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592499210
    },
    {
        "content": "<p>No worries!</p>",
        "id": 201296001,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592499240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20does.20it.20mean.20to.20.22use.20Choice.22.3F/near/201295543\">said</a>:</p>\n<blockquote>\n<ol>\n<li>Yes. You can do <code>#print axioms quotient_exists_lift</code> to see</li>\n</ol>\n</blockquote>\n<p>I know that I have used <code>classical.choice</code>. What I meant to ask was whether this is exactly what we mean by \"using choice\" in maths. Sorry I should've worded this better.</p>",
        "id": 201296516,
        "sender_full_name": "Ken Lee",
        "timestamp": 1592499442
    },
    {
        "content": "<p>It depends on your exact foundational setup and interpretation of Prop, quantifiers etc.</p>",
        "id": 201296766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592499533
    },
    {
        "content": "<p>If you replace the existential quantifier in <code>hπ</code> and the conclusion by <code>trunc</code>, then you can prove this without axioms. But in classical foundations you can't distinguish between existential quantification and <code>trunc</code>.</p>",
        "id": 201297816,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592499985
    },
    {
        "content": "<p>(\"without axioms\" = maybe still using stuff like <code>funext</code>)</p>",
        "id": 201297876,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592500020
    }
]