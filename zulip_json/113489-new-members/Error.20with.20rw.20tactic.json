[
    {
        "content": "<p>Can someone help me understand why this gives an error at <code>rw [h₀],</code>? The error states <em>rewrite tactic failed, motive is not type correct</em></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Iverson bracket -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Iverson</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">decidable</span><span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">invariant</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">[¬P] = 1 - [P]</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">not_is_one_minus</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Iverson</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i.p</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"n\">j.p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i.z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">j.z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">i.invariant</span><span class=\"o\">,</span> <span class=\"n\">j.invariant</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₀</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 253516639,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1631757417
    },
    {
        "content": "<p>The <code>ite</code> in your <code>Iverson</code> definition contains a reference to the <code>decidable</code> field, as in <code>z = @ite p decidable 1 0</code>. After the rewrites, <code>i.z</code> becomes <code>@ite i.p i.decidable 1 0</code>, and then you try to rewrite with <code>h0</code> to get <code>@ite (not j.p) i.decidable 1 0</code>. But this doesn't work because <code>i.decidable</code> is a proof that <code>i.p</code> is decidable, not that <code>not j.p</code> is</p>",
        "id": 253518194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631758623
    },
    {
        "content": "<p>One way you can fix this is to instead rewrite with <code>rw [show ite i.p 1 0 = ite (not j.p) 1 0, by congr; exact h0]</code></p>",
        "id": 253518301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631758691
    },
    {
        "content": "<p>thanks! but after I replace that rewrite, I get a new error, <em>failed to synthesize type class instance</em></p>",
        "id": 253519095,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1631759301
    },
    {
        "content": "<p>which one?</p>",
        "id": 253519206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631759403
    },
    {
        "content": "<p>the line after that is the important one</p>",
        "id": 253519220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631759413
    },
    {
        "content": "<p>actually it's probably <code>j.p</code>; you need to mark <code>Iverson.decidable</code> as an instance using <code>attribute [instance] Iverson.decidable</code></p>",
        "id": 253519253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631759458
    },
    {
        "content": "<p>this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_is_one_minus</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Iverson</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i.p</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"n\">j.p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i.z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">j.z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">i.invariant</span><span class=\"o\">,</span> <span class=\"n\">j.invariant</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">ite</span> <span class=\"n\">i.p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"bp\">¬</span><span class=\"n\">j.p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h0</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>gives this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Iverson</span><span class=\"o\">,</span>\n<span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">i.p</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"n\">j.p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span> <span class=\"n\">i.p</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Iverson</span><span class=\"o\">,</span>\n<span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">i.p</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"n\">j.p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ite</span> <span class=\"n\">i.p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">ite</span> <span class=\"n\">j.p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 253519276,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1631759478
    },
    {
        "content": "<p>the important bit is <code>⊢ decidable i.p</code>, it doesn't know how to prove this because <code>i.decidable</code> isn't an instance</p>",
        "id": 253519363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631759550
    },
    {
        "content": "<p>after adding <code>attribute [instance] Iverson.decidable</code> I get a new error at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">i.p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">j.p</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₀</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>which says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">ite</span> <span class=\"n\">i.p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Iverson</span><span class=\"o\">,</span>\n<span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">i.p</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"n\">j.p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ite</span> <span class=\"n\">i.p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">ite</span> <span class=\"n\">j.p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 253519627,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1631759795
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 253520589,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631760633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> what I have with Mario's feedback is this, plus I had vscode paste the error back into the place where it was raised. I'm not sure how to make this more minimal, but what I want to achieve is to form a proof of some properties of \"Iverson brackets\" &lt;<a href=\"https://en.wikipedia.org/wiki/Iverson_bracket#Properties\">https://en.wikipedia.org/wiki/Iverson_bracket#Properties</a>&gt; starting with <code>[¬P] = 1 - [P]</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Iverson bracket -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Iverson</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">decidable</span><span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">invariant</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Iverson.decidable</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">[¬P] = 1 - [P]</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">not_is_one_minus</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Iverson</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i.p</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"n\">j.p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i.z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">j.z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">i.invariant</span><span class=\"o\">,</span> <span class=\"n\">j.invariant</span><span class=\"o\">],</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  rewrite tactic failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">    ite i.p 1 0</span>\n<span class=\"cm\">  state:</span>\n<span class=\"cm\">  i j : Iverson,</span>\n<span class=\"cm\">  h₀ : i.p = ¬j.p</span>\n<span class=\"cm\">  ⊢ ite i.p 1 0 = 1 - ite j.p 1 0</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">i.p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">j.p</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₀</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 253521824,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1631761696
    },
    {
        "content": "<p>I've managed to do <em>something like</em> the above with <code>bool</code> as the type of the dependent variable, but I'm having a hard time doing this with <code>Prop</code> and <code>decidable</code></p>",
        "id": 253521985,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1631761827
    },
    {
        "content": "<p>Thanks. (Just didn't want to have to read the thread above to patch Mario's suggestion into your code myself. :-)</p>",
        "id": 253522020,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631761874
    },
    {
        "content": "<p>If you add <code>set_option pp.all true</code> above the lemma you'll see immediately the problem.</p>",
        "id": 253522024,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631761884
    }
]