[
    {
        "content": "<p>Hi everyone!</p>\n<p>I've been playing around with Lean a bit and want to prove some simple (old) stuff about Scott continuous functions on sequences. After some digging around mathlib I found some very nice definitions of the Scott topology already and <code>order.omega_complete_partial_order</code>. The instances of <code>omega_complete_partial_order</code> honestly did confuse me a bit, and after struggling to understand what <code>roption.seq</code> is supposed to be, I decided it would be a nice exercise to prove that <code>seq \\a</code> for some type <code>\\a</code> is an omega complete partial order (with respect to prefixes). I'm struggling with even defining prefixes on <code>seq</code>. What I would need to do is separate by cases for an infinite sequence and a finite one (which gives me a <code>list</code>). There is a function <code>seq.to_list_or_stream</code> that maps to the sum type of list and stream, but I cannot figure out how to do a pattern matching on the this sum type for defining prefixes on <code>seq</code>. </p>\n<p>The other option I thought of was to define finite sequences and then infinite sequences (as not finite ones), and go from there. I think I have a decent definition of a finite sequence: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">seq.finite</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">seq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.1</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>The only step I can think of from here is to do four definitions of prefix, for both finite, both infinite and  the two cases where one is infinite and one is not, and then finally one for the general case where I would combine these four somehow by cases. This sounds like it might work if I dig around enough to understand how to construct this four cases but it seems kind of the wrong way of doing things. Also,  I guess to do the four cases should require the same type of definition by cases that I need for the sum data type that I get from <code>seq.to_list_or_stream</code>. </p>\n<p>Or perhaps I'm going down the wrong path with <code>seq</code>? Should I define sequences differently for proving things with them this way? I thought I might ask this here before I go too far astray. </p>\n<p>Thanks!</p>",
        "id": 219014987,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1607287772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 219016294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1607288171
    },
    {
        "content": "<p>What does prefix mean here?</p>",
        "id": 219016484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607288235
    },
    {
        "content": "<p>Oh these are potentially infinite lists</p>",
        "id": 219016673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607288287
    },
    {
        "content": "<p>Instead of defining by cases, you can just describe it elementwise. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">seq.prefix</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">seq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s.val</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">t.val</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 219017079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607288413
    },
    {
        "content": "<p>this formulation makes a lot of theorems easy to prove</p>",
        "id": 219017135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607288433
    },
    {
        "content": "<p><code>seq</code> works best when you deal with the finite and infinite cases uniformly</p>",
        "id": 219017246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607288469
    },
    {
        "content": "<p>fyi <code>seq.finite</code> is called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/seq.terminates/src\">src#seq.terminates</a> in mathlib</p>",
        "id": 219017462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607288533
    },
    {
        "content": "<p>that makes a lot of sense! thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 219018889,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1607289048
    }
]