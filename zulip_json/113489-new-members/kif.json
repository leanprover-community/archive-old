[
    {
        "content": "<p>I am playing with SUMO ontology (<a href=\"http://ontologyportal.org\" target=\"_blank\" title=\"http://ontologyportal.org\">http://ontologyportal.org</a> ) trying to understand its semantics and possible translation to dependent types.</p>",
        "id": 168720571,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1561154713
    },
    {
        "content": "<p>one of the language features is the use of row variables (a way to deal with variable arity). So a variable with an @, in the beginning, means a placeholder to one or more arguments. The axiom below, use <code>ListFn</code> (constructor of lists given any number of arguments, the equivalent of Common Lisp <code>list</code> function) and <code>inList</code> to check if an item is an element of the list. How to translate it to Lean?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"nv\">=&gt;</span>\n   <span class=\"p\">(</span><span class=\"nv\">exhaustiveDecomposition</span> <span class=\"nv\">?CLASS</span> <span class=\"nv\">@ROW</span><span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"nv\">forall</span> <span class=\"p\">(</span><span class=\"nv\">?OBJ</span><span class=\"p\">)</span>\n       <span class=\"p\">(</span><span class=\"nv\">=&gt;</span>\n           <span class=\"p\">(</span><span class=\"nv\">instance</span> <span class=\"nv\">?OBJ</span> <span class=\"nv\">?CLASS</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"nv\">exists</span> <span class=\"p\">(</span><span class=\"nv\">?ITEM</span><span class=\"p\">)</span>\n               <span class=\"p\">(</span><span class=\"nb\">and</span>\n                   <span class=\"p\">(</span><span class=\"nv\">inList</span> <span class=\"nv\">?ITEM</span> <span class=\"p\">(</span><span class=\"nv\">ListFn</span> <span class=\"nv\">@ROW</span><span class=\"p\">))</span>\n                   <span class=\"p\">(</span><span class=\"nv\">instance</span> <span class=\"nv\">?OBJ</span> <span class=\"nv\">?ITEM</span><span class=\"p\">))))))</span>\n</pre></div>",
        "id": 168720760,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1561154886
    },
    {
        "content": "<p>The SUMO guy (Adam Pease) spoke at AITP this year: <a href=\"http://aitp-conference.org/2019/slides/AP.pdf\" target=\"_blank\" title=\"http://aitp-conference.org/2019/slides/AP.pdf\">aitp-conference.org/2019/slides/AP.pdf</a></p>",
        "id": 168720776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561154920
    },
    {
        "content": "<p>yep! I am planning to work with him in the formalization of the translation from SUMO to TF0.</p>",
        "id": 168720793,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1561154961
    },
    {
        "content": "<p>What do you mean by  \"translate it to Lean\" exactly?</p>",
        "id": 168722263,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561156543
    },
    {
        "content": "<p>Good question. I am still thinking about the details, but I am trying something like:</p>\n<p>R. Dapoigny and P. Barlatier, “Formalizing Context for Domain Ontologies in Coq,”, May 2014.</p>\n<p>All axioms could be encoded as variables, right? For example, the SUMO axiom (simplified):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"nv\">&lt;=&gt;</span>\n    <span class=\"p\">(</span><span class=\"nv\">partition</span> <span class=\"nv\">?class</span> <span class=\"nv\">?x</span> <span class=\"nv\">?y</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">and</span>\n        <span class=\"p\">(</span><span class=\"nv\">exhaustiveDecomposition</span> <span class=\"nv\">?class</span> <span class=\"nv\">?x</span> <span class=\"nv\">?y</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nv\">disjointDecomposition</span> <span class=\"nv\">?class</span> <span class=\"nv\">?x</span> <span class=\"nv\">?y</span><span class=\"p\">)))</span>\n</pre></div>\n\n\n<p>could be encoded as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">Class</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">constants</span> <span class=\"n\">partition</span> <span class=\"n\">exhaustiveDecomposition</span> <span class=\"n\">disjointDecomposition</span> <span class=\"o\">:</span>\n <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"n\">Class</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">AxPartition</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">,</span>\n <span class=\"n\">partition</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">↔</span> <span class=\"n\">exhaustiveDecomposition</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">disjointDecomposition</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n</pre></div>\n\n\n<p>Does it make sense?</p>",
        "id": 168733368,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1561173056
    }
]