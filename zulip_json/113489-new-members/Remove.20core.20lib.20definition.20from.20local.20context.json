[
    {
        "content": "<p>Hi,</p>\n<p>is it possible to remove a definition from the core lib from the local context?</p>\n<p>To be precise, I find the <code>def not (a : Prop) := a → false</code> definition unpleasant.<br>\nI would prefer to define <code>constant not : Prop → Prop</code> and define an axiom<br>\n<code>axiom not.intro {A : Prop} : (A → false) → ¬A</code></p>\n<p>Is that possible? Are there obvious drawbacks? I do not require mathlib or anything else beyond the core lib... (at least I think so :-D)</p>\n<p>Kind regards,<br>\nMichael</p>",
        "id": 295375331,
        "sender_full_name": "Michael Palm",
        "timestamp": 1661502287
    },
    {
        "content": "<p>I suspect getting used to it will be the more productive approach</p>",
        "id": 295375971,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1661502606
    },
    {
        "content": "<p>You can start your file with a line </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n</code></pre></div>\n<p>which will hide the definitions from the core lib.</p>",
        "id": 295376562,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1661502902
    },
    {
        "content": "<p>Regarding the <code>not</code>, you will also need an <code>not.elim {A B : Prop} : ¬A → A → B</code>.</p>",
        "id": 295376774,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1661502994
    },
    {
        "content": "<p>I know <code>prelude</code>. But it also prevents all other import of the Init scripts. This makes tactics unusable.</p>",
        "id": 295400584,
        "sender_full_name": "Michael Palm",
        "timestamp": 1661512505
    },
    {
        "content": "<p>Let's say you removed a core def. How would you like all of the parts of core that used the def to now work?</p>",
        "id": 295412160,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1661516740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/113489-new-members/topic/Remove.20core.20lib.20definition.20from.20local.20context/near/295376774\">said</a>:</p>\n<blockquote>\n<p>Regarding the <code>not</code>, you will also need an <code>not.elim {A B : Prop} : ¬A → A → B</code>.</p>\n</blockquote>\n<p>Actually, Michael would rather need <code>not.elim {A : Prop} {B : Sort*} : ¬A → A → B</code>.</p>",
        "id": 295413452,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661517164
    },
    {
        "content": "<p>Would the following work for you, Michael?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">my_not</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">intro</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">elim'</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">false</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>rather than using axioms?</p>",
        "id": 295414623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661517605
    },
    {
        "content": "<p>Instead of <em>removing</em> <code>not</code>, why not just define <code>not'</code>? (e.g. the way Eric defined it)</p>",
        "id": 295564972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661590652
    }
]