[
    {
        "content": "<p>Here's something where a very slight extension of <code>abel</code> to groups with 0 would do the trick</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span>\n<span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197753397,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589577346
    },
    {
        "content": "<p>Try <code>field_simp [ha, hb, hc], ring</code></p>",
        "id": 197753822,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589577592
    },
    {
        "content": "<p>beautiful</p>",
        "id": 197753898,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589577622
    },
    {
        "content": "<p>It has got to the point where you have to know what you're doing to solve this sort of thing</p>",
        "id": 197753932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589577651
    },
    {
        "content": "<p>there are different little tricks for different situations</p>",
        "id": 197753955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589577666
    },
    {
        "content": "<p>should I be doing things like \"read the implementation of relevant tactics\" to come up with these ideas on my own?</p>",
        "id": 197754079,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589577725
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 197754093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589577737
    },
    {
        "content": "<p>okay good that doesn't sound fun</p>",
        "id": 197754105,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589577744
    },
    {
        "content": "<p>It would only be a slight exaggeration to say that I have never read a line of meta code in my life</p>",
        "id": 197754131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589577767
    },
    {
        "content": "<p>It's still a bit unwieldy, but you can filter <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">the tactic docs</a> by tag.</p>",
        "id": 197754175,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589577796
    },
    {
        "content": "<p>I do just what you're doing -- I post problems I can't solve with the skillset I have, someone points out a new tactic which I hadn't fully understood before, I read the docstring, and then I feel like I've levelled up.</p>",
        "id": 197754207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589577818
    },
    {
        "content": "<p>In this case, <code>field_simp</code> is the 3rd thing that appears when you select \"simplification\".</p>",
        "id": 197754226,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589577833
    },
    {
        "content": "<p>For over a year I've known that <code>ring</code> does things without any division and when there is division you have to manually clear the denominators. Then someone wrote a \"clear denominators\" tactic and because I had done it manually so many times I eagerly added it to my skillset.</p>",
        "id": 197754325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589577885
    },
    {
        "content": "<p>and the clear denominators tactic is exactly field_simp passed with lemmas for each of your denominators being nonzero?</p>",
        "id": 197754381,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589577931
    },
    {
        "content": "<p>The real power of <code>field_simp</code> is that you can give it the parameters such as <code>ha</code>. Your question was made for <code>field_simp</code> really. A year ago it would have been far more tedious to solve.</p>",
        "id": 197754388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589577938
    },
    {
        "content": "<p>mathematically this feels the same as <code>lift</code>ing them all to <code>units ℚ</code> and then using <code>abel</code></p>",
        "id": 197754474,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589577985
    },
    {
        "content": "<p>In your example yes, but there could have been additions and Sebastien's proof would still have worked</p>",
        "id": 197754622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589578086
    },
    {
        "content": "<p>apparently you can't literally do it with <code>abel</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">group_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">can_lift</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">prf</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span>\n<span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">exists_iff_ne_zero</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span>\n<span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">lift</span> <span class=\"n\">a</span> <span class=\"n\">to</span> <span class=\"n\">units</span> <span class=\"n\">ℚ</span> <span class=\"kn\">using</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"n\">lift</span> <span class=\"n\">b</span> <span class=\"n\">to</span> <span class=\"n\">units</span> <span class=\"n\">ℚ</span> <span class=\"kn\">using</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n<span class=\"n\">lift</span> <span class=\"n\">c</span> <span class=\"n\">to</span> <span class=\"n\">units</span> <span class=\"n\">ℚ</span> <span class=\"kn\">using</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"n\">field_simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197755307,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589578561
    },
    {
        "content": "<p>also I learned that <code>can_lift</code> is the instance you want to prove if you're trying to make a new use of <code>lift</code>, not <code>has_lift</code></p>",
        "id": 197755377,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589578605
    },
    {
        "content": "<p>(obviously this proof is worse than field_simp with arguments, but it's helpful to me to know that this is possible / easy)</p>",
        "id": 197755411,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589578643
    },
    {
        "content": "<p>also i love that <code>lift a to units ℚ using ha</code> \"uses\" <code>ha</code> in the sense of <code>clear ha</code></p>",
        "id": 197755561,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589578757
    },
    {
        "content": "<p>It's nice to see a tactic tidying up after itself</p>",
        "id": 197755644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589578814
    },
    {
        "content": "<p>i was looking for a broom but the closest I found was <span aria-label=\"shower\" class=\"emoji emoji-1f6bf\" role=\"img\" title=\"shower\">:shower:</span></p>",
        "id": 197755798,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589578941
    },
    {
        "content": "<p>it would probably be a bad thing for most tactics to <code>tidy</code> up after themselves though</p>",
        "id": 197755825,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589578976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/arithmetic.20hell/near/197755377\">said</a>:</p>\n<blockquote>\n<p>also I learned that <code>can_lift</code> is the instance you want to prove if you're trying to make a new use of <code>lift</code>, not <code>has_lift</code></p>\n</blockquote>\n<p>Yup... <code>has_lift</code> already existed when the <code>lift</code> tactic was written by Floris.</p>",
        "id": 197775655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589602411
    }
]