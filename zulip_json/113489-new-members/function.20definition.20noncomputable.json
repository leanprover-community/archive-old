[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">value</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"n\">o1</span> <span class=\"n\">o2</span> <span class=\"n\">A</span> <span class=\"n\">T</span> <span class=\"n\">O1</span> <span class=\"n\">O2</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">T</span><span class=\"bp\">^</span><span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">O1</span><span class=\"bp\">^</span><span class=\"n\">o1</span> <span class=\"bp\">*</span> <span class=\"n\">O2</span><span class=\"bp\">^</span><span class=\"n\">o2</span> <span class=\"bp\">/</span> <span class=\"n\">N</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">o1</span> <span class=\"bp\">+</span> <span class=\"n\">o2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives  <code>definition 'value' is noncomputable, it depends on 'real.division_ring'</code></p>\n<p>Am at a loss here.</p>",
        "id": 231938043,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616752383
    },
    {
        "content": "<p>just turn <code>def</code> into <code>noncomputable def</code></p>",
        "id": 231938103,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1616752415
    },
    {
        "content": "<p>Ok have not seen that before, thanks. What does it mean, though? both the error and the modifier.</p>",
        "id": 231938181,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616752450
    },
    {
        "content": "<p>Because for naturals  it works.</p>",
        "id": 231938261,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616752493
    },
    {
        "content": "<p>My guess would be that I need to import the right stuff first but given the imports already in place I don't know what.</p>",
        "id": 231938316,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616752527
    },
    {
        "content": "<p>The short answer is: you don't want to know, just add <code>noncomputable</code>.</p>",
        "id": 231938420,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616752569
    },
    {
        "content": "<p>haha ok :D</p>",
        "id": 231938493,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616752604
    },
    {
        "content": "<p>The long answer is that Lean is also a programming language, so you might want to write functions in Lean, and then compile it to executable code on your machine. Then Lean needs to know a recipe to compute the function. But this is not possible with real numbers, so Lean complains.</p>",
        "id": 231938569,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616752654
    },
    {
        "content": "<p><code>noncomputable</code> says: I will never use this function in executable code, so I don't care.</p>",
        "id": 231938693,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616752716
    },
    {
        "content": "<p>that makes sense. Why is it not possible, though?</p>",
        "id": 231938751,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616752756
    },
    {
        "content": "<p>To divide by a real number, you need to check if it is equal to 0. But you cannot do that computably.</p>",
        "id": 231938818,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616752799
    },
    {
        "content": "<p>hm, why not?</p>",
        "id": 231938928,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616752831
    },
    {
        "content": "<p>The standard example goes something like: define a real number <code>ρ_99</code> as follows: the <code>i</code>th decimal of <code>ρ_99</code> is 1 if the <code>i .. i+99</code>th decimals of π are all 9, 0 otherwise.</p>",
        "id": 231939075,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616752898
    },
    {
        "content": "<p>Then this number is exactly equal to 0 iff π has no block of 99 nines in its decimal expansion. Since we don't know whether this block of decimals exists, you cannot know whether <code>ρ_99</code> is 0.</p>",
        "id": 231939239,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616752954
    },
    {
        "content": "<p>Computable means \"computable in finite time\" here, so just going through all the decimals of π and stopping at a block of 99 nines wouldn't work, if the block does not exist your computation would never finish.</p>",
        "id": 231939462,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616753058
    },
    {
        "content": "<p>A computer can't figure out whether the completely well-defined real number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>π</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mn>6</mn><mo>−</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow></msub><msup><mi>n</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\pi^2/6-\\sum_{n\\geq1}n^{-2}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.208997em;vertical-align:-0.39488900000000005em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139799999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.39488900000000005em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> is zero or not, it needs to be told a theorem of Euler first. Nobody knows whether the well-defined number \"sup of real parts of zeros of the zeta function\" - 1/2 is zero or not.</p>",
        "id": 231939607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616753141
    },
    {
        "content": "<p>sure sure. And I guess it is proven that we can't know the thing about π.</p>\n<p>But in any case I defined N to be nonzero...</p>",
        "id": 231939688,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616753170
    },
    {
        "content": "<p>The point is that mathematicians manipulate real numbers in a different way to computers. We do non-computable things and it's no big deal.</p>",
        "id": 231939796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616753236
    },
    {
        "content": "<p>In that case you could define a new division operator that doesn't need this check. However, in mathlib we tend not to care too much about computability, which is why the advice is to just put <code>noncomputable</code> in front of definitions where Lean asks you to.</p>",
        "id": 231939813,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616753247
    },
    {
        "content": "<p>In Lean the reals are non-computable because everyone is happy with this state of affairs</p>",
        "id": 231939853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616753269
    },
    {
        "content": "<p>alright, understood. Thanks!</p>",
        "id": 231939882,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616753282
    },
    {
        "content": "<p>I care more about computability than the average mathlib user, but I know I will not win those discussions :)</p>",
        "id": 231940104,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616753395
    },
    {
        "content": "<p>Well I guess it depends on your goals. Hard to argue about those</p>",
        "id": 231940307,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616753486
    },
    {
        "content": "<p>but even if you care about computability having noncomputable stuff can be useful, not the other way around.</p>",
        "id": 231940495,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616753584
    },
    {
        "content": "<p>Indeed! And \"computable in finite time\" does not mean \"computable before the end of the universe\", and I tend to care more about the latter than the former.</p>",
        "id": 231940694,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616753703
    },
    {
        "content": "<p>Very-low-degree-P or don't bother!</p>",
        "id": 231943363,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616755010
    },
    {
        "content": "<p>Wouldn't a physicist say the universe will last forever? Maybe you mean \"before the universe reaches a stable state\" ;)</p>",
        "id": 231943415,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616755041
    },
    {
        "content": "<p>As an inverse fundamentalist I believe by the way the universe will exist for only 6000 more years</p>",
        "id": 231943537,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616755087
    },
    {
        "content": "<p>(because fundamentalism has been disproven)</p>",
        "id": 231943592,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616755113
    },
    {
        "content": "<p>but yeah computability is definitely useful</p>",
        "id": 231943672,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616755152
    },
    {
        "content": "<p>If not for practical reasons then because it approximates them, and also because the question is there</p>",
        "id": 231943855,
        "sender_full_name": "Belisarius Cawl",
        "timestamp": 1616755222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400229\">Belisarius Cawl</span> <a href=\"#narrow/stream/113489-new-members/topic/function.20definition.20noncomputable/near/231943415\">said</a>:</p>\n<blockquote>\n<p>Wouldn't a physicist say the universe will last forever? Maybe you mean \"before the universe reaches a stable state\" ;)</p>\n</blockquote>\n<p>Well \"before the computer falls apart\" seems like a reasonable limitation</p>",
        "id": 231992539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616775559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400229\">Belisarius Cawl</span> <a href=\"#narrow/stream/113489-new-members/topic/function.20definition.20noncomputable/near/231939688\">said</a>:</p>\n<blockquote>\n<p>sure sure. And I guess it is proven that we can't know the thing about π.</p>\n</blockquote>\n<p>Actually that is not a very good example because it is decidable whether <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>π</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mn>6</mn><mo>−</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow></msub><msup><mi>n</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\pi^2/6-\\sum_{n\\geq1}n^{-2}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.208997em;vertical-align:-0.39488900000000005em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139799999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.39488900000000005em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> is zero or not: it is, thanks to a theorem of Euler. A better example is the sum of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{-n}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span> over all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> such that turing machine <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> halts in at most <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> steps, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a fixed turing machine that searches for a contradiction in lean and halts at the first proof of false. If lean is consistent then we can't prove or disprove that this real number is equal to zero</p>",
        "id": 231993200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616775822
    },
    {
        "content": "<p>If you could decide equality of real numbers, you could solve this problem, which is only possible if lean is inconsistent</p>",
        "id": 231993638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616775999
    },
    {
        "content": "<p>These arguments always make me think that I can also define a natural number that is 0 if one of those weird reals is 0 and 1 otherwise.<br>\nThis is also non-computable, right?<br>\nAren't we now in a position where we do not know if an integer is 0 or 1?</p>",
        "id": 232037507,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616795913
    },
    {
        "content": "<p>You can't write the <code>if</code> in that definition because that requires decidability too</p>",
        "id": 232039755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616797264
    },
    {
        "content": "<p>Can't I take the ceiling of those reals?  Is that also not allowed?</p>",
        "id": 232039973,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616797399
    },
    {
        "content": "<p>I'd wager that's not computable / deicdable either</p>",
        "id": 232042356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616799101
    },
    {
        "content": "<p>If you want to take <code>Sup s</code>, where <code>s</code> is a set of real numbers, then you need to be able to decide if a given number b is an upper bound for <code>s</code>.</p>",
        "id": 232043015,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616799628
    },
    {
        "content": "<p>(And you need to find out if your set is bounded from above).</p>",
        "id": 232043120,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616799675
    },
    {
        "content": "<p>You can't take the ceiling of the absolute value of the value at 1 of the second derivative of your favourite algebraic rank 4 elliptic curve over Q because even though it's 0.000000000000000 to 1000 decimal places we don't have the tools to prove that it's 0.</p>",
        "id": 232049808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616805466
    },
    {
        "content": "<p>Damiano raises an interesting question, I think: what is it about the reals that this sort of argument is relying on, that's missing from the integers (or naturals)?</p>\n<p>I don't understand this area well enough to put my finger on an answer, but one thing I notice in Mario's example:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/function.20definition.20noncomputable/near/231993200\">said</a>:</p>\n<blockquote>\n<p>the sum of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{-n}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span> over all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> such that turing machine <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> halts in at most <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> steps, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a fixed turing machine that searches for a contradiction in lean and halts at the first proof of false. If lean is consistent then we can't prove or disprove that this real number is equal to zero</p>\n</blockquote>\n<p>is that we <em>can</em> decide whether this real is different from 0 by more than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\"> \\delta </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>, for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\"> \\delta &gt; 0 </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. I have a feeling that's not a coincidence.</p>",
        "id": 232050257,
        "sender_full_name": "Greg Price",
        "timestamp": 1616805932
    },
    {
        "content": "<p>The reals are uncountable, the naturals are countable.</p>",
        "id": 232050282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616805954
    },
    {
        "content": "<p>The example I gave (a value of a function which is conjectured (by Birch and Swinnerton-Dyer) to be zero but which we can't right now prove is zero) is the same -- you can evaluate it to as many decimal places as you like, you just get more zeros, thus giving you more and more accuracy, but no algorithm.</p>",
        "id": 232050496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616806114
    },
    {
        "content": "<p>Hmm interesting, and I guess pinning the value of the given real down to within <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\"> \\delta </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> amounts to pinning it down into one of countably many possibilities, which is compatible with that explanation.</p>",
        "id": 232050499,
        "sender_full_name": "Greg Price",
        "timestamp": 1616806116
    },
    {
        "content": "<p>How is it that the examples are using the reals' uncountability?</p>",
        "id": 232050641,
        "sender_full_name": "Greg Price",
        "timestamp": 1616806246
    },
    {
        "content": "<p>If you can constructively biject a set with the naturals then you have an algorithm to decide equality, because the naturals have decidable equality.</p>",
        "id": 232050964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616806613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"397997\">@Greg Price</span> The fact that you can approximate equality up to any fixed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> reflects the fact that the reals have a computable countable basis</p>",
        "id": 232061445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616817943
    },
    {
        "content": "<p>While I'm not sure there is a direct relationship between uncountability and undecidability, there is a very strong analogy between Cantor's diagonal proof of the uncountability of the reals, and Turing's diagonal proof of the undecidability of the halting problem</p>",
        "id": 232061784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616818246
    },
    {
        "content": "<p>Here's one way to formalize the claim about uncountable sets: Suppose an algorithm is given elements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x,y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> in an uncountable set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, and it is permitted to ask questions of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>A</mi><mo stretchy=\"false\">?</mo></mrow><annotation encoding=\"application/x-tex\">x\\in A?</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">?</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>∈</mo><mi>A</mi><mo stretchy=\"false\">?</mo></mrow><annotation encoding=\"application/x-tex\">y\\in A?</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">?</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is some subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> which may depend on all previous queries. (So for example if it queries bits then these sets are simple combinations of sets of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mi>n</mi></msup><mo separator=\"true\">,</mo><mi>b</mi><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[a/2^n,b/2^n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.) The task is to determine if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x=y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>. This can be seen as an infinite decision tree, where the nodes are points in the progress of the algorithm after asking some questions about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x,y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>The entire decision tree is countable (the nodes, not the branches), since it is a subset of the complete infinite binary tree. Every answer must be delivered in finite time and so there are a finite number of yes answers, points in the decision tree where the program says that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x=y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>. But the diagonal itself is uncountable, so there must be two distinct points <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x,y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> such that the program says <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x=x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y=y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> using exactly the same queries from start to end. But then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> are indistinguishable to the algorithm, so it will also answer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x=y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>, a contradiction.</p>\n<p>Thus no uncountable set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> can have a decision procedure for equality.</p>",
        "id": 232062855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616819539
    },
    {
        "content": "<p>That makes a lot of sense, thanks!</p>",
        "id": 232064771,
        "sender_full_name": "Greg Price",
        "timestamp": 1616821730
    },
    {
        "content": "<p>Thank you all for the explanations!</p>\n<p>I find these decidability issues quite confusing.  I am going to propose a further doubt that I have, in case you have not had enough of this thread!</p>\n<p>Suppose that an oracle tells me that <code>P</code> is a proposition about the natural numbers and they tell me that it is algorithmically undecidable to find a counterexample to <code>P</code>.  I define a natural number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mi>P</mi></msub></mrow><annotation encoding=\"application/x-tex\">n_P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to be</p>\n<ul>\n<li>0, if <code>P</code> has no counterexample;</li>\n<li>1, otherwise.</li>\n</ul>\n<p>As a mathematician, I would say that the value of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mi>P</mi></msub></mrow><annotation encoding=\"application/x-tex\">n_P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is zero and move on with my life.  However, with my abismal knowledge of computability, I would think that this natural number is non-computable.</p>\n<p>Where is the fallacy in this argument?</p>",
        "id": 232067296,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616824894
    },
    {
        "content": "<p>The natural number is noncomputable. The issue is that while natural numbers have decidable equality, this only means that given two <em>values</em> (i.e. numerals) of type <code>nat</code> we can determine in finite time if they are equal, and it extends to <em>computable terms</em> of type <code>nat</code>. The term you have given is of the form <code>if P then 1 else 0</code> where <code>P</code> is not a decidable proposition, so it is not possible to compute the term that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mi>P</mi></msub></mrow><annotation encoding=\"application/x-tex\">n_P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> denotes.</p>",
        "id": 232068186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616825831
    },
    {
        "content": "<p>That is, the computation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mi>P</mi></msub></mrow><annotation encoding=\"application/x-tex\">n_P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> involves first determining <code>P</code> as a boolean (true or false), which is to say, we need to decide <code>P</code>, which by supposition is impossible.</p>",
        "id": 232068261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616825922
    },
    {
        "content": "<p>Aahhh!  I think that I am finally understanding!  The representation in a computer of a natural/real number is via its digits.  So \"knowing\" a number, means knowing it's digits.  I was trying (and apparently succeeded) in making a single digit non-computable.  The issue with the reals, though, is that you can even construct a real for which all the digits that you can compute turn out to be zero, but you will never know that, later on, there is a non-zero digit.</p>\n<p>I hope that I got this right, now!</p>",
        "id": 232068472,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616826139
    },
    {
        "content": "<p>By the way, there is a funny paradox in your oracle. Assume that <code>P n</code> is decidable for each <code>n</code>. The oracle claims that <code>\\exists n, P n</code> is not decidable. If <code>P n</code> was true, then <code>\\exists n, P n</code> would be decidable (because you can decide in finite time by finding the example), so therefore <code>P n</code> is always false. But then <code>\\exists n, P n</code> is decidable, because it is false (and decided by the trivial algorithm <code>return false</code>)!</p>",
        "id": 232068852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616826647
    },
    {
        "content": "<p>This also aligns well with the \"obvious\" fact that you can prove that two real number are different, by finding that one of their digits is different, but that I would not look at the digits of two real numbers to check if they are equal!</p>",
        "id": 232068870,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616826692
    },
    {
        "content": "<p>Mario, I think that your <code>P</code> is my <code>not P</code>.  Apart from that, I also always find oracles confusing, precisely for reasons similar to your amusing paradox!</p>\n<p>The fact that an unprovable proposition must not have counterexamples always stroke me as a very funny concept and essentially felt like the barber's paradox.</p>",
        "id": 232069101,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616826939
    },
    {
        "content": "<p>In any case, I feel that I understand these decidability issues much better now, thank you all very much!</p>\n<p>Also, I was using an oracle, since I find that the concrete examples with RH, BSD,... are always limited by the fact that I can always say that my algorithm for computing the various numbers, first enumerates possible proofs of the underlying conjecture, <em>might</em> find a proof, and eventually let me know the correct answer!</p>\n<p>The oracle prevents this, at the potential cost of introducing an inconsistency.  What's the problem with that?  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 232069269,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616827194
    },
    {
        "content": "<p>The oracle has the issue that it depends where the information is coming from, and it also makes it hard to distinguish \"true\" and \"provable\", the latter of which might have a finitistic import (i.e. you can search for a proof if it's provable)</p>",
        "id": 232069427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616827359
    },
    {
        "content": "<p>Technically, you also <em>can</em> search for a proof if it is not provable...</p>",
        "id": 232069446,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616827402
    },
    {
        "content": "<p>more specifically you can search for a proof and know that your search will terminate</p>",
        "id": 232069491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616827446
    },
    {
        "content": "<p>Anyway, modulo oracle issues, I get the punchline now: knowing the digits of a real number is not a good way to decide if a number is zero or not.  This seems the bottom line of the arguments.  The same statement about integers is \"clearly\" ok!</p>",
        "id": 232069512,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616827498
    },
    {
        "content": "<p>Suddenly, \"decidable equality\" says exactly what it should and what I had failed to understand until now...</p>",
        "id": 232069601,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616827592
    }
]