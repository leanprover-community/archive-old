[
    {
        "content": "<p>Exercise 0054 in the lean tutorial, raises an ambiguous overload error when I try to apply <code>le_of_lt</code> to solve the goal <code>f x ≤ f y</code>.<br>\nIs this file accidentally importing too many things, or am I not supposed to use this lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 0054</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">le_iff_eq_or_lt</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h_1</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_of_lt</span>\n<span class=\"c\">/-</span><span class=\"cm\"> ambiguous overload, possible interpretations</span>\n<span class=\"cm\">  le_of_lt</span>\n<span class=\"cm\">  int.le_of_lt</span>\n<span class=\"cm\">Additional information:</span>\n<span class=\"cm\">[file_path].lean: context: switched to basic overload resolution where arguments are elaborated without any information about the expected type because expected type was not available -/</span>\n      <span class=\"o\">}</span> <span class=\"o\">}}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265301043,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1639750836
    },
    {
        "content": "<p>You could use <code>_root_.le_of_lt</code> to call the <code>le_of_lt</code> in the root namespace. Though I don't think this is intended for this tutorial</p>",
        "id": 265301255,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639750930
    },
    {
        "content": "<p>Okay thanks, but it will be nice if somebody tweaks the exercise so as to avoid this ;)</p>",
        "id": 265301456,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1639751036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"404479\">Trebor Huang</span> has marked this topic as resolved.</p>",
        "id": 265301465,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639751039
    }
]