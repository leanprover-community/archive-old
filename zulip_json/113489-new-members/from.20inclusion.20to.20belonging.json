[
    {
        "content": "<p>If I have <code>e: ↥(G.incidence_set ↑v)</code> and <code>h': ∀ (v : V), G.incidence_set v ⊆ G.edge_set</code>, how do I use <code>h'</code> to prove that <code>e</code> belongs to <code>G.edge_set</code>?</p>",
        "id": 259260506,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635349784
    },
    {
        "content": "<p>Just apply it (-;</p>",
        "id": 259261216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635350083
    },
    {
        "content": "<p><code>h _ e</code></p>",
        "id": 259261233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635350092
    },
    {
        "content": "<p>The <em>definition</em> of <code>A ⊆ B</code> is <code>∀ x, x ∈ A → x ∈ B</code>, so tactics like <code>apply</code> (which work up to definitional equality) will work.</p>",
        "id": 259261343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635350153
    },
    {
        "content": "<p><code>h' _ e</code> or similar</p>",
        "id": 259261479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635350203
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">h'</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">e</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">e</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">G.incidence_set</span> <span class=\"bp\">↑</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">∈</span> <span class=\"n\">G.incidence_set</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Something I've been intending to ask for a while: what are those arrows pointing up (<code>↥</code> and <code>↑</code>)?</p>",
        "id": 259262564,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635350626
    },
    {
        "content": "<p>These are coercion arrows. They are also covered in chapter 10 of TPiL: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#coercions-using-type-classes\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#coercions-using-type-classes</a></p>",
        "id": 259262834,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635350723
    },
    {
        "content": "<p>Perhaps now is the time to explain this, because that error is a bit more complicated to debug.</p>",
        "id": 259263063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635350820
    },
    {
        "content": "<p>It seems to me that <code> G.incidence_set v</code> and <code>G.edge_set</code> are probably sets, because of (a) their name and (b) the fact that <code>G.incidence_set v ⊆ G.edge_set</code> typechecks. But Lean uses type theory, not set theory. Everything in Lean is either a universe, a type, or a term -- it exists at one of those three levels. Sets exist at the term level -- they are not types. But you have <code>e: ↥(G.incidence_set ↑v)</code>, so <code>e</code> is a term and its type is <code>↥(G.incidence_set ↑v)</code>, which is the type corresponding to the set <code>G.incidence_set ↑v</code>.</p>",
        "id": 259263446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635350965
    },
    {
        "content": "<p>So strictly speaking your original question does not even make sense: <code>e</code> is a term of the type <code>↥(G.incidence_set ↑v)</code>, and in particular it is not a term of type <code>sym2 V</code> (the set of unordered pairs of elements of V), so <code>e</code> cannot belong to <code>G.edge_set</code>.</p>",
        "id": 259263726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635351087
    },
    {
        "content": "<p>What is going on is that if <code>X</code> is a type (e.g. <code>sym2 V</code>) and if <code>S : set X</code> is a subset of <code>X</code> then there is an associated type <code>↥S</code>, and a term of this type is a <em>pair</em> consisting of <code>x : X</code> and a proof <code>hx : x ∈ S</code>.</p>",
        "id": 259263894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635351150
    },
    {
        "content": "<p>So <code>e</code> in your code is this pair; the element itself is called <code>e.1</code> and the proof that it's in the set is called <code>e.2</code>. The error indicates that where you put <code>e</code> Lean was expecting a proof, so I would replace <code>e</code> with <code>e.2</code>.</p>",
        "id": 259264050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635351213
    },
    {
        "content": "<p>So that's why I can use <code>e.val</code> and <code>e.property</code>? <code>.val</code> being the same as <code>.1</code> and <code>.property</code> the same as <code>.2</code>?</p>",
        "id": 259264649,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635351455
    },
    {
        "content": "<p>yeah, those are the same thing</p>",
        "id": 259264685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635351470
    },
    {
        "content": "<p>e.val is the value (the term of type <code>sym2 V</code>) and <code>e.property</code> is the proof that it's in the set which you're coercing to a type</p>",
        "id": 259264775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635351495
    },
    {
        "content": "<p>The various flavours of arrows indicate when you want to conflate things which Lean thinks are different and which you might want to treat as the same; for example </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- ⊢ a = ↑b</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the arrow means \"yeah b is a natural, but we want it to be an integer, so we apply the obvious function from naturals to integers\"</p>",
        "id": 259265125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635351653
    },
    {
        "content": "<p>That simple up-arrow is the most common, where terms get moved to terms. The one with the bottom edge is a more drastic one, where terms get moved to types. We see this in your setting because sets are terms because this is type theory not set theory. <code>set X</code> is the type of subsets of <code>X</code>, and <code>S : set X</code> is a term of that type, i.e. a subset of <code>X</code>, but it's not a type itself.</p>",
        "id": 259265398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635351748
    },
    {
        "content": "<p>And now, after <code>apply h' _ e.property,</code> it says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">G.edge_set</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">e.val</span> <span class=\"bp\">∈</span> <span class=\"n\">G.edge_set</span>\n</code></pre></div>",
        "id": 259265841,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635351929
    },
    {
        "content": "<p>yup, I can't unify those either. Are you up to posting some Lean code which I can run at my end yet?</p>",
        "id": 259265898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635351958
    },
    {
        "content": "<p>Showing the types of things will also help</p>",
        "id": 259265973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635351976
    },
    {
        "content": "<p>This is the complete state description:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">V</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">G.edge_set</span><span class=\"o\">)</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">V</span>\n<span class=\"n\">_inst_4</span><span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">V</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">G.is_tree</span>\n<span class=\"n\">root</span><span class=\"o\">:</span> <span class=\"n\">V</span>\n<span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"n\">root</span><span class=\"o\">}</span>\n<span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">G.incidence_set</span> <span class=\"bp\">↑</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">next_edge</span> <span class=\"bp\">↑</span><span class=\"n\">v</span> <span class=\"n\">root</span> <span class=\"n\">_</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">G.tree_path</span> <span class=\"n\">h</span> <span class=\"bp\">↑</span><span class=\"n\">v</span> <span class=\"n\">root</span><span class=\"o\">)</span>\n<span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">G.incidence_set</span> <span class=\"n\">v</span> <span class=\"bp\">⊆</span> <span class=\"n\">G.edge_set</span> <span class=\"o\">:=</span> <span class=\"n\">G.incidence_set_subset</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">G.edge_set</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 259266239,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635352073
    },
    {
        "content": "<p>Your goal isn't a Prop</p>",
        "id": 259266308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635352090
    },
    {
        "content": "<p>So something odd is happening. You can <code>specialize h' v</code> probably, and then <code>specialize h'  e.2</code> after that</p>",
        "id": 259266682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635352220
    },
    {
        "content": "<p>but it's much harder to help without having working code running in my own VS Code</p>",
        "id": 259266745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635352252
    },
    {
        "content": "<p><code>exact \\&lt;_, h' _ e.2\\&gt;</code> should work</p>",
        "id": 259266746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635352253
    },
    {
        "content": "<p>assuming that you want to prove that <code>e.1</code> is the element in the set</p>",
        "id": 259266810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635352280
    },
    {
        "content": "<p>The code is from that branch I pointed earlier: <code>more_on_trees</code>. I still find it hard to cut the exact pieces of the code and paste only essential things here</p>",
        "id": 259266974,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635352342
    },
    {
        "content": "<p>but even when I tried to use that branch I couldn't get it working -- there were errors on a file you were importing</p>",
        "id": 259267035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635352374
    },
    {
        "content": "<p>if you can just push to the branch then I can pull and compile but the last time I tried that the first error was way before the part you were talking about, and I am reluctant to look at code beyond the first error in a file.</p>",
        "id": 259267133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635352430
    },
    {
        "content": "<p>errors in files have weird and unintended consequences</p>",
        "id": 259267219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635352451
    },
    {
        "content": "<p>branch updated. Kyle did what Mario proposed: <code>exact ⟨_, e.property.1⟩</code><br>\nbut I was trying to do it differently</p>",
        "id": 259267747,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635352664
    },
    {
        "content": "<p>This was my line of thought... please notice that I'm still figuring things out:<br>\nWhen Lean reads <code>let f : {v | v ≠ root} → G.edge_set</code>, it requests that I express how to take an element of <code>{v | v ≠ root}</code> to an element of <code>G.edge_set</code>. And the goal <code>↥(G.edge_set)</code> is how Lean demands it.<br>\nIs it what's happening?</p>",
        "id": 259268847,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635353094
    },
    {
        "content": "<p>Yes -- if you want to define a function in the middle of a tactic proof it's probably best to do it directly with <code>λ</code> etc: <code>let f : {v | v ≠ root} → G.edge_set := λ w, ...</code></p>",
        "id": 259273306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635354820
    }
]