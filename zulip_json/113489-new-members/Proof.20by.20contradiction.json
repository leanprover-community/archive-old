[
    {
        "content": "<p>Sometimes the <code>by_contradiction</code> tactic doesn't work that way I would expect. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cofinite_not_principal</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">cofinite</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">ùìü</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>fails with the message</p>\n<blockquote>\n<p>tactic by_contradiction failed, target is not a proposition</p>\n</blockquote>\n<p>(even if I remove the <code>intro S</code> line). One way I've come up with to deal with these situations is to do the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cofinite_not_principal</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">cofinite</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">ùìü</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">not_true</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Now I'm in the state that I would expect by_contradiction to put me in after the \"intro S\" line.</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm still new to the game of formalizing proofs, but it seems <code>by_contradiction</code> should do this for me.</p>\n<p>Am I just missing some another technique/tactic/way of using by_contradiction?</p>\n<p>p.s. I would also expect <code>contrapose!</code> to turn <code>¬¨true</code> to <code>false</code>.</p>\n<p>p.p.s. To get a MWE just add the following above the theorem</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>MWE header</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import order.filter.basic<br>\nopen_locale filter<br>\nopen filter set</p>\n<p>def cofinite (Œ± : Type) : filter Œ± :=<br>\n{ sets := { S : set Œ± | (S·∂ú).finite },<br>\n  univ_sets := begin<br>\n    rw [mem_set_of_eq, compl_univ],<br>\n    exact finite_empty,<br>\n  end,<br>\n  sets_of_superset := begin<br>\n    intros X Y hX hXY,<br>\n    -- rw mem_set_of_eq at hX ‚ä¢,<br>\n    apply finite.subset hX,<br>\n    rwa compl_subset_compl,<br>\n  end,<br>\n  inter_sets := begin<br>\n    intros X Y hX hY,<br>\n    rw [mem_set_of_eq, compl_inter],<br>\n    apply finite.union hX hY,<br>\n  end }</p>\n</div></div>",
        "id": 254220352,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632236042
    },
    {
        "content": "<p>If your goal is <code>a ‚â† b</code> you should start with <code>intro h</code>, and the goal will be <code>false</code>.</p>",
        "id": 254220831,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632236213
    },
    {
        "content": "<p>With <code>h : a = b</code>. There is no need of using a proof by contradiction here, since <code>a ‚â† b</code> is <em>defined</em> as <code>a = b ‚Üí false </code>.</p>",
        "id": 254220956,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632236261
    },
    {
        "content": "<p>(We all made this mistake I think, so you are in a good position <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> )</p>",
        "id": 254221106,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632236317
    },
    {
        "content": "<p><code>intro h</code> works, but why doesn't <code>by_contra</code>? Even more oddly, <code>rw ne.def, by_contra h,</code> works</p>",
        "id": 254221273,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1632236395
    },
    {
        "content": "<p>Ok. Thanks for enlightening me. I would never think to call <code>intro</code> when proving <code>a ‚â† b</code>. Well, except now that I've been enlightened :)</p>",
        "id": 254221726,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632236514
    },
    {
        "content": "<p>It's a decidablity issue, adding <code>open_locale classical</code> should also work.</p>",
        "id": 254221882,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632236552
    },
    {
        "content": "<p>I can confirm that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cofinite_not_principal</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">cofinite</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">ùìü</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>does exactly what I expect. Is there a downside to that <code>open_locale classical</code> line?</p>",
        "id": 254222382,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632236717
    },
    {
        "content": "<p>If you want to do \"standard\" mathematics no. But if you are interested in constructive logic and/or computability then yes, but I will let someone else more experienced than me clarify this.</p>",
        "id": 254222636,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632236802
    },
    {
        "content": "<p>Fair enough. Thanks :)</p>",
        "id": 254222848,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632236879
    },
    {
        "content": "<p>And beware that if at some point you want to PR this in mathlib the constructivist mafia will force you to use <code>intro h</code> here.</p>",
        "id": 254223136,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632236966
    },
    {
        "content": "<p>BTW, the issue here is probably very simple: without excluded middle you cannor prove <code>¬¨¬¨p ‚Üí p</code>, so <code>¬¨(a ‚â† b)</code> does not imply <code>a = b</code>.</p>",
        "id": 254223532,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632237091
    },
    {
        "content": "<p>I'm fine with doing <code>intro h</code> and I would guess most people would be (other than for disoverability). I have no idea if it's possible or a good idea for <code>by_contradiction</code> to detect this situation and then just do <code>intro h</code>, but it seems reasonable. Because the state after <code>intro S, intro h</code> in the above theorem is exactly what I, in my limited understanding, would mean when I say \"lets now prove this by contradiction\".</p>",
        "id": 254224160,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632237305
    },
    {
        "content": "<p>I think that a good lesson to learn here is to realize that you never asked yourself what <code>¬¨h</code> actually means. Of course we are very happy with the standard vague idea, and we can do a lot of beautiful math with it, but in Lean even very basic things must be defined (we even have a definition of <code>=</code>). <code>¬¨h</code> is defined as <code>h ‚Üí false</code>, so if the goal is an implication it is natural to start with <code>intro</code>.</p>",
        "id": 254224956,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632237584
    },
    {
        "content": "<p>I agree. It is nice to know how <code>¬¨h</code> is defined now. <code>by_contradiction</code> not handling this is overall a relatively minor pain point. But, from my couple weeks with lean now, it does seem like there are a lot of these minor pain points that seem like they would be easy to fix.</p>",
        "id": 254226177,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632238020
    },
    {
        "content": "<p>Of course, seeming easy to fix is quite different than actually being easy :)</p>",
        "id": 254226344,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632238071
    },
    {
        "content": "<p>This is a feature, not a problem. It's a feature you are not interested if you want to do mathematics, and it becomes annoying in that case, but it is needed to do other things. If you want to forget about all of this, just start all files with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">noncomputable theory</span>\n</code></pre></div>\n<p>and you are doing classical mathematics.</p>",
        "id": 254226751,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632238216
    },
    {
        "content": "<p>Would a decent compromise being for <code>by_contradiction</code> to detect this situation and, rather than fail with a mysterious message (it was mysterious to me), to print out a few of the suggestions you just made? That would have saved me and probably other people some time.</p>",
        "id": 254227303,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632238412
    },
    {
        "content": "<p>My suggestion is already in the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_contra%20/%20by_contradiction\">documentation</a>.</p>",
        "id": 254227611,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632238530
    },
    {
        "content": "<p>Trevor, what version of lean are you using?</p>",
        "id": 254228080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632238683
    },
    {
        "content": "<p>I maintain that the error message \"target is not a proposition\" is not as actionable as it could be. But your point that I should read the documentation is well taken.</p>",
        "id": 254228165,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632238722
    },
    {
        "content": "<p>This is the thing that doesn't make sense to me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cofinite_not_principal</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">cofinite</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">ùìü</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cofinite_not_principal'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">¬¨</span><span class=\"o\">(</span><span class=\"n\">cofinite</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">=</span> <span class=\"bp\">ùìü</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 254228255,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1632238760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <code>leanprover-community/lean:3.24.0</code>. I'm working the <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics\">Formalising Mathematics</a> exercises and thats the version <code>leanproject</code> pulled.</p>",
        "id": 254228883,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632238945
    },
    {
        "content": "<p>I'd thought <code>by_contra</code> automatically used classical decidability instances since <code>by_cases</code> now does, but it seems like it doesn't.</p>\n<p>Also, I found a way to get <code>by_contra</code> to infinite loop somehow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- never gets here</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 254229287,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632239083
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.by_contradiction/src\">src#tactic.by_contradiction</a>: it does</p>",
        "id": 254229374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632239109
    },
    {
        "content": "<p>(By the way, the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#classical\">tactic#classical</a> tactic is a way to do <code>open_locale classical</code> from within a tactic proof.)</p>",
        "id": 254229582,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632239172
    },
    {
        "content": "<p>This is clearly just a bug: <code>by_contradiction</code> is already programmed to do <code>intro</code> when presented with a <code>not</code>, it just doesn't know how to do it for an <code>ne</code></p>",
        "id": 254229756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632239241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> It seems that I'm accidentally using an old version of Lean when I was poking through the source -- <code>by_contra</code> has been able to use classical decidable instances for 11 months now. <a href=\"https://github.com/leanprover-community/lean/commit/af2f0be9958b0bc390698ffad434c2305ab40e0f\">https://github.com/leanprover-community/lean/commit/af2f0be9958b0bc390698ffad434c2305ab40e0f</a></p>",
        "id": 254229909,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632239295
    },
    {
        "content": "<p>So there are two bugs here:</p>\n<ul>\n<li>by_contra is somehow not finding the classical instance needed to introduce <code>h : ¬¨(x ‚â† y)</code></li>\n<li>the heuristic intended to just do <code>intro</code> on goals of the form <code>¬¨P</code> (giving the more useful <code>h : x = y</code>) does not look through semireducible defs</li>\n</ul>",
        "id": 254230065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632239368
    },
    {
        "content": "<p>It certainly <em>felt</em> like a bug. I'm glad it's been surfaced and now I'll let the experts handle it :)</p>",
        "id": 254230566,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632239536
    },
    {
        "content": "<p>Wow, wonderful!</p>",
        "id": 254230770,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632239613
    },
    {
        "content": "<p>I mean, wonderful that we realize we have a problem.</p>",
        "id": 254230812,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632239629
    },
    {
        "content": "<p>The first bullet is easy to fix with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">by_contradiction2</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">tgt</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">match_not</span> <span class=\"n\">tgt</span> <span class=\"bp\">$&gt;</span> <span class=\"o\">())</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">decidable.by_contradiction</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">eapply</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">classical.by_contradiction</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">tgt</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">eapply</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">fail</span> <span class=\"s2\">\"tactic by_contradiction failed, target is not a proposition\"</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 254231129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632239740
    },
    {
        "content": "<p>\"target is not a proposition\" is still a weird error message, at least in this case</p>",
        "id": 254231472,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1632239858
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/622\">https://github.com/leanprover-community/lean/pull/622</a></p>",
        "id": 254232876,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632240302
    },
    {
        "content": "<p>About <code>not true</code> being replaced by <code>false</code>, <code>true</code> is a type with one element, <code>trivial</code>, and <code>false</code> is a type with no element. So you can prove <code>not true iff false</code> by doing <code>\\la h, h trivial</code> one way and <code>\\la h, h.elim</code> rhe other way. But you see that this is much less natural than you would have expected, which indicates that this is not really the way we do maths in Lean.</p>",
        "id": 254232889,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632240305
    },
    {
        "content": "<p>I've never really understood why <code>ne</code> is behind a definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">ne</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">¬¨</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">ne</span>\n</code></pre></div>\n<p>Couldn't it have been this, saving some of these headaches?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">¬¨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 254233641,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632240581
    },
    {
        "content": "<p>Then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne.symm\">docs#ne.symm</a> wouldn't work with dot notation</p>",
        "id": 254233682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632240599
    },
    {
        "content": "<p>I'd argue the headache is that the tactic forgot to look through reducible definitions</p>",
        "id": 254233772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632240627
    },
    {
        "content": "<p>Seems fine to me, so long as you're ok with it being in the <code>not</code> namespace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">¬¨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">not.symm</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">‚â†</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">h'.symm</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">‚â†</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 254234157,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632240776
    },
    {
        "content": "<p>I've run into <code>ne</code> not being literally not-equals a number of times. There's always a simple workaround, but it's a bit of annoying friction.</p>",
        "id": 254234448,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632240883
    },
    {
        "content": "<p>This reminds me that there's no <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not.def\">docs#not.def</a>. The difference between not and implies-false is another small annoyance (<code>¬¨p ‚Üí false</code> seems like it should <code>simp</code> to <code>p</code>)</p>",
        "id": 254234979,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632241102
    },
    {
        "content": "<p>Why would there need to be a <code>not.def</code>?</p>",
        "id": 254235019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632241119
    },
    {
        "content": "<p>Instead of <code>rw not.def</code> you can use <code>rw not</code></p>",
        "id": 254235063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632241138
    },
    {
        "content": "<p>It's to rewrite it backwards</p>",
        "id": 254235097,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632241157
    },
    {
        "content": "<p>It would let you normalize all the implies-falses in an expression into nots, which have a lot more simp lemmas about them.</p>",
        "id": 254235225,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632241205
    },
    {
        "content": "<p>Hmm, there's something weird there..  I'll make a new thread</p>",
        "id": 254235377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632241279
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not.def</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span><span class=\"n\">p</span> <span class=\"bp\">‚Üî</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span><span class=\"n\">p</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">not.def</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 254235400,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632241291
    },
    {
        "content": "<p>My point was that <code>not</code> should have an equation lemma so that you can just do <code>simp [‚Üênot]</code>. <a href=\"#narrow/stream/113488-general/topic/Where's.20the.20equation.20lemma.20for.20.60not.60.3F/near/254235537\">It is missing</a>.</p>",
        "id": 254235792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632241426
    },
    {
        "content": "<p>Does <code>simp</code> actually work that way though for definitions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">false</span>\n<span class=\"kn\">local</span> <span class=\"kd\">prefix</span> <span class=\"bp\">`¬¨`</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"o\">:=</span> <span class=\"n\">not</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span><span class=\"n\">p</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">not</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- p : Prop,</span>\n  <span class=\"c1\">-- h : p</span>\n  <span class=\"c1\">-- ‚ä¢ (p ‚Üí false) ‚Üí false</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>(<code>rw [‚Üênot]</code> does the expected thing, however.)</p>",
        "id": 254237411,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632242039
    },
    {
        "content": "<p>Ah, perhaps I was thinking of <code>rw</code></p>",
        "id": 254237937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632242247
    },
    {
        "content": "<p>That looks like a bug to me, <code>simp</code> has clearly done the opposite of what we asked it to</p>",
        "id": 254238307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632242375
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover-community/lean/issues/623\">https://github.com/leanprover-community/lean/issues/623</a>, I'm not familiar enough with the simplifier to debug that one</p>",
        "id": 254241323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632243483
    },
    {
        "content": "<p>I have <code>hf: fintype.card Œ±' = 0</code> and <code>hn: nonempty Œ±'</code>. How do I use those to prove <code>false</code>?</p>\n<p>(<code>library_search</code> couldn't help me)</p>",
        "id": 260890117,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636509443
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_pos_iff\">docs#fintype.card_pos_iff</a> :)</p>",
        "id": 260890930,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636510278
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 260894282,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636510974
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_ne_zero\">docs#fintype.card_ne_zero</a></p>",
        "id": 260945058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636519141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Was that <code>hn : nonempty Œ±</code> already there at the beginning of the proof?</p>",
        "id": 260945077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636519172
    },
    {
        "content": "<p>I'm asking, because if you created it later, you need to reset the instance cache using the <code>resetI,</code> tactic.<br>\nMaybe <code>resetI, library_search</code> would have been able to find the <code>fintype.card_ne_zero</code> lemma.</p>",
        "id": 260945147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636519220
    },
    {
        "content": "<p>Nope, I had to \"fabricate\" it. Dunno the exact term. Create? Insert?</p>",
        "id": 260983980,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636548583
    },
    {
        "content": "<p>Ah, state then prove</p>",
        "id": 260983998,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636548596
    },
    {
        "content": "<p>Synthesize!</p>",
        "id": 260987802,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1636550616
    },
    {
        "content": "<p>I did use <code>tactic.unfreeze_local_instances,</code></p>",
        "id": 260988812,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636551099
    }
]