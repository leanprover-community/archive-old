[
    {
        "content": "<p>What is the best and simplest way to make it correct:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">string</span> <span class=\"k\">else</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"n\">y.to_string</span>\n</code></pre></div>",
        "id": 228423529,
        "sender_full_name": "kana",
        "timestamp": 1614697239
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nat.to_string</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">string</span> <span class=\"k\">else</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y.to_string</span>\n</code></pre></div>\n<p>What do I import to get <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.to_string\">docs#nat.to_string</a>?</p>",
        "id": 228424126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614697404
    },
    {
        "content": "<p>Thanks. Sorry, should be just <code>to_string y</code></p>",
        "id": 228424408,
        "sender_full_name": "kana",
        "timestamp": 1614697496
    },
    {
        "content": "<p>No, that won't work either.</p>",
        "id": 228424692,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614697587
    },
    {
        "content": "<p>(also, use <code>cond</code> instead of <code>ite</code> when working with bool)</p>",
        "id": 228424879,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614697654
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_string\">docs#to_string</a>?</p>",
        "id": 228425126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614697726
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">string</span> <span class=\"k\">else</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 228425388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614697810
    },
    {
        "content": "<p>Why not just use <code>string ⊕ nat</code> instead of the pi type over bool?</p>",
        "id": 228425967,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614698013
    }
]