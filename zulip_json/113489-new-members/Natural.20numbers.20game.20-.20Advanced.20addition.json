[
    {
        "content": "<p>I managed to solve the Advanced Addition World Level 1 and 2 (<a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=8&amp;level=1\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=8&amp;level=1</a>) using the commands below, but, honestly, I do not understand why it worked.  Can someone explain the reason why this is a valid proof?  Thank you!</p>\n<p>Level 1:<br>\ncases hs with g h,<br>\nrefl,</p>\n<p>Level21:<br>\ncases h with g h,<br>\nrefl,</p>",
        "id": 204108322,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1594916907
    },
    {
        "content": "<p>Ha, there's a bit of trickery going on there...</p>",
        "id": 204108774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594917102
    },
    {
        "content": "<p>I think this is not the \"intended solution\" (<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> correct me if I'm wrong)</p>",
        "id": 204108819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594917122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I think Kevin wanted to have you start with <code>apply succ_inj</code>, or something like that.</p>",
        "id": 204108976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594917193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> If you have <code>h : x = complicated thing</code>, and you run <code>cases h</code>, then Lean figures out that it should just substitute all occurences of <code>x</code> with <code>complicated thing</code> (I actually don't know the details of why).<br>\nIn this case it seems to figure out that the only way that <code>succ a</code> and <code>succ b</code> can be equal is if <code>a = b</code>, so it replaces all occurences of <code>b</code> with <code>a</code>.</p>",
        "id": 204109367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594917398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> or <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> could you maybe give the \"official\" explanation?</p>",
        "id": 204109403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594917419
    },
    {
        "content": "<p>It has to do with the fact that equality is defined internally as an indexed inductive type with a single constructor, reflexivity; the elimination principle is essentially just substitution. </p>\n<p>Probably the best way to think of it is this: when you ask Lean to do cases on an equality \"x = y\", it knows that x and y are supposed to be the same, and so it replaces x by y.</p>",
        "id": 204109942,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594917691
    },
    {
        "content": "<p>Another way to say it: the canonical way to \"use\" an equation is just to substitute. <code>cases</code> on something is supposed to give us the canonical way of using it.</p>",
        "id": 204110132,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594917781
    },
    {
        "content": "<p>But how can it \"see through\" the succ on both sides...</p>",
        "id": 204110555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594918009
    },
    {
        "content": "<p>Why does it change <code>a = b</code> in the goal to <code>a = a</code></p>",
        "id": 204110567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594918019
    },
    {
        "content": "<p><code>cases</code> has special support to deal with equalities between constructors of inductive types. Under the hood I'm quite sure it calls <code>no_confusion</code>. <br>\n<code>no_confusion</code> is the way in Lean to simultaneously do show things:</p>\n<ul>\n<li>Two different constructors of an inductive type are never equal;</li>\n<li>Every constructor is injective: they are only equal if <em>all</em> their inputs are equal.</li>\n</ul>",
        "id": 204111029,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594918246
    },
    {
        "content": "<p>Yup, it calls <code>no_confusion</code></p>",
        "id": 204111067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594918272
    },
    {
        "content": "<p>Johan is correct that in this case it does <em>not</em> just apply the induction principle of equality, so it's more than just <code>induction hs</code> (which should fail)</p>",
        "id": 204111133,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594918313
    },
    {
        "content": "<p>Yup, that indeed fails.</p>",
        "id": 204111464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594918496
    },
    {
        "content": "<p>Sorry, yes, I read too quickly. Leo did a lot of work on the cases tactic so that it would do the right thing when pattern matching in function definitions. So there are heuristics being applied under the hood, including <code>no_confusion</code>.</p>",
        "id": 204111631,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594918575
    },
    {
        "content": "<p>rofl so <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> it's all about <code>no_confusion</code>, so I hope you're no longer confused :-)</p>",
        "id": 204114120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594919680
    },
    {
        "content": "<p>but I rather suspect you are now more confused :-/</p>",
        "id": 204114137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594919693
    },
    {
        "content": "<p>These are great proofs by the way!</p>",
        "id": 204114189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594919724
    },
    {
        "content": "<p>Dear All,</p>\n<p>Thank you very much for your answers!  I do not fully understand them and as <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> suggests, I will need to apply  no_confusion a few more times!  Anyway, it is fun to learn Lean!</p>",
        "id": 204141383,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1594932781
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/</a> <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span></p>",
        "id": 204141496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594932812
    }
]