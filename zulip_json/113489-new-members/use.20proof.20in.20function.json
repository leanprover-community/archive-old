[
    {
        "content": "<p>I'm wondering if it is possible to define a function like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">myPrev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">myPrev</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>When I tried, I expected there to be some way to get a <code>n = 0</code> in the <code>| Nat.zero =&gt; ...</code> case of a <code>match n with</code>, but couldn't find any.</p>",
        "id": 260989284,
        "sender_full_name": "Joscha Mennicken",
        "timestamp": 1636551351
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myPrev</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myPrev'</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Lean will automatically figure out that you don't need to provide the <code>0</code> case.</p>",
        "id": 260990690,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636552055
    },
    {
        "content": "<p>If you want to use the word <code>match</code>, you can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myPrev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span> <span class=\"c1\">-- this line is optional, and can be removed</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 260991171,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636552277
    },
    {
        "content": "<p>In particular, you have to put <code>h</code> in the match, so that it changes when you consider different cases on <code>n</code>.</p>",
        "id": 260991306,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636552331
    },
    {
        "content": "<p>Thanks, that second example was what I was looking for. It's cool that the first version works, but it's a bit too much magic to understand what's going on.</p>",
        "id": 260991615,
        "sender_full_name": "Joscha Mennicken",
        "timestamp": 1636552486
    },
    {
        "content": "<p>I'm still wondering if there's a way to end up with a hypothesis <code>n = 0</code> in the first match case and <code>n != 0</code> (or <code>n = x + 1</code> or similar) in the second and to then use the <code>n = 0</code> as contradiction to <code>n != 0</code> instead of using <code>0 != 0</code> as contradiction.</p>",
        "id": 260992048,
        "sender_full_name": "Joscha Mennicken",
        "timestamp": 1636552694
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myPrev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">n</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>but where lean doesn't rewrite all occurrences of <code>n</code> in <code>hn</code></p>",
        "id": 260992502,
        "sender_full_name": "Joscha Mennicken",
        "timestamp": 1636552870
    },
    {
        "content": "<p>Oh, I see what you mean.</p>\n<p>Yes, you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myPrev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n_eq_0</span><span class=\"o\">:</span><span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">n_eq_0</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 261038001,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636570813
    },
    {
        "content": "<p>Note you could also just send <code>0 =&gt; 0</code>, and your function would be equal</p>",
        "id": 261039533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636571526
    },
    {
        "content": "<p>That makes sense. Thanks for those answers, although I'm slightly surprised you can't put a space before the colon, only after: <code>match n_eq_0: n with</code>.</p>",
        "id": 261258132,
        "sender_full_name": "Joscha Mennicken",
        "timestamp": 1636726840
    }
]