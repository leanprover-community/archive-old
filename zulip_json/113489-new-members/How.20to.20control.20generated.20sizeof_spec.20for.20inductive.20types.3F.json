[
    {
        "content": "<p>I have this inductive type <code>T</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">T.a.sizeof_spec</span>\n</code></pre></div>\n<p>However, this is not the <code>sizeof_spec</code> that I wanted. I don't want sizeof to take <code>ℕ</code> into account, which will block me to prove some well-foundedness properties when I use <code>T</code>, according to docs here <a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">https://leanprover-community.github.io/extras/well_founded_recursion.html</a></p>",
        "id": 219718419,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607794335
    },
    {
        "content": "<p>It won't block you, it's just that you'll have to use your own well-founded function. See for example <a href=\"#narrow/stream/113489-new-members/topic/question.20about.20the.20termination.20checker.2E\">this recent question</a>.</p>",
        "id": 219718463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607794415
    },
    {
        "content": "<p>NB there are no terms of that type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">no_T</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">T.a</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">no_T</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 219718587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607794597
    },
    {
        "content": "<p>Yep there're more inductive cases that I didn't post here</p>",
        "id": 219718667,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607794739
    },
    {
        "content": "<p>Is there a way to change the well founded relation for an inductive type <strong>globally</strong>?</p>",
        "id": 219718679,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607794773
    },
    {
        "content": "<p>yes, you just give an instance of <code>has_well_founded</code> for your type</p>",
        "id": 219718696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607794791
    },
    {
        "content": "<p>the instance using <code>sizeof</code> is low priority</p>",
        "id": 219718709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607794802
    },
    {
        "content": "<p>Is there an example on how to do this? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 219718768,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607794846
    },
    {
        "content": "<p><code>instance : has_well_founded T := \\&lt;my_relation, proof_it_is_well_founded\\&gt;</code></p>",
        "id": 219718782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607794876
    },
    {
        "content": "<p>Searching for <code>instance : has_well_founded</code> in mathlib gives five examples, for example <a href=\"https://github.com/leanprover-community/mathlib/blob/f9c8abe373079b775d8681e6d21c7f6554f5346a/src/data/pnat/basic.lean#L219\">here</a></p>",
        "id": 219718831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607794938
    },
    {
        "content": "<p>OK cool will try this!</p>",
        "id": 219719038,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607795271
    },
    {
        "content": "<p>Succeeded!</p>",
        "id": 219721956,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607799284
    }
]