[
    {
        "content": "<p>I want to prove a simple arithmetic calculation theorem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"mi\">9000</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3000</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>This works for smaller numbers, but for the given example, I get a warning about \"(deterministic timeout)\". How exactly does the arithmetic scale?  What's the suggested way to deal with things like this?</p>\n<p>I notice that <code>#eval</code> isn't absurdly slow or anything, e.g.,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">90000000000</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span>\n</pre></div>\n\n\n<p>works fine. So how come when constructing proof terms it chokes on such small numbers?</p>",
        "id": 164132622,
        "sender_full_name": "Travis Hance",
        "timestamp": 1556152313
    },
    {
        "content": "<p>try <code>import tactic.norm_num</code> and <code>by norm_num</code> (from mathlib)</p>",
        "id": 164134672,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556154895
    },
    {
        "content": "<p><code>#eval</code> uses the virtual machine to do its computation. In the virtual machine, natural numbers are implemented very efficiently: it uses <code>libgmp</code>. With <code>rfl</code>, the computation is done using logical reduction rules the definition of <code>nat</code> in the logic is very inefficient: it uses unary representation.</p>",
        "id": 164134762,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556155027
    },
    {
        "content": "<p>That worked. Thank you!</p>",
        "id": 164135838,
        "sender_full_name": "Travis Hance",
        "timestamp": 1556156688
    },
    {
        "content": "<p>I see the proof term it generates is doing some binary representation thing. That's pretty neat.</p>",
        "id": 164135912,
        "sender_full_name": "Travis Hance",
        "timestamp": 1556156779
    },
    {
        "content": "<p>Yes, that's the cool thing about numerals. the lexeme <code>10 </code> is syntactic sugar for <code>bit0 (bit1 (bit0 one))</code> which are functions that evaluate into <code>succ</code> and <code>zero</code> (in the case of <code>nat</code>) but which don't have to be evaluated to do arithmetic.</p>",
        "id": 164136024,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556156990
    },
    {
        "content": "<p>One of the questions on my undergraduate example sheets was: \"which number is bigger: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{1/2000000000000}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8879999999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">2</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>3</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">3^{1/3000000000000}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8879999999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">3</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span>?\" I had to be careful when formalising the result in Lean. In theory I could work out both sides to 20 decimal places and I'd be done, but Lean cannot do this yet with a verified argument (as far as I know) so I had to use other tricks.</p>",
        "id": 164143079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556167566
    },
    {
        "content": "<p>Oh, this reminds me of a recent question that came up on puzzling.SE: Which is bigger, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>g</mi><mrow><mn>6</mn><mn>4</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">g_{64}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">6</span><span class=\"mord mathrm mtight\">4</span></span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mi>B</mi><mo>(</mo><mn>1</mn><mn>8</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">BB(18)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">8</span><span class=\"mclose\">)</span></span></span></span>? That's Graham's number vs the busy beaver function</p>",
        "id": 164145435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556171277
    },
    {
        "content": "<p>busy beaver hands down</p>",
        "id": 164145479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556171298
    },
    {
        "content": "<p>even BB(12) is bigger than Graham's number, right?</p>",
        "id": 164145486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556171316
    },
    {
        "content": "<p>that's my intuition as well, but I have no idea how to prove it</p>",
        "id": 164145487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556171320
    },
    {
        "content": "<p>Where does your intuition come from?</p>",
        "id": 164145490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556171331
    },
    {
        "content": "<p>Mine came from a children's book</p>",
        "id": 164145492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556171339
    },
    {
        "content": "<p>\"Stinky Finger's House Of Fun\"</p>",
        "id": 164145501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556171349
    },
    {
        "content": "<p>My intuition is BB is bigger than everything</p>",
        "id": 164145502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556171359
    },
    {
        "content": "<p>but I'm not sure about really small inputs</p>",
        "id": 164145507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556171369
    },
    {
        "content": "<p>One of the characters in it. Brian Brain, at some point makes exactly the same observation</p>",
        "id": 164145509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556171373
    },
    {
        "content": "<p>\"all of these are dwarfed by Busy Beaver 12\", he says. I had to go to Wikipedia to look up the Busy Beaver function</p>",
        "id": 164145518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556171399
    },
    {
        "content": "<p>wikipedia actually contains a statement that BB(12) is bigger than 3^^^^3, but it doesn't say about g64</p>",
        "id": 164145593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556171512
    },
    {
        "content": "<p>BB(8) is not so tall, especially when standing on sand</p>",
        "id": 164145636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556171535
    },
    {
        "content": "<p>Oh, it also mentions that BB(17) &gt; g64</p>",
        "id": 164145639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556171569
    },
    {
        "content": "<p>Your question about <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn></mrow></msup><mo>&lt;</mo><msup><mn>3</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{1/2000000000000}&lt;3^{1/3000000000000}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8879999999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.9270999999999999em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">2</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span></span></span></span></span></span></span></span></span><span class=\"mrel\">&lt;</span><span class=\"mord\"><span class=\"mord mathrm\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">3</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span><span class=\"mord mathrm mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> boils down to proving <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>log</mi><mn>2</mn></msub><mn>3</mn><mo>&lt;</mo><mn>3</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\log_23&lt;3/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span><span class=\"vlist-s\">â€‹</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"></span></span></span></span></span><span class=\"mord mathrm\">3</span><span class=\"mrel\">&lt;</span><span class=\"mord mathrm\">3</span><span class=\"mord mathrm\">/</span><span class=\"mord mathrm\">2</span></span></span></span>, or <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>&lt;</mo><msup><mn>3</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^3&lt;3^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.853208em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">3</span></span></span></span></span></span></span></span><span class=\"mrel\">&lt;</span><span class=\"mord\"><span class=\"mord mathrm\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span></span></span>; I don't think any high precision estimates are needed</p>",
        "id": 164147276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556174234
    },
    {
        "content": "<p>In fact the hardest part, numerically, is just showing that <code>2000000000000 = 2 * 1000000000000</code> and <code>3000000000000 = 3 * 1000000000000</code></p>",
        "id": 164147331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556174312
    },
    {
        "content": "<p>(which is of course much harder in binary)</p>",
        "id": 164147336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556174333
    },
    {
        "content": "<p>But it would require no work if we could do high precision estimates.</p>",
        "id": 164148388,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556175956
    },
    {
        "content": "<p>It would require a lot of work, by the computer. Nothing is free</p>",
        "id": 164148437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556175985
    },
    {
        "content": "<p>If you prove <code>(x + 1)^100 = (1 + x)^100</code> by using <code>ring</code>, I will be sad</p>",
        "id": 164148550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556176195
    },
    {
        "content": "<p>I'm pretty sure that question was written specifically to foil attempts to prove it by plug-and-chug calculator methods</p>",
        "id": 164148623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556176305
    },
    {
        "content": "<p>Yes, sure it was. And yes, the point is that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>&lt;</mo><msup><mn>3</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^3&lt;3^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.853208em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">3</span></span></span></span></span></span></span></span><span class=\"mrel\">&lt;</span><span class=\"mord\"><span class=\"mord mathrm\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span></span></span>, but it was interesting to prove this in Lean because you had to be careful to never write anything which triggered a computation.</p>",
        "id": 164149101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556176975
    },
    {
        "content": "<p>I proved some general lemma first, and then applied it to get the result.</p>",
        "id": 164149114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556176994
    },
    {
        "content": "<p>Computer work is waaaay cheaper than human work.</p>",
        "id": 164149375,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556177383
    },
    {
        "content": "<p>the computer will be asked to solve this problem many many times on many many computers though. Think of the environment</p>",
        "id": 164149793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556177941
    },
    {
        "content": "<p>also if you ever want to move this proof anywhere else, it helps if you didn't write intentionally bad proofs</p>",
        "id": 164149811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556177971
    },
    {
        "content": "<blockquote>\n<p>In fact the hardest part, numerically, is just showing that <code>2000000000000 = 2 * 1000000000000</code> and <code>3000000000000 = 3 * 1000000000000</code></p>\n</blockquote>\n<p>My memory is that this is exactly where I started: I set <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mrow><mn>1</mn><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">N=10^{12}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span><span class=\"mord\"><span class=\"mord mathrm\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> and then rewrote for 2N and 3N and then never thought about the explicit value of N again</p>",
        "id": 164149878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556178027
    },
    {
        "content": "<p>I would dig it out from the xena archives but I'm busy wrestling with type class hell</p>",
        "id": 164149898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556178055
    },
    {
        "content": "<blockquote>\n<p>the computer will be asked to solve this problem many many times on many many computers though. Think of the environment</p>\n</blockquote>\n<p>Let's solve that problem instead.</p>",
        "id": 164149918,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556178093
    }
]