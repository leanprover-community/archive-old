[
    {
        "content": "<p>How do you prove this?<br>\nα: Type<br>\n_inst_5: has_zero α<br>\n⊢ mul_zero_class.to_has_zero α = _inst_5</p>",
        "id": 214149081,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1603349534
    },
    {
        "content": "<p>It might not be provable</p>",
        "id": 214149207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603349660
    },
    {
        "content": "<p>If you have to unrelated instances of <code>has_zero</code>, they will be actually different.</p>",
        "id": 214149231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603349693
    },
    {
        "content": "<p>So we need more context.</p>",
        "id": 214149240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603349702
    },
    {
        "content": "<p>I could be evil and write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">evil_zero</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n<p>Now you certainly cannot prove <code>evil_zero = nat.has_zero</code>, even though both have type <code>has_zero nat</code>.</p>",
        "id": 214149366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603349789
    },
    {
        "content": "<p>by the way format your code using <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 214184101,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1603372233
    },
    {
        "content": "<p>I'm trying to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">std_basis</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n        <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"bp\">¬</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i'</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">j'</span> <span class=\"bp\">→</span> <span class=\"n\">std_basis_matrix</span> <span class=\"n\">i'</span> <span class=\"n\">j'</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">std_basis_matrix</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n        <span class=\"n\">sorry</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>The zero from std_basis_matrix is not an instance of <code>has_zero α</code>, instead it seems to be <code>mul_zero_class.to_has_zero α</code>.</p>",
        "id": 214212250,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1603384146
    },
    {
        "content": "<blockquote>\n<p><code>[has_zero α] [semiring α]</code></p>\n</blockquote>\n<p>This is bad, you just put two zeros on <code>α</code></p>",
        "id": 214212487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603384244
    },
    {
        "content": "<p>The error you are getting is because you need one zero and have the other</p>",
        "id": 214212630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603384307
    },
    {
        "content": "<p>you should just delete <code>[has_zero α]</code> and it should work</p>",
        "id": 214212733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603384338
    },
    {
        "content": "<p>That was it. Thanks! <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 214213372,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1603384629
    }
]