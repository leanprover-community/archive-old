[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hqd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span>\n<span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">a.gcd</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a.gcd</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">hhh</span> <span class=\"o\">:</span> <span class=\"n\">a.gcd</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>Noting that the codomain of gcd is the natural numbers, how do I get <code>a.gcd d = 0 ∨ a.gcd d &gt; 1</code> from <code>hhh</code>?</p>",
        "id": 308033819,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667589879
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.one_lt_iff_ne_zero_and_ne_one\">docs#nat.one_lt_iff_ne_zero_and_ne_one</a> could be helpful.</p>",
        "id": 308035908,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1667590664
    },
    {
        "content": "<p>I'd start with <code>hhh.lt_or_lt</code></p>",
        "id": 308036199,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1667590764
    },
    {
        "content": "<p>And hope that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.lt_one_iff\">docs#nat.lt_one_iff</a> exists</p>",
        "id": 308036514,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1667590893
    },
    {
        "content": "<p>I tried <code>have := a.gcd d = 0 ∨ a.gcd d &gt; 1 := by library_search</code>but nothing showed up. This makes me want to use <code>by sorry</code> so much.</p>",
        "id": 308036539,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667590902
    },
    {
        "content": "<p>And it does, so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hhh.lt_or_lt</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">nat.lt_one_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>should work</p>",
        "id": 308036756,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1667591004
    },
    {
        "content": "<p>thanks! I gotta be more familiar with the libraries</p>",
        "id": 308036863,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667591048
    },
    {
        "content": "<p>And then how do I eliminate the <code>a.gcd d = 0</code> disjunct? as <code>hqd</code> says d &gt;= 2 and a.gcd d is only zero when both a and d are zero?</p>",
        "id": 308037298,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667591270
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.gcd_eq_zero_iff\">docs#nat.gcd_eq_zero_iff</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.eq_zero_of_gcd_eq_zero_right\">docs#nat.eq_zero_of_gcd_eq_zero_right</a></p>",
        "id": 308037826,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1667591464
    },
    {
        "content": "<p>Another tip is to have a glance at <a href=\"https://leanprover-community.github.io/contribute/naming.html\">https://leanprover-community.github.io/contribute/naming.html</a> i.e. the naming conventions in mathlib -- good folks here basically can guess names of lemmas that seem like they should exist :) -- combining that with your editor's tab completion would likely have found ^</p>",
        "id": 308037851,
        "sender_full_name": "Julian Berman",
        "timestamp": 1667591477
    },
    {
        "content": "<p>(possibly via <code>nat.gcd_iff&lt;tab&gt;</code> or whatever)</p>",
        "id": 308037886,
        "sender_full_name": "Julian Berman",
        "timestamp": 1667591492
    },
    {
        "content": "<p>I found these using the search box on the API documentation pages. Type \"nat.gcd_eq_zero\" there, and you'll get a list of things that probably contains what you are looking for.</p>",
        "id": 308038147,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1667591593
    }
]