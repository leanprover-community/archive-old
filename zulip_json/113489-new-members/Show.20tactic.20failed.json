[
    {
        "content": "<p>The following gives an error message <code>show tactic failed</code> in the first subgoal of <code>refine</code>.  It works fine if I use <code>exact  k₁</code>.  As far as I can tell, the goal at that point <em>is</em> <code>a → b ∧ a</code>.</p>\n<p>What's going on?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">imp_trans1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">h₃</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">imp_trans1</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">k₁</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">k₃</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">k₄</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">k₃.left</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">k₂</span> <span class=\"n\">k₄</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214261591,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603411180
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/437\">lean#437</a></p>",
        "id": 214262628,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603412425
    },
    {
        "content": "<p>So the lesson I've learned is not to use <code>a</code> as a variable name!</p>",
        "id": 214262781,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603412664
    },
    {
        "content": "<p>The a bug is surprisingly rare, at least for me. It's also apparently surprisingly hard to fix. I went through a phase of never using a but now I use it and just change it when I run into the a bug.</p>",
        "id": 214278705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603435171
    },
    {
        "content": "<p>Can't we just change things so instead of being an a bug it's an xyzzy bug or something?</p>",
        "id": 214278793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603435266
    },
    {
        "content": "<p>That would be <a href=\"https://github.com/leanprover-community/lean/issues/442\">lean#442</a>, which appears to have stalled somewhere</p>",
        "id": 214280168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603436796
    },
    {
        "content": "<p>oh, it's currently blocked on <a href=\"https://github.com/leanprover-community/lean/issues/447\">lean#447</a></p>",
        "id": 214280212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603436868
    },
    {
        "content": "<p>I thought that this was because we tried to change it to the <code>_a</code> bug. I'm just suggesting <code>xyzzy</code> with no underscore.</p>",
        "id": 214282055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603438684
    },
    {
        "content": "<p>I'd rather just fix the segfault</p>",
        "id": 214283160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603439772
    },
    {
        "content": "<p>That's of course the correct solution.</p>",
        "id": 214283784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603440289
    },
    {
        "content": "<p>Even the proposed <code>a</code> -&gt; <code>_x</code> change was going to induce a surprisingly large number of changes <code>h_a</code> -&gt; <code>h__x</code> in mathlib</p>",
        "id": 214286261,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603442058
    },
    {
        "content": "<p>But I think it's worth fixing those anyway</p>",
        "id": 214286623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603442338
    },
    {
        "content": "<p>I can spend some time on fixing those, if someone gives me the lean to fix them</p>",
        "id": 214286635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603442356
    },
    {
        "content": "<p>but changing them to <code>h_xyzzy</code> probably isn't great, especially if we would change them to something else again later</p>",
        "id": 214286764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603442435
    },
    {
        "content": "<p>But the fix would be to use explicit variable names, right?</p>",
        "id": 214286815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603442480
    },
    {
        "content": "<p>I quickly grew tired of trying to do that when I looked at that earlier</p>",
        "id": 214286841,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603442512
    },
    {
        "content": "<p>Maybe we can crowdsource it?</p>",
        "id": 214286898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603442530
    },
    {
        "content": "<p>What I'm trying to say is it's significantly more annoying than you would think</p>",
        "id": 214286965,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603442601
    },
    {
        "content": "<p>you can just build Lean with a version of the change in the PR to see</p>",
        "id": 214286984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603442620
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>rg <span class=\"s2\">\"h_a\"</span> <span class=\"p\">|</span> wc -l\n<span class=\"m\">241</span>\nrg <span class=\"s2\">\"_a\"</span> <span class=\"p\">|</span> wc -l\n<span class=\"m\">32547</span>\n</code></pre></div>",
        "id": 214287300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603442852
    },
    {
        "content": "<p>I guess it's not only <code>h_a</code>, right?</p>",
        "id": 214287315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603442866
    },
    {
        "content": "<p>for example with the <code>xyzzy</code> change</p>",
        "id": 214287322,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603442872
    },
    {
        "content": "<p>the number is not the issue</p>",
        "id": 214287335,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603442877
    },
    {
        "content": "<p>if you want to do it the \"correct\" way of not using an autogenerated name</p>",
        "id": 214287403,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603442905
    },
    {
        "content": "<p>the issue is some of them are individually hard to deal with</p>",
        "id": 214287444,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603442933
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>rg <span class=\"s2\">\"_a \"</span> <span class=\"p\">|</span> wc -l\n<span class=\"m\">124</span>\n</code></pre></div>",
        "id": 214287449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603442934
    },
    {
        "content": "<p>because they are not simple straight-line <code>intro, cases h, exact h_a</code> but complicated stuff involving <code>;</code> and so on</p>",
        "id": 214287496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603442976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Show.20tactic.20failed/near/214287403\">said</a>:</p>\n<blockquote>\n<p>if you want to do it the \"correct\" way of not using an autogenerated name</p>\n</blockquote>\n<p>But we could do it in two stages... first rename everything to <code>h__xyzzy</code> automatically, and then hope that 124 people will each fix one of those issues afterwards.</p>",
        "id": 214287499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603442983
    },
    {
        "content": "<p>I wouldn't mind having <code>h__xyzzy</code> in mathlib if it removes the <code>a</code> bug</p>",
        "id": 214287569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603443027
    },
    {
        "content": "<p>And it will be extra motivation for people to not use autogenerated names in the future</p>",
        "id": 214287586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603443048
    },
    {
        "content": "<p>I think the last time I looked Lean 4 did not let you use autogenerated names anyways (by default?)</p>",
        "id": 214287987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603443332
    },
    {
        "content": "<p>so it will need to be done at some stage anyway?</p>",
        "id": 214290124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603444716
    }
]