[
    {
        "content": "<p>I need help with the nth derivative of a complex function, f:ℂ-&gt;ℂ, where n is in ℕ.<br>\n<a href=\"/user_uploads/3121/Ctw5rNxeJCfIZwLu9REoHiu1/exponential_sum.lean\">exponential_sum.lean</a><br>\nI got this error:<br>\nexponential_sum.lean:45:2<br>\nfailed to synthesize type class instance for<br>\nk : ℕ+,<br>\nz : ℂ<br>\n⊢ normed_group ℂ<br>\nexponential_sum.lean:45:2<br>\nfailed to synthesize type class instance for<br>\nk : ℕ+,<br>\nz : ℂ<br>\n⊢ nondiscrete_normed_field ℂ</p>\n<p>I suspect this means that no one has implemented the iterated derivative on a complex function before. Please help. How do I show L∃∀N  how to synthesize type class instances for [normed_group ℂ] and [nondiscrete_normed_field ℂ]? Would someone more skilled be interested in implementing this?</p>\n<p>EDIT: I am currently looking at <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes-and-instances\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes-and-instances</a> for the first time. Perhaps the syntax for instances is easier than I suspected.</p>",
        "id": 227883588,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614316260
    },
    {
        "content": "<p>This works, but these need to be formalized and added to mathlib:<br>\ninstance normed_group_complex : normed_group ℂ :=<br>\nbegin<br>\n  sorry<br>\nend</p>\n<p>instance nondiscrete_normed_field_complex : nondiscrete_normed_field ℂ :=<br>\nbegin<br>\n  sorry<br>\nend</p>\n<p>instance normed_space_complex_complex : normed_space ℂ ℂ :=<br>\nbegin<br>\n  sorry<br>\nend</p>",
        "id": 227884441,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614317123
    },
    {
        "content": "<p>in analysis/complex/basic, I found this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"n\">normed_group.of_core</span> <span class=\"n\">ℂ</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_eq_zero_iff</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">abs_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">triangle</span> <span class=\"o\">:=</span> <span class=\"n\">abs_add</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_neg</span> <span class=\"o\">:=</span> <span class=\"n\">abs_neg</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">normed_field</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_eq</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">abs_mul</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">complex.field</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">nondiscrete_normed_field</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">non_trivial</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">norm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 227884458,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1614317156
    },
    {
        "content": "<p>so try importing <code>analysis.complex.basic</code></p>",
        "id": 227884506,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1614317171
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 227884638,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614317335
    },
    {
        "content": "<p>(by the way, the way I found it was by doing a search for <code>nondiscrete_normed_field</code> using the search functionality in VSCode)</p>",
        "id": 227884687,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1614317402
    }
]