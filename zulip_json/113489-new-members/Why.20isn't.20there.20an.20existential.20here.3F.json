[
    {
        "content": "<p>Can I get some help with this proof ? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">open_set_for_each</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">h₀</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Trying to get my set U</span>\n  <span class=\"o\">},</span>\n  <span class=\"c1\">-- have : A = ⋃ (i : A), f i :=</span>\n  <span class=\"c1\">-- {</span>\n\n  <span class=\"c1\">-- }</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Pretty much I'm trying to build my function from <code>A</code> to <code>set X</code> by evaluating h0 at a point a, but I'm running into trouble because after <code>let x : = h0 a</code> my goal  state is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span>\n<span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span>\n<span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊂</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">A</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h₀</span> <span class=\"bp\">↑</span><span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">set</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>but I thought that x would have become <code>∃ (U : set X), is_open U ∧ ↑a ∈ U ∧ U ⊂ A</code> and then I could use that set <code>U</code>...</p>",
        "id": 272615485,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645390245
    },
    {
        "content": "<p>Did you try <code>suggest</code>?</p>",
        "id": 272615848,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645390661
    },
    {
        "content": "<p>Also, you probably meant <code>⊆</code>, not <code>⊂</code></p>",
        "id": 272616038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645390803
    },
    {
        "content": "<p>As suggest will reveal,  your lemma is a repackaging of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open_iff_forall_mem_open\">docs#is_open_iff_forall_mem_open</a></p>",
        "id": 272616171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645390889
    },
    {
        "content": "<p>If you feel this is cheating then you'll have to tell us more about the constraints in your game.</p>",
        "id": 272616184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645390910
    },
    {
        "content": "<p>My goal is to prove it using the fact that the union of open sets is still open</p>",
        "id": 272616889,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645391626
    },
    {
        "content": "<p>So first I want to build that function f which takes an element of <code>A</code> and maps it to the <code>U</code> you would get from <code>h0</code>, then I'll take the union of that function over every <code>i</code> in <code>A</code></p>",
        "id": 272616962,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645391699
    },
    {
        "content": "<p>But the goal state isn't like I expected.</p>",
        "id": 272616975,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645391713
    },
    {
        "content": "<p>You'll want <code>let f</code>, not <code>have</code>, in any case</p>",
        "id": 272617190,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1645391941
    },
    {
        "content": "<p>The first line you want is probably <code>choose! f hf using h₀,</code> then</p>",
        "id": 272617397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645392166
    },
    {
        "content": "<p>The problem you have seems to be related to the difference between sets and types in lean, though. I'd try <code>let x := h\\0 a _,</code>, leaving a proof obligation for a \\in A, and then simp or suggest will probably prove that</p>",
        "id": 272617422,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1645392202
    },
    {
        "content": "<p>But Patrick's suggestion will likely get you more than one step ahead :)</p>",
        "id": 272617495,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1645392271
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">choose</span><span class=\"bp\">!</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">using</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_open_bUnion</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272617544,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645392351
    },
    {
        "content": "<p>I just read the code you actually pasted. There is no way you'll be able to construct data out of that existential without using choice. You can try and you'll get Lean complaining about only being able to eliminate into Prop.</p>",
        "id": 272617929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645392755
    },
    {
        "content": "<p>You can try with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h₀</span> <span class=\"n\">a</span> <span class=\"n\">a.property</span> <span class=\"k\">with</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n\n  <span class=\"o\">},</span>\n  <span class=\"c1\">-- have : A = ⋃ (i : A), f i :=</span>\n  <span class=\"c1\">-- {</span>\n\n  <span class=\"c1\">-- }</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272617947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645392790
    },
    {
        "content": "<p>And this introduces the subtype associated to <code>A</code>, which you should avoid whenever possible. Note how my version features no function defined only on <code>A</code>.</p>",
        "id": 272617974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645392839
    },
    {
        "content": "<p>Thanks for showing me the <code>choose</code> tactic, I managed to get the proof! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">open_set_for_each</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">choose</span><span class=\"bp\">!</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">using</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">ext</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hfp</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hfp.2.1</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span> <span class=\"n\">at</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hi</span> <span class=\"k\">with</span> <span class=\"n\">hia</span> <span class=\"n\">hpfi</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"n\">i</span> <span class=\"n\">hia</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">x.2.2</span> <span class=\"n\">hpfi</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_open_bUnion</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272627436,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645403406
    },
    {
        "content": "<p>Do you have any feedback to shorten the intermediate proof?</p>",
        "id": 272627455,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645403427
    },
    {
        "content": "<p>You can use <code>mem_Union₂</code> instead of <code>mem_Union</code> twice.</p>",
        "id": 272627559,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645403590
    },
    {
        "content": "<p>Here's a way to avoid choice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">open_set_for_each</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Union</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">h₀</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"o\">,</span> <span class=\"n\">hUA</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hUA</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hUA</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">⟩,</span> <span class=\"n\">hpU</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hUA</span> <span class=\"n\">hpU</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_open_bUnion</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">U</span> <span class=\"o\">⟨</span><span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">hU'</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hU'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(If you're unfamiliar with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rintro\">docs#rintro</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rcases\">docs#rcases</a>, they're ways to simplify strings of <code>cases</code>.)</p>",
        "id": 272634458,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645411722
    },
    {
        "content": "<p>(This is actually somewhat similar in spirit to the choice-ful and choice-free proofs of Theorem 1.4 of Andrej Bauer's <a href=\"https://www.ams.org/journals/bull/2017-54-03/S0273-0979-2016-01556-4/\">Five stages of accepting constructive mathematics</a>.)</p>",
        "id": 272637541,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645414751
    },
    {
        "content": "<p>Thanks seeing that way is nice too</p>",
        "id": 272684457,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645448193
    },
    {
        "content": "<p>Yes, I wanted to create the function that was requested but the lemma itself doesn't need choice of course.</p>",
        "id": 272684497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645448223
    },
    {
        "content": "<p>I moved on to a new question</p>\n<p><a href=\"/user_uploads/3121/zI1leCaneRALe-x-FE2wYZf_/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/zI1leCaneRALe-x-FE2wYZf_/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/zI1leCaneRALe-x-FE2wYZf_/image.png\"></a></div><p>I tried to model it like some of the theorems I saw in the docs, but I'ts not completely working out here's what I've gotten to so far</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">intersection_of_topologies</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_space</span> <span class=\"bp\">∩</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Although I know parts of it aren't written correctly...</p>",
        "id": 272684603,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645448283
    },
    {
        "content": "<p>Your conclusion doesn't mean anything (and I would be surprised if Lean accepts to parse it)</p>",
        "id": 272684728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645448347
    },
    {
        "content": "<p>Yeah, I'm trying to figure out how to use this definition <a href=\"/user_uploads/3121/dcqIWjZ_taO3FNlyVPxM5nBs/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dcqIWjZ_taO3FNlyVPxM5nBs/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dcqIWjZ_taO3FNlyVPxM5nBs/image.png\"></a></div><p>in the book, we're saying that this set (the intersection) is a topology on X. But I'm not quite sure how I would write that in terms of the type theory version...</p>",
        "id": 272684961,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645448435
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">intersection_of_topologies</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 272685039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645448475
    },
    {
        "content": "<p>Doesn't the statement we're proving have to talk about <code>f</code> how could <code>topological_space X</code> represent \"the intersection of the topologies is a topology\"?</p>",
        "id": 272685270,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645448618
    },
    {
        "content": "<p>Wait with a goal of <code>topological_space X</code> we're constructing a topology right?</p>",
        "id": 272685596,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645448798
    },
    {
        "content": "<p>I'm still confused as to why we don't need to talk about the intersection in our goal though...</p>",
        "id": 272685630,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645448823
    },
    {
        "content": "<p><code>topological_space X</code> is the type of topologies on X. A term having this type gathers the data of which sets are open with the proofs of the conditions these opens sets must satisfy.</p>",
        "id": 272687368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645449819
    },
    {
        "content": "<p>If you really want to see the intersection sign then you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">intersection_of_topologies</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"n\">t</span><span class=\"o\">},</span>\n  <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 272687512,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645449885
    },
    {
        "content": "<p>and then start each proof with <code>simp_rw [set.mem_Inter, set.mem_set_of_eq],</code> to get back to my formulation.</p>",
        "id": 272687672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645449973
    },
    {
        "content": "<p>Is this definition a proof that the intersection of the topologies is a topology?</p>",
        "id": 272688642,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645450553
    },
    {
        "content": "<p>I thought we would write <code>theorem</code> instead?</p>",
        "id": 272688693,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645450567
    },
    {
        "content": "<p><code>theorem</code> would mean it has only proofs. Here we are combining data (is the first field) with proofs</p>",
        "id": 272688749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645450600
    },
    {
        "content": "<p>mathlib has no way to say that \"<code>T : set (set X)</code> is a topology on <code>X</code>\", other than by building a <code>topological_space</code> structure whose first component is <code>T</code>. In other words, there's no <code>is_topology</code>.</p>",
        "id": 272688976,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645450691
    },
    {
        "content": "<p>Nothing fundamental about that, we just never needed it.</p>",
        "id": 272689001,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645450698
    },
    {
        "content": "<p>Ok, so we have no way of saying <code>is_topology</code>, but so then how do we show something <em>is a topology</em>?</p>",
        "id": 272689110,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645450753
    },
    {
        "content": "<p>As shown above</p>",
        "id": 272689140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645450770
    },
    {
        "content": "<p>So you make a definition?</p>",
        "id": 272689164,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645450785
    },
    {
        "content": "<p>The three sorries in Patrick's example should be filled in with proofs that the family of open sets given in <code>is_open</code> satisfies the correct axioms</p>",
        "id": 272689355,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1645450876
    },
    {
        "content": "<p>So it's a structure definition with one data field (component?) and three proof fields</p>",
        "id": 272689415,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1645450909
    },
    {
        "content": "<p>Ok, I think I'm understanding it a little better now, and this thing <code>is_open : set α → Prop</code> is a function which determines if something is open or not right?</p>",
        "id": 272689637,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645451030
    },
    {
        "content": "<p>Yes.</p>",
        "id": 272689720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645451063
    },
    {
        "content": "<p>But you don't have to use mathlib's way if you only want to do exercises in topology. Nothing prevents you from writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">is_topology</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">univ_op</span> <span class=\"o\">:</span> <span class=\"n\">univ</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inter_op</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">∩</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Union_op</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and playing with it. But you won't have all the lemmas we have about topologies in mathlib.</p>",
        "id": 272689918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645451112
    },
    {
        "content": "<p>So in our scenario our open sets are the ones which are open in all each of the topologies in the family, so that's why you're using <code>∀ i, (f i).is_open s</code> right?</p>",
        "id": 272690056,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645451172
    },
    {
        "content": "<p>You don't even have to use precisely the same wording, you can use:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">is_topology</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Inter_op</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">finite</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">⋂₀</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Union_op</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 272690081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645451181
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/glossary.html#bundled-vs-unbundled\">glossary#bundled-vs-unbundled</a> is briefly useful too</p>",
        "id": 272690174,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645451243
    },
    {
        "content": "<p>Thanks, I'm starting to understand this more - I had never done a proof like that yet so the examples help!</p>",
        "id": 272690272,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645451286
    }
]