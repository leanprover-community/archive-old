[
    {
        "content": "<p>(Carrying this over from a google group post)<br>\nI am trying to understand how to write a simple exhaustive search (in proof space) in Lean.</p>\n<p>-- Suppose I have a finite inductive type, e.g.</p>\n<p>inductive bit : Type<br>\n| zero : bit<br>\n| one : bit</p>\n<p>-- I'd like to prove that among all functions over bits, there exists a constant, i.e.</p>\n<p>lemma exist_constant : \\exist f : bit -&gt; bit, \\all x : bit, f x = x</p>\n<p>-- I'd like to prove this with a tactic that exhaustively check the finitely many possibilities for a function in bit -&gt; bit.</p>\n<p>Is that possible?</p>\n<p>Mario had answered that this is possible, using dec_trivial. Being fairly new to Lean, I need a bit more help: Is there a link to an example usage of dec_trivial? Or part of the documentation/books I should focus on reading?</p>\n<p>Thank you!</p>",
        "id": 194820415,
        "sender_full_name": "Petar Maymounkov",
        "timestamp": 1587483377
    },
    {
        "content": "<p>This looks like the identity function to me, not a constant.<br>\nWouldn't a constant rather be something like this below?<br>\n<code>lemma exist_constant : \\exist f : bit -&gt; bit, \\all x : bit, f x = zero</code></p>",
        "id": 194828313,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1587486722
    },
    {
        "content": "<p>Yes, the name <code>exist_constant</code> isn't exactly right. Also, FYI, you can write Lean code in this chat by enclosing it in triple backticks <code> ``` </code></p>\n<p>The following works for your example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">bit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">bit</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">bit</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">bit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">[</span><span class=\"n\">bit</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">bit</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"bp\">⟨⟩;</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bit</span> <span class=\"bp\">→</span> <span class=\"n\">bit</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bit</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</pre></div>\n\n\n<p>You can read a bit about <code>dec_trivial</code> in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html?highlight=dec_trivial\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html?highlight=dec_trivial\">Theorem Proving in Lean</a> . The idea is that for a closed proposition (no free variables), if Lean can infer an instance that the proposition is decidable, it can evaluate that instance. In this case, there's a library instance that says quantifiers over a finite type are decidable. So we just need to add an instance that shows <code>bit</code> is finite.</p>\n<p>Notice we also use <code>dec_trivial</code> in defining the instance. That's because it's decidable that <code>bit.zero ∈ [bit.zero, bit.one]</code> and <code>bit.one ∈ [bit.zero, bit.one]</code>.</p>",
        "id": 194829935,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587487540
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"295150\">@Petar Maymounkov</span> )</p>",
        "id": 194829954,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587487553
    },
    {
        "content": "<p>We really need to provide <code>@[derive fintype]</code>!</p>",
        "id": 194905207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587546728
    }
]