[
    {
        "content": "<p>I am not very sophisticated at splitting sums or pick a single term out of a sum. Can anyone please give me convenient a way to proving the following eg?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eg</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">I</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246387651,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626627163
    },
    {
        "content": "<p>FYI, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsum\">docs#finsum</a> is different to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum\">docs#finset.sum</a></p>",
        "id": 246387680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626627213
    },
    {
        "content": "<p>I think the best way to pick out a single term, for the moment is to <code>rw ←</code> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.insert_erase\">docs#finset.insert_erase</a> and then <code>rw</code> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod_insert\">docs#finset.prod_insert</a>. (We should really add a convenient shortcut.)</p>",
        "id": 246388066,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626627643
    },
    {
        "content": "<p>For your specific example, I would first rewrite with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_ite\">docs#finset.sum_ite</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_const_zero\">docs#finset.sum_const_zero</a>, then show <code>s.filter ((≠) i) = s.erase i</code> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.filter_ne\">docs#finset.filter_ne</a>. Finish with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_eq_sum_ones\">docs#finset.card_eq_sum_ones</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_erase_of_mem\">docs#finset.card_erase_of_mem</a>.</p>",
        "id": 246388283,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626627869
    },
    {
        "content": "<p>(Note that I didn't know about half of these lemmas, but guessed they existed based on their name!)</p>",
        "id": 246388432,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626628055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> It seems like you potentially have the goal of proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eg'</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">fn</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">I</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In any case, I wanted to try proving this with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.induction_on\">docs#finset.induction_on</a> (which is definitely not the best way), so here's a proof of it.  I found many of the lemmas by guessing names, <code>library_search</code> for specific statements I wrote with <code>have</code>, <code>squeeze_simp</code>, and by consulting the documentation.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fn.symm</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">fn</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eg''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">fn</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">s.card</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s.card</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">s.induction_on</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">s'</span> <span class=\"n\">hx</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">finset.sum</span> <span class=\"n\">s'</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_insert</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_add_distrib</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finset.sum_attach</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">key1</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fn</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">key2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">s'</span><span class=\"o\">),</span> <span class=\"n\">fn</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">hx'</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">ite_eq_right_iff</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_ne_one</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">key1</span><span class=\"o\">,</span> <span class=\"n\">key2</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_id</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_const</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">finset.card_attach</span><span class=\"o\">,</span> <span class=\"n\">nat.smul_one_eq_coe</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finset.sum_attach</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fn.symm</span><span class=\"o\">,</span> <span class=\"n\">key2</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_id</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_const</span><span class=\"o\">,</span> <span class=\"n\">finset.card_attach</span><span class=\"o\">,</span> <span class=\"n\">nat.smul_one_eq_coe</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.card_insert_of_not_mem</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">nat.add_succ_sub_one</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">right_distrib</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">finset.card</span> <span class=\"n\">s'</span><span class=\"o\">)],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_right_inj</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.mul_succ</span><span class=\"o\">],</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">s'.card</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">nat.sub_add_cancel</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finset.card</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat.succ_le_iff.mpr</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eg'</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">fn</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">I</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eg''</span><span class=\"o\">,</span> <span class=\"n\">finset.card_univ</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 246391207,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626632008
    },
    {
        "content": "<p>Cool proof!</p>",
        "id": 246392819,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626634470
    },
    {
        "content": "<p>This is definitely not the best proof <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Compare to this:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eg'''</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">fn</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">I</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_ite</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_ne</span><span class=\"o\">,</span> <span class=\"n\">finset.card_erase_of_mem</span><span class=\"o\">,</span> <span class=\"n\">finset.card_univ</span><span class=\"o\">,</span>\n    <span class=\"n\">finset.mem_univ</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_id</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_mul_left_iff</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_const</span><span class=\"o\">,</span>\n    <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_const_zero</span><span class=\"o\">,</span> <span class=\"n\">nat.smul_one_eq_coe</span><span class=\"o\">],</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 246392824,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626634491
    },
    {
        "content": "<p>(The <code>simp only</code> line started out as <code>simp [fn, finset.sum_ite, finset.filter_ne, finset.card_erase_of_mem, finset.card_univ]</code> before <code>squeeze_simp</code>.)</p>",
        "id": 246392899,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626634618
    },
    {
        "content": "<p>Very nice! Do you have any convenient proof for the original <code>eg</code> without proving the more general one? <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 246392944,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626634684
    },
    {
        "content": "<p>I have not happened to need the general one for my work, but definitely a wonderful backup!</p>",
        "id": 246393093,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626634844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> Maybe try the <code>simp [...]</code> line I just mentioned and see how far it proves it.</p>",
        "id": 246393112,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626634896
    },
    {
        "content": "<p>It goes to the point where I first stuck <code>(finset.filter (λ (x : I), ¬x = j) finset.univ).card = fintype.card I - 1</code>.<br>\nI have known ways to get rid of such things, but they all seem kind of winding.</p>",
        "id": 246393268,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626635105
    },
    {
        "content": "<p>Make sure to take a look at what <code>finset.filter_ne</code> is doing and how it doesn't apply here.</p>",
        "id": 246393343,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626635198
    },
    {
        "content": "<p>This is what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.filter_ne'\">docs#finset.filter_ne'</a> is for -- just add the <code>'</code> to the end of the name of that lemma.  <code>refl</code> will then prove the simplified result.</p>",
        "id": 246393357,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626635231
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eg</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">I</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype.card</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">finset.card_pos.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_ite</span><span class=\"o\">,</span> <span class=\"n\">nat.sub_eq_iff_eq_add</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.filter_ne'</span><span class=\"o\">,</span> <span class=\"n\">finset.card_erase_of_mem</span><span class=\"o\">,</span> <span class=\"n\">finset.card_univ</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n        <span class=\"n\">nat.succ_pred_eq_of_pos</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246393777,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626635790
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eg</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">fn</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">I</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_ite</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_ne'</span><span class=\"o\">,</span> <span class=\"n\">finset.card_erase_of_mem</span><span class=\"o\">,</span> <span class=\"n\">finset.card_univ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 246393860,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626635908
    },
    {
        "content": "<p>short and nice!</p>",
        "id": 246393961,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626636062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Kyle, can you please explain why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eg</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">I</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_ite</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.filter_ne'</span><span class=\"o\">],</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">finset.card_erase_of_mem</span><span class=\"o\">],}</span>\n</code></pre></div>\n<p>the goal but not when changing the final <code>simpa</code> to <code>simp</code>?</p>",
        "id": 246394322,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626636615
    },
    {
        "content": "<p><code>simpa</code> is meant to be the last step of a proof, and it does <code>simp</code> followed by trying to <code>refl</code> or to find a relevant assumption that closes the goal.</p>",
        "id": 246394350,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626636677
    },
    {
        "content": "<p>it's like <code>rwa</code> vs <code>rw</code>.</p>",
        "id": 246394352,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626636687
    },
    {
        "content": "<p>Oh! I forgot <code>simpa</code> uses <code>refl</code>.</p>",
        "id": 246394419,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626636752
    },
    {
        "content": "<p>I think it tries using <code>assumption</code> and then <code>trivial</code>.  <code>trivial</code> knows how to <code>refl</code>.</p>",
        "id": 246394445,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626636822
    },
    {
        "content": "<p>Crucially, simpa can take a <code>using h</code> to try to close the goal with the hypothesis <code>h</code>. And it runs <code>simp</code> on both the goal and the hypothesis <code>h</code>, but no further than necessary.</p>",
        "id": 246394527,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626636958
    }
]