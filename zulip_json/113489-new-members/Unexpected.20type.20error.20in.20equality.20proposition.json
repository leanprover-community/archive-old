[
    {
        "content": "<p>set_option pp.all true<br>\n#reduce eq.refl 0 <br>\n#reduce eq.refl (1-1)<br>\n#check  (eq.refl 0) = (eq.refl 0)               -- this works<br>\n#check  (eq.refl 0) = (eq.refl (1-1))       -- type error!&gt;?&lt;!</p>\n<p>Why&gt;</p>",
        "id": 159255865,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1550975280
    },
    {
        "content": "<p>this also works: <code>#check (eq.refl (0)) = (eq.refl ((1 - 1):â„•))</code></p>",
        "id": 159259178,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550981735
    },
    {
        "content": "<p>Unfortunately I don't know why it needs a type ascription</p>",
        "id": 159259220,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550981774
    },
    {
        "content": "<p>Is it because Lean doesn't know what that zero is? It's just <code>has_zero.zero</code> until you tell it that it's nat's zero</p>",
        "id": 159267578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550997793
    },
    {
        "content": "<p>Or that it doesn't know what that (1-1) is? The preceding lines seem to indicate that all the terms really are equal, so this result is a bit mystifying.</p>",
        "id": 159281431,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1551024790
    },
    {
        "content": "<p>It's an elaborator order problem, as usual. For <code>eq.refl a = eq.refl b</code> to typecheck, <code>a</code> and <code>b</code> must be defeq. These both work:</p>\n<div class=\"codehilite\"><pre><span></span>#check (eq.refl 0) = (eq.refl 0)\n#check (eq.refl (1-1)) = (eq.refl (1-1))\n</pre></div>\n\n\n<p>because lean knows that (0:A) == 0 definitionally and similarly for (1-1:A) == (1-1:A). In particular, it doesn't need to know that <code>A = nat</code> for this to work. Now having successfully elaborated the term, it knows that the statement is <code>(eq.refl (0:?m)) = (eq.refl 0)</code>, and so since there is a numeral with unknown type, lean does its late <code>nat</code> defaulting, setting <code>?m = nat</code>, inferring the typeclass args, and you get what you see in the pp.all.</p>\n<p>In the case <code> (eq.refl 0) = (eq.refl (1-1))</code>, it doesn't work out so well. Lean tries to check <code>(0:A) =?= 1-1</code>, and this fails, because in an arbitrary type with subtraction and 0 and 1 this doesn't necessarily hold by definition. So it fails right here, and never gets to the nat fallback.</p>",
        "id": 159282646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551027027
    },
    {
        "content": "<p>The moral of the story: don't trust nat defaulting. It's a convenience so that <code>#eval 1 + 1</code> does what you expect. You should really think of these terms as having unknown type.</p>",
        "id": 159282705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551027131
    },
    {
        "content": "<p>I think the correct answer is, what on earth are you doing with <code>(eq.refl 0) = (eq.refl (1-1))</code></p>",
        "id": 159282721,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551027240
    },
    {
        "content": "<p>Mario, Thank you very much.  That's was a very helpful answer. I had to read it a few times, but now I understand. </p>\n<p>Kenny, Ha ha. I'm teaching early undergraduates students (400 of them) discrete math using Lean. One of them was dutifully exploring applications of the various principles I've taught them, tried out the example here, and was mystified by the answer.</p>",
        "id": 159444767,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1551205157
    }
]