[
    {
        "content": "<p>I'm trying to use nat.prime.coprime_iff_not_dvd, which has signature nat.prime.coprime_iff_not_dvd : nat.prime ?M_1 → (nat.coprime ?M_1 ?M_2 ↔ ¬?M_1 ∣ ?M_2).  But when I try to call it, I get an \"maximum class-instance resolution depth has been reached\" error, and I have no idea why.</p>",
        "id": 164574647,
        "sender_full_name": "Katherine Cordwell",
        "timestamp": 1556656735
    },
    {
        "content": "<p>We need more context</p>",
        "id": 164574687,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556656785
    },
    {
        "content": "<p>Could you try to get a minimized version of your code, still showing the error, but not much more?</p>",
        "id": 164574747,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556656812
    },
    {
        "content": "<p>I have p and q that are nats and I write<br>\n\"have iffconc: nat.prime p → (nat.coprime p q ↔ ¬ p | q), from apply nat.prime.coprime_iff_not_dvd,\"<br>\nwhich is the line that gives the error message.</p>",
        "id": 164574761,
        "sender_full_name": "Katherine Cordwell",
        "timestamp": 1556656831
    },
    {
        "content": "<p>maybe your p and q are integers</p>",
        "id": 164574811,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1556656896
    },
    {
        "content": "<p>The context says \"p q : ℕ\", so I don't think so?</p>",
        "id": 164574894,
        "sender_full_name": "Katherine Cordwell",
        "timestamp": 1556656942
    },
    {
        "content": "<p>You may have the wrong vertical bar</p>",
        "id": 164574926,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556656978
    },
    {
        "content": "<p>right, make sure that it is <code>\\|</code></p>",
        "id": 164574947,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1556656993
    },
    {
        "content": "<p>which results in a different bar than <code>|</code></p>",
        "id": 164574959,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1556657008
    },
    {
        "content": "<p>Oh great, that fixed it!  Thanks so much</p>",
        "id": 164574983,
        "sender_full_name": "Katherine Cordwell",
        "timestamp": 1556657041
    },
    {
        "content": "<p>also, <code>from apply</code> doesn't mean anything</p>",
        "id": 164575030,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556657046
    },
    {
        "content": "<p>No problem. Welcome to Lean Zulip!</p>",
        "id": 164575044,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556657063
    },
    {
        "content": "<p>The vertical bar thing drives me nuts. I've been using this notation for years and I still mix the two up periodically. It never sticks in my brain.</p>",
        "id": 164575392,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556657392
    },
    {
        "content": "<p>to tack onto this question, what exactly <em>does</em> the \"maximum class-instance resolution depth has been reached\" error message mean, in general? Every time I see it I know it just means I have a type error <em>somewhere</em> but the error never helps me find it and part of that is because I don't know what it means.</p>",
        "id": 164577311,
        "sender_full_name": "Travis Hance",
        "timestamp": 1556658746
    },
    {
        "content": "<p>Do you know the basics of the type class system?</p>",
        "id": 164577353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556658795
    },
    {
        "content": "<p>What it actually means is that Lean was trying to solve a typeclass problem, and it failed because it gave up</p>",
        "id": 164577361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556658800
    },
    {
        "content": "<p>because things weren't looking good</p>",
        "id": 164577370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556658811
    },
    {
        "content": "<p>What is misleading about the message is that sometimes Lean is trying to solve a completely random problem which you had no intention of making it solve; that's what was happening above.</p>",
        "id": 164577438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556658848
    },
    {
        "content": "<p>The real error was some subtle syntax error (<code>|</code> instead of <code>\\|</code>) and Lean got completely confused; the error message was ultimately irrelevant.</p>",
        "id": 164577501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556658915
    },
    {
        "content": "<p>yeah Lean can work on its error messages</p>",
        "id": 164577751,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1556659121
    },
    {
        "content": "<p>The <code>|</code> indicates the end of something, so Lean was faced with <code>¬ p</code> with <code>p : nat</code></p>",
        "id": 164577788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556659166
    },
    {
        "content": "<p>but again, [insert saying about how it's easy to complain]</p>",
        "id": 164577793,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1556659168
    },
    {
        "content": "<p>If you had to choose three error messages that you want to be more informative, which ones would it be?</p>",
        "id": 164577808,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556659185
    },
    {
        "content": "<p>Error message craft is highly non-trivial. In this case I would say that maximal depth error message would be much easier if it included an indication of what type class problem it failed to solve</p>",
        "id": 164577871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556659210
    },
    {
        "content": "<p>That one would certainly be in my top 3</p>",
        "id": 164577886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556659230
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">maximum class-instance resolution depth has been reached yada yada</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 164577930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556659271
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- import data.nat.prime</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  ¬p</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  p</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ℕ</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Prop</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 164577954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556659294
    },
    {
        "content": "<p>Excellent. How would you feel about a sort of introductory paragraph (or link to one) about type class search, instance problem and the main candidates tried?</p>",
        "id": 164577967,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556659309
    },
    {
        "content": "<p>So it's the import which causes it, on this occasion. Of course, the input is garbage</p>",
        "id": 164577984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556659321
    },
    {
        "content": "<p>Whenever I see it I assume it's user error (i.e. my fault) rather than Lean actually failing to do type class inference</p>",
        "id": 164578062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556659353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> It might be worth opening an issue to start pitching specific improvements</p>",
        "id": 164578078,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556659367
    },
    {
        "content": "<p>Simon, I don't understand. Do you mean you want a link in the error message?</p>",
        "id": 164578239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556659470
    },
    {
        "content": "<p>opening an issue where?</p>",
        "id": 164578251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556659476
    },
    {
        "content": "<p>In the community fork?</p>",
        "id": 164578264,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556659484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219422\">@Travis Hance</span> the answer to your question is that there's a thing called typeclass inference, which is invoked whenever you leave out an input to a function but the input is in <code>[]</code> square brackets. Lean invokes an algorithm called the type class inference algorithm, which searches through a database trying to find the term you didn't supply explicitly. If the algorithm is called accidentally then of course it can fail -- the unhelpful error message just means \"you called typeclass inference and it didn't work\"</p>",
        "id": 164578309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556659523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> yes community fork. And the link I'm talking about is like Rust errors: <a href=\"https://doc.rust-lang.org/edition-guide/rust-2018/the-compiler/improved-error-messages.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/edition-guide/rust-2018/the-compiler/improved-error-messages.html\">https://doc.rust-lang.org/edition-guide/rust-2018/the-compiler/improved-error-messages.html</a></p>",
        "id": 164578499,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556659659
    },
    {
        "content": "<p>When you have an error in Rust, it gives you a rule number and if you query the compiler about that rule it explains why it's there.</p>",
        "id": 164578564,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556659690
    },
    {
        "content": "<p>Printing the failing problem would be nice. But a lot of time time, the question isn't really which problem it failed to solve, it's why the search went deep before failing.</p>",
        "id": 164578570,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556659701
    },
    {
        "content": "<p>In this case Lean saw <code>¬ p</code> and thought \"hmm, <code>p</code> is a natural and it's supposed to be a proposition, that must mean that there is a coercion from naturals to propositions, I'll pass that over to the type class inference system because that handles coercions, and I'll leave it looking for a natural map from natural numbers to true/false statements\". Lean fails to find that natural map, because nobody told Lean such a map, but unfortuately along the way it gets very keen on the idea of using <code>canonically_ordered_comm_semiring</code> in some way, and ends up in an infinite loop.</p>",
        "id": 164578574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556659706
    },
    {
        "content": "<p>In Kevin's example, the culprit is <code>with_top.canonically_ordered_comm_semiring</code> looping for some reason.</p>",
        "id": 164578587,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556659715
    },
    {
        "content": "<p>The garbage out is because of the garbage input -- trying to coerce a natural to a proposition.</p>",
        "id": 164578612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556659751
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">canonically_ordered_comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">canonically_ordered_comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>in <code>ordered_ring</code>, which for some reason is being imported by <code>data.nat.prime</code></p>",
        "id": 164578722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556659828
    },
    {
        "content": "<p>Oh my God. When I read Kevin's message I thought it was a joke, because we suffered of lot with <code>with_zero</code> and ordered commutative monoids in the perfectoid project. But it seems <code>with_top.canonically_ordered_comm_semiring</code> is indeed involved here</p>",
        "id": 164578796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556659909
    },
    {
        "content": "<blockquote>\n<p>Printing the failing problem would be nice. But a lot of time time, the question isn't really which problem it failed to solve, it's why the search went deep before failing.</p>\n</blockquote>\n<p>I think what you ask is complicated. Displaying the failing problem would already be immensely useful</p>",
        "id": 164578872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556659963
    },
    {
        "content": "<p>for instance, you could see immediately that Lean went looking for a coercion from nat to Prop in that case</p>",
        "id": 164578902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556659987
    },
    {
        "content": "<p>I agree, that would be a good start</p>",
        "id": 164578937,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556660041
    },
    {
        "content": "<p><code>data.nat.basic</code> imports <code>algebra.ordered_ring</code> which contains the offending instance.</p>",
        "id": 164578996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556660061
    },
    {
        "content": "<p>Is that in mathlib? Is it universally problematic?</p>",
        "id": 164579017,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556660101
    },
    {
        "content": "<p>Yes this is all mathlib</p>",
        "id": 164579032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556660114
    },
    {
        "content": "<p>It doesn't sound quite right that basics of natural numbers involves canonically ordered commutative semi-ring. That must be my mathematician bad habits...</p>",
        "id": 164579040,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556660131
    },
    {
        "content": "<p>it's OK, I don't think data.nat.basic is used very much</p>",
        "id": 164579048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556660137
    },
    {
        "content": "<p>sounds pretty obscure to me</p>",
        "id": 164579082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556660163
    },
    {
        "content": "<p>to be honest I am extremely surprised I didn't see this loop earlier</p>",
        "id": 164579132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556660189
    },
    {
        "content": "<blockquote>\n<p>If you had to choose three error messages that you want to be more informative, which ones would it be?</p>\n</blockquote>\n<p><code>deterministic timeout</code> was my <a href=\"https://github.com/leanprover-community/mathlib/issues/1\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1\">#1</a> choice last week when we were in perfectoid hell</p>",
        "id": 164579291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556660352
    },
    {
        "content": "<p>It should have said \"just change that <code>Type*</code> to <code>Type u</code> and I'll stop complaining\"</p>",
        "id": 164579312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556660378
    },
    {
        "content": "<blockquote>\n<p>I think what you ask is complicated. Displaying the failing problem would already be immensely useful</p>\n</blockquote>\n<p>Oh, of course. \"Why the search went deep\" doesn't really have a well-defined answer. Printing the failing target is helpful when you accidentally invoke type class problems, and it's simple enough to do. But in that situation, you often don't want type class inference to time out, you want it to fail fast. It would be better to see a standard type checking error there than any kind of type class message.</p>",
        "id": 164579328,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556660397
    },
    {
        "content": "<p>Without the import you get the standard typechecking error, as you know</p>",
        "id": 164579398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556660430
    },
    {
        "content": "<p>Right. That instance is worrying. It seems like there are too many metavariables for it to be applied here, so I'm not sure exactly why it's looping.</p>",
        "id": 164579513,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556660565
    },
    {
        "content": "<p>But it's late, I'm exhausted, not gonna investigate now.</p>",
        "id": 164579520,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1556660580
    },
    {
        "content": "<p>Have a good night! (I should go to bed too)</p>",
        "id": 164579552,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556660608
    },
    {
        "content": "<p>There is nothing wrong with that instance as written. I assume it is trying to solve a <code>canonically_ordered_comm_semiring ?</code> kind of problem?</p>",
        "id": 164585031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556665745
    },
    {
        "content": "<p>Here's an abbreviated trace:</p>\n<div class=\"codehilite\"><pre><span></span>[class_instances]  class-instance resolution trace\n[class_instances] (0) ?x_3 : has_coe_to_sort ℕ := @coe_sort_trans ?x_5 ?x_6 ?x_7 ?x_8\n[class_instances] (1) ?x_7 : has_coe_t_aux ℕ ?x_6 := @coe_base_aux ?x_9 ?x_10 ?x_11\n[class_instances] (2) ?x_11 : has_coe ℕ ?x_10 := @nat.cast_coe ?x_14 ?x_15 ?x_16 ?x_17\n[class_instances] (3) ?x_16 : has_one (with_zero ?x_18) := @with_zero.has_one ?x_24 ?x_25\n[class_instances] (4) ?x_25 : has_one ?x_24 := @with_top.has_one ?x_26 ?x_27 ?x_28\n[class_instances] (5) ?x_27 : canonically_ordered_comm_semiring ?x_26 := @with_top.canonically_ordered_comm_semiring ?x_29 ?x_30 ?x_31 ?x_32 ?x_33\n[class_instances] (6) ?x_30 : canonically_ordered_comm_semiring ?x_29 := @with_top.canonically_ordered_comm_semiring ?x_34 ?x_35 ?x_36 ?x_37 ?x_38\n...\n</pre></div>\n\n\n<p>The problem is a confusion of whether typeclass parameters are supposed to be input or output parameters. The <code>canonically_ordered_comm_semiring</code> instance assumes it will only ever be called on a concrete type, so the metavariable indicates the problem lies elsewhere. Similarly, <code>with_zero.has_one</code> assumes it is being called on a concrete type. So we must conclude that for <code>nat.cast_coe</code> to work correctly, it must only be called on concrete types. But that's not how the <code>coe</code> instances work, in particular <code>coe_sort_trans</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">coe_sort_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t_aux</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u₂</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u₁</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>This is an instance which invents <code>b</code> from nothing, as a metavariable. It solves <code>has_coe_to_sort a</code> by trying to solve <code>has_coe_t_aux a ?b</code> (which quickly boils down to solving <code>has_coe a ?b</code>) and then if that is successful it looks for <code>has_coe_to_sort b</code>. This kind of forward searching doesn't work with the mathlib instances, since you can't enumerate all the types which have coercions from nat (there are infinitely many). In fact due to the DFS search order it never gets around to checking any of them and instead builds infinitely large instances and overflows.</p>",
        "id": 164587381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556668391
    },
    {
        "content": "<p>It would be nice if type class inference stops when its argument is a metavariable (note: I'm not saying it should stop when its argument <em>contains</em> a metavariable), so that <code>nat.cast_coe</code> would just fail, because the type class inference gives up once it has to find an instance of <code>has_one ?x</code>. If we ever rely on type class inference continuing in these cases, we should just provide more information.</p>",
        "id": 164589824,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1556671219
    },
    {
        "content": "<p>We could have a marker <code>in_param</code> that says \"this argument must be a concrete type for this to trigger\", or at least it shouldn't instantiate a metavariable in this slot. Better yet, it seems like this should be the default behavior for anything other than <code>out_param</code></p>",
        "id": 164590476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556672045
    },
    {
        "content": "<p>In this case, that means that <code>canonically_ordered_comm_semiring ?x_26 := @with_top.canonically_ordered_comm_semiring </code> would not unify, because the metavar <code>?x_26</code> is treated as a constant</p>",
        "id": 164590506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556672103
    },
    {
        "content": "<p>Of course this sort of defeats the purpose of using a metavariable to begin with, but like I said, <code>has_coe</code> seems confused about whether its inputs are outputs or not</p>",
        "id": 164590604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556672270
    },
    {
        "content": "<p><code>coe_sort_trans</code> seems like a very suspicious instance</p>",
        "id": 164590660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556672331
    },
    {
        "content": "<p>Still on the thread of weird error messages, why might Lean be giving me an \"unexpected end of comment block\" error on a blank line?</p>",
        "id": 164592799,
        "sender_full_name": "Katherine Cordwell",
        "timestamp": 1556675456
    },
    {
        "content": "<p>Hmm never mind I solved it--an earlier comment was causing problems and the error message just manifested on an unrelated line.</p>",
        "id": 164592819,
        "sender_full_name": "Katherine Cordwell",
        "timestamp": 1556675507
    },
    {
        "content": "<p>the location of this error could be improved (logically it should go on the comment open token, or the entire unclosed comment region)</p>",
        "id": 164592967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556675672
    },
    {
        "content": "<p>Mostly what threw me off was that there were several (correct) theorems between the problematic comment and the error message.</p>",
        "id": 164593199,
        "sender_full_name": "Katherine Cordwell",
        "timestamp": 1556675991
    },
    {
        "content": "<p>Error messages are not the best in Lean 3. I remember realising how much better I had become at fixing up my own code when I had started getting the hang of working out what they were actually telling me. Another tip: don't try and debug the third error message -- the problem might be the unintended chaos caused by the first one.</p>",
        "id": 164604684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556693230
    },
    {
        "content": "<p>That's generally true in any programming language, I think. Compilers try their best to recover from an error but it's rarely successful</p>",
        "id": 164605075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556693921
    }
]