[
    {
        "content": "<p>Is there a changelog or mathlib? I keep finding breaking changes have been made since a tutorial I've been following from 2020 was posted (seems like lots of things get renamed in mathlib so code breaks), but the major version of mathlib doesn't change. Is there a list of breaking changes somewhere? It seems like mathlib doesn't follow semantic versioning?</p>",
        "id": 288918851,
        "sender_full_name": "David Chanin",
        "timestamp": 1657273458
    },
    {
        "content": "<p>It's <a class=\"stream\" data-stream-id=\"116290\" href=\"/#narrow/stream/116290-rss\">#rss</a> :-)</p>",
        "id": 288919222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657273746
    },
    {
        "content": "<p>I absolutely agree that mathlib subscribes to the \"move fast and break things\" approach. If whatever you are following is a properly-formatted Lean project then changes in mathlib shouldn't matter though, because the project should be tied to a version of mathlib which will be compatible with it.</p>",
        "id": 288919372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657273841
    },
    {
        "content": "<p>I'm just trying to follow along with a video tutorial (actually created by you! Thank you so much for these!), so no way to check the version of mathlib. I'd also like to be on the recent version in general though. Move fast and break things is OK as long as it's all documented what's going on I think. So there's no way to tell what breaking changes have happened in each version release, aside from scrolling through Zulip and hoping it's mentioned somewhere in the past? There are automated systems to enforce this, like <a href=\"https://github.com/semantic-release/semantic-release\">https://github.com/semantic-release/semantic-release</a> will keep updating a CHANGELOG file in the repo with all the changes at every release, and note if they're breaking changes, etc.</p>",
        "id": 288919918,
        "sender_full_name": "David Chanin",
        "timestamp": 1657274218
    },
    {
        "content": "<p>If I could just search a \"CHANGELOG\" file for the term \"findim\" for example and discover that it's been renamed to \"finrank\" that would be amazing</p>",
        "id": 288920050,
        "sender_full_name": "David Chanin",
        "timestamp": 1657274295
    },
    {
        "content": "<p>Would searching the git log be good enough for you? In principle, such renames should be mentioned in the commit messages. Although sometimes something might slip through.</p>",
        "id": 288920308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657274442
    },
    {
        "content": "<p>An automated alternative would be to use bisection to upgrade mathlib \"as far as possible\" (\"does it build at commit X\" is not necessarily a monotone function, but probably close enough), then show the commit message for the breaking commit, ask the user to fix the breakage manually, and repeat until you reached master.</p>",
        "id": 288920321,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1657274457
    },
    {
        "content": "<p>I'd rather not need to clone the git repo and search commit messages. A simple CHANGELOG file is indexable by Google too, so in this case if I searched for \"Lean findim\" it would have come up with the changelog entry, saying something like \"vx.y.z findim was renamed to finrank\".</p>",
        "id": 288920507,
        "sender_full_name": "David Chanin",
        "timestamp": 1657274594
    },
    {
        "content": "<p>Re <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span>: That sounds like it could be extremely time consuming, given how long it takes to build mathlib</p>",
        "id": 288920511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657274596
    },
    {
        "content": "<p>... except that all you need is to get the cache.</p>",
        "id": 288920615,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657274664
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 288920655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657274697
    },
    {
        "content": "<p>I would still prefer to merge multiple bumps in one go.</p>",
        "id": 288920685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657274708
    },
    {
        "content": "<p>Are the mathlib releases automated in github actions or another CI? If so it's pretty easy to add an automated step to append the new version to a CHANGELOG file in the git repo with the version number and add all the commit messages for the version into it too</p>",
        "id": 288920698,
        "sender_full_name": "David Chanin",
        "timestamp": 1657274715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479618\">@David Chanin</span> mathlib is very much rolling release (similar to Archlinux, eg). Almost every commit breaks something.</p>",
        "id": 288920729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657274739
    },
    {
        "content": "<p>So the CHANGELOG would almost be a concatenation of all the commit messages.</p>",
        "id": 288920747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657274759
    },
    {
        "content": "<p><code>git log -Slemma_that_used_to_exist</code> does require you to clone the repo but will be far more useful than a human written change log, it searches the actual changes themselves. There are way too many changes to small things all the time in mathlib than a changelog would cover.</p>",
        "id": 288920797,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1657274767
    },
    {
        "content": "<p>Is there a versioning philosophy at least? It seems like it's not semantic versioning?</p>",
        "id": 288920822,
        "sender_full_name": "David Chanin",
        "timestamp": 1657274792
    },
    {
        "content": "<p>No, there's no versioning at all. It is rolling release.</p>",
        "id": 288920840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657274809
    },
    {
        "content": "<p>Many of us view mathlib as a huge experiment. Not necessarily a product to build upon. But that might change in the future.</p>",
        "id": 288920898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657274851
    },
    {
        "content": "<p>There is versioning, for instance my project shows I'm on Mathlib 3.44.1.</p>",
        "id": 288920900,
        "sender_full_name": "David Chanin",
        "timestamp": 1657274855
    },
    {
        "content": "<p>Aah, ok. But that just mirrors the lean release.</p>",
        "id": 288920928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657274876
    },
    {
        "content": "<p>oh wait nm that's just lean, you're right</p>",
        "id": 288920937,
        "sender_full_name": "David Chanin",
        "timestamp": 1657274882
    },
    {
        "content": "<p>Lean does sorta follow semver.</p>",
        "id": 288921002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657274908
    },
    {
        "content": "<p>there's no versioning at all? This can all be automated really easily, there's plugins like <a href=\"https://github.com/conventional-changelog/standard-version\">standard-version</a> and <a href=\"https://github.com/semantic-release/semantic-release\">semantic-release</a> will manage the semantic versioning, keep a changelog, and push a new git tag for each new merge to master, all based on the commit message</p>",
        "id": 288921161,
        "sender_full_name": "David Chanin",
        "timestamp": 1657275020
    },
    {
        "content": "<p>semantic versioning in a Lean context is <em>very</em> hard. You have to understand, that unlike in other programming languages where the API and the behaviour matters in Lean the implementation of every function matters as well because they can be unfolded in proofs in other people's libraries and are thus part of the semantic of your library as well (if you change the implementation someone elses proof might not work). So technically speaking every change to a function or thing that can be unfolded from a consumer of your library is a breaking change.</p>",
        "id": 288921268,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657275116
    },
    {
        "content": "<p>Even if it's not semantic versioning, a version number would still be nice I think. Then I could say I'm on mathlib v321, and on v319 something was renamed etc</p>",
        "id": 288921442,
        "sender_full_name": "David Chanin",
        "timestamp": 1657275232
    },
    {
        "content": "<p>Perhaps what we should actually do is make a tool that takes in two mathlib revisions, and outputs a diff of the changed API surface</p>",
        "id": 288921661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657275365
    },
    {
        "content": "<p>Which would look something like:</p>\n<ul>\n<li>Fetch a cache for revision A, export a list of all symbols</li>\n<li>Fetch a cache for revision B, export a list of all symbols</li>\n<li>Compute a diff of just the lemma names (matching type information is very hard as <code>A</code> and <code>B</code> might define the types themselves in different ways</li>\n</ul>",
        "id": 288921758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657275460
    },
    {
        "content": "<p>That wouldn't tell you which lemmas were renamed, but would tell you \"<code>foo_of_bar</code> was added and <code>foo</code> was removed\"</p>",
        "id": 288921835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657275501
    },
    {
        "content": "<p>Elm does have a feature like this: <a href=\"https://elm-lang.org/\">https://elm-lang.org/</a> (3rd from the bottom)</p>",
        "id": 288921887,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657275553
    },
    {
        "content": "<p>That would be helpful, but could it be automated and written to a CHANGELOG after each push to master?</p>",
        "id": 288921898,
        "sender_full_name": "David Chanin",
        "timestamp": 1657275569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I guess the docs already contain a list of all names. Can that be reused for your idea?</p>",
        "id": 288922067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657275677
    },
    {
        "content": "<p>I can open a PR on mathlib adding standard version as a Github action that will just do the git version tagging and update a integer as the version if it's easier to discuss there / if people are OK with that idea?</p>",
        "id": 288922070,
        "sender_full_name": "David Chanin",
        "timestamp": 1657275679
    },
    {
        "content": "<p>Is there any argument for not having a version number and a changelog if it's all automatic?</p>",
        "id": 288922101,
        "sender_full_name": "David Chanin",
        "timestamp": 1657275715
    },
    {
        "content": "<p>What's the point in havinga a version number vs using the git hash, if every commit is a new version?</p>",
        "id": 288922178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657275755
    },
    {
        "content": "<p>We did have a discussion like this in the Lean 4 chat before. The argument there was basically that due to the reasons outlined above the version number does carry no meaning.</p>",
        "id": 288922190,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657275768
    },
    {
        "content": "<p>It's slightly easier to compare two integers vs two git hashes.</p>",
        "id": 288922216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657275798
    },
    {
        "content": "<p>Would this mean that every time a new PR is merged into master, this file gets updated?  This seems very close to the gitlog of master.</p>",
        "id": 288922224,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657275805
    },
    {
        "content": "<p>You can use <code>git describe</code> to convert a git hash into something reasonable I think</p>",
        "id": 288922230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657275816
    },
    {
        "content": "<p>Although that probably fails spectacularly since all of our feature branches are in the main repo and not a fork</p>",
        "id": 288922235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657275831
    },
    {
        "content": "<p>(My comment is not meant as a critique, just to try to understand what is being discussed!)</p>",
        "id": 288922303,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657275863
    },
    {
        "content": "<p>the difference is that casual users don't want to have to do a git clone, copy git hashes, and run CLI tools to tell what's changing / what version they're on</p>",
        "id": 288922304,
        "sender_full_name": "David Chanin",
        "timestamp": 1657275865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/288922067\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> I guess the docs already contain a list of all names. Can that be reused for your idea?</p>\n</blockquote>\n<p>Yes, but the history of past documentation sites is discarded</p>",
        "id": 288922323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657275874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479618\">David Chanin</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/288922304\">said</a>:</p>\n<blockquote>\n<p>the difference is that casual users don't want to have to do a git clone, copy git hashes, and run CLI tools to tell what's changing / what version they're on</p>\n</blockquote>\n<p>But if they;re \"on\"  a version then they have already git cloned it?</p>",
        "id": 288922344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657275899
    },
    {
        "content": "<p>They probably don't know that though. For example I just did \"leanproject new\" and it did stuff, I didn't know it was cloning a git repo</p>",
        "id": 288922390,
        "sender_full_name": "David Chanin",
        "timestamp": 1657275933
    },
    {
        "content": "<p>It would also just be nice to see that something isn't working, and you could ask \"what mathlib version are you on?\" Then you'd be able to say \"oh, you're on v127, but the most recent is v219\" compared to \"I'm on git hash 1as2d3e3324423d\"</p>",
        "id": 288922546,
        "sender_full_name": "David Chanin",
        "timestamp": 1657276043
    },
    {
        "content": "<p>So maybe the log could simply translate the git hashes into consecutive numbers.  Is this what you are proposing?</p>",
        "id": 288922628,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657276097
    },
    {
        "content": "<p>Would a <code>leanproject show-upgrades</code> command that printed \"your mathlib is &lt;n&gt; commits behind master\" help?</p>",
        "id": 288922663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657276130
    },
    {
        "content": "<p>(I have gotten used to the git hashes, by now, but I agree that as a beginner, I would have rather seen a number.)</p>",
        "id": 288922667,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657276133
    },
    {
        "content": "<p>Theoretically this sounds nice but in practice this is not what is happening. The answer to a question in practice is never \"you are on version x and need to be on version y\", the answer is always \"update mathlib to current master\".</p>",
        "id": 288922683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657276144
    },
    {
        "content": "<p>yes, and be a single file which could be indexed by google, and also submit a git tag with the version number as well which would show up in \"releases\" on github</p>",
        "id": 288922704,
        "sender_full_name": "David Chanin",
        "timestamp": 1657276159
    },
    {
        "content": "<p>Of course, since the updates happen every ~2 hours, the numbers will get very big quickly, I think!</p>",
        "id": 288922714,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657276167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/288922683\">said</a>:</p>\n<blockquote>\n<p>Theoretically this sounds nice but in practice this is not what is happening. The answer to a question in practice is never \"you are on version x and need to be on version y\", the answer is always \"update mathlib to current master\".</p>\n</blockquote>\n<p>But in this case all old proofs will be broken with no way to know what</p>",
        "id": 288922905,
        "sender_full_name": "David Chanin",
        "timestamp": 1657276288
    },
    {
        "content": "<p>Currently, there are 63132 \"versions\" of mathlib.</p>",
        "id": 288922919,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657276300
    },
    {
        "content": "<p>That's how we roll</p>",
        "id": 288922926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657276303
    },
    {
        "content": "<p>I don't think tagged releases make sense at all if they're triggered on every commit. We could do them monthly in sync with the \"this month in mathlib\" posts, but as Kevin says this isn't useful information</p>",
        "id": 288922938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657276318
    },
    {
        "content": "<p>If something is broken, just ask here.</p>",
        "id": 288922941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657276319
    },
    {
        "content": "<p>I think this is an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem; your X problem is \"how do I work out why a mathlib update broke me\", to which you've constructed the Y problem \"can mathlib have better version information\"</p>",
        "id": 288923034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657276378
    },
    {
        "content": "<p>In the grand scheme of things, this is an experimental project with a small number of users and a friendly community who are happy to help out people with broken proofs.</p>",
        "id": 288923043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657276384
    },
    {
        "content": "<p>I think the actual solution to X is \"we need to make tooling (or at least documentation on existing tools) to help with this kind of thing, because the development methodology of mathlib makes conventional versioning useless\"</p>",
        "id": 288923088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657276424
    },
    {
        "content": "<p>Also, maybe it should be made more explicit that tutorials/videos/documentation often are tied to a very specific state (rather than version :) of mathlib and that the current one may not work the same way.</p>",
        "id": 288923324,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657276579
    },
    {
        "content": "<p>It's true you all are amazing and super helpful! I just feel like this will hold the project back. As a new user myself I find it really discouraging when I can't follow Lean tutorials without getting errors, then I can't google those errors and find a simple solution like \"findim was renamed to finrank in version X\", and need to know to come ask in Zulip</p>",
        "id": 288923328,
        "sender_full_name": "David Chanin",
        "timestamp": 1657276584
    },
    {
        "content": "<p>I understand your point, but besides name changes, there will be changes in which arguments are implicity/explicit, proofs that now require fewer assumptions, changes in namespaces, lemmas that became redundant due to better use of typeclasses...</p>\n<p>While what you are suggesting seems to work in a special case, I am skeptical that it would really be useful in the long run.</p>",
        "id": 288923500,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657276708
    },
    {
        "content": "<p>In the long run, you will not be working on tutorials and will ask a question here about what can currently be done in mathlib, and you will not even think of checking out an old version.  At least, I never checked out an older version of mathlib...</p>",
        "id": 288923540,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657276754
    },
    {
        "content": "<p>Btw, fixing (slightly) broken proofs is also very good practice for coming up with completely novel proofs: they start as <em>completely</em> broken and your task is to fix them!</p>",
        "id": 288923645,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657276819
    },
    {
        "content": "<p>This is true, but only if new users aren't immediately discouraged when they try to start learning Lean by issues like this.</p>",
        "id": 288923677,
        "sender_full_name": "David Chanin",
        "timestamp": 1657276842
    },
    {
        "content": "<p>This is where the welcoming community comes in!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 288923711,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657276862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479618\">David Chanin</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/288923328\">said</a>:</p>\n<blockquote>\n<p>It's true you all are amazing and super helpful! I just feel like this will hold the project back. As a new user myself I find it really discouraging when I can't follow Lean tutorials without getting errors, then I can't google those errors and find a simple solution like \"findim was renamed to finrank in version X\", and need to know to come ask in Zulip</p>\n</blockquote>\n<p>This sounds like a problem with those tutorials. The right way to write a lean tutorial is to start with \"open this project that I created for you that refers to a specific version of mathlib that matches the one the tutorial will be using\". <a href=\"https://github.com/leanprover-community/tutorials\">https://github.com/leanprover-community/tutorials</a> does things this way.</p>",
        "id": 288923778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657276912
    },
    {
        "content": "<p>Maybe I can make a cron job that updates a Gist every time there's a new commit to mathlib master with this information. I really like <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s idea of saying which lemmas were added, which were deleted as well to at least get a text log of this stuff</p>",
        "id": 288923846,
        "sender_full_name": "David Chanin",
        "timestamp": 1657276945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479618\">David Chanin</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/288923846\">said</a>:</p>\n<blockquote>\n<p>Maybe I can make a cron job that updates a Gist every time there's a new commit to mathlib master with this information. I really like <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>'s idea of saying which lemmas were added, which were deleted as well to at least get a text log of this stuff</p>\n</blockquote>\n<p>I think this would be a great idea, but I suspect it's  more total man hours than just working out things manually every time things move. If building it interests you, go for it!</p>",
        "id": 288923909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657277009
    },
    {
        "content": "<p>It wouldn't just be for me though, that would allow Google to index this info and the next use who searches \"Lean findim\" in Google will find the Gist, and see a commit where \"findim\" was remoned and \"finrank\" was added</p>",
        "id": 288924007,
        "sender_full_name": "David Chanin",
        "timestamp": 1657277060
    },
    {
        "content": "<p>I'll give it a try and see if I can get something simple working</p>",
        "id": 288924030,
        "sender_full_name": "David Chanin",
        "timestamp": 1657277090
    },
    {
        "content": "<p>Unfortunately, the type of lean code you need to write to do that kind of thing is rather short on tutorial content</p>",
        "id": 288924140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657277167
    },
    {
        "content": "<p>Here's a script I wrote recently that  makes a list of all function names and writes their file and line numbers to a <code>.tex</code> file, in case that helps you: <a href=\"https://github.com/eric-wieser/lean-graded-rings/blob/master/export.lean\">https://github.com/eric-wieser/lean-graded-rings/blob/master/export.lean</a></p>",
        "id": 288924170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657277197
    },
    {
        "content": "<p>I was thinking of just using regexes <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 288924174,
        "sender_full_name": "David Chanin",
        "timestamp": 1657277199
    },
    {
        "content": "<p>aah awesome, thanks so much!</p>",
        "id": 288924181,
        "sender_full_name": "David Chanin",
        "timestamp": 1657277212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479618\">David Chanin</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/288924174\">said</a>:</p>\n<blockquote>\n<p>I was thinking of just using regexes <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>That doesn't work, these two code snippets have the same API:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo_fst</span> <span class=\"o\">:</span> <span class=\"n\">foo.fst</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo_snd</span> <span class=\"o\">:</span> <span class=\"n\">foo.snd</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 288924245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657277258
    },
    {
        "content": "<p>(behind the scenes <code>@[simps]</code> is generating code)</p>",
        "id": 288924261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657277275
    },
    {
        "content": "<p>hrm yeah no idea what that code means <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 288924356,
        "sender_full_name": "David Chanin",
        "timestamp": 1657277341
    },
    {
        "content": "<p><code>to_additive</code> is another source of \"invisible\" lemmas.</p>",
        "id": 288924360,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657277344
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leancrawler\">https://github.com/leanprover-community/leancrawler</a> might be another option</p>",
        "id": 288924368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657277353
    },
    {
        "content": "<p>I'll check it out! Thank you all so much!</p>",
        "id": 288924687,
        "sender_full_name": "David Chanin",
        "timestamp": 1657277562
    },
    {
        "content": "<p>David, you need to unlearn what you think you know about versioning. It simply doesn't apply here. You should also stop trying to follow video tutorials and use our written tutorials which suffer from none of these issues. There is simply no way we can have useful video tutorials, the project is moving too fast.</p>",
        "id": 288930542,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1657281733
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/learn.html\">learning resources webpage</a> contains links towards the tutorial project, the \"Theorem proving in Lean\" and the book in progress \"Mathematics in Lean\". They are all pinned to a specific mathlib and regularly updated in a way that would be impossible to do with videos.</p>",
        "id": 288930748,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1657281867
    },
    {
        "content": "<p>Where did you find those videos? We should probably remove them if they are within reach, or at least make sure they come with huge disclaimers.</p>",
        "id": 288931058,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1657282058
    },
    {
        "content": "<p>If it's the video I'm thinking about (me proving that intersection of two 5-d subspaces of a 9-d space is nontrivial) then this wasn't really a tutorial, it was just a recording of a Twitch stream I made in around 2019. I can certainly add to the description of the video that the exact code no longer works as videoed (the same will be true of Scott's videos on the infinitude of primes, I should think).</p>",
        "id": 288931213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657282165
    },
    {
        "content": "<p>It's true of any videos that is older than a couple of months old I guess.</p>",
        "id": 288931763,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1657282503
    },
    {
        "content": "<p>Are the lftcm videos fine, or did we opt to bump the repo and make the examples match newer mathlib instead of old videos?</p>",
        "id": 288933961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657283821
    },
    {
        "content": "<p>I don't understand why a page that is indexed by Google is some gold standard. I don't read the news by looking at the search hit in Google, I go directly to the news site.</p>",
        "id": 288937482,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657285661
    },
    {
        "content": "<p>On that site, I can look at the archive.</p>",
        "id": 288937512,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657285675
    },
    {
        "content": "<p>For mathlib, that is the commit history. And even more powerful, is git blame. We have amazing autogen documentation that can take you directly to the source code. There, you can use the browser gui to git blame and see exactly when a particular lemma appeared or changed.</p>",
        "id": 288937640,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657285739
    },
    {
        "content": "<blockquote>\n<p>There, you can use the browser gui to git blame and see exactly when a particular lemma appeared or changed.</p>\n</blockquote>\n<p>Tooling to find when a lemma was <em>removed</em> is much less available online as far as I know</p>",
        "id": 288938724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657286300
    },
    {
        "content": "<p>pleas please please don't take down the xena videos on youtube! they're sooo helpful, it's invaluable to see someone going through how to solve things in lean in real-time</p>",
        "id": 288940753,
        "sender_full_name": "David Chanin",
        "timestamp": 1657287337
    },
    {
        "content": "<p>My point with Google is just that as a beginner, if I'm following a tutorial and get an error, my first instinct is to start searching Google to see what's going on, if other people have this issue, etc</p>",
        "id": 288940880,
        "sender_full_name": "David Chanin",
        "timestamp": 1657287407
    },
    {
        "content": "<p>this is what I do with any programming language. If I'm working on a python project and run into an error, I'll google it, I won't try to go to a python chatroom and ask as a first instinct</p>",
        "id": 288940941,
        "sender_full_name": "David Chanin",
        "timestamp": 1657287453
    },
    {
        "content": "<p>I see where you're going with the google thought. But let's take a step back and think about what's being shown on google's page. If you search for some Python or Java error, you'll probably see links to stackoverflow questions or blog posts. Sometimes we're also presented with the official API page.</p>\n<p>I guess if you'd want to see results on google or on any other search engine about Lean, we'd need to populate those spaces first. People aren't talking a lot about Lean out there yet (except for some highly specialized domains about mathematics and formalization).</p>",
        "id": 288942895,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657288361
    },
    {
        "content": "<p>I set up a github action to create markdown and txt changelogs from mathlib on a cron here: <a href=\"https://github.com/chanind/mathlib-changelog\">https://github.com/chanind/mathlib-changelog</a>. I'll see if I can get it to automatically pull-in info about what specific lemmas/theorems were added/removed in each commit, even if it's not perfect (eg just from running a regex over the diff)</p>",
        "id": 288957950,
        "sender_full_name": "David Chanin",
        "timestamp": 1657295261
    },
    {
        "content": "<p>I've thought that having a changelog that records changes to names would be useful, since it can be frustrating (even with experience!) to figure out where something went.</p>\n<p>I don't know if this would work, but here's a proposal:</p>\n<ul>\n<li>There's a CI lint step that checks to see that every name that used to exist is accounted for in a BRANCH_CHANGES file. This file has lines like <code>nat.foo -&gt; nat.bar</code> or <code>nat.foo -&gt; !</code> if it was deleted (and if you want to be helpful, you can write a short message after the <code>!</code> to say what you're supposed to do now).</li>\n<li>When Bors assembles a batch, it takes the BRANCH_CHANGES for each PR, concatenates them, then inserts them at the beginning of the CHANGELOG file (mathlib master always has an empty BRANCH_CHANGES file). This block of changes is given some sort of version heading -- let's say the Bors batch number.</li>\n</ul>",
        "id": 288959577,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657296019
    },
    {
        "content": "<p>This is just meant to solve \"where'd X go?\" It doesn't seem necessary to include new names.</p>",
        "id": 288959822,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657296130
    },
    {
        "content": "<p>Or, rather than per-Bors batch, it would make more sense to have it alter the CHANGELOG per commit. I don't really know what we can do with Bors or what's possible. But there needs to be some way to keep different commits from conflicting for the CHANGELOG.</p>",
        "id": 288960083,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657296281
    },
    {
        "content": "<p>It's not clear to me that there's any benefit to making a human deal with this vs just generating everything after the fact</p>",
        "id": 288961614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657296978
    },
    {
        "content": "<p>If CI is checking that BRANCH_CHANGES is accurate, it could just create an automatic comment telling reviewers what the change is</p>",
        "id": 288961657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657297009
    },
    {
        "content": "<p>Oh, I guess the point is tracking renames, which can't be inferred</p>",
        "id": 288961711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657297044
    },
    {
        "content": "<p>I guess renames can be inferred if the type doesn't change at all</p>",
        "id": 288961829,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657297103
    },
    {
        "content": "<p>Or even just via heuristics; \"90% this new lemma replaces it based on similarity of the expression tree\"</p>",
        "id": 288961883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657297138
    },
    {
        "content": "<p>There can be a tool to help generate this file for us automatically, but sometimes there are cases that can't be inferred, like when things get renamed and moved.</p>",
        "id": 288961907,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657297150
    },
    {
        "content": "<p>The nice thing about heuristics is it works on all past PRs too</p>",
        "id": 288962065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657297238
    },
    {
        "content": "<p>The heuristics could include \"parse a magic section from the commit message\", that we encourage people to write for larger PRs</p>",
        "id": 288962278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657297345
    },
    {
        "content": "<p>Yeah I think the \"where'd X go?\" question has been the hardest for me so far, anything that could make that easier / faster to resolve would be great!</p>",
        "id": 288965499,
        "sender_full_name": "David Chanin",
        "timestamp": 1657298989
    },
    {
        "content": "<p>Probably the first step in building such a tool would be deciding upon a smaller cache format that contains enough metadata for producing these diffs without containing the full oleans</p>",
        "id": 288969688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657301151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/288961829\">said</a>:</p>\n<blockquote>\n<p>I guess renames can be inferred if the type doesn't change at all</p>\n</blockquote>\n<p><code>def</code> would like a word!</p>",
        "id": 288969821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657301218
    },
    {
        "content": "<p>I just want to reiterate what I said earlier, <code>git log -Slemma_name</code> is a very convenient way to find where X went, it is almost always the case that the first commit listed there is the one that renamed X, and if the log entry doesn't say where normally it's easy to work out from the diff.</p>",
        "id": 288971958,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1657302413
    },
    {
        "content": "<p>I tried extracting which lemmas / theorems / defs changed in each commit and added it to the repo. A sample changelog is here: <a href=\"https://github.com/chanind/mathlib-changelog/blob/main/markdown/CHANGELOG.2022.07.md\">https://github.com/chanind/mathlib-changelog/blob/main/markdown/CHANGELOG.2022.07.md</a>. This will definitely miss stuff (it's just looking for things like <code>+lemma xyz</code> in the diff, but I think it does catch a lot of stuff</p>",
        "id": 288986447,
        "sender_full_name": "David Chanin",
        "timestamp": 1657310403
    },
    {
        "content": "<p>I turned the content into simple website for searching / viewing / indexing as well, which will auto-update with the repo as well. A bit rough still, but online at: <a href=\"https://mathlib-changelog.vercel.app/\">https://mathlib-changelog.vercel.app/</a></p>",
        "id": 289188821,
        "sender_full_name": "David Chanin",
        "timestamp": 1657545609
    },
    {
        "content": "<p>I can't speak for the reliability of the data yet, but the site looks excellent and very useful for solving this type of problem</p>",
        "id": 289193968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657547861
    },
    {
        "content": "<p>(<code>git log -S</code> is obviously great too, but it doesn't give me links that lead to the PR that discussed <em>why</em> something was changed)</p>",
        "id": 289194089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657547891
    },
    {
        "content": "<p>Honestly, I was a little skeptical, but for the little that I have seen, it looks really great!  Well done!</p>",
        "id": 289194127,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657547905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> doesn't bors put the pr link in the squashed commit message? What else are you hoping for?</p>",
        "id": 289201336,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1657550907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479618\">@David Chanin</span> Nice! It's really fast as well.</p>",
        "id": 289232033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657564456
    },
    {
        "content": "<p>Looking at this a little more, I've spotted the first major data problem; it doesn't know about namespaces, so considers</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo.bar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>different to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 289238486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657567605
    },
    {
        "content": "<p>aah interesting, yeah, it will miss that because it's just doing a regex match on <code>+def  (term)</code>. It might need to do a proper parse of the file being modified before/after to be able to pick up on the namespaces</p>",
        "id": 289240272,
        "sender_full_name": "David Chanin",
        "timestamp": 1657568452
    },
    {
        "content": "<p>If namespaces are the main issue, it would probably be possible to pick that up still with regexes looking for the <code>namespace</code> keyword in the file being modified <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 289240571,
        "sender_full_name": "David Chanin",
        "timestamp": 1657568591
    },
    {
        "content": "<p>It's probably a better investment of time to do it properly</p>",
        "id": 289248075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657572538
    },
    {
        "content": "<p>Especially since that will give it a real advantage over the <code>git log -S</code> method</p>",
        "id": 289248111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657572562
    },
    {
        "content": "<p>I'm just worried it might be too slow to be feasible to do it the proper way, since if I understand correctly it would require Lean parsing the full Mathlib environment for every commit to analyze the state of which lemmas/defs/theorems exist in which commit. Unless, is there a way to get something like an abstract syntax tree structure from a single Lean file without having to load everything?</p>",
        "id": 289259852,
        "sender_full_name": "David Chanin",
        "timestamp": 1657580018
    },
    {
        "content": "<p>You're correct that that is what it would have to do; but remember we have cached builds of most commits</p>",
        "id": 289285243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657608461
    },
    {
        "content": "<p>This is great!</p>",
        "id": 289297602,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657617747
    },
    {
        "content": "<p>Namespaces are one thing that are quite easy to read off without parsing the file properly... Finding all semantic changes is probably a couple orders of magnitude slower. Even when you can download the compiled oleans, you still have to run some Lean code importing all of mathlib. And the oleans aren't generated for all commits, so it might be harder to point to specific commits with certain changes.</p>",
        "id": 289298103,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657618085
    },
    {
        "content": "<p>Another possible problem with downloading all the oleans is that that's probably a _lot_ of network traffic, both for you and for our azure servers hosting them</p>",
        "id": 289298512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657618370
    },
    {
        "content": "<p>Even if you just download it once and build a local database from the data</p>",
        "id": 289298559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657618421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479618\">@David Chanin</span> We (<span class=\"user-mention\" data-user-id=\"467358\">@Daniel Packer</span> and I) just used this tool to track down the new location of  <code>lt_omega_of_linear_independent</code>, which was deleted on 5 June.  Thanks!</p>",
        "id": 289331742,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657635977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/289331742\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479618\">David Chanin</span> We (<span class=\"user-mention silent\" data-user-id=\"467358\">Daniel Packer</span> and I) just used this tool to track down the new location of  <code>lt_omega_of_linear_independent</code>, which was deleted on 5 June.  Thanks!</p>\n</blockquote>\n<p>Glad to hear it helped! Thanks for sharing :)</p>",
        "id": 289355404,
        "sender_full_name": "David Chanin",
        "timestamp": 1657645433
    },
    {
        "content": "<p>Lean must first parse the raw string syntax content of a file into some tree structure before it can figure out what the file is referencing I assume? Is there a way to get at that parsed structure without it needing to go and follow all the imports and trying to figure out what's actually happening in the file?</p>",
        "id": 289355615,
        "sender_full_name": "David Chanin",
        "timestamp": 1657645537
    },
    {
        "content": "<p>Actually it looks like lean has a <code>--ast</code> option, which might be what I'm looking for <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 289357880,
        "sender_full_name": "David Chanin",
        "timestamp": 1657646611
    },
    {
        "content": "<p>hrm running <code>lean --ast &lt;file.lean&gt;</code> seems to throw lots of errors. It does output an AST JSON, but a there's a lot of <code>null</code>s in it, and as a result a bunch of stuff is missing. I don't really understand why that would be though, surely the AST parse shouldn't error as long as the syntax is valid?</p>",
        "id": 289361636,
        "sender_full_name": "David Chanin",
        "timestamp": 1657648216
    },
    {
        "content": "<p>Like Floris said, parsing Lean improperly for namespaces should be relatively straightforward -- thankfully they always come in <code>namespace foo / end foo</code> pairs. I think there are two things you need to know:</p>\n<ul>\n<li>Names can be escaped using french quotes (« »). For example, <code>a.«b».c</code> is the same as <code>a.b.c</code>.</li>\n<li>Names can start with <code>_root_</code> to override the fact that they are in a namespace.</li>\n</ul>\n<p>For robustness, you should also be parsing <code>section foo / end foo</code> pairs, since frequently there are overlapping namespaces and sections with the same names. Sections have no impact on naming.</p>",
        "id": 289364071,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657649336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479618\">David Chanin</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/289355615\">said</a>:</p>\n<blockquote>\n<p>Lean must first parse the raw string syntax content of a file into some tree structure before it can figure out what the file is referencing I assume?</p>\n</blockquote>\n<p>My understanding is that the data structures that support <code>--ast</code> are actually built for the sole purpose of having some machine readable output.</p>\n<p>A Lean file is a sequence of commands, and each command has code for how they parse themselves and manipulate the Lean frontend's internal state. Each command is processed before the next one is even parsed.</p>",
        "id": 289364745,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657649649
    },
    {
        "content": "<p>One potential feature request: on the search page, can you link to the most relevant Github page (including line number)?<br>\nFor example, in Heather's example of <br>\n<a href=\"https://mathlib-changelog.vercel.app/lemma/lt_omega_of_linear_independent\">https://mathlib-changelog.vercel.app/lemma/lt_omega_of_linear_independent</a><br>\nit would be nice if the top result contains a link to <a href=\"https://github.com/leanprover-community/mathlib/commit/b6395b3#diff-a460505ea5f3db30574d1f6c292ad14ceffb53a09ba980303313df40128bc521L306\">the correct line in the commit diff</a> and/or the <a href=\"https://github.com/leanprover-community/mathlib/blob/b6395b3a5acd655b16385fa0cdbf1961d6c34b3e/src/linear_algebra/finite_dimensional.lean#L306\">correct line of the file after the commit</a> (for deletions I understand this is tricky to figure out exactly). I don't know if this is too hard to add, but I think that would make it easier to see what the commit has changed.</p>",
        "id": 289446715,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657713204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/289364745\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479618\">David Chanin</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/289355615\">said</a>:</p>\n<blockquote>\n<p>Lean must first parse the raw string syntax content of a file into some tree structure before it can figure out what the file is referencing I assume?</p>\n</blockquote>\n<p>My understanding is that the data structures that support <code>--ast</code> are actually built for the sole purpose of having some machine readable output.</p>\n<p>A Lean file is a sequence of commands, and each command has code for how they parse themselves and manipulate the Lean frontend's internal state. Each command is processed before the next one is even parsed.</p>\n</blockquote>\n<p>Ah that's much more complicated than I realized! It sounds like just scanning through looking for section/namespace keywords is the way to go</p>",
        "id": 289498029,
        "sender_full_name": "David Chanin",
        "timestamp": 1657735394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/289446715\">said</a>:</p>\n<blockquote>\n<p>One potential feature request: on the search page, can you link to the most relevant Github page (including line number)?<br>\nFor example, in Heather's example of <br>\n<a href=\"https://mathlib-changelog.vercel.app/lemma/lt_omega_of_linear_independent\">https://mathlib-changelog.vercel.app/lemma/lt_omega_of_linear_independent</a><br>\nit would be nice if the top result contains a link to <a href=\"https://github.com/leanprover-community/mathlib/commit/b6395b3#diff-a460505ea5f3db30574d1f6c292ad14ceffb53a09ba980303313df40128bc521L306\">the correct line in the commit diff</a> and/or the <a href=\"https://github.com/leanprover-community/mathlib/blob/b6395b3a5acd655b16385fa0cdbf1961d6c34b3e/src/linear_algebra/finite_dimensional.lean#L306\">correct line of the file after the commit</a> (for deletions I understand this is tricky to figure out exactly). I don't know if this is too hard to add, but I think that would make it easier to see what the commit has changed.</p>\n</blockquote>\n<p>I think that shouldn't be too hard to add! I'll see if I can get it working</p>",
        "id": 289498138,
        "sender_full_name": "David Chanin",
        "timestamp": 1657735440
    },
    {
        "content": "<p>One other feature request / bug report: I noticed it isn't tracking classes and instances. I guess unnamed instances might be hard to include without proper parsing, but maybe it's nice to add instances whose name is given explicitly, and classes (and <code>inductive</code>/<code>structure</code>/<code>abbreviation</code> if you aren't doing those already).</p>",
        "id": 289709145,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657880321
    },
    {
        "content": "<p>E.g. <a href=\"https://github.com/leanprover-community/mathlib/commit/ede73b2571f6b40dba488d565a66c2bb1a91602f\">https://github.com/leanprover-community/mathlib/commit/ede73b2571f6b40dba488d565a66c2bb1a91602f</a> should be \"removing\" both <code>regular_space</code> and <code>regular_space.t1_space</code>.</p>",
        "id": 289709195,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657880366
    },
    {
        "content": "<p>And let me also say: this website is indeed useful to figure out the new name of a renamed lemma!</p>",
        "id": 289709785,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657880789
    },
    {
        "content": "<p>I think I've got the proper namespace/section parsing stuff working now, so hopefully the names of all the lemmas/etc should include the correct namespace now</p>",
        "id": 289790457,
        "sender_full_name": "David Chanin",
        "timestamp": 1657923835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/289709145\">said</a>:</p>\n<blockquote>\n<p>One other feature request / bug report: I noticed it isn't tracking classes and instances. I guess unnamed instances might be hard to include without proper parsing, but maybe it's nice to add instances whose name is given explicitly, and classes (and <code>inductive</code>/<code>structure</code>/<code>abbreviation</code> if you aren't doing those already).</p>\n</blockquote>\n<p>Does this work the same as with lemmas/defs/theorems? e.g. just looking for a keyword like <code>structure &lt;name&gt;</code> or <code>instance &lt;name&gt;</code>? I don't have a very good grasp of  how instances / classes and stuff work in Lean yet, so for now I just added <code>theorem/def/lemma</code> since they seem pretty straightforward</p>",
        "id": 289790571,
        "sender_full_name": "David Chanin",
        "timestamp": 1657923952
    },
    {
        "content": "<p><code>structure &lt;name&gt;</code> and <code>inductive &lt;name&gt;</code> work just the same as <code>theorem/def/lemma</code>. <code>instance</code> takes an optional name.</p>",
        "id": 289790641,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657923996
    },
    {
        "content": "<p>If <code>instance</code> doesn't have a name, then there are some relatively complicated rules for how it automatically generates a name for you (you'd pretty much need to run Lean to get that name)</p>",
        "id": 289790803,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657924125
    },
    {
        "content": "<p><code>abbreviation</code>, <code>def</code>, <code>theorem</code>, and <code>lemma</code> all parse the same.</p>",
        "id": 289791005,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657924282
    },
    {
        "content": "<p>awesome, I'll see if I can get <code>abbreviation</code>, <code>structure</code>, and <code>inductive</code> added then! Seems like it should be a quick change</p>",
        "id": 289794087,
        "sender_full_name": "David Chanin",
        "timestamp": 1657926915
    },
    {
        "content": "<p>Just added abbreviation, structure, and inductive - turned out to be pretty straightforward</p>",
        "id": 289797575,
        "sender_full_name": "David Chanin",
        "timestamp": 1657930282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479618\">@David Chanin</span> I just want to say that I really like how you had a vision of a useful tool. At first, we couldn't understand what you wanted that <code>git log</code> didn't offer already. Then you just went ahead and built the tool. And now we are ally excited about it. \"Show, don't tell\" and all that. But it works! Great job!</p>",
        "id": 289815628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657958629
    },
    {
        "content": "<p>That's so nice of you to say, Johan! I wasn't really expecting to build anything either, but everyone on this thread was so supportive and offered so many ideas,  it just sort of happened. Really a testament to the community you all have built!</p>",
        "id": 289819554,
        "sender_full_name": "David Chanin",
        "timestamp": 1657964436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20versioning.20and.20changelog/near/289446715\">said</a>:</p>\n<blockquote>\n<p>One potential feature request: on the search page, can you link to the most relevant Github page (including line number)?<br>\nFor example, in Heather's example of <br>\n<a href=\"https://mathlib-changelog.vercel.app/lemma/lt_omega_of_linear_independent\">https://mathlib-changelog.vercel.app/lemma/lt_omega_of_linear_independent</a><br>\nit would be nice if the top result contains a link to <a href=\"https://github.com/leanprover-community/mathlib/commit/b6395b3#diff-a460505ea5f3db30574d1f6c292ad14ceffb53a09ba980303313df40128bc521L306\">the correct line in the commit diff</a> and/or the <a href=\"https://github.com/leanprover-community/mathlib/blob/b6395b3a5acd655b16385fa0cdbf1961d6c34b3e/src/linear_algebra/finite_dimensional.lean#L306\">correct line of the file after the commit</a> (for deletions I understand this is tricky to figure out exactly). I don't know if this is too hard to add, but I think that would make it easier to see what the commit has changed.</p>\n</blockquote>\n<p>I was able to get it to link directly to the file in the diff where the change occurred in Github from the search result page, but figuring out the line number will be a bit trickier. Hopefully this should still help make it easier to get to the relevant part of the diff than having to search through the entire list of changes at least</p>",
        "id": 289824082,
        "sender_full_name": "David Chanin",
        "timestamp": 1657971686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479618\">@David Chanin</span> Thanks for building <a href=\"https://mathlib-changelog.org/\">https://mathlib-changelog.org/</a>!</p>\n<p>I think it would be great if we eventually linked to it from the mathlib documentation.  It could be integrated in a few different ways: (1) just a link, (2) an additional button for the search box when you don't find what you're wanting, (3) maybe even links from definitions/lemmas for when you want to know what something used to be called (though the definition area is already getting rather busy).</p>",
        "id": 289980292,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658157583
    },
    {
        "content": "<p>Hrm it's hard to tell what lemmas/theorems used to be called automatically, since it's just looking at the git diffs, but that would be awesome if it were possible to figure out, even if just in limited situations. Adding missing theorems to the search though should be possible. There's a full list of every lemma/theorem/etc that ever existed at <a href=\"https://mathlib-changelog.org/searchItems.json\">https://mathlib-changelog.org/searchItems.json</a> which is what the mathlib-changelog search is using internally (it's just a client-side static site, so it's just looking through that JSON file basically).</p>",
        "id": 290030941,
        "sender_full_name": "David Chanin",
        "timestamp": 1658182924
    },
    {
        "content": "<p>Everything in that list maps 1-to-1 to a page on mathlib-changelog. The prefix is the first letter of the type of item it is, so <code>a</code> means <code>abbreviation</code>, <code>t</code> means <code>theorem</code>, etc</p>",
        "id": 290030994,
        "sender_full_name": "David Chanin",
        "timestamp": 1658182978
    },
    {
        "content": "<p>Another idea I had was that it would be really helpful if there was a way to see examples of each theorem in mathlib used in real proofs. I find that I have a lot of trouble understanding how to use the theorems and definitions in Mathlib just from seeing the doc, it really helps to see it used in practice in a real proof. Maybe it would be possible to automatically scan all the repos in Github that are a lean project with mathlib that come up searching e.g <a href=\"https://github.com/search?l=Lean&amp;p=13&amp;q=lean&amp;type=Repositories\">https://github.com/search?l=Lean&amp;p=13&amp;q=lean&amp;type=Repositories</a>, and keep an index of which repos make use of which theorems so it could be linked to from the mathlib docs? Or it could just be another site like mathlib-changelog that auto-updates as new repos / versions of mathlib are created</p>",
        "id": 290031684,
        "sender_full_name": "David Chanin",
        "timestamp": 1658183416
    },
    {
        "content": "<p>I've seen tools online for other languages that do that</p>",
        "id": 290061348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658214310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479618\">@David Chanin</span> hope it's okay if I use this thread for a bug report - the \"view on github\" link on <a href=\"https://mathlib-changelog.org/commit/9f55ed7\">https://mathlib-changelog.org/commit/9f55ed7</a> doesn't work; it seems to need the long form hash like <a href=\"https://github.com/leanprover-community/mathlib/commit/9f55ed7054dcf01bf8a3a69afc03a1ceebcfc09c\">https://github.com/leanprover-community/mathlib/commit/9f55ed7054dcf01bf8a3a69afc03a1ceebcfc09c</a></p>",
        "id": 292124423,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659689232
    },
    {
        "content": "<p>Ooh good catch! It looks like 7 chars isn't enough. 8 chars seems to work though. I'll update to use 8 chars moving forward!</p>",
        "id": 292127283,
        "sender_full_name": "David Chanin",
        "timestamp": 1659690942
    },
    {
        "content": "<p>And thanks for making it, it's helped me a lot today</p>",
        "id": 292138485,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659697687
    },
    {
        "content": "<p>It's probably a good idea to use the full hash, since there might be collisions in 8 chars</p>",
        "id": 292143278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659700663
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/18134627/how-much-of-a-git-sha-is-generally-considered-necessary-to-uniquely-identify-a\">https://stackoverflow.com/questions/18134627/how-much-of-a-git-sha-is-generally-considered-necessary-to-uniquely-identify-a</a> It looks like 10-12 should be enough. This is saying the Linux kernel uses 12 chars with hundreds of thousands of commits, which is ~10x what mathlib has so far.</p>",
        "id": 292169017,
        "sender_full_name": "David Chanin",
        "timestamp": 1659713116
    },
    {
        "content": "<p>I just used <a href=\"https://mathlib-changelog.org\">https://mathlib-changelog.org</a> for the first time today, tracking what happened to <code>unit_interval.mk_zero</code> and its friends and then <code>matrix.minor_apply</code> in order to <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/9de3e65b79607c706f933a9a0531e62164f92d57\">update mathlib</a> in the sphere eversion project. It was really nice!</p>",
        "id": 294256021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660912622
    },
    {
        "content": "<p>I'll second that it's really useful for a lean bump, especially if you're not keeping an eye on PRs. Perhaps the documentation for <code>leanproject up</code> should even recommend using this to help deal with build errors.</p>",
        "id": 294342562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660934493
    },
    {
        "content": "<p>If it does, then I would feel more comfortable having the website migrated to the community repo somewhere (possibly part of the mathlib website), to avoid it going rot.</p>",
        "id": 294342746,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660934559
    }
]