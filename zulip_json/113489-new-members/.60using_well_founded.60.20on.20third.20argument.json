[
    {
        "content": "<p>I'm struggling to prove this definition is well-founded:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- a contrived example to test recursive and non-recursive constructors</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_two</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">foo_eqv</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_two</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo_eqv.of_eqv_gen</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">eqv_gen</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">eqv_gen.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo_eqv.refl</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">eqv_gen.symm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo_eqv.of_eqv_gen</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">eqv_gen.trans</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo_eqv.of_eqv_gen</span> <span class=\"n\">hab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">foo_eqv.of_eqv_gen</span> <span class=\"n\">hbc</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">eqv_gen.rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">foo.of_mul</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">foo_eqv.of_mul</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">eqv_gen.rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">foo.add_two</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">foo_eqv.add_two</span> <span class=\"o\">(</span><span class=\"n\">foo_eqv.of_eqv_gen</span> <span class=\"bp\">$</span> <span class=\"n\">eqv_gen.rel</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">sizeof</span> <span class=\"n\">p.snd.snd</span><span class=\"o\">)⟩]}</span>\n</code></pre></div>\n<p>My hope is that I can just tell lean \"do what you usually do, but look only at the third argument\", but my naive attempt at doing this seems not to work</p>",
        "id": 222571570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610540634
    },
    {
        "content": "<p>Because <code>eqv_gen</code> is a prop, it doesn't have a sizeof</p>",
        "id": 222573111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610541560
    },
    {
        "content": "<p>I'm not sure well-founded recursion on a <code>Prop</code> is ever sensible, but certainly not using this <code>sizeof</code> strategy, yeah</p>",
        "id": 222573143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610541579
    },
    {
        "content": "<p>A better way to go about this is to prove that <code>foo_eqv</code> is an equivalence relation (which you'll surely want to know anyways) and then note that it contains <code>foo</code></p>",
        "id": 222573259,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610541654
    },
    {
        "content": "<p>My suggestion is to avoid the equation compiler and use <code>induction</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo_eqv.of_eqv_gen</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eqv_gen</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">eqv_gen.refl</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">foo_eqv.refl</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">eqv_gen.symm</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">ih.symm</span><span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">eqv_gen.trans</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ihab</span> <span class=\"n\">ihbc</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">ihab.trans</span> <span class=\"n\">ihbc</span><span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">eqv_gen.rel</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">{</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">foo_eqv.of_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">foo_eqv.add_two</span> <span class=\"n\">h_ih</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222573876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610542057
    },
    {
        "content": "<p>Hmm, I can't seem to prove the reverse direction. Is it because its false?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_two</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">foo_eqv</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_two</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo_eqv.of_eqv_gen</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eqv_gen</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">eqv_gen.refl</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">foo_eqv.refl</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">eqv_gen.symm</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">ih.symm</span><span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">eqv_gen.trans</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ihab</span> <span class=\"n\">ihbc</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">ihab.trans</span> <span class=\"n\">ihbc</span><span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">eqv_gen.rel</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">{</span>\n      <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">foo_eqv.of_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">foo_eqv.add_two</span> <span class=\"n\">h_ih</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">foo_eqv.refl</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">eqv_gen.refl</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">foo_eqv.symm</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih.symm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">foo_eqv.trans</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ihab</span> <span class=\"n\">ihbc</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">eqv_gen.trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ihab</span> <span class=\"n\">ihbc</span><span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">foo_eqv.of_mul</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">eqv_gen.rel</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">foo.of_mul</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">foo_eqv.add_two</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"n\">ih</span> <span class=\"o\">{</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222574974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610542764
    },
    {
        "content": "<p>(the motivation here is that it felt quite painful to do induction on <code>eqv_gen (foo X) x y</code>, but easier to do induction on <code>eqv_foo</code>)</p>",
        "id": 222575108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610542830
    },
    {
        "content": "<p>It may or may not happen to be true but a general statement like this is false--imagine deleting the <code>of_mul</code> cases</p>",
        "id": 222575495,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610543055
    },
    {
        "content": "<p>Now <code>foo</code> is empty but <code>foo_eqv</code> has more stuff than just equality</p>",
        "id": 222575528,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610543078
    },
    {
        "content": "<p>btw my approach for the original question</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo_eqv.of_eqv_gen</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">eqv_gen</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo_eqv_of_foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">X</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">foo_eqv</span> <span class=\"n\">X</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">foo_eqv.of_mul</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">foo_eqv.add_two</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"o\">(</span><span class=\"n\">foo_eqv</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo_eqv.refl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">foo_eqv.symm</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">foo_eqv.trans</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">relation.eqv_gen_iff_of_equivalence</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">relation.eqv_gen_mono</span> <span class=\"n\">foo_eqv_of_foo</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222575769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610543193
    },
    {
        "content": "<p>Thanks, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.eqv_gen_iff_of_equivalence\">docs#relation.eqv_gen_iff_of_equivalence</a> looks useful</p>",
        "id": 222576099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610543363
    }
]