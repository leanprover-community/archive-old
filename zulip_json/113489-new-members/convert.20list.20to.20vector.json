[
    {
        "content": "<p>i think this might be easy so  i was wondering if someone can have an example, i had been trying different approaches without luck for now. my goal is something as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list_to_bitvec</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bitvec</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>the other way around is easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bitvec_to_list</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">bitvec</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>  <span class=\"n\">vector.to_list</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>i had been trying to do an inductive type for it but no luck yet, unsure if it will be the right way to go, any help is appreciated.</p>",
        "id": 287955485,
        "sender_full_name": "Alfredo Garcia",
        "timestamp": 1656545681
    },
    {
        "content": "<p>Someone more knowledgeable should jump in here, but it seems like the key hurdle is that you need to provide a proof that <code>L.length = h</code>.</p>",
        "id": 287959118,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1656548519
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.bitvec.core</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list_to_bitvec</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">L.length</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bitvec</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 287959477,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1656548765
    },
    {
        "content": "<p><code>vector</code> is a subtype of <code>list</code>, which means to construct a term of type <code>vector</code> you have to provide a term of the base type along with a proof that the term meets the predicate of the subtype</p>",
        "id": 287959663,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1656548932
    },
    {
        "content": "<p>you could also do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list_to_bitvec'</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">bitvec</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">L.length</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where you return a bitvec if the length matches, but <code>none</code> otherwise</p>",
        "id": 287960479,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1656549761
    },
    {
        "content": "<p>This option will just cut the list off at <code>n</code> elements (or append additional <code>false</code>s if the list is too short):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list_to_bitvec</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bitvec</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">list.take'</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">list.take'_length</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and if you don't want to specify the length at all, you can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list_to_bitvec</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bitvec</span> <span class=\"n\">L.length</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 287968653,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1656558787
    }
]