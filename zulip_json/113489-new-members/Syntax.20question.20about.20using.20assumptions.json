[
    {
        "content": "<p>How can I use assumptions I previously made in order to formulate new conditions? Concretely, I am trying to define something like this:</p>\n<p><code>def closed_under_composition : Prop :=  ∀ i j : arrow C, i.right = j.left → Z i → Z j → Z (i.hom ≫ j.hom)</code>.</p>\n<p>Here C is a category and <code>Z : arrow C → Prop</code>. This raises an error since <code>≫</code> is only defined whenever <code> i.right = j.left </code> holds. What is the correct syntax to achieve this?</p>",
        "id": 231955685,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616761833
    },
    {
        "content": "<p>Don't use equality of objects, it is evil. :-)</p>",
        "id": 231955859,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616761950
    },
    {
        "content": "<p>(And when you do really need to use it, use <code>eq_to_hom</code> to lift the equality to a morphism.)</p>",
        "id": 231955895,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616761978
    },
    {
        "content": "<p>re evil: But surely not to talk about composites of morphisms?</p>",
        "id": 231955941,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616761995
    },
    {
        "content": "<p>there we use dependent typing</p>",
        "id": 231955960,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616762008
    },
    {
        "content": "<p><code>{X Y Z : C} (f : X \\hom Y) (g : Y \\hom Z)</code> --- no equations involved!</p>",
        "id": 231955984,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616762029
    },
    {
        "content": "<p>Yes, sure. The thing is, I want to build my notions on objects of <code>arrow C</code>.</p>",
        "id": 231956107,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616762073
    },
    {
        "content": "<p>Maybe there is an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> to this?</p>",
        "id": 231956138,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616762096
    },
    {
        "content": "<p>You can curry <code>Z : Arrow C → Prop</code> to <code>Z' : Π {a b : C}, (a ⟶ b) → Prop</code></p>",
        "id": 231956387,
        "sender_full_name": "David Wärn",
        "timestamp": 1616762216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  Possibly! - The question above is really a general syntax question, not specifically about composing morphisms. Phrased more generally: given some function <code>f(x,y)</code> which needs a hypothesis <code>h(x,y)</code> for it to be defined, how do I define a condition on x,y saying something like : assuming h(x,y), I want f(x,y) to hold.</p>",
        "id": 231956467,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616762270
    },
    {
        "content": "<p>If you _really_ need to do something directly on <code>arrow</code> you could define a <code>composable</code> predicate on a pair of arrows, and a new composition function which takes two functions and the evidence they are composable.</p>",
        "id": 231956524,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616762291
    },
    {
        "content": "<p>Hmm, I'm not sure what your more general statement actually means.</p>",
        "id": 231956597,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616762343
    },
    {
        "content": "<p>I'd interpret \"given some function f(x,y) which needs a hypothesis h(x,y) for it to be defined\" as something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"k\">forall</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231957011,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616762526
    },
    {
        "content": "<p>(reducing from two variables <code>x,y</code> to one. Here your <code>h</code> is my <code>P</code>, and then my <code>g</code> says \"assuming h, then f\"</p>",
        "id": 231957142,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616762588
    },
    {
        "content": "<p>But I'm not really sure how that is related to your original <code>closed_under_composition</code>. (Sorry if I'm being daft. It's late here. :-)</p>",
        "id": 231957207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616762628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130377\">David Wärn</span> <a href=\"#narrow/stream/113489-new-members/topic/Syntax.20question.20about.20using.20assumptions/near/231956387\">said</a>:</p>\n<blockquote>\n<p>You can curry <code>Z : Arrow C → Prop</code> to <code>Z' : Π {a b : C}, (a ⟶ b) → Prop</code></p>\n</blockquote>\n<p>Here's how to express a predicate on morphisms being closed under composition in this curried setup</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">closed_under_composition</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231957817,
        "sender_full_name": "David Wärn",
        "timestamp": 1616762925
    },
    {
        "content": "<p>Yeah -- I think what's going on here is that Jakob wants to know why we're not just telling him how to make use of <code>i.right = j.left</code> so that <code>i.hom ≫ j.hom</code> actually makes sense.</p>",
        "id": 231957923,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616762990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> : It is surely me who is lame! Here is another example, I am sorry for my imprecisions above. I have a function <code>my_fun</code> that is only defined for positive numbers. How do I define another function <code>f</code> that, given an <code>x</code> and the assumption that <code>x</code> is positive, produces an output depending on <code>my_fun x</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">hyp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hyp</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">hyp</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">my_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 231957938,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616762997
    },
    {
        "content": "<p>and that problem is that this is a bit of a subtle thing, precisely because we're using dependent type theory.</p>",
        "id": 231958006,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Syntax.20question.20about.20using.20assumptions/near/231957923\">said</a>:</p>\n<blockquote>\n<p>Yeah -- I think what's going on here is that Jakob wants to know why we're not just telling him how to make use of <code>i.right = j.left</code> so that <code>i.hom ≫ j.hom</code> actually makes sense.</p>\n</blockquote>\n<p>Yes, that is my question.</p>",
        "id": 231958161,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616763088
    },
    {
        "content": "<p>Just write <code>def f (x : ℕ) (h : hyp x) : ℕ  := my_fun x h + 1</code></p>",
        "id": 231958198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763105
    },
    {
        "content": "<p>but this is totally orthogonal to your original question. :-)</p>",
        "id": 231958228,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763120
    },
    {
        "content": "<p>The point is that we could use <code>h : i.right = j.left</code> in two ways:</p>",
        "id": 231958314,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763146
    },
    {
        "content": "<ol>\n<li>write <code>i.hom \\gg eq_to_hom h \\gg j.hom</code></li>\n</ol>",
        "id": 231958341,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763163
    },
    {
        "content": "<p>(however then you'll be talking about <code>Z</code> of some other thing...)</p>",
        "id": 231958372,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763184
    },
    {
        "content": "<ol start=\"2\">\n<li>write <code>by { subst h, exact i.hom \\gg j.hom }</code></li>\n</ol>",
        "id": 231958413,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763210
    },
    {
        "content": "<p>but again, this is _not_ <code>i.hom \\gg j.hom</code></p>",
        "id": 231958440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763226
    },
    {
        "content": "<p>(or we could do some fancier things using <code>eq.rec</code> (think \"transport through a type family over a path\"), which I won't attempt to write out here)</p>",
        "id": 231958547,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763266
    },
    {
        "content": "<p>But fundamentally, <code>i.hom \\gg j.hom</code> itself will just never make sense: the hypothesis <code>h : i.right = j.left</code> is a proposition, not a typing judgement, and unfortunately those are different things in dependent type theory.</p>",
        "id": 231958711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763343
    },
    {
        "content": "<p>this probably is because <code>i.hom</code> and <code>j.hom</code> live in type families indexed by the source and target, and when you have equations in the indexing type of a type family, you only get canonical functions between the fibres, not actual identifications.</p>",
        "id": 231958949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763438
    },
    {
        "content": "<p>I fear I am only making things worse. :-)</p>",
        "id": 231958989,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763461
    },
    {
        "content": "<p>Aha, would a layman (=for me)-summary be something like this: ?  <code>h</code> just knows that <code>i.right</code> and <code>j.left</code> can be identified (somehow), but this is not enough to make them equal (so that the morphisms can be composed)?</p>",
        "id": 231959016,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616763476
    },
    {
        "content": "<p>Above you commented \"you could define a composable predicate on a pair of arrows, and a new composition function which takes two functions and the evidence they are composable\". How would that be done then?</p>",
        "id": 231959139,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616763516
    },
    {
        "content": "<p>Something like this. This is the price we pay for the wonders of dependent type theory. :-)</p>",
        "id": 231959143,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763517
    },
    {
        "content": "<p>It is enough but you have to tell Lean how to use <code>h</code></p>",
        "id": 231959152,
        "sender_full_name": "David Wärn",
        "timestamp": 1616763521
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.right</span> <span class=\"bp\">=</span> <span class=\"n\">g.left</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f.hom</span> <span class=\"bp\">≫</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">h</span> <span class=\"bp\">≫</span> <span class=\"n\">g.hom</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">closed_under_composition</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.right</span> <span class=\"bp\">=</span> <span class=\"n\">g.left</span><span class=\"o\">),</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">compose</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231959180,
        "sender_full_name": "David Wärn",
        "timestamp": 1616763538
    },
    {
        "content": "<p>exactly</p>",
        "id": 231959199,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763547
    },
    {
        "content": "<p>OK, thanks a lot to both of you. Learned another thing!</p>",
        "id": 231959250,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616763578
    },
    {
        "content": "<p>Now if <code>h</code> is actually <code>rfl</code>, then <code>eq_to_hom h</code> will simplify (e.g. via <code>simp</code>) to <code>\\b1 f.right</code>, and then <code>f.hom \\gg eq_to_hom \\gg g.hom</code> will simplify to <code>f.hom \\gg h.hom</code>.</p>",
        "id": 231959397,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763620
    },
    {
        "content": "<p>But until you know that it is actually <code>rfl</code> then it doesn't simplify.</p>",
        "id": 231959465,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616763648
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.eq_to_hom\">docs#category_theory.eq_to_hom</a> is a category-ified <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cast\">docs#cast</a>, right?</p>",
        "id": 231967056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616766514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> yep</p>",
        "id": 231968122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616766923
    },
    {
        "content": "<p>It might be more accurate to say that composing a morphism with an eq_to_hom plays the same role as cast (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.congr_arg_mpr_hom_left\">docs#category_theory.congr_arg_mpr_hom_left</a> shows that the two agree)</p>",
        "id": 231971955,
        "sender_full_name": "David Wärn",
        "timestamp": 1616768325
    },
    {
        "content": "<p>That simp lemma worries me a bit - I don't think it can ever fire, as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_mpr_eq_cast\">docs#eq_mpr_eq_cast</a> should fire first</p>",
        "id": 231992879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616775680
    }
]