[
    {
        "content": "<p>Apologies for a rather vague question, but I'm wondering if there is a way to teach lean that only certain parts of my structure matter for equality?<br>\nI have a structure which is a combination of another structure and a proof, like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">sym_fn</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">series</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">series_sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">series</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">series</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n</code></pre></div>\n\n<p>And because different proofs of the same thing are equal, I've proved a helper lemma like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">series_part</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">sym_fn</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.series</span> <span class=\"bp\">=</span> <span class=\"n\">y.series</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n\n<p>Is that the appropriate thing to do? Is there a way to teach simp about that? I basically want to be able to infer that sym_fn addition is associative from the fact that mv_power_series addition is...</p>",
        "id": 211312560,
        "sender_full_name": "Jesse Selover",
        "timestamp": 1601065119
    },
    {
        "content": "<p>Try stating the iff in reverse, and supplying that to simp</p>",
        "id": 211320816,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601069776
    },
    {
        "content": "<p>You can put the <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#ext\">ext</a> attribute on your structure, and it will prove your lemma under the name <code>sym_fn.ext</code> and mark it with the <code>ext</code> attribute so that the <code>ext</code> tactic will automatically use it.</p>",
        "id": 211331446,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601079290
    },
    {
        "content": "<p>thank you! I will try that</p>",
        "id": 211335487,
        "sender_full_name": "Jesse Selover",
        "timestamp": 1601085054
    },
    {
        "content": "<p>Stating the iff in reverse worked!</p>",
        "id": 211337297,
        "sender_full_name": "Jesse Selover",
        "timestamp": 1601087469
    }
]