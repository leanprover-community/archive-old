[
    {
        "content": "<p>Are there cases where partial functions are actually necessary? [Should probably make a new topic.]</p>",
        "id": 135005256,
        "sender_full_name": "zaa",
        "timestamp": 1538440146
    },
    {
        "content": "<p>Necessary for lean, or for mathematics?</p>",
        "id": 135005726,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538441038
    },
    {
        "content": "<p>I can imagine that high school math (or some university math) definitely contains exercises with, for example, functions not defined for all real numbers.<br>\n\"Find the domain of definition of blah-blah function, and it's range of values, etc.\"<br>\n\"Find the solutions and don't forget about domain of definition.\"</p>\n<p>Programming should have use for them too, imo (they could throws exceptions, errors or NaNs)</p>\n<p>...</p>",
        "id": 135005767,
        "sender_full_name": "zaa",
        "timestamp": 1538441056
    },
    {
        "content": "<blockquote>\n<p>Necessary for lean, or for mathematics?</p>\n</blockquote>\n<p>For math.</p>",
        "id": 135005768,
        "sender_full_name": "zaa",
        "timestamp": 1538441071
    },
    {
        "content": "<p>There are plenty of places where partial functions in all their guises are useful</p>",
        "id": 135005836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441279
    },
    {
        "content": "<p>But there are many ways to interpret what \"partial function\" even means</p>",
        "id": 135005877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441306
    },
    {
        "content": "<p>There are definitely lots of circumstances when the domain of a function is only a subset of some initial set that we are interested in; I guess you might call that a partial function, though I think most of the time people prefer just to talk about functions with different domains.</p>",
        "id": 135005878,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538441309
    },
    {
        "content": "<p>In dependent type theory, you have the ability to specify such precise domains that it is not really necessary to have a partial function in the truest sense</p>",
        "id": 135005889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441370
    },
    {
        "content": "<p>Usually when I talk about a partial function in lean I mean a function with an argument that is a proof</p>",
        "id": 135005934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441404
    },
    {
        "content": "<p>Every partial function is isomorphic to a total function, over the subtype</p>",
        "id": 135005943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441454
    },
    {
        "content": "<blockquote>\n<p>Usually when I talk about a partial function in lean I mean a function with an argument that is a proof</p>\n</blockquote>\n<p>Like <code>F: forall x, P x -&gt; A</code>?</p>",
        "id": 135005954,
        "sender_full_name": "zaa",
        "timestamp": 1538441502
    },
    {
        "content": "<p>Right</p>",
        "id": 135005957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441508
    },
    {
        "content": "<p>Actually there are two ways to losslessly totalize the function. One is to \"push the argument left\" to form the subtype <code>{x // P x} -&gt; A</code>, and the other is to push the argument right, into the output, as <code>X -&gt; \\Sigma p, p -&gt; A</code></p>",
        "id": 135006020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441601
    },
    {
        "content": "<p>also known as <code>X -&gt; roption A</code> or <code>X -&gt;. A</code> which is the mathlib type of partial functions</p>",
        "id": 135006025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441623
    },
    {
        "content": "<p>When working in a programming context, it is often reasonable to upgrade this to <code>X -&gt; option A</code>. Here the function will \"tell you\" if you have gone out of domain, and will return a result if not</p>",
        "id": 135006076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441701
    },
    {
        "content": "<p>whereas <code>X -&gt; roption A</code> will not \"tell you\" if you have got the domain right; you have to pass in a proof that you are allowed to call the function before you get a result</p>",
        "id": 135006085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441741
    },
    {
        "content": "<p><code>X -&gt; option A</code> is what people have at school. :D</p>",
        "id": 135006134,
        "sender_full_name": "zaa",
        "timestamp": 1538441821
    },
    {
        "content": "<p>It looks like <code>roption</code> is only used in the computability stuff in mathlib, whereas <code>option</code> appears much more frequently.</p>",
        "id": 135006139,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538441851
    },
    {
        "content": "<p>That's mostly because we don't use partial functions that much</p>",
        "id": 135006187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441901
    },
    {
        "content": "<p>Most of the time you can avoid it one way or another</p>",
        "id": 135006189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441913
    },
    {
        "content": "<p>Notice that with either approach, you get a plain nondependent function. This is important for stuff like rewriting to work smoothly</p>",
        "id": 135006205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441946
    },
    {
        "content": "<p>with the proof exposed version, you have a dependent function, and then <code>rw</code> will often fail and <code>simp</code> will produce huge goals</p>",
        "id": 135006216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538441972
    },
    {
        "content": "<p>How are square root or logarithms (staying with real numbers) done in lean?</p>",
        "id": 135006411,
        "sender_full_name": "zaa",
        "timestamp": 1538442194
    },
    {
        "content": "<p>Coq has that <code>positive := { x | x &gt;= 0 }</code> approach and than square root works on them, if I remember correctly.<br>\nNo idea about logarithms, should check if they're even in the Standard Library. It seems they're not.</p>",
        "id": 135006601,
        "sender_full_name": "zaa",
        "timestamp": 1538442444
    },
    {
        "content": "<p><a href=\"http://﻿﻿﻿﻿https://github.com/leanprover/mathlib/blob/master/data/real/basic.lean#L508\" target=\"_blank\" title=\"http://﻿﻿﻿﻿https://github.com/leanprover/mathlib/blob/master/data/real/basic.lean#L508\">Here's sqrt</a> and <a href=\"https://github.com/leanprover-community/mathlib/blob/exp/analysis/exponential.lean#L119\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/exp/analysis/exponential.lean#L119\">here's the in-progress fork with ln</a>.</p>",
        "id": 135006655,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538442503
    },
    {
        "content": "<p>Most mathematical functions in mathlib are totalized, meaning that rather than preserving the proof part we just do something random when it's not true</p>",
        "id": 135006734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538442647
    },
    {
        "content": "<p>e.g. a sqrt function might be defined to be the usual thing for nonnegative x and 0 for negative x</p>",
        "id": 135006750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538442674
    },
    {
        "content": "<p>unfortunately sqrt(-1) is not 37</p>",
        "id": 135013778,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538456062
    },
    {
        "content": "<p>And 1/0 isn't too.</p>",
        "id": 135016849,
        "sender_full_name": "zaa",
        "timestamp": 1538461771
    },
    {
        "content": "<p>Ok, then partial functions are used only if really necessary. We should do that at school math too :D.</p>",
        "id": 135016912,
        "sender_full_name": "zaa",
        "timestamp": 1538461866
    },
    {
        "content": "<p>I am a mathematician and was very uncomfortable initially with the fact that sqrt(-1) was not <code>NaN</code>. But now I interpret it exactly as Mario says -- I have a mental note not to use the square root function on negative numbers in the statements of my theorems because I use it like a partial function even though it's total. Of course in the proofs I can do what I like. The fact that the square root function \"should\" only be used on non-negative integers is somehow something which a human uses for guidelines, but Lean doesn't need to be told this.</p>",
        "id": 135018459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538464623
    }
]