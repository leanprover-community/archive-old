[
    {
        "content": "<p>How can I, in general, prove this sort of statements?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"bp\">×</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≠</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>My guess is that in general, no two inductive types are equal, is that the case?</p>",
        "id": 233009309,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1617459286
    },
    {
        "content": "<p>I think Lean is consistent with the assertion that two types are equal iff they have the same cardinality (?). So you can't prove either of these</p>",
        "id": 233010183,
        "sender_full_name": "David Wärn",
        "timestamp": 1617460282
    },
    {
        "content": "<p>Right, the only proofs I've seen about types are ones that prove they can't be equal due to different cardinalities</p>",
        "id": 233011295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617461634
    },
    {
        "content": "<p>Or ones that prove indexed families are equal given their indices are equal, such as <code>list A = list B</code> if <code>A = B</code></p>",
        "id": 233011382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617461702
    },
    {
        "content": "<p>Lean could be set up with <code>int</code> defined to be equal to <code>nat</code> but with a different zero, one, addition and multiplication. Similarly <code>prod</code> could be set up in such a way that <code>prod X unit</code> is definitionally equal to <code>X</code>. Asking if two types are distinct is asking the wrong kind of question, because it depends on what is going on under the hood.</p>",
        "id": 233011732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617462090
    },
    {
        "content": "<p>Oh, interesting, I didn't know that, thank you all for the clarifications</p>",
        "id": 233012094,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1617462466
    },
    {
        "content": "<p>In my nonformal opinion, <code>unit x unit</code> is equal to <code>unit</code>.</p>",
        "id": 233012280,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617462622
    },
    {
        "content": "<p>(both are \"the\" terminal type)</p>",
        "id": 233012296,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617462643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> where does this notion of equality come from?<br>\nSo far I've only heard that types are <em>definitionally</em> equal if they are beta-reducible to each other in the context of CiC (I'm guessing this is only vaguely accurate).</p>",
        "id": 233016358,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1617466945
    },
    {
        "content": "<p>For sure a category has only one terminal type up to unique isomorphism. However if you believe that it has one terminal type up to equality then I guess you're doing HoTT -- this is what Voevodsky believed.</p>",
        "id": 233016363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617466954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span>  David (and Horatiu, in their question) is talking about Lean's <code>eq</code>, which I think some people call structural equality. It's an inductively defined proposition, which is weaker than definitional equality.</p>",
        "id": 233016396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617467041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> what I'm wondering is, since <code>eq</code> is defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>... how can we show anything to be equal that is not already definitionally equal? With <code>n + 0 = n</code> I guess it makes sense intuitively, as we can just unfold the definition of addition and then get definitionally equal terms. But with <code>nat = int</code> I don't see how this would work.</p>",
        "id": 233016903,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1617467602
    },
    {
        "content": "<p>You should think about the <code>0 + n = n</code> example. For any explicit natural number like <code>37</code>, <code>0 + 37 = 37</code> is definitionally true. But if <code>n : nat</code> is arbitrary then<code>0 + n = n</code> is not definitional because you cannot unfold either side any more.</p>",
        "id": 233017010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617467707
    },
    {
        "content": "<p><code>nat = int</code> is not provable or disprovable in Lean, because it's \"false\" but the system has no way of expressing the reason it's false.</p>",
        "id": 233017039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617467745
    },
    {
        "content": "<p>You can show things to be equal which aren't definitionally equal because the conclusion of <code>nat.rec</code> is <code>forall n, C n</code> and if <code>C n</code> is <code>0 + n = n</code> then your proof involves an irreducible constant <code>nat.rec</code>.</p>",
        "id": 233017116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617467834
    },
    {
        "content": "<p>I think I misunderstand what is meant by \"Lean is consistent with the assertion that two types are equal iff they have the same cardinality\". Does this mean that all types of equal cardinality are equal?</p>",
        "id": 233017223,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1617467996
    },
    {
        "content": "<p>No, it means the weaker statement that if you have two types of the same cardinality then it is not possible to prove that they are unequal. <code>nat = int</code> in Lean is undecidable (assuming that Lean has no bugs and that Lean's dependent type theory is consistent).</p>",
        "id": 233017298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617468045
    },
    {
        "content": "<p>Had the designers done things in a different way (defining int to be a type wrapper for nat), then it could have been provable.</p>",
        "id": 233017320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617468099
    },
    {
        "content": "<p>Ahhh ok, thanks Kevin :)</p>",
        "id": 233017384,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1617468161
    },
    {
        "content": "<p>Actually I am slightly overstepping the mark -- I do not actually know how to prove (on paper) that it is impossible to prove <code>nat = int</code> in Lean with the current definitions of nat and int.</p>",
        "id": 233017486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617468293
    },
    {
        "content": "<p>I could be mistaken, but I think each time we declare an inductive type in Lean we’re effectively adding a bunch of new axioms to the system. Somehow this makes the undecidability of <code>nat = int</code> less surprising to me.</p>",
        "id": 233017524,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617468360
    },
    {
        "content": "<p>Why doesn't <code>foo = bar</code> for heterogeneous types invoke some typeclass, and for nat and int one that says \"no we're not equal\" in a sense other than definitional equality</p>",
        "id": 233017530,
        "sender_full_name": "Julian Berman",
        "timestamp": 1617468362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20types.20are.20different/near/233017486\">said</a>:</p>\n<blockquote>\n<p>Actually I am slightly overstepping the mark -- I do not actually know how to prove (on paper) that it is impossible to prove <code>nat = int</code> in Lean with the current definitions of nat and int.</p>\n</blockquote>\n<p>There is another model for lean to help with this. If the \"minimal model\" is the one where types are cardinals and you define all the core inductive constants by bijecting the obvious definition to its cardinal, the \"maximal model\" is the one where types are \"codes\" that represent the way the type was constructed. You can think of the set of codes as being an inductive type with constructors <code>pi : code -&gt; code -&gt; code</code>, <code>univ : nat -&gt; code</code>, and <code>mu : nat -&gt; inductive_spec -&gt; list code -&gt; code</code>, where the nat parameter in <code>mu</code> is an arbitrary disambiguator so that even if two inductives have the same specification, you can still make countably many distinct copies of it. That way, <code>nat</code> and <code>int</code> have different disambiguators (and different specifications), so they are not equal.</p>",
        "id": 233038591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617489915
    }
]