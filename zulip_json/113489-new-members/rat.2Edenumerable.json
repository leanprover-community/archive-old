[
    {
        "content": "<p>Just curious: is there a reason why <code>rat.denumerable</code> is proved via an equivalence to a subtype instead of just doing <code>of_encodable_of_infinite ℚ</code> directly?</p>",
        "id": 300847298,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664208134
    },
    {
        "content": "<p>As far as I can tell, the only thing the subtype provides is an easy proof of encodability, but we already have <code>encodable ℚ</code> so it seems unnecessary.</p>",
        "id": 300848044,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664208333
    },
    {
        "content": "<p>Here's where it was introduced: <a href=\"https://github.com/leanprover-community/mathlib/commit/3ad35223f321e644ef3e16ae9ec5b9383b2baabe\">https://github.com/leanprover-community/mathlib/commit/3ad35223f321e644ef3e16ae9ec5b9383b2baabe</a></p>\n<p>The <a href=\"https://github.com/leanprover-community/mathlib/blob/ebf8ff42db1e71dd0880e3f274dd5ac9303b8a2a/src/data/rat/defs.lean#L63\">encodable instance</a> uses very nearly the same subtype, but with a sigma type factored out.</p>\n<p>Maybe you want to investigate a creating a <code>denumerable ℚ</code> instance that uses the encodable instance more directly?</p>",
        "id": 300851419,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664209154
    },
    {
        "content": "<p>I'm just wondering why we don't simply write <code>instance : denumerable ℚ := of_encodable_of_infinite ℚ</code></p>",
        "id": 300851801,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664209251
    },
    {
        "content": "<p>are you saying that we want the denumerability encoding to be a bit different than the usual encoding?</p>",
        "id": 300851951,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664209307
    },
    {
        "content": "<p>No, I'm not meaning to imply anything, other than suggesting you could try simplifying that instance and see whether it breaks anything.</p>",
        "id": 300852393,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664209430
    },
    {
        "content": "<p>The git commit link also suggests that <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> might have an answer.</p>",
        "id": 300852493,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664209447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/rat.2Edenumerable/near/300851801\">said</a>:</p>\n<blockquote>\n<p>I'm just wondering why we don't simply write <code>instance : denumerable ℚ := of_encodable_of_infinite ℚ</code></p>\n</blockquote>\n<p>I think it's because there was no <code>encodable</code> instance for <code>ℚ</code>. I had to prove <code>encodable ℚ</code> inside the proof of <code>denumerable ℚ</code>.</p>",
        "id": 300855319,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1664210168
    },
    {
        "content": "<p>Not sure but there might even be two different <code>encodable</code> instances for <code>ℚ</code> at the moment if there's a <code>denumerable</code> to <code>encodable</code> instance.</p>",
        "id": 300855726,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1664210305
    },
    {
        "content": "<p>it looks like the encodable instance for Q was added back in <a href=\"https://github.com/leanprover-community/mathlib/commit/dd9f766f279522de930cee65ddab887f54179ff5\">October 2017</a></p>",
        "id": 300856612,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664210565
    },
    {
        "content": "<p>It looks like there was an encodable instance <a href=\"https://github.com/leanprover-community/mathlib/blame/e3234f0494c366bbe1f25ba859189a2a9c75f010/src/data/rat/basic.lean#L63\">at least four years ago</a>, and the denumerable instance was 2-3 years ago</p>",
        "id": 300856625,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664210569
    },
    {
        "content": "<p>perhaps it was just overlooked</p>",
        "id": 300856739,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664210610
    },
    {
        "content": "<p>I think I probably overlooked it.</p>",
        "id": 300856992,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1664210685
    },
    {
        "content": "<p>all good</p>",
        "id": 300857226,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664210761
    }
]