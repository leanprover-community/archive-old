[
    {
        "content": "<p>It seems like a lot of work is duplicated proving theorems between different proof systems. Is it possible to create bridges between proof systems, allowing proofs from one to be used in the other? I can think of two ways this could be done. One would be to make a program that compiles proofs from one language into the language of another, but this may be hard because each proof system organizes its theorems and axioms differently. Another way would be to prove that anything that some other program verifies is true. But maybe this would be just as hard as manually re-proving everything of importance.</p>\n<p>I can't be the only one to have this idea, so is there any consensus that this wouldn't work, or any progress realizing this goal?</p>",
        "id": 211160791,
        "sender_full_name": "Benjamin",
        "timestamp": 1600967099
    },
    {
        "content": "<p>People are actively working on this, but so far there aren't many bridges that get actively used.</p>",
        "id": 211161051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600967215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> has shown that we can use all of Metamaths <a href=\"http://set.mm\">set.mm</a> in Lean, if we build a little bit of glue.</p>",
        "id": 211161123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600967260
    },
    {
        "content": "<p>The downside of these bridges, is that they need to be maintained. And both sides of the bridge need to work on this.</p>",
        "id": 211161197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600967284
    },
    {
        "content": "<p>For example Lean's mathlib is growing rapidly, and we don't care about backwards compatibility at all. If people want to build a bridge to use mathlib in other programs, this must be a royal pain.</p>",
        "id": 211161271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600967332
    },
    {
        "content": "<p>There are quite a few papers about all sorts of bridges, and tools like Dedukti. To the best of my knowledge, nothing of that really works in practice, and there are lots of obstacles.</p>",
        "id": 211167974,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600970400
    },
    {
        "content": "<p>I think it can be done if you want to import a really big theorem (small statement, big proof), but hardly for entire libraries, which is what people care about usually.</p>",
        "id": 211168108,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600970441
    },
    {
        "content": "<p>Is it a matter of standardization or incompatible proof systems or something else?</p>",
        "id": 211168238,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600970501
    },
    {
        "content": "<p>Incompatibility of the logic is not usually a big problem. Non-idiomaticity is the biggie</p>",
        "id": 211171872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600972387
    },
    {
        "content": "<p>I think it's a surmountable problem but it requires a bit of social buy-in</p>",
        "id": 211171924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600972423
    },
    {
        "content": "<p>people have to actually care about how their theorems are presented in another language</p>",
        "id": 211172064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600972487
    },
    {
        "content": "<p>(Sorry if this is a very bad question, but) at some level do theorem provers (Lean specifically I guess) manifest some fully inlined verifyable thing, without lots of importing and hopping around? Presumably having some sort of transactable serialized form of that fully verifyable thing is a possible step on this path? Or further, is it a sensical question to ask whether that fully inlined thing could be defined in terms of some intermediate language kind of like bytecode on a VM, and then  at least there's a stabler layer than the \"user-facing\" mathlib API (or every theorem prover's specific API) on which you can transact across different environments?</p>",
        "id": 211176928,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600974807
    },
    {
        "content": "<p>You might be interested in this page on Lean's export format: <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/export_format.md\">https://github.com/leanprover-community/lean/blob/master/doc/export_format.md</a></p>",
        "id": 211177055,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600974880
    },
    {
        "content": "<p>Aha very interesting! Thanks.</p>",
        "id": 211177192,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600974918
    },
    {
        "content": "<p>Some slides I presented in 2016:<br>\n<a href=\"/user_uploads/3121/_pBdBfRIdLC_lEc7OPdaQqR8/dagstuhl2016-proofs.pdf\">dagstuhl2016-proofs.pdf</a></p>",
        "id": 211180372,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600976552
    },
    {
        "content": "<p>Explanations:</p>\n<ol>\n<li>Flyspeck (by Hales et al.) was originally spread over three systems. They ended up redoing the Coq parts in HOL4 and never connecting HOL Light and Isabelle/HOL, even though the logics are very close and even though there exists some bridges (including a fast one by Kalizsyk and Krauss).</li>\n</ol>",
        "id": 211180495,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600976624
    },
    {
        "content": "<ol>\n<li>I don't know exactly what the obstacles are to connecting the HOL Light and Isabelle/HOL proofs, but apparently the bridges can't do it.</li>\n</ol>",
        "id": 211180603,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600976661
    },
    {
        "content": "<ol start=\"2\">\n<li>Although HOL Light has lots of analysis libraries, to be useful in Isabelle one has to be able to generalize it beyond reals, to use type classes in an idiomatic way, fit in with the rest of the library.</li>\n</ol>",
        "id": 211180886,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600976795
    },
    {
        "content": "<ol start=\"3\">\n<li>I had a student whom I wanted to develop proofs for me. I wanted him to develop idiomatic, well-indented Isabelle proofs that can form the basis for further development and generalization.</li>\n</ol>",
        "id": 211180970,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600976851
    },
    {
        "content": "<ol start=\"3\">\n<li>A \"proof market\" approach, by Dale Miller et al., where bidders offer to solve the proof obligations for you in any system, would have been completely uninteresting to me.</li>\n</ol>",
        "id": 211181091,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600976927
    },
    {
        "content": "<p>In short, I think whole-theory translation tools, at the level of proof calculi, as envisioned by Dowek and Miller, are not practical for a wide range of scenarios that interest me and hence the wrong thing.</p>",
        "id": 211181185,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600976986
    },
    {
        "content": "<p>On the other hand, ad hoc tools that adapt HOL Light syntax to Isabelle/HOL are already used by people like Paulson and are actually useful and save time.</p>",
        "id": 211181296,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600977025
    },
    {
        "content": "<p>In the end, it boils down to \"non-idiomaticity\" as Mario pointed out, but I thought it would be worth spelling out what that can mean in practice.</p>",
        "id": 211181426,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600977099
    },
    {
        "content": "<p>There's also the following question: Suppose you want to use SomeCoqLib in Lean. Do you want to have a bridge so that you effectively link against SomeCoqLib (just like a Python program can link against a C library) or do you want to port SomeCoqLib to Lean and then modify it in Lean? In the former case, what do you do if you need to generalize SomeCoqLib? Lean Coq? In the latter case, you miss out on new SomeCoqLib features, and you have to deal with the clone -- but at least you can do what you want with it, and make it more native.</p>",
        "id": 211181695,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1600977260
    },
    {
        "content": "<p>The FFI metaphor is interesting</p>",
        "id": 211188743,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600981061
    },
    {
        "content": "<p>As are the slides of course, thanks for sharing. Especially on slide 8 I wonder how different proofs are than other kinds of software there?</p>",
        "id": 211189007,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600981196
    },
    {
        "content": "<p>(In terms of most proofs being append-only and not modified). For \"well defined/have-good-interface\" parts of software libraries I don't know that that's quite so different either, people don't heavily refactor them</p>",
        "id": 211189119,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600981241
    },
    {
        "content": "<p>Yes, I opened a tutorial project, and still have the same issue</p>",
        "id": 211189748,
        "sender_full_name": "ZY Cao",
        "timestamp": 1600981545
    },
    {
        "content": "<p>As I see it, the difference between software and proofs is as follows. In the Flyspeck case, they proved <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> in Isabelle and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A' \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> in HOL Light, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">A'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> are morally the same but use symbols defined in different systems (e.g. Isabelle division vs. HOL Light division).</p>",
        "id": 211230806,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1601022484
    },
    {
        "content": "<p>If this were software, you'd create bindings: You'd just say: Division in Isabelle = division in HOL Light, etc.</p>",
        "id": 211230843,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1601022514
    },
    {
        "content": "<p>and then you'd import <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> in HOL Light, as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">A'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, and use it to discharge the condition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">A'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 211230883,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1601022561
    },
    {
        "content": "<p>This is effectively what we do in our minds when we audit and accept the Flyspeck proof.</p>",
        "id": 211230896,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1601022581
    },
    {
        "content": "<p>But to our community, these bindings are not good enough; we'd like ideally the entire proof to be checked by one system (to maximize trust).</p>",
        "id": 211230967,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1601022621
    },
    {
        "content": "<p>And if not, we'd need at least a good tool and methodology for verifying the bindings.</p>",
        "id": 211231007,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1601022660
    },
    {
        "content": "<p>One could imagine that different mathematicians have different models of what mathematics is, and write their papers with these models in mind, and yet because of mathematicians' black magic someone who firmly believes that mathematics is built using foundation X (but never talks about this in public) will happily use results which someone proved with foundation Y in their minds as they proved it.</p>",
        "id": 211231029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601022680
    },
    {
        "content": "<p>Yes, something like that. I believe your paper that spent 2 years on arXiv before getting submitted was a bit an example of that, where you had to delve deeply into the literature to make sure everything fits.</p>",
        "id": 211231131,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1601022741
    },
    {
        "content": "<p>All of this being said, my main conclusion is this:</p>\n<blockquote>\n<p>Instead of talking about translation tools, I would propose to first focus on workflow and concrete use cases. Tools can help a workflow. Tools developed without a workflow in mind often end up having zero users (like the many bridges between proof assistants built over the years).</p>\n</blockquote>",
        "id": 211231210,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1601022815
    },
    {
        "content": "<p>(The general idea of focusing on workflows first and not tools is something I learned from Manfred Broy, professor emeritus at TU München.)</p>",
        "id": 211231596,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1601023149
    },
    {
        "content": "<p>As an example of a workflow, if we had some nontrivial amount of mathematics built using the <a href=\"http://set.mm\">set.mm</a> library as a dependency, then it would help to ensure the quality of the bridge. I think the problem with setting this up is a sort of chicken and egg problem regarding the quality of the bridge</p>",
        "id": 211251048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601036902
    },
    {
        "content": "<p>I hesitate to propose that it be available as a dependency for mathlib itself, since that will double it in size</p>",
        "id": 211251161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601036970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121058\">Jasmin Blanchette</span> <a href=\"#narrow/stream/113489-new-members/topic/Translating.20proofs.20between.20proof.20systems/near/211230843\">said</a>:</p>\n<blockquote>\n<p>If this were software, you'd create bindings: You'd just say: Division in Isabelle = division in HOL Light, etc.</p>\n<p>This is effectively what we do in our minds when we audit and accept the Flyspeck proof.</p>\n<p>But to our community, these bindings are not good enough; we'd like ideally the entire proof to be checked by one system (to maximize trust).</p>\n</blockquote>\n<p>I think this is the right attitude. The real work is the bindings, not the bridge. The bridge can be validated once and for all, for the most part, but the bindings are the alignment of concepts, and this evolves with the libraries</p>",
        "id": 211251954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601037404
    },
    {
        "content": "<p>I believe that it is possible to get a bridge going where all the user has to provide are the bindings (keeping in mind that proofs need bindings too)</p>",
        "id": 211252037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601037472
    }
]