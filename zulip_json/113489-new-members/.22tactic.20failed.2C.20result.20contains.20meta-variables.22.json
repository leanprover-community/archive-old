[
    {
        "content": "<p>What does <code>tactic failed, result contains meta-variables</code> mean? Concretely, I have the following (not entirely minimal, I apologize!) example. Near the end (after the 3rd <code>fconstructor</code>) it says \"goals accomplished\", but at the very end it says <code>tactic failed, result contains meta-variables state: no goals</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.arrow</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.preserves.shapes.terminal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">v₁</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_lifting_property</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">sq</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">arrow.has_lift</span> <span class=\"n\">sq</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">right_lifting_property_initial_iff</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_initial</span> <span class=\"n\">i.left</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_lifting_property</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">i.right</span> <span class=\"bp\">⟶</span> <span class=\"n\">p.right</span><span class=\"o\">},</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">i.right</span> <span class=\"bp\">⟶</span> <span class=\"n\">p.left</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">≫</span> <span class=\"n\">p.hom</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">sq</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n    <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n    <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n    <span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"c1\">-- here it says goals accomplished</span>\n    <span class=\"o\">},</span>\n<span class=\"kd\">end</span> <span class=\"c1\">-- here it says tactic failed, result contains meta-variables</span>\n<span class=\"c1\">-- state: no goals</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 231933904,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616749964
    },
    {
        "content": "<p>This is usually a bug in a tactic, it basically means there are unsolved goals that were not added to the tactic state. I think you can use the <code>recover</code> tactic to get the goal back.</p>",
        "id": 231934142,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616750126
    },
    {
        "content": "<p>I don't seem to get this error on the latest mathlib, by the way.</p>",
        "id": 231935084,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616750744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> Does it help to use <code>fsplit</code> instead of <code>split</code>?</p>",
        "id": 231935397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616750945
    },
    {
        "content": "<p>I think there might be some goals that <code>tidy</code> tries to prove on its own. And by default <code>split</code> hides them from your goal list, I think.</p>",
        "id": 231935434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616750971
    },
    {
        "content": "<p>No, <code>fsplit</code> doesn't give a different behaviour here for me. <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> : thanks for pointing this out. What I suspect is that this is somehow caused by some edits i made in <code>arrow.lean</code> (at the behest of <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  in the context of a PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6852\">#6852</a>). However, I would like to be able to see which particular change in that dependency might cause the problem.</p>",
        "id": 231935891,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616751228
    },
    {
        "content": "<p>It is possible (but I am not sure) that the following addition that I made in <code>category_theory/arrow.lean</code> causes this problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `w_mk_left` is not needed, as it is a consequence of `w` and `mk_hom`.</span>\n<span class=\"kd\">@[simp, reassoc]</span> <span class=\"kd\">lemma</span> <span class=\"n\">w_mk_right</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sq</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">mk</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sq.left</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f.hom</span> <span class=\"bp\">≫</span> <span class=\"n\">sq.right</span> <span class=\"o\">:=</span>\n<span class=\"n\">sq.w</span>\n</code></pre></div>",
        "id": 231936015,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616751274
    },
    {
        "content": "<p>Another change I made in <code>arrows.lean</code> is adding this (cf. Scott's advice in the PR here: <a href=\"https://github.com/leanprover-community/mathlib/pull/6852#discussion_r600913161\">https://github.com/leanprover-community/mathlib/pull/6852#discussion_r600913161</a>)</p>\n<p>```<br>\n/-- A lift of a commutative square is a diagonal morphism making the two triangles commute. -/<br>\n@[ext] structure lift_struct {f g : arrow T} (sq : f ⟶ g) :=<br>\n(lift : f.right ⟶ g.left)<br>\n(fac_left' : f.hom ≫ lift = sq.left . obviously)<br>\n(fac_right' : lift ≫ g.hom = sq.right . obviously)</p>\n<p>restate_axiom lift_struct.fac_left'<br>\nrestate_axiom lift_struct.fac_right'</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 231936232,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616751402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> , <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Since it seems to be related to the dependency on arrow.lean, I have pushed all these edits here: <a href=\"https://github.com/leanprover-community/mathlib/pull/6852/commits/f616297826eef1117dabd1d46da4eb1ca233061b\">https://github.com/leanprover-community/mathlib/pull/6852/commits/f616297826eef1117dabd1d46da4eb1ca233061b</a><br>\nI am really puzzled by this error message... Thanks! </p>\n<p>P.S. The file where the error appears is <code>category_theory/lifting_properties.lean</code></p>",
        "id": 231937181,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616751897
    },
    {
        "content": "<p>Having a look now.</p>",
        "id": 231940690,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616753702
    },
    {
        "content": "<p>(This is the first time I've used <code>leanproject get-cache --rev f616297826eef1117dabd1d46da4eb1ca233061b</code>. Really cool!)</p>",
        "id": 231940754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616753733
    },
    {
        "content": "<p>I'm not sure if someone said this already, but whenever you get <code>result contains metavariables</code> you should try <code>recover</code>, to see what the dropped goal was.</p>",
        "id": 231940893,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616753806
    },
    {
        "content": "<p>(This is not a solution, just helpful for diagnosing whatever went wrong.)</p>",
        "id": 231940907,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616753817
    },
    {
        "content": "<p>In this case it is <code>i.hom ≫ e = sq.left</code></p>",
        "id": 231940919,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616753827
    },
    {
        "content": "<p>I'm still not sure what's going on, but your <code>cases h1 with e he</code> is really weird.</p>",
        "id": 231941534,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616754129
    },
    {
        "content": "<p>Because you've used curly brackets in the lemma statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">has_lifting_property</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">i.right</span> <span class=\"bp\">⟶</span> <span class=\"n\">p.right</span><span class=\"o\">},</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">i.right</span> <span class=\"bp\">⟶</span> <span class=\"n\">p.left</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">≫</span> <span class=\"n\">p.hom</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>when you write <code>cases h1 with e he</code> it is creating a new metavariable for the implicit argument.</p>",
        "id": 231941657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616754190
    },
    {
        "content": "<p>Why the curly brackets in the first place?</p>",
        "id": 231941682,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616754205
    },
    {
        "content": "<p>Ah... that is orthogonal to the real problem.</p>",
        "id": 231941947,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616754323
    },
    {
        "content": "<p>In any case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">right_lifting_property_initial_iff</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_initial</span> <span class=\"n\">i.left</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_lifting_property</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">i.right</span> <span class=\"bp\">⟶</span> <span class=\"n\">p.right</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">i.right</span> <span class=\"bp\">⟶</span> <span class=\"n\">p.left</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">≫</span> <span class=\"n\">p.hom</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hlift</span> <span class=\"n\">bottom</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">comm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">is_initial.to</span> <span class=\"n\">h</span> <span class=\"n\">p.left</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">p.hom</span> <span class=\"bp\">=</span> <span class=\"n\">i.hom</span> <span class=\"bp\">≫</span> <span class=\"n\">bottom</span> <span class=\"o\">:=</span>\n      <span class=\"n\">is_initial.hom_ext</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">hlift</span> <span class=\"o\">(</span><span class=\"n\">arrow.hom_mk</span> <span class=\"n\">comm</span><span class=\"o\">),</span>\n    <span class=\"n\">use</span> <span class=\"n\">arrow.lift</span> <span class=\"o\">(</span><span class=\"n\">arrow.hom_mk</span> <span class=\"n\">comm</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">sq</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"n\">sq.right</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨{</span><span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">fac_left'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">fac_right'</span> <span class=\"o\">:=</span> <span class=\"n\">he</span><span class=\"o\">}⟩⟩,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">is_initial.hom_ext</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 231942359,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616754524
    },
    {
        "content": "<p>You could leave out the <code>fac_right'</code> field if you want.</p>",
        "id": 231942430,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616754566
    }
]