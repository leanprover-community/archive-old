[
    {
        "content": "<p>consider this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">asd</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"s2\">\"\"</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"s2\">\"\"</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"s2\">\"\"</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">asd</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span>\n<span class=\"k\">#print</span> <span class=\"n\">asd</span>\n</code></pre></div>\n<p>The <code>def</code> works just fine, but not the <code>lemma</code>.</p>",
        "id": 295320089,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661466357
    },
    {
        "content": "<p>I presume <code>by exact rfl</code> works?</p>",
        "id": 295320275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661466468
    },
    {
        "content": "<p>probably we should just get rid of the error. It says <code>not a rfl-lemma, even though marked as rfl</code> but the user never wrote any marking</p>",
        "id": 295320609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661466620
    },
    {
        "content": "<p>anyway, it's saying that it's not a \"rfl-lemma\" because it's not syntactically an equality between two defeq things</p>",
        "id": 295320709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661466691
    },
    {
        "content": "<p>being proved by <code>rfl</code> is not sufficient for something to be a rfl-lemma</p>",
        "id": 295320735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661466709
    },
    {
        "content": "<p>It looks like lemmas are \"marked\" as rfl-lemmas if their proof is either literally <code>rfl</code> or <code>iff.rfl</code>, and then there's a check that the lemma is proving an equality or an iff (and if it's not then the error happens).</p>",
        "id": 295320823,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661466747
    },
    {
        "content": "<p>I think we should just fail silently (not put the <code>@[_rfl_lemma]</code> annotation) if it fails the check</p>",
        "id": 295320885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661466794
    },
    {
        "content": "<p>That seems reasonable.</p>\n<p>Another workaround (in addition to <code>by exact rfl</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"s2\">\"\"</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 295321005,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661466856
    },
    {
        "content": "<p>that one produces a different proof term though</p>",
        "id": 295321026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661466873
    },
    {
        "content": "<p><code>@rfl _ _</code> probably works too</p>",
        "id": 295321102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661466916
    },
    {
        "content": "<p>or <code>@@rfl</code>, heh</p>",
        "id": 295321151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661466948
    },
    {
        "content": "<p>What is <code>@@rfl</code>?</p>",
        "id": 295349136,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661484462
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@@</span><span class=\"n\">rfl</span> <span class=\"c1\">-- rfl : ?M_2 = ?M_2</span>\n</code></pre></div>",
        "id": 295349210,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1661484518
    },
    {
        "content": "<p><code>ðŸ‘€rfl</code></p>",
        "id": 295565261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661590774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> <code>@@</code> makes instance arguments and higher-order arguments (i.e., pi types) be explicit. I think, like <code>@</code>, if you put <code>_</code> in place of an instance argument it'll still synthesize an instance for you.</p>",
        "id": 295628812,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661625386
    }
]