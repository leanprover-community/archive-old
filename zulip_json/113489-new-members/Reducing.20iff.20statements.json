[
    {
        "content": "<p>In general, if I have hypotheses of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span>  <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>how might I deduce</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 282168340,
        "sender_full_name": "Jack M",
        "timestamp": 1652387924
    },
    {
        "content": "<p>I would guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/iff.or\">docs#iff.or</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/iff.not\">docs#iff.not</a> would help</p>",
        "id": 282168418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652387983
    },
    {
        "content": "<p>That is, <code>p.or q.not</code> should get you almost to your goal</p>",
        "id": 282168517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652388029
    },
    {
        "content": "<p>I would do something like <code>simp [lt_iff_le_and_ne, p, q]</code></p>",
        "id": 282170272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652388930
    },
    {
        "content": "<p>Here's Mario's proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lt_iff_le_and_ne</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 282170542,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652389074
    }
]