[
    {
        "content": "<p>Hi everyone, I have a problem with <code>match</code> expression. Given the following code</p>\n<div class=\"codehilite\"><pre><span></span>def foo (α : Type) (n : ℕ) (i : fin n) : α :=\n  match n with\n  | nat.zero    := {! 1 !}\n  | nat.succ n&#39; := {! 2 !}\n  end\n</pre></div>\n\n\n<p>To complete the first goal, I should be able to put <code>fin.elim0 i</code><br>\nsince <code>i : fin 0</code> and has no element.</p>\n<p>However, the problem is that Lean tells me that <code>i : fin n</code>. That's<br>\nfine since <code>n = 0</code> anyway but how can get such evidence that <code>n = 0</code> from match?</p>",
        "id": 170909309,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1563208361
    },
    {
        "content": "<p>This should be in a FAQ; it comes up every couple of months. There's some clever trick to get round it which sometimes I remember but right now I don't.</p>",
        "id": 170909674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563208629
    },
    {
        "content": "<p>For this example, you can use pattern-matching more directly like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">elim0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"mi\">2</span> <span class=\"bp\">!</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 170909767,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1563208686
    },
    {
        "content": "<p>I guess this works in match:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">i</span>   <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">elim0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"mi\">2</span> <span class=\"bp\">!</span><span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 170909835,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1563208756
    },
    {
        "content": "<p>in Lean you must explicitly list <code>i</code> as a parameter in <code>match</code>, since it participates in the function</p>",
        "id": 170909946,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1563208834
    },
    {
        "content": "<p>ah, thank you, everyone.</p>",
        "id": 170910000,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1563208898
    },
    {
        "content": "<p>woah, what is this \"a comma is allowed in match\" syntax? Does a comma make a term of <code>prod</code> without the outer parentheses, or is that hardcoded?</p>",
        "id": 170953528,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563251454
    },
    {
        "content": "<p>No, <code>match</code> is more like a multiple lambda + application. It supports multiple args same as <code>def</code>, they aren't tupled</p>",
        "id": 170953803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563251844
    },
    {
        "content": "<p>why does the syntax for an \"inline match\" used to make a definition not require the use of commas, then?</p>",
        "id": 170954380,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563252684
    },
    {
        "content": "<p>instead we have to do that weird bracket business</p>",
        "id": 170954387,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563252696
    },
    {
        "content": "<p>i assume the syntax for definitions is that way to be consistent with everything else (where space is usually the delimiter of choice when possible).<br>\nfor the match syntax, you need some delimiter between the arguments to the match to distinguish it from function application, and the syntax for the cases is then chosen to be consistent with the delimiter for the parameters.</p>",
        "id": 170966006,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1563266740
    },
    {
        "content": "<p>Hi, I have another question to ask. This is the original motivation why I open this topic in the first place. I just manage to simplify from my original code.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span><span class=\"bp\">.</span><span class=\"n\">star</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><code>foo1</code> should be able to finish with <code>rfl</code> alone but my original code requires me to use <code>match</code> (so be it). The match expression is trivial yet lean complain that</p>\n<p>\"invalid match/convoy expression, user did not provide type for the expression, lean tried to infer one using expected type information, but result is not type correct nested exception message:<br>\ncheck failed, application type mismatch (use 'set_option trace.check true' for additional details)\" </p>\n<p>So after seeing a trace from 'set_option trace.check true' I see that the problem comes from <code>y</code>so I fix it in <code>foo2</code>. However, it doesn't make any sense why I must pattern matching in <code>y</code> as it is not used in <code>rfl</code> at all. Anyone, please explain to me, please?</p>",
        "id": 171063843,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1563357543
    },
    {
        "content": "<p>Another thing that I notice is that, the old <code>y</code> in <code>foo2</code> outside <code>match</code> doesn't go away, I know this from the context of an error message when <code>rfl</code> is replaced by <code>_</code>, there are two <code>y</code> in the context. Well, this makes sense if <code>match</code> is just a syntactic sugar of the original pattern matching function.</p>\n<p>My concern is that, should I really use the same name for both <code>y</code>? I don't want to use the different name since it pollutes the context, but if I use the same name, I might run into another cryptic error message where  I have another variable that depends on the original <code>y</code> and I think that the variable depends on the new <code>y</code>. Moreover, I don't have evidence that the old and new <code>y</code> are equal (the same problem of my very first question). </p>\n<p>I try to think that is there a way <em>not</em> to introduce a new <code>y</code>? I try to use an inaccessible term by changing the inner <code>y</code> to be <code>.(y)</code>but I have an error message saying that \"ill-formed match/equation expression\". Doesn't an inaccessible term work in match expression?</p>",
        "id": 171064713,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1563358534
    },
    {
        "content": "<p>Lean accepts <code>rfl</code> as a proof term for <code>foo1</code> (for me).</p>\n<p>You can replace the <code>y</code> in the <code>match</code>-expression in <code>foo2</code> with placeholder (<code>_</code>) to indicate that it doesn't really matter.</p>\n<p>There's a tactic for clearing away assumptions whose names begin with underscores.</p>",
        "id": 171105484,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1563388610
    },
    {
        "content": "<p>I guess the issue isn't proving <code>foo1</code>, it's why the match doesn't work. One could imagine a more complex situation where you need the case split</p>",
        "id": 171105655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563388726
    },
    {
        "content": "<p>You can't <code>match x</code> in the first place there</p>",
        "id": 171105681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563388757
    },
    {
        "content": "<p>Why not?</p>",
        "id": 171105700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563388770
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span><span class=\"bp\">.</span><span class=\"n\">star</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid match/convoy expression, user did not provide type for the expression, lean tried to infer one using expected type information, but result is not type correct</span>\n<span class=\"cm\">nested exception message:</span>\n<span class=\"cm\">check failed, application type mismatch (use &#39;set_option trace.check true&#39; for additional details)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 171105810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563388822
    },
    {
        "content": "<p>dammit Lean I provided types for all the expressions</p>",
        "id": 171105831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563388842
    },
    {
        "content": "<p>Think about this from first principles. The recursor says that if you want to prove <code>forall x : unit, C x</code> it suffices to prove it for <code>C star</code>. <code>match</code> is reverting <code>x</code>, then applying the recursor, but it's not possible to revert <em>only</em> <code>x</code> because <code>y</code> depends on <code>x</code></p>",
        "id": 171105866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563388867
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I matched!</p>",
        "id": 171105928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563388920
    },
    {
        "content": "<p>when lean says \"user did not provide type for the expression\" it means you didn't write <code>match x : forall x : unit, y = y with ...</code></p>",
        "id": 171105999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563388955
    },
    {
        "content": "<p>Aah, I see your point now Mario. So <code>match</code> reverts <em>only</em> the stuff being matched, and then attempts to apply the recursor.</p>",
        "id": 171106007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563388968
    },
    {
        "content": "<p><code>cases</code> will automatically revert and re-intro all dependent hypotheses like <code>y</code> here, so it has the same effect as putting <code>y</code> in the match and also in the pattern</p>",
        "id": 171106087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563389027
    },
    {
        "content": "<p>It also removes the outer <code>y</code> if it can so you don't get confused</p>",
        "id": 171106164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563389059
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- refl will not work here</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 171106186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563389075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"144193\">@Gun Pinyo</span> the moral is that you shouldn't be matching terms when other terms depend on them. You have to match all the terms depending on them too.</p>",
        "id": 171106540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563389203
    },
    {
        "content": "<p>If the type of a variable has to change, then it can't be the same variable</p>",
        "id": 171106594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563389249
    },
    {
        "content": "<p>the old <code>y</code> had type <code>A x</code>, the new one has type <code>A star</code></p>",
        "id": 171106612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563389267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Thank you for your explanation.</p>\n<p>It seems to me that the tactic approach is much cleaner and easier to use than term-proving approach (at least for my questions). Up until now, I try to use the term-proving approach as much as possible to aid readability but now I need to change my mind.</p>",
        "id": 171158836,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1563447716
    }
]