[
    {
        "content": "<p>Hi! I'm a newcomer to Lean, started learning the system yesterday. My thoughts are to contribute some stuff about finite-dimensional convex sets to mathlib.</p>\n<p>For starters I decided to prove a simple lemma, and spent the last 2 days chasing sorry's and shortening &amp; simplifying the proofs and the statements...<br>\nI'm looking for feedback for my code (attached). Anything from comments on my proof technique, to granularity of the lemmas, to the use of classical logic (didn't manage the first 2 properties without it), to stylistic comments. I want my code to be idiomatic.</p>\n<p>Also, I felt that there's a proof tactic missing: similar to \"simp\", but that also tries to perform \"apply\" and \"exact\" steps in addition to \"rewrite\". Is there such a tactic? If not, would it be hard to make one or computationally heavy to run it?</p>\n<p><a href=\"/user_uploads/3121/57z4nZgHrCn_TyW4KCOFlZvH/convexity.lean\">convexity.lean</a></p>",
        "id": 197866908,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589746500
    },
    {
        "content": "<p>I suggest cut and pasting the code here in a code block in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 197866929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589746550
    },
    {
        "content": "<p>Sure!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">convex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">general</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">not_forall</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">not_nonempty_iff_eq_empty</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_iff_forall_not_mem</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_bdd_above_over_everything</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bdd_above</span><span class=\"o\">,</span> <span class=\"n\">upper_bounds</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hs</span> <span class=\"n\">x</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_bdd_below_under_everything</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">bdd_below</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bdd_below</span><span class=\"o\">,</span> <span class=\"n\">lower_bounds</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hs</span> <span class=\"n\">x</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">general</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">real_line</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">between_mem_real_convex</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_le_x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_le_b</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">convex_real_iff</span> <span class=\"n\">at</span> <span class=\"n\">sc</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ab_subset_s</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n        <span class=\"k\">from</span> <span class=\"n\">sc</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">x_mem_ab</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">a_le_x</span><span class=\"o\">,</span> <span class=\"n\">x_le_b</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_of_mem_of_subset</span> <span class=\"n\">x_mem_ab</span> <span class=\"n\">ab_subset_s</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">unbounded_convex_is_real_line</span> <span class=\"o\">(</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sna</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">bdd_below</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_univ_of_forall</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">not_bdd_below_under_everything</span> <span class=\"n\">snb</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">not_bdd_above_over_everything</span> <span class=\"n\">sna</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">a_le_x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">ha</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">x_le_b</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hb</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">between_mem_real_convex</span> <span class=\"n\">sc</span> <span class=\"n\">ha</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hb</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">a_le_x</span> <span class=\"n\">x_le_b</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">real_line</span>\n</code></pre></div>",
        "id": 197866973,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589746578
    },
    {
        "content": "<p>I think you can prove the first theorem using</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">not_bdd_above_over_everything</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">bdd_above</span><span class=\"o\">,</span> <span class=\"n\">upper_bounds</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hs</span>\n</code></pre></div>",
        "id": 197867041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589746699
    },
    {
        "content": "<p>The main thing which stands out to me here is the use of \"non-terminal simps\" - that means uses of simp which don't close the goal. For instance the first line of  <code>not_bdd_above_over_everything</code>, but not your proof of <code>x_mem_ab</code>. Non-terminal simps are discouraged, mainly because they're usually less robust in mathlib: if someone adds a new simp lemma, non-terminal simp proof often break. You can avoid them by changing it to <code>squeeze_simp</code>, which will tell you a <code>simp only</code> to replace your <code>simp</code> with. Or in some cases you can convert to a simpa, like Mario suggests</p>",
        "id": 197867058,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589746783
    },
    {
        "content": "<p>More minor things: instead of <code>have name : type, from proof</code> you can do <code>have name : type := proof</code>. Also I think two spaces are preferred in mathlib</p>",
        "id": 197867127,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589746829
    },
    {
        "content": "<p>I really prefer the version using <code>from</code>, it reads much nicer</p>",
        "id": 197867146,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589746865
    },
    {
        "content": "<p>The <code>:=</code> looks weird.</p>",
        "id": 197867152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589746883
    },
    {
        "content": "<p>Fair enough, I prefer the <code>:=</code> but I guess this is personal choice</p>",
        "id": 197867155,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589746896
    },
    {
        "content": "<p>To me <code>:=</code> really suggests data</p>",
        "id": 197867195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589746924
    },
    {
        "content": "<p>The best way to get a lot of feedback on a piece of Lean code is to PR it to mathlib on GitHub. People can more easily comment on specific lines of your code / make suggestions.</p>",
        "id": 197867218,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589747018
    },
    {
        "content": "<p>Nice suggestions! Thanks :)</p>\n<p>Where could I have read about <code>simpa</code> (and presumably other tactics)?</p>",
        "id": 197867220,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589747026
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a></p>",
        "id": 197867225,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589747041
    },
    {
        "content": "<p>Most steps in the proof of <code>between_mem_real_convex</code> just unfold definitions, so the proof can be condensed to (fixed a typo)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">between_mem_real_convex</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_le_x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_le_b</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">convex_real_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">sc</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"bp\">⟨</span><span class=\"n\">a_le_x</span><span class=\"o\">,</span> <span class=\"n\">x_le_b</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 197867290,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589747124
    },
    {
        "content": "<p>The <code>have : type := value</code> version also compiles faster and has better type inference</p>",
        "id": 197867373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589747242
    },
    {
        "content": "<p>because <code>have : type, from value</code> is actually two tactics back to back</p>",
        "id": 197867379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589747265
    },
    {
        "content": "<p>This version works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">between_mem_real_convex</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_le_x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_le_b</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_of_mem_of_subset</span>\n  <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Icc</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a_le_x</span> <span class=\"n\">x_le_b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">convex_real_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">sc</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197867517,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589747440
    },
    {
        "content": "<p>Note that both <code>mem_of_mem_of_subset</code> and <code>mem_Icc</code> just unfold definitions. In particular, you can apply <code>h : s \\sub t</code> to <code>hx : x \\in s</code></p>",
        "id": 197867577,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589747561
    },
    {
        "content": "<p>and is more intuitive to me (I can see how the function applications correspond to logic operations).</p>\n<p>What do the brackets do? Is it magic? (Your version works too)</p>",
        "id": 197867578,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589747566
    },
    {
        "content": "<p>Brackets work as \"use the only constructor for the expected type\"</p>",
        "id": 197867588,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589747616
    },
    {
        "content": "<p>Lovely!</p>",
        "id": 197867644,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589747700
    },
    {
        "content": "<p>So it works for <code>and</code>, <code>Exists</code>, <code>prod</code>, <code>sigma</code>, ...</p>",
        "id": 197867658,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589747757
    },
    {
        "content": "<p>How did you learn Lean? You seem to have an exotic combination of knownledge</p>",
        "id": 197867702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589747789
    },
    {
        "content": "<p>This anonymous constructor thing is much more basic than some things you seem to understand well</p>",
        "id": 197867711,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589747811
    },
    {
        "content": "<p>I'm curious where you learned the <code>rewrite</code> tactic</p>",
        "id": 197867722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589747850
    },
    {
        "content": "<p>mathlib almost exclusively uses <code>rw</code></p>",
        "id": 197867725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589747863
    },
    {
        "content": "<p>Proof assistance was in the back of my mind for a while, I read about Mizar some years ago, and started learning by doing around half of the tutorial (which is very tactic-heavy imo)</p>",
        "id": 197867769,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589747897
    },
    {
        "content": "<p>Is your background in maths or computing?</p>",
        "id": 197867774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589747916
    },
    {
        "content": "<p>The tutorials are aimed at mathematicians, who think in a tactic-heavy way</p>",
        "id": 197867780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589747946
    },
    {
        "content": "<p>which tutorial</p>",
        "id": 197867781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589747949
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> is a lot more termy</p>",
        "id": 197867784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589747960
    },
    {
        "content": "<p>He already answered that question by complaining about tactics <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 197867787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589747963
    },
    {
        "content": "<p>I have a graduate degree (MA) in math, but I've been working in algorithmics for the last few years</p>",
        "id": 197867792,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589747989
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/tutorials/\">https://github.com/leanprover-community/tutorials/</a></p>",
        "id": 197867796,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589747990
    },
    {
        "content": "<p>You might like tpil better</p>",
        "id": 197867852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589748016
    },
    {
        "content": "<p>is that this book?</p>\n<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">https://leanprover.github.io/theorem_proving_in_lean/</a></p>\n<p>this really supplemented my knowledge and was a great help, but the syntax seems very out of date</p>",
        "id": 197867867,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589748049
    },
    {
        "content": "<p>the strange thing about the tutorial is that it focuses on goal tactics rather than on rewrite tactics, which seem to me to be closer to the usual way proofs are done (with natural language)</p>",
        "id": 197867890,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589748115
    },
    {
        "content": "<p>mathlib uses term mode proofs for a lot of simple \"apply, cases, exact\" proofs</p>",
        "id": 197867892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748117
    },
    {
        "content": "<p>No, TPIL is not outdated</p>",
        "id": 197867936,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589748135
    },
    {
        "content": "<p>Yury's version of <code>between_mem_real_convex</code> is a good example</p>",
        "id": 197867941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748146
    },
    {
        "content": "<p>About the first two lemmas: it would be nice to have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">not_bdd_above_iff&#39;</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bdd_above</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_bdd_above_iff</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bdd_above</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>plus <code>bdd_below</code> versions. These lemmas should go to <code>order/bounds</code>.</p>",
        "id": 197867942,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589748146
    },
    {
        "content": "<p>(not tested, possibly I missed some \"obvious\" assumption)</p>",
        "id": 197867948,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589748163
    },
    {
        "content": "<p>why nonempty?</p>",
        "id": 197867959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748209
    },
    {
        "content": "<p>These compile:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">not_bdd_above_iff&#39;</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bdd_above</span><span class=\"o\">,</span> <span class=\"n\">upper_bounds</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_bdd_above_iff</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bdd_above</span><span class=\"o\">,</span> <span class=\"n\">upper_bounds</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 197868050,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589748336
    },
    {
        "content": "<p>But they still need classical logic... Is it common practice to use  it in mathlib?<br>\n(Personally I dont see why it's required here, but can be hard to tell sometimes what's constructive and what isn't)</p>",
        "id": 197868102,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589748396
    },
    {
        "content": "<blockquote>\n<p>But they still need classical logic... Is it common practice to use it in mathlib?</p>\n</blockquote>\n<p>yes</p>",
        "id": 197868108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748411
    },
    {
        "content": "<p>mathlib is a predominantly classical library</p>",
        "id": 197868129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748442
    },
    {
        "content": "<p>It's not enough to use <code>[decidable_linear_order α]</code> for example</p>",
        "id": 197868136,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589748455
    },
    {
        "content": "<p>right, the decidability assumption on this is complicated enough as to be useless in practice</p>",
        "id": 197868149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748481
    },
    {
        "content": "<p>One of the aims of mathlib is to cover a normal maths undergraduate degree course and this uses so much classical stuff that it's become the default</p>",
        "id": 197868189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589748487
    },
    {
        "content": "<p>Mathlib is trying to be \"for the rest of the mathematicians\", as opposed to pretty much all the other proof assistants out there which take great pains to be constructive</p>",
        "id": 197868196,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589748499
    },
    {
        "content": "<p>if you are avoiding EM then you shouldn't use this lemma</p>",
        "id": 197868197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748499
    },
    {
        "content": "<blockquote>\n<p>pretty much all</p>\n</blockquote>\n<p>well, Coq and Agda mostly</p>",
        "id": 197868206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748517
    },
    {
        "content": "<p>I stand hyperbolic</p>",
        "id": 197868216,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589748543
    },
    {
        "content": "<p>isabelle, HOL, HOL light are classical</p>",
        "id": 197868218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748543
    },
    {
        "content": "<p>but most DTT theorem provers are constructive, it is true</p>",
        "id": 197868227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748568
    },
    {
        "content": "<p>Another question: how can I get type hints in \"direct mode\"?<br>\nFor example, I'm writing</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">unbounded_convex_is_real_line&#39;</span> <span class=\"o\">(</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sna</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">bdd_below</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_univ_of_forall</span> <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span>  <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>how do I get (in VS code with the plugin) the type I should create in the lambda?</p>",
        "id": 197868378,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589748789
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">unbounded_convex_is_real_line&#39;</span> <span class=\"o\">(</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sna</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">bdd_below</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_univ_of_forall</span> <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197868380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748809
    },
    {
        "content": "<p>lean 3 uses  a comma after a lambda, not an arrow</p>",
        "id": 197868388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748828
    },
    {
        "content": "<p>(lean 4 thinks arrows are cool)</p>",
        "id": 197868427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748843
    },
    {
        "content": "<p>cool, replacing with a comma and adding an underscore works</p>",
        "id": 197868433,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589748852
    },
    {
        "content": "<p>you can also use <code>begin end</code> in place of any underscore or place where a term is expected to go to tactic mode locally</p>",
        "id": 197868446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748893
    },
    {
        "content": "<p>nice :)</p>",
        "id": 197868518,
        "sender_full_name": "Amir Livne Bar-on",
        "timestamp": 1589748979
    }
]