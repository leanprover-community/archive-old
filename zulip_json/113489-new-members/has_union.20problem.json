[
    {
        "content": "<p>Hi everyone! I'm new to lean, and I was testing around when I had the following silly question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">example_block</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u_1</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s₁</span> <span class=\"bp\">∪</span> <span class=\"n\">s₂</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">∪</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">example_block</span>\n</code></pre></div>\n<p>This code throws the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">test_2.lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">77</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_union</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">test_2.lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">87</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_union</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not sure where the problem is. I thought import <code>finset</code> is enough, but apparently not. Thank you in advance!</p>",
        "id": 270600310,
        "sender_full_name": "Tung Tran",
        "timestamp": 1643914905
    },
    {
        "content": "<p>That's because <code>[_inst_1 : decidable_eq α]</code> is right to the colon.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">∪</span> <span class=\"n\">s₂</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">∪</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270600562,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643914989
    },
    {
        "content": "<p>I think this should work too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">∪</span> <span class=\"n\">s₂</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">∪</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(untested)</p>",
        "id": 270600745,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643915047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> \"column\" -&gt; \"colon\" probably?</p>\n<p><span class=\"user-mention\" data-user-id=\"297668\">@Tung Tran</span> Lean doesn't add typeclasses in quantifiers to the cache by default. Typeclass arguments before the colon get added to the cache.</p>",
        "id": 270600919,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643915130
    },
    {
        "content": "<p>Just to show you how you can coax Lean into using the typeclass inside a quantifier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">example_block</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u_1</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">s₁</span> <span class=\"bp\">∪</span> <span class=\"n\">s₂</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">∪</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">example_block</span>\n</code></pre></div>",
        "id": 270601148,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643915224
    },
    {
        "content": "<p>Thank you so much for all the help! <br>\n<span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Also this is exactly what I need, thank you!</p>",
        "id": 270601725,
        "sender_full_name": "Tung Tran",
        "timestamp": 1643915443
    },
    {
        "content": "<p>I was looking at this thread thinking \"?? this is <code>refl</code>??\" and it's only now I'm at a computer and I've checked, I find that you've all been winding me up.</p>",
        "id": 270791857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644021155
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">∪</span> <span class=\"n\">s₂</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">∪</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270791894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644021199
    }
]