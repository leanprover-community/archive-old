[
    {
        "content": "<p>How do I declare a type where each element satisfies a predicate? <code>list.all</code> seems to almost be what I want, but it works in terms of <code>bool</code> instead of <code>Prop</code>.</p>",
        "id": 202184901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593262583
    },
    {
        "content": "<p>i don't understand your question</p>",
        "id": 202184980,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593262715
    },
    {
        "content": "<p>does <code>Pred</code> mean <code>Prop</code>?</p>",
        "id": 202184984,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593262721
    },
    {
        "content": "<p>are you asking how to coerce a bool to a Prop?</p>",
        "id": 202184999,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593262766
    },
    {
        "content": "<p>Subtype?</p>",
        "id": 202185065,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1593262848
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"err\">↑</span><span class=\"n\">ff</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">x</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 202185072,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593262862
    },
    {
        "content": "<p>No, I'm asking how to convert an <code>a -&gt; Prop</code> to an <code>a -&gt; bool</code></p>",
        "id": 202185096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593262921
    },
    {
        "content": "<p>See the statement of <code>all_iff_forall_prop</code> for example.</p>",
        "id": 202185296,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593263219
    },
    {
        "content": "<p>why do you want to work with bool?</p>",
        "id": 202185306,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593263232
    },
    {
        "content": "<p>Jalex, see the original question.</p>",
        "id": 202185313,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593263246
    },
    {
        "content": "<p>(oh, probably by original question you mean <a href=\"#narrow/stream/113489-new-members/topic/Multually.20defined.20inductive.20type.20and.20function/near/202086075\">this thread</a>, where maybe eric is computing with stuff)</p>",
        "id": 202185323,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593263278
    },
    {
        "content": "<p>my objection is that the main reason to work with <code>bool</code> is computing things, but coming from <code>Prop</code> loses computational interpretation?</p>",
        "id": 202185369,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593263308
    },
    {
        "content": "<p>I don't want to work with bool, but the closest thing I found to what I want is <code>list.all</code>, which does</p>",
        "id": 202185632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593263719
    },
    {
        "content": "<p>It's looking like the answer is I should subtype the _elements_ of the list</p>",
        "id": 202185691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593263769
    },
    {
        "content": "<p>Which I somehow missed</p>",
        "id": 202185696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593263781
    },
    {
        "content": "<p>So as the simplest version of my question, how would I state the proposition <code>all elements of a list of Nat are &gt; 2</code></p>",
        "id": 202185782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593263920
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202185874,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593264054
    },
    {
        "content": "<p>you were in fact asking how to coerce a bool into a Prop</p>",
        "id": 202185883,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593264072
    },
    {
        "content": "<p>typeclass inference knows about a coercion from bool to Prop, so if you just ask Lean to interpret a bool as a Prop, it will apply that coercion</p>",
        "id": 202185891,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593264098
    },
    {
        "content": "<p>Wouldn't you want to construct a term of type <code>∀ n : ℕ, n ∈ l → 2 &lt; n</code>?</p>",
        "id": 202185959,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1593264194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20elements.20all.20satisfying.20predicate/near/202184901\">said</a>:</p>\n<blockquote>\n<p>How do I declare a type where each element satisfies a predicate? <code>list.all</code> seems to almost be what I want, but it works in terms of <code>bool</code> instead of <code>Prop</code>.</p>\n</blockquote>\n<p>(Jalex, I'm talking about this one!)</p>",
        "id": 202185965,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593264207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20elements.20all.20satisfying.20predicate/near/202185965\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20elements.20all.20satisfying.20predicate/near/202184901\">said</a>:</p>\n<blockquote>\n<p>How do I declare a type where each element satisfies a predicate? <code>list.all</code> seems to almost be what I want, but it works in terms of <code>bool</code> instead of <code>Prop</code>.</p>\n</blockquote>\n<p>(Jalex, I'm talking about this one!)</p>\n</blockquote>\n<p>okay, I think I understand now. Eric said they wanted to be able to turn their <code>a \\to Prop</code> into <code>a \\to bool</code>, but actually they're just as happy going the other way, and the other way is the right way</p>",
        "id": 202186110,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593264399
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">they_all_satisfy_predicate</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 202186383,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593264750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> is this what you want?</p>",
        "id": 202186395,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593264769
    },
    {
        "content": "<p>Ignoring the excursion into bool land, you are looking at one of two options. You could construct a list from a subtype with a proof attached to each element i.e. <code>list {n : ℕ // 2 &lt; n}</code>. Or make a list <code>l</code> and then prove this fact about it <code>∀ n : ℕ, n ∈ l → 2 &lt; n</code>. Which is better might depend on your particular use case, but I think I see more of the latter style in mathlib.</p>",
        "id": 202187385,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1593266497
    },
    {
        "content": "<p>I recommend Kenny's idiom</p>",
        "id": 202187391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593266515
    },
    {
        "content": "<p>there are simp lemmas for it and decidability</p>",
        "id": 202187432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593266546
    },
    {
        "content": "<p>Shouldn't <code>list.all</code> be renamed to <code>list.ball</code>?</p>",
        "id": 202187435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593266560
    },
    {
        "content": "<p>perhaps, but it's not really competing with anything</p>",
        "id": 202187438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593266577
    },
    {
        "content": "<p>Well, it would free up the name for a <code>Prop</code>-valued version</p>",
        "id": 202187445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593266595
    },
    {
        "content": "<p>I don't want a prop valued version to exist</p>",
        "id": 202187451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593266608
    },
    {
        "content": "<p>because that would mean two idioms</p>",
        "id": 202187456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593266617
    },
    {
        "content": "<p><code>∀ x ∈ L, P x</code> already exists</p>",
        "id": 202187457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593266631
    },
    {
        "content": "<p>It turns out we do have the definition I was looking for, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list_all\">docs#list_all</a> which satisfies <code>list_all p l ↔ ∀ x ∈ l, p x</code>. Should we rename that to <code>list.all</code> or <code>list.forall</code>? It's a bit silly having <code>list.all</code> be about <code>bool</code> and <code>list_all</code> being about <code>Prop</code>.</p>",
        "id": 249452241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628935567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20elements.20all.20satisfying.20predicate/near/202187451\">said</a>:</p>\n<blockquote>\n<p>I don't want a prop valued version to exist</p>\n</blockquote>\n<p>This is a strange claim to make given you are responsible for it existing!</p>",
        "id": 249452262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628935647
    }
]