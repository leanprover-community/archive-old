[
    {
        "content": "<p>Hello! I am trying to write a function from fin (to make the goal position a rainbow in Fifteen). Here's a smaller MWE that's equivalent to my issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">37</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">test</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Why does it have <code>⊢ 0 &lt; 0</code> and not <code>⊢ n &lt; n+1</code>?<br>\nThanks!</p>",
        "id": 221301727,
        "sender_full_name": "Angela Li",
        "timestamp": 1609433361
    },
    {
        "content": "<p>I am not an expert in this kind of thing but I suspect that you need to either use some custom recursor (which probably exists?) or you need to prove that what you're doing is well-founded, following the instructions at <a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">https://leanprover-community.github.io/extras/well_founded_recursion.html</a></p>",
        "id": 221302002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609433564
    },
    {
        "content": "<p>following the instructions Kevin posted, something like this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">37</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">test</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span>\n  <span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">subtype.val</span><span class=\"o\">⟩]}</span>\n</code></pre></div>",
        "id": 221302042,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1609433606
    },
    {
        "content": "<p>In this particular case, you can define it like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">37</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fin.induction_on</span> <span class=\"n\">i</span> <span class=\"mi\">37</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 221302845,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609434307
    },
    {
        "content": "<p>Which is a custom recursor that Kevin mentioned.</p>",
        "id": 221302919,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609434356
    },
    {
        "content": "<p>that should be called <code>rec_on</code> surely? If it can be used to construct data it's recursion not induction.</p>",
        "id": 221302920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609434356
    },
    {
        "content": "<p>or <code>\\lam i, 37</code> :D</p>",
        "id": 221302966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609434364
    },
    {
        "content": "<p>Sure, but the recursor example shows how to access the recursing values</p>",
        "id": 221303042,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609434432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>: It can't be called <code>fin.rec_on</code>, because that already exists as <code>subtype.rec_on</code> (I think)</p>\n<p>Edit: No, it's just <code>x.rec_on</code> that finds <code>subtype.rec_on</code></p>",
        "id": 221303731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609435015
    },
    {
        "content": "<p>If <code>fin.rec_on</code> existed <code>x.rec_on</code> would find it instead of <code>subtype.rec_on</code></p>",
        "id": 221304088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609435351
    },
    {
        "content": "<p>Plus dot notation doesn't work for recursors</p>",
        "id": 221304116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609435396
    },
    {
        "content": "<p>oh yeah :-)</p>",
        "id": 221305089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609436376
    }
]