[
    {
        "content": "<p>Hello, I'm attempting to construct an instance of <code>partial_order</code> for a type however I've run into an error I cannot make sense of when I construct the <code>lt_iff_le_not_le</code> field</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">lt_iff_le_not_le'</span>\n  <span class=\"n\">lt_iff_le_not_le</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"order_laws_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>From the definition of <code>preorder</code>, I see that this field has a <code>.</code> after it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">order_laws_tac</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>After looking at the mathlib documentation, I learned that <code>order_laws_tac</code> is a tactic, however, I'm not sure what using a <code>.</code> and then a tactic does.<br>\nThe documentation for <code>order_laws_tac</code> mentions the <code>refl</code> tactic but I constructed a <code>linear_order</code> for another type very similarly and did not run into this issue.</p>\n<p>My full code up until this error is here:<br>\n<a href=\"https://gist.github.com/sjkillen/c815cd47e434b55befb8a1665b614b0f\">https://gist.github.com/sjkillen/c815cd47e434b55befb8a1665b614b0f</a></p>\n<p>Although I don't expect anyone to read through that mess and I hope that there's something that will either help me understand this error or to write a minimal example.</p>",
        "id": 279246005,
        "sender_full_name": "Fingy Soupy",
        "timestamp": 1650238316
    },
    {
        "content": "<p>This means that <code>a &lt; b</code> is defined as <code>a ≤ b ∧ ¬ b ≤ a</code> by default and you must have defined it another way. <code>. order_laws_tac</code> is a way to automatically prove <code>∀ {a b}, a &lt; b ↔ a ≤ b ∧ ¬b ≤ a</code> when the default <code>&lt;</code> is used (this is basically ust trying <code>refl</code>).</p>",
        "id": 279259182,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650258442
    },
    {
        "content": "<p>You should either not define a custom <code>&lt;</code> or prove that your custom <code>&lt;</code> really respects <code>a &lt; b ↔ a ≤ b ∧ ¬b ≤ a</code>.</p>",
        "id": 279259238,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650258497
    },
    {
        "content": "<p>Oh sorry, rereading this, the problem is somewhere else. You simply didn't include the <code>lt</code> field in <code>I.partial_order</code>, so it defaulted to <code>a ≤ b ∧ ¬ b ≤ a</code>, meaning that your proof of <code>a &lt; b ↔ a ≤ b ∧ ¬ b ≤ a</code> doesn't apply anymore because it's talking about a (definitionally different but propositionally equal) <code>&lt;</code>. The fix is to simply include it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le</span><span class=\"o\">,</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">le_trans</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 279260209,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650260205
    },
    {
        "content": "<p>Ah, that works thank you! :) and thank you for explaining order_laws_tac</p>",
        "id": 279292038,
        "sender_full_name": "Fingy Soupy",
        "timestamp": 1650292676
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 279479371,
        "sender_full_name": "Fingy Soupy",
        "timestamp": 1650409253
    }
]