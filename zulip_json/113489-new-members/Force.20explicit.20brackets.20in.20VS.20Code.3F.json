[
    {
        "content": "<p>Is there a way to get VS Code to explicitly write all the brackets that it normally suppresses, e.g to write <code>(a + b) - c</code> rather than <code>a + b - c</code>?</p>",
        "id": 267558536,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641894686
    },
    {
        "content": "<p>There should be some argument to <code>set_option</code> that does this.</p>",
        "id": 267558717,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641894818
    },
    {
        "content": "<p>I've tried <code>set_option pp.</code> and looked through the autocomplete suggestions but nothing seems to be the thing I want.  Is there documentation for <code>set_option</code> somewhere?  (I didn't have much luck with a Google search for \"mathlib set_option\")</p>",
        "id": 267560321,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641895775
    },
    {
        "content": "<p><code>#help options</code></p>",
        "id": 267566860,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641899586
    },
    {
        "content": "<p>Wait! I think that what Yael means is \"someone should write such code\", not \"such code already exists\".</p>",
        "id": 267571482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641902482
    },
    {
        "content": "<p>Ah!  That would explain why I couldn't find it!  :)</p>",
        "id": 267579839,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641907508
    },
    {
        "content": "<p>It seems possible to implement without much difficulty. In lean/src/frontends/lean/pp.cpp there's a function <code>add_paren_if_needed</code> that could decide that they're always needed. There are other functions, too, that seem to decide whether to add parens, like <code>pp_num</code>, <code>pp_notation_child</code>, and maybe some things about pretty printing universe levels.</p>",
        "id": 267605927,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641918142
    },
    {
        "content": "<p>I suggest that we do not include parentheses in function application. For example, <code>f x y z</code> should not be <code>(((f x) y) z)</code>, but <code>(f x y z)</code> is fine. Otherwise, the output of <code>pp.all</code> will be even less readable than it is now.</p>",
        "id": 267630591,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641928255
    },
    {
        "content": "<p>I'm also interested in an option to force some more parentheses, for teaching purposes. I guess this doesn't require modifying cpp files. I think we can add it in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/interactive_expr.lean\">tactic.interactive_expr</a>. This has the advantage that anyone can use it in a project, it doesn't have to be in mathlib. This is what I do to use <a href=\"https://github.com/leanprover-community/mathlib/pull/5440\">#5440</a> for teaching. I'd be very grateful if someone understanding the widget framework could show how to tun every  <code>a+b</code> into <code>(a+b)</code> by modifying that file.</p>",
        "id": 267743916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642002940
    },
    {
        "content": "<p>Ok its not what you really want or pretty but I just tried a quick experiment with a much more low-level feature, custom info view css:</p>\n<ul>\n<li>Open Vscode settings, go to \"Lean: Info view style\"</li>\n<li>Paste in</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">.</span><span class=\"n\">expr</span><span class=\"bp\">-</span><span class=\"n\">boundary</span><span class=\"o\">:</span><span class=\"n\">before</span> <span class=\"o\">{</span><span class=\"n\">content</span><span class=\"o\">:</span> <span class=\"sc\">'('</span><span class=\"bp\">;</span><span class=\"o\">}</span> <span class=\"bp\">.</span><span class=\"n\">expr</span><span class=\"bp\">-</span><span class=\"n\">boundary</span><span class=\"o\">:</span><span class=\"n\">after</span> <span class=\"o\">{</span> <span class=\"n\">content</span><span class=\"o\">:</span> <span class=\"sc\">')'</span><span class=\"bp\">;</span> <span class=\"o\">}</span>\n</code></pre></div>\n<ul>\n<li>close and re-open the info view and you get:<br>\n<a href=\"/user_uploads/3121/Cd04U_jrWmoUfK1LpWNVMDu-/Screen-Shot-2022-01-12-at-17.19.41.png\">Screen-Shot-2022-01-12-at-17.19.41.png</a><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Cd04U_jrWmoUfK1LpWNVMDu-/Screen-Shot-2022-01-12-at-17.19.41.png\" title=\"Screen-Shot-2022-01-12-at-17.19.41.png\"><img src=\"/user_uploads/3121/Cd04U_jrWmoUfK1LpWNVMDu-/Screen-Shot-2022-01-12-at-17.19.41.png\"></a></div></li>\n</ul>",
        "id": 267747464,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642004447
    },
    {
        "content": "<p>I have a reason to dig into the pretty printer for something else anyway -- seeing as there's more interest in a parens option, I'll create a lean PR for it. (Maybe I'll figure out how to do <a href=\"https://github.com/leanprover-community/mathlib/pull/5440\">#5440</a>, too, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>)</p>",
        "id": 267750756,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642005765
    },
    {
        "content": "<p>Thanks! What do you mean by \"do <a href=\"https://github.com/leanprover-community/mathlib/pull/5440\">#5440</a>\"? This PR already works perfectly. Do you mean adding a config option?</p>",
        "id": 267752612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642006522
    },
    {
        "content": "<p>In the mean time I managed to do what I suggested except that I'm stuck at adding a config option.</p>",
        "id": 267752691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642006559
    },
    {
        "content": "<p>I tried to hack <code>tactic.is_trace_enabled_for</code> but I can't get it to work</p>",
        "id": 267752788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642006589
    },
    {
        "content": "<p>It's really a pain that adding options is not easy</p>",
        "id": 267752848,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642006617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Force.20explicit.20brackets.20in.20VS.20Code.3F/near/267752612\">said</a>:</p>\n<blockquote>\n<p>Thanks! What do you mean by \"do <a href=\"https://github.com/leanprover-community/mathlib/pull/5440\">#5440</a>\"? This PR already works perfectly. Do you mean adding a config option?</p>\n</blockquote>\n<p>I mean get it implemented directly in the pretty printer along with a configurable option</p>",
        "id": 267753634,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642006917
    },
    {
        "content": "<p>Nice</p>",
        "id": 267755012,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642007458
    },
    {
        "content": "<p>I would still be really interested in getting help with my option issue. Maybe <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> could have a look? I put my file at <a href=\"https://gist.github.com/PatrickMassot/5700bded8c1536f4bd470df3852de6f2\">https://gist.github.com/PatrickMassot/5700bded8c1536f4bd470df3852de6f2</a></p>",
        "id": 267755526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642007663
    },
    {
        "content": "<p>The line that does nothing is 148</p>",
        "id": 267755575,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642007689
    },
    {
        "content": "<p>At the very bottom there an example that fails</p>",
        "id": 267755608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642007705
    },
    {
        "content": "<p>Replacing line 148 by <code>match tt with ...</code> makes the example work</p>",
        "id": 267755675,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642007736
    },
    {
        "content": "<p>I'm not insisting on using a trace option, any way of having some sort of custom option would be good.</p>",
        "id": 267756329,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642007939
    },
    {
        "content": "<p>I have no idea about widgets. It seems like maybe it's reading options from a different environment or something</p>",
        "id": 267759207,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642009082
    },
    {
        "content": "<p>Thanks for trying. Maybe <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> could help then?</p>",
        "id": 267759970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642009422
    },
    {
        "content": "<p>I have another meta question for Rob. In the following code, is it possible to rewrite <code>foo</code> so that it looks like <code>foo'</code> (which doesn't work at all)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n   <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">get_goal</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span>\n   <span class=\"k\">match</span> <span class=\"n\">goal</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">trace</span> <span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"n\">skip</span>\n   <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">trace</span> <span class=\"s2\">\"b\"</span>\n   <span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n   <span class=\"o\">{</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">%%</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">get_goal</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span>\n     <span class=\"n\">trace</span> <span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"n\">skip</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">trace</span> <span class=\"s2\">\"b\"</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">}</span>\n   <span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n</code></pre></div>",
        "id": 267760486,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642009696
    },
    {
        "content": "<p>The motivation is first readability but also I'd like to have a more complicated pattern in my real use case.</p>",
        "id": 267760571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642009748
    },
    {
        "content": "<p>Here you go: <a href=\"https://gist.github.com/gebner/87defe68efaac3de248d1f0639fcff2e\">https://gist.github.com/gebner/87defe68efaac3de248d1f0639fcff2e</a></p>",
        "id": 267762066,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642010378
    },
    {
        "content": "<p>Thank you so much Gabriel!</p>",
        "id": 267762877,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642010646
    },
    {
        "content": "<p>Is <code>tactic.get_bool_option</code> the key thing  I was missing?</p>",
        "id": 267762922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642010665
    },
    {
        "content": "<p>(Line 543 should say \"1 goal\" instead of \"1 but\")</p>",
        "id": 267763025,
        "sender_full_name": "Julian Berman",
        "timestamp": 1642010721
    },
    {
        "content": "<p>I think that's French.</p>",
        "id": 267763067,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642010746
    },
    {
        "content": "<p>Aha! TIL.</p>",
        "id": 267763089,
        "sender_full_name": "Julian Berman",
        "timestamp": 1642010755
    },
    {
        "content": "<p>Oh yes, this is all for French speaking teaching</p>",
        "id": 267763163,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642010778
    },
    {
        "content": "<p>Having a tactic that switches this on is perfectly fine , but I'm still curious to know whether it could be done with a set_option</p>",
        "id": 267763274,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642010844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Force.20explicit.20brackets.20in.20VS.20Code.3F/near/267762922\">said</a>:</p>\n<blockquote>\n<p>Is <code>tactic.get_bool_option</code> the key thing  I was missing?</p>\n</blockquote>\n<p>Trace options are kind of special, <code>is_trace_enabled_for</code> doesn't look at the options.  I think <code>get_bool_option `trace.parens ff</code> would work as well (if you wanted to abuse the trace option).</p>",
        "id": 267763280,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642010846
    },
    {
        "content": "<p><code>set_option</code> is hard because afair there is no way to register options from the Lean side.</p>",
        "id": 267763330,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642010866
    },
    {
        "content": "<p>But there is still <code>declare_trace</code> that sounded promising</p>",
        "id": 267763452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642010913
    },
    {
        "content": "<p>I mean sure if you want <code>set_option trace.parens true</code> then that should work (declare_trace + get_bool_option).</p>",
        "id": 267763539,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642010951
    },
    {
        "content": "<p>Ok, I'll try for learning purposes but I'll probably keep the tactic anyway.</p>",
        "id": 267763670,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642011003
    },
    {
        "content": "<p>Julian, there are other teaching tweaks in this file. For instance the \"goals accomplished message\" is not only translated, it's also written bigger, because math is hard.</p>",
        "id": 267763778,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642011063
    },
    {
        "content": "<p>For the record: using the trace option does indeed work.</p>",
        "id": 267764403,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642011345
    },
    {
        "content": "<p>and we can have both: the trace option and the switching tactic.</p>",
        "id": 267764616,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642011423
    },
    {
        "content": "<p>Last question for Gabriel : is the if-then-else <code>bool.tt ← tactic.get_bool_option `trace.parens ff | pure s,</code> a normal trick? I was searching around stuff like <code>when</code> and gave up because I had other issues.</p>",
        "id": 267764903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642011536
    },
    {
        "content": "<p>For the record, another option would be to add a checkbox in the goal view.  This is not that complicated, see here for an example with a counter: <a href=\"https://github.com/leanprover-community/lean/blob/a8cf8a0c9ea19a633baeb3aa7e8d706b86c2c0f9/tests/lean/widget/widget2.lean\">https://github.com/leanprover-community/lean/blob/a8cf8a0c9ea19a633baeb3aa7e8d706b86c2c0f9/tests/lean/widget/widget2.lean</a></p>",
        "id": 267764949,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642011566
    },
    {
        "content": "<p>That would be really nice! Would you know how to make that persistent?</p>",
        "id": 267765075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642011613
    },
    {
        "content": "<blockquote>\n<p>is the if-then-else <code>bool.tt ← tactic.get_bool_option `trace.parens ff | pure s</code>, a normal trick?</p>\n</blockquote>\n<p>I think I used it pretty often in Lean 3, although not everyone liked it.  In Lean 4 you can also use the slightly more readable <code>if !(← getBoolOption `trace.parens) then return s</code>.</p>",
        "id": 267765125,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642011641
    },
    {
        "content": "<p>I mean more persistent than the tactic state filtering.</p>",
        "id": 267765151,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642011653
    },
    {
        "content": "<p>...which we can't make persistent, right?</p>",
        "id": 267765183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642011671
    },
    {
        "content": "<p>although around here you get the impression that anything can happen nowadays</p>",
        "id": 267765215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642011693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Force.20explicit.20brackets.20in.20VS.20Code.3F/near/267765075\">said</a>:</p>\n<blockquote>\n<p>That would be really nice! Would you know how to make that persistent?</p>\n</blockquote>\n<p>Unfortunately that's just as impossible as the tactic state filtering.</p>",
        "id": 267765216,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642011693
    },
    {
        "content": "<p>Yes Kevin, that's why I was asking.</p>",
        "id": 267765245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642011707
    },
    {
        "content": "<p>Lean 4?</p>",
        "id": 267765255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642011712
    },
    {
        "content": "<p>Ritual question: Lean 4?</p>",
        "id": 267765262,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642011720
    },
    {
        "content": "<p>In Lean 4 all of this happens on the vscode/editor side.  So: persistent tactic filters → super easy, I hope that Chris will do this soon; French localization → impossible from the Lean side, you'll need to PR it to the vscode extension.</p>",
        "id": 267765430,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642011813
    },
    {
        "content": "<p>(More parentheses → probably doable by adding a custom delaborator)</p>",
        "id": 267765652,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642011895
    },
    {
        "content": "<p>The impossible localization is bad news <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 267765762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642011955
    },
    {
        "content": "<p>I didn't know Chris is working on this. Which Chris do you mean btw?</p>",
        "id": 267765983,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642012026
    },
    {
        "content": "<p>Impossible to do from the Lean side, you can still customize the extension though (but I realize that this is organizationally much harder).</p>",
        "id": 267765994,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642012029
    },
    {
        "content": "<p>Chris Lovett.</p>",
        "id": 267766017,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1642012043
    },
    {
        "content": "<p>It's dinner time. I need to go. Thanks again for all your help!</p>",
        "id": 267766049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642012059
    },
    {
        "content": "<p>What do we think about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.parens</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">nat.add_assoc</span>\n<span class=\"c\">/-</span><span class=\"cm\"> nat.add_assoc : ∀ (n m k : ℕ), (((n + m) + k) = (n + (m + k))) -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> ⊢ (((x + y) - z) = ((x + (y * z)) - y)) -/</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> ⊢ ((f 2 (f 3 4 + 1) + 2) = f 1 2) -/</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> ⊢ ((x - (-3)) = ((-2) + x)) -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(Ping: <span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span>)</p>",
        "id": 268102684,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642218951
    },
    {
        "content": "<p>The implementation is just to wrap anything that is notation in parentheses, which seemed to be the smallest modification I could do that would get this feature to work, without adding way too many parentheses.</p>",
        "id": 268102750,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642219049
    },
    {
        "content": "<p>To create a PR, should I push directly to the lean repository? Or can I do it from a fork? (This is my first lean PR, and I don't have write access.)</p>",
        "id": 268102805,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642219124
    },
    {
        "content": "<p>Diff: <a href=\"https://github.com/leanprover-community/lean/compare/master...kmill:kmill_pp_parens?expand=1\">https://github.com/leanprover-community/lean/compare/master...kmill:kmill_pp_parens?expand=1</a></p>",
        "id": 268102809,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642219134
    },
    {
        "content": "<p>Outermost parentheses seem superfluous, but otherwise it looks good!</p>",
        "id": 268104151,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642221257
    },
    {
        "content": "<p>I agree that it would be nice to get rid of the outermost brackets, but otherwise this looks like just what I was hoping for!</p>",
        "id": 268109730,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642229384
    },
    {
        "content": "<p>Getting rid of outermost parentheses looks really hard, it requires a more global analysis. This output is also what you get with my implementation based on widgets.</p>",
        "id": 268130185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642259668
    },
    {
        "content": "<p>I had also considered an approach where <code>pp.parens</code> overrides the precedences of notation to convince lean to add more parentheses, but I couldn't convince myself that it would always produce correct output.</p>",
        "id": 268136136,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642266913
    },
    {
        "content": "<p>Even if the outermost parentheses seem superfluous, at least there's this invariant that every notation has a corresponding set of parentheses wrapping it. All the examples above are equalities, so we see outermost ones.</p>\n<p>In contrast, in this example there are no outermost parentheses so we know the top-level expression is not notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> ⊢ p (1 + 2) 3 -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268136137,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642266915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> Since you mentioned <code>pp.all</code>, what I learned looking through the source code is that, contrary to its name, it just overrides a handful of pretty printer options. Here's a complete list, for the curious:</p>\n<ul>\n<li><code>pp.implicit true</code></li>\n<li><code>pp.proofs true</code></li>\n<li><code>pp.coercions true</code></li>\n<li><code>pp.notation false</code></li>\n<li><code>pp.universes true</code></li>\n<li><code>pp.full_names true</code></li>\n<li><code>pp.beta false</code></li>\n<li><code>pp.numerals false</code></li>\n<li><code>pp.strings false</code></li>\n<li><code>pp.binder_types true</code></li>\n<li><code>pp.generalized_field_notation false</code></li>\n</ul>",
        "id": 268141139,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642273320
    },
    {
        "content": "<p>Oh wow, I had assumed that there was nothing between eg <code>pp.proofs true</code> and <code>pp.all</code>. I had no idea I had such fine control over output. This is surely helpful for debugging</p>",
        "id": 268172275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642321232
    },
    {
        "content": "<p>I will often use <code>pp.implicit true</code> and/or <code>pp.notation false</code> as a minimal set of options to see what I want (usually implicit typeclass arguments) without as much stuff as <code>pp.all</code></p>",
        "id": 268172803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642322098
    },
    {
        "content": "<p>Yes you've told me that before, but in situations where you need more I'd not realised that there are still many options available. I guess I'm yet to find out if this is useful in practice</p>",
        "id": 268173213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642322689
    }
]