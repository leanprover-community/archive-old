[
    {
        "content": "<p>I think your method is correct but I am struggling to convince the compiler that the valuation I return are valid and get error's like these <a href=\"/user_uploads/3121/45JgJfuAqHV7unuYgSNCi-pK/image.png\">image.png</a> , I have tried if-else statements which ensure only valid valuations get returned but alas, and proofs using ⟨V,valid V p⟩ in sitatuations were all valuations are valid but still nothing</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/45JgJfuAqHV7unuYgSNCi-pK/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/45JgJfuAqHV7unuYgSNCi-pK/image.png\"></a></div>",
        "id": 322988261,
        "sender_full_name": "Henkie67",
        "timestamp": 1674470771
    },
    {
        "content": "<p>The second entry within the angle brackets needs to be the proof. You've put the statement there</p>",
        "id": 322989134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674471093
    },
    {
        "content": "<p>That's like saying \"here's my proof of <code>true</code>: <code>true</code>\". The proof of <code>true</code> is <code>trivial</code>, not <code>true</code>. The proof of <code>valid valff p</code> is something you'll have to work out; I recommend making a standalone lemma for that.</p>",
        "id": 322989410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674471167
    },
    {
        "content": "<p>but in order to proof valid valff p don't i need to ensure that p is 100% valid without knowing what p is</p>",
        "id": 322996267,
        "sender_full_name": "Henkie67",
        "timestamp": 1674473385
    },
    {
        "content": "<p>Why don't you write a <code>begin sorry end</code> in place of <code>valid valff p</code> and see what your goal state is?</p>",
        "id": 322997233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674473662
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/cSKdTsLLyqGvKBKty41r42Ol/image.png\">image.png</a> <br>\nI keep getting this as a goal in pretty much every proof i make I don't know what that weird arrow means tho</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cSKdTsLLyqGvKBKty41r42Ol/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/cSKdTsLLyqGvKBKty41r42Ol/image.png\"></a></div>",
        "id": 323002683,
        "sender_full_name": "Henkie67",
        "timestamp": 1674475372
    },
    {
        "content": "<p>It means \"turn this <code>bool</code> into a <code>Prop</code>\"</p>",
        "id": 323003797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674475729
    },
    {
        "content": "<p>Can you share your new code?</p>",
        "id": 323003810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674475734
    },
    {
        "content": "<p>you mean check_val or the entire thing</p>",
        "id": 323003876,
        "sender_full_name": "Henkie67",
        "timestamp": 1674475761
    },
    {
        "content": "<p>May as well do the entire thing, otherwise it becomes hard to help</p>",
        "id": 323003932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674475774
    },
    {
        "content": "<p>You can put it in <code> ````spoiler </code> (with <code> ```lean </code> inside) to make it collapsible if you want</p>",
        "id": 323003959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674475788
    },
    {
        "content": "<p>will do</p>",
        "id": 323004189,
        "sender_full_name": "Henkie67",
        "timestamp": 1674475883
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 323004392,
        "sender_full_name": "Henkie67",
        "timestamp": 1674475945
    },
    {
        "content": "<p>check_val` is the new one</p>",
        "id": 323004479,
        "sender_full_name": "Henkie67",
        "timestamp": 1674475972
    },
    {
        "content": "<p>The trick you're missing is <code>if h : (valid1 valff p) = true then</code> instead of <code>if (valid1 valff p) = true then</code></p>",
        "id": 323004722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674476045
    },
    {
        "content": "<p>Then you have <code>h</code> at the sorry</p>",
        "id": 323004756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674476057
    },
    {
        "content": "<p>that worked nice</p>",
        "id": 323005425,
        "sender_full_name": "Henkie67",
        "timestamp": 1674476264
    },
    {
        "content": "<p>So now i have a function find_valutation ' which returns a valuation that is confirmed valid but how would i use that in proving the solver is valid</p>",
        "id": 323007664,
        "sender_full_name": "Henkie67",
        "timestamp": 1674476953
    },
    {
        "content": "<p>I would redefine <code>find_valuation</code> in terms of <code>find_valuation'</code></p>",
        "id": 323007977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674477031
    },
    {
        "content": "<p>ok but it gives me error that option {V:valuation//valid V p} is not option valuation</p>",
        "id": 323008682,
        "sender_full_name": "Henkie67",
        "timestamp": 1674477285
    },
    {
        "content": "<p>wich seems odd because it is still a valuation</p>",
        "id": 323008904,
        "sender_full_name": "Henkie67",
        "timestamp": 1674477357
    },
    {
        "content": "<p>Sure, you need to do some translation yourself</p>",
        "id": 323011404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674478172
    },
    {
        "content": "<p>Think about how you might turn an <code>option nat</code> into an <code>option int</code></p>",
        "id": 323011455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674478192
    },
    {
        "content": "<p>You will need the same trick here</p>",
        "id": 323011574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674478213
    },
    {
        "content": "<p>used pattern matching and it worked</p>",
        "id": 323011970,
        "sender_full_name": "Henkie67",
        "timestamp": 1674478337
    },
    {
        "content": "<p>So now my solver p has guaranteed a valid valuation for form p if true, but now i need to solve the theorem with it</p>",
        "id": 323013487,
        "sender_full_name": "Henkie67",
        "timestamp": 1674478831
    },
    {
        "content": "<p>to solve satisfiable i need a valuation so how do i retrieve said valuation from solver p</p>",
        "id": 323013641,
        "sender_full_name": "Henkie67",
        "timestamp": 1674478880
    },
    {
        "content": "<p>Case on the value of <code>find_valuation p</code> in your proof</p>",
        "id": 323027192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674482624
    },
    {
        "content": "<p>Then you'll be able to expand the pattern match used in <code>solver</code></p>",
        "id": 323027407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674482671
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/TnYxeaNWCMLak1itP92xERBv/image.png\">image.png</a> <br>\ni managed to solve the none case with simplification but the second case with some valuation i have only managed to reduce it to this,</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/TnYxeaNWCMLak1itP92xERBv/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/TnYxeaNWCMLak1itP92xERBv/image.png\"></a></div>",
        "id": 323032485,
        "sender_full_name": "Henkie67",
        "timestamp": 1674483804
    },
    {
        "content": "<p>Now unfold <code>solver._match_1</code></p>",
        "id": 323033320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674483999
    },
    {
        "content": "<p>Oh, I guess that's not useful</p>",
        "id": 323033427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674484025
    },
    {
        "content": "<p>You need <code>cases h : find_valuation p</code> not <code>cases find_valuation p</code></p>",
        "id": 323033461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674484034
    },
    {
        "content": "<p>yes now i am only left with this <a href=\"/user_uploads/3121/pF7_PQIrZx4eoaHQVMe-rrYi/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pF7_PQIrZx4eoaHQVMe-rrYi/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/pF7_PQIrZx4eoaHQVMe-rrYi/image.png\"></a></div>",
        "id": 323035703,
        "sender_full_name": "Henkie67",
        "timestamp": 1674484620
    },
    {
        "content": "<p>you would think that with a valuation and form that it would be done by now</p>",
        "id": 323035829,
        "sender_full_name": "Henkie67",
        "timestamp": 1674484658
    },
    {
        "content": "<p>You basically are done, now try unfolding <code>find_valuation</code> (and get the match to go away)</p>",
        "id": 323035927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674484677
    },
    {
        "content": "<p>how does one unfold a hypothesis</p>",
        "id": 323036650,
        "sender_full_name": "Henkie67",
        "timestamp": 1674484863
    },
    {
        "content": "<p>sorry if this is a stupid question</p>",
        "id": 323036685,
        "sender_full_name": "Henkie67",
        "timestamp": 1674484874
    },
    {
        "content": "<p><code>rw find_valuation at h</code></p>",
        "id": 323036761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674484890
    },
    {
        "content": "<p>this is as far as i could unfold, <a href=\"/user_uploads/3121/HiG6VLXKCbc3hnwaDzF43cCB/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HiG6VLXKCbc3hnwaDzF43cCB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/HiG6VLXKCbc3hnwaDzF43cCB/image.png\"></a></div>",
        "id": 323039887,
        "sender_full_name": "Henkie67",
        "timestamp": 1674485627
    },
    {
        "content": "<p>You unfolded further than you need to</p>",
        "id": 323042020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674486117
    },
    {
        "content": "<p>Unfold to <code>find_valuation ' whatever</code>, then case on the value of <code>find_valuation '  whatever</code></p>",
        "id": 323042159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674486136
    },
    {
        "content": "<p>Your goal is to make the <code>match_1</code> go away</p>",
        "id": 323042295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674486167
    },
    {
        "content": "<p>To do that, you need to turn the thing it's applied to into <code>some _</code> or <code>none</code></p>",
        "id": 323042382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674486185
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/YXLnqFlwsKjjfg-0Wu72vzkn/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YXLnqFlwsKjjfg-0Wu72vzkn/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/YXLnqFlwsKjjfg-0Wu72vzkn/image.png\"></a></div><p>the matches are gone, i solved the other none case already but this is the last one</p>",
        "id": 323047062,
        "sender_full_name": "Henkie67",
        "timestamp": 1674487258
    },
    {
        "content": "<p>Nice, now you can rewrite by <code>h</code> in reverse</p>",
        "id": 323048353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674487565
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 323048846,
        "sender_full_name": "Henkie67",
        "timestamp": 1674487674
    },
    {
        "content": "<p>Or <code>subst h</code>, which will clean the rest up a bit too</p>",
        "id": 323049951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674487934
    },
    {
        "content": "<p>yes so now i have valid val_1 p</p>",
        "id": 323050232,
        "sender_full_name": "Henkie67",
        "timestamp": 1674487998
    },
    {
        "content": "<p>Not quite, there's an arrow that you didn't mention too, isn't there?</p>",
        "id": 323050855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488147
    },
    {
        "content": "<p>never find i fixed it</p>",
        "id": 323050999,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488174
    },
    {
        "content": "<p>it is done</p>",
        "id": 323051016,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488179
    },
    {
        "content": "<p>thanks a lot</p>",
        "id": 323051046,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488184
    },
    {
        "content": "<p>i used cases on val_1 and then used the property</p>",
        "id": 323051155,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488213
    },
    {
        "content": "<p><code>exact val_1.prop</code> would also have worked</p>",
        "id": 323051214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488227
    },
    {
        "content": "<p>btw is it ok to delete this topic or delete my code because of school plagarism chekcks and al</p>",
        "id": 323051367,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488266
    },
    {
        "content": "<p>But note this was the easy direction of the interesting thing to prove: what you presumably want is to show that you find a solution iff there is one</p>",
        "id": 323051372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488267
    },
    {
        "content": "<p>It won't be plagiarism if you reference (put a link to) this topic in what you hand in</p>",
        "id": 323051586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488305
    },
    {
        "content": "<p>oke thx</p>",
        "id": 323051645,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488318
    },
    {
        "content": "<p>Was the assigment really to prove <code>solver p = tt → satisfiable p </code>?</p>",
        "id": 323051792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488356
    },
    {
        "content": "<p>because if you implement <code>find_valuation</code> to always return <code>none</code> then that statement is trivial!</p>",
        "id": 323051840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488370
    },
    {
        "content": "<p>yep it was to prove the soundness of the solver</p>",
        "id": 323051917,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488395
    },
    {
        "content": "<p>this was exercise 8 btw of 8</p>",
        "id": 323052044,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488418
    },
    {
        "content": "<p>So a solver that always returns \"I can't solve it\" would get full marks?</p>",
        "id": 323052045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488418
    },
    {
        "content": "<p>no it would invalidate the other exercises</p>",
        "id": 323052123,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488434
    },
    {
        "content": "<p>but thanks to you i might pass this course</p>",
        "id": 323052209,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488464
    },
    {
        "content": "<p>Hey, you wrote all the code!</p>",
        "id": 323052249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488478
    },
    {
        "content": "<p>i know but i am a embedded c coder so this was quite the switch to make</p>",
        "id": 323052352,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582257\">Henkie67</span> has marked this topic as resolved.</p>",
        "id": 323052593,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674488577
    }
]