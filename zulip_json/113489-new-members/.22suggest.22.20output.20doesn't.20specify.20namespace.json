[
    {
        "content": "<p>Hi,</p>\n<p>Something that tripped me up as a new user...</p>\n<p>The <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#suggest\">suggest tactic</a> is a great start for library search.<br>\nHowever, when I first tried it, I got a confusing output.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">prime</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">nm</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">m_leq_n</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p><code>suggest</code> gave <code>refine dvd_factorial _ m_leq_n</code>. Which sounds great!</p>\n<p>But it gave a baffling error. \":function expected at<br>\n  ?m_3.dvd_factorial<br>\nterm has type<br>\n  ?m_1 ∣ ?m_2! ↔ ?m_1 ≤ ?m_2<br>\nAdditional information: .. context: switched to simple application elaboration procedure because failed to use expected type to elaborate it, error message  too many arguments\"</p>\n<p>Turns out this was a namespace issue: <code>refine nat.dvd_factorial _ m_leq_n</code> worked, rather than what it was defaulting to in my context, which was <code>refine prime.dvd_factorial _ m_leq_n</code>.</p>\n<p>In reality, I never needed to import the <code>prime</code> namespace anyway -- but maybe the tactic could be specific?</p>",
        "id": 275015870,
        "sender_full_name": "John Nicol",
        "timestamp": 1647024275
    }
]