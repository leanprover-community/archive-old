[
    {
        "content": "<p>is it possible to pattern match structures? I saw on the PDF version of Theorem Proving in Lean (which I am guessing is now outdated based on other syntax differences) it is used, but the HTML version makes no mention of it, and none of my obvious guesses are working</p>",
        "id": 132868918,
        "sender_full_name": "Olli",
        "timestamp": 1535389685
    },
    {
        "content": "<p>Yes you can. Normally, the constructor is named <code>my_struct.mk</code></p>",
        "id": 132868967,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535389775
    },
    {
        "content": "<p>ah yes that works, I was trying to use the <code>⦃ field, .. ⦄</code> syntax</p>",
        "id": 132869071,
        "sender_full_name": "Olli",
        "timestamp": 1535389920
    },
    {
        "content": "<p>Those are not the right brackets. You need <code>⟨ field1,  ... ⟩</code></p>",
        "id": 132869129,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535389973
    },
    {
        "content": "<p>yeah the new book doesn't mention <code>⦃ ... ⦄</code>, I think the old one did. I was trying to use it in the same manner as the field updates work, where I don't have to know the order of the fields, and I thought maybe it is possible to use <code>{ field, .. }</code> with the two dots to match only a single field (while handling the other fields in other match arms</p>",
        "id": 132869410,
        "sender_full_name": "Olli",
        "timestamp": 1535390369
    },
    {
        "content": "<p>I see, I bit like in Haskell. I'm not aware of such a syntax in Lean but <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> or <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> might correct me.</p>",
        "id": 132869925,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535391062
    },
    {
        "content": "<p><code>{ field := pat, .. }</code> should absolutely work as a pattern</p>",
        "id": 132870018,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1535391171
    },
    {
        "content": "<p>Nice!</p>",
        "id": 132870035,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535391189
    },
    {
        "content": "<p>thanks, I swear I tried that but I must have gotten something unrelated wrong :)</p>",
        "id": 132870212,
        "sender_full_name": "Olli",
        "timestamp": 1535391390
    }
]