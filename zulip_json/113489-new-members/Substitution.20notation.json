[
    {
        "content": "<p>I am having trouble defining notation for substitution. I want <code>M[x/N] = subst x N M</code> and <code>M[x/N][y/L] = (M[x/N])[y/L]</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">axioms</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">subst</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`/`</span> <span class=\"n\">N</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">subst</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">M</span> <span class=\"c1\">-- Unsure about this definition.</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"n\">N</span> <span class=\"o\">]</span> <span class=\"c1\">-- Fails: `command expected`.</span>\n</code></pre></div>",
        "id": 202766671,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593748700
    },
    {
        "content": "<p>I think your problem is a conflict with some built in notation, I suggest you pick a different unicode character.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">axioms</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">subst</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span><span class=\"err\">ðŸ˜€</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"err\">ðŸ˜ƒ</span><span class=\"bp\">`</span> <span class=\"n\">N</span> <span class=\"bp\">`</span><span class=\"err\">ðŸ˜€</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">subst</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">M</span> <span class=\"c1\">-- Unsure about this definition.</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">M</span> <span class=\"err\">ðŸ˜€</span> <span class=\"mi\">0</span> <span class=\"err\">ðŸ˜ƒ</span><span class=\"n\">N</span> <span class=\"err\">ðŸ˜€</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 202767076,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593749322
    },
    {
        "content": "<p>The <code>/</code> seems to be the problem though, you could try setting the priority higher also</p>",
        "id": 202767101,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593749365
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">axioms</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">subst</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"o\">[</span> <span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"bp\">//</span> <span class=\"bp\">`</span> <span class=\"n\">N</span> <span class=\"bp\">`</span> <span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">subst</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">M</span> <span class=\"c1\">-- Unsure about this definition.</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"mi\">0</span> <span class=\"bp\">//</span> <span class=\"n\">N</span> <span class=\"o\">]</span> <span class=\"c1\">-- M [ 0 // N ] : term</span>\n</code></pre></div>",
        "id": 202767162,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593749427
    },
    {
        "content": "<p>For example, setting a low precedence level</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"err\">â†¦</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">N</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">subst</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">M</span> <span class=\"c1\">-- Unsure about this definition.</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"mi\">0</span> <span class=\"err\">â†¦</span> <span class=\"n\">N</span> <span class=\"o\">]</span> <span class=\"c1\">-- OK</span>\n</code></pre></div>",
        "id": 202767163,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593749430
    },
    {
        "content": "<p>I found that setting a precendence level of <code>[</code> or <code>]</code> causes all <code>[</code> and <code>]</code> globally to change precendence, so maybe it is best not to change it</p>",
        "id": 202767176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593749455
    },
    {
        "content": "<p>It probably has a good precedence level for this application to begin with, I suppose.</p>",
        "id": 202767185,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593749481
    },
    {
        "content": "<p>The following notation works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span> <span class=\"n\">N</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">subst</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">M</span>\n</code></pre></div>\n\n\n<p>But using <code>:=</code> looks fishy.</p>",
        "id": 202767330,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593749684
    },
    {
        "content": "<p>All suggestions seem to break down with <code>M [ 0 // M [ 0 // M ] ]</code> (<code>M [ 0 // (M [ 0 // M ]) ]</code> works).</p>\n<p>I remember seeing something that seem to solve this exact problem (resetting the precedence inside the notation or something like that), but I don't remember exactly.</p>",
        "id": 202767538,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593750023
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`//`</span> <span class=\"n\">N</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">subst</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">M</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"mi\">0</span> <span class=\"bp\">//</span> <span class=\"n\">M</span> <span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"bp\">//</span> <span class=\"n\">M</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 202767561,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593750104
    },
    {
        "content": "<p>Changing the priority of <code>[</code> breaks it.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">axioms</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">subst</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"o\">[</span> <span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"bp\">//</span> <span class=\"bp\">`</span> <span class=\"n\">N</span> <span class=\"bp\">`</span> <span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">subst</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">M</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"mi\">0</span> <span class=\"bp\">//</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"mi\">0</span> <span class=\"bp\">//</span> <span class=\"n\">M</span> <span class=\"o\">]</span> <span class=\"o\">]</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"o\">[</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"bp\">//</span> <span class=\"bp\">`</span> <span class=\"n\">N</span> <span class=\"bp\">`</span> <span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">subst</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">M</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"mi\">0</span> <span class=\"bp\">//</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"mi\">0</span> <span class=\"bp\">//</span> <span class=\"n\">M</span> <span class=\"o\">]</span> <span class=\"o\">]</span> <span class=\"c1\">-- Fails.</span>\n</code></pre></div>",
        "id": 202767630,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593750178
    },
    {
        "content": "<p>The following works. Apparently the precedence of <code>[</code> can't be less than <code>N</code>'s.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"o\">[</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"bp\">//</span> <span class=\"bp\">`</span> <span class=\"n\">N</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">`</span> <span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">subst</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">M</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"mi\">0</span> <span class=\"bp\">//</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"mi\">0</span> <span class=\"bp\">//</span> <span class=\"n\">M</span> <span class=\"o\">]</span> <span class=\"o\">]</span>\n</code></pre></div>",
        "id": 202767645,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593750230
    },
    {
        "content": "<p>Is it possible to have a \"postfix with more arguments\"?</p>",
        "id": 203040808,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1594069667
    },
    {
        "content": "<p>I am using <code>notation M `[` x ` := ` L `]` := subst x L M</code> for my substitution notation. In goals, Lean displays <code>f M[x := L]</code> for <code>f (M[x := L])</code>, however, if I write <code>f M[x := L]</code> Lean parses it as <code>(f M)[x := L]</code>, which makes sense, because of the precedence of function application.</p>",
        "id": 203040812,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1594069672
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">axiom</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">shift</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">subst</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">Ïƒ</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span> <span class=\"n\">L</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">Ïƒ</span> <span class=\"n\">x</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">problematic</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">shift</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"n\">shift</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">shift</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">problematic</span> <span class=\"c1\">-- `shift L[x := L] = (shift R)[x + 1 := shift R]`!!</span>\n\n<span class=\"c1\">-- The type of this axiom is what `#check problematic` displays, which is different from `problematic`.</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">problematic&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">),</span>\n  <span class=\"n\">shift</span> <span class=\"n\">M</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">shift</span> <span class=\"n\">M</span><span class=\"o\">)[</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">problematic&#39;</span>\n</code></pre></div>",
        "id": 203042551,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1594070670
    },
    {
        "content": "<p>This leads to my question: can I have something like <code>postfix `[` x ` := ` L `]` := subst x L</code>, so that Lean parses what I write as it displays goals?</p>",
        "id": 203042644,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1594070742
    },
    {
        "content": "<p>Could you change the binding power of <code>[</code> and <code>]</code> to be higher than function application?</p>",
        "id": 203043601,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594071365
    },
    {
        "content": "<p>Is the issue that it's not parsing the way you expect it to?  What would the fully parenthesized version of <code>problematic</code> be?</p>",
        "id": 203043635,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594071393
    },
    {
        "content": "<p>(I'm guessing you want the substitution brackets to have higher precedence than function application, which Yakov addresses.  I've heard changing binding power of something like <code>[</code> and <code>]</code> can mess up parsing elsewhere, though.)</p>",
        "id": 203043864,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594071531
    },
    {
        "content": "<p>As a stopgap:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">axiom</span> <span class=\"n\">problematic</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">shift</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"n\">shift</span> <span class=\"err\">$</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">shift</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 203044071,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594071643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Substitution.20notation/near/203043601\">said</a>:</p>\n<blockquote>\n<p>Could you change the binding power of <code>[</code> and <code>]</code> to be higher than function application?</p>\n</blockquote>\n<p>I've tried setting the precedence of <code>[</code> to <code>:max</code> (if that is what you mean by binding power), didn't solve the issue.</p>",
        "id": 203044145,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1594071708
    },
    {
        "content": "<p>and was it left-binding or right-binding?</p>",
        "id": 203044206,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594071731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Substitution.20notation/near/203043635\">said</a>:</p>\n<blockquote>\n<p>Is the issue that it's not parsing the way you expect it to?  What would the fully parenthesized version of <code>problematic</code> be?</p>\n</blockquote>\n<p>The issue is the mismatch between Lean's parser and printer. I've expanded the example, should make things clearer.</p>",
        "id": 203044249,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1594071769
    },
    {
        "content": "<p>well there's your problem--you need to set it higher than that! <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 203044250,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594071769
    },
    {
        "content": "<p>See <code>data.opposite</code> for example</p>",
        "id": 203044286,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594071796
    },
    {
        "content": "<p>Naming seems to imply it shouldn't be possible. I'll give it a try.</p>",
        "id": 203044295,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1594071804
    },
    {
        "content": "<p>Disclaimer: I have no idea what will happen with <code>[]</code> specifically, but there are plenty of other bracket characters available if you need them...</p>",
        "id": 203044315,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594071820
    },
    {
        "content": "<p>In flypitch we used </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">t</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">s</span> <span class=\"bp\">`</span> <span class=\"bp\">//</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">95</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">fol</span><span class=\"bp\">.</span><span class=\"n\">subst_term</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/flypitch/flypitch/blob/c762ba89b7ca4d3e014aee0dc89d804454c38808/src/fol.lean#L357\">https://github.com/flypitch/flypitch/blob/c762ba89b7ca4d3e014aee0dc89d804454c38808/src/fol.lean#L357</a></p>",
        "id": 203044324,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594071829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/Substitution.20notation/near/203044249\">said</a>:</p>\n<blockquote>\n<p>The issue is the mismatch between Lean's parser and printer. I've expanded the example, should make things clearer.</p>\n</blockquote>\n<p>I see.  It doesn't seem to be a good thing that the parser/pretty-printer doesn't round trip here.  I've modified your example a bit to demonstrate the issue a little clearer:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">axiom</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">shift</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">subst</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">Ïƒ</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span> <span class=\"bp\">â†’</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span> <span class=\"n\">L</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">Ïƒ</span> <span class=\"n\">x</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">problematic</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">âˆƒ</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">shift</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"n\">R</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">problematic</span> <span class=\"c1\">-- âˆ€ (x : â„•) (L : term), âˆƒ (R : term), shift L[x := L] = R</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">problematic&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">âˆƒ</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">shift</span> <span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">R</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">problematic&#39;</span> <span class=\"c1\">-- âˆ€ (x : â„•) (L : term), âˆƒ (R : term), (shift L)[x := L] = R</span>\n</code></pre></div>",
        "id": 203045040,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594072276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Substitution.20notation/near/203044206\">said</a>:</p>\n<blockquote>\n<p>and was it left-binding or right-binding?</p>\n</blockquote>\n<p>I am not sure.</p>",
        "id": 203045241,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1594072432
    },
    {
        "content": "<p>Changing the precedence of <code>[</code> to <code>std.prec.max_plus</code> solved the issue. Maybe the printer/parser mismatch should be investigated further.</p>",
        "id": 203045328,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1594072485
    }
]