[
    {
        "content": "<p>Why does <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold\">tactic#unfold</a> created a new hypothesis in the example below? Also, why does induction fail? Sorry if the example is a bit too long, I tried to make it as small as possible.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.vector</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">preterm</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">preterm</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">preterm</span> <span class=\"n\">L</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fv</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">preterm</span> <span class=\"n\">L</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">preterm.var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">preterm.func</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">preterm.app</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fv</span> <span class=\"n\">t₁</span> <span class=\"bp\">∪</span> <span class=\"n\">fv</span> <span class=\"n\">t₂</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Structure</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">Structure</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">A.carrier</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Structure</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">realize_preterm</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">A</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span> <span class=\"n\">L</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">realize_term</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">realize_preterm</span> <span class=\"n\">s</span> <span class=\"n\">vector.nil</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.check</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">term.fv</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s₁</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">realize_term</span> <span class=\"n\">s₁</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">realize_term</span> <span class=\"n\">s₂</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Created a new `t`.</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">term</span> <span class=\"n\">at</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Clear newly created `t`.</span>\n  <span class=\"n\">clear</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Induction fails.</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267004945,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1641424155
    },
    {
        "content": "<p><code>unfold</code> is a flavor of <code>simp</code> and <code>dunfold</code> is a flavor of <code>dsimp</code>. If you do <code>dunfold</code> it doesn't create a new hypothesis.</p>",
        "id": 267005629,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641424559
    },
    {
        "content": "<p>I think what's going on is that since <code>t</code> appears in other terms and <code>unfold</code> likes to rewrite rather than change, it just creates a new hypothesis.</p>",
        "id": 267005767,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641424630
    },
    {
        "content": "<p>As for why <code>induction</code> fails, I have no idea, but you can get around it by using the recursor directly with <code>refine</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">term.fv</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s₁</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">realize_term</span> <span class=\"n\">s₁</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">realize_term</span> <span class=\"n\">s₂</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">term</span> <span class=\"n\">at</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">preterm.rec_on</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">tl</span> <span class=\"n\">t0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267006531,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641425159
    }
]