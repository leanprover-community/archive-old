[
    {
        "content": "<p>I have a goal (from one of the icl exercises) that looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p>how do I... even start? None of the split/cases/assume/&amp;c seems to break it down at all.</p>",
        "id": 209235822,
        "sender_full_name": "toc",
        "timestamp": 1599416629
    },
    {
        "content": "<p>what if P 0 is true but P 1 is false?</p>",
        "id": 209235866,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599416653
    },
    {
        "content": "<p>The whole exercise has also</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h8</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n<span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>so I will be proving that that is not possible.</p>",
        "id": 209235912,
        "sender_full_name": "toc",
        "timestamp": 1599416716
    },
    {
        "content": "<p>I would think you can start with something like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h8</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209236187,
        "sender_full_name": "Jason KY.",
        "timestamp": 1599417138
    },
    {
        "content": "<p>Ah, thank you!</p>",
        "id": 209236334,
        "sender_full_name": "toc",
        "timestamp": 1599417385
    },
    {
        "content": "<p>Yep, that goal looks like classical reasoning so <code>by_cases</code> is a good suggestion</p>",
        "id": 209247992,
        "sender_full_name": "Chris Wong",
        "timestamp": 1599437938
    },
    {
        "content": "<p>Ha ha yes sorry, I do not make it at all clear in the questions that classical reasoning is allowed because my audience knows no other reasoning</p>",
        "id": 209260331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599458969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> It's you! Thank you for all the learning materials! If that's the case are there lecture (videos? notes?) I could be following along for these exercises?</p>",
        "id": 209447668,
        "sender_full_name": "toc",
        "timestamp": 1599601146
    },
    {
        "content": "<p>No, I never made any instructions for them, I just told my students to come to the Xena meetings on Thursdays and ask questions</p>",
        "id": 209447904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599601300
    },
    {
        "content": "<p>You might want to read Mathematics in Lean instead, that has more explanations!</p>",
        "id": 209447974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599601325
    },
    {
        "content": "<p>There's a list of Lean-related tutorials and other learning material here: <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a></p>",
        "id": 209448032,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599601378
    },
    {
        "content": "<p>h8: ∀ (n : ℤ), P n → P (n + 8)<br>\nh3: ∀ (n : ℤ), P n → P (n - 3)<br>\nn: ℕ<br>\nhn: P (int.of_nat n)<br>\n⊢ P (int.of_nat n.succ)</p>\n<hr>\n<p>Now, if I<br>\n        apply h3 (n+4:ℤ),<br>\n get the error</p>\n<hr>\n<p>invalid apply tactic, failed to unify<br>\n  P (int.of_nat n.succ)<br>\nwith<br>\n  P (↑n + 4 - 3)</p>\n<p><span aria-label=\"broken heart\" class=\"emoji emoji-1f494\" role=\"img\" title=\"broken heart\">:broken_heart:</span></p>",
        "id": 211589573,
        "sender_full_name": "blackxv",
        "timestamp": 1601365500
    },
    {
        "content": "<p>If you do <code>convert</code> instead of <code>apply</code>, then you'll get a new goal which is just the arithmetic you have to show.</p>",
        "id": 211589686,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601365608
    },
    {
        "content": "<p>(Or is it <code>convert_to</code>? I always forget which is which...)</p>",
        "id": 211589701,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601365628
    },
    {
        "content": "<p>You can use the better induction principle <code>int.induction_on</code> instead of casing on the int</p>",
        "id": 211591504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601366917
    },
    {
        "content": "<p>One problem you have right now is that subtraction on naturals stinks</p>",
        "id": 211591580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601366980
    },
    {
        "content": "<p>It's best to never mention them.</p>",
        "id": 211591597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601366990
    }
]