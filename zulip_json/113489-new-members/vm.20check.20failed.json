[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span>\n\n<span class=\"n\">def</span> <span class=\"n\">burgerfy</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"s2\">&quot;{&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"s2\">&quot;,&quot;</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">fin_range</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;}&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">burgerfy</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">burgerfy</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>The first works and the second fails with the error message \"vm check failed: is_closure(o) (possibly due to incorrect axioms, or sorry)\" but I'm not using sorry and only using mathlib/core functions, why is this?</p>",
        "id": 202211349,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593303283
    },
    {
        "content": "<p>Also, this is a def which isn't noncomputable, so I expected it to compute fine</p>",
        "id": 202211421,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593303416
    },
    {
        "content": "<p>There appears to be a bug in the VM implementation of <code>nat.strong_rec_on</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">ih</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- 0</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">ih</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- 1</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">ih</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- 2</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">ih</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- vm check failed: cidx(closure) == 0 (possibly due to incorrect axioms, or sorry</span>\n</code></pre></div>",
        "id": 202217111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593313931
    },
    {
        "content": "<p>yay I found a vm bug</p>",
        "id": 202217139,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593314025
    },
    {
        "content": "<p>A workaround is to not use <code>strong_rec_on</code> to write wf definitions for the VM</p>",
        "id": 202217254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593314208
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">burgerfy</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;{&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"s2\">&quot;,&quot;</span> <span class=\"o\">((</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">fin_range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">burgerfy</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;}&quot;</span>\n</code></pre></div>\n\n\n<p>This generally performs better anyway</p>",
        "id": 202217256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593314219
    },
    {
        "content": "<p>But this is the first time I have ever seen a VM bug so congrats</p>",
        "id": 202217261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593314239
    },
    {
        "content": "<p>Do you know if the VM has a specialized version of <code>nat.strong_rec_on</code>, or does it compile its Lean definition like usual?</p>",
        "id": 202217308,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593314295
    },
    {
        "content": "<p>I think it just compiles the regular definition</p>",
        "id": 202217309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593314308
    },
    {
        "content": "<p>I might try shrinking it to find the cause</p>",
        "id": 202217310,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593314328
    },
    {
        "content": "<p>Oh that's the version I was looking for! I tried using the equation compiler but couldn't satisfy it, so went straight to <code>strong_rec_on</code> in tactic mode</p>",
        "id": 202217311,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593314329
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"n\">def</span> <span class=\"n\">strong_rec_on₂</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">not_lt_zero</span> <span class=\"bp\">_</span><span class=\"o\">)},</span>\n    <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">h₁</span><span class=\"o\">)),</span>\n        <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">},</span>\n        <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"n\">ih</span><span class=\"o\">}}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">strong_rec_on₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">ih</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- vm check failed: cidx(closure) == 0 (possibly due to incorrect axioms, or sorry</span>\n</code></pre></div>\n\n\n<p>still fails</p>",
        "id": 202217371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593314406
    },
    {
        "content": "<p>Huh, I'm surprised there's a difference between</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span>\n\n<span class=\"n\">def</span> <span class=\"n\">burgerfy</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;nothing burger&quot;</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"s2\">&quot; and &quot;</span> <span class=\"o\">((</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">fin_range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">burgerfy</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; burger&quot;</span>\n</code></pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span>\n\n<span class=\"n\">def</span> <span class=\"n\">burgerfy</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;nothing burger&quot;</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"s2\">&quot; and &quot;</span> <span class=\"o\">((</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">fin_range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">burgerfy</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; burger&quot;</span>\n</code></pre></div>",
        "id": 202217494,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593314722
    },
    {
        "content": "<p>That's because <code>default_dec_tac</code> automatically clears hypotheses with \"internal\" names (meaning initial underscore)</p>",
        "id": 202217812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593315373
    },
    {
        "content": "<p>After picking apart <code>nat.strong_rec_on</code> a bit, I reached a step where I replaced a <code>nat.rec</code> with a pattern match and it seemingly fixed it. I'll try to investigate the difference</p>",
        "id": 202217880,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593315565
    },
    {
        "content": "<p>Hmm, the pattern matching elaborator generates much more complicated code than a simple <code>nat.rec</code>.</p>",
        "id": 202217929,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593315631
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">ih</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">foo</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">IH</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- 2</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">foo&#39;</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- vm check failed: cidx(closure) == 0 (possibly due to incorrect axioms, or sorry</span>\n</code></pre></div>",
        "id": 202218055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593315934
    },
    {
        "content": "<p>Nice</p>",
        "id": 202218099,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593315965
    },
    {
        "content": "<p>The VM has special support for definitions using the equation compiler</p>",
        "id": 202218101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593315968
    },
    {
        "content": "<p>But in any case it's different code so it's not particularly surprising that it doesn't behave the same; there probably isn't too much point in examining the pattern match code to find out why it works</p>",
        "id": 202218111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593316033
    },
    {
        "content": "<p>Yeah, I had switched to simplifying the <code>nat.rec</code> code instead, but you came up with something simpler anyway</p>",
        "id": 202218115,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593316073
    },
    {
        "content": "<p>I would be surprised if there was a difference between <code>nat.rec</code> and <code>nat.rec_on</code> here; they both get special support</p>",
        "id": 202218155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593316112
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">IH</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"c1\">-- vm check failed: cidx(closure) == 0 (possibly due to incorrect axioms, or sorry</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">foo&#39;</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"c1\">-- 3</span>\n</code></pre></div>",
        "id": 202218272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593316378
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">optimize_bytecode</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">optimize_bytecode</span><span class=\"o\">]</span>  <span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">rec_1</span> <span class=\"mi\">1</span>\n<span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">move</span> <span class=\"mi\">0</span>\n<span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">nat_cases</span> <span class=\"mi\">4</span>\n<span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">scnstr</span> <span class=\"bp\">#</span><span class=\"mi\">0</span>\n<span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">ret</span>\n<span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">push</span> <span class=\"mi\">1</span>\n<span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">ginvoke</span> <span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">rec_1</span>\n<span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">move</span> <span class=\"mi\">1</span>\n<span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">ginvoke</span> <span class=\"n\">bar</span>\n<span class=\"mi\">8</span><span class=\"o\">:</span> <span class=\"n\">drop</span> <span class=\"mi\">1</span>\n<span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"n\">ret</span>\n<span class=\"o\">[</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">optimize_bytecode</span><span class=\"o\">]</span>  <span class=\"n\">foo</span> <span class=\"mi\">2</span>\n<span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">move</span> <span class=\"mi\">1</span>\n<span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ginvoke</span> <span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">rec_1</span>\n<span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">ret</span>\n</code></pre></div>",
        "id": 202218519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593317022
    },
    {
        "content": "<p>This compilation is a bit odd. As a primer for those who don't know, the main function <code>foo 2</code> here indicates that <code>foo</code> is a function with two arguments. It calls <code>move 1</code>, pushing argument 1 (I think this is <code>n</code>) on the stack, and then calls <code>foo._rec_1</code>, which is the recursive function that is constructed as part of <code>nat.rec_on</code>. This could normally be a closure, depending on arguments outside the <code>nat.rec_on</code>, but in this case we don't reference any external variables so <code>foo._rec_1</code> has only one argument, the index. You can think of it as being defined like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">func</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">rec_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">func</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span>\n<span class=\"c1\">-- 0: move 0</span>\n<span class=\"c1\">-- 1: nat_cases 4</span>\n<span class=\"o\">(</span> <span class=\"c1\">-- 2: scnstr #0</span>\n  <span class=\"c1\">-- 3: ret</span>\n  <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- 4: push 1</span>\n  <span class=\"c1\">-- 5: ginvoke foo._rec_1</span>\n  <span class=\"k\">let</span> <span class=\"n\">IH</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">rec_1</span> <span class=\"n\">m</span> <span class=\"k\">in</span>\n  <span class=\"c1\">-- 6: move 1</span>\n  <span class=\"c1\">-- 7: ginvoke bar</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"k\">in</span>\n  <span class=\"c1\">-- 8: drop 1</span>\n  <span class=\"c1\">-- 9: ret</span>\n  <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202218830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593317702
    },
    {
        "content": "<p>The thing that is weird is that there doesn't seem to be any indication of the second lambda; <code>foo.rec_1</code> is supposed to be producing a function, not a natural number, and I've fudged it in the gloss by adding <code>λ _,</code> in two places</p>",
        "id": 202218885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593317807
    },
    {
        "content": "<p>an even simpler version:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"o\">()</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">optimize_bytecode</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"mi\">3</span> <span class=\"o\">()</span> <span class=\"c1\">-- vm check failed: cidx(closure) == 0 (possibly due to incorrect axioms, or sorry</span>\n</code></pre></div>\n\n\n<p>The <code>+1</code> only matters, by the way, in order to cause the crash by doing something that requires the result to be a nat</p>",
        "id": 202218934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593317904
    },
    {
        "content": "<p>It also fails at <code>@foo 2 ()</code> now for what it's worth</p>",
        "id": 202219019,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593318040
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"o\">()</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">optimize_bytecode</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">IH</span><span class=\"o\">)</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">foo&#39;</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"o\">()</span> <span class=\"c1\">-- vm check failed: cidx(closure) == 0 (possibly due to incorrect axioms, or sorry</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">foo&#39;</span> <span class=\"mi\">1</span> <span class=\"o\">()</span> <span class=\"c1\">-- 1</span>\n</code></pre></div>\n\n\n<p>I think this gets to the heart of it. The meta def is very close to the final compiled form, but you will notice that the recursive function after compilation has 2 arguments instead of 1 and is called using <code>closure</code> instead of <code>ginvoke</code></p>",
        "id": 202219210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593318447
    },
    {
        "content": "<p>The compiler has some logic in it to eliminate curried functions and remove erased arguments, and I think the bug is there</p>",
        "id": 202219254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593318530
    },
    {
        "content": "<p>Do you think it comes from this function? <a href=\"https://github.com/leanprover-community/lean/blob/7b2f3fa452e4bdb38c5d96e64d29205c5986a1a8/src/library/compiler/elim_recursors.cpp#L97-L99\">https://github.com/leanprover-community/lean/blob/7b2f3fa452e4bdb38c5d96e64d29205c5986a1a8/src/library/compiler/elim_recursors.cpp#L97-L99</a></p>",
        "id": 202219660,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593319439
    },
    {
        "content": "<p>Line 119 makes it look like this deals with the <code>ginvoke</code>/<code>closure</code> distinction you mentioned</p>",
        "id": 202219702,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593319497
    },
    {
        "content": "<p>I think it's happening in an optimization pass. The original expression <code>nat.rec_on n (λ _, 1) (λ n IH _, bar IH)</code> is translated to <code>nat.cases_on n (λ _, 1) (λ n _, bar (self n))</code> and then it notices that we have a cases followed by a lambda and lifts one over the other to get <code>λ _, nat.cases_on n (1) (λ n, bar (self n))</code>, whereupon we can deduce that the ignored argument can be eliminated. But eliminating this argument changes the type of <code>self n</code>, so <code>bar</code> ends up getting passed a value of type <code>nat</code> instead of <code>unit -&gt; nat</code></p>",
        "id": 202220166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593320524
    },
    {
        "content": "<p>The reason it works with <code>0</code> in place of <code>1</code> in the base case is that <code>0</code> plays many roles in the VM; it is the neutral value meaning that all proofs become <code>0</code>, and in particular application <code>0 x</code> is defined and equals <code>0</code></p>",
        "id": 202220179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593320600
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"o\">()</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">elim_recursors</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">reduce_arity</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">elim_recursors</span><span class=\"o\">]</span>\n<span class=\"bp\">&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">rec_1</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"o\">([</span><span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">rec_1</span><span class=\"o\">]</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span>\n<span class=\"bp\">&gt;&gt;</span> <span class=\"n\">foo</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">rec_1</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n<span class=\"o\">[</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">reduce_arity</span><span class=\"o\">]</span>\n<span class=\"bp\">&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">rec_1</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">rec_1</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"bp\">&gt;&gt;</span> <span class=\"n\">foo</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">rec_1</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 202220182,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593320601
    },
    {
        "content": "<p>aha, as I suspected</p>",
        "id": 202220221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593320643
    },
    {
        "content": "<p>Like you said, after the <code>reduce_arity</code> pass it's not type-correct on <code>bar</code>'s argument</p>",
        "id": 202220223,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593320654
    },
    {
        "content": "<p>My mistake, it's the <code>erase_irrelevant</code> pass</p>",
        "id": 202220288,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593320841
    },
    {
        "content": "<p>Those traces are actually next to each other so there's no more doubt:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"n\">lean_trace</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">({</span><span class=\"s\">&quot;compiler&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;elim_recursors&quot;</span><span class=\"p\">}),</span> <span class=\"n\">tout</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span> <span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">procs</span><span class=\"p\">););</span>\n        <span class=\"n\">erase_irrelevant</span><span class=\"p\">(</span><span class=\"n\">procs</span><span class=\"p\">);</span>\n        <span class=\"n\">lean_trace</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">({</span><span class=\"s\">&quot;compiler&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;erase_irrelevant&quot;</span><span class=\"p\">}),</span> <span class=\"n\">tout</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span> <span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">procs</span><span class=\"p\">););</span>\n</code></pre></div>",
        "id": 202220292,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593320863
    },
    {
        "content": "<p>The <code>erase_irrelevant</code> pass still looks okay though</p>",
        "id": 202220387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593321045
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">erase_irrelevant</span><span class=\"o\">]</span>\n<span class=\"bp\">&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">rec_1</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">rec_1</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"bp\">&gt;&gt;</span> <span class=\"n\">foo</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">rec_1</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 202220388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593321054
    },
    {
        "content": "<p>It has done the lambda-over-cases transformation, which is not itself harmful</p>",
        "id": 202220394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593321077
    },
    {
        "content": "<p>notice that <code>foo._rec_1</code> is still accepting two arguments and passes a partially applied version of itself to <code>bar</code></p>",
        "id": 202220398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593321110
    },
    {
        "content": "<p>Ah! I didn't read carefully enough</p>",
        "id": 202220436,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593321153
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/7b2f3fa452e4bdb38c5d96e64d29205c5986a1a8/src/library/compiler/reduce_arity.cpp#L48-L53\">https://github.com/leanprover-community/lean/blob/7b2f3fa452e4bdb38c5d96e64d29205c5986a1a8/src/library/compiler/reduce_arity.cpp#L48-L53</a></p>",
        "id": 202220495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593321315
    },
    {
        "content": "<p>I think this is where the action is</p>",
        "id": 202220501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593321331
    },
    {
        "content": "<p>In particular it says \"we try to eta expand applications\" which is the right idea but isn't being implemented right here?</p>",
        "id": 202220503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593321360
    }
]