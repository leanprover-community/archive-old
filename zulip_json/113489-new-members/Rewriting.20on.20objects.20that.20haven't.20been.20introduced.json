[
    {
        "content": "<p>I have the following term in my goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>And want to rewrite <code>pi.add_apply</code> to the <code>(f + g) (x + h)</code> term. But I can't, since <code>h</code> is not really a variable. Is there any way to work with rewrites on <code>h</code> without introducing everything before it?</p>",
        "id": 147983997,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1542652166
    },
    {
        "content": "<p><code>simp</code> can do it</p>",
        "id": 147984304,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542652469
    },
    {
        "content": "<p>Try <code>simp only [pi.add_apply]</code></p>",
        "id": 147984323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542652499
    },
    {
        "content": "<p>In this case it's probably definitionaly true, so you could probably also use <code>change</code></p>",
        "id": 147984354,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542652548
    },
    {
        "content": "<p>Ok, sure, that works here -- but in a situation where the rewrite can't be done with <code>simp</code> (e.g. if it involves <code>\\l</code>), is there a more general solution? I mean, what is <code>simp</code> actually using behind the scenes?</p>",
        "id": 147984402,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1542652569
    },
    {
        "content": "<p>something like <code>tendsto (λ (h : ℝ), (f (x + h) + g (x + h) - (f x + g x) - (f' x + g' x) * h) / h) (nhds 0) (nhds (0 + 0))</code></p>",
        "id": 147984408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542652574
    },
    {
        "content": "<p><code>conv</code> can be the answer</p>",
        "id": 147984423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542652596
    },
    {
        "content": "<p>but <code>simp</code> can also go under binders sometimes</p>",
        "id": 147984435,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542652617
    },
    {
        "content": "<p>Hm, hadn't heard of <code>conv</code>. Interesting.</p>",
        "id": 147984444,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1542652625
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md\">https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md</a></p>",
        "id": 147984465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542652666
    },
    {
        "content": "<p>One more question -- to get the goal in the form above with <code>nhds(0 + 0)</code> and stuff, I couldn't just use a simple rewrite <code>rw ←zero_add</code>, because <code>rw</code> becomes too overzealous and turns both <code>0</code>s to <code>0+0</code> (instead I had to <code>have</code> a statement that the new goal implies the old goal and prove that by <code>rw zero_add</code>). Is there any way to gain some control over the rewrite and make it transform things one at a time?</p>",
        "id": 147984520,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1542652717
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/113488-general/topic/rewrite_cfg\" title=\"#narrow/stream/113488-general/topic/rewrite_cfg\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/rewrite_cfg</a> and also the <code>conv</code> doc I mentioned in my previous answer</p>",
        "id": 147984625,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542652821
    },
    {
        "content": "<p>Thanks, I'll have a look at it.</p>",
        "id": 147984664,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1542652875
    }
]