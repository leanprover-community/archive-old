[
    {
        "content": "<p>I'm in a bit of a pickle right now trying to deal with one of those messy <code>__mlocal__fresh__1234_56789</code> variables.</p>\n<p>I have the following relevant lines in my tactic state:<br>\n<code>M N __mlocal__fresh_9046_21051 : matrix (fin m) (fin n) α,\nr₁ : row_equivalent M __mlocal__fresh_9046_21051,\nr₂ : row_equivalent_step __mlocal__fresh_9046_21051 N,\nH₁ : row_equivalent.apply r₁ = __mlocal__fresh_9046_21051\n⊢ elementary.apply (r₂.elem) (row_equivalent.apply r₁) = N</code><br>\nTantalisingly, I would love to perform some sort of rewrite or subst or simp with <code>H₁</code> to rewrite the goal as <code>⊢ elementary.apply (r₂.elem) __mlocal__fresh_9046_21051 = N</code>, but each of these fail. <br>\nI think I could probably perform the rewrite (just via eq.trans) if I could <code>have</code> myself something of the form<br>\n<code>have H₂ :  elementary.apply (r₂.elem) (row_equivalent.apply r₁) =  elementary.apply (r₂.elem) __mlocal__fresh_9046_21051</code> (and solve this with something like <code>congr, from H₁</code>), but unfortunately I cannot do this as I cannot explicitly write down the <code>__mlocal__fresh_9046_21051</code> (of course, the numbers change every time Lean recompiles). </p>\n<p>Is there a way I can explicitly name my fresh variable in a less transient way?<br>\nOr am I doing something else completely stupid and in bad practice and shouldn't even have this fresh variable popping up at all?</p>\n<p>Here's the actual code that's giving me this tactic state (you can see the fresh variable comes out of my induction over <code>row_equivalent</code>, which has two constructors, of the form <code>nil : Π M, row_equivalent M M</code> and <code>cons : Π (r₁ : row_equivalent M N) (r₂ : row_equivalent_step N L) , row_equivalent M L</code>)</p>\n<p><code>@[simp] lemma row_equivalent.apply_implements : Π {M N : matrix (fin m) (fin n) α} (r : row_equivalent M N), r.apply = N \n| M N (row_equivalent.nil) := by simp[row_equivalent.apply]\n| M N (row_equivalent.cons r₁ r₂) := begin\n  simp[row_equivalent.apply],\n  have H₁, from row_equivalent.apply_implements r₁,\n  -- Here is where I see the tactic state I provided above\n  sorry,\nend</code></p>",
        "id": 136386136,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1540355522
    },
    {
        "content": "<p>You should use <code>| _ _ (@row_equivalent.cons M N L r₁ r₂)</code> in the pattern match</p>",
        "id": 136388270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540359731
    },
    {
        "content": "<p>Ah yes, I don't know why I didn't think of this myself -- silly question!<br>\nThanks @Mario!</p>",
        "id": 136394125,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1540369476
    }
]