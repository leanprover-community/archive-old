[
    {
        "content": "<p>How does one coerce nested types in lean?</p>\n<p>For example, I can coerce a finset to a set no problem…</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_def</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_lemma</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_def</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>But Lean throws an error when I try to coerce a finset of finsets to a set of sets…</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_def'</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_lemma'</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">my_def'</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>The error says: <code>Type mismatch at application my_def' F.  Term F has type finset (finset α) but is expected to have type set (set α)</code>.</p>",
        "id": 267535847,
        "sender_full_name": "AG",
        "timestamp": 1641875969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"420256\">@AG</span> You'll have to choose an intermediate step. Do you want to pass through <code>finset (set α)</code> or through <code>set (finset α)</code>.<br>\nAnyway, I expect that <code>coe '' F</code> or <code>F.image coe</code> should work.</p>",
        "id": 267543818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641884462
    },
    {
        "content": "<p>Oh that makes sense, thank you.  It seems I can get to the intermediary easily enough by writing it as <code>(F : set (finset α))</code> or <code>@coe (finset (finset α)) (set (finset α)) _ F</code>, but how exactly do I use <code>coe</code> to get the inner type to be a set as well?</p>\n<p>In particular, if I set <code>parameter F : finset (finset α)</code>, then </p>\n<ul>\n<li><code>#check @coe (finset (finset α)) (set (finset α)) _ F</code> works fine</li>\n<li>but <code>#check @coe (finset (finset α)) (finset (set α)) _  F</code> throws an error.</li>\n</ul>",
        "id": 267682393,
        "sender_full_name": "AG",
        "timestamp": 1641962765
    },
    {
        "content": "<p>Oh just got something that did it!  Thank you again.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set.image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>It turns out Lean can even go through the intermediary for you with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set.image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 267682984,
        "sender_full_name": "AG",
        "timestamp": 1641963571
    }
]