[
    {
        "content": "<p>Hi all. I have a finite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>⊂</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">S \\subset R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> of elements in a ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> that are pairwise coprime and such that any element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">x \\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> divides a fixed element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">z \\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>. It seems that there is already a lemma that says exactly this in <code>ring_theory.coprime</code>: <code>fintype.prod_dvd_of_coprime</code>. So far so good, but I have problems in using it. The point is that in my code <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is implemented as a <code>S : finset R</code> but the lemma requires a type <code>(S : Type) [fintype I]</code>. Is there a way to convert a <code>finset</code> to a <code>fintype</code>?</p>\n<p>Note that there is also <code>finset.prod_dvd_of_coprime</code> , but it seems less suited to my situation.</p>",
        "id": 212557053,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602076978
    },
    {
        "content": "<p>Hmm, what does <code>finset.prod_dvd_of_coprime</code> say? Let me check it</p>",
        "id": 212557137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602077028
    },
    {
        "content": "<p>Because that would have been my first guess</p>",
        "id": 212557150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602077036
    },
    {
        "content": "<p>Ah, I just found <code>finset_coe.fintype</code> that maybe is what I need.</p>",
        "id": 212557278,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602077083
    },
    {
        "content": "<p>Yes, but if you can avoid the coe that might be even better</p>",
        "id": 212557357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602077111
    },
    {
        "content": "<p>The problem  with <code>finset.prod_dvd_of_coprime</code>is that it needs a type <code>I : Type</code> and a function <code>s : I → R</code> <br>\nsuch that <code>∀ (i : I), s i ∣ z)</code>. I can use  <code>R</code> for the type <code>I</code> and <code>id : R \\r R</code> as function, but then the assumption <code>∀ (i : I), s i ∣ z)</code> is not true.</p>",
        "id": 212557406,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602077141
    },
    {
        "content": "<p>Aah, yes, that's a \"bug\"</p>",
        "id": 212557488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602077163
    },
    {
        "content": "<p>It should only ask that for <code>i \\in s</code></p>",
        "id": 212557508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602077171
    },
    {
        "content": "<p>Ah ok, I was wondering why this assumption.</p>",
        "id": 212557568,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602077195
    },
    {
        "content": "<p>sorry, I meant <code>i \\in t</code></p>",
        "id": 212557617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602077220
    },
    {
        "content": "<p>I will correct it</p>",
        "id": 212559212,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602077907
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4506\">#4506</a></p>",
        "id": 212560955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602078660
    },
    {
        "content": "<p>Ooh, sorry, I didn't see that you were working on it</p>",
        "id": 212560978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602078669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> In fact, both hypotheses were too string</p>",
        "id": 212561003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602078679
    },
    {
        "content": "<p>Don't worry :) The proof is rather mysterious for me</p>",
        "id": 212561073,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602078718
    },
    {
        "content": "<p>I am used only to tactics</p>",
        "id": 212561133,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602078737
    },
    {
        "content": "<p>Yeah, it's one of those compact term mode proofs</p>",
        "id": 212561172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602078756
    },
    {
        "content": "<p>Took me a long time to understand how to decipher them</p>",
        "id": 212561198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602078773
    }
]