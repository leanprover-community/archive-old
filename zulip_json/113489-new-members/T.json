[
    {
        "content": "<p>I am trying to show that, in with_top \\Z , T \\neq 0. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_zero</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\">apply with_top.top_ne_zero,  does not work out-/</span>\n <span class=\"c\">/-</span><span class=\"cm\">apply with_top.none_lt_some, does not work out -/</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n <span class=\"c\">/-</span><span class=\"cm\">apply with_top.zero_lt_top,  dows not work out-/</span>\n<span class=\"n\">apply</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">top_ne_coe</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>does not work. This code gives me 3 goals,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"err\">⊤</span> <span class=\"bp\">=</span> <span class=\"err\">↑?</span><span class=\"n\">m_2</span>\n<span class=\"err\">⊢</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n<span class=\"err\">⊢</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>\n\n\n<p>I don't know how to solve this. Any help is appreciated. Thank you!</p>",
        "id": 201783598,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592946618
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span>  <span class=\"c1\">-- you can do intro h, then cases h, or combine this into the line here</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201784152,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592946848
    },
    {
        "content": "<p>The idea is that <code>with_top \\Z</code> has two constructors, one from an element of <code>\\Z</code> or <code>\\top</code>, which are then the two possible (disjoint) cases for what an element of <code>with_top \\Z</code> can be. <code>cases</code> splits into the different possibilities for the equality, but in this case there are none, so <code>intro h, cases h</code> does it, using <code>rintro</code> instead is just a fancy lazy (shorter) way of doing the same thing.</p>",
        "id": 201784520,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592947008
    },
    {
        "content": "<p>Is there a way of making cases for a goal?</p>",
        "id": 201785277,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592947384
    },
    {
        "content": "<p>Can you give an example?</p>",
        "id": 201785508,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592947504
    },
    {
        "content": "<p>I think what you want is <code>split</code>, but not sure of what you're looking for</p>",
        "id": 201785647,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592947566
    },
    {
        "content": "<p>That does not seem to be working out :(</p>",
        "id": 201785773,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592947650
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 201785882,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592947693
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_field</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">discrete_valuation_field</span><span class=\"bp\">.</span><span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">discrete_valuation_field</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- a = ⊤ case</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- true by definition</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ℤ case</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- true by definition</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">val_one_is_zero</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)),</span>\n<span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">apply</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">k</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)))</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201786333,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592947931
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 201786431,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592948005
    },
    {
        "content": "<p>in your example, this line fails for me</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)))</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>with error unknown identifier 'with_top.cases'</p>",
        "id": 201787856,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592948737
    },
    {
        "content": "<p>Edited</p>",
        "id": 201788033,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592948842
    },
    {
        "content": "<p>I think you need to use <code>non_zero</code> in the first case.</p>",
        "id": 201788250,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592948995
    },
    {
        "content": "<p>And here is how you could use the built in cases instead of your lemma, its a bit weird though, because it writes <code>none</code> instead of top everywhere, so using the lemma might be nicer.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">val_one_is_zero</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)),</span>\n<span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">apply</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">k</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">none_eq_top</span> <span class=\"n\">at</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">non_zero</span> <span class=\"n\">at</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201788782,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592949274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/T/near/201788250\">said</a>:</p>\n<blockquote>\n<p>I think you need to use <code>non_zero</code> in the first case.</p>\n</blockquote>\n<p>Oh yes, I had tried this. But some error kept coming up.</p>",
        "id": 201788919,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592949362
    },
    {
        "content": "<p>did you read the error?</p>",
        "id": 201788984,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592949399
    },
    {
        "content": "<p>Well, as soon as I proved 1 \\neq 0, I think g disappeared, which was no help.</p>",
        "id": 201789132,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592949483
    },
    {
        "content": "<p>you'll have less problems with \"disappearing lemmas\" if you use focusing braces</p>",
        "id": 201789197,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592949528
    },
    {
        "content": "<p>like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">val_one_is_zero</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">k</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)))</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">contrapose</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">discrete_valuation_field</span><span class=\"bp\">.</span><span class=\"n\">non_zero</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201789274,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592949578
    },
    {
        "content": "<p>Oh ok. I will keep that in mind. Thank you!</p>",
        "id": 201789720,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592949828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/T/near/201788782\">said</a>:</p>\n<blockquote>\n<p>And here is how you could use the built in cases instead of your lemma, its a bit weird though, because it writes <code>none</code> instead of top everywhere, so using the lemma might be nicer.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">val_one_is_zero</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)),</span>\n<span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">apply</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">k</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">none_eq_top</span> <span class=\"n\">at</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">non_zero</span> <span class=\"n\">at</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Thank you!</p>",
        "id": 201790021,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592949966
    },
    {
        "content": "<p>here's what I would write. probably the thing of most interest is the use of the <code>lift</code> tactic.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_field</span>\n\n<span class=\"n\">def</span> <span class=\"n\">discrete_valuation_field</span><span class=\"bp\">.</span><span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span> <span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">discrete_valuation_field</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">some</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">can_lift</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"err\">⊤</span><span class=\"o\">,</span> <span class=\"n\">prf</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">val_one_is_zero</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">k</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">lift</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"bp\">ℤ</span> <span class=\"k\">with</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">non_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201790876,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592950533
    }
]