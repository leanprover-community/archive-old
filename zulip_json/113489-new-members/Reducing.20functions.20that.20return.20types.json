[
    {
        "content": "<p>YEP below works. NOPE doesn't. Where exactly does the latter fail? Beginner question.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">typeForFoo</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo.R</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo.N</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"c1\">-- YEP!</span>\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">typeForFoo</span> <span class=\"n\">foo.R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">typeForFoo</span> <span class=\"n\">foo.N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- NOPE!</span>\n<span class=\"kd\">def</span> <span class=\"n\">jack</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">typeForFoo</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo.R</span> <span class=\"o\">:=</span> <span class=\"n\">bar.mk</span> <span class=\"n\">s</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo.N</span> <span class=\"o\">:=</span> <span class=\"n\">bar.mk</span> <span class=\"mi\">0</span> <span class=\"n\">s</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213718352,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1603045040
    },
    {
        "content": "<p>Involves matching on a type, which is inconsistent?</p>",
        "id": 213718420,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1603045178
    },
    {
        "content": "<p>well for starters <code>#eval</code> doesn't work on real numbers</p>",
        "id": 213718472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603045219
    },
    {
        "content": "<p>also you are missing your prologue for the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 213718475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603045240
    },
    {
        "content": "<p>The problem is in jack. Each of the s is read as being of type (typeForFoo f) not as the reduced value of that expression. Yes, ok, on the evals (deleted), and sorry about missing import of reals from mathlib.</p>",
        "id": 213718494,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1603045281
    },
    {
        "content": "<p>Because <code>s</code> depends on <code>f</code>, you have to match on them together</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">jack</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">typeForFoo</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo.R</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">bar.mk</span> <span class=\"n\">s</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo.N</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">bar.mk</span> <span class=\"mi\">0</span> <span class=\"n\">s</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213718625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603045444
    },
    {
        "content": "<p>Thank you, Mario.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducing.20functions.20that.20return.20types/near/213718625\">said</a>:</p>\n<blockquote>\n<p>Because <code>s</code> depends on <code>f</code>, you have to match on them together</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">jack</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">typeForFoo</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo.R</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">bar.mk</span> <span class=\"n\">s</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo.N</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">bar.mk</span> <span class=\"mi\">0</span> <span class=\"n\">s</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n</blockquote>",
        "id": 213718922,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1603046000
    }
]