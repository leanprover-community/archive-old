[
    {
        "content": "<p>I have the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Which gives the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>I was under the impression that these are the same thing, or at least that  <code>variable {Z:Type}\ndef g: Z → Z := sorry</code> can be thought of as <code>g:Π {Z:Type}, Z → Z</code>. What is the difference?</p>",
        "id": 206330668,
        "sender_full_name": "Chris M",
        "timestamp": 1596860063
    },
    {
        "content": "<p>Once you define</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>the function <code>g</code> has type <code>?m_1 → ?m_1</code>. It means that it will not look for an argument of type <code>Type</code>.</p>",
        "id": 206333650,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596865806
    },
    {
        "content": "<p>You can use <code>@g</code> to be able to set implicit arguments.</p>",
        "id": 206333663,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596865837
    },
    {
        "content": "<p>There is also a version</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">{{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>With this definition <code>g</code> has type <code>Π {{Z : Type}} (x : Z), Z</code> while <code>g x</code>, <code>x : Z</code> has type <code>Z</code>.</p>",
        "id": 206333687,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596865918
    },
    {
        "content": "<p>I.e., lean does not process the argument in <code>{{ }}</code> unless you provide more explicit arguments.</p>",
        "id": 206333737,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596865959
    },
    {
        "content": "<p>If you just write <code>g</code>, Lean feeds it metavariables to fill in the implicit arguments. So it's now a function <code>?m_1 → ?m_1</code>, as Yury says. This distinction between \"a function with an implicit argument, not yet applied\" and \"a function applied to a metavariable\" is a bit subtle!</p>",
        "id": 206333822,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596866117
    },
    {
        "content": "<p>why do we use <code>{}</code> instead of <code>{{}}</code>?</p>",
        "id": 206334749,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596867978
    },
    {
        "content": "<p>I think <code>⦃⦄</code> works much better than <code>{}</code> but perhaps it takes a bit more keystrokes</p>",
        "id": 206335110,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596868564
    },
    {
        "content": "<p>I think <code>⦃⦄</code> is so preferable that it should replace <code>{}</code> as the default behaviour</p>",
        "id": 206335122,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596868589
    },
    {
        "content": "<p>I was wondering about the same thing!</p>",
        "id": 206335253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596868851
    },
    {
        "content": "<p>what if I were to make a PR that replaces all {} to ⦃⦄</p>",
        "id": 206335263,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596868874
    },
    {
        "content": "<p>It might be cheaper to try out a change to core that swaps their meanings??</p>",
        "id": 206335666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596869709
    }
]