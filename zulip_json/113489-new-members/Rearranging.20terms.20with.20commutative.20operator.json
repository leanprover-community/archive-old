[
    {
        "content": "<p>Below I declare a binary operator, and assert it is associative and commutative.  Then I try to use simp to rearrange some terms, but it fails.  What am I doing wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">op_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">op_comm</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rearrange</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">l</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">l</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">k</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">op_assoc</span><span class=\"o\">,</span> <span class=\"n\">op_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 293029551,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1660263516
    },
    {
        "content": "<p>I figured it out: I need to tell it that it can use <code>op_assoc</code> in the other direction as well.</p>",
        "id": 293030186,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1660264158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> has marked this topic as resolved.</p>",
        "id": 293030198,
        "sender_full_name": "Notification Bot",
        "timestamp": 1660264175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> has marked this topic as unresolved.</p>",
        "id": 293030529,
        "sender_full_name": "Notification Bot",
        "timestamp": 1660264459
    },
    {
        "content": "<p>I spoke too soon.  If I change the last line to:<br>\n<code>by simp [op_assoc, op_comm, ← op_assoc]</code><br>\nI get a <code>(deterministic) timeout</code>.</p>\n<p>How do I get this working?</p>",
        "id": 293030586,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1660264522
    },
    {
        "content": "<p>You need one more rule, <code>op_left_comm (a b c : nat) : op a (op b c) = op b (op a c)</code></p>",
        "id": 293030876,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660264838
    },
    {
        "content": "<p>That should be enough with <code>simp [op_comm, op_assoc, op_left_comm]</code></p>",
        "id": 293030895,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660264867
    },
    {
        "content": "<p>Thanks!  Why does it time out?  There should only be a few hundred combinations for 4 leaves and a single operator.  Doesn't simp keep track of previous expressions it has generated, so it knows when it has a duplicate?</p>\n<p>In general, how do you know when it's ok to add an expression to a <code>simp</code> list?  Just try it and see if you get a timeout?  And how do you know what alternate to put in it's place, i.e. how would you think of <code>op_left_comm</code> above?</p>",
        "id": 293109719,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1660311178
    },
    {
        "content": "<p>I don't think <code>simp</code> is smart enough to \"cancel\" out <code>simp [my_lemma, &lt;-my_lemma]</code>. Think of each mentioned lemma a rule. So simp tries to apply any rules it can, and this makes it enter a loop. Just <code>simp [my_comm_lemma]</code> won't enter a loop because for the one rule, there is an \"order\" of expressions where one is preferred over the other. If you had dome <code>simp [my_comm_lemma, &lt;-my_comm_lemma]</code>, that would loop. The 3 rules I provided are sufficient to normalize commutative left associative operation.</p>",
        "id": 293119479,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660314358
    },
    {
        "content": "<p>That's my headcanon, I think there are more precise/rigorous definitions</p>",
        "id": 293119830,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660314446
    },
    {
        "content": "<p>Thanks Yakov.  Another question, this time about rw in calc mode.  To prove <code>op_left_comm</code>, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">op_left_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">op_assoc</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">op_comm</span> <span class=\"n\">a</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">op_assoc</span>\n</code></pre></div>\n<p>But if I try to combine the first two <code>rw</code>, it fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">op_left_comm'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">op_assoc</span><span class=\"o\">,</span> <span class=\"n\">op_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">op_assoc</span>\n</code></pre></div>\n<p>with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It seems to be trying to apply <code>op_comm a b</code> to the original LHS.  Combining the 2nd and 3rd <code>rw</code> works fine though.  Is this just a quirk of the first line of calc mode?</p>",
        "id": 293122335,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1660315273
    },
    {
        "content": "<p>You are just not telling it to do what you want it to do. Look at the state after the first <code>rw</code> (you can put your cursor on the <code>,</code> or so).</p>",
        "id": 293122821,
        "sender_full_name": "Reid Barton",
        "timestamp": 1660315441
    },
    {
        "content": "<p>This is what I'm remembering, from TPiL section 5.7:<br>\n\"It may seem that commutativity and left-commutativity are problematic, in that repeated application of either causes looping. But the simplifier detects identities that permute their arguments, and uses a technique known as ordered rewriting. This means that the system maintains an internal ordering of terms, and only applies the identity if doing so decreases the order. With the three identities mentioned above, this has the effect that all the parentheses in an expression are associated to the right, and the expressions are ordered in a canonical (though somewhat arbitrary) way. Two expressions that are equivalent up to associativity and commutativity are then rewritten to the same canonical form.\"</p>\n<p>So as you say, it's a local choice per identity looking at ordering, not a global \"remember all generated expressions to detect loops\" as I somehow thought.</p>",
        "id": 293123189,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1660315552
    },
    {
        "content": "<p>Thanks Reid, it looks like it's transforming the RHS into the LHS, I assumed it would do the opposite, which seems more natural to me.</p>",
        "id": 293126956,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1660315656
    },
    {
        "content": "<p>Right, because that is the only thing <code>op_assoc</code> can do when used for rewriting in the forward direction.</p>",
        "id": 293127152,
        "sender_full_name": "Reid Barton",
        "timestamp": 1660315710
    },
    {
        "content": "<p>Ah got it, thanks.  I pictured calc mode as manipulating an expression (the LHS), not manipulating an equation.  TIL!</p>",
        "id": 293128060,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1660315996
    },
    {
        "content": "<p>I still remember the day I learnt this :-) (and was equally confused before the penny dropped!)</p>",
        "id": 293164988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660327421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Rearranging.20terms.20with.20commutative.20operator/near/293030895\">said</a>:</p>\n<blockquote>\n<p>That should be enough with <code>simp [op_comm, op_assoc, op_left_comm]</code></p>\n</blockquote>\n<p>So that's still not working, although now I can't make sense of the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">op_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">op_comm</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">op_left_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">op_assoc</span><span class=\"o\">,</span> <span class=\"n\">op_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">op_assoc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rearrange</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">l</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">l</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">k</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">op_assoc</span><span class=\"o\">,</span> <span class=\"n\">op_comm</span><span class=\"o\">,</span> <span class=\"n\">op_left_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The <code>simp</code> fails with: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>What exactly is the remaining goal?  What is it that's left to prove?</p>",
        "id": 293190541,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1660337277
    },
    {
        "content": "<p><code>simp</code> doesn't do <code>intros</code> by default. The mathlib convention would be to move all of the variables left of the colon as you did with <code>op_left_comm</code>. Alternatively you can add something like <code>{contextual := true}</code> to the <code>simp</code> call</p>",
        "id": 293195928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660339688
    }
]