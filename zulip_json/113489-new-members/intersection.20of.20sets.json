[
    {
        "content": "<p>I am trying to create a set of type <code>set A</code> from another set <code>U : set X</code> by taking its intersection with <code>A</code>  where <code>A</code> is something of type <code>set X</code>.<br>\nI was able to come up with the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>but this is not very nice to work with so I'm wondering if there is a better way (perhaps already built into mathlib)?</p>",
        "id": 199976879,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591452830
    },
    {
        "content": "<p>you have <code>A : set X</code> and you want <code>a : set A</code>? that feels wrong</p>",
        "id": 199976939,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591452883
    },
    {
        "content": "<p>do you really want <code>B : set X</code> and <code>hB : B \\sub A</code>?</p>",
        "id": 199976953,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591452921
    },
    {
        "content": "<p>I'm working with subspaces of a topological space so that's what I came up with :/</p>",
        "id": 199976957,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591452936
    },
    {
        "content": "<p>So <code>A</code> can be promoted to a topological space?</p>",
        "id": 199977009,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591452969
    },
    {
        "content": "<p>and then you want <code>B</code> to be a set of points in the space <code>A</code>?</p>",
        "id": 199977017,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591452995
    },
    {
        "content": "<p>I made something like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>and now I'm trying to show <code>A ∩ V </code> is open with respect to the subspace topology</p>",
        "id": 199977019,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591452997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/intersection.20of.20sets/near/199977017\">said</a>:</p>\n<blockquote>\n<p>and then you want <code>B</code> to be a set of points in the space <code>A</code>?</p>\n</blockquote>\n<p>Yeah exactly</p>",
        "id": 199977025,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591453013
    },
    {
        "content": "<p>can you give the imports to make it a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 199977035,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591453045
    },
    {
        "content": "<p>Alright, will do one sec</p>",
        "id": 199977041,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591453061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> Something like this can certainly be done, but will probably be painful...</p>",
        "id": 199977045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591453068
    },
    {
        "content": "<p>I think \"what is the right way to deal with substructures\" is an open and active question in algebra-land</p>",
        "id": 199977096,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591453110
    },
    {
        "content": "<p>Is something like this implemented in mathlib? (such as subspaces of topological spaces)?</p>",
        "id": 199977097,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591453111
    },
    {
        "content": "<p>I suggest that you work with two types <code>A</code> and <code>X</code>, and a function <code>f : A → X</code>. Assume that you have a topology on both types, and assume <code>inducing f</code>.</p>",
        "id": 199977098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591453114
    },
    {
        "content": "<p>probably the simplest example is subgroups</p>",
        "id": 199977113,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591453146
    },
    {
        "content": "<p>There is a lot of stuff in mathlib (about topology)</p>",
        "id": 199977114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591453149
    },
    {
        "content": "<p>people say the words \"bundled\" and \"unbundled\" a lot when they talk about it</p>",
        "id": 199977116,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591453158
    },
    {
        "content": "<p>Your original definition can be written as <code>λ U, subtype.val \\-1' U</code></p>",
        "id": 199977119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591453167
    },
    {
        "content": "<p>If you follow Johan's suggestion, I guess you are forced into finding this.</p>",
        "id": 199977181,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591453220
    },
    {
        "content": "<p>Alright, I'll try to do the bundled approach</p>",
        "id": 199977198,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591453254
    },
    {
        "content": "<p>I'll come back if I get stuck again :)</p>",
        "id": 199977208,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591453275
    },
    {
        "content": "<p>Just to remark that Kenny had a terrible time trying to formalise an exercise in Hartshorne of the form \"given sheaves on each element U_i of an open cover of X plus some gluing data, make a sheaf on X and prove it has some universal property\"</p>",
        "id": 199977209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591453276
    },
    {
        "content": "<p>Is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span>  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>what you want?</p>",
        "id": 199977210,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1591453277
    },
    {
        "content": "<p>You wrote <code>∃ u : X, ...</code> but then one of the conditions on <code>u</code> is that it equal some specific thing (<code>subtype.val s</code>), so the existential is not needed.</p>",
        "id": 199977211,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591453280
    },
    {
        "content": "<p>Kenny's audacious approach was to define a sheaf on U to literally be a sheaf on X, with an implicit (unenforced) promise that you were not to evaluate it on an open subset V of X which was not a subset of X</p>",
        "id": 199977275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591453359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/intersection.20of.20sets/near/199977210\">said</a>:</p>\n<blockquote>\n<p>Is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span>  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>what you want?</p>\n</blockquote>\n<p>Something like this but I think it will still be hard to work with</p>",
        "id": 199977277,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591453362
    },
    {
        "content": "<p>Mario modified the definition to make it a bit more principled -- he objected to it for some reason (despite not objecting to division by 0 being defined)</p>",
        "id": 199977297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591453423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/intersection.20of.20sets/near/199977275\">said</a>:</p>\n<blockquote>\n<p>Kenny's audacious approach was to define a sheaf on U to literally be a sheaf on X, with an implicit (unenforced) promise that you were not to evaluate it on an open subset V of X which was not a subset of X</p>\n</blockquote>\n<p>Are you suggesting it is possible to define a topology on X using the subspace topology of A?</p>",
        "id": 199977381,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591453539
    },
    {
        "content": "<p>I think this approach is a bit controversial :P</p>",
        "id": 199977439,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591453595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> What is your bigger goal?</p>",
        "id": 199977458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591453644
    },
    {
        "content": "<p>Do you only want to define a subspace topology, or is there a grand plan on the horizon?</p>",
        "id": 199977467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591453668
    },
    {
        "content": "<p>My bigger goal is to learn topology by formalising it in lean, but right now I'm trying to show that if a space is Hausdorff, so is its subspaces</p>",
        "id": 199977517,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591453710
    },
    {
        "content": "<p>So that is the reason why I need a the intersection of two <code>set X</code> to be a <code>set A</code></p>",
        "id": 199977539,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591453781
    },
    {
        "content": "<p>So, you could prove a more general theorem (which is easier to prove), namely</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">inducing</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">t2_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 199977627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591453919
    },
    {
        "content": "<p>You could then apply it to a subspace and <code>f = subtype.val</code> to recover the \"special case\".</p>",
        "id": 199977676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591453953
    },
    {
        "content": "<p>Sorry for stupid question: what does <code>inducing</code> do and where can I find it?</p>",
        "id": 199977808,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591454149
    },
    {
        "content": "<p>This isn't really any easier except that it forces your mental model to match what's happening in Lean.</p>",
        "id": 199977863,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591454193
    },
    {
        "content": "<p>I would hope it is easier than all the different coersions I've been dealing with.</p>",
        "id": 199977946,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591454305
    },
    {
        "content": "<p>It's exactly just callling all of those coercions <code>f</code>.</p>",
        "id": 199977954,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591454338
    },
    {
        "content": "<p>If <code>A : set X</code> then no matter what you are forced in Lean to think of <code>A</code> and <code>X</code> as separate types, related by an injective function <code>A -&gt; X</code> that happens to be called <code>subtype.val</code>, and which is also a coercion so often you don't have to write it explicitly.</p>",
        "id": 199978045,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591454477
    },
    {
        "content": "<p>Johan's suggestion is just work with arbitrary <code>A</code> and <code>X</code> and an injective function <code>f : A -&gt; X</code>--this is easier in the sense that now you've changed the math picture to match the Lean one. From a technical point of view, it's the same.</p>",
        "id": 199978133,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591454631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/intersection.20of.20sets/near/199977210\">said</a>:</p>\n<blockquote>\n<p>Is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span>  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>what you want?</p>\n</blockquote>\n<p>Actually it's just</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span>  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>I think.</p>",
        "id": 199978212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591454695
    },
    {
        "content": "<p>Well, these are equal but <code>x : A</code> so <code>A x</code> holds automatically.</p>",
        "id": 199978241,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591454735
    },
    {
        "content": "<p>Right, I think I understand. I think I will first prove that if f is a continuous injective map from X to Y and Y is Hausdorff then so is X (it was on my agenda to prove so anyway :)) and then the subspace lemma follows directly as Johan's suggestion</p>",
        "id": 199978297,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591454764
    },
    {
        "content": "<p>I just have to show my coercion is continuous I suppose</p>",
        "id": 199978315,
        "sender_full_name": "Jason KY.",
        "timestamp": 1591454795
    },
    {
        "content": "<p>And it will be because the subspace topology is defined to be the smallest topology which makes the inclusion map continuous</p>",
        "id": 199985790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591465525
    },
    {
        "content": "<p>Exercise: Let X be a topological space and let X to Y be a surjection of sets. Construct some kind of topology on Y which makes the map continuous and is the correct topology</p>",
        "id": 199986501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591466661
    }
]