[
    {
        "content": "<p>Hey!<br>\nI have a <code>walk</code> on a simple graph, which I cast to a different (equal) simple graph, and want to prove that the cast walk satisfies the same properties as the original walk (see MWE). <br>\nWhat I'd like to do, morally, is simply use the graph equality in a rewrite of the property that I want my cast walk to have, but this doesn't work.<br>\nI believe I'm misunderstanding something basic here. Thanks!</p>\n<p>(Off topic, but I don't think I qualify as a \"new member\": wouldn't a <code>beginner questions</code> channel be useful?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.connectivity</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">e</span>\n<span class=\"kd\">def</span> <span class=\"n\">walk_cast</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">e</span> <span class=\"n\">at</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">p</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">walk_cast_supp</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p.support.to_finset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">walk_cast</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">e</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support.to_finset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">walk_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">e</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 298221215,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662884264
    },
    {
        "content": "<p>If one of the two graphs is a variable, as in your MWE, you can use <code>subst e</code>.</p>",
        "id": 298222002,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662884777
    },
    {
        "content": "<p>and in general, I should just generalize in order to have it be a variable?</p>",
        "id": 298222341,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662885031
    },
    {
        "content": "<p>This works: and it actually makes sense if I take the time to think in terms of terms. Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.connectivity</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">e</span>\n<span class=\"kd\">def</span> <span class=\"n\">walk_cast</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">p</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">walk_cast_supp</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p.support.to_finset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">walk_cast</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">e</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support.to_finset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">walk_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 298222634,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662885256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 298222659,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662885285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> has marked this topic as unresolved.</p>",
        "id": 298232916,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662892336
    },
    {
        "content": "<p>Reopening because I'd like to get the big picture:<br>\nIn this specific case, I can have a lemma taking care of this, but in the general case, assuming I'm somewhere in a proof with neither ends of my equality a variable, and don't want to extract a lemma to take care of this transport of property: how would I proceed?</p>",
        "id": 298233097,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662892461
    },
    {
        "content": "<p>Turn the equality into a graph isomorphism and then find/write the lemmas that show that all walk properties are graph properties (that is, they are transferred under graph isomorphisms).</p>",
        "id": 298233169,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662892535
    },
    {
        "content": "<p>mmh, OK, makes sense, thanks!</p>",
        "id": 298234395,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1662893305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 298234399,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662893308
    }
]