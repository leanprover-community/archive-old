[
    {
        "content": "<p>I understand that without an @ annotation, implicit arguments are inferred, with a @ annotation, all the arguments are unfolded. But what happens with @@?</p>\n<p>Here's a snippet of what I'm working on:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">  We define a cartesian product by a point-wise equivalence between α and its projections π.</span>\n<span class=\"cm\"> -/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">cartesian_product</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mapping</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cartesian_product</span><span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">cartesian_product</span> <span class=\"n\">α</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">mapping</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">A</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cartesian_product</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">cartesian_product</span> <span class=\"n\">α</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"err\">ᵢ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">mapping</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"err\">ᵢ</span> <span class=\"n\">i</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">cartesian_product</span> <span class=\"n\">α</span> <span class=\"n\">π</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span><span class=\"n\">def</span> <span class=\"n\">subspace</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"err\">∘</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">proj</span><span class=\"o\">)</span> <span class=\"n\">A</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">subspace</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">subspace</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@@</span><span class=\"n\">subspace</span>\n</code></pre></div>\n\n\n<p>and the output is: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">subspace</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">?</span><span class=\"n\">M_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">@</span><span class=\"n\">subspace</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_7</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">cartesian_product</span> <span class=\"n\">α</span> <span class=\"n\">π</span><span class=\"o\">},</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">@@</span><span class=\"n\">subspace</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">M_2</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_7</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">cartesian_product</span> <span class=\"err\">?</span><span class=\"n\">M_1</span> <span class=\"n\">π</span><span class=\"o\">},</span> <span class=\"n\">set</span> <span class=\"err\">?</span><span class=\"n\">M_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 199365916,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591016758
    },
    {
        "content": "<p>I think it means: automatically fill all implicit arguments up to (and not including) the first one which depends on an earlier argument.</p>",
        "id": 199366665,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591017225
    },
    {
        "content": "<p>ah, great. Thanks!</p>",
        "id": 199366999,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591017381
    }
]