[
    {
        "content": "<p>In the natural numbers game I tried <code>rw add_right_eq_zero at ab0,</code><br>\nand the resulting error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"kd\">lemma</span> <span class=\"n\">lhs</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">metavariable</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">b</span> <span class=\"n\">pre_a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">an0</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">pre_a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">bn0</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">ab0</span> <span class=\"o\">:</span> <span class=\"n\">pre_a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>I think this is because (pre_a * b) is a term and not a simple natural number. But I am not sure how to group that. I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">pre_a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul</span> <span class=\"n\">at</span> <span class=\"n\">ab0</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>but that did not work either resulting in<br>\n<code>rewrite tactic failed, lemma is not an equality nor a iff</code></p>",
        "id": 282067561,
        "sender_full_name": "Felix Benning",
        "timestamp": 1652340182
    },
    {
        "content": "<p>A workaround would be doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">pre_b</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>I think. But I actually want to understand how lean works and not just solve the problem</p>",
        "id": 282067699,
        "sender_full_name": "Felix Benning",
        "timestamp": 1652340280
    },
    {
        "content": "<p>Figured it out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">add_right_eq_zero</span> <span class=\"n\">ab0</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ab0</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">bn0</span> <span class=\"n\">ab0</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 282070317,
        "sender_full_name": "Felix Benning",
        "timestamp": 1652342147
    },
    {
        "content": "<p><code>add_right_eq_zero</code> is not an equality, it is an implication/function. So first you have to apply that function resulting in the equality <code>x</code>, and <em>then</em> you can use that equality for rewriting. Now my question seems dumb to me <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 282070575,
        "sender_full_name": "Felix Benning",
        "timestamp": 1652342313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492171\">Felix Benning</span> has marked this topic as resolved.</p>",
        "id": 282070579,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652342317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"492171\">@Felix Benning</span> The error here is a little more subtle here than that. <code>rw</code> can handle non-equalities like <code>add_right_eq_zero</code> just fine (consider that <code>rw add_succ</code> works, despite the fact that you'd need to write <code>add_succ x y</code> to actually get an equality). What will usually happen is that <code>rw</code> will create new goals for you if it can't otherwise figure out arguments to the implication/function.</p>\n<p>The problem with <code>add_right_eq_zero</code> is that its conclusion is <code>a = 0</code> with <code>a</code> unknown, but the algorithm for <code>rw</code> depends on the left-hand side of the conclusion to not just be an unknown variable.  By doing <code>add_right_eq_zero ab0</code>, now you have <code>pre_a * b = 0</code>, so the left-hand side is completely determined and <code>rw</code> is happy.</p>",
        "id": 282117476,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652367072
    },
    {
        "content": "<p>(That's just explaining the error message <code>rw</code> gave you -- you're right that you mathematically shouldn't be doing <code>rw add_right_eq_zero at ab0</code> since it's not an iff.)</p>",
        "id": 282118207,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652367307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Thank you for the explanation. I have not 100% understood it though. </p>\n<blockquote>\n<p>The problem with <code>add_right_eq_zero</code> is that its conclusion is a = 0 with a unknown</p>\n</blockquote>\n<p>is it unknown if I apply it to the equation <code>pre_a * b + b = 0</code>? I mean I also tried <code>rw @add_right_eq_zero pre_a * b b</code> if I remember correctly. Explicitly providing the implicit paramenters. That being said, it makes sense that it refuses to work with rewrite if it is not an iff since you often start with the thing you want to prove and rewrite it till <code>refl</code>, so the opposite direction is in fact the important one I guess.</p>",
        "id": 282233860,
        "sender_full_name": "Felix Benning",
        "timestamp": 1652441638
    }
]