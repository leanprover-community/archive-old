[
    {
        "content": "<p>Why is the order of arguments in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sup_le_sup_left</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>hypothesis <code>h</code> first and element <code>c</code> second, while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inf_le_inf_right</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>is the other way around?</p>",
        "id": 308159353,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1667663387
    },
    {
        "content": "<p>To me those both look backwards!</p>",
        "id": 308159941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667663679
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/sup_le_sup_right\">docs#sup_le_sup_right</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inf_le_inf_left\">docs#inf_le_inf_left</a> both look right to me, in contrast</p>",
        "id": 308160387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667663891
    },
    {
        "content": "<p>I see no difference between those and mine. Both don't agree on the order of element vs hypothesis, or is there some logic I am missing?</p>",
        "id": 308160916,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1667664125
    },
    {
        "content": "<p>The order of the hypothesis should match the order of appearances in the statement.</p>",
        "id": 308165624,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1667666810
    },
    {
        "content": "<p>What does that mean? The hypothesis <code>h₁ : a ≤ b</code> appears nowhere in the statement <code> c ⊔ a ≤ c ⊔ b</code></p>",
        "id": 308167074,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1667667719
    },
    {
        "content": "<p>It's more of a heuristic than an algorithm. <code>c ⊔ a ≤ c ⊔ b</code> is natural to think of as <code>a ≤ b</code> with <code>c</code> on the left, so in the arguments <code>c</code> is on the left of the <code>a ≤ b</code> argument.</p>",
        "id": 308167734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667668104
    },
    {
        "content": "<p>I see, thanks! That's not something I would have guessed. I expected something like data to take precedence over propositions.</p>",
        "id": 308171940,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1667670880
    },
    {
        "content": "<p>Actually you should expect the other way because proof arguments are (usually) not inferrable from the rewrite, while data arguments are.</p>",
        "id": 308175773,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667673651
    }
]