[
    {
        "content": "<p>Hi, it's me again :P I am working on properties of Mersenne primes i.e. primes in the form of 2^n - 1. One property is that n must be a prime. While working on it, I have to deal with a lot of <code>2^x</code>, and combined with the subtraction over natural numbers, it is causing me quite a lot of pain <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span> Is that normal? As in, is there any simpler way to prove  that <code>2 &lt;= d =&gt; 1 &lt; 2^d - 1</code> directly, whether through a <code>simp</code> or some other method?</p>\n<p>Here is my code, it's all quite elementary number theory, so hope someone can take a look, especially the parts where I marked with <code>TODO</code>, such as stating <code>4 - 1 &lt;= 2^d - 1</code> as a lemma. Thanks!!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Thank you to Kevin Buzzard, Niels Voss and Yaël Dillies for helping with this!</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mersenne_div</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mersenne</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">mersenne</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mersenne</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">nat_sub_dvd_pow_sub_pow</span> <span class=\"n\">_</span> <span class=\"mi\">1</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- 2^n - 1 is Mersenne prime implies n is prime</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mersenne_theorem</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"o\">(</span><span class=\"n\">mersenne</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Auxillary lemma</span>\n  <span class=\"k\">have</span> <span class=\"n\">two_le_n</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">by_contradiction</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- TODO: Simplify this, seems repetitive</span>\n    <span class=\"n\">cases</span> <span class=\"n\">nat.lt_succ_iff.1</span> <span class=\"n\">h'</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mersenne</span><span class=\"o\">,</span> <span class=\"n\">nat.not_prime_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mersenne</span><span class=\"o\">,</span> <span class=\"n\">nat.eq_zero_of_le_zero</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">nat.not_prime_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"c1\">-- Assume n is composite</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">n_comp</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nat.exists_dvd_of_not_prime</span> <span class=\"n\">_</span> <span class=\"n\">n_comp</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d_div</span><span class=\"o\">,</span> <span class=\"n\">d_ne_one</span><span class=\"o\">,</span> <span class=\"n\">d_ne_n</span><span class=\"o\">⟩,</span>\n\n  <span class=\"c1\">-- TODO: Remove these...</span>\n  <span class=\"k\">have</span> <span class=\"n\">d_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contradiction</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">d_div</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">zero_dvd_iff</span> <span class=\"n\">at</span> <span class=\"n\">d_div</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">one_le_pow_two_d</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat.one_le_pow</span><span class=\"o\">,</span> <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">two_le_d</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">d</span><span class=\"bp\">;</span> <span class=\"n\">omega</span><span class=\"o\">,},</span>\n  <span class=\"k\">have</span> <span class=\"n\">four_sub_one_le_pow_two_sub_one</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">change</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.sub_le_sub_iff_right</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pow_le_pow</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">two_le_d</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.one_le_pow</span> <span class=\"n\">d</span> <span class=\"mi\">2</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"c1\">-- Then mersenne n is not prime</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">mersenne_div</span> <span class=\"n\">d_div</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">md</span><span class=\"o\">,</span> <span class=\"n\">hmd</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">nat.prime</span> <span class=\"o\">(</span><span class=\"n\">mersenne</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat.not_prime_mul'</span> <span class=\"n\">hmd.symm</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">mersenne</span><span class=\"o\">,</span>\n\n      <span class=\"c1\">-- TODO: Remove this...</span>\n      <span class=\"k\">calc</span>\n      <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">four_sub_one_le_pow_two_sub_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"c1\">-- Ruling out cases where (mersenne n / mersenne d) &lt;= 2</span>\n      <span class=\"n\">by_contradiction</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">md</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hmd</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat.not_prime_zero</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">mersenne</span> <span class=\"n\">at</span> <span class=\"n\">hmd</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_le_iff</span><span class=\"o\">,</span> <span class=\"n\">nat.lt_one_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hmd</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- TODO: Here I am proving 2 ^ n - 1 = 2 ^ d - 1 =&gt; n = d ... Is there better way?</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_left_inj</span> <span class=\"o\">(</span><span class=\"n\">nat.one_le_pow</span> <span class=\"n\">n</span> <span class=\"mi\">2</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">)</span> <span class=\"n\">one_le_pow_two_d</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hmd</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">d_ne_n</span> <span class=\"o\">(</span><span class=\"n\">nat.pow_right_injective</span> <span class=\"n\">rfl.ge</span> <span class=\"n\">hmd</span><span class=\"o\">),</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">two_le_n</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 322917497,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674429262
    },
    {
        "content": "<p>You should probably work over <code>int</code> to use the proper subtraction.</p>",
        "id": 322918975,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674430733
    },
    {
        "content": "<p>Subtraction on <code>nat</code> is very well behaved from the order theoretic point of view, not so much from the algebraic one.</p>",
        "id": 322919006,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674430773
    },
    {
        "content": "<p>The thing is <code>mersenne</code> is currently defined as <code>def mersenne (p : ℕ) : ℕ := 2^p - 1</code>, and it is used everywhere in the <code>lucas_*</code> code. Should I change that? Or just cast to the int's and work on that?</p>",
        "id": 322919317,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674431074
    },
    {
        "content": "<p>Just cast to int and prove mersenne n as integer is 2^n-1 with integer subtraction. Natural subtraction is awful I agree.</p>",
        "id": 322924594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674435648
    },
    {
        "content": "<p>If that makes you feel better, you could define <code>int.mersenne</code> and show casting <code>nat.mersenne</code> to <code>int</code> gives you <code>int.mersenne</code>.</p>",
        "id": 322954512,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674459055
    }
]