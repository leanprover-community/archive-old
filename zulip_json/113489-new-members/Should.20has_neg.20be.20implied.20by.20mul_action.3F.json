[
    {
        "content": "<p>As in title. If I have <code>mul_action A B</code> and <code>has_neg A</code>, should lean provide <code>has_neg B</code> for me?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">smul</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 202291276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593425159
    },
    {
        "content": "<p>No, due to limitations in type class search, this is (unfortunately!) not possible. It should/might become better in Lean 4</p>",
        "id": 202291331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593425186
    },
    {
        "content": "<p>So you will have to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">has_neg_of_mul_action</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">blabla</span>\n</code></pre></div>\n\n\n<p>and then at the usage site</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">has_neg_of_mul_action</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 202291385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593425259
    },
    {
        "content": "<p>would <code>has_neg_of_mul_action</code> be a sensible addition to mathlib?</p>",
        "id": 202291460,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593425296
    },
    {
        "content": "<p>I guess so. Is there more structure around? Just a <code>has_neg</code> without information on how it interacts with other structure doesn't seem very useful.</p>",
        "id": 202291505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593425340
    },
    {
        "content": "<p>Not really, it just seems awkward to be unable to write <code>-b</code>, and have to use <code>(-1 : A) â€¢ b</code> instead</p>",
        "id": 202292254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593426034
    },
    {
        "content": "<p>What is the situation you're working in? It seems a bit strange if you have a <code>has_neg A</code> but no other structure.</p>",
        "id": 202296197,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593429274
    },
    {
        "content": "<p>I also have <code>field A</code>. What I meant was that <code>B</code> has little other structure.</p>",
        "id": 202298725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593431436
    }
]