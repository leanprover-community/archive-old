[
    {
        "content": "<p>I have the code</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">ind1</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">const1</span> <span class=\"o\">:</span> <span class=\"n\">ind1</span>\n<span class=\"bp\">|</span> <span class=\"n\">const2</span> <span class=\"o\">:</span> <span class=\"n\">ind1</span> <span class=\"bp\">→</span> <span class=\"n\">ind1</span> <span class=\"bp\">→</span> <span class=\"n\">ind1</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">ind1</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n</code></pre></div>\n\n\n<p>And this last check gives me </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ind1</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ind1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span>\n    <span class=\"n\">C</span> <span class=\"n\">ind1</span><span class=\"bp\">.</span><span class=\"n\">const1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">ind1</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">ind1</span><span class=\"bp\">.</span><span class=\"n\">const2</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ind1</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p>This is strange, because shouldn't <code>C</code> have the type <code>C:ind1 \\to Sort v</code> or something like this? This is at least what the reference manual says.</p>",
        "id": 205516748,
        "sender_full_name": "Chris M",
        "timestamp": 1596134707
    },
    {
        "content": "<p>I think this is large elimination vs. small elimination (into Prop). You need to meet certain conditions in order to get large elimination. This one's small because it's in Sort u. If you change it to Type u, the motive will be (C : ind1 -&gt; Sort l)</p>",
        "id": 205520016,
        "sender_full_name": "Chris B",
        "timestamp": 1596136236
    },
    {
        "content": "<p>You can also get large elimination with an instance of <code>subsingleton</code>.</p>",
        "id": 205520070,
        "sender_full_name": "Chris B",
        "timestamp": 1596136274
    },
    {
        "content": "<p>There are some other rules for getting a large eliminating inductive prop, it's like zero or one constructors, and all of the arguments have to be params/indices or props themselves ala false/eq.</p>",
        "id": 205520483,
        "sender_full_name": "Chris B",
        "timestamp": 1596136512
    },
    {
        "content": "<p>IIRC the motivation is that with proof irrelevance and large eliminating prop you can do something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ind1</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">ind1</span><span class=\"bp\">.</span><span class=\"n\">const1</span>\n<span class=\"n\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ind1</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">ind1</span><span class=\"bp\">.</span><span class=\"n\">const2</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"c1\">-- by proof_irrel</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">x_eq_y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">black</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">white</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pick_color</span> <span class=\"o\">:</span> <span class=\"n\">ind1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">const1</span> <span class=\"o\">:=</span> <span class=\"n\">black</span>\n<span class=\"bp\">|</span> <span class=\"n\">const2</span> <span class=\"o\">:=</span> <span class=\"n\">white</span>\n\n<span class=\"n\">def</span> <span class=\"n\">black_eq_white</span> <span class=\"o\">:</span> <span class=\"n\">black</span> <span class=\"bp\">=</span> <span class=\"n\">white</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">pick_color</span> <span class=\"n\">x_eq_y</span>\n</code></pre></div>",
        "id": 205522361,
        "sender_full_name": "Chris B",
        "timestamp": 1596137561
    },
    {
        "content": "<p>What does the <code>.{0}</code> in <code>ind1.{0}</code> mean?</p>",
        "id": 205554039,
        "sender_full_name": "Chris M",
        "timestamp": 1596165458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> It's a way of explicitly passing the universe variable. In this case putting it in Sort 0/Prop.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">ind1</span> <span class=\"c1\">-- ind1 : Sort u_1</span>\n<span class=\"kn\">universe</span> <span class=\"n\">x</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">ind1</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"c1\">-- ind1 : Sort x</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">ind1</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"c1\">-- ind1 : Prop</span>\n</code></pre></div>",
        "id": 205558026,
        "sender_full_name": "Chris B",
        "timestamp": 1596171796
    }
]