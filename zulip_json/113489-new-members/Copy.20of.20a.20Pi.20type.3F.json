[
    {
        "content": "<p>What does \"copy of a Pi type\" mean in reference to <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/pi_Lp.html#pi_Lp\">#docs.pi_Lp</a>?</p>",
        "id": 307445248,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1667360640
    },
    {
        "content": "<p>It is a Pi type, but the instances for <code>normed_space</code> is different. If you look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp.equiv\">docs#pi_Lp.equiv</a> the proof is saying 'this is the same thing'</p>",
        "id": 307445479,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667360832
    },
    {
        "content": "<p>It means that we are creating a new type <code>pi_Lp</code> which is definitionally equal to <code>Π i, E i</code> (actually, we're creating a distinct copy for each <code>p : ℝ≥0∞</code>). However, the instances present for Π-types are not transported through, so we can put new instances on this structure; in this case, we want a different metric space instance.</p>",
        "id": 307445483,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1667360835
    },
    {
        "content": "<p>Out of curiosity, where would I find the \"instances present for Π-types\", just to better understand why we <em>wouldn't</em> want them in this case? I would guess they're probably much more numerous than what might be contained in a single file...?</p>",
        "id": 307445973,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1667361257
    },
    {
        "content": "<p>you find them usually under the definition, there is \"Instances for <code>pi_Lp</code>\" in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp\">docs#pi_Lp</a></p>",
        "id": 307446585,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667361802
    },
    {
        "content": "<p>I don't think there's a \"definition\" for the pi type itself in mathlib, so I'm not sure there's an easy way to browse the instances...</p>",
        "id": 307447027,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667362194
    },
    {
        "content": "<p>other than putting <code>pi.</code> in the mathlib docs search box and browsing the suggestions</p>",
        "id": 307447126,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667362239
    },
    {
        "content": "<p>there is a file called <code>pi_instances</code>  though</p>",
        "id": 307447168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667362271
    },
    {
        "content": "<p>!</p>",
        "id": 307447180,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667362289
    },
    {
        "content": "<p>well then</p>",
        "id": 307447188,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667362299
    },
    {
        "content": "<p>Actually I take it back. There used to be such a file, now there is a file <code>pi_instances.lean</code> containing a tactic which constructs pi instances, and about 16 files called <code>pi.lean</code> in various parts of mathematics</p>",
        "id": 307447281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667362371
    },
    {
        "content": "<p>ah, alas</p>",
        "id": 307447311,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667362416
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric_space_pi\">docs#metric_space_pi</a> seems relevant if you are looking for the metric that pi_Lp is distinguishing itself from</p>",
        "id": 307447606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667362640
    },
    {
        "content": "<p>On an unrelated note, what is the reason that <code>instance</code>s in source appear as <code>def</code> in the API?</p>",
        "id": 307448648,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1667363439
    },
    {
        "content": "<p>Is the following relation (from <a href=\"https://en.wikipedia.org/wiki/Lp_space#Relations_between_p-norms\">Wikipedia</a>) encoded anywhere in these libraries?  <a href=\"/user_uploads/3121/jt6cBI8OlPw4w1tQ3eRodM3w/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/jt6cBI8OlPw4w1tQ3eRodM3w/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/jt6cBI8OlPw4w1tQ3eRodM3w/image.png\"></a></div>",
        "id": 307448796,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1667363634
    },
    {
        "content": "<p>I believe this is (very opaquely) encoded in the theorem <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp.antilipschitz_with_equiv_aux\">docs#pi_Lp.antilipschitz_with_equiv_aux</a></p>",
        "id": 307450089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667364873
    },
    {
        "content": "<p>in practice, the way you see this is the fact that both the Lp space and the sup norm have the same topology (the product topology)</p>",
        "id": 307450135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667364935
    },
    {
        "content": "<p>Ok. That's good info. Thanks.</p>\n<p>From an architectural standpoint, why is <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/pi_Lp.html\">#docs.pi_Lp</a> defined on <em>products</em> of metric spaces? Or maybe that's a nonsensical question...?</p>",
        "id": 307450657,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1667365377
    },
    {
        "content": "<p>as opposed to what?</p>",
        "id": 307451073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667365650
    },
    {
        "content": "<p>the whole idea is that you are combining multiple dimensions in a particular way. Each dimension has its own metric structure and the p-powered weighted average is used to combine the distances</p>",
        "id": 307451214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667365749
    },
    {
        "content": "<p>Perhaps as opposed to <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/function/lp_space.html\">https://leanprover-community.github.io/mathlib_docs/measure_theory/function/lp_space.html</a>?</p>",
        "id": 307451577,
        "sender_full_name": "Reid Barton",
        "timestamp": 1667365979
    },
    {
        "content": "<p>I guess then what I'm asking is what is the end game pi_Lp? What was it written in service to? </p>\n<p>Apologies if this seems trite. I'm still trying to understand why certain mathlib libraries are developed the way they are...</p>",
        "id": 307451626,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1667366040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Copy.20of.20a.20Pi.20type.3F/near/307451577\">said</a>:</p>\n<blockquote>\n<p>Perhaps as opposed to <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/function/lp_space.html\">https://leanprover-community.github.io/mathlib_docs/measure_theory/function/lp_space.html</a>?</p>\n</blockquote>\n<p>Ya, I think that's sort of what I'm getting at, but my head isn't quite wrapped around what I want to ask, I think. I guess I don't understand why pi_Lp exists, but I assume there is an ultimate purpose.</p>",
        "id": 307451868,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1667366171
    },
    {
        "content": "<p>my (extremely basic) understanding is that it's useful to study multidimensional spaces as Pi types, but there is a \"default\" metric on the Pi type itself, and so you need to use a copy of it to avoid that metric interfering with other metrics that you want to define/use</p>",
        "id": 307452048,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667366321
    },
    {
        "content": "<p>I think the simplest way to answer \"what is the end game of pi_Lp? What was it written in service to?\" is <a href=\"https://en.wikipedia.org/wiki/Lp_space\">https://en.wikipedia.org/wiki/Lp_space</a></p>",
        "id": 307452434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667366591
    },
    {
        "content": "<p>we want something that corresponds to the thing that this page is about</p>",
        "id": 307452457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667366611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Copy.20of.20a.20Pi.20type.3F/near/307452434\">said</a>:</p>\n<blockquote>\n<p>I think the simplest way to answer \"what is the end game of pi_Lp? What was it written in service to?\" is <a href=\"https://en.wikipedia.org/wiki/Lp_space\">https://en.wikipedia.org/wiki/Lp_space</a></p>\n</blockquote>\n<p>Fair point. That's the page I linked to above, so I was looking at it, but I don't see anything about product spaces there. At least not obviously. But I'm not a mathematician (BSc in math, but a loooong time ago) so the nuances of these things may be escaping me...</p>",
        "id": 307452699,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1667366745
    },
    {
        "content": "<p>Actually it is more accurate to say that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.Lp\">docs#measure_theory.Lp</a> is <a href=\"https://en.wikipedia.org/wiki/Lp_space\">https://en.wikipedia.org/wiki/Lp_space</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp\">docs#pi_Lp</a> is <a href=\"https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm\">https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm</a></p>",
        "id": 307452780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667366785
    },
    {
        "content": "<p>Ashley, are you just unsure about why Pi types are useful for modeling multidimensional vector spaces?</p>",
        "id": 307452888,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667366877
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is a product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup><mo>=</mo><mi mathvariant=\"double-struck\">R</mi><mo>×</mo><mi mathvariant=\"double-struck\">R</mi><mo>×</mo><mo>⋯</mo><mo>×</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n = \\mathbb{R} \\times \\mathbb{R} \\times \\cdots \\times \\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>. But it doesn't cause any particular additional difficulty to allow the \"factors\" to be distinct.</p>",
        "id": 307452937,
        "sender_full_name": "Reid Barton",
        "timestamp": 1667366891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/Copy.20of.20a.20Pi.20type.3F/near/307452888\">said</a>:</p>\n<blockquote>\n<p>Ashley, are you just unsure about why Pi types are useful for modeling multidimensional vector spaces?</p>\n</blockquote>\n<p>No, but thanks for asking. When you state the question in that way it's actually pretty clear to me. However, what that reveals is that perhaps it is just a question of perspective and understanding (i.e. getting accustomed to) the particular nomenclature used in mathlib. I wasn't really thinking of 'finite product of metric spaces' as being analogous to 'multidimensional vector spaces' vis-a-vis Pi-types.</p>",
        "id": 307453472,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1667367280
    },
    {
        "content": "<blockquote>\n<p>I don't think there's a \"definition\" for the pi type itself in mathlib, so I'm not sure there's an easy way to browse the instances...</p>\n</blockquote>\n<p>Doc-gen currently has this list of pi instances internally, but discards them because it doesn't know where to show them. Do you have a suggestion for where they should be shown? We have the same problem for instances on <code>Prop</code>.</p>",
        "id": 307467042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667374811
    },
    {
        "content": "<p>Update: I've made <a href=\"https://github.com/leanprover-community/doc-gen/pull/172\">https://github.com/leanprover-community/doc-gen/pull/172</a> for lack of a better idea</p>",
        "id": 307481169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667381198
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs_demo/foundational_types.html#pi-types-code%CF%80-a--%CE%B1-%CE%B2-acode-or-codepi-a--%CE%B1-%CE%B2-acode-or-code-a--%CE%B1-%CE%B2-acode-or-code%CE%B1--%CE%B2code\">https://leanprover-community.github.io/mathlib_docs_demo/foundational_types.html#pi-types-code%CF%80-a--%CE%B1-%CE%B2-acode-or-codepi-a--%CE%B1-%CE%B2-acode-or-code-a--%CE%B1-%CE%B2-acode-or-code%CE%B1--%CE%B2code</a></p>",
        "id": 307577468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667409656
    },
    {
        "content": "<p>What a horrible URL</p>",
        "id": 307577486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667409662
    },
    {
        "content": "<p>Could this page also include <code>quot, quot.mk, quot.lift, quot.ind</code> in such a way that they are linked to by statements like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.exists_rep\">docs#quot.exists_rep</a></p>",
        "id": 307578173,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667409873
    },
    {
        "content": "<p>Lean can <code>#print</code> the type of these, so I assume they are accessible in doc-gen, just there is no home for them as they are super-duper builtin</p>",
        "id": 307578750,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667410039
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_eliminator, elab_strategy]</span>\n<span class=\"n\">builtin</span><span class=\"bp\">-</span><span class=\"n\">quotient</span><span class=\"bp\">-</span><span class=\"n\">type</span><span class=\"bp\">-</span><span class=\"kd\">constant</span> <span class=\"n\">quot.lift</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 307578769,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667410047
    },
    {
        "content": "<p>There's a command that introduces the quotient types that gets run in the prelude, and I guess it doesn't generate anything that docgen sees? <a href=\"https://github.com/leanprover-community/lean/blob/283f6ed8083ab4dd7c36300f31816c5cb793f2f7/library/init/core.lean#L109\">https://github.com/leanprover-community/lean/blob/283f6ed8083ab4dd7c36300f31816c5cb793f2f7/library/init/core.lean#L109</a></p>",
        "id": 307580343,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667410535
    },
    {
        "content": "<p>I think that command basically just adds the 4 declarations I mentioned to the environment, <a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/kernel/quotient/quotient.cpp#L73\">https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/kernel/quotient/quotient.cpp#L73</a> so they should be visible in the json output of the environment</p>",
        "id": 307582362,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667411096
    },
    {
        "content": "<p>I assume that doc-gen just ignores them at some point as they are the only declarations in mathlib for which <code>decl_olean</code> returns an empty string (as they have no actual source location), so doc-gen doesn't know where to put them</p>",
        "id": 307582528,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667411152
    },
    {
        "content": "<p>I'm actually not sure if they show up in the json output or not, the relevant code is<br>\n<a href=\"https://github.com/leanprover-community/doc-gen/blob/d74f0abd7a7f7ee2b22184cd870f748eeded496d/src/export_json.lean#L323\">https://github.com/leanprover-community/doc-gen/blob/d74f0abd7a7f7ee2b22184cd870f748eeded496d/src/export_json.lean#L323</a> which looks like it would fail for these decls, they are neither auto-generated not internal according to lean</p>",
        "id": 307584416,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667411678
    },
    {
        "content": "<p>Oh aha I think I see, <a href=\"https://github.com/leanprover-community/doc-gen/blob/d74f0abd7a7f7ee2b22184cd870f748eeded496d/src/export_json.lean#L319\">https://github.com/leanprover-community/doc-gen/blob/d74f0abd7a7f7ee2b22184cd870f748eeded496d/src/export_json.lean#L319</a> is what causes them to be skipped, the <code>in_current_file</code> check is simply that <code>decl_olean = \"\"</code> which is true for these decls, so they are skipped</p>",
        "id": 307584683,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667411754
    },
    {
        "content": "<p>I guess we can define an <code>in_current_file'</code> with a hard-coded list of special cases</p>",
        "id": 307585997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667412062
    },
    {
        "content": "<p>Hmm looks like I'm wrong again, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.in_current_file\">docs#environment.in_current_file</a> is correct now so I'm confused what happens to these declarations once more</p>",
        "id": 307588048,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667412493
    },
    {
        "content": "<p>Are they filtered out as autogenerated?</p>",
        "id": 307589082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667412786
    },
    {
        "content": "<p>No I tested that for <code>quot</code> and it wasn't autogenerated</p>",
        "id": 307589404,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667412869
    }
]