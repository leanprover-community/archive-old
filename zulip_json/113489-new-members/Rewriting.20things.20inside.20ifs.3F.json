[
    {
        "content": "<p>In this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">proof</span><span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span><span class=\"bp\">&lt;</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">))</span><span class=\"bp\">=</span><span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">proof</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't see why the rewrite shouldn't work. What am I missing? What is a good way to handle ifs (both in the conclusion and in the premises)?</p>\n<p>Thanks</p>",
        "id": 230744977,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616006416
    },
    {
        "content": "<p>Well for one, your theorem statement is about <code>nat</code>, but <code>proof</code> is about <code>int</code></p>",
        "id": 230745152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616006484
    },
    {
        "content": "<p><code>simp_rw proof</code> works after you fix that</p>",
        "id": 230745214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616006507
    },
    {
        "content": "<p>Oh, simp_rw seems exactly what I was looking for. Another tool for my toolbelt.</p>\n<p>Why doesn't rw behave like simp_rw?</p>",
        "id": 230745669,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616006680
    },
    {
        "content": "<p>Because the condition of an <code>if</code> statement has a dependent argument, the proof that this condition is decidable, that needs to be rewritten as well</p>",
        "id": 230745911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616006766
    },
    {
        "content": "<p><code>rw</code> doesn't handle this very well, it gives a <code>motive is not type correct</code> error in these cases</p>",
        "id": 230745970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616006792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Rewriting.20things.20inside.20ifs.3F/near/230745970\">said</a>:</p>\n<blockquote>\n<p><code>rw</code> doesn't handle this very well, it gives a <code>motive is not type correct</code> error in these cases</p>\n</blockquote>\n<p>That's exactly the error I was seeing when experimenting. Couldn't really understand it unfortunately</p>",
        "id": 230746157,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616006862
    },
    {
        "content": "<p>Thank you both for your answers <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 230746195,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616006876
    },
    {
        "content": "<p><code>simp_rw</code> has the same interface as <code>rw</code> but uses the proof strategy of <code>simp</code>, which is able to handle dependencies in some places (but may sometimes fail to rewrite where <code>rw</code> will work)</p>",
        "id": 230746200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616006877
    },
    {
        "content": "<p>Something weird is happening: <code>simp_rw</code> works correctly in the example posted above, and in another minimized example which I extracted with <code>extract_goal</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ttype</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">ty_bool</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_abs</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_true</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_false</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">t_true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upshift_cutoff</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">&lt;</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"bp\">$</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">t_false</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">cond</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upshift</span> <span class=\"o\">(</span><span class=\"n\">amt</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">amt</span> <span class=\"mi\">0</span> <span class=\"n\">t1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subst</span>  <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">idx</span> <span class=\"k\">then</span> <span class=\"n\">s</span> <span class=\"k\">else</span> <span class=\"n\">t_var</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift</span> <span class=\"mi\">1</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">t_false</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">cond</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_app1</span> <span class=\"o\">{</span><span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"n\">t2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1'</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_app2</span> <span class=\"o\">{</span><span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t2'</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">t2</span> <span class=\"n\">t2'</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_appabs</span> <span class=\"o\">{</span><span class=\"n\">T11</span> <span class=\"n\">t12</span> <span class=\"n\">v2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">T11</span> <span class=\"n\">t12</span><span class=\"o\">)</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">upshift</span> <span class=\"mi\">1</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"n\">t12</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_if_true</span> <span class=\"o\">{</span><span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t_true</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_if_false</span> <span class=\"o\">{</span><span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t_false</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t3</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_if</span> <span class=\"o\">{</span><span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t1'</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">eval</span>\n         <span class=\"o\">((</span><span class=\"n\">t_abs</span> <span class=\"n\">ty_bool</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">ty_bool</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"mi\">0</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t_true.t_app</span> <span class=\"n\">t_true</span><span class=\"o\">))</span>\n         <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">ty_bool</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)))))</span> <span class=\"o\">(</span><span class=\"n\">kk</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">eval</span> <span class=\"o\">((</span><span class=\"n\">t_abs</span> <span class=\"n\">ty_bool</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">ty_bool</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"mi\">0</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t_true.t_app</span> <span class=\"n\">t_true</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">ty_bool</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">kk</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"c1\">--works as expected</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>However, in the more complex example I'm actually trying to prove, with the same context and goal as the example I posted above, it fails with <code>simplify tactic failed to simplify</code> (apologies for the huge example, but minification makes the issue disappear):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ttype</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">ty_bool</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_abs</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_true</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_false</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">t_true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upshift_cutoff</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">&lt;</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"bp\">$</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">t_false</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">cond</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upshift</span> <span class=\"o\">(</span><span class=\"n\">amt</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">amt</span> <span class=\"mi\">0</span> <span class=\"n\">t1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subst</span>  <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">idx</span> <span class=\"k\">then</span> <span class=\"n\">s</span> <span class=\"k\">else</span> <span class=\"n\">t_var</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift</span> <span class=\"mi\">1</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">t_false</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">cond</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_app1</span> <span class=\"o\">{</span><span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"n\">t2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1'</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_app2</span> <span class=\"o\">{</span><span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t2'</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">t2</span> <span class=\"n\">t2'</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_appabs</span> <span class=\"o\">{</span><span class=\"n\">T11</span> <span class=\"n\">t12</span> <span class=\"n\">v2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">T11</span> <span class=\"n\">t12</span><span class=\"o\">)</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">upshift</span> <span class=\"mi\">1</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"n\">t12</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_if_true</span> <span class=\"o\">{</span><span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t_true</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_if_false</span> <span class=\"o\">{</span><span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t_false</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t3</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_if</span> <span class=\"o\">{</span><span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t1'</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">ctxtype</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lookup_list</span> <span class=\"o\">:</span> <span class=\"n\">ctxtype</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">head</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"n\">n</span>  <span class=\"o\">:=</span> <span class=\"n\">lookup_list</span> <span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">list.nil</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">in_ctx</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">:</span><span class=\"n\">ctxtype</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lookup_list</span> <span class=\"n\">ctx</span> <span class=\"n\">idx</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">ctxtype</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">ttype</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">typ_var</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"n\">x</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">in_ctx</span> <span class=\"n\">x</span> <span class=\"n\">T</span> <span class=\"n\">ctx</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">typ_abs</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"n\">T1</span> <span class=\"n\">t2</span> <span class=\"n\">T2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">typ</span> <span class=\"o\">(</span><span class=\"n\">T1</span><span class=\"o\">::</span><span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">t2</span> <span class=\"n\">T2</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">T1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ty_func</span> <span class=\"n\">T1</span> <span class=\"n\">T2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">typ_app</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"n\">t1</span> <span class=\"n\">T11</span> <span class=\"n\">T12</span> <span class=\"n\">t2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">t1</span> <span class=\"o\">(</span><span class=\"n\">ty_func</span> <span class=\"n\">T11</span> <span class=\"n\">T12</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">t2</span> <span class=\"n\">T11</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"n\">T12</span>\n<span class=\"bp\">|</span> <span class=\"n\">typ_true</span> <span class=\"o\">{</span><span class=\"n\">ctx</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">t_true</span> <span class=\"n\">ty_bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">typ_false</span> <span class=\"o\">{</span><span class=\"n\">ctx</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">t_true</span> <span class=\"n\">ty_bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">typ_if</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">cond</span> <span class=\"n\">ty_bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">l</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">r</span> <span class=\"n\">T</span>  <span class=\"bp\">-&gt;</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">T</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">typ</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subject_expansion_fails</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ctx</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">t'</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">t</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"bp\">∅</span><span class=\"o\">:</span><span class=\"n\">ctxtype</span><span class=\"o\">),</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">ty_bool</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">ty_bool</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t_true</span> <span class=\"n\">t_true</span><span class=\"o\">),</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">t_abs</span>  <span class=\"n\">ty_bool</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">ty_func</span> <span class=\"n\">ty_bool</span> <span class=\"n\">ty_bool</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">refine</span> <span class=\"n\">typ_abs</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">typ_var</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">a</span><span class=\"o\">:=</span> <span class=\"n\">eval.e_appabs</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">ty_bool</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">ty_bool</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">t_true.t_app</span> <span class=\"n\">t_true</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">upshift</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">t_true.t_app</span> <span class=\"n\">t_true</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">ty_bool</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"mi\">0</span><span class=\"o\">))))</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n\n\n    <span class=\"n\">repeat</span><span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">subst</span> <span class=\"n\">at</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;|&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"n\">upshift</span> <span class=\"n\">at</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;|&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">at</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;|&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">b</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">kk</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">kk</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"c1\">--error here</span>\n\n\n    <span class=\"n\">rw</span> <span class=\"n\">subst</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a_ᾰ</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a_ᾰ</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a_ᾰ_1</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a_ᾰ_1_ᾰ</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230832960,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616059106
    },
    {
        "content": "<p>I can workaround the bug by extracting to a lemma and using that, but this behavior seems weird to me</p>",
        "id": 230833192,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616059237
    },
    {
        "content": "<p>Your mistake can be easily spotted if you use the infoview in VS code (and if you know what to look for -- this is a common slip ;-) ) and has nothing to do with Lean weirdness. Clicking on the <code>0 &lt; 1</code> within the <code>ite</code> shows that it's an inequality of integers, and clicking on the one on <code>kk</code> shows that it's an inequality of naturals. So you can fix with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">kk</span><span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">kk</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 230834705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616060043
    },
    {
        "content": "<p>PS <code>    have kk: ((0 : ℤ) &lt;1)=true := by simp [zero_lt_one],</code></p>",
        "id": 230834859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616060130
    },
    {
        "content": "<p>PPS the whole point of introducing those weird hard-to-type <code>ᾰ</code> characters was to encourage users to name their own variables, users aren't supposed to be putting them in code.</p>",
        "id": 230835025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616060215
    },
    {
        "content": "<p>Thanks for the help. I have another question: Why does the behavior differ when I extract the lemma? Does lean automatically try to figure out the right kind of 0 somehow, which differs when the lemma is extracted?</p>\n<p>Regarding <code>ᾰ</code>, I'm trying to avoid it in new code. However, I have a large file that used autogenerated names (back when they used to be <code>a</code>) and it isn't really practical for me to rewrite it all.</p>",
        "id": 230838963,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616062342
    },
    {
        "content": "<p>Yes, Lean has a \"figure out which zero it is\" thing going on, it's called typeclass resolution applied to the class <code>has_zero.zero</code>. However, in contrast to most other pieces of notation, numerals have this \"default type\" of nat. Some of us would love to see the back of this, and if we had our way then your version of <code>kk</code> would simply fail with the error \"I don't know which 0 you're talking about\". But I think the designers had their reasons for this default to nat thing. All I see is the confusion it causes ;-)</p>",
        "id": 230839235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616062487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"379013\">Guilherme Espada</span> <a href=\"#narrow/stream/113489-new-members/topic/Rewriting.20things.20inside.20ifs.3F/near/230838963\">said</a>:</p>\n<blockquote>\n<p>Regarding <code>ᾰ</code>, I'm trying to avoid it in new code. However, I have a large file that used autogenerated names (back when they used to be <code>a</code>) and it isn't really practical for me to rewrite it all.</p>\n</blockquote>\n<p>Is it practical for you to downgrade to an older version of lean? Or do you need the newest version of mathlib?</p>",
        "id": 230839564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616062671
    },
    {
        "content": "<p>Not really, the version I was using before had a bunch of broken things in visual studio. Besides, I really don't mind having to use ᾰ every now and then for old proofs, and I already went through and replaced the <code>a</code>s with <code>ᾰ</code> where needed. So at this point, I really wouldn't gain anything from downgrading.</p>",
        "id": 230841275,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616063540
    }
]