[
    {
        "content": "<p>Why can't lean <code>infer instance</code> in the following cases?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">⊕</span> <span class=\"n\">I</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>error : <code>tactic.mk_instance failed to generate instance for fintype (I ⊕ I)</code></p>",
        "id": 247083488,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627145170
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#resetI\">tactic#resetI</a></p>",
        "id": 247084257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627146339
    }
]