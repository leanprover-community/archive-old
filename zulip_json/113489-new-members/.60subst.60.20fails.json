[
    {
        "content": "<p>Tactic <code>subst h₁</code> fails with error <em>\"hypothesis 'h₁' is not of the form (x = t) or (t = x)\"</em>,<br>\ndespite <code>h₁</code> being <code>a = y (classical.some h)</code>. Also, <code>rw h₁ at h</code> creates a new hypothesis instead of updating the existing hypothesis <code>h</code>. Is this a bug with <code>subst</code> and <code>rw</code>, or am I doing something wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">{</span><span class=\"n\">z₀</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"n\">z₀</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h₀</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some_spec</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- subst h₁,</span>\n  <span class=\"c1\">-- rw h₁ at h,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Also, what is the best way to eliminate an existential quantifier when the goal is not a proposition? I was using <code>classical.some_spec</code> followed by <code>subst</code> so far, but is there a better way?</p>",
        "id": 263728798,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1638648211
    },
    {
        "content": "<p>All of this has to do with the fact that you're constructing data. There are ways out but it's a bit painful. Why do you even need to rewrite here? What are you trying to do?</p>",
        "id": 263729168,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638648729
    },
    {
        "content": "<p>If this is meant to count the number of time you need to apply <code>y</code> to <code>z</code> to get <code>x</code>, this is not going to work because <code>y</code> might well exchange two elements which are not <code>x</code>.</p>",
        "id": 263729183,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638648789
    },
    {
        "content": "<p>You may try using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> instead.</p>",
        "id": 263729188,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638648809
    },
    {
        "content": "<p>Doing <code>cases h₁</code> reveals the underlying problem: \"left-hand-side depends on right-hand-side\"</p>",
        "id": 263729235,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638648844
    },
    {
        "content": "<p>It looks like you're trying to define a function that gives how many times you need to iterate <code>y</code> to get a particular value, but it's not necessarily true that every <code>a</code> is actually some nth iterate of <code>y</code> applied to <code>x</code>.</p>",
        "id": 263729428,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638649199
    },
    {
        "content": "<p>That was a simplified use case just to show the issue. Here is the full signature:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">exh</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I am trying to implement a function that converts an arbitrary type to a natural number, as long as some conditions are satisfied. But it seems that dealing with existential quantifiers while constructing data is not so straightforward.</p>",
        "id": 263729737,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1638649633
    },
    {
        "content": "<p>You might consider a definition like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.lattice</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and then proving it has properties that you expect given additional hypotheses. (<em>Edit:</em> sent this right as your last message appeared.)</p>",
        "id": 263729796,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638649688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/.60subst.60.20fails/near/263728798\">said</a>:</p>\n<blockquote>\n<p>Also, what is the best way to eliminate an existential quantifier when the goal is not a proposition? I was using <code>classical.some_spec</code> followed by <code>subst</code> so far, but is there a better way?</p>\n</blockquote>\n<p>I usually use <code>classical.some_spec</code> for this, but you can't always expect to be able to <code>subst</code> afterwards since it depends on the proof of a <code>Prop</code> that can include the variable.</p>",
        "id": 263729909,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638649906
    },
    {
        "content": "<p>For the full signature, this is how I'd organize it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.lattice</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">to_nat</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">Z</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">lemma</span> <span class=\"n\">f_equiv</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">exh</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">to_nat</span> <span class=\"n\">N</span> <span class=\"n\">Z</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 263730141,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638650185
    },
    {
        "content": "<p>or maybe just include <code>to_nat</code> in the definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">lemma</span> <span class=\"n\">f_equiv</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">exh</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">Z</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">},</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 263730213,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638650284
    },
    {
        "content": "<p>But the point is that you don't really need to hypotheses to define <em>some</em> function. You just need them to prove it does what you expect the definition to do.</p>",
        "id": 263730239,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638650344
    },
    {
        "content": "<p>This approach looks too low-level. I suggest <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.of_bijective\">docs#equiv.of_bijective</a>.</p>",
        "id": 263730855,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638651303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Good call, <code>Inf</code> was too hard to work with.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">lemma</span> <span class=\"n\">f_equiv</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">exh</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">Z</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"n\">equiv.of_bijective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">m'</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">wlog</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">m'</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">le_iff_exists_add.mp</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">function.iterate_add</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hi</span> <span class=\"o\">:=</span> <span class=\"n\">function.injective.iterate</span> <span class=\"n\">inj</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">function.iterate_succ_apply'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">exh</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hi.symm</span> <span class=\"n\">rfl</span><span class=\"o\">),</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ind</span> <span class=\"o\">{</span><span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">S</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">Z</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span><span class=\"o\">}</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">m</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">use</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">function.iterate_succ_apply'</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263732362,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638653228
    },
    {
        "content": "<p>That should be a <code>def</code> not a <code>lemma</code></p>",
        "id": 263733104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638654131
    },
    {
        "content": "<p>Is it possible to build the noncomputable one out of the computer version, by filling these sorries?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f_equiv</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ind_Z</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hZ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">)),</span> <span class=\"n\">ind</span> <span class=\"n\">P</span> <span class=\"n\">Z</span> <span class=\"n\">hZ</span> <span class=\"n\">hS</span> <span class=\"bp\">=</span> <span class=\"n\">hZ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ind_S</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hZ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n    <span class=\"n\">ind</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hZ</span> <span class=\"n\">hS</span> <span class=\"bp\">=</span> <span class=\"n\">hS</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hZ</span> <span class=\"n\">hS</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">nat.succ</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ind_Z</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">function.iterate_succ_apply'</span><span class=\"o\">,</span> <span class=\"n\">ind_S</span><span class=\"o\">,</span> <span class=\"n\">x_ih</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">plift.down</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">ind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">plift</span> <span class=\"bp\">$</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">plift.up</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">plift.up</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ind_Z</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">replace</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">plift.down</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ind_S</span><span class=\"o\">,</span> <span class=\"n\">function.iterate_succ_apply'</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f_equiv_nc</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">exh</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">Z</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"n\">f_equiv</span> <span class=\"n\">N</span> <span class=\"n\">Z</span> <span class=\"n\">S</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">hZ</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"n\">hZ</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">hZ</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263734718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638656085
    },
    {
        "content": "<p>There is no way to computably determine whether <code>n : N</code> is <code>Z</code> or not.</p>",
        "id": 263737474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638660103
    },
    {
        "content": "<p>Is this because you have an induction principle but not a recursion principle?</p>",
        "id": 263737599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638660286
    },
    {
        "content": "<p>Recursion lets me define a bool-valued <code>is_zero</code></p>",
        "id": 263737610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638660318
    },
    {
        "content": "<p>Yes. Specifically, computationally <code>exh</code>, <code>inj</code>, <code>ind</code> have no content because they are propositions, and obviously what's left is not enough to extract any data from <code>n : N</code>.</p>",
        "id": 263737617,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638660349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/.60subst.60.20fails/near/263737474\">said</a>:</p>\n<blockquote>\n<p>There is no way to computably determine whether <code>n : N</code> is <code>Z</code> or not.</p>\n</blockquote>\n<p>I'm not sure what you mean by \"computably\" here, in my example the <code>sorry</code>s can be noncomputable.</p>",
        "id": 263737621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638660359
    },
    {
        "content": "<p>Oh, well in that case, of course it is possible in principle (because Kyle already showed how to prove that <code>ℕ ≃ N</code>). I guess another way to do it would be to define a relation <code>is_ind : \\Pi (n : N) (x : P n), Prop</code> which is going to be the graph of <code>ind</code> and then prove using induction that there is a unique <code>x</code> with <code>is_ind n x</code> for each <code>n : N</code>.</p>",
        "id": 263737880,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638660776
    },
    {
        "content": "<p>To define the relation you could use an inductive proposition with constructors <code>is_ind Z hZ</code> and <code>is_ind n x -&gt; is_ind (S n) (hS n x)</code>, or the corresponding impredicative definition</p>",
        "id": 263737943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638660875
    }
]