[
    {
        "content": "<p>Continuing to work through TPiL, <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#equality\">section 4.2</a> lists a bunch of <code>int</code> lemmas that all seem to be recognized just fine in 3.12.0, but these ones aren't recognized as of 3.13.0:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_add_self</span><span class=\"o\">,</span> <span class=\"n\">add_neg_self</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">left_distrib</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">right_distrib</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>From the <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/changes.md#v3130c-16-may-2020\">changelog</a> it seems like this is due to <a href=\"https://github.com/leanprover-community/lean/pull/229/files\">#229</a>, but I can't find mention of some of those lemmas (such as <code>neg_add_self</code>) in the diff for that PR... in any case, prefacing all the lemma names with <code>int.</code> doesn't fix that example in 3.13.0; what other changes are needed for this example?</p>",
        "id": 206106233,
        "sender_full_name": "Sam Estep",
        "timestamp": 1596691640
    },
    {
        "content": "<p>What I've found so far</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add_zero</span> <span class=\"n\">a</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">zero_add</span> <span class=\"n\">a</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span> <span class=\"n\">a</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span> <span class=\"n\">a</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">sub_self</span> <span class=\"n\">a</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mul_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mul_sub</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">sub_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Errors -/</span>\n\n<span class=\"c1\">-- these would come from the `add_group ℤ` instance (which comes from the `comm_ring ℤ` instance)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">neg_add_self</span> <span class=\"n\">a</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">add_neg_self</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add_left_neg</span> <span class=\"n\">a</span> <span class=\"c1\">-- the one used in the `comm_ring ℤ` instance</span>\n\n<span class=\"c1\">-- these would come from `distrib ℤ` (which comes from the `comm_ring ℤ` instance)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">mul_add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">left_distrib</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">add_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">right_distrib</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n\n<span class=\"c1\">-- alternatives used in the instance `comm_ring ℤ`</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">distrib_left</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">distrib_right</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n</code></pre></div>\n\n\n<p>So most of them are there in one way or another. What remains is</p>\n<ul>\n<li><code>add_neg_self</code> - Not a group axiom in mathlib, since it can be proven from the others. Which is probably why there isn't an <code>int.</code> version</li>\n<li><code>mul_add</code>,<code>add_mul</code>, <code>left_distrib</code> and <code>right_distrib</code> are names from <code>distrib</code>, but there are similar ones from <code>int.</code></li>\n</ul>",
        "id": 206106653,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1596692205
    },
    {
        "content": "<p>Did they get moved into mathlib?</p>",
        "id": 206107749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596693875
    },
    {
        "content": "<p>Yeah. If you <code>import data.int.basic</code> you get all of them and the original example works.</p>",
        "id": 206107770,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1596693919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> Cool, thanks! That seems to mostly work; but <code>mul_add</code>, <code>add_mul</code>, <code>mul_sub</code>, and <code>sub_mul</code> seem to still be absent (same for <code>ℕ</code> after importing <code>data.nat.basic</code> in the example at the beginning of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-sections\">TPiL section 6.2</a>)</p>",
        "id": 206362787,
        "sender_full_name": "Sam Estep",
        "timestamp": 1596918309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308256\">@Sam Estep</span> </p>\n<p>I think Jeremy switched TPIL's examples (and testing) to use the community web editor, which has mathlib available. Those lemmas are present if your import mathlib, so all the examples compile fine now.</p>",
        "id": 206379159,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1596949088
    },
    {
        "content": "<p>Although TPiL probably now needs to have a paragraph talking about community lean, and the links for installation should probably go to leanprover-community and not leanprover.</p>",
        "id": 206379223,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1596949237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> That would make sense... but I thought that I already have <code>mathlib</code> installed for my local project? For instance I have this in my <code>leanpkg.toml</code> file:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">dependencies</span><span class=\"o\">]</span>\n<span class=\"n\">mathlib</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">git</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;https://github.com/leanprover-community/mathlib&quot;</span><span class=\"o\">,</span> <span class=\"n\">rev</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;b5baf5559ec648925d987c932bde47ebc7df87c9&quot;</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>And when I hover over the <code>import data.nat.basic</code> in my file it says this:</p>\n<blockquote>\n<p>imported file '/home/sam/sandbox/my_project/_target/deps/mathlib/src/data/nat/basic.lean' uses sorry</p>\n</blockquote>\n<p>so it seems like it's already present, but I'm still getting \"unknown identifier 'add_mul'\"</p>",
        "id": 206406160,
        "sender_full_name": "Sam Estep",
        "timestamp": 1596997478
    },
    {
        "content": "<p>Remove all oleans in project and use leanproject to get new ones? You shouldn't have any errors at all in mathlib files</p>",
        "id": 206414069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597011584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think my local setup might have gotten messed up when I upgraded from Ubuntu 18.04 to 20.04 the other day... I'm trying what you mentioned by starting a new project:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ leanproject new my_project\nTraceback (most recent call last):\n  File &quot;/home/sam/.local/bin/leanproject&quot;, line 7, in &lt;module&gt;\n    from mathlibtools.leanproject import safe_cli\nModuleNotFoundError: No module named &#39;mathlibtools&#39;\n</code></pre></div>\n\n\n<p>The issue seems to persist even after following <a href=\"https://leanprover-community.github.io/install/debian_details.html\">these instructions</a> (including the <code>pipx install mathlibtools</code> at the bottom)</p>",
        "id": 206415417,
        "sender_full_name": "Sam Estep",
        "timestamp": 1597013928
    },
    {
        "content": "<p>Hmm weird, I was able to resolve the <code>pipx</code> issue by replacing it with <code>python3 -m pip install mathlibtools</code></p>",
        "id": 206416067,
        "sender_full_name": "Sam Estep",
        "timestamp": 1597015073
    },
    {
        "content": "<p>That fixed it <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>! I must have just had an outdated mathlib version (I guess commit <code>b5baf5559ec648925d987c932bde47ebc7df87c9</code> used <code>sorry</code> in <code>data.nat.basic</code>?)</p>",
        "id": 206416130,
        "sender_full_name": "Sam Estep",
        "timestamp": 1597015178
    },
    {
        "content": "<p>No, we don't have commits using sorry in mathlib.</p>",
        "id": 206416205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597015240
    },
    {
        "content": "<p>You may have had conflicting lean and olean files.</p>",
        "id": 206416215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597015262
    },
    {
        "content": "<p>So regarding what Shing Tik Lam mentioned about TPiL using mathlib, is there a way I can import mathlib in such a way as to get <code>make leantest</code> to pass? It looks like it's not finding mathlib currently:</p>\n<blockquote>\n<p>/home/sam/github/leanprover/theorem_proving_in_lean/_build/leantest/quantifiers_and_equality_51.lean:1:0: error: file 'data/real/basic' not found in the search path</p>\n</blockquote>",
        "id": 206416370,
        "sender_full_name": "Sam Estep",
        "timestamp": 1597015535
    },
    {
        "content": "<p>Ah apparently I can just <a href=\"https://github.com/leanprover/theorem_proving_in_lean/pull/105/files\">do <code>leanproject new</code> in the <code>theorem_proving_in_lean</code> directory</a>; is that how one is meant to do it? Or is there a way to install mathlib globally?</p>",
        "id": 206416740,
        "sender_full_name": "Sam Estep",
        "timestamp": 1597016183
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/leanproject.html#global-mathlib-install\">https://leanprover-community.github.io/leanproject.html#global-mathlib-install</a></p>",
        "id": 206420091,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597022002
    },
    {
        "content": "<p>But the real answer is that TPIL was not designed to use mathlib.</p>",
        "id": 206420102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597022027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/int.20lemma.20changes.20between.203.2E12.20and.203.2E13/near/206420102\">said</a>:</p>\n<blockquote>\n<p>But the real answer is that TPIL was not designed to use mathlib.</p>\n</blockquote>\n<p>Sure, that makes sense; I was just intrigued once I figured out that there was a way to make all the tests pass with the recent update of TPiL to Lean 3.18.4, since it seemed exceedingly unlikely that Jeremy was able to achieve that without being able to run them all as a batch (so I assume he uses <code>leanproject global-install</code> since there is no <code>leanproject</code> in TPiL)</p>",
        "id": 206421529,
        "sender_full_name": "Sam Estep",
        "timestamp": 1597024680
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 206453440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597061519
    }
]