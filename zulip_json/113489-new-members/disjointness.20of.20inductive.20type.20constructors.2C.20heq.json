[
    {
        "content": "<p>I'm trying to prove something very simple based on the disjointness of inductive type constructors. The strategy I'd use that works for normal equality doesn't seem to work when I have terms with heterogeneous equality. Is there a way to do this? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">x1</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">X</span> <span class=\"n\">n</span>\n <span class=\"bp\">|</span> <span class=\"n\">x2</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">X</span> <span class=\"n\">n</span>\n\n <span class=\"kn\">lemma</span> <span class=\"n\">xx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">x1</span> <span class=\"n\">m</span> <span class=\"bp\">==</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">x2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"k\">begin</span>\n <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">contradiction</span> <span class=\"c1\">-- this would work for ∀ m, ¬ (X.x1 m  = X.x2 m)</span>\n <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204063614,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594892666
    },
    {
        "content": "<p>I suspect this is not provable.</p>",
        "id": 204071942,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594899510
    },
    {
        "content": "<p>Is this because  you suspect it's not true? Or is it just a matter of engineering a variation of <code>meta def contradiction : tactic unit := ...</code> in the core library that works with <code>heq</code> too?</p>",
        "id": 204115389,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594920353
    },
    {
        "content": "<p>I think it is not true in all models</p>",
        "id": 204116611,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594920912
    },
    {
        "content": "<p>I'm still confused about how this is not true if inductive type constructors are disjoint. If not true in all models, maybe at least true in domain I'm working with? Are there additional hypotheses I can add to allow me to prove, e.g., the bottom example?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">):</span> <span class=\"n\">X</span> <span class=\"n\">b</span>\n <span class=\"bp\">|</span> <span class=\"n\">mk</span>  <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">):</span> <span class=\"n\">X</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">example</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">tt</span> <span class=\"bp\">==</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">heq_iff_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">tt</span> <span class=\"bp\">==</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 204860887,
        "sender_full_name": "Kris Brown",
        "timestamp": 1595543512
    },
    {
        "content": "<p>Equality of types is a really poorly behaved thing. Are you sure you want to do what you're doing? If I ever see a goal with <code>==</code> in then I stop what I'm doing and go back to before it appeared.</p>",
        "id": 204862512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595544864
    },
    {
        "content": "<p>You know nat = int is undecidable, right?</p>",
        "id": 204862536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595544896
    },
    {
        "content": "<p>Yes, that makes sense, though this felt like a much more restricted setting than type equality in general. I'll first attempt to redesign things to not use this pattern, though.</p>",
        "id": 204863621,
        "sender_full_name": "Kris Brown",
        "timestamp": 1595545639
    },
    {
        "content": "<p>A proof of <code>X.x1 m == X.x2 n</code> is basically a proof <code>h</code> that <code>X m = X n</code> and a proof that if you rewrite one side of the original <code>==</code> across <code>h</code> then they are equal.</p>",
        "id": 204867391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595549311
    },
    {
        "content": "<p>And I'm pretty sure there is no reason that different <code>X m</code> and <code>X n</code> couldn't be identified in a way that makes an <code>X.x1</code> equal to an <code>X.x2</code>.</p>",
        "id": 204867503,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595549425
    },
    {
        "content": "<p>I mean we can just imagine that <code>X n = bool</code> for all <code>n</code>, but we identify <code>x1</code> and <code>x2</code> with <code>ff</code> and <code>tt</code> differently depending on the parity of <code>n</code>. That seems consistent to me.</p>",
        "id": 204867529,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595549479
    },
    {
        "content": "<p>In relation to your other question, the point is that a hypothesis <code>X m = X n</code> is basically worthless; but if you actually know that <code>m = n</code>, you're in good shape.</p>",
        "id": 204867826,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595549820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312852\">@Kris Brown</span> I remember it was somewhat big news when it was discovered (in Agda, I think) that injectivity of inductive type families is inconsistent. There is a lean example of this floating around somewhere</p>",
        "id": 204877420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595563212
    },
    {
        "content": "<p>The proof is embarrasingly simple:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">cantor_injective</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 204877510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595563368
    }
]