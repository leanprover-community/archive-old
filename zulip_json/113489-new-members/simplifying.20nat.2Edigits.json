[
    {
        "content": "<p>Is there a way to automatically simplify the digits of a given number? like to simplify <code>nat.digits 10 123</code> into <code>[3, 2, 1]</code>. it uses some <code>digits_aux</code> helper which seems to cause problems when i just <code>simp</code></p>",
        "id": 212137448,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601678893
    },
    {
        "content": "<p>Is this what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.digits</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">123</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 212138690,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601679841
    },
    {
        "content": "<p>hmm, close enough. I had (nat.digits 10 123) inside an expression, and i wanted it to simplify that</p>",
        "id": 212138855,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601679962
    },
    {
        "content": "<p>is <code>norm_num</code> supposed to also simplify subexpressions? or just when (nat.digits 10 123) is the whole thing</p>",
        "id": 212138955,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601680011
    },
    {
        "content": "<p>i guess to give specific code, i was attempting to prove <code>(nat.digits 10 153846).head = 6 ∧ of_digits 10 ((nat.digits 10 153846).tail.concat 6) = 4 * 153846</code></p>",
        "id": 212139019,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601680078
    },
    {
        "content": "<p>i got <code>norm_num</code> to do it, but only if i wrote some lemma to help break down <code>(nat.digits 10 x)</code> and passed in to <code>norm_num</code></p>",
        "id": 212139078,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601680114
    },
    {
        "content": "<p>but i feel like i am just making up random stuff and seeing if <code>norm_num</code> can then solve the problem, rather than intelligently crafting a solution</p>",
        "id": 212139094,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601680133
    },
    {
        "content": "<p>Yeah, I'm not sure what the best way is myself. I can't get <code>norm_num</code> to prove <code>nat.digits 10 3846 = [6,4,8,3]</code> (or anything else with more than 3 digits) at the moment.</p>\n<p>It could be that we're missing some <code>simp</code> lemmas for <code>nat.digits</code>.</p>",
        "id": 212139782,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601680648
    },
    {
        "content": "<p>ok. if I define this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">digit_recursion</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat.sub_add_cancel</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>and pass it to norm_num, then it succeeds at simplifying. it seems to stumble because you have to rewrite 153846 as (153846 - 1) + 1 to apply the lemmas in the library, and i'm guessing that step is omitted because it isn't getting simpler. so maybe something like this should be in the digits lib</p>",
        "id": 212139925,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601680750
    },
    {
        "content": "<p><del>Yes, that seems like it should be in <code>data/nat/digits</code> (generalized to base <code>b</code>,  of course).</del></p>",
        "id": 212140105,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601680922
    },
    {
        "content": "<p>Actually, that seems very close to <code>digits_aux_def</code>, so there should be some way to use that instead, <del>though I'm not having any luck at the moment.</del></p>\n<p>Edit: see below</p>",
        "id": 212140981,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601681832
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.digits</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">153846</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">nat.digits</span><span class=\"o\">,</span> <span class=\"n\">nat.digits_aux_def</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux'</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">615384</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">nat.digits</span><span class=\"o\">,</span> <span class=\"n\">nat.digits_aux_def</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">153846</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">nat.of_digits</span> <span class=\"mi\">10</span> <span class=\"o\">((</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">153846</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tail.concat</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"mi\">153846</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aux</span><span class=\"o\">,</span> <span class=\"n\">list.head</span><span class=\"o\">],</span> <span class=\"o\">},</span> <span class=\"c1\">-- can also use  norm_num [nat.digits, nat.digits_aux_def],</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">aux</span><span class=\"o\">,</span> <span class=\"n\">aux'</span><span class=\"o\">,</span> <span class=\"n\">nat.of_digits_digits</span><span class=\"o\">],</span> <span class=\"o\">},</span> <span class=\"c1\">-- not sure how to prove this cleanly without aux and aux'</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- basically the same as nat.digits_aux_def</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">digit_recursion</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.digits_aux_def</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212141331,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601682246
    },
    {
        "content": "<p>interesting... so I ended up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">digit_recursion</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat.sub_add_cancel</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">153846</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"bp\">∧</span> <span class=\"n\">of_digits</span> <span class=\"mi\">10</span> <span class=\"o\">((</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">153846</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tail.concat</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"mi\">153846</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">digit_recursion</span><span class=\"o\">,</span> <span class=\"n\">of_digits</span><span class=\"o\">]</span>\n</code></pre></div>\n\n<p>So with <code>digit_recursion</code> the whole thing is handled by <code>norm_num</code>. I don't really know why <code>digits_aux_def</code> doesn't do this in conjunction with <code>norm_num</code>. Maybe the condition that <code>1 &lt; 10</code> is complicated enough that <code>norm_num</code> doesn't automate a reduction that requires it?</p>",
        "id": 212150069,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601694457
    },
    {
        "content": "<p>i'm not sure what to conclude, because it does seem convenient for <code>norm_num</code> to be able to handle this whole expression, yet it doesn't seem like something specific to base 10 belongs in the base library,  yet it seems like without something 10-specific you essentially have to unpack the digits library and use lots of different <code>nat.digits_aux_def</code>, <code>nat.of_digits_digits</code>, etc lemmas</p>",
        "id": 212150198,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601694612
    },
    {
        "content": "<p>I think the digits library has a bit of a problem - the core definition also works with base 0 and base 1, but those ways of having are basically totally different from the others, so all these theorems only work with a base &gt; 1, which then causes trouble with things like, you can't say that <code>simp</code> should operate only for bases that are greater than 1, IIUC</p>",
        "id": 212150229,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601694686
    },
    {
        "content": "<p>Well, I wouldn't say that my attempt is anything near the final word on <code>norm_num</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> any thoughts?</p>",
        "id": 212150473,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601695039
    },
    {
        "content": "<p>you can do a lot better than this with a dedicated tactic/subcomponent of <code>norm_num</code></p>",
        "id": 212150563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601695181
    },
    {
        "content": "<p>I agree with Kevin's criticism of the digits library allowing base 0 and 1. That was a flat out mistake on my part. It's useless generality. If someone wants to change it I think that could be valuable!</p>",
        "id": 212151701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601697280
    },
    {
        "content": "<p>well those natural numbers aren't going away</p>",
        "id": 212151756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601697393
    },
    {
        "content": "<p>the only thing that should change is a tacit assumption that the other case doesn't matter</p>",
        "id": 212151760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601697427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> I think maybe we want to know how to add and mul numbers written in base <code>n</code>. In other words</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">digits.add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">digits_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">digits</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">digits.add</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"n\">n</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 212152007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601697934
    },
    {
        "content": "<p>It's a bit overkill but here's a relatively efficient digit prover:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.digits</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat.digits_def'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">nat.digits</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">dec_trivial</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">dec_trivial</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">nat.digits_aux_def</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">digits_succ</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">,</span> <span class=\"n\">m0</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">mul_pos</span> <span class=\"n\">b0</span> <span class=\"n\">m0</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">,</span> <span class=\"n\">n0</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.div_mod_unique</span> <span class=\"n\">b0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat.digits_def'</span> <span class=\"n\">b2</span> <span class=\"n\">n0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">digits_one</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nb</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">,</span> <span class=\"n\">n0</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.digits_def'</span> <span class=\"n\">b2</span> <span class=\"n\">n0</span><span class=\"o\">,</span> <span class=\"n\">nat.mod_eq_of_lt</span> <span class=\"n\">nb</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">nat.div_eq_zero_iff</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">nb</span><span class=\"o\">,</span> <span class=\"n\">nat.digits_zero</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval_digits_aux</span> <span class=\"o\">(</span><span class=\"n\">eb</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">en</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">ic</span> <span class=\"bp\">←</span> <span class=\"n\">mk_instance_cache</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">er</span> <span class=\"bp\">←</span> <span class=\"n\">expr.of_nat</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pr</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">norm_num.prove_lt_nat</span> <span class=\"n\">ic</span> <span class=\"n\">er</span> <span class=\"n\">eb</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pn0</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">norm_num.prove_pos</span> <span class=\"n\">ic</span> <span class=\"n\">en</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">%%</span><span class=\"n\">en</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">digits_one</span> <span class=\"bp\">%%</span><span class=\"n\">eb</span> <span class=\"bp\">%%</span><span class=\"n\">en</span> <span class=\"bp\">%%</span><span class=\"n\">pn0</span> <span class=\"bp\">%%</span><span class=\"n\">pr</span><span class=\"o\">))</span>\n  <span class=\"k\">else</span> <span class=\"k\">do</span>\n    <span class=\"n\">em</span> <span class=\"bp\">←</span> <span class=\"n\">expr.of_nat</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pe</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">norm_num.derive</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">er</span> <span class=\"bp\">+</span> <span class=\"bp\">%%</span><span class=\"n\">eb</span> <span class=\"bp\">*</span> <span class=\"bp\">%%</span><span class=\"n\">em</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">eval_digits_aux</span> <span class=\"n\">em</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">list.cons</span> <span class=\"n\">ℕ</span> <span class=\"bp\">%%</span><span class=\"n\">er</span> <span class=\"bp\">%%</span><span class=\"n\">el</span><span class=\"o\">),</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">digits_succ</span> <span class=\"bp\">%%</span><span class=\"n\">eb</span> <span class=\"bp\">%%</span><span class=\"n\">en</span> <span class=\"bp\">%%</span><span class=\"n\">em</span> <span class=\"bp\">%%</span><span class=\"n\">er</span> <span class=\"bp\">%%</span><span class=\"n\">el</span> <span class=\"bp\">%%</span><span class=\"n\">pe</span> <span class=\"bp\">%%</span><span class=\"n\">pr</span> <span class=\"bp\">%%</span><span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval_digits</span> <span class=\"o\">(</span><span class=\"n\">eb</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">en</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat.digits_zero</span> <span class=\"bp\">%%</span><span class=\"n\">eb</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">en</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">eval_digits_aux</span> <span class=\"n\">eb</span> <span class=\"n\">b</span> <span class=\"n\">en</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">and.left</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">],</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">norm_digits</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"bp\">%%</span><span class=\"n\">eb</span> <span class=\"bp\">%%</span><span class=\"n\">en</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">el'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">expr.to_nat</span> <span class=\"n\">eb</span><span class=\"o\">,</span>\n  <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">expr.to_nat</span> <span class=\"n\">en</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">eval_digits</span> <span class=\"n\">eb</span> <span class=\"n\">b</span> <span class=\"n\">en</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">unify</span> <span class=\"n\">el</span> <span class=\"n\">el'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">123</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_digits</span>\n</code></pre></div>",
        "id": 212152395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601698610
    },
    {
        "content": "<p>will you PR it? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 212153618,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601701244
    },
    {
        "content": "<p>wow, it is cool that you could create <code>norm_digits</code>! i will have to learn more about creating tactics, a lot of the stuff like <code>meta def</code>, the whole <code>if...then</code> construct, backticks, the <code>%%</code> operator, etc I did not recognize.</p>",
        "id": 212157758,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601709107
    },
    {
        "content": "<p>All this is explained in <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a></p>",
        "id": 212160403,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601713518
    },
    {
        "content": "<p>PR'd as <a href=\"https://github.com/leanprover-community/mathlib/issues/4451\">#4451</a>.</p>",
        "id": 212364691,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601937155
    },
    {
        "content": "<p>Also PR'd as <a href=\"https://github.com/leanprover-community/mathlib/issues/4452\">#4452</a> <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 212365177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601937562
    },
    {
        "content": "<p>I prefer what you did --- put the tactic in <code>nat.digits</code> directly.</p>",
        "id": 212365297,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601937670
    },
    {
        "content": "<p>I'll close mine, and copy across some doc-strings.</p>",
        "id": 212365306,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601937680
    },
    {
        "content": "<p>I also fixed a thing where the tactic hangs if you try to normalize base 1</p>",
        "id": 212365339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601937714
    },
    {
        "content": "<p>The interface is still pretty primitive, so I've opted to leave it as a non-interactive tactic</p>",
        "id": 212365490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601937799
    },
    {
        "content": "<p>if it was integrated into <code>norm_num</code> it would be able to simplify <code>nat.digits</code> expressions anywhere in the target, instead of assuming it is the lhs of the goal</p>",
        "id": 212365534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601937834
    },
    {
        "content": "<p>Oh, didn't see you message. I added the interactive connectivity as a suggestion.</p>",
        "id": 212365667,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601937926
    },
    {
        "content": "<p>eh it's fine, I guess that helps with documentation and the like</p>",
        "id": 212365785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601938008
    }
]