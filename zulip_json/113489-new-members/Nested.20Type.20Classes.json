[
    {
        "content": "<p>I have this structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">bar_dec</span><span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">Bar</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Foo</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">b1</span><span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b2</span><span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">b2</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>It complains that b1 = b2 is not decidable, even though <code>bar_dec</code> should be in scope. How can I fix this?</p>\n<p>This works, but I would prefer to put the <code>decidable_eq</code> type class into <code>Foo</code>, so that <code>open Foo</code> is enough to have decidable_eq for Bar:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Foo</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">Bar</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">b1</span><span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b2</span><span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">b2</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 219247965,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607454263
    },
    {
        "content": "<p>Does <code>attribute [instance] Foo.bar_dec</code> work?</p>",
        "id": 219249099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607454853
    },
    {
        "content": "<p>Thanks, it does work!</p>",
        "id": 219249240,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607454947
    },
    {
        "content": "<p><code>[bar_dec: decidable_eq Bar]</code> in the definition of <code>class Foo</code> means that Lean will try to find <code>[decidable_eq Bar]</code> when you define an instance of <code>Foo</code>. If you want Lean to use this projection when it is looking for <code>[decidable_eq Bar]</code>, you need to write <code>attribute [instance] Foo.bar_dec</code>.</p>",
        "id": 219249569,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607455119
    },
    {
        "content": "<p>What is the difference between a global <code>[bar_dec: decidable_eq Bar]</code> and  <code>[decidable_eq Bar]</code>? The later one is automatically discovered by lean, the first one not</p>",
        "id": 219249859,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607455305
    },
    {
        "content": "<p>By \"global\" I assume you mean <code>variable</code></p>",
        "id": 219251959,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607456323
    },
    {
        "content": "<p>Oh right</p>",
        "id": 219252018,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607456355
    },
    {
        "content": "<p>If Lean decides to include a <code>variable</code> in a def/lemma, then it will also automatically include any <em>unnamed</em> <code>[]</code> variables that mention it</p>",
        "id": 219252026,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607456358
    },
    {
        "content": "<p>and <code>attribute [instance] Foo.bar_dec</code> enables this for a named <code>[]</code> variable?</p>",
        "id": 219252154,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607456412
    },
    {
        "content": "<p>no, this is completely unrelated</p>",
        "id": 219252189,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607456430
    },
    {
        "content": "<p>it just makes <code>Foo.bar_dec</code> into a (global) instance</p>",
        "id": 219252238,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607456455
    },
    {
        "content": "<p>Your example is minimized to the point of being confusing--normally we wouldn't have a class with zero arguments</p>",
        "id": 219252280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607456482
    },
    {
        "content": "<p>I'm not sure whether <code>variable [Foo]</code> does anything really</p>",
        "id": 219252342,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607456521
    },
    {
        "content": "<p>but in any case, we wouldn't write it in the real world</p>",
        "id": 219252409,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607456540
    },
    {
        "content": "<p>I was recommended to use a class to declare a bunch of variables (i.e. fields) so I don't need to redeclare them for every file. <code>open Foo</code> would be sufficient.</p>",
        "id": 219252420,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607456547
    },
    {
        "content": "<p>That's sort of tempting but it would result in an awkward API unless you restate everything at the end in a more normal style</p>",
        "id": 219252583,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607456650
    },
    {
        "content": "<p>I don't think anyone will use my theorems, so I think that is fine :D It's about (abstract) program verification.</p>",
        "id": 219252821,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607456783
    },
    {
        "content": "<p>If you never plan to actually construct any instances of <code>Foo</code> then it might be okay. I would recommend using something like <code>variables [foo : Foo]  include foo</code> then.</p>",
        "id": 219252995,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607456874
    },
    {
        "content": "<p>you mean as an alternative to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Foo</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>?</p>",
        "id": 219253398,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607457081
    },
    {
        "content": "<p>hmm, I still need to do the <code>open</code> with <code>variables [foo : Foo]  include foo</code>.<br>\nIf <code>include</code> is including that in every definition, shouldn't be <code>variable [Foo]</code> be equivalent to <code>variable [foo: Foo] include foo</code>?</p>",
        "id": 219253666,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607457228
    },
    {
        "content": "<p>Why?</p>",
        "id": 219253850,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607457330
    },
    {
        "content": "<p>Maybe <code>variable [Foo]</code> has a special case for 0-argument classes?</p>",
        "id": 219253899,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607457360
    },
    {
        "content": "<p><code>open</code> has nothing to do with this, it's just for namespacing</p>",
        "id": 219253967,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607457374
    },
    {
        "content": "<p>If <code>variable [Foo]</code> already forces the instance to be included everywhere then you don't need my suggestion.</p>",
        "id": 219254000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607457398
    },
    {
        "content": "<blockquote>\n<p>If variable [Foo] already forces the instance to be included everywhere then you don't need my suggestion.</p>\n</blockquote>\n<p>Seem like <code>variable [Foo]</code> forces the instance to be included everywhere! That's what confused me since it didn't happen for <code>variable [foo: Foo]</code>.</p>",
        "id": 219318397,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607509442
    },
    {
        "content": "<p>Oh I guess the rule must be \"include a <code>[]</code> variable if all the variables it mentions are included\", so that makes sense.</p>",
        "id": 219318716,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607509648
    }
]