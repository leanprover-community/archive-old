[
    {
        "content": "<p>When I define something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">prf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">prf.mk1</span>\n<span class=\"c1\">-- prf.mk1 : Π {a : list ℕ} (n : ℕ), prf a (n + n)</span>\n</code></pre></div>\n<p><code>a</code> is an implicit argument in the constructor, even if I have it explicit in the inductive definition.<br>\nCan I make it so that <code>a</code> is generated as explicit in <code>prf.mk1</code>?</p>",
        "id": 233635436,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1617880352
    },
    {
        "content": "<p>I've never really understood why, but I think the syntax nowadays is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">prf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk1</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 233637565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617881792
    },
    {
        "content": "<p>Thanks! That's what I needed.</p>",
        "id": 233638835,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1617882485
    },
    {
        "content": "<p>Now I wonder, if you have several arguments, can you specify some of them to be implicit and some to be implicit? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">prf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk1</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">prf.mk1</span>\n<span class=\"c1\">-- prf.mk1 : Π (a : list ℕ) (b : bool) (n : ℕ), prf a b (n + n)</span>\n</code></pre></div>\n<p>Both <code>a</code> and <code>b</code> are explicit, and without the <code>[]</code> they are implicit. Is there a syntax for, let's say, <code>a</code> to be implicit and <code>b</code> to be explicit?</p>",
        "id": 233639239,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1617882720
    },
    {
        "content": "<p>Beyond some point you just might want to make your own constructor rather than getting the equation compiler to do it for you :-)</p>",
        "id": 233639477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617882840
    },
    {
        "content": "<p>Yeah, I guess I was going too far :)</p>",
        "id": 233640246,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1617883228
    },
    {
        "content": "<p>Actually I think your question is reasonable, and there might be a way to do it -- I'm not an expert in inductive types, I only ever use structures.</p>",
        "id": 233640307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617883258
    },
    {
        "content": "<p>No, there is not much ability to change the binders beyond the <code>{}</code> <code>[]</code> setting shown here</p>",
        "id": 233756322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617932832
    },
    {
        "content": "<p>But like Kevin says you can mostly paper over this by defining your own constructors. You will see a lot of structure fields in mathlib have primed names for this reason</p>",
        "id": 233756388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617932882
    }
]