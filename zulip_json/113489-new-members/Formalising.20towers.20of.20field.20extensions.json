[
    {
        "content": "<p>Another newbie question: What are efficient ways of encoding this common situation in field theory: \"Let K \\subset E \\subset F be a tower of field extensions. If x in K is separable over F, then x is separable over E.\" When I try to formalise this, I find it cumbersome to use the <code>[algebra K E] [algebra E F]</code> notation since then I need to manually compile the composition of these two algebra maps into a new algebra to express the separability of x over K. I would normally think I should start from the datum of a functor (0 \\to 1 \\to 2) to the category of commutative rings (or fields). Is this finite category in the library? Or are there other convenient ways? Thanks!</p>",
        "id": 227983903,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614369595
    },
    {
        "content": "<p>This is a can of worms which can be tamed with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_scalar_tower\">docs#is_scalar_tower</a></p>",
        "id": 227984182,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614369692
    },
    {
        "content": "<p>So for example you can declare a tower of fields <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>⊂</mo><mi>L</mi><mo>⊂</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">K \\subset L \\subset M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 227984942,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614370003
    },
    {
        "content": "<p>Concerning your category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>→</mo><mn>1</mn><mo>→</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">0 \\to 1 \\to 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>, this is \"just\" <code>fin 2</code> with the category instance obtained automatically from its ordered structure.</p>",
        "id": 227985374,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614370172
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>!</p>",
        "id": 227985561,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614370247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> It took a while for us to figure this out. I very much agree that it is cumbersome that we need to write two lines of <code>variables</code> just to say \"let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>⊂</mo><mi>L</mi><mo>⊂</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">K \\subset L \\subset M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> be a field extension\". But once you've done that at the top of your file, it is quite pleasant to use afterwards.</p>",
        "id": 227985647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614370285
    },
    {
        "content": "<p>Other variants are short to introduce, but painful to use.</p>",
        "id": 227985680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614370299
    },
    {
        "content": "<p>I would certainly advise against using a functor from <code>fin 3</code> if you want to do any nontrivial algebra :)</p>",
        "id": 227985789,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614370324
    },
    {
        "content": "<p>There are some ideas how to make the <code>variables</code> line a lot shorter, but they would require modifying lean, and nobody has done that. Now that lean 4 is out, I guess we will wait till mathlib is ported before experimenting with such new features.</p>",
        "id": 227985854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614370354
    },
    {
        "content": "<p>OK, this is at any rate beyond my horizon, so I will use the scalar tower then.</p>",
        "id": 227986271,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614370511
    }
]