[
    {
        "content": "<p>Hi, I am currently cleaning up my gaussian elimination proof. At one point I defined the following functions:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">fin_first</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin_second</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">n</span><span class=\"o\">}:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span> <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">block_mx</span> <span class=\"o\">{</span><span class=\"n\">m_down</span> <span class=\"n\">m_up</span> <span class=\"n\">n_left</span> <span class=\"n\">n_right</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_up</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_left</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_up</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_right</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_down</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_left</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_down</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_right</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m_up</span> <span class=\"bp\">+</span> <span class=\"n\">m_down</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n_left</span> <span class=\"bp\">+</span> <span class=\"n\">n_right</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">up_left</span> <span class=\"n\">up_right</span> <span class=\"n\">down_left</span> <span class=\"n\">down_right</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m_up</span>\n <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n_left</span>\n    <span class=\"k\">then</span>\n      <span class=\"n\">up_left</span> <span class=\"o\">(</span><span class=\"n\">fin_first</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin_first</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">up_right</span> <span class=\"o\">(</span><span class=\"n\">fin_first</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin_second</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n   <span class=\"k\">if</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n_left</span>\n    <span class=\"k\">then</span>\n      <span class=\"n\">down_left</span> <span class=\"o\">(</span><span class=\"n\">fin_second</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">fin_first</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">down_right</span> <span class=\"o\">(</span><span class=\"n\">fin_second</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin_second</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"bp\">```</span> <span class=\"n\">app</span>\n\n<span class=\"n\">Whenever</span> <span class=\"n\">I</span> <span class=\"n\">apply</span> <span class=\"n\">fin_first</span> <span class=\"n\">and</span> <span class=\"n\">fin_second</span><span class=\"o\">,</span> <span class=\"n\">I</span> <span class=\"n\">would</span> <span class=\"n\">like</span> <span class=\"n\">to</span> <span class=\"n\">make</span> <span class=\"n\">the</span> <span class=\"kn\">hypothesis</span> <span class=\"s2\">&quot;h&quot;</span> <span class=\"n\">available</span> <span class=\"n\">based</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">information</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"k\">if</span><span class=\"bp\">-</span><span class=\"n\">condition</span><span class=\"bp\">.</span>\n</pre></div>",
        "id": 135056007,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538506558
    },
    {
        "content": "<p>I feel this is a super trivial question, but I did not find a good example googling for it. Can somebody throw me the right keywords / reference?</p>",
        "id": 135056162,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538506589
    },
    {
        "content": "<p>If you write <code>if h :  j.val &lt; n_left then _ else _</code> you'll get local hypotheses with the right types in the placeholders.</p>",
        "id": 135056304,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538506754
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">test</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">m_down</span> <span class=\"n\">m_up</span> <span class=\"n\">n_left</span> <span class=\"n\">n_right</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">block_mx</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_up</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_left</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_up</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_right</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_down</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_left</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_down</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_right</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m_up</span> <span class=\"bp\">+</span> <span class=\"n\">m_down</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n_left</span> <span class=\"bp\">+</span> <span class=\"n\">n_right</span><span class=\"o\">))</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">up_left</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_up</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_left</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">up_right</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_up</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_right</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">down_left</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_down</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_left</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">down_right</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_down</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_right</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m_up</span> <span class=\"bp\">+</span> <span class=\"n\">m_down</span><span class=\"o\">),</span>\n<span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n_left</span> <span class=\"bp\">+</span> <span class=\"n\">n_right</span><span class=\"o\">),</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n_left</span>\n<span class=\"err\">⊢</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n_left</span>\n</pre></div>",
        "id": 135056328,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538506801
    },
    {
        "content": "<p>I seem to be so close.</p>",
        "id": 135056374,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538506806
    },
    {
        "content": "<p>I would hope lean picks this from the context. But it does not seem to do so.</p>",
        "id": 135056407,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538506826
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html?highlight=dite#decidable-propositions\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html?highlight=dite#decidable-propositions\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html?highlight=dite#decidable-propositions</a></p>",
        "id": 135056461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538506870
    },
    {
        "content": "<p>You want Lean to fill in those arguments automatically when it finds them in the local context?</p>",
        "id": 135056479,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538506897
    },
    {
        "content": "<p>You can write <code>def fin_first {n m} (i : fin (n + m)) {h: i.val &lt; n . assumption}: fin (n)</code></p>",
        "id": 135056539,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538506928
    },
    {
        "content": "<p>(I think that's the right syntax, don't have Lean open right this second to check.)</p>",
        "id": 135056555,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538506952
    },
    {
        "content": "<p>binders in <code>def fin_first {n m} (i : fin (n + m)) {h: i.val &lt; n}: fin (n)</code> are a bit strange, how <code>h</code> could be inferred from the explicit arguments?</p>",
        "id": 135056569,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538506977
    },
    {
        "content": "<p>I have no idea what I am doing here.</p>",
        "id": 135056585,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507002
    },
    {
        "content": "<p>Of course Rob's solution should work in your use case</p>",
        "id": 135056588,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538507006
    },
    {
        "content": "<p>I hoped \"{\" and \"}\" would create a \"free\" argument</p>",
        "id": 135056601,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507025
    },
    {
        "content": "<p>Which would be filled in if available in the local context.</p>",
        "id": 135056610,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507034
    },
    {
        "content": "<p>Rob suggested to use \"assumption\", right?</p>",
        "id": 135056664,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507051
    },
    {
        "content": "<p>This gives:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">test</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">52</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">invalid</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"err\">&#39;</span><span class=\"o\">}</span><span class=\"err\">&#39;</span> <span class=\"n\">expected</span>\n<span class=\"n\">test</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">55</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">command</span> <span class=\"n\">expected</span>\n</pre></div>",
        "id": 135056695,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507096
    },
    {
        "content": "<p>Will  ook for assumption in the lean doc</p>",
        "id": 135056704,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507110
    },
    {
        "content": "<p>{ } creates implicit arguments. They're arguments that can be filled in completely from other arguments, basically. Lean won't automatically search your local context for matches, because (1) there could be tons of stuff in the context, and (2) there could be multiple matches there.</p>",
        "id": 135056711,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538507122
    },
    {
        "content": "<p>I see. How do I tell lean which matches I want? Should I use ! to make the parameters explicit and then provide the ones needed explicitly?</p>",
        "id": 135056784,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507164
    },
    {
        "content": "<p>Here's the correct syntax for using auto parameters like my suggestion:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">.</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">trivial</span>\n</pre></div>",
        "id": 135056795,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538507173
    },
    {
        "content": "<p>With auto parameters, you give a tactic that will be executed to fill in that argument. So using <code>tactic.assumption</code> with an auto param will try to find something in the context that will work.</p>",
        "id": 135056932,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538507300
    },
    {
        "content": "<blockquote>\n<p>I see. How do I tell lean which matches I want? Should I use ! to make the parameters explicit and then provide the ones needed explicitly?</p>\n</blockquote>\n<p>I'm not sure exactly what you mean. It's usually clear in a signature which arguments are inferrable from others, assuming the declaration is fully applied. The custom is to make as much implicit as you can.</p>",
        "id": 135057019,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538507402
    },
    {
        "content": "<p>There's no ! syntax anymore, that was only in Lean 2. But you can use placeholders <code>_</code> to ask the elaborator to fill in explicit arguments.</p>",
        "id": 135057088,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538507447
    },
    {
        "content": "<p>Great.</p>",
        "id": 135057250,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507630
    },
    {
        "content": "<p>I got this working.</p>",
        "id": 135057251,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507632
    },
    {
        "content": "<p>I previously used \"{}\" around the assumption tactic, but I need to use \"()\"</p>",
        "id": 135057301,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507657
    },
    {
        "content": "<p>Great! Sorry, I should have checked before I wrote it with {}, heh.</p>",
        "id": 135057335,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538507728
    },
    {
        "content": "<p>These seem to be really basic questions, but I have now only a last issue.</p>",
        "id": 135057408,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507777
    },
    {
        "content": "<p>h_j : ¬j.val &lt; n_left<br>\n⊢ j.val ≥ n_left</p>",
        "id": 135057411,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507779
    },
    {
        "content": "<p>Is what I see in the else branch.</p>",
        "id": 135057416,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507785
    },
    {
        "content": "<p>This seems to be an obvious rewrite.</p>",
        "id": 135057421,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507800
    },
    {
        "content": "<p>Unfortunately, I don't understand where I would even insert my tactic to do the rewrite.</p>",
        "id": 135057431,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507815
    },
    {
        "content": "<p><code>le_of_not_gt</code></p>",
        "id": 135057433,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538507819
    },
    {
        "content": "<p>No you need a lemma here</p>",
        "id": 135057443,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538507830
    },
    {
        "content": "<p>Yes, that lemma</p>",
        "id": 135057446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538507838
    },
    {
        "content": "<p>Are you using the auto param trick? Because I see that this might complicate things a bit.</p>",
        "id": 135057473,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538507876
    },
    {
        "content": "<p>I currently write \"up_right (fin_first i) (fin_second j (begin rw of_not_gt at h_j end))\"</p>",
        "id": 135057563,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507990
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">up_right</span> <span class=\"o\">(</span><span class=\"n\">fin_first</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin_second</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">of_not_gt</span> <span class=\"n\">at</span> <span class=\"n\">h_j</span> <span class=\"kn\">end</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 135057567,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538507996
    },
    {
        "content": "<p>Which seems to not type-check even syntactically.</p>",
        "id": 135057621,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508008
    },
    {
        "content": "<p>I feel I mix proofs and normal programs beyond what is reasonable.</p>",
        "id": 135057635,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508026
    },
    {
        "content": "<p>Also, as a lemma I seem to need \"ge_of_not_lt\", but I can fix this.</p>",
        "id": 135057762,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508164
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tobias</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">le_of_not_gt</span><span class=\"o\">,</span>  <span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span>  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">.</span> <span class=\"n\">tobias</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">trivial</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">trivial</span>\n</pre></div>",
        "id": 135057808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538508236
    },
    {
        "content": "<p>Haha, you beat me to it, I just wrote almost exactly the same thing.</p>",
        "id": 135057878,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538508267
    },
    {
        "content": "<p>And my daughter tried to help you</p>",
        "id": 135057900,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538508290
    },
    {
        "content": "<p>This is very much appreciated!</p>",
        "id": 135057932,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508317
    },
    {
        "content": "<p>The full family working on lean!</p>",
        "id": 135057944,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508328
    },
    {
        "content": "<p>What I understand is that I can only provide tactics at function definition, not at the call-site.</p>",
        "id": 135057963,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508350
    },
    {
        "content": "<p>Oh, you can certainly provide them at the call site too.</p>",
        "id": 135058030,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538508380
    },
    {
        "content": "<p>In this case, I could just change the hypothesis of fin_second to what I want.</p>",
        "id": 135058039,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508386
    },
    {
        "content": "<p>I tried to avoid this, as I felt the hypothesis that I stated is more canonical.</p>",
        "id": 135058056,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508407
    },
    {
        "content": "<p>Cool so how would I add them to the call site?</p>",
        "id": 135058066,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508418
    },
    {
        "content": "<p>I meant my daughter tried to help Rob winning the race</p>",
        "id": 135058097,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538508452
    },
    {
        "content": "<p>If you make the inequality hypotheses to <code>fin_first</code> and <code>fin_second</code> explicit arguments, using <code>(h : i.val &lt; n)</code>, then you can apply it using <code>fin_first i (by assumption)</code>.</p>",
        "id": 135058115,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538508478
    },
    {
        "content": "<p>Or <code>by tobias</code> in this case.</p>",
        "id": 135058182,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538508536
    },
    {
        "content": "<p>More seriously, the basics of implicit arguments goes like this: say you have a lemma (or function) with arguments <code>(f : a -&gt; b) (hf : continuous f)</code>. Then having <code>hf</code> forces the value of <code>f</code>, so you can mark <code>f</code> as implicit by changing the declaration to <code>{f : a -&gt; b} (hf : continuous f)</code>. This was you can provide only <code>hf</code> when applying the lemma and Lean will figure out <code>f</code>. In your case Lean had no hope to figure out <code>h</code> from other arguments so you need to keep it explicit, or use auto-param like in Rob's solution.</p>",
        "id": 135058314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538508642
    },
    {
        "content": "<p>I see.</p>",
        "id": 135058479,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508786
    },
    {
        "content": "<p>Got it.</p>",
        "id": 135058485,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508788
    },
    {
        "content": "<p>I can now successfully forward the hypothesis.</p>",
        "id": 135058505,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508809
    },
    {
        "content": "<p>Thanks again, I learned sth new.</p>",
        "id": 135058510,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508817
    },
    {
        "content": "<p>For completeness, this is how my code looks like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">*</span><span class=\"err\">ₘ</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">70</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin_first</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">):</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin_second</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">block_mx</span> <span class=\"o\">{</span><span class=\"n\">m_down</span> <span class=\"n\">m_up</span> <span class=\"n\">n_left</span> <span class=\"n\">n_right</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_up</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_left</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_up</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_right</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_down</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_left</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_down</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n_right</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m_up</span> <span class=\"bp\">+</span> <span class=\"n\">m_down</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n_left</span> <span class=\"bp\">+</span> <span class=\"n\">n_right</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">up_left</span> <span class=\"n\">up_right</span> <span class=\"n\">down_left</span> <span class=\"n\">down_right</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n <span class=\"k\">if</span> <span class=\"n\">h_i</span><span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m_up</span>\n <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">h_j</span><span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n_left</span>\n    <span class=\"k\">then</span>\n      <span class=\"n\">up_left</span> <span class=\"o\">(</span><span class=\"n\">fin_first</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin_first</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">))</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">up_right</span> <span class=\"o\">(</span><span class=\"n\">fin_first</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin_second</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_of_not_gt</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">))</span>\n  <span class=\"k\">else</span>\n   <span class=\"k\">if</span> <span class=\"n\">h_j</span><span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n_left</span>\n    <span class=\"k\">then</span>\n      <span class=\"n\">down_left</span> <span class=\"o\">(</span><span class=\"n\">fin_second</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_of_not_gt</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">))</span>  <span class=\"o\">(</span><span class=\"n\">fin_first</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">))</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">down_right</span> <span class=\"o\">(</span><span class=\"n\">fin_second</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_of_not_gt</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin_second</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_of_not_gt</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 135058568,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508844
    },
    {
        "content": "<p>It's not that common to use auto params, but this is actually a pretty good application. <code>linarith</code> would be a reasonable auto param too if it handled negations of inequalities.</p>",
        "id": 135058597,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538508881
    },
    {
        "content": "<p>I can feel the approximate SMT solver temptation here</p>",
        "id": 135058621,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538508907
    },
    {
        "content": "<p>:D</p>",
        "id": 135058629,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508916
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/subject/linarith.20.26.20nat/near/134919571\" title=\"#narrow/stream/113488-general/subject/linarith.20.26.20nat/near/134919571\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/linarith.20.26.20nat/near/134919571</a></p>",
        "id": 135058649,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538508949
    },
    {
        "content": "<p>I certainly would like to explore more powerful linarithmetic tactics here. But this is a separate discussion.</p>",
        "id": 135058650,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538508950
    },
    {
        "content": "<p>I know, we have a solver for full Presburger arithmetic based on dual simplex. Eventually, this is what I would like to understand if we can make it work in lean.</p>",
        "id": 135058720,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538509004
    },
    {
        "content": "<blockquote>\n<p>I can feel the approximate SMT solver temptation here</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/mathlib/pull/384\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/384\">https://github.com/leanprover/mathlib/pull/384</a></p>",
        "id": 135061274,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538511564
    },
    {
        "content": "<p>Amazing. This got even merged already. Will try to use it.</p>",
        "id": 135087439,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538553300
    },
    {
        "content": "<p>I fact, i tried to use it already and it did not work. Thought I need to dig deeper, but then I found this in the tactic description:  \"In particular, it will not work on nat.\"</p>",
        "id": 135087599,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538553592
    },
    {
        "content": "<p>Seems that's a problem in my case. Any reason why it would not work?</p>",
        "id": 135087622,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538553604
    },
    {
        "content": "<p>Oops, I guess the description is outdated. It will work on <code>nat</code>, but it isn't complete (it's just doing Fourier Motzkin elimination). It also doesn't know about nat subtraction, which could be a problem in your case.</p>",
        "id": 135089959,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538557154
    }
]