[
    {
        "content": "<p>Let's say we have a predicate <code>p : set α</code>, and I have proved that </p>\n<div class=\"codehilite\"><pre><span></span>instance : is_add_submonoid p  :=\n</pre></div>\n\n\n<p>and so we have</p>\n<div class=\"codehilite\"><pre><span></span>instance  : add_monoid p := subtype.add_monoid\n</pre></div>\n\n\n<p>But now I'm not sure how to prove </p>\n<div class=\"codehilite\"><pre><span></span>instance : add_monoid (subtype p) :=\n</pre></div>\n\n\n<p>Perhaps I need to use the fact that <code>subtype.val</code> is a monoid homomorphism, or is there a easier method?</p>",
        "id": 164816342,
        "sender_full_name": "Joe",
        "timestamp": 1556906816
    },
    {
        "content": "<p><code>p</code> in the second example is coerced to <code>subtype p</code>. So the same proof should work.</p>",
        "id": 164816490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556906920
    },
    {
        "content": "<p>Thank you. So I guess the problem must be at somewhere else. I'll look into it. </p>\n<p>This is what I have right now</p>\n<div class=\"codehilite\"><pre><span></span>instance add_monoid_integrable : add_monoid (ball (0 : α →ₘ γ) ⊤) := subtype.add_monoid\ninstance add_monoid_integrable&#39; : add_monoid (subtype (ball (0 : α →ₘ γ) ⊤)) := subtype.add_monoid\n</pre></div>\n\n\n<p>The first line succeeds. The second line gives me a \"maximum class_instance resolution depth has been reached\" error.</p>",
        "id": 164817546,
        "sender_full_name": "Joe",
        "timestamp": 1556907658
    },
    {
        "content": "<p>Looks like the first line is looking for </p>\n<div class=\"codehilite\"><pre><span></span>is_add_submonoid (ball (0 : α →ₘ γ) ⊤)\n</pre></div>\n\n\n<p>Instead, the second line is looking for </p>\n<div class=\"codehilite\"><pre><span></span>is_add_submonoid (λ y : α →ₘ γ, edist y 0 &lt; ⊤)\n</pre></div>\n\n\n<p>How strange this is...  The definition of <code>ball</code> is </p>\n<div class=\"codehilite\"><pre><span></span>def ball (x : α) (ε : ennreal) : set α := {y | edist y x &lt; ε}\n</pre></div>",
        "id": 164818878,
        "sender_full_name": "Joe",
        "timestamp": 1556908561
    },
    {
        "content": "<p>Can you give more context?</p>",
        "id": 164818959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556908612
    },
    {
        "content": "<p>What <code>variables</code> do you have in place... etc...</p>",
        "id": 164818988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556908638
    },
    {
        "content": "<p>We have <code>[measure_space α]</code> and </p>\n<div class=\"codehilite\"><pre><span></span>[normed_group γ] [second_countable_topology γ] [topological_add_group γ]\n</pre></div>",
        "id": 164819242,
        "sender_full_name": "Joe",
        "timestamp": 1556908825
    },
    {
        "content": "<p><code>α →ₘ γ</code> is a quotient over functions.</p>",
        "id": 164819284,
        "sender_full_name": "Joe",
        "timestamp": 1556908868
    },
    {
        "content": "<p><code>def ae_eq_fun : Type (max u v) := quotient (ae_eq_fun.setoid α β)</code> is its definition.</p>",
        "id": 164819306,
        "sender_full_name": "Joe",
        "timestamp": 1556908900
    },
    {
        "content": "<p>Ok</p>",
        "id": 164819390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556908950
    },
    {
        "content": "<p>And what do you want to achieve?</p>",
        "id": 164819464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556909023
    },
    {
        "content": "<p><code>edist</code> on <code>α →ₘ γ</code> is supposed to be the l1-norm. <code>(ball (0 : α →ₘ γ) ⊤)</code> means the function is integrable.</p>",
        "id": 164819479,
        "sender_full_name": "Joe",
        "timestamp": 1556909037
    },
    {
        "content": "<p>So the goal is to prove that the space of integrable functions is a <code>normed_space</code> if it codoman is a <code>normed_space</code>.</p>",
        "id": 164819540,
        "sender_full_name": "Joe",
        "timestamp": 1556909070
    },
    {
        "content": "<p>Aha, nice</p>",
        "id": 164819552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556909084
    },
    {
        "content": "<p>Have you been able to state that theorem (with <code>sorry</code> as proof)?</p>",
        "id": 164819579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556909114
    },
    {
        "content": "<p><code>integrable</code> is defined as <code>def integrable [has_zero γ] := subtype (ball (0 : α →ₘ γ) ⊤)</code></p>",
        "id": 164819595,
        "sender_full_name": "Joe",
        "timestamp": 1556909128
    },
    {
        "content": "<p>Yes. Using <code>sorry</code> works</p>",
        "id": 164819639,
        "sender_full_name": "Joe",
        "timestamp": 1556909163
    },
    {
        "content": "<p>If I add</p>\n<div class=\"codehilite\"><pre><span></span>instance : is_add_submonoid (λ y : α →ₘ γ, edist y 0 &lt; ⊤) := sorry\n</pre></div>\n\n\n<p>it also works.</p>",
        "id": 164819666,
        "sender_full_name": "Joe",
        "timestamp": 1556909182
    },
    {
        "content": "<p>If we only have </p>\n<div class=\"codehilite\"><pre><span></span>instance : is_add_submonoid (ball (0 : α →ₘ γ) ⊤) :=\n</pre></div>\n\n\n<p>then the second line will fail.</p>",
        "id": 164819700,
        "sender_full_name": "Joe",
        "timestamp": 1556909224
    },
    {
        "content": "<p>Hmmm, that's annoying</p>",
        "id": 164819717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556909257
    },
    {
        "content": "<p>subtype.add_monoid with this works <code>set \\a</code> has been replaced with <code>\\a \\r Prop</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_add_submonoid</span> <span class=\"n\">p</span><span class=\"o\">]:</span> <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">add_monoid</span>\n</pre></div>",
        "id": 164820091,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556909530
    },
    {
        "content": "<p>You are right. So I don't know why lean looks for the wrong property ... </p>\n<p>I paste my code here. This is the working version. If I comment out <code>instance foo'</code>, then the last line will fail.</p>\n<div class=\"codehilite\"><pre><span></span>variables {γ : Type w} [normed_group γ] [second_countable_topology γ] [topological_add_group γ]\n\ninstance foo : is_add_submonoid (ball (0 : α →ₘ γ) ⊤) :=\n{ ... }\n\ninstance add_monoid_integrable : add_monoid (ball (0 : α →ₘ γ) ⊤) := subtype.add_monoid\n\ninstance foo&#39; : is_add_submonoid (λ y : α →ₘ γ, edist y 0 &lt; ⊤) := sorry\n\ninstance add_monoid_integrable&#39; : add_monoid (subtype (ball (0 : α →ₘ γ) ⊤)) := subtype.add_monoid\n</pre></div>",
        "id": 164820865,
        "sender_full_name": "Joe",
        "timestamp": 1556910098
    },
    {
        "content": "<p>I imagine that it's because it thinks <code>(λ y : α →ₘ γ, edist y 0 &lt; ⊤)</code> has type <code>(α →ₘ γ) → Prop</code>, so it looks for an instance on that Type, and rejects the instance that uses <code>set (α →ₘ γ)</code>, even though these two type are defeq.</p>",
        "id": 164821380,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556910556
    },
    {
        "content": "<p>Thank you. I think you are right. Using explicit form <code>@subtype.add_monoid _ _ _ ae_eq_fun.is_add_submonoid</code>solves the problem.</p>",
        "id": 164822345,
        "sender_full_name": "Joe",
        "timestamp": 1556911264
    },
    {
        "content": "<p>Why are you writing <code>subtype (ball 0 T)</code> anyway? Usually we write <code>subtype p</code> as <code>{x // p x}</code>, but in your case that means <code>{x // ball 0 T x}</code>, where the abstraction that <code>ball</code> is a set has been broken by using application directly. The mathlib instances only work if you don't break the abstraction barriers, i.e. using a <code>A -&gt; Prop</code> where a <code>set A</code> is expected or vice versa.</p>",
        "id": 164829118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556916577
    },
    {
        "content": "<p>I defined <code>integrable</code> as <code>def integrable [has_zero γ] := subtype (ball (0 : α →ₘ γ) ⊤)</code>, so I guess there is no choice if I want to show that <code>integrable</code> is an <code>add_monoid</code> or <code>add_comm_group</code>. </p>\n<p>The behavior does seem to be weird. For example, in the following proof I have to go into tactic mode.</p>\n<div class=\"codehilite\"><pre><span></span>instance : add_comm_group (integrable α γ) :=\n  @subtype.add_comm_group _ _ _ (by exact integrable.is_add_subgroup)\n</pre></div>",
        "id": 164836624,
        "sender_full_name": "Joe",
        "timestamp": 1556923779
    },
    {
        "content": "<p>You should just say <code>def integrable [has_zero γ] : Type* := ball (0 : α →ₘ γ) ⊤</code></p>",
        "id": 164836691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556923812
    },
    {
        "content": "<p>Oh, this seems to be better. I don't know it is allowed.</p>",
        "id": 164836707,
        "sender_full_name": "Joe",
        "timestamp": 1556923851
    },
    {
        "content": "<p>that's adding a coercion from set to Type, which is what the mathlib instances are expecting to see</p>",
        "id": 164836733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556923903
    },
    {
        "content": "<p>Yes, you're right, it works. This is so good!</p>",
        "id": 164836735,
        "sender_full_name": "Joe",
        "timestamp": 1556923913
    }
]