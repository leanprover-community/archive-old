[
    {
        "content": "<p>Is it possible to automatically turn a tactic proof that only rewrites equations into a calc proof? It seems like this shouldn't be fundamentally hard.</p>",
        "id": 202274895,
        "sender_full_name": "Chris M",
        "timestamp": 1593410981
    },
    {
        "content": "<p>Are you imagining a tactic that is only allowed to inspect the proof term (i.e. something like <code>find_calc_proof { rw [...] }</code>) or something that you run instead of <code>rw</code>, e.g. <code>rw? [...]</code>? The second option seems very doable.</p>",
        "id": 202276081,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593412654
    },
    {
        "content": "<p>You'd have the usual problem the round-tripping <code>pp</code> output is not 100% reliable. But it's often enough good.</p>",
        "id": 202276094,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593412674
    },
    {
        "content": "<p>Sorry, to clarify, I'm not necessarily imagining a tactic at all. I'm imagining a program that takes as input a well-formed tactic proof, and outputs a well-formed calc proof. Since calc proofs are a little harder to write, but easier to read.</p>",
        "id": 202276216,
        "sender_full_name": "Chris M",
        "timestamp": 1593412718
    },
    {
        "content": "<p>Oh --- better to write tactics. :-) You'll have to be talking to Lean anyway to generate the intermediate expressions.</p>",
        "id": 202276236,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593412751
    },
    {
        "content": "<p>The first option is doable as well, I'd guess --- <code>rw</code> produces pretty regularly shaped proof terms from which you can reconstruct what happened.</p>",
        "id": 202276267,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593412797
    },
    {
        "content": "<p>Yes, I'm imagining writing a proof in tactic mode, and once the proof is finished, copy paste the proof into a \"proof rewriting program\" which then gives me the calc proof with all the intermediate steps clearly stated, so that others can read it more easily.</p>",
        "id": 202276332,
        "sender_full_name": "Chris M",
        "timestamp": 1593412843
    },
    {
        "content": "<p>I think this would be very hard in general. Tactics often don't care about producing intelligible terms, so a parser that tries to figure out what steps were taken would have to determine which parts of the term are relevant and which are incidental complexity. If you limit yourself to certain tactics (e.g. only chains of <code>rw</code>), it might be doable, but your parser will then be strongly coupled to the implementations of these tactics.</p>",
        "id": 202320649,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1593442109
    },
    {
        "content": "<p>It will be much better to do this as a replacement/modifier for <code>rw</code>, so the scope is narrow. It should definitely be done as a tactic, not as some external program.</p>",
        "id": 202392383,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593488718
    }
]