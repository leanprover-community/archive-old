[
    {
        "content": "<p>I was playing around with lean trying to familiarize myself with it so I decided to try and define finite sequences and some operations on them. I defined <code>finite_sequence (n : nat) (\\alpha : Type u)</code> as <code>fin n \\to \\alpha</code>. Then I defined <code>initial_segment s m</code> which is the sequence of the first m elements of s,  and <code>concat s t</code> which is the sequence made by the elements of s followed by the elements of t.<br>\nNow I'm trying to prove that <code>\\forall (s t : finite_sequence n \\alpha), s = initial_segment (concat s t)</code> and I'm having trouble figuring out how to prove it in Lean. The outline of the proof in my head is to show that <code>\\forall i, s i = (initial_segment (concat s t)) i</code>. Do I need to restate the theorem in that form or is there some good way to prove them equal otherwise without needing to simplify the definitions till they're definitionaly equal? I was wanting to treat the sequences as concrete objects not functions so the equality without the explicit parameter seemed much more aesthetically appealing.</p>",
        "id": 222516378,
        "sender_full_name": "Devon Richards",
        "timestamp": 1610498210
    },
    {
        "content": "<p>To \"prove things are equal by proving their parts are equal,\" i.e. extensionality, you use the <code>ext</code> tactic (<a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ext\">tactic#ext</a>). Although this is general advice and I'm not completely sure it will work for your case.</p>",
        "id": 222517015,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1610498679
    },
    {
        "content": "<p><code>funext</code> is the theorem you need. The <code>ext</code> tactic is one way of automatically applying funext</p>",
        "id": 222517160,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1610498785
    },
    {
        "content": "<p>Thank you, that was exactly what I wanted.</p>",
        "id": 222517242,
        "sender_full_name": "Devon Richards",
        "timestamp": 1610498872
    }
]