[
    {
        "content": "<p>Hi. I am trying to prove <code>theorem add_left_cancel (t a b : mynat) : t + a = t + b → a = b :=</code>. After </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>my state is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I have the function <code>add_right_cancel  (a t b : mynat) : a + t = b + t → a = b</code>.  I would expect that <code>have p := add_right_cancel(h),</code> would work, because <code>add_right_cancel</code> takes in a proof of <code>a+t=b+t</code> and outputs a proof of <code>a=b</code>. But <code>have p := add_right_cancel(h),</code> actually errors. Instead, <code>have p := add_right_cancel a t b,</code> is correct. I do not understand why. Can anyone explain what is going on please?</p>",
        "id": 251308328,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1630364717
    },
    {
        "content": "<p>The a b and t are explicit. Add some underscores before h</p>",
        "id": 251308546,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630364863
    },
    {
        "content": "<p>The three <code>mynat</code> variables to the left of the colon in <code>add_right_cancel</code> are the first three arguments. Like Adam said, you can get Lean to infer them for you using <code>add_right_cancel _ _ _ h</code></p>",
        "id": 251308617,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630364885
    },
    {
        "content": "<p>Or you can tell Lean to infer the arguments automatically by using curly braces in the definition of <code>add_right_cancel</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_right_cancel</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"c1\">-- in your proof:</span>\n<span class=\"k\">have</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">add_right_cancel</span> <span class=\"n\">h</span> <span class=\"c1\">-- a &amp; t &amp; b are inferred from the information contained in h</span>\n</code></pre></div>",
        "id": 251337973,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1630391126
    },
    {
        "content": "<p>Another syntax question. Given state </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>why does <code>have p := eq_zero_of_add_right_eq_self n 1 h,</code> not work? it gives the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">26</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"n\">n</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">n</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 251829208,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1630650993
    },
    {
        "content": "<p>It looks like <code>eq_zero_of_add_right_eq_self</code> takes <code>n</code> and <code>1</code> as <em>implicit</em> arguments. So you only have to feed it <code>h</code>. It figures out <code>n</code> and <code>1</code> from the structure of <code>h</code>.</p>",
        "id": 251829371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630651144
    },
    {
        "content": "<p>This is the definition of <code>eq_zero_of_add_right_eq_self</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">eq_zero_of_add_right_eq_self</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>How do I figure out that it does not actually take a and b as arguments?</p>",
        "id": 251829515,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1630651283
    },
    {
        "content": "<p>the {} braces</p>",
        "id": 251829540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630651306
    },
    {
        "content": "<p>explicit arguments are written in ()</p>",
        "id": 251829552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630651317
    },
    {
        "content": "<p>And what about <code>{{}}</code> braces? E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_left_eq_zero</span>\n  <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 251829823,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1630651540
    },
    {
        "content": "<p>those are strict implicit arguments, which means that they are not inserted if you use the lemma unapplied, but they are if you apply some argument coming after it (here <code>H</code>). So <code>add_left_eq_zero</code> means <code>@add_left_eq_zero</code> but <code>add_left_eq_zero H</code> means <code>@add_left_eq_zero _ _ H</code></p>",
        "id": 251829925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630651609
    },
    {
        "content": "<p>(the <code>@</code> syntax makes all arguments explicit)</p>",
        "id": 251829952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630651635
    },
    {
        "content": "<p>Hmm, this is pretty confusing but thank you!</p>",
        "id": 251920098,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1630692133
    },
    {
        "content": "<p>You can probably ignore the double braces. I think they no longer even exist in Lean 4.</p>",
        "id": 251926641,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1630695273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/113489-new-members/topic/help.20with.20syntax/near/251926641\">said</a>:</p>\n<blockquote>\n<p>You can probably ignore the double braces. I think they no longer even exist in Lean 4.</p>\n</blockquote>\n<p>I do remember hearing that, but they work as of nightly 8-28, and they appear in the docs. <a href=\"https://github.com/leanprover/lean4/blob/master/doc/expressions.md#implicit-arguments\">https://github.com/leanprover/lean4/blob/master/doc/expressions.md#implicit-arguments</a></p>",
        "id": 251928716,
        "sender_full_name": "Chris B",
        "timestamp": 1630696298
    },
    {
        "content": "<p>Oh interesting, Leo talked about removing them at Lean Together. But I guess they're important enough not to.</p>",
        "id": 251978217,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1630737393
    }
]