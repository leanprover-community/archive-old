[
    {
        "content": "<p>Hi everyone, I'm working on some results related to Tits' theorem in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, dealing with reduced words of permutations. If a permutation has type equiv.perm (fin n), then I find it natural for reduced words to have type list (fin (n-1)), but this back and forth from n to n-1 can sometimes get messy. <br>\nI've included below an MWE for some problems I've been having chaining results together: for some reason, I just can't use the fact that n-1+1 = n in the proof of mylemma. I've put a sorry on things where only the type is relevant.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">red_wrd</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">perm_of_list</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l_inv</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">π</span><span class=\"o\">,</span> <span class=\"n\">perm_of_list</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">red_wrd</span> <span class=\"n\">n</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">π</span><span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comparing_lists</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)):</span>\n <span class=\"n\">perm_of_list</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"n\">perm_of_list</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">u.length</span> <span class=\"bp\">=</span><span class=\"n\">v.length</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mylemma</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">π</span><span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">perm_of_list</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=</span><span class=\"n\">π</span><span class=\"o\">):</span>\n  <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">red_wrd</span> <span class=\"n\">n</span> <span class=\"n\">π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">comparing_lists</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">l</span>  <span class=\"o\">(</span><span class=\"n\">red_wrd</span> <span class=\"n\">n</span> <span class=\"n\">π</span><span class=\"o\">),</span>\n<span class=\"c1\">--WTS perm_list (n - 1 + 1) l = perm_list (n - 1 + 1) (red_wrd n π), but can't use l_inv or even h2</span>\n<span class=\"c1\">--rw h, gives \"rewrite tactic failed, motive is not type correct\"</span>\n<span class=\"c1\">--simp_rw h, gives \"simplify tactic failed to simplify\"</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">--lemma helper  (n:ℕ)  (h:n-1+1=n) : perm_list n = perm_list (n-1+1) := sorry</span>\n<span class=\"c1\">-- lean complains if I try to factor this out as a sublemma</span>\n</code></pre></div>\n<p>Do you have any comments or suggestions on how to deal with this?</p>",
        "id": 287955082,
        "sender_full_name": "Ritwick Bhargava",
        "timestamp": 1656545406
    },
    {
        "content": "<p>Does setting it up like this to avoid the problem work for you?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">red_wrd</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">perm_of_list</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l_inv</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">π</span><span class=\"o\">,</span> <span class=\"n\">perm_of_list</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">red_wrd</span> <span class=\"n\">n</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">π</span><span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comparing_lists</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))):</span>\n <span class=\"n\">perm_of_list</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"n\">perm_of_list</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">u.length</span> <span class=\"bp\">=</span><span class=\"n\">v.length</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mylemma</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">π</span><span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">perm_of_list</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=</span><span class=\"n\">π</span><span class=\"o\">):</span>\n  <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">red_wrd</span> <span class=\"n\">n</span> <span class=\"n\">π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">comparing_lists</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">l</span>  <span class=\"o\">(</span><span class=\"n\">red_wrd</span> <span class=\"n\">n</span> <span class=\"n\">π</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">l_inv</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">--lemma helper  (n:ℕ)  (h:n-1+1=n) : perm_list n = perm_list (n-1+1) := sorry</span>\n<span class=\"c1\">-- lean complains if I try to factor this out as a sublemma</span>\n</code></pre></div>",
        "id": 287955680,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656545820
    },
    {
        "content": "<p>Here I just changed the type of <code>comparing_lists</code>, but seeing as I didnt think about the mathematics maybe you need to add a side condition to that</p>",
        "id": 287955735,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656545865
    },
    {
        "content": "<p>Yeah, that does work in the MWE, and I have tried just changing the type of the lemmas, but this kind of just shifts the problem around (i.e. if I change the type of one lemma, then something else breaks/ becomes incompatible). I think at some point in the document there needs to be a full circuit n -&gt; n-1 -&gt; n-1+1 =n which is why I was kinda hoping for a solution with the types unchanged (part of the hypothesis in all this is that n&gt;0 so n-1+1 =n is actually true)</p>",
        "id": 287956103,
        "sender_full_name": "Ritwick Bhargava",
        "timestamp": 1656546119
    },
    {
        "content": "<p>If you have <code>hn : 0 &lt; n</code> then <code>nat.sub_add_cancel hn : n - 1 + 1 = n</code></p>",
        "id": 287956352,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1656546290
    },
    {
        "content": "<p>If you use n+1 and n instead of n and n-1 the problem probably disappear, since n+1-1=n (and obviously n+1=n+1) is defeq.</p>",
        "id": 287956428,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656546354
    },
    {
        "content": "<p>Yep, I'm just including (h:n-1+1=n) as the hypothesis to simplify the MWE<br>\n<span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/113489-new-members/topic/rewriting.20n-1.2B1.3Dn/near/287956352\">said</a>:</p>\n<blockquote>\n<p>If you have <code>hn : 0 &lt; n</code> then <code>nat.sub_add_cancel hn : n - 1 + 1 = n</code></p>\n</blockquote>",
        "id": 287956481,
        "sender_full_name": "Ritwick Bhargava",
        "timestamp": 1656546376
    },
    {
        "content": "<p>One of the reasons you're having trouble is that n-1+1 != n for all n &lt; 1</p>",
        "id": 287956668,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656546502
    },
    {
        "content": "<p>In the way that nat subtraction is defined</p>",
        "id": 287956680,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656546518
    },
    {
        "content": "<p>I guess I was just hoping that having the n-1+1=n in the environment would mean that the identification of fin (n-1+1) with fin n would be relatively easy</p>",
        "id": 287957368,
        "sender_full_name": "Ritwick Bhargava",
        "timestamp": 1656547060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/rewriting.20n-1.2B1.3Dn/near/287956428\">said</a>:</p>\n<blockquote>\n<p>If you use n+1 and n instead of n and n-1 the problem probably disappear, since n+1-1=n (and obviously n+1=n+1) is defeq.</p>\n</blockquote>\n<p>This makes sense, I think I'll give this a try - thanks!</p>",
        "id": 287957461,
        "sender_full_name": "Ritwick Bhargava",
        "timestamp": 1656547130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"478603\">Ritwick Bhargava</span> <a href=\"#narrow/stream/113489-new-members/topic/rewriting.20n-1.2B1.3Dn/near/287957368\">said</a>:</p>\n<blockquote>\n<p>I guess I was just hoping that having the n-1+1=n in the environment would mean that the identification of fin (n-1+1) with fin n would be relatively easy</p>\n</blockquote>\n<p>In theory, you should be able to just <code>rw h1</code> and it should work, but the <code>rw</code> tactic is not smart enough to handle this situation. Alternatively, you can construct the <code>eq.rec</code> motive manually, but it may be painful.</p>",
        "id": 287959644,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1656548906
    },
    {
        "content": "<p>The problem here is that for <code>l : perm (n - 1)</code>, Lean can't deduce that <code>perm_of_list n l</code> is well-typed, since it doesn't know that <code>(n - 1) + 1 = n</code> just by looking at the expression</p>",
        "id": 287963354,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656552563
    },
    {
        "content": "<p>The easiest way out of this is to use types <code>n + 1</code> and <code>n</code> instead of <code>n</code> and <code>n - 1</code>. Since <code>(n + 1) - 1 = n</code> is a definitional equality, you won't have these sorts of type problems</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">red_wrd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">perm_of_list</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l_inv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">π</span><span class=\"o\">,</span> <span class=\"n\">perm_of_list</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">red_wrd</span> <span class=\"n\">n</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comparing_lists</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">perm_of_list</span> <span class=\"n\">n</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">perm_of_list</span> <span class=\"n\">n</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">u.length</span> <span class=\"bp\">=</span> <span class=\"n\">v.length</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mylemma</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">perm_of_list</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">red_wrd</span> <span class=\"n\">n</span> <span class=\"n\">π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">comparing_lists</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">red_wrd</span> <span class=\"n\">n</span> <span class=\"n\">π</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">l_inv</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287963641,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656552805
    },
    {
        "content": "<p>If you insist on your current approach, you'll have to get comfortable with heterogeneous equality.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">red_wrd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">perm_of_list</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l_inv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">π</span><span class=\"o\">,</span> <span class=\"n\">perm_of_list</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">red_wrd</span> <span class=\"n\">n</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comparing_lists</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)):</span>\n  <span class=\"n\">perm_of_list</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">perm_of_list</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">u.length</span> <span class=\"bp\">=</span> <span class=\"n\">v.length</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mylemma</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">perm_of_list</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">red_wrd</span> <span class=\"n\">n</span> <span class=\"n\">π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">comparing_lists</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">red_wrd</span> <span class=\"n\">n</span> <span class=\"n\">π</span><span class=\"o\">),</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">heq_of_eq</span> <span class=\"o\">(</span><span class=\"n\">l_inv</span> <span class=\"n\">n</span> <span class=\"n\">π</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287963862,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656553079
    },
    {
        "content": "<p>The <code>convert</code> tactic makes its best effort to convert one proof into another by matching what it thinks are corresponding terms. It's able to use proofs from the context, which is why you don't have to explicitly call <code>h1</code></p>",
        "id": 287964040,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656553228
    },
    {
        "content": "<p>Thanks a lot for the detailed answer! I guess using <code>n+1</code> instead of  <code>n</code> is the simplest solution even though I prefer the latter for aesthetic reasons.</p>",
        "id": 287965239,
        "sender_full_name": "Ritwick Bhargava",
        "timestamp": 1656554588
    },
    {
        "content": "<p>What exactly is heterogeneous equality, and is there a reason to avoid it?</p>",
        "id": 287965299,
        "sender_full_name": "Ritwick Bhargava",
        "timestamp": 1656554647
    },
    {
        "content": "<p><code>n - 1</code> just isn't nearly as well behaved as <code>n + 1</code>. In fact, <code>succ n = n + 1</code> is a constructor for the naturals, you can't get much better behaved than that.</p>",
        "id": 287966712,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656556285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"478603\">Ritwick Bhargava</span> <a href=\"#narrow/stream/113489-new-members/topic/rewriting.20n-1.2B1.3Dn/near/287965239\">said</a>:</p>\n<blockquote>\n<p>Thanks a lot for the detailed answer! I guess using <code>n+1</code> instead of  <code>n</code> is the simplest solution even though I prefer the latter for aesthetic reasons.</p>\n</blockquote>\n<p>I encounter a similar problem when dealing with <code>S_n</code>.</p>",
        "id": 287966765,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656556339
    },
    {
        "content": "<p>Heterogeneous equality is equality between terms of types Lean can't necessarily prove equal definitionally. If you're using it, as a rule of thumb, something is going wrong.</p>",
        "id": 287966770,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656556344
    },
    {
        "content": "<p>Another way would be to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_congr\">docs#fin_congr</a> to turn equality into bijection.</p>",
        "id": 287967021,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1656556724
    },
    {
        "content": "<p>I had no idea <code>fin_congr h</code> existed, I've been using <code>(fin.cast h).to_equiv</code> everywhere</p>",
        "id": 287994195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656578827
    }
]