[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">nlinarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pow_eq_zero</span> <span class=\"n\">h&#39;</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">aux</span> <span class=\"n\">a</span><span class=\"o\">},{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">aux</span> <span class=\"n\">a</span><span class=\"o\">}},{</span>\n      <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">nlinarith</span>\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This doesn't work, because <code>nlinarith</code> gives an error, it doesn't work if I replace it with <code>norm_num</code> either, and only works when I replace it with </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring_exp</span><span class=\"bp\">.</span><span class=\"n\">pow_p_pf_zero</span> <span class=\"n\">a_left</span> <span class=\"n\">rfl</span><span class=\"o\">},</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring_exp</span><span class=\"bp\">.</span><span class=\"n\">pow_p_pf_zero</span> <span class=\"n\">a_right</span> <span class=\"n\">rfl</span><span class=\"o\">},</span>\n      <span class=\"n\">finish</span>\n</code></pre></div>\n\n\n<p>I'm curious: is this something that we would want <code>nlinarith</code> or <code>norm_num</code> to know about or am I misunderstanding what they should be able to do?</p>",
        "id": 205051540,
        "sender_full_name": "Chris M",
        "timestamp": 1595768769
    },
    {
        "content": "<p>I don't think linarith does case splits</p>",
        "id": 205051634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595768965
    }
]