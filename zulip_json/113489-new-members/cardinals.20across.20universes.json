[
    {
        "content": "<p>I stumbled upon the following funny situation: a type mismatch between terms of apparently the same type.<br>\nI tried to see if the type annotations of each side of the equality showed more info by using <code>set_option pp.all true</code>, but both said <code>cardinal.{u}</code> anyway. Below is the MWE with an excerpt of the error message.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.ordinal</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">cardinal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">Iio.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"c1\">-- `cardinal.{u+1}`</span>\n<span class=\"k\">#check</span> <span class=\"n\">lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"n\">quotient.out.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- `cardinal.{u+1}`</span>\n<span class=\"k\">#check</span> <span class=\"n\">lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">Iio.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"n\">quotient.out.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- type mismatch at application</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  cardinal.lift.{u+1 u} (cardinal.mk.{u} (@quotient.out.{u+2} Well_order.{u} ordinal.is_equivalent.{u} i).α)</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  cardinal.{u+1}</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  cardinal.{u+1}</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">cardinal</span>\n</code></pre></div>\n<p>The context of this is that I'm trying to prove an version of <a href=\"https://leanprover-community.github.io/mathlib_docs/set_theory/cardinal/basic.html#cardinal.mk_Union_le\">cardinal.mk_Union_le</a>  (btw, is there an automatic way to generate this kind of links?) for ordinal-indexed unions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mk_Union_le_of_le</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">κ.ord</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hκ</span> <span class=\"o\">:</span> <span class=\"n\">ℵ₀</span> <span class=\"bp\">≤</span> <span class=\"n\">κ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">#↥</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"bp\">↥⋃</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">κ</span>\n</code></pre></div>",
        "id": 314344489,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1670368165
    },
    {
        "content": "<p>I don't know what's going on, but you can fix the error by explicitly coercing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">Iio.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"n\">quotient.out.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span>\n</code></pre></div>",
        "id": 314347229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670369443
    },
    {
        "content": "<p>Thank you very much. The error message, nevertheless, is misleading. Is there any way to get more information out of it?</p>\n<p>EDIT: Explicitly coercing the lhs gives the same error (both in isolation or in the equation, disregarding if the rhs is annotated or not).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">Iio.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid type ascription, term has type</span>\n<span class=\"cm\">  cardinal.{u+1}</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  cardinal.{u+1}</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 314432971,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1670412257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327749\">Pedro Sánchez Terraf</span> <a href=\"#narrow/stream/113489-new-members/topic/cardinals.20across.20universes/near/314344489\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/set_theory/cardinal/basic.html#cardinal.mk_Union_le\">cardinal.mk_Union_le</a>  (btw, is there an automatic way to generate this kind of links?) </p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.mk_Union_le\">docs#cardinal.mk_Union_le</a></p>",
        "id": 314434810,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670412944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/cardinals.20across.20universes/near/314434810\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"327749\">Pedro Sánchez Terraf</span> <a href=\"#narrow/stream/113489-new-members/topic/cardinals.20across.20universes/near/314344489\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/set_theory/cardinal/basic.html#cardinal.mk_Union_le\">cardinal.mk_Union_le</a>  (btw, is there an automatic way to generate this kind of links?) </p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.mk_Union_le\">docs#cardinal.mk_Union_le</a></p>\n</blockquote>\n<p>The format is <code>docs#</code><em>theory</em>.<em>theorem</em>, isn't it? I was also misled because some completion is offered when you start typing <code>#docs</code>.</p>",
        "id": 314435285,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1670413150
    },
    {
        "content": "<ul>\n<li>Typing <code>#foo</code> will complete to Zulip stream names that start with \"foo\".</li>\n<li>The syntax is <code>docs#&lt;declaration name&gt;</code>. And the declaration name could contain any amount of <code>.</code>s.</li>\n</ul>",
        "id": 314437186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670413867
    },
    {
        "content": "<p>Both of the followings work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">Iio.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"k\">in</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"n\">quotient.out.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"n\">quotient.out.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">Iio.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>looks like a bug to me (maybe in checking universe equality?)</p>",
        "id": 314541057,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1670441056
    }
]