[
    {
        "content": "<p>I couldn't understand universes even though I've read <a href=\"https://leanprover.github.io/reference/expressions.html\">https://leanprover.github.io/reference/expressions.html</a> several times, can anyone explain this to me in simple terms, or at least give me some context as to why this is needed</p>",
        "id": 242210520,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623333596
    },
    {
        "content": "<p>In Lean everything is a term and has type. So things like <code>int</code>, <code>bool</code> ... have to have a type, for which we might introduce <code>Type</code>, the type of types, so <code>nat : Type</code>, <code>bool : Type</code>, ... . And then you ask well, <code>Type</code> too has to have a type, so what's the type of <code>Type</code>? One might think to set the type of <code>Type</code> to be <code>Type</code> itself, since it is in the end a type, and <code>Type</code> is the type of all types. The problem with having <code>Type : Type</code> is that it is known to be inconsistent. See for example, <a href=\"https://en.wikipedia.org/wiki/System_U#Girard's_paradox\">Girard's paradox</a>, for which also have a formalization in Lean: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/counterexamples/girard.lean\">https://github.com/leanprover-community/mathlib/blob/master/counterexamples/girard.lean</a></p>\n<p>So instead of this, for the type of <code>Type</code>, we introduce a larger type, and we call it <code>Type 1</code>. And then this continues forever, for the type <code>Type 1</code> we introduce <code>Type 2</code> and so on. So that we have <code>Type : Type 1 : Type 2 : ...</code></p>",
        "id": 242212701,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623334332
    },
    {
        "content": "<p>That's my intuition at least</p>",
        "id": 242212728,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623334343
    },
    {
        "content": "<p>And of course, as you might know, in Lean we also have <code>Prop</code> which goes below the first <code>Type 0</code>. So the hierarchy is actually <code>Sort 0 : Sort 1 : Sort 2 ...</code>, where <code>Prop</code> is a notation for <code>Sort 0</code> and <code>Type u</code> for <code>Sort u + 1</code></p>",
        "id": 242212943,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623334438
    },
    {
        "content": "<p><del>Then what is the difference between Sort and Type?</del> (answered sorry) And why are there weird functions (<code>+</code>, <code>max</code>, <code>imax</code>) on universe levels? I can't understand the purpose of them (except <code>+ 1</code>, I fail to see why adding an arbitrary number is needed)</p>",
        "id": 242213922,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623334776
    },
    {
        "content": "<p>Especially imax. The definition is extremely weird.</p>",
        "id": 242214272,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623334918
    },
    {
        "content": "<p>If you have a tuple of two elements in universe level i and j, then the tuple itself is of a type which is in the most-high-up (= max i j) universe. That's a fellow newbie's intuition so take it with a grain of salt :)</p>",
        "id": 242215075,
        "sender_full_name": "Max",
        "timestamp": 1623335204
    },
    {
        "content": "<p><code>imax</code> is for <code>Prop</code>s . One of the main differences between <code>Prop</code> and <code>Type*</code> is how they behave with respective too universes in Pi-types. Any quantification into <code>Prop</code> stays in <code>Prop</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span>\n<span class=\"c1\">-- Π (α : Type u), β α : Type (max (u+1) v)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">α</span>\n<span class=\"c1\">-- ∀ (α : Type u), p α : Prop</span>\n</code></pre></div>",
        "id": 242215349,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623335289
    },
    {
        "content": "<p><code>imax</code> is so that you can include both cases above in a single formula</p>",
        "id": 242215476,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623335335
    },
    {
        "content": "<p>So the general rule, take from the Lean reference manual, can be expressed, for <code>\\a : Sort u</code> and <code>\\b : Sort v</code>, as <code>(Π x : α, β) : Sort (imax u v)</code>, with the help of <code>imax</code>, otherwise you would need to write two cases, for <code>Sort 0</code> and <code>Sort u</code>, <code>u &gt; 0</code></p>",
        "id": 242215987,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623335505
    },
    {
        "content": "<p>Wait.</p>\n<blockquote>\n<p>The last one denotes the universe level 0 if v is 0, and max u v otherwise.</p>\n</blockquote>\n<p>Why doesn't that sentence read</p>\n<blockquote>\n<p>The last one denotes the universe level 0 if either u or v is 0, and max u v otherwise.</p>\n</blockquote>",
        "id": 242217056,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623335878
    },
    {
        "content": "<p>Yes, your explanation helps, but your explanation generates even more questions <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 242217217,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623335930
    },
    {
        "content": "<p>Because it doesn't work that way in the other direction. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"k\">#check</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"c1\">-- p → α : Sort (u + 1) = Sort (max 0 (u + 1))</span>\n<span class=\"c1\">--                = Sort (imax 0 (u + 1)) ≠ Sort (your_alternative_imax 0 (u + 1)) = Sort 0</span>\n<span class=\"k\">#check</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n<span class=\"c1\">-- α → p : Sort 0 = Sort (imax ((u + 1) 0) ≠ Sort (max (u + 1) 0) = u + 1</span>\n</code></pre></div>",
        "id": 242218917,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623336499
    },
    {
        "content": "<p>Actually only the first <code>#check</code> is relevant to the last question, the second one is just for exemplification</p>",
        "id": 242219352,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623336661
    },
    {
        "content": "<p>OK so this is getting even more confusing... Why can I do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"n\">α</span>\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 242220327,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623337031
    },
    {
        "content": "<p>This can go on forever...</p>",
        "id": 242220402,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623337064
    },
    {
        "content": "<p>I know this is not \"proper mathematics\" but this is proper type theory. I need help <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 242220501,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623337090
    },
    {
        "content": "<p>And yes I did that because I made a def for fun and I checked its type and I saw Type u_1 \\im Type u_1 and I was like oh this is a function and I used it...</p>",
        "id": 242221243,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623337362
    },
    {
        "content": "<p>Foundations is so confusing. I swear if foundations was a subject at school I would drop out to avoid severe brain damage.</p>",
        "id": 242221624,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623337492
    },
    {
        "content": "<p>Here it's not a matter of foundations at all actually, just of Lean syntax. Declaring a variable basically tells Lean \"consider this as an argument for all future definition, wherever needed\". <br>\nSo your <code>x</code> for example, is the same as if you wrote</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>So, with <code>x</code> you just defined the identity function at <code>Type u</code>, that takes an argument and just returns. It makes no different that the argument is of type <code>Type u</code>. It could have been <code>int</code> and everything would have worked the same.</p>",
        "id": 242222153,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623337687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/113489-new-members/topic/I.20still.20can't.20grasp.20universes/near/242221624\">said</a>:</p>\n<blockquote>\n<p>if foundations was a subject at school I would drop out to avoid severe brain damage.</p>\n</blockquote>\n<p>This might be foundations-induced brain damage, but I found it helpful to think about universe variables as a way to give an (infinite) family of definitions/theorems simultaneously, without having to repeat yourself for all possible combinations of universes you might want to use in practice.  The universe variable arithmetic expressions are there to help you define useful families, and Lean guarantees that any substitution of universe levels for the universe variables gives well-typed terms (given the above example, you can do <code>x.{37}</code> to get the instantiation of that definition with the type <code>Type 37 -&gt; Type 37</code>, substituting <code>37</code> for <code>u</code>.)</p>\n<p>Something this point of view helped me understand is why you can't have types that quantify over universe levels, except at the point of a definition/theorem.</p>",
        "id": 242253727,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1623351336
    }
]