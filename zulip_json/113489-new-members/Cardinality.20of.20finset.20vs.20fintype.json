[
    {
        "content": "<p>Hi everyone, I'm working on defining the length of a permutation and proving some related things, but I'm getting tripped up on the differences between finset and fintype. So far I'm defining the length of a permutation as the cardinality of a certain finset (the set of all inversions):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.sign</span>\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span> <span class=\"n\">function</span> <span class=\"n\">fintype</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">@[derive decidable_pred]</span>\n<span class=\"kd\">def</span> <span class=\"n\">in_order</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">x.1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"n\">x.2</span>\n\n<span class=\"c1\">--the set of all inversions of a permutations</span>\n<span class=\"kd\">def</span> <span class=\"n\">all_inv</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">finset.filter</span> <span class=\"o\">(</span><span class=\"n\">in_order</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">perm.fin_pairs_lt</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">length</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">finset.card</span> <span class=\"o\">(</span><span class=\"n\">all_inv</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>When I want to show two lengths are related, it's natural to reason about bijections between various inversions (and so moving to types), for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">length_mul_swap</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩))</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">finset.erase</span> <span class=\"o\">(</span><span class=\"n\">all_inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">i</span><span class=\"o\">⟩)</span> <span class=\"bp\">≃</span> <span class=\"n\">all_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">swap</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩))</span>\n</code></pre></div>\n<p>After proving that, I'm having a surprisingly hard time showing something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">length_of_swap</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩))</span> <span class=\"o\">:</span>\n<span class=\"n\">length</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">length</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">equiv.swap</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)))</span>\n</code></pre></div>\n<p>even though I thought fintype.card_of_finset would make easy work of it. Can someone point me in the right direction for proving something like this? More generally, is this a reasonable approach to approach this topic? The coercions sometimes get complicated, so I'm wondering if there was a better way.</p>\n<p>If you don't want to look at all the code above, basically a mwe for what I'm looking to prove is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.sign</span>\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span> <span class=\"n\">function</span> <span class=\"n\">fintype</span> <span class=\"n\">finset</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">card_lemma</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">finset.card</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fintype.card_of_finset</span><span class=\"o\">,</span> <span class=\"c1\">-- does not rewrite as expected</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Any help or suggestions would be much appreciated, thank you!</p>",
        "id": 277085048,
        "sender_full_name": "Ritwick Bhargava",
        "timestamp": 1648604424
    },
    {
        "content": "<p>don't forget imports in your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 277085370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648604804
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_lemma</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">finset.card</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">fintype.card_coe</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(I think it's because <code>fintype.card_coe</code> doesn't have a general enough <code>fintype</code> instance.)</p>",
        "id": 277085566,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648605038
    },
    {
        "content": "<p>Yeah, that seems to be the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">fintype.card_coe'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"c1\">-- added `[fintype s]`</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s.card</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">fintype.card_coe</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_lemma</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">finset.card</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277085663,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648605142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Cardinality.20of.20finset.20vs.20fintype/near/277085370\">said</a>:</p>\n<blockquote>\n<p>don't forget imports in your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n</blockquote>\n<p>Sorry, edited them in</p>",
        "id": 277085733,
        "sender_full_name": "Ritwick Bhargava",
        "timestamp": 1648605236
    },
    {
        "content": "<p>It seems like <code>finset.has_coe_to_sort</code> was added after most of the <code>fintype</code> file was written and a fintype instance was not proved for it</p>",
        "id": 277085791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648605294
    },
    {
        "content": "<p>it used to be spelled <code>↥(s : set α)</code> so the existing instances were all that were needed</p>",
        "id": 277085886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648605379
    },
    {
        "content": "<p>it follows from <code>fintype.card_of_finset'</code> where you supply <code>iff.rfl</code> as the proof</p>",
        "id": 277085919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648605438
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13055\">#13055</a></p>",
        "id": 277086376,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648605818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Cardinality.20of.20finset.20vs.20fintype/near/277085663\">said</a>:</p>\n<blockquote>\n<p>Yeah, that seems to be the problem:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">fintype.card_coe'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"c1\">-- added `[fintype s]`</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s.card</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">fintype.card_coe</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_lemma</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">finset.card</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks a lot for the help, card_coe' is exactly what I needed</p>",
        "id": 277086996,
        "sender_full_name": "Ritwick Bhargava",
        "timestamp": 1648606585
    }
]