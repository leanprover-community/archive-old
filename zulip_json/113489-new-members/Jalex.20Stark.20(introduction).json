[
    {
        "content": "<p>I've been here a while but still feel a little too anonymous; hopefully this will help.</p>\n<p>I'll call myself a \"rogue academic\". A couple of years ago I was a <a href=\"http://www.jalexstark.com\" title=\"http://www.jalexstark.com\">grad student</a> proving theorems about quantum computing. I left because academia is slow. Now I have a job that offers a particularly good package of pay + free time (especially in the WFH era), and I use that to work on Lean stuff. (and also some pure maths and some non-maths science) Despite working in industry, I'm not a very good software engineer <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> (by the way if you are interested in a job or summer internship, I am excited to get you to interview with my employer)</p>\n<p>I'm generally excited about creating / improving pipelines for young people to get into formalization. Codewars is in my opinion the most exciting thing that's happened here in the past couple of months. (though the improvement of the toolchains is a close second) <span class=\"user-mention\" data-user-id=\"261068\">@ROCKY KAMEN-RUBIO</span> is on my payroll as a \"student\", and I have also made a positive number of private grants to people I've met on this server. I'm thinking about how to teach a class and/or advise some students this summer at <a href=\"https://www.mathcamp.org/\" title=\"https://www.mathcamp.org/\">Mathcamp</a> (a camp for high schoolers with a competitive proof-based entrance exam) I'm involved with. (When I was a student at Mathcamp, <span class=\"user-mention\" data-user-id=\"242660\">@Julian Gilbey</span> got me interested in LaTeX)</p>\n<p>Over the next couple of years, I'm excited to formalize complexity theory in general (a la Arora and Barak) and <a href=\"https://www.scottaaronson.com/blog/?p=4512\" title=\"https://www.scottaaronson.com/blog/?p=4512\">MIP*=RE</a> in particular. In the former, my current narrow goal is to prove lemmas about the <code>is_O</code> relation on runtimes of algorithms. In the latter, my current goal is to clarify the paper proof by characterizing some of its constructions as limits in an appropriate category.</p>",
        "id": 196173971,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588595680
    },
    {
        "content": "<p>Hey Jalex! Thanks for the introduction! I've seen a lot of posts by you here, but I still learnt something new (-;</p>",
        "id": 196174472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588595988
    },
    {
        "content": "<p>For your online mathcamp, you should probably think about improving the natural number game. There is a lot of engineering work to do in this direction.</p>",
        "id": 196176124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588597047
    },
    {
        "content": "<p>do we have a concrete list of issues? (maybe they're in the \"lean game maker\" github project?)</p>",
        "id": 196176403,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588597228
    },
    {
        "content": "<p>I remembered discussing stuff with Kevin, but this is probably not public. Let me search</p>",
        "id": 196176458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588597269
    },
    {
        "content": "<p>I think the main issue is: because people kept asking questions, Kevin kept adding written explanations. As a result, the game now contains way too many sentences, especially for young people who want to do things or watch videos but not reading.</p>",
        "id": 196176760,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588597432
    },
    {
        "content": "<p>Two obvious fixes to try are: add video explanations or use something like <a href=\"http://ninodezign.com/25-free-jquery-plugins-for-doing-guided-tours-through-a-website/\" title=\"http://ninodezign.com/25-free-jquery-plugins-for-doing-guided-tours-through-a-website/\">http://ninodezign.com/25-free-jquery-plugins-for-doing-guided-tours-through-a-website/</a></p>",
        "id": 196176821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588597452
    },
    {
        "content": "<p>If you have even more time then you can try to uncouple the game from the browser. It should be easier to write the game once and have people playing it either online or locally. A local version can have full Lean speed (by using a locally installed Lean, not compiled in WebAssembly) and either run in a browser or in a dedicated interface (for instance using my prototype Qt client).</p>",
        "id": 196177073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588597584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Jalex.20Stark.20(introduction)/near/196176760\" title=\"#narrow/stream/113489-new-members/topic/Jalex.20Stark.20(introduction)/near/196176760\">said</a>:</p>\n<blockquote>\n<p>I think the main issue is: because people kept asking questions, Kevin kept adding written explanations. As a result, the game now contains way too many sentences, especially for young people who want to do things or watch videos but not reading.</p>\n</blockquote>\n<p>hmm interesting. I think this is not so much a problem with this specific audience (who are generally happy to read textbooks) but definitely seems worthwhile for the broader audience</p>",
        "id": 196177140,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588597618
    },
    {
        "content": "<p>Currently even if you have a full Lean toolchain installed you still can't enjoy both the interface and the local Lean speed</p>",
        "id": 196177157,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588597628
    },
    {
        "content": "<p>I think you are already too old to see the issue.</p>",
        "id": 196177192,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588597648
    },
    {
        "content": "<p>Kevin's son is definitely of mathcamp style, and he says he won't read that much</p>",
        "id": 196177277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588597684
    },
    {
        "content": "<p>ah maybe I should spend more time watching young people play it for the first time</p>",
        "id": 196177368,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588597735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Jalex.20Stark.20(introduction)/near/196173971\" title=\"#narrow/stream/113489-new-members/topic/Jalex.20Stark.20(introduction)/near/196173971\">said</a>:</p>\n<blockquote>\n<p>Over the next couple of years, I'm excited to formalize complexity theory in general (a la Arora and Barak) and <a href=\"https://www.scottaaronson.com/blog/?p=4512\" title=\"https://www.scottaaronson.com/blog/?p=4512\">MIP*=RE</a> in particular. In the former, my current narrow goal is to prove lemmas about the <code>is_O</code> relation on runtimes of algorithms. In the latter, my current goal is to clarify the paper proof by characterizing some of its constructions as limits in an appropriate category.</p>\n</blockquote>\n<p>oh, that's cool! afaik there's very little formalized for CCT in general, despite it being an area of interest for computer scientists.</p>",
        "id": 196177676,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588597913
    },
    {
        "content": "<p>CCT?</p>",
        "id": 196177762,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588597951
    },
    {
        "content": "<p>computational complexity theory, sorry.</p>",
        "id": 196177799,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588597971
    },
    {
        "content": "<p>hah, and the reason for that is that the \"computer scientists\" who do complexity and the \"computer scientists\" who do programming languages and development of interactive theorem provers are totally different people</p>",
        "id": 196177865,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588598005
    },
    {
        "content": "<p>i've gotten so used to that acronym because it's the name of the arora and barak draft pdf :p</p>",
        "id": 196177887,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588598021
    },
    {
        "content": "<p>theory students largely think programming languages classes are just a hurdle to getting their PhD, and maybe also vice versa but I wouldn't know because I didn't tlak to any PL folks when I was in academia :P</p>",
        "id": 196177982,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588598064
    },
    {
        "content": "<p>oh no, it isn't (anymore?). maybe i just renamed that file years ago and thought that it was the actual name? hmmm.</p>",
        "id": 196178016,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588598084
    },
    {
        "content": "<p>I think that Ryan O'Donnel claimed that the proo fo the time hierarchy theorem in Arora and Barak is wrong. I'm hopeful that a formal proof of that would convince some complexity folks to be interested</p>",
        "id": 196178148,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588598161
    },
    {
        "content": "<p>oh, i spent a good deal of time thinking about that one for the exam. the general version, or the concrete one for n and n^1.5?</p>",
        "id": 196178269,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588598217
    },
    {
        "content": "<p>I'm also curious whether having formalized complexity theory makes studying CS theory more interesting to the kind of undergrad that writes a lot of haskell code</p>",
        "id": 196178283,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588598227
    },
    {
        "content": "<p>Yeah I think the claim was that for some tight exponent the proof was wrong and he wasn't even sure if the theorem was true up to that tightness</p>",
        "id": 196178353,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588598265
    },
    {
        "content": "<p>(I didn't learn basics from arora and barak, and in particular haven't read its proof(s) of the time hierarchy theorem)</p>",
        "id": 196178489,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588598332
    },
    {
        "content": "<p>i think <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> understands this stuff better than me. didn't you mention to me once that the general proofs are cleaner, or was that a different proof?</p>",
        "id": 196178506,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588598343
    },
    {
        "content": "<p>what is the \"general\" version of the theorem you're talking about?</p>",
        "id": 196178557,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588598376
    },
    {
        "content": "<p>Is it something like \"if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span> is a time-constructible function, then there are problems solvable in time <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span> but not in time <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>t</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">t^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>\"?</p>\n<p>I've seen people use latex, how does it work?</p>",
        "id": 196178663,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588598422
    },
    {
        "content": "<p>the \"draft\" version of the book i have lying around only proves the theorem for O(n) and O(n^1.5) (which is also what we did in our CCT lecture):<br>\n<a href=\"/user_uploads/3121/Bi_xJFeSSkQiEGE3LaAIrNNf/image.png\" title=\"image.png\">image.png</a> <br>\nthen again, this draft is very old.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Bi_xJFeSSkQiEGE3LaAIrNNf/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Bi_xJFeSSkQiEGE3LaAIrNNf/image.png\"></a></div>",
        "id": 196178702,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588598448
    },
    {
        "content": "<p>Use double dollars for inline math. I know <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 196178720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588598462
    },
    {
        "content": "<p>And use <code> ```latex </code> for display math</p>",
        "id": 196178795,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588598503
    },
    {
        "content": "<p>what does time constructible mean?</p>",
        "id": 196178813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588598514
    },
    {
        "content": "<p>ah okay, thanks</p>",
        "id": 196178864,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588598527
    },
    {
        "content": "<p>it means something like \"there is a Turing machine that on input <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> prints <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">t(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> and whose runtime is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>o</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">o(t(n))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>\"<br>\nmorally, \"without any asymptotic overhead, you can run a timer\"</p>",
        "id": 196178929,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588598565
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/tEuj5_l54HUg33hV5hUhSAtX/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tEuj5_l54HUg33hV5hUhSAtX/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/tEuj5_l54HUg33hV5hUhSAtX/image.png\"></a></div>",
        "id": 196178973,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588598591
    },
    {
        "content": "<p>(here's the draft pdf: <a href=\"https://theory.cs.princeton.edu/complexity/book.pdf\" title=\"https://theory.cs.princeton.edu/complexity/book.pdf\">https://theory.cs.princeton.edu/complexity/book.pdf</a>)</p>",
        "id": 196179126,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588598665
    },
    {
        "content": "<p>Hi everyone!</p>\n<p>I’m Rocky, Jalex’s “student” as they mentioned in their post. I’ve been posting some basic questions for the last few months (thank you all for your incredible support!). I did my undergrad in Physics/Applied Math, then moved to New York to try to become a professional dancer instead of going to grad school. Since my academic background wasn’t in pure math or functional programming, I’ve had a lot to learn and am still getting up to speed. Jalex asked me to think of myself in part as a beta-tester for the “on-boarding process”, so feel free to send me resources or problems if you want a noob to look at them. I’m also open to suggestions or comments for learning Lean myself. </p>\n<p>If you’re also a Lean noob, feel free to reach out and we can be noobs together!</p>",
        "id": 196222735,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1588617791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261068\">@ROCKY KAMEN-RUBIO</span> did you try the new tutorials?</p>",
        "id": 196232683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588622439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Jalex.20Stark.20(introduction)/near/196173971\" title=\"#narrow/stream/113489-new-members/topic/Jalex.20Stark.20(introduction)/near/196173971\">said</a>:</p>\n<blockquote>\n<p>[...] I'll call myself a \"rogue academic\". [...]<br>\n[...] I'm thinking about how to teach a class and/or advise some students this summer at <a href=\"https://www.mathcamp.org/\" title=\"https://www.mathcamp.org/\">Mathcamp</a> (a camp for high schoolers with a competitive proof-based entrance exam) I'm involved with. (When I was a student at Mathcamp, <span class=\"user-mention silent\" data-user-id=\"242660\">Julian Gilbey</span> got me interested in LaTeX) [...]</p>\n</blockquote>\n<p>From a fellow rogue academic and former Mathcamper (student and staff), hi! These introduction threads are great, I should probably write one too.</p>",
        "id": 196237986,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1588625249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Jalex.20Stark.20(introduction)/near/196232683\" title=\"#narrow/stream/113489-new-members/topic/Jalex.20Stark.20(introduction)/near/196232683\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> did you try the new tutorials?</p>\n</blockquote>\n<p>I'm working on them right now! I was actually struggling a bit with real numbers in Lean so this should be a valuable resource. I'll let you know once I'm done if I have any meaningful feedback.</p>",
        "id": 196238369,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1588625416
    },
    {
        "content": "<p>Hi Jalex, I just want to say that all of the projects you have in mind sound quite interesting, but I would be especially excited just to have any usable definition of the class P of polynomial-time algorithms (\"usable\" meaning, say, that one can reasonably easily prove that multiplication of natural numbers is in P when the inputs are encoded in binary). I think <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> may have had some ideas about how to do this at some point?</p>",
        "id": 196343106,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588701564
    },
    {
        "content": "<p>Indeed, this conversation got me thinking about turing machines again, hence <a href=\"https://github.com/leanprover-community/mathlib/issues/2605\" title=\"https://github.com/leanprover-community/mathlib/issues/2605\">#2605</a></p>",
        "id": 196343244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588701618
    },
    {
        "content": "<p>Yeah I have not yet equipped a notion of turing machine with a notion of runtime</p>",
        "id": 196343356,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588701672
    },
    {
        "content": "<p>I'm currently trying to get adept with using structures</p>",
        "id": 196343388,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588701689
    },
    {
        "content": "<p>last time i looked at turing machines in mathlib, there was a \"register machine\" style definition that was not terribly far to what CS theory people actually use. My current best guess is that i'll be writing code that compiles to that, but idk yet</p>",
        "id": 196343658,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588701799
    },
    {
        "content": "<p>I want to extend the work in <code>turing_machine.lean</code> to prove that turing machines can simulate partial recursive functions, which will achieve <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> 's \"usable P\" I think</p>",
        "id": 196343733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588701836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Jalex.20Stark.20(introduction)/near/196176760\">said</a>:</p>\n<blockquote>\n<p>I think the main issue is: because people kept asking questions, Kevin kept adding written explanations. As a result, the game now contains way too many sentences, especially for young people who want to do things or watch videos but not reading.</p>\n</blockquote>\n<p>Hi Patrick,<br>\nYes, that is indeed an issue.  I was using it with some undergraduates, and there was just too much text for them.  (Especially for one of my students who is dyslexic.)</p>",
        "id": 199501261,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1591108447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Jalex.20Stark.20(introduction)/near/196173971\">said</a>:</p>\n<blockquote>\n<p>[...]<br>\n I'm generally excited about creating / improving pipelines for young people to get into formalization. Codewars is in my opinion the most exciting thing that's happened here in the past couple of months. (though the improvement of the toolchains is a close second) <span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> is on my payroll as a \"student\", and I have also made a positive number of private grants to people I've met on this server. I'm thinking about how to teach a class and/or advise some students this summer at <a href=\"https://www.mathcamp.org/\">Mathcamp</a> (a camp for high schoolers with a competitive proof-based entrance exam) I'm involved with. (When I was a student at Mathcamp, <span class=\"user-mention silent\" data-user-id=\"242660\">Julian Gilbey</span> got me interested in LaTeX)<br>\n[...]</p>\n</blockquote>\n<p>Hi Jalex,</p>\n<p>How lovely to hear from you!  (And sorry for the very slow response - crazy times!)</p>\n<p>This all sounds really interesting.  I've found getting to grips with Lean quite tricky; there are lots of really niggly issues that make it hard.  I had been trying (before I ran out of time) to code Atiyah &amp; Macdonald's book \"Introduction to Commutative Algebra\" in Lean.  With a lot of help, I managed after many hours to get Proposition 1.1 and Proposition 1.2 done, but it was surprisingly difficult for such elementary results.  Even in tactic mode, there are many things which are mysterious to me!</p>\n<p>Best wishes,</p>\n<p>Julian</p>",
        "id": 199501765,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1591108647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242660\">@Julian Gilbey</span> You can get an exponential(?) speedup if you ask lots of questions here.</p>",
        "id": 199502282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591108862
    },
    {
        "content": "<p>We now have new functionality in NNG -- we can fold stuff. There are currently 0 examples of this, but we've been experimenting on it in the real number game. This might be a really good way of cutting out a lot of the text, or at least putting it out of harm's way.</p>",
        "id": 199511833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591112573
    }
]