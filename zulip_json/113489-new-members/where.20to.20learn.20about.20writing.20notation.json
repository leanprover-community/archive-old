[
    {
        "content": "<p>I don't know much about how to write notation in Lean. The two references I have looked at, Theorem Proving in Lean and the Lean Reference Manual, don't have that much to say on the topic. What's the best way to learn more?</p>\n<p>To be more concrete, here's one thing I'd like to learn how to do. I've noticed that some notation in Lean allows for an arbitrary number of \"arguments.\" For instance I can write <code>{1, 2, 3, 4, 5, 6, 7, 8, 9}</code> if I like and Lean knows that I mean a set with 9 elements. But the only way I know how to write notation in Lean, the number of arguments has to be fixed. How do I make notation that allows for a variable number of arguments?</p>",
        "id": 206198728,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596749004
    },
    {
        "content": "<p>I don't know any reference (which is not to say there isn't one) but I'd just search for the word notation in mathlib and look at the examples.<br>\nAs for the <code>{,,,}</code> notation this is defined in core lean in c++ (<a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/brackets.cpp\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/brackets.cpp</a>) and we can see what its really doing by turning notation off:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">t</span> <span class=\"c1\">-- insert 1 (insert 2 (singleton 3))</span>\n</code></pre></div>\n\n\n<p>so this although it looks like there are multiple arguments this is really just cleverly nesting inserts, so we can simulate this behaviour in our own notation (hacky version) with something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">❰</span><span class=\"bp\">`</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"kn\">notation</span> <span class=\"n\">l</span> <span class=\"bp\">`</span><span class=\"err\">⸥</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">200</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">insert</span> <span class=\"n\">l</span> <span class=\"n\">a</span>\n<span class=\"kn\">notation</span> <span class=\"n\">a</span><span class=\"bp\">`</span><span class=\"err\">❱</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">300</span> <span class=\"o\">:=</span> <span class=\"n\">singleton</span> <span class=\"n\">a</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">❰</span><span class=\"mi\">1</span><span class=\"err\">⸥</span> <span class=\"mi\">2</span><span class=\"err\">⸥</span> <span class=\"mi\">3</span><span class=\"err\">❱</span>\n</code></pre></div>",
        "id": 206203159,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596751920
    },
    {
        "content": "<p>There's also the magic <code>notation</code> with <code>foldr</code> that you can find some examples of by searching for <code>notation.*foldr</code></p>",
        "id": 206203297,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596752008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/where.20to.20learn.20about.20writing.20notation/near/206203297\">said</a>:</p>\n<blockquote>\n<p>There's also the magic <code>notation</code> with <code>foldr</code> that you can find some examples of by searching for <code>notation.*foldr</code></p>\n</blockquote>\n<p>For some reason I can't figure out how to do this. When I try searching for this in the mathlib documentation online, I get a bunch of results that aren't actually notation, just other uses of <code>foldr</code></p>",
        "id": 206208867,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596755833
    },
    {
        "content": "<p>Although actually just searching for <code>notation</code> has turned up some examples using <code>foldr</code></p>",
        "id": 206208956,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596755903
    },
    {
        "content": "<p>It looks like those examples (e.g. <code>data/matrix/notation</code>) are very similar to the kind of thing I want to do</p>",
        "id": 206208999,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596755954
    }
]