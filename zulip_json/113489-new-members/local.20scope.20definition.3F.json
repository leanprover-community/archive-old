[
    {
        "content": "<p>Hi all, <br>\nI was reading TPIL, and it says:<br>\n<a href=\"/user_uploads/3121/p1FB-wyVGq5Q6dmuiAWuNmLn/image.png\">image.png</a> <br>\nbut I tried local keyword, it seems it can only prefix notations, infix, etc. but not definitions? How should I make a definition private scope (similar to private keyword in java or c++)? <br>\nThanks!</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/p1FB-wyVGq5Q6dmuiAWuNmLn/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/p1FB-wyVGq5Q6dmuiAWuNmLn/image.png\"></a></div>",
        "id": 263578056,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1638537644
    },
    {
        "content": "<p>you can't in lean 3</p>",
        "id": 263578340,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638537781
    },
    {
        "content": "<p>but in lean 4 you can</p>",
        "id": 263578370,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638537796
    },
    {
        "content": "<p>i see. Thanks!</p>",
        "id": 263578593,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1638537903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431349\">@Shi Zhengyu</span> Just to mention, you can use markdown quote notation to quote things more easily with ctrl+c ctrl+v<br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">quote</span>\n</code></pre></div>\n<p>will be displayed as</p>\n<blockquote>\n<p>this is a quote</p>\n</blockquote>\n<p>So you don't need to take screenshots</p>",
        "id": 263578872,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638538028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/113489-new-members/topic/local.20scope.20definition.3F/near/263578340\">said</a>:</p>\n<blockquote>\n<p>you can't in lean 3</p>\n</blockquote>\n<p><code>private</code> works in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Making definitions private makes it harder for downstream modules to prove things, though.  A nice alternative is <code>protected</code>, which makes definitions require that they be qualified by their namespace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">m.foo</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">m</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">bar</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"c1\">-- error</span>\n<span class=\"k\">#check</span> <span class=\"n\">m.foo</span>\n</code></pre></div>",
        "id": 263604228,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638549238
    }
]