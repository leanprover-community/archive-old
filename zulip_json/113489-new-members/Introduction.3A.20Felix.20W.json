[
    {
        "content": "<p>Hi all!  My name is Felix Weilacher. I'm a graduate student at CMU.</p>\n<p>Does anyone know how much, if any, descriptive set theory has been formalized in Lean? I haven't been able to find any, but I also don't know much about looking.</p>",
        "id": 271872036,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1644865222
    },
    {
        "content": "<p>I think there isn't anything specific to descriptive set theory (e.g., beyond the definition of Borel sets <a href=\"https://leanprover-community.github.io/mathlib_docs/find/borel\">docs#borel</a>). I know <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> has been interested in this recently.</p>",
        "id": 271872463,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644865390
    },
    {
        "content": "<p>Here's Sébastien's work in progress:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/753096224cfbbecc3e112cbbfaf8633a6e199ad8/src/measure_theory/constructions/polish.lean\">https://github.com/leanprover-community/mathlib/blob/753096224cfbbecc3e112cbbfaf8633a6e199ad8/src/measure_theory/constructions/polish.lean</a></p>",
        "id": 271872678,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1644865470
    },
    {
        "content": "<p>(Work in progress by Sébastien looks like finished peer-reviewed code from anyone else ....)</p>",
        "id": 271872742,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1644865497
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/gelfand.20formula/near/270909030\">Here</a>'s a discussion of that particular work.</p>",
        "id": 271873048,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1644865598
    },
    {
        "content": "<p>Ah, this looks very nice. Thanks!</p>",
        "id": 271873234,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1644865678
    },
    {
        "content": "<p>The current state of things is that I have formalized the basics of Polish spaces and analytic sets, with a complete proof of the Lusin-Souslin theorem asserting that a continuous injective image of a Borel set in a Polish space is Borel (which is an amazing theorem when you think of it, and highly nontrivial). With this, I have got a satisfactory statement for the change of variables formula in finite-dimensional real vector spaces:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">integral_image_eq_integral_abs_det_fderiv_smul</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">measurable_set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">has_fderiv_within_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">inj_on</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span><span class=\"bp\">|</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I am going to PR all of this to mathlib (the first bits are in <a href=\"https://github.com/leanprover-community/mathlib/pull/11965\">#11965</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/11971\">#11971</a>), but it is going to take some time before everything is merged (the branch has 4259 added lines compared to master, so I expect I will need a few dozens PRs...)</p>",
        "id": 271890393,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1644873749
    },
    {
        "content": "<p>Thanks Sebastien! </p>\n<p>I'm interested generally in formalizing stuff from descriptive set theory. Do you have any plans to continue down this path or were you mostly interested in the change of variables formula?</p>",
        "id": 271896624,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1644876630
    },
    {
        "content": "<p>I think an interesting approach to descriptive set theory / infinite games would be to use 'coinductive types'. This should give a formally simple way to reason about games played on trees. I don't know any descriptive set theory but when I looked at the proof of Borel determinacy recently it seemed like all the basic notions (game, strategy in a game, a play in a game, a play consistent with a strategy, covering of a game...) are naturally coinductive. Lean doesn't natively support coinductive types so a first step would be to define the 'indexed M-type given an indexed container' (basically the type of strategies in a certain game), which is a little technical but also just a one-time cost.</p>",
        "id": 271902030,
        "sender_full_name": "David Wärn",
        "timestamp": 1644879649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> This already exists as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pfunctor.M\">docs#pfunctor.M</a></p>",
        "id": 271905672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644882087
    },
    {
        "content": "<p>And I direct you to this very nice paper for the context: <a href=\"http://www.contrib.andrew.cmu.edu/~avigad/Papers/qpf.pdf\">http://www.contrib.andrew.cmu.edu/~avigad/Papers/qpf.pdf</a></p>",
        "id": 271906107,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644882394
    },
    {
        "content": "<p>Oh, that's very nice. Then I think one would only need the generalisation to type families / <em>indexed</em> M-types. For example, we can define a type of (non-wellfounded) trees like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pfunctor.univariate.M</span>\n<span class=\"kd\">def</span> <span class=\"n\">game</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">pfunctor.M</span> <span class=\"o\">⟨</span><span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">ulift</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">move</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">game</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">g.head</span>\n<span class=\"kd\">def</span> <span class=\"n\">next_game</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">game</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">move</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"o\">:=</span> <span class=\"n\">g.children</span> <span class=\"o\">(</span><span class=\"n\">ulift.up</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now I would like to define the type of \"infinite paths\" in a given tree aka the type of plays in the game, coinductively: a path <code>p : path g</code> should consist of a move <code>p.head : move g</code> together with a path <code>p.tail : path (next_game g p.head)</code>.</p>",
        "id": 271933043,
        "sender_full_name": "David Wärn",
        "timestamp": 1644907544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464202\">Felix Weilacher</span> <a href=\"#narrow/stream/113489-new-members/topic/Introduction.3A.20Felix.20W/near/271896624\">said</a>:</p>\n<blockquote>\n<p>I'm interested generally in formalizing stuff from descriptive set theory. Do you have any plans to continue down this path or were you mostly interested in the change of variables formula?</p>\n</blockquote>\n<p>The Lusin-Souslin was my endgoal here, I am not planning to go further in this direction.</p>",
        "id": 271934157,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1644908818
    },
    {
        "content": "<p>Do you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mvqpf\">docs#mvqpf</a>, David? It's not exactly <em>indexed</em> because it only accepts indexing by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin2\">docs#fin2</a>, but the generalization should be straightforward.</p>",
        "id": 271939364,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644913001
    },
    {
        "content": "<p>What does it do exactly? The generalisation from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pfunctor.M\">docs#pfunctor.M</a> to indexed M-types (in the sense of <a href=\"https://hott.github.io/M-types/m-types.pdf\">https://hott.github.io/M-types/m-types.pdf</a> ) is also straightforward, but it needs to be done and have a good API.</p>",
        "id": 271940142,
        "sender_full_name": "David Wärn",
        "timestamp": 1644913491
    },
    {
        "content": "<p>This is easier said than done. I personally consider the QPF work a mostly failed experiment - the API is not easy to use and I don't think that there is an easy fix for that. Certainly adding indices will only make it harder to use</p>",
        "id": 271940675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644913826
    },
    {
        "content": "<p>what we really want is a <code>coinductive</code> command</p>",
        "id": 271940756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644913878
    },
    {
        "content": "<p>There are a lot of universe limitations in the functors too, so you can't just apply it mechanically without a lot of lifting</p>",
        "id": 271940937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644913966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Introduction.3A.20Felix.20W/near/271940756\">said</a>:</p>\n<blockquote>\n<p>what we really want is a <code>coinductive</code> command</p>\n</blockquote>\n<p>Would that involve a modification to Lean or rather an addition an additional layer as what the paper seemed to get to?</p>",
        "id": 271941138,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644914073
    },
    {
        "content": "<p>Hard to say. We have a layered implementation of nested inductives in lean 3 and look how that turned out</p>",
        "id": 271941192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644914112
    },
    {
        "content": "<p>Certainly I see no way to get the desired definitional equalities without a kernel modification</p>",
        "id": 271941246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644914147
    },
    {
        "content": "<p>You can say \"forget about defeq\" which is fine I guess, but not so much inside the indices of an indexed coinductive</p>",
        "id": 271941358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644914182
    },
    {
        "content": "<p>I think a tactic that does an M-type construction on the spot will work better than instantiating <code>pfunctor.M</code> because it can avoid the universe issues, but it doesn't solve the defeq issues, or perhaps more importantly, the interaction with all other tactics</p>",
        "id": 271941608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644914290
    },
    {
        "content": "<p>By the way <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> , if you are itching to use pfunctor.W anyway, there is a general technique for encoding indices in an untyped (co)inductive. You make a \"skeleton\" type which just ignores the indices, and then you carve out the subset of values which lie in a given index</p>",
        "id": 271941876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644914466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Introduction.3A.20Felix.20W/near/271940756\">said</a>:</p>\n<blockquote>\n<p>what we really want is a <code>coinductive</code> command</p>\n</blockquote>\n<p>We have a<code>coinductive</code> command already, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.coinductive_predicate\">docs#tactic.coinductive_predicate</a> (it's presumably not the right one)</p>",
        "id": 285868542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655078088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464202\">Felix Weilacher</span> <a href=\"#narrow/stream/113489-new-members/topic/Introduction.3A.20Felix.20W/near/271896624\">said</a>:</p>\n<blockquote>\n<p>I'm interested generally in formalizing stuff from descriptive set theory. Do you have any plans to continue down this path or were you mostly interested in the change of variables formula?</p>\n</blockquote>\n<p>Same here! Have you made any advances on this?</p>",
        "id": 297765422,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1662640638
    },
    {
        "content": "<p>I was only interested in the change of variables formula, so the Lusin-Souslin theorem was the endgoal for me here, and I am not planning to do anything further in this direction.</p>",
        "id": 297767312,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1662641299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Introduction.3A.20Felix.20W/near/297767312\">said</a>:</p>\n<blockquote>\n<p>I was only interested in the change of variables formula, so the Lusin-Souslin theorem was the endgoal for me here, and I am not planning to do anything further in this direction.</p>\n</blockquote>\n<p>Thanks again! I'm sorry if you received a direct notification of my message (intended for <span class=\"user-mention\" data-user-id=\"464202\">@Felix Weilacher</span>), since you already told me this.</p>",
        "id": 297773539,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1662641721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327749\">Pedro Sánchez Terraf</span> <a href=\"#narrow/stream/113489-new-members/topic/Introduction.3A.20Felix.20W/near/297765422\">said</a>:</p>\n<blockquote>\n<p>Same here! Have you made any advances on this?</p>\n</blockquote>\n<p>No, I have been (slowly) learning enough lean to where I feel comfortable doing so, though :). I am in a course this semester on lean, and hope to write up some DST for my course projects.</p>",
        "id": 297778401,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1662642612
    },
    {
        "content": "<p>I'm just starting with Lean, too, also going slow.</p>\n<p>I'm familiar with most the basics from Kechris' book, I'd be glad in to join any project on the formalization of DST, and I know at least one person here that would also like to do that.</p>\n<p>Are you going for classical DST, or would you like to include effective versions?</p>",
        "id": 297779246,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1662642910
    },
    {
        "content": "<p>OK, I'll let you know if I do start writing anything. Working together would be great. </p>\n<p>I don't know a lot of effective DST, so I wasn't planning on including it. If you know some, I think it would be good to include for sure.</p>",
        "id": 297784609,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1662643882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464202\">Felix Weilacher</span> <a href=\"#narrow/stream/113489-new-members/topic/Introduction.3A.20Felix.20W/near/297778401\">said</a>:</p>\n<blockquote>\n<p>No, I have been (slowly) learning enough lean to where I feel comfortable doing so, though <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. I am in a course this semester on lean, and hope to write up some DST for my course projects.</p>\n</blockquote>\n<p>Hey <span class=\"user-mention\" data-user-id=\"464202\">@Felix Weilacher</span>, just saw that you're advancing to the Borel Isomorphism theorem. Congrats! I'm still in tutorial phase, and started to read Gouëzel's sources. It seems that you accelerated quite a bit after these two months.</p>",
        "id": 307191484,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1667246685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464202\">Felix Weilacher</span> <a href=\"#narrow/stream/113489-new-members/topic/Introduction.3A.20Felix.20W/near/297784609\">said</a>:</p>\n<blockquote>\n<p>OK, I'll let you know if I do start writing anything. Working together would be great. </p>\n</blockquote>\n<p>I'll take a look at your repo; if your still interested in doing some joint thing, just ring the \"@\". Otherwise, it would be most useful to know what is probably <em>not</em> in your immediate interests in order to avoid overlaps.</p>",
        "id": 307192338,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1667246988
    }
]