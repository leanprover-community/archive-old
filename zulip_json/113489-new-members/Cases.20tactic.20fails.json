[
    {
        "content": "<p>Suppose I am trying to prove something is a commutative group, and for this I need to build a function add. There is a lemma that tells me that under some hypotheses, that are satisfied in my case, there exists a map with certain properties. I need to use that map to build my add function, however in order to get the map I need to give this lemma the hypotheses it wants and in order to do it I switch into tactic mode. After I give it the hypotheses I get an hypothesis of the forms \\esists f, ... and I need to get that <code>f</code>. However, I cannot use <code>cases</code> as my goal is not a <code>prop</code>. What can I do? It is really hard for me to create a mwe now as there's a lot of code in between what I am doing and the current version of Mathlib I think</p>",
        "id": 203123998,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594138298
    },
    {
        "content": "<p><code> obtain ⟨f, hf⟩ := hyp</code></p>",
        "id": 203124678,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594138611
    },
    {
        "content": "<p>where <code>hyp</code> is the hypothesis of the form <code>\\ex f, p f</code>, and <code>f</code> will be the function that satisfies <code>hf : p f</code></p>",
        "id": 203124784,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594138667
    },
    {
        "content": "<p>It still tells me</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">recursor</span> <span class=\"err\">&#39;</span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">dcases_on&#39;</span> <span class=\"n\">can</span> <span class=\"n\">only</span> <span class=\"n\">eliminate</span> <span class=\"n\">into</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n\n\n<p>with obtain, I guess you'd need to see the code?</p>",
        "id": 203125304,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594138918
    },
    {
        "content": "<p>Sounds like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some\">docs#classical.some</a> is what you want? You can use that to get something from an exists, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some_spec\">docs#classical.some_spec</a> to show that that term has the right property.</p>",
        "id": 203126424,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594139377
    },
    {
        "content": "<p>It also sounds like maybe the lemma you use should not have been a lemma at all, but rather a def</p>",
        "id": 203126640,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594139470
    },
    {
        "content": "<p>It is actually a definition but it there is still an exists in it. It is analogous to the definition of topological fiber bundle:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_topological_fiber_bundle</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">bundle_trivialization</span> <span class=\"n\">F</span> <span class=\"n\">proj</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">source</span>\n</code></pre></div>\n\n\n<p>I have my <code>x</code> where I want to get my trivialization and I need to use <code>e</code> but I can't manage to extract it. I will try Alex's suggestion</p>",
        "id": 203251301,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594203693
    },
    {
        "content": "<p>Perhaps you could explain what it is you want to do?</p>",
        "id": 203253563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594205446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Cases.20tactic.20fails/near/203253563\">said</a>:</p>\n<blockquote>\n<p>Perhaps you could explain what it is you want to do?</p>\n</blockquote>\n<p>Actually what I was trying to do was stupid and I changed everything but thanks a lot for the help!</p>",
        "id": 203272779,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594217965
    }
]