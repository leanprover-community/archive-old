[
    {
        "content": "<p>I am fiddling around with the following code.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- Throughout let  V be a vector space.</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">GL</span><span class=\"o\">(</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">)</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">general_linear_group</span> <span class=\"n\">ℂ</span> <span class=\"n\">a</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">GL</span><span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">GL</span><span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">f</span> <span class=\"n\">v</span>\n</pre></div>\n\n\n<p>I would expect this to tell me that <code>f v</code> has type <code>V</code>.  However, it complains that <code>f</code> is of type <code>units (V →ₗ[ℂ] V)</code> and not a function.  Fair enough, I suppose.   So I turn to the slightly more ugly <code>f.val v</code>.  This too gives an error:</p>\n<div class=\"codehilite\"><pre><span></span>/home/.../basic.lean:17:8: error: failed to synthesize type class instance for\nV : Type,\n_inst_1 : add_comm_group V,\n_inst_2 : vector_space ℂ V,\nf : GL(V),\nv : V\n⊢ monoid (V →ₗ[ℂ] V)\n/home/.../basic.lean:17:8: error: synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized\n  ⁇\ninferred\n  ring.to_monoid (V →ₗ[ℂ] V)\n</pre></div>\n\n\n<p>I will admit I am now a little stumped.  What exactly is it asking me to prove here?  Is it asking for a proof that <code>(V →ₗ[ℂ] V)</code> is a ring?  Is it asking for a proof that rings are monoids?</p>\n<p>And on an aesthetic note, is there any way to remove the <code>.val</code>?  Saying \"let f be a member of the general linear group.  Then f.val of v is a vector\" feels clumsy.</p>",
        "id": 160857159,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1552640067
    },
    {
        "content": "<p>I agree that this is unfortunate.</p>",
        "id": 160857439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552640325
    },
    {
        "content": "<p>However, would it make sense to introduce a scalar multiplication? <code>f • v</code>?</p>",
        "id": 160857460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552640350
    },
    {
        "content": "<p>Ah, yes.  That's better looking.  Something along the lines of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"err\">•</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">GL</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>(I know I'm probably butchering best practices/naming conventions, but humour me).</p>\n<p>Ok, I am satisfied for the aesthetic.   Still got the <code>ring.to_monoid</code> problem.</p>",
        "id": 160857790,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1552640708
    },
    {
        "content": "<p>what? this isn't a scalar product at all</p>",
        "id": 160857930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552640869
    },
    {
        "content": "<p>and vector spaces already have a notion of scalar product that conflicts with this</p>",
        "id": 160857981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552640893
    },
    {
        "content": "<p>eh, lean is on the fritz, can't test. Does <code>#check (f.val : V-&gt; V) x</code> work?</p>",
        "id": 160858141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552641109
    },
    {
        "content": "<p>Well since field elements inject into <code>GL(V)</code> it more extends rather than conflicts, doen't it?</p>",
        "id": 160858776,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1552641917
    },
    {
        "content": "<p>Unfortunately <code>(f.val : V -&gt; V) v</code> falls over in the same way</p>",
        "id": 160858790,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1552641945
    },
    {
        "content": "<p>I mean that's not how scalar products work: <code>V</code> is not a vector space over <code>GL(V)</code></p>",
        "id": 160866241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552649281
    },
    {
        "content": "<p>it isn't scalar product, it's group action</p>",
        "id": 160866292,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552649299
    },
    {
        "content": "<p>Herpdederp, fair enough.</p>",
        "id": 160867996,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1552651126
    },
    {
        "content": "<p>Well at the moment is an error.  Thinking about it, is it because Lean doesn't know which monoidal structure to use for the ring?</p>",
        "id": 160868129,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1552651259
    },
    {
        "content": "<p>I think we have group actions in Lean. Make it a group action?</p>",
        "id": 160868149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552651281
    },
    {
        "content": "<p>It's a G-module; a group acting on an abelian group.</p>",
        "id": 160868169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552651296
    },
    {
        "content": "<p>I have a student working on this, they're doing group cohomology, and this is the first definition.</p>",
        "id": 160868173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552651312
    },
    {
        "content": "<p>One way of setting it up is to make V a module for the group <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><mo>[</mo><mi>G</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[G]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathit\">G</span><span class=\"mclose\">]</span></span></span></span>, because the group ring is already in Lean.</p>",
        "id": 160868224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552651338
    },
    {
        "content": "<p>This might look daunting but it might also be the right way to do it.</p>",
        "id": 160868235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552651351
    },
    {
        "content": "<p>Maybe Chris did groups acting on sets, but groups acting on abelian groups by abelian group automorphisms (which is what we have here) is a richer theory.</p>",
        "id": 160868255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552651394
    },
    {
        "content": "<p>Wait.  So the endomorphism ring of a v. space, which is defined in terms of maps from the space to itself needs to have its action on the space explicitly defined?  It can't be deduced/inherited from the fact that the elements of the ring are exactly functions from the space to itself?</p>",
        "id": 160868335,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1552651476
    },
    {
        "content": "<p>Hard to believe isn't it -- there should be a better way in this case.</p>",
        "id": 160868358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552651507
    },
    {
        "content": "<p>Did you try Mario's <code>g.val : V -&gt; V</code> thing? What's the error?</p>",
        "id": 160868379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552651529
    },
    {
        "content": "<p>Maybe there's just a missing coercion.</p>",
        "id": 160868383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552651535
    },
    {
        "content": "<p>Explicit output of that case:</p>\n<div class=\"codehilite\"><pre><span></span>/home/.../basic.lean:18:0: error: failed to synthesize type class instance for\nV : Type,\n_inst_1 : add_comm_group V,\n_inst_2 : vector_space ℂ V,\nf : GL(V),\nv : V\n⊢ monoid (V →ₗ[ℂ] V)\n/home/.../basic.lean:18:0: error: synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized\n  ⁇\ninferred\n  ring.to_monoid (V →ₗ[ℂ] V)\n/home/.../basic.lean:18:0: error: failed to synthesize type class instance for\nV : Type,\n_inst_1 : add_comm_group V,\n_inst_2 : vector_space ℂ V,\nf : GL(V),\nv : V\n⊢ monoid (V →ₗ[ℂ] V)\n/home/.../basic.lean:18:0: error: synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized\n  ⁇\ninferred\n  ring.to_monoid (V →ₗ[ℂ] V)\n</pre></div>",
        "id": 160868604,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1552651753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> what is going on here? Something is wrong.</p>",
        "id": 160868924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552652047
    },
    {
        "content": "<p>Hell, <code>#check f.val</code> throws the same error.</p>",
        "id": 160868934,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1552652075
    },
    {
        "content": "<p>There should be some coercion which is not kicking in.</p>",
        "id": 160868936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552652079
    },
    {
        "content": "<p>Aah here we are: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- declaring this an instance breaks `real.lean` with reaching max. instance resolution depth</span>\n<span class=\"n\">def</span> <span class=\"n\">endomorphism_ring</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>There's a missing instance which should be there but it broke something else so it wasn't added.</p>",
        "id": 160869034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552652211
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">endomorphism_ring</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 160869132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552652299
    },
    {
        "content": "<p>Now you're back on track.</p>",
        "id": 160869136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552652306
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/2bf44d312d5f5f358ce8d9e682c23238e2e86429/src/linear_algebra/basic.lean#L123\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/2bf44d312d5f5f358ce8d9e682c23238e2e86429/src/linear_algebra/basic.lean#L123\">https://github.com/leanprover-community/mathlib/blob/2bf44d312d5f5f358ce8d9e682c23238e2e86429/src/linear_algebra/basic.lean#L123</a></p>",
        "id": 160869183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552652366
    },
    {
        "content": "<p>That's what you ran into. It should be an instance but it broke something so it wasn't made an instance.</p>",
        "id": 160869190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552652385
    },
    {
        "content": "<p>Ahhh.  Many thanks.  Turns out lean will infer the monoid structure automatically, so its a one-line-fix.</p>",
        "id": 160869249,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1552652415
    },
    {
        "content": "<p>So we need to add it explicitly. In the long term someone should figure out how to add the instance, I guess.</p>",
        "id": 160869251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552652416
    },
    {
        "content": "<p>it can be added now</p>",
        "id": 160869817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552652960
    },
    {
        "content": "<p>this was because of module ring out_param</p>",
        "id": 160869824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552652969
    }
]