[
    {
        "content": "<p>I understand there is a type of ordinals (resp. cardinals) in any given type universe (sort?) <code>u</code>, and that there is a lifting operation from lower to higher sorts. (Please confirm!)</p>\n<p>I have seen that apparently there is no associated coercion, in that I can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.ordinal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n<span class=\"kn\">open</span> <span class=\"n\">cardinal</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">ℵ₀</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">lift.</span><span class=\"o\">{</span><span class=\"mi\">2</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ℵ₀</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">ℵ₀</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ℵ₀</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>will fail. Why is there no such coercion defined?</p>",
        "id": 308478100,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1667857038
    },
    {
        "content": "<p>because you almost always need to use the universe arguments when using <code>lift</code> and you can't do that if the normal form was <code>\\u</code></p>",
        "id": 308478329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667857132
    },
    {
        "content": "<p>Btw, I really don't know if the above “equalities” are morally right. <code>rfl</code> is not a proof, and the rhs of the successful type-checking prints as <code>ℵ₀.lift</code></p>",
        "id": 308478364,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1667857153
    },
    {
        "content": "<p>note that the universe arguments of <code>lift</code> are <em>not</em> uniquely determined by the input and output types, since the output type is <code>cardinal.{max u v}</code> and <code>max</code> is not injective</p>",
        "id": 308478564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667857236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/ordinals.20across.20universes/near/308478329\">said</a>:</p>\n<blockquote>\n<p>you can't do that if the normal form was <code>\\u</code></p>\n</blockquote>\n<p>I'm afraid I do not get the normal form part. I accept a RTFM with a link as response! <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 308478652,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1667857278
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/extras/simp.html#simp-normal-form\">https://leanprover-community.github.io/extras/simp.html#simp-normal-form</a></p>",
        "id": 308478712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667857305
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>. I'll try to process this and then I'll continue asking</p>",
        "id": 308480018,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1667857877
    }
]