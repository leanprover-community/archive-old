[
    {
        "content": "<p>Its probably better to write the def as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isa</span>  <span class=\"o\">:</span> <span class=\"n\">AB</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">AB.a</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">AB.b</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 246388892,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1626628707
    },
    {
        "content": "<p>You are making a <code>def</code> with a <code>match</code> so this will clog up the actual code which defines <code>isa</code>. You can prove your example with <code>unfold isa</code>.</p>",
        "id": 246388895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626628710
    },
    {
        "content": "<p>Any of the following proofs works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">AB</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">AB</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">AB</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isa</span>  <span class=\"o\">:</span> <span class=\"n\">AB</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">AB.a</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">AB.b</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">isa</span> <span class=\"n\">AB.a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">isa</span> <span class=\"n\">AB.a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">isa</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">isa</span> <span class=\"n\">AB.a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246388911,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1626628751
    },
    {
        "content": "<p>Oh, I forget it need be <code>unfold isa</code>.  Thanks...</p>",
        "id": 246389032,
        "sender_full_name": "Jiekai",
        "timestamp": 1626628919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277676\">Jiekai</span> has marked this topic as resolved.</p>",
        "id": 246389071,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626628925
    },
    {
        "content": "<p>This style <code>def fun-name (arg-name : ARG-TYPE) : RET-TYPE</code> with arg names gives me comfort. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 246408858,
        "sender_full_name": "Jiekai",
        "timestamp": 1626658297
    }
]