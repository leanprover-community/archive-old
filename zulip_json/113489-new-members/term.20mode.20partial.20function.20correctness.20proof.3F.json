[
    {
        "content": "<p>I am trying to do the exercise at the end of 7.2 in theorem proving in LEAN. I am a bit confused. How can you prove the second example in term mode?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"n\">option</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comp_partial</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">option.cases_on</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">option.none</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">option.none</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">comp_partial</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">option.none</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">comp_partial</span><span class=\"o\">,</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- How to do this in term mode?</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">option.none</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">comp_partial</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">option.none</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 262355565,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637604055
    },
    {
        "content": "<p>the short answer is that you shouldn't, tactic mode does this one better</p>",
        "id": 262356055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637604295
    },
    {
        "content": "<p>The long answer is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">option.none</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">comp_partial</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">option.none</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">option.cases_on</span> <span class=\"n\">y</span> <span class=\"n\">option.none</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h₁</span>\n</code></pre></div>",
        "id": 262356470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637604518
    },
    {
        "content": "<p>Use <code>show_term</code> to see what the tactics compiled into:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">show_term</span> <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">comp_partial</span><span class=\"o\">,</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">h₁</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262356771,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1637604664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> That does give me something, but it is extremely complicated, or at least pretty long. Right now I also don't get Mario's answer but that seems much easier to understand.</p>",
        "id": 262357136,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637604843
    },
    {
        "content": "<p>The hard part in the proof is <code>rw</code>, which makes for messy term proofs. I will usually use <code>rw</code> even in a term mode proof because it's more reliable and about as fast</p>",
        "id": 262357262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637604914
    },
    {
        "content": "<p>The basic idea is that if you have some goal <code>P x</code> containing a subterm <code>x</code> and you want to replace it with <code>y</code> given an equation <code>h : x = y</code>, then use <code>congr_arg P h</code> which has the type <code>P x = P y</code></p>",
        "id": 262357371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637604975
    },
    {
        "content": "<p>the hard part is that you have to write down <code>P</code>, where <code>rw</code> will figure it out automatically by finding all instances of <code>x</code> in the goal and replacing them with a lambda variable</p>",
        "id": 262357437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637605012
    },
    {
        "content": "<p>the other hard part in this particular problem is that <code>option.cases_on</code> has a dependent type and this gives the elaborator trouble once it is removed from the context of <code>comp_partial</code> where the type is known. This is why I had to specify the type <code>option γ</code> to <code>congr_arg</code></p>",
        "id": 262357592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637605105
    },
    {
        "content": "<p>The term used by <code>rw</code> involves <code>eq.rec</code>, which is very difficult to write manually unless you specify a bunch of implicit arguments because it has some unusual elaboration rules</p>",
        "id": 262357840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637605210
    },
    {
        "content": "<p>It also seems like even <code>show_term</code> can't handle <code>eq.rec</code>. I get:  \"invalid 'eq.rec' application, elaborator has special support for this kind of application (it is handled as an \"eliminator\"), but expected type must not contain metavariables\", when I simply click on the 'try this' of <code>show_term</code>.</p>",
        "id": 262358403,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637605459
    },
    {
        "content": "<p>that's what I mean</p>",
        "id": 262359041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637605785
    },
    {
        "content": "<p>the lean 3 pretty printer has trouble round-tripping at the default printing settings when <code>eq.rec</code> is involved</p>",
        "id": 262359163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637605843
    },
    {
        "content": "<p>you have to <code>set_option pp.all true</code> or so, which will also make the output rather hard to read</p>",
        "id": 262359230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637605884
    },
    {
        "content": "<p>YES, that works. And also it makes the proof just hilariously long  <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> . 101 lines in fact.</p>",
        "id": 262360441,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637606496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I do get your proof now I think. It creates the term <code>option.cases_on (f x) option.none g = option.none</code> right? And then LEAN looks at this and notices that it is definitionally equal to <code>comp_partial f g x = option.none</code>.</p>\n<p>Is there some way to make this last step more explicit? E.g. could we specify a rewrite operation to rewrite <code>option.cases_on (f x) option.none g</code> to <code>comp_partial f g x</code>?</p>",
        "id": 262364670,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637608388
    }
]