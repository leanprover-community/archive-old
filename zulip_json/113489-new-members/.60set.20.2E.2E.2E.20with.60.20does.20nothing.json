[
    {
        "content": "<p>I got to a very convoluted proof state, and I want to replace some term that appears several times by a notation, some fresh letter. <br>\nI usually use the <code>set</code> tactic for this, but in the following minimized example it doesn't change anything, presumably because of some type dependencies.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">existential</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">formula</span>\n\n  <span class=\"kd\">notation</span> <span class=\"bp\">`∃∃`</span> <span class=\"n\">binders</span>  <span class=\"bp\">`;`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">existential</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n  <span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">mwc</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">existential</span> <span class=\"n\">α</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">Σ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mwc.1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mwc.2</span><span class=\"o\">))</span>\n\n  <span class=\"kd\">@[reducible, simp]</span> <span class=\"kd\">def</span> <span class=\"bp\">𝕎</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">,</span> <span class=\"n\">A.mwc.fst</span>\n  <span class=\"kd\">@[reducible, simp]</span> <span class=\"kd\">def</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">,</span> <span class=\"n\">A.mwc.snd</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">dia</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">,</span> <span class=\"n\">A.</span><span class=\"bp\">𝕎</span> <span class=\"bp\">→</span> <span class=\"n\">A.ℂ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">existential</span> <span class=\"n\">α</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dia</span> <span class=\"n\">x.snd</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">realizer</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">𝕎</span> <span class=\"n\">A</span>  <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">A.dia</span> <span class=\"n\">t</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"bp\">𝕎</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n  <span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"o\">)</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">realizer</span> <span class=\"o\">(</span><span class=\"n\">existential</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">dia</span><span class=\"o\">,</span> <span class=\"n\">realizer</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">α : Type,</span>\n<span class=\"cm\">_inst_1 : inhabited α,</span>\n<span class=\"cm\">A : α → formula,</span>\n<span class=\"cm\">y : Π (x : α), (A x).mwc.snd</span>\n<span class=\"cm\">⊢ (A (default (Σ (x : α), (A x).mwc.fst)).fst).dia (default (Σ (x : α), (A x).mwc.fst)).snd</span>\n<span class=\"cm\">    (y (default (Σ (x : α), (A x).mwc.fst)).fst)</span>\n\n<span class=\"cm\">I want to replace the occurrences of `default (Σ (x : α), (A x).mwc.fst` with `u`</span>\n<span class=\"cm\">  -/</span>\n\n    <span class=\"n\">set</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mwc.fst</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">u_eq</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- doesn't change anything in the goal</span>\n    <span class=\"c1\">-- trying to rewrite u_eq gives motive not type correct</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">formula</span>\n</code></pre></div>\n<p>Trying to rewrite with the generated equation <code>rw ←u_eq,</code> gives </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mwc.fst</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>though to me it seems that that term appears in the goal. <code>subst u_eq</code> fails with a motive error.</p>",
        "id": 238364181,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1620759465
    },
    {
        "content": "<p>Can I get around this?</p>",
        "id": 238364286,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1620759506
    },
    {
        "content": "<p>This is an instance coherence issue. The term <code>default (Σ (x : α), (A x).mwc.fst)</code> has an implicit argument for the <code>inhabited (Σ (x : α), (A x).mwc.fst)</code> witness and the one lean comes up with uses <code>sigma.inhabited</code> while the one in the goal uses <code>𝕎.inhabited</code></p>",
        "id": 238365250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620759890
    },
    {
        "content": "<p>Thank you! Indeed, changing to <code>set u := (@default (Σ (x : α), (A x).mwc.fst) (𝕎.inhabited (existential A))) with u_eq,</code> did it.</p>",
        "id": 238367572,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1620760842
    }
]