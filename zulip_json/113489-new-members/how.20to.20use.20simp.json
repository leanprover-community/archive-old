[
    {
        "content": "<p>I have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- set_option pp.numerals false</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span><span class=\"n\">bit0</span><span class=\"o\">,</span><span class=\"n\">bit1</span><span class=\"o\">,</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"o\">,</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"o\">,</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span><span class=\"n\">coe</span><span class=\"o\">,</span><span class=\"n\">lift_t</span><span class=\"o\">,</span><span class=\"n\">has_lift_t</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"o\">,</span><span class=\"n\">coe_t</span><span class=\"o\">,</span><span class=\"n\">has_coe_t</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"o\">,</span><span class=\"n\">coe_b</span><span class=\"o\">,</span><span class=\"n\">has_coe</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I want to simplify the goal until it is <code>6 = 6</code> or <code>nat.succ (nat.succ (nat.succ (nat.succ (nat.succ (nat.succ nat.zero)))) = nat.succ (nat.succ (nat.succ (nat.succ (nat.succ (nat.succ nat.zero))))</code>.  (I know that I can prove it by reflexivity, but I am using this as a test case for a more complicated goal involving arithmetic expressions that I need to simplify to numerals, where I don't know what the final result is going to be (or where there are too many different possibilities to list out).)  If I add either <code>nat.mul</code> or <code>has_zero.zero</code> to this list, then lean times out.  How do I finish this simplification?</p>",
        "id": 179406132,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572417038
    },
    {
        "content": "<p>Also, how do I unfold <code>list.partition._match_1</code>?  <code>simp only [list.partition._match_1]</code> seems to just always fail with <code>simplify tactic failed to simplify</code></p>",
        "id": 179406848,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572418202
    },
    {
        "content": "<p>Use <code>norm_num</code> for goals like this</p>",
        "id": 179408556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572420852
    },
    {
        "content": "<p><code>norm_num</code> does arithmetic with numerals; <code>simp</code> doesn't understand numerals and their normal forms</p>",
        "id": 179408576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572420914
    },
    {
        "content": "<p>Unfolding everything in sight is 99% of the time the wrong thing to do. Lemmas should exist to unfold one definition at a time, and theorems should not have to break through more than two layers of abstraction or so</p>",
        "id": 179408671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572421052
    },
    {
        "content": "<p>What is the more complex goal you are trying to solve? This looks like an XY problem to me</p>",
        "id": 179408717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572421091
    },
    {
        "content": "<p>can we write a meta-tactic that will use the correct tactic in each situation? :P</p>",
        "id": 179430648,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572441902
    },
    {
        "content": "<p>It's really hard for an outsider to know the correct tactic. You have some stupid question which involves multiplication by 2 on the naturals and everyone says\" Oh, it's Presburger, use <code>omega</code>\" or something -- and then you have some other question which involves multiplication too and <code>omega</code> doesn't work and then they say \"oh that's not Presburger, but <code>ring</code> will do that one obviously and you say \"but the naturals aren't a ring\" and they say \"yeah but it's shorter than <code>semiring</code>\", and then there's another one but neither <code>omega</code> or <code>ring</code> work and it turns out you need <code>linarith</code>. The mathematician proof of all of these is \"it's now obvious\", and we have difficulty expressing this exasperation in the language of tactics because for you it's several different kinds of obvious.</p>",
        "id": 179440591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572447637
    },
    {
        "content": "<p><code>tidy</code> already basically works like this. We could easily make a differently-configured <code>tidy</code> that just tries <code>norm_num</code>, <code>linarith</code>, <code>ring</code>, <code>omega</code> and shows you what worked (which <code>tidy</code> already knows how to do).</p>",
        "id": 179443136,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572448953
    },
    {
        "content": "<p>This is a good idea. It's probably best to call a version of <code>ring</code> that doesn't attempt to rewrite if it fails to close the goal. It may be worth thinking a little about which of these tactics \"fail fast\", and perhaps improve this.</p>",
        "id": 179452103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572454081
    },
    {
        "content": "<p>But doing this on top of <code>tidy</code> will just be a few lines.</p>",
        "id": 179452181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572454108
    },
    {
        "content": "<p>(On a related note, I have written a few proofs recently leaving the line <code>suggest</code> at the bottom of my <code>begin ... end</code> block as I work, and it can be pretty awesome... \"Oh, you're done! That goal too!\")</p>",
        "id": 179452276,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572454174
    },
    {
        "content": "<p>I don't like errors in my code so I often leave <code>sorry</code> at the end of every branch I've not filled in (say I'm in the middle of a big tactic mode proof). Do I just stop using <code>sorry</code> and start using <code>suggest</code>?</p>",
        "id": 179454737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572455761
    },
    {
        "content": "<p>I get <code>unknown identifier 'norm_num'</code>(I'm using lean installed from <a href=\"https://github.com/leanprover/lean/releases/download/v3.4.2/lean-3.4.2-linux.tar.gz\" target=\"_blank\" title=\"https://github.com/leanprover/lean/releases/download/v3.4.2/lean-3.4.2-linux.tar.gz\">https://github.com/leanprover/lean/releases/download/v3.4.2/lean-3.4.2-linux.tar.gz</a>)</p>",
        "id": 179455184,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572456057
    },
    {
        "content": "<p><code>norm_num</code> is a mathlib tactic. Try <code>import tactic.norm_num</code> at the top of your file.</p>",
        "id": 179455242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572456092
    },
    {
        "content": "<blockquote>\n<p>What is the more complex goal you are trying to solve? This looks like an XY problem to me</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm trying to perf-test lean's tactics for rewriting/partial evaluation on a goal for generating straightline-code for big integer field arithmetic for a fixed prime modulus on a fixed-width platform.  In particular, I'm trying to rewrite in <a href=\"https://github.com/mit-plv/fiat-crypto/blob/d801192d534a0c80eab74ef7874c38b7c84a0134/fiat_crypto.lean#L367\" target=\"_blank\" title=\"https://github.com/mit-plv/fiat-crypto/blob/d801192d534a0c80eab74ef7874c38b7c84a0134/fiat_crypto.lean#L367\">this goal</a> until everything except <code>let_in</code> and arithmetic definitions on non-numerals is unfolded, and I will also need to rewrite with <a href=\"https://github.com/mit-plv/fiat-crypto/blob/d801192d534a0c80eab74ef7874c38b7c84a0134/fiat_crypto.lean#L351\" target=\"_blank\" title=\"https://github.com/mit-plv/fiat-crypto/blob/d801192d534a0c80eab74ef7874c38b7c84a0134/fiat_crypto.lean#L351\"><code>this lemma</code></a> to lift binders so they don't block rewriting/reduction.  Additionally, there are a number of places where I'm doing a test on equality of <code>int</code>s which are numerals, and I need to reduce/rewrite/compute the test so that the <code>if</code> statement goes away.</p>",
        "id": 179455833,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572456373
    },
    {
        "content": "<blockquote>\n<p>(On a related note, I have written a few proofs recently leaving the line <code>suggest</code> at the bottom of my <code>begin ... end</code> block as I work, and it can be pretty awesome... \"Oh, you're done! That goal too!\")</p>\n</blockquote>\n<p>Isn't this super laggy? That's folding over the environment a lot.</p>",
        "id": 179455857,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572456385
    },
    {
        "content": "<p>Yes, it's slow, but not as slow as me, so sometimes it has time to say something helpful. :-)</p>",
        "id": 179456657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572456928
    },
    {
        "content": "<p>(This slowness also prompted me to wonder if I could parallelise <code>suggest</code>. Keeley says \"maybe\".)</p>",
        "id": 179456828,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572457046
    },
    {
        "content": "<p>I've now installed <code>mathlib</code>, <code>norm_num</code> seems to take forever to finish?  (Also, <code>Warning (flycheck): Syntax checker lean-checker reported too many errors (774) and is disabled.</code>)</p>",
        "id": 179467376,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572463148
    },
    {
        "content": "<p>Also <code>excessive memory consumption detected at 'replace' (potential solution: increase memory consumption threshold)</code>  (Edit: or maybe this was left over from a different file)</p>",
        "id": 179467530,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572463233
    },
    {
        "content": "<p>Do you know if you've got compiled <code>olean</code> files for mathlib?</p>",
        "id": 179467573,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572463271
    },
    {
        "content": "<p>Perhaps can you show us your <code>leanpkg.toml</code> file, and tell us what happens when you run <code>leanpkg build</code> on the command line in the root directory of your project?</p>",
        "id": 179467605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572463297
    },
    {
        "content": "<p>Did you install Lean and mathlib and then open a project directory in VS Code with mathlib as a dependency all following the instructions on the mathlib readme?</p>",
        "id": 179467731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572463372
    },
    {
        "content": "<p>Ah, it does in fact finish, it just takes 3 minutes to run</p>",
        "id": 179468134,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572463675
    },
    {
        "content": "<p>I don't seem to have olean files, but am trying <code>leanpkg build</code> now (it seems to be compiling mathlib)</p>",
        "id": 179468208,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572463705
    },
    {
        "content": "<p>The leanpkg.toml file:</p>\n<div class=\"codehilite\"><pre><span></span>$ leanpkg dump\n[package]\nname = &quot;fiat-crypto&quot;\nversion = &quot;0.1&quot;\nlean_version = &quot;3.4.2&quot;\npath = &quot;src-lean&quot;\n\n[dependencies]\nmathlib = {git = &quot;https://github.com/leanprover-community/mathlib.git&quot;, rev = &quot;ca9008153aaa6f16c7e2f691231b889dbb05a576&quot;}\n</pre></div>",
        "id": 179468235,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572463722
    },
    {
        "content": "<p>(And I'm using emacs, not vscode)</p>",
        "id": 179468256,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572463744
    },
    {
        "content": "<p>Ah, and now it's much faster, on the order of a couple of seconds</p>",
        "id": 179468305,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572463787
    },
    {
        "content": "<p>Is there a way to tell <code>norm_num</code> to not unfold some things?</p>",
        "id": 179468373,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572463813
    },
    {
        "content": "<p>I think <code>norm_num</code> is usually used as a finishing tactic, i.e. you tell it to kill the goal, you don't use it to get half way there. Or do you mean you want it to only work on one goal and it's working on all of them? That happens for some tactics (but I can't remember if <code>norm_num</code> is one of them). Fix with <code>{norm_num}</code> if this is the issue?</p>",
        "id": 179468924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572464231
    },
    {
        "content": "<p>No, I want to use something that doesn't finish the goal.  Here's a toy example: suppose I have something like <code>if &lt;complicated expression of int&gt; = &lt;other complicated expression of int&gt; then term1 else term2</code> and I want to reduce this to either <code>term1</code> or <code>term2</code>, what should I use to reduce the arithmetic on numerals, the decidable equality, and the if-then-else, but leave <code>term1</code> and <code>term2</code> mostly untouched (except for where they contain decidable equality / arithmetic as subterms)?</p>",
        "id": 179469225,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572464477
    },
    {
        "content": "<p>Start with <code>split_ifs</code>?</p>",
        "id": 179469391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572464631
    },
    {
        "content": "<p>You can probably do something like <code>rw [if_pos], norm_num</code> (unless you also have other <code>if</code> expressions)</p>",
        "id": 179469500,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572464703
    },
    {
        "content": "<p><code>split_ifs</code> gives me multiple goals; each decidable equality computes to either true or false.  I have multiple <code>if</code>s, some are true, and others are <code>false</code>.  How do I say \"rewrite with whichever of <code>if_pos</code> and <code>if_neg</code> can be solved by computing the decidable instance?</p>",
        "id": 179469708,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572464862
    },
    {
        "content": "<p>can you do <code>split_ifs</code> and then run <code>cases h</code> on the hypotheses <code>h</code> which are false? Or do you want something slicker?</p>",
        "id": 179469869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572464960
    },
    {
        "content": "<p>I expect there to be a couple hundred if statements, I don't want a couple thousand goals, especially not if I have to handle them manually...</p>",
        "id": 179469985,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572465018
    },
    {
        "content": "<p>Oh I see. You need a computer scientist, sorry ;-)</p>",
        "id": 179470000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572465034
    },
    {
        "content": "<p>Another question: How do I get <code>norm_num</code> to simplify my new definitions?  I noticed there is no <code>int.pow</code>, so I wrote </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span> <span class=\"o\">:=</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n    <span class=\"mi\">1</span>\n    <span class=\"o\">(</span><span class=\"bp\">Î»</span> <span class=\"bp\">_</span> <span class=\"n\">acc</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">acc</span><span class=\"o\">)</span>\n    <span class=\"n\">e</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">int_has_pow_nat</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">int</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">âŸ¨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat</span><span class=\"bp\">âŸ©</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span> <span class=\"bp\">â†’</span> <span class=\"bp\">â„¤</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_succ_of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">int</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"bp\">âŸ¨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow</span><span class=\"bp\">âŸ©</span>\n</pre></div>\n\n\n<p>but <code>norm_num</code> doesn't simplify it.</p>",
        "id": 179471538,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572465936
    },
    {
        "content": "<p>I'll take a look at your earlier questions in a bit and see if I have any hints. For the latest: you can tell <code>norm_num</code> to reduce definitions with square brackets, e.g. <code>norm_num [int.pow]</code>. For your example, that definition of <code>pow_nat</code> will get in the way.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"bp\">â„¤</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat</span> <span class=\"n\">k</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">int_has_pow_nat</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">int</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">âŸ¨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat</span><span class=\"bp\">âŸ©</span>\n\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span> <span class=\"bp\">â†’</span> <span class=\"bp\">â„¤</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_succ_of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">int</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"bp\">âŸ¨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow</span><span class=\"bp\">âŸ©</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">16</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[(</span><span class=\"err\">^</span><span class=\"o\">),</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 179472277,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572466410
    },
    {
        "content": "<p>I don't think the <code>simp</code> attributes you had on the instances will work, will they?</p>",
        "id": 179472410,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572466511
    },
    {
        "content": "<p>Why is it that <code>norm_num [(^), int.pow, int.pow_nat]</code> works for <code>(-2 : â„¤) ^ 0</code> but fails to reduce for <code>int.pow (-2 : â„¤) 0</code>?</p>",
        "id": 179472737,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572466768
    },
    {
        "content": "<p>(re <code>simp</code> on instances: idk, I'm still at the cargo-culting stage in learning lean)</p>",
        "id": 179472756,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572466795
    },
    {
        "content": "<p>Why is it that neither <code>norm_num</code> nor <code>simp</code> can deal with these definitions?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat&#39;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"bp\">â„¤</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat&#39;</span> <span class=\"n\">k</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat_rev</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span> <span class=\"bp\">â†’</span> <span class=\"bp\">â„¤</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_succ_of_nat</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat&#39;</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_succ_of_nat</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">e</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat_rev</span> <span class=\"n\">e</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat</span> <span class=\"mi\">2</span> <span class=\"mi\">16</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod</span><span class=\"o\">,</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat</span><span class=\"o\">,(</span><span class=\"err\">^</span><span class=\"o\">),</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat_rev</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n<span class=\"c1\">-- 18:1: tactic failed, there are unsolved goals</span>\n<span class=\"c1\">-- state:</span>\n<span class=\"c1\">-- âŠ¢ int.mod 1 (int.pow_nat_rev 16 2) = 0</span>\n</pre></div>",
        "id": 179478580,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572470355
    },
    {
        "content": "<p>Hm, and apparently <code>import tactic.norm_num</code> is enough to make <code>simp [(+)]</code> loop</p>",
        "id": 179478880,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572470537
    },
    {
        "content": "<p>Reported as <a href=\"https://github.com/leanprover-community/mathlib/issues/1637\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1637\">https://github.com/leanprover-community/mathlib/issues/1637</a></p>",
        "id": 179479199,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572470722
    },
    {
        "content": "<blockquote>\n<p>This is a good idea. It's probably best to call a version of <code>ring</code> that doesn't attempt to rewrite if it fails to close the goal.</p>\n</blockquote>\n<p>That would be the <code>ring1</code> tactic</p>",
        "id": 179485871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572476223
    },
    {
        "content": "<p>Note that simp can often be made to loop if you have lemmas that disagree about what normal form is</p>",
        "id": 179486384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572476670
    },
    {
        "content": "<p>you have to not only add a new thing but remove the old one if you want to avoid this</p>",
        "id": 179486396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572476690
    },
    {
        "content": "<p>I expect that <code>simp [(+)]</code> loops because there is a lemma in the default simp set that re-folds <code>int.add x y</code> to <code>x + y</code></p>",
        "id": 179486434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572476725
    },
    {
        "content": "<p>Power on integers is supported in <code>norm_num</code> via <code>monoid.pow</code>. You will have to import <code>algebra.group_power</code> but then you can just write <code>x ^ y</code> where <code>x : Z</code> and <code>y : N</code></p>",
        "id": 179486533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572476808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> re <code>algebra.group_power</code>: Thanks!</p>",
        "id": 179488076,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572478349
    },
    {
        "content": "<p>I also responded to leanprover-community/lean#76, I don't know if you still want to pursue it</p>",
        "id": 179488115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572478400
    },
    {
        "content": "<p>I replied on leanprover-community/lean#76; feel free to do whatever you think makes sense about the issue</p>",
        "id": 179488746,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572479008
    },
    {
        "content": "<p>You might have already figured it out, but the following works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">16</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 179489093,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572479295
    },
    {
        "content": "<p>are those integers?</p>",
        "id": 179489125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572479328
    },
    {
        "content": "<p>Good point, probably not. But the following also reduces to false:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">â„¤</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">16</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 179489178,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572479363
    },
    {
        "content": "<p>I was looking at \"but the following works\" and thinking \"is that actually _true_ though?\" Now I try it I see by \"works\" Floris means \"does not compile\" :D</p>",
        "id": 179489286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572479441
    },
    {
        "content": "<p>\"<code>norm_num</code> works\", which I think is what the question was. But in my second message I clarified it :)</p>",
        "id": 179489315,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572479489
    }
]