[
    {
        "content": "<p>Is directed/filtered categories in mathlib? Cant seem to find it in the category theory folder</p>",
        "id": 168076636,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1560453440
    },
    {
        "content": "<p>Nope, not yet. I think <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> has some stuff in his homotopy theory repo</p>",
        "id": 168076726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560453494
    },
    {
        "content": "<p>I think this would be a great project!</p>",
        "id": 168093006,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560467534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> what did you want to use them for?</p>",
        "id": 168230035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560647557
    },
    {
        "content": "<p>Nothing much really, I was just curious as to how/if they were defined in lean</p>",
        "id": 168411072,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1560871114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span>  One definition is at <a href=\"https://github.com/leanprover-community/mathlib/blob/filtered-colimits-2/src/category_theory/filtered.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/filtered-colimits-2/src/category_theory/filtered.lean\">https://github.com/leanprover-community/mathlib/blob/filtered-colimits-2/src/category_theory/filtered.lean</a>. That branch also has some facts about filtered colimits of sets starting at <a href=\"https://github.com/leanprover-community/mathlib/blob/filtered-colimits-2/src/category_theory/limits/types.lean#L100\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/filtered-colimits-2/src/category_theory/limits/types.lean#L100\">https://github.com/leanprover-community/mathlib/blob/filtered-colimits-2/src/category_theory/limits/types.lean#L100</a>.</p>",
        "id": 168412915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560872179
    },
    {
        "content": "<p>The main question is whether the notion of being filtered should be a Prop (as I made it there), a subsingleton (to maintain constructivity, while still being faithful to the fact that being filtered is a property in math, not additional structure), or really encode a <em>choice</em> of cocones on each relevant thing, so that the same category could have multiple distinct <code>filtered</code> structures.</p>",
        "id": 168413003,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560872233
    },
    {
        "content": "<p>Or perhaps more than one of these turns out to be useful</p>",
        "id": 168413024,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560872246
    },
    {
        "content": "<p>Thank you!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">cocone_objs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"132893\">@Ken Lee</span> this is a nice way to do the \"filtered\" criterion</p>",
        "id": 168417227,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1560875047
    },
    {
        "content": "<p>Me and <span class=\"user-mention\" data-user-id=\"132893\">@Ken Lee</span> tried to define it ourselves, and ended up defining it as a category with additional structure (not sure if that is what you mean by subsingleton), what would be the main difference between that and prop? To me as a math student they seem to be the \"same\".</p>",
        "id": 168417371,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1560875190
    },
    {
        "content": "<p>To make it a subsingleton you would use <code>trunc</code> of a sigma type in place of an exists. Or make a structure which contains all the choices and take a <code>trunc</code> of the whole thing.</p>",
        "id": 168417566,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560875333
    },
    {
        "content": "<p>A good example of a subsingleton that isn't a prop is <code>fintype</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">elems</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">complete</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">elems</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>The difference is that with this definition I can compute using the <code>finset</code> in question. For example <code>#eval fintype.elems bool</code> returns <code>{ff, tt}</code>, which I couldn't do with a mere proof that such a <code>finset</code> existed.</p>",
        "id": 168417780,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560875485
    },
    {
        "content": "<p>Right, and the advantage of a Prop is that you never have to worry about having two different (as in non-definitionally equal) values of the Prop, or something else depending on the proof of that Prop.</p>",
        "id": 168418048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560875647
    },
    {
        "content": "<blockquote>\n<p>To make it a subsingleton you would use <code>trunc</code> of a sigma type in place of an exists. Or make a structure which contains all the choices and take a <code>trunc</code> of the whole thing.</p>\n</blockquote>\n<p>What do you mean by trunc?</p>",
        "id": 168418181,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1560875748
    },
    {
        "content": "<p><code>trunc</code> is quotient by the always true relation. This is a computable version of <code>nonempty</code>. It maintains some computability since you can turn any constant computable function <code>X -&gt; Y</code> into a function <code>trunc X -&gt; Y</code> computably.</p>",
        "id": 168418353,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560875875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> as you may well know, in Lean all proofs of <code>P</code> are the same. So if <code>P : Prop</code> and then <code>h1 : P</code> and <code>h2 : P</code> then we will have <code>h1 = h2</code> (and the proof will be <code>rfl</code>). However there are other types which have exactly one term, and then it might be a theorem that two terms of that type are equal rather than being true by definition. And furthermore the terms might somehow store data, whereas a proof in Lean is checked by the kernel and then instantly forgotten about (Lean basically just puts a tick by the proposition to say \"this has been proved\"). A subsingleton is a type T for which you can prove that if <code>a : T</code> and <code>b : T</code> then <code>a = b</code>. Examples are propositions, but there are other examples too.</p>",
        "id": 168418640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560876030
    },
    {
        "content": "<p>So fintype, as <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> defined it, is a subsingleton since any two finite sets that contains exactly all terms of alpha are equal?</p>",
        "id": 168419221,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1560876453
    },
    {
        "content": "<p>Yes.</p>",
        "id": 168419611,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560876718
    },
    {
        "content": "<p>wow,  the type of cocone_objs... feels like cheating <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 168421296,
        "sender_full_name": "Ken Lee",
        "timestamp": 1560877864
    },
    {
        "content": "<p>This <code>exists ... ..., true</code> is a bit silly but I find it's often easier and clearer than alternatives</p>",
        "id": 168423611,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560878183
    },
    {
        "content": "<p>my feeling is that it's best to have <code>filtered_structure</code>, which unashamedly contains the data of a cone for each pair, etc, and then have a <code>filtered</code> typeclass which is just <code>trunc filtered_structure</code>.</p>",
        "id": 168458923,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560894911
    },
    {
        "content": "<p>I'm not so keen on the intermediate solution where each individual field of <code>filtered</code> is either an existential statement or <code>trunc</code>d data.</p>",
        "id": 168458954,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560894945
    },
    {
        "content": "<p>It's really a question of where you want to put the proof obligations of showing your construction didn't depend on the filtered structure.</p>",
        "id": 168459024,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560894975
    },
    {
        "content": "<p>You either have to do it every time you use a cone or equaliser, or once after a multi-step construction that uses several cones/equalisers.</p>",
        "id": 168459065,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560895018
    },
    {
        "content": "<p>(The first alternative is what you get if each field of <code>filtereed</code> is an existential or <code>trunc</code>. The second alternative is what you get if you <code>trunc</code> the entire structure.)</p>",
        "id": 168459103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560895046
    },
    {
        "content": "<p>My limited experience using <code>filtered</code> was that the second alternative was more pleasant to use --- and it's the sort of argument that feels like you should be able to automate away, so it's nice if it's all quarantined in one place.</p>",
        "id": 168459181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560895093
    }
]