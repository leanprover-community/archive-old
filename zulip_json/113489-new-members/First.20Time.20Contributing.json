[
    {
        "content": "<p>Hey there, I'd like to add the definition of rank of a set of vectors (<a href=\"https://github.com/leanprover-community/mathlib/wiki/Undergrad-TODO-trivial-targets\">https://github.com/leanprover-community/mathlib/wiki/Undergrad-TODO-trivial-targets</a>)  to mathlib,</p>\n<p>The definition of the rank of a set of vectors is the number of linearly independent vectors, so given the set { [1 0], [0 1], [a b], ... } it's rank is always going to be 2, whereas the rank of { [1 0 ] } is just 1.  Another way to figure it out is to take the span of those vectors and then take the rank of it as a vector space/module.</p>\n<p>so far I've followed this guide: <a href=\"https://leanprover-community.github.io/install/linux.html\">https://leanprover-community.github.io/install/linux.html</a> and I made my own branch with the changes </p>\n<p>So far my definition looks like this :</p>\n<p><a href=\"/user_uploads/3121/KT1Y7Knnc-ZM8Q7_GiiYfAhb/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KT1Y7Knnc-ZM8Q7_GiiYfAhb/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/KT1Y7Knnc-ZM8Q7_GiiYfAhb/image.png\"></a></div><p>You can see on online 1151 I replaced it with the new defn and it seems to work just fine. Should I replace all instances? </p>\n<p>Let me know if it looks good to do a pull request, and then I can try and push it to mathlib (after I get access).</p>",
        "id": 267111400,
        "sender_full_name": "ccn",
        "timestamp": 1641501642
    },
    {
        "content": "<p>I guess you might want to look at the statements below where you are and see if there's any more <code>finrank span</code> stuff which you can rephrase in this new way. You t also make a little API for the definition, eg. prove that if <code>s ⊆ t</code> then <code>hiv ≤ t.finrank</code> (probably this is. called set.finrank</p>",
        "id": 267114862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641503459
    },
    {
        "content": "<p>You should also edit the undergraduate.yaml file to add your definition to it. Once you feel you're ready, ask for push access to non-master branches of mathlib and post your GitHub userid</p>",
        "id": 267115663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641503800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/First.20Time.20Contributing/near/267114862\">said</a>:</p>\n<blockquote>\n<p>I guess you might want to look at the statements below where you are and see if there's any more <code>finrank span</code> stuff which you can rephrase in this new way. You should also make a little API for the definition, eg. prove that if <code>s ⊆ t</code> then <code>s.finrank ≤ t.finrank</code> (probably this is called <code>set.finrank_mono</code>)</p>\n</blockquote>\n<p>Ok, I'll try to do it! What does mono stand for? And this would just be a lemma right?</p>",
        "id": 267116354,
        "sender_full_name": "ccn",
        "timestamp": 1641504052
    },
    {
        "content": "<p>\"monotone\", aka \"increasing\"</p>",
        "id": 267116411,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641504085
    },
    {
        "content": "<p>You can also spell it <code>monotone finrank</code> by using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monotone\">docs#monotone</a></p>",
        "id": 267116446,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641504112
    },
    {
        "content": "<p>So I'm starting to work on the proof that <code>s.finrank K &lt;= t.finrank K</code> So far I<br>\nhave this sketch </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.finrank_mono</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">s.finrank</span> <span class=\"n\">K</span> <span class=\"bp\">≤</span> <span class=\"n\">t.finrank</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- We can prove that span s is a subset of span t using span_mono</span>\n  <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">span_mono</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Now I need to somehow use that with finrank</span>\n  <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">finrank_mono</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>span_mono:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">span_mono</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">span_le.2</span> <span class=\"bp\">$</span> <span class=\"n\">subset.trans</span> <span class=\"n\">h</span> <span class=\"n\">subset_span</span>\n</code></pre></div>\n<p>finrank_mono</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finrank_mono</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">hst</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">t.subtype</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">linear_equiv.finrank_eq</span> <span class=\"o\">(</span><span class=\"n\">comap_subtype_equiv_of_le</span> <span class=\"n\">hst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">submodule.finrank_le</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Thing is, that proof doesn't work too well: </p>\n<p><a href=\"/user_uploads/3121/wRogIiItwqQVOKp9t1VN5Rr0/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/wRogIiItwqQVOKp9t1VN5Rr0/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/wRogIiItwqQVOKp9t1VN5Rr0/image.png\"></a></div><p>Any tips to fix it?</p>",
        "id": 267118696,
        "sender_full_name": "ccn",
        "timestamp": 1641505408
    },
    {
        "content": "<p>Golf it down to one line. Then Lean will be able to figure all the types out.</p>",
        "id": 267119037,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641505591
    },
    {
        "content": "<p>Right now Lean can't guess that V is a vector space over K in <code>have x := span_mono h</code> because h can make it guess s and t and V, but not K. That's why you get all the extra goals. As Yael says, if you write the proof in term mode (<code>\\lam h, finrank_mono (span_mono h)</code>, like span_mono) then it should work.</p>",
        "id": 267119277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641505710
    },
    {
        "content": "<p>Also, this lemma is false, because finrank gives zero for infinite dim vector spaces. Are you assuming V is f.d. ahead of time?</p>",
        "id": 267119354,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641505756
    },
    {
        "content": "<p>If <code>span_mono</code> was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">span_mono</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>you could even use <code>span_mono.comp finrank_mono</code></p>",
        "id": 267119456,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641505804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/First.20Time.20Contributing/near/267119354\">said</a>:</p>\n<blockquote>\n<p>Also, this lemma is false, because finrank gives zero for infinite dim vector spaces. Are you assuming V is f.d. ahead of time?</p>\n</blockquote>\n<p>The file I'm working in is called <code>finite_dimensional</code> so I think it's good</p>",
        "id": 267119585,
        "sender_full_name": "ccn",
        "timestamp": 1641505875
    },
    {
        "content": "<p>The instances listed in your goal window don't show me anything about finite dimensionality</p>",
        "id": 267119723,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641505930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/First.20Time.20Contributing/near/267119037\">said</a>:</p>\n<blockquote>\n<p>Golf it down to one line. Then Lean will be able to figure all the types out.</p>\n</blockquote>\n<p>I made it into one line, it is still doesn't work out: <a href=\"/user_uploads/3121/yy7sG5TV82iK8sbN05jIdOUb/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yy7sG5TV82iK8sbN05jIdOUb/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/yy7sG5TV82iK8sbN05jIdOUb/image.png\"></a></div>",
        "id": 267119836,
        "sender_full_name": "ccn",
        "timestamp": 1641506004
    },
    {
        "content": "<p>Yup, because as Adam said you're missing the finite dimensionality assumption on the statement of your lemma.</p>",
        "id": 267119979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641506065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/First.20Time.20Contributing/near/267119723\">said</a>:</p>\n<blockquote>\n<p>The instances listed in your goal window don't show me anything about finite dimensionality</p>\n</blockquote>\n<p>I'm pretty new to this too, but I think it was defined at the top of the file like this: <a href=\"/user_uploads/3121/itWXmo_8ZwBeE6J7s2Afy1VF/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/itWXmo_8ZwBeE6J7s2Afy1VF/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/itWXmo_8ZwBeE6J7s2Afy1VF/image.png\"></a></div>",
        "id": 267119984,
        "sender_full_name": "ccn",
        "timestamp": 1641506068
    },
    {
        "content": "<p>This is a definition, not a variable declaration</p>",
        "id": 267120017,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641506089
    },
    {
        "content": "<p>You need <code>variables [finite_dimensional K V]</code></p>",
        "id": 267120048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641506109
    },
    {
        "content": "<p>Or add [finite_dimensional V] to the lemma itself</p>",
        "id": 267120085,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641506130
    },
    {
        "content": "<p>How are you making these nice screenshots with rectangles by the way?</p>",
        "id": 267120296,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641506233
    },
    {
        "content": "<p><a href=\"https://github.com/flameshot-org/flameshot\">https://github.com/flameshot-org/flameshot</a></p>",
        "id": 267120333,
        "sender_full_name": "ccn",
        "timestamp": 1641506253
    },
    {
        "content": "<p>Thanks to both of you it works out now!</p>",
        "id": 267120636,
        "sender_full_name": "ccn",
        "timestamp": 1641506392
    },
    {
        "content": "<p>Be careful if you're using <code>variable ...</code> to obtain this instance, because the assumption might not be necessary in the rest of the file.</p>",
        "id": 267120836,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641506455
    },
    {
        "content": "<p>If you work in a section, and put the variable inside, that should be okay</p>",
        "id": 267120918,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641506488
    },
    {
        "content": "<p>E.g. <code>finrank_span_le_card</code> doesn't need this assumption</p>",
        "id": 267121195,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641506626
    },
    {
        "content": "<p>I utilized the solution which adds it to the lemma itself, so I think it'll stay in the scope of the lemma.</p>\n<p>Also I am now trying to add a \"link\" to it via the <code>undergrad.yaml</code> file:</p>\n<p><a href=\"/user_uploads/3121/5cMvr6r9CxQedb2gD3JOe3Dp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5cMvr6r9CxQedb2gD3JOe3Dp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/5cMvr6r9CxQedb2gD3JOe3Dp/image.png\"></a></div><p>Since my definition looks like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">set.finrank</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">K</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>would I have to write <code>finite_dimensional.set.finrank</code> ?</p>",
        "id": 267121356,
        "sender_full_name": "ccn",
        "timestamp": 1641506727
    },
    {
        "content": "<p>Ok, so I think most things are in order</p>\n<p>my github account is this: <a href=\"https://github.com/cuppajoeman\">https://github.com/cuppajoeman</a></p>\n<p>could I have access to push to the repo?</p>",
        "id": 267121565,
        "sender_full_name": "ccn",
        "timestamp": 1641506857
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> (BTW please let me know if pinging you all whenever someone I'm \"mentoring\" asks for push access is not something you guys want me to be doing)</p>",
        "id": 267123456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641507810
    },
    {
        "content": "<p>Invite sent! <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>\n<p>(Pings are appreciated, on my part, at least.)</p>",
        "id": 267123710,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1641507972
    },
    {
        "content": "<p>I was hoping there would be some way to grant Kevin special \"add permissions for new users\" power without going through a ping, but github doesn't seem to support it</p>",
        "id": 267126906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641509996
    },
    {
        "content": "<p>We could write a zulip bots that checks whether kevin pinged maintainers and mentioned push access and a github user in the message :p</p>",
        "id": 267127093,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641510069
    },
    {
        "content": "<p>Looks like my pull request failed: <a href=\"/user_uploads/3121/DMgu8AqtbncsvPk8vehiAbHy/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DMgu8AqtbncsvPk8vehiAbHy/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/DMgu8AqtbncsvPk8vehiAbHy/image.png\"></a></div>",
        "id": 267127675,
        "sender_full_name": "ccn",
        "timestamp": 1641510440
    },
    {
        "content": "<p>What has failed is that you broke mathlib. If you changed a definition which was used elsewhere then I guess this would not be surprising, but if you didn't do this then that's bad luck. You can see which proof you broke. Can you fix it?</p>",
        "id": 267127844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641510545
    },
    {
        "content": "<p>I found the cause of the error: </p>\n<p>geometry/euclidean/monge_point.lean @ line 391</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An altitude is one-dimensional (i.e., a line). -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">finrank_direction_altitude</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">simplex</span> <span class=\"n\">ℝ</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"o\">((</span><span class=\"n\">s.altitude</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">direction</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">direction_altitude</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">submodule.finrank_add_inf_finrank_orthogonal</span>\n    <span class=\"o\">(</span><span class=\"n\">vector_span_mono</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">set.image_subset_range</span> <span class=\"n\">s.points</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">univ.erase</span> <span class=\"n\">i</span><span class=\"o\">))),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">univ.erase</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">card_erase_of_mem</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">add_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">s.independent.finrank_vector_span</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_fin</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"bp\">←</span> <span class=\"n\">finset.coe_image</span><span class=\"o\">,</span> <span class=\"n\">s.independent.finrank_vector_span_image_finset</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>with error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">set.finrank</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">simplex</span> <span class=\"n\">ℝ</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">s.points</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">s.points</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">s.altitude</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">direction</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">s.points</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>So what I think is happening is that instead of using the standard finrank that<br>\noperates on a module:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">finrank</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">module.rank</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span>\n</code></pre></div>\n<p>it's somehow using my new definition: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">set.finrank</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">K</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Even though in that proof they didn't use the <code>set.finrank</code> syntax</p>",
        "id": 267128578,
        "sender_full_name": "ccn",
        "timestamp": 1641510993
    },
    {
        "content": "<p>If the original <code>finrank</code> is in the root namespace then you can try <code>_root_.finrank</code> and see if it fixes the problem.</p>",
        "id": 267128659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641511068
    },
    {
        "content": "<p>You can also do <code>protected noncomputable def</code> (or is it <code>noncomputable protected def</code>?) for <code>set.finrank</code>. This means that <code>finrank</code> without anything else never means <code>set.finrank</code>, even if you open namespace <code>set</code> (you'd have to write <code>set.finrank</code> or <code>s.finrank</code> when <code>s : set _</code>).</p>",
        "id": 267128840,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641511189
    },
    {
        "content": "<p>Trying out Floris's solution, I just ran <code>leanproject build</code> how long does that usually take?</p>",
        "id": 267129416,
        "sender_full_name": "ccn",
        "timestamp": 1641511598
    },
    {
        "content": "<p>4 hours.</p>",
        "id": 267130353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641512284
    },
    {
        "content": "<p>Better to push and go to bed :-)</p>",
        "id": 267130363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641512294
    },
    {
        "content": "<p>o | o</p>",
        "id": 267130372,
        "sender_full_name": "ccn",
        "timestamp": 1641512301
    },
    {
        "content": "<p>Ok, I'll do the push</p>",
        "id": 267130437,
        "sender_full_name": "ccn",
        "timestamp": 1641512369
    },
    {
        "content": "<p>You can subscribe to <a class=\"stream\" data-stream-id=\"113538\" href=\"/#narrow/stream/113538-CI\">#CI</a> and see how long it took</p>",
        "id": 267131025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641512822
    },
    {
        "content": "<p>We hit 4 hours for the first time a couple of weeks ago</p>",
        "id": 267131059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641512861
    },
    {
        "content": "<p>So I've just been fixing up some of the other lemmas that depended on <code>finrank K (span K s)</code> and there's one that isn't working 100% </p>\n<p><code>finite_dimensional</code> @ 1177:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finrank_span_set_eq_card</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fin</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.finrank</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">s.to_finset.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">span_of_finite</span> <span class=\"n\">K</span> <span class=\"o\">⟨</span><span class=\"n\">fin</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">module.rank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">K</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">dim_span_set</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finrank_eq_dim</span><span class=\"o\">,</span> <span class=\"n\">cardinal.mk_fintype</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">set.to_finset_card</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">this</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It seems like since I changed line 1179 to use <code>s.finrank K</code> that what it's trying to prove becomes a little different and causes the proof that they had to not solve it anymore:</p>\n<p><a href=\"/user_uploads/3121/3uUmN7qYk6UtO_MsPVYAJj4m/Peek-2022-01-07-14-02.gif\">Peek-2022-01-07-14-02.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3uUmN7qYk6UtO_MsPVYAJj4m/Peek-2022-01-07-14-02.gif\" title=\"Peek-2022-01-07-14-02.gif\"><img src=\"/user_uploads/3121/3uUmN7qYk6UtO_MsPVYAJj4m/Peek-2022-01-07-14-02.gif\"></a></div><p>I think I would need to modify this line in some way: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">module.rank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">K</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">dim_span_set</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 267229054,
        "sender_full_name": "ccn",
        "timestamp": 1641582241
    },
    {
        "content": "<p>I tried this out to try to fix it, but it didn't work: <a href=\"/user_uploads/3121/Eh_ILlKR35PIWe7cbp5BhnlO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Eh_ILlKR35PIWe7cbp5BhnlO/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Eh_ILlKR35PIWe7cbp5BhnlO/image.png\"></a></div>",
        "id": 267229346,
        "sender_full_name": "ccn",
        "timestamp": 1641582372
    },
    {
        "content": "<p>You might find you want to define <code>s.rank K</code> to match <code>s.finrank K</code></p>",
        "id": 267232243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641583870
    },
    {
        "content": "<p>Ah I see what you're hinting at</p>",
        "id": 267236397,
        "sender_full_name": "ccn",
        "timestamp": 1641585837
    },
    {
        "content": "<p>Would <code>section rank</code> be a good place to store this? <a href=\"/user_uploads/3121/WK5w674IiLlbHWqaAal5i5s_/Peek-2022-01-07-15-11.gif\">Peek-2022-01-07-15-11.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WK5w674IiLlbHWqaAal5i5s_/Peek-2022-01-07-15-11.gif\" title=\"Peek-2022-01-07-15-11.gif\"><img src=\"/user_uploads/3121/WK5w674IiLlbHWqaAal5i5s_/Peek-2022-01-07-15-11.gif\"></a></div>",
        "id": 267237222,
        "sender_full_name": "ccn",
        "timestamp": 1641586264
    },
    {
        "content": "<p>My definition of <code>s.finrank K</code> was in <code>section span</code> of <code>finite_dimensional.lean</code> maybe, I should make a similar section in <code>dimension.lean</code> (that's where rank is stored) but there is no section about span there. What do you think</p>",
        "id": 267237418,
        "sender_full_name": "ccn",
        "timestamp": 1641586392
    },
    {
        "content": "<p>Just an idea, I think it's easier for people to provide more precise feedback once you actually open the PR <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 267238364,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641586935
    },
    {
        "content": "<p>It's already open I think?</p>",
        "id": 267238398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641586958
    },
    {
        "content": "<p>I'm starting to think though that the right thing to do might be to not change any other lemmas at all, and add <code>set.finrank</code> solely for the purpose of the undergrad yaml</p>",
        "id": 267238587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641587053
    },
    {
        "content": "<p>Because otherwise you can't apply lemmas like <code>submodule.span_image</code> to <code>(e '' s).finrank</code>, which you could apply to <code>finrank (span R (e '' s))</code></p>",
        "id": 267238689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641587128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/First.20Time.20Contributing/near/267238398\">said</a>:</p>\n<blockquote>\n<p>It's already open I think?</p>\n</blockquote>\n<p>It is already open: <a href=\"https://github.com/leanprover-community/mathlib/pull/11290\">https://github.com/leanprover-community/mathlib/pull/11290</a></p>",
        "id": 267238801,
        "sender_full_name": "ccn",
        "timestamp": 1641587182
    },
    {
        "content": "<p>You can write <a href=\"https://github.com/leanprover-community/mathlib/pull/11290\">#11290</a> in Zulip and it will link it for you :)</p>",
        "id": 267238834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641587207
    },
    {
        "content": "<p>Oh neat</p>",
        "id": 267238841,
        "sender_full_name": "ccn",
        "timestamp": 1641587220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/First.20Time.20Contributing/near/267238587\">said</a>:</p>\n<blockquote>\n<p>I'm starting to think though that the right thing to do might be to not change any other lemmas at all, and add <code>set.finrank</code> solely for the purpose of the undergrad yaml</p>\n</blockquote>\n<p>Yeah, it looks like it might need some design work to make it fit in with all the other existing proofs, It should still be useful though right? For future proof writers?</p>",
        "id": 267239434,
        "sender_full_name": "ccn",
        "timestamp": 1641587537
    },
    {
        "content": "<p>For the rollback would you want me to remove it from all of the proofs or just the ones it isn't compatible with right now?</p>",
        "id": 267239747,
        "sender_full_name": "ccn",
        "timestamp": 1641587743
    },
    {
        "content": "<p>I'm suggesting remove it from everywhere, but I'd encourage getting more opinions first</p>",
        "id": 267243514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641589957
    },
    {
        "content": "<p>I'm getting this issue: <a href=\"/user_uploads/3121/vXcjLziPllWhlKCQyVbxs0oA/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vXcjLziPllWhlKCQyVbxs0oA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/vXcjLziPllWhlKCQyVbxs0oA/image.png\"></a></div><p>Here's the definition I have right now: </p>\n<p><code>finite_dimensional.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The rank of a set of vectors as a natural number. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">set.finrank</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">K</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 267314996,
        "sender_full_name": "ccn",
        "timestamp": 1641675356
    },
    {
        "content": "<p>Is your declaration in the finite_dimensional namespace? If it isn't contained within the lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">finite_dimensional</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span> <span class=\"n\">finite_dimensional</span>\n</code></pre></div>\n<p>it's name will just be <code>set.finrank</code> no matter which file it is in</p>",
        "id": 267315340,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641675753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/First.20Time.20Contributing/near/267315340\">said</a>:</p>\n<blockquote>\n<p>Is your declaration in the finite_dimensional namespace? If it isn't contained within the lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">finite_dimensional</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span> <span class=\"n\">finite_dimensional</span>\n</code></pre></div>\n<p>it's name will just be <code>set.finrank</code> no matter which file it is in</p>\n</blockquote>\n<p>Ah you're correct it is outside of that scope, I've made the modifications so hopefully it will pass the CI tests now, thanks</p>",
        "id": 267315491,
        "sender_full_name": "ccn",
        "timestamp": 1641675955
    }
]