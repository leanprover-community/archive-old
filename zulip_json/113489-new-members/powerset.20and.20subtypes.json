[
    {
        "content": "<p>Is there a way to connect the subtype <code>{B // B ⊆ A}</code> with the set <code>A.powerset</code> so as to prove the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">card_and_subtype_difficulty</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"bp\">//</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n<span class=\"n\">function.injective</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span>\n<span class=\"n\">A.powerset.card</span> <span class=\"bp\">≤</span> <span class=\"n\">F.card</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Or would it be possible to just directly say <code>{B // B ⊆ A}).card ≤ {C : finset V // C ∈ F}.card</code> somehow?</p>",
        "id": 252963201,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1631427415
    },
    {
        "content": "<p>I'm not at lean right now but it seems to me that the result you want follows from more primitive results such as if <code>f : X -&gt; Y</code> is injective then card X &lt;= card Y and so on. What you seem to need is a bijection between your subtype and A.powerset. This bijection will have an explicit two-sided inverse so you can use <code>equiv</code> to do this. Is <code>A.powerset</code> really a set?</p>",
        "id": 252966639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631431441
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.powerset\">docs#finset.powerset</a></p>",
        "id": 252966683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631431458
    },
    {
        "content": "<p>It's a finset so it can be promoted to a type and you could write down an equiv between it and your type of subsets. Will probably be slightly fiddly</p>",
        "id": 252966839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631431666
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> . Maybe there's a way to avoid <code>powerset</code> altogether and just talk about cardinality of types?</p>",
        "id": 252967112,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1631431974
    },
    {
        "content": "<p>Sure, there's something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.card\">docs#nat.card</a></p>",
        "id": 252967292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631432177
    },
    {
        "content": "<p>Somehow I'm not able to import <code>set_theory.fincard</code> even though I can import <code>set_theory.cardinal</code>... and when I drop the <code>set_theory.fincard</code> file into my directory then it has errors like <code>invalid field notation, 'to_nat' is not a valid \"field\" because environment does not contain 'cardinal.to_nat'\n  mk α\nwhich has type\n  cardinal</code></p>",
        "id": 253002732,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1631470553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347475\">@Bjørn Kjos-Hanssen</span>  In case you're still stuck, here's a proof of your lemma:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.powerset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">card_and_subtype_difficulty</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"bp\">//</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n<span class=\"n\">function.injective</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span>\n<span class=\"n\">A.powerset.card</span> <span class=\"bp\">≤</span> <span class=\"n\">F.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A.powerset.card</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">F.card</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">cardinal.nat_cast_le</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A.powerset.card</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cardinal.mk</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"bp\">//</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cardinal.finset_card</span><span class=\"o\">,</span> <span class=\"n\">cardinal.eq</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">B</span> <span class=\"k\">with</span> <span class=\"n\">B</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">finset.mem_powerset</span> <span class=\"n\">at</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hB</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset.mem_powerset</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">B.2</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F.card</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cardinal.mk</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"bp\">//</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cardinal.finset_card</span><span class=\"o\">,</span> <span class=\"n\">cardinal.eq</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">B.2</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">B.2</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cardinal.mk_le_of_injective</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>\n<p>This will also show you how to go between <code>finset.card</code> and <code>cardinality</code>, and the names of some lemmas that help proving that cardinals are equal.</p>",
        "id": 253009018,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631477414
    },
    {
        "content": "<p>This lemma can probably be golfed into just a few lines, but this proof is probably a bit more readable.</p>",
        "id": 253009053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631477482
    },
    {
        "content": "<p>Oh my. I'll use this, and maybe with time start to understand it! For now I do get an error though, <code>rewrite tactic failed, did not find instance of the pattern in the target expression  ?m_2 ∈ powerset ?m_3</code> at the line <code>rw finset.mem_powerset at hB, exact hB</code></p>",
        "id": 253009688,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1631478191
    },
    {
        "content": "<p>Oh strange... Maybe I was using an old version of mathlib?</p>",
        "id": 253009807,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631478355
    },
    {
        "content": "<p>Let me double check...</p>",
        "id": 253009864,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631478389
    },
    {
        "content": "<p>No, it works for me just fine. Could be a namespace issue?</p>",
        "id": 253009967,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631478505
    },
    {
        "content": "<p>Are you using this in a large file with more imports perhaps?</p>",
        "id": 253009983,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631478535
    },
    {
        "content": "<p>E.g. there may be a conflict with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.powerset\">docs#set.powerset</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.powerset\">docs#finset.powerset</a> if both the <code>finset</code> and <code>set</code> namespaces are open.</p>",
        "id": 253010010,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631478567
    },
    {
        "content": "<p>Actually I pasted your code in a blank file  now and it has the same error. My installation of Lean, VS Code, mathlib etc. is from about a year ago if that helps.</p>",
        "id": 253010130,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1631478707
    },
    {
        "content": "<p>But I see that your code works in the Lean Web Editor <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span></p>",
        "id": 253010223,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1631478804
    },
    {
        "content": "<p>Oh, you probably need to upgrade mathlib. Do you have mathlib-tools installed? If so, you can use the command <code>leanproject upgrade-mathlib</code> (but be prepared for some code to break if your current mathlib is ~1 year old)</p>",
        "id": 253010399,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631478991
    },
    {
        "content": "<p>Here's a reasonably golfed proof of this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.powerset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">card_and_subtype_difficulty</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"bp\">//</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n<span class=\"n\">function.injective</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span>\n<span class=\"n\">A.powerset.card</span> <span class=\"bp\">≤</span> <span class=\"n\">F.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">cardinal.nat_cast_le</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">cardinal.mk_le_of_injective</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cardinal.finset_card</span><span class=\"o\">,</span> <span class=\"n\">cardinal.eq</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_powerset</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">B.2</span><span class=\"o\">⟩,</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_powerset</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">B.2</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">cardinal.finset_card</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 253012852,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631481830
    }
]