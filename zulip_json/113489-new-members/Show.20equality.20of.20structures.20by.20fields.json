[
    {
        "content": "<p>I have a structure</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">SystemState</span> <span class=\"n\">where</span>\n  <span class=\"n\">evenCount</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">oddCount</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>and I have defined</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">emptyState</span> <span class=\"o\">:</span> <span class=\"n\">SystemState</span>\n  <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">evenCount</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">oddCount</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I am writing a proof where I have a SystemState S, and have that S.evenCount = 0 and S.oddCount = 0. How do I show that S = emptyState?</p>",
        "id": 319237497,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1672765048
    },
    {
        "content": "<p>Do cases on S and on emptyState, and then it should reduce to what you know. I don't know whether <code>@[ext]</code> has been ported to mathlib4 yet, but in Lean 3 + mathlib you could tag structures with <code>@[ext]</code> and then you could also use the <code>ext</code> tactic to reduce a goal <code>S = emptyState</code> to precisely what you have.</p>",
        "id": 319244967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672767189
    },
    {
        "content": "<p>Thanks, ext seems to work</p>",
        "id": 319272129,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1672776744
    }
]