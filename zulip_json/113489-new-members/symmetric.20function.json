[
    {
        "content": "<p>I have the following setup:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">forall</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>In the special case of <code>B</code> being <code>Prop</code>, I know that I can restate the above as <code>symmetric f</code>. Is there a corresponding general version of <code>symmetric</code> that will work for any <code>B</code>?</p>\n<p>I also discovered that for some reason, library search doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">suggest</span>  <span class=\"c1\">-- doesn&#39;t work</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>  <span class=\"c1\">-- doesn&#39;t work</span>\n</pre></div>",
        "id": 191400679,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584889910
    },
    {
        "content": "<p>That looks like <code>commutative</code></p>",
        "id": 191400821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584890079
    },
    {
        "content": "<p>but that might also be special cased to <code>B = A</code></p>",
        "id": 191400838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584890104
    },
    {
        "content": "<p>I think that whole section of core is due for an update</p>",
        "id": 191400942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584890245
    },
    {
        "content": "<p>Yes, <code>commutative</code> is close but not quite right. I definitely want <code>B â‰  A</code>. Any idea why the <code>suggest</code> doesn't work?</p>",
        "id": 191401576,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584891020
    },
    {
        "content": "<p>What is <code>Sort</code> by the way? Isn't it defeq to <code>Prop</code> or something?</p>",
        "id": 191402893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584892815
    },
    {
        "content": "<p>it is <code>Prop</code></p>",
        "id": 191403514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584893820
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">Sort</span> <span class=\"c1\">-- Prop : Type</span>\n</pre></div>",
        "id": 191403531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584893859
    },
    {
        "content": "<p>Technically <code>Prop</code> is a notation for <code>Sort</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"kt\">Prop</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">Sort</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 191403594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584893928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"241485\">@Vaibhav Karve</span> are you aware of this? You say \"in the special case of <code>B</code> being <code>Prop</code>\" but <code>Prop</code> is not allowed as a value for <code>B</code> in what you say, strictly speaking.</p>",
        "id": 191404337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584895045
    },
    {
        "content": "<p>Yes, Kevin, I was aware of this. In my attempt to write a MWE, I went too far. I was actually looking for a simple analogue of <code>symmetric</code> that would work for <code>Sort u</code>, not just <code>Sort</code>.</p>",
        "id": 191410098,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584902794
    },
    {
        "content": "<p>You can just write <code>Sort*</code> if you don't want to declare the universe - or even nothing at all, that is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">forall</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>This is my favorite way to write theorems. It's compact, maximally general and there is nothing to mess up</p>",
        "id": 191410544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584903281
    },
    {
        "content": "<p>Thanks for teaching me this new trick. I did not know that omitting the type is the same as writing <code>Sort*</code> (provided there aren't other type-inferences, ofcourse).</p>",
        "id": 191411409,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584904464
    }
]