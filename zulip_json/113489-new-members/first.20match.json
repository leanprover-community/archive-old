[
    {
        "content": "<p>For context, I'm following an exposition about random walks on the integers. I'm trying to talk about \"the first time that position is k\" , but it's possible that position doesn't hit k within the allotted time N, in which case \"the first time\" could be N+1 or infinity or something. Lean wants me to say <code>[decideable s = {}]</code> (\"you'll know if position hits k or not\") but I heard it's good to avoid <code>decideable</code> when possible. What should I do? </p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>import data.nat.basic\nimport data.set.basic\nimport data.finset.basic\n\nopen set nat real finset\n\nopen_locale big_operators\n\nnoncomputable theory\n\nuniverse u\n\nvariable α : set ℕ\n\ndef first_at (N :ℕ) (position : ℕ → ℕ) (k : ℕ) : ℕ :=\nlet s := {n : ℕ | n &lt; N ∧ position n = k}\nin cond (s = {}) N (inf s)\n</code></pre></div>",
        "id": 214670194,
        "sender_full_name": "Iocta",
        "timestamp": 1603786245
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 214670483,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603786480
    },
    {
        "content": "<p>you need a newline after the starting triple backtick</p>",
        "id": 214670506,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603786505
    },
    {
        "content": "<p>if you don't care about decidability, just put <code>open_locale classical</code></p>",
        "id": 214670517,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603786522
    },
    {
        "content": "<p><code>cond</code> is for <code>bool</code>, whereas <code>if .. then .. else ..</code> is for <code>Prop</code>s</p>",
        "id": 214670759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603786722
    },
    {
        "content": "<p>Which one do I want here?</p>",
        "id": 214670776,
        "sender_full_name": "Iocta",
        "timestamp": 1603786743
    },
    {
        "content": "<p><code>s = {}</code> is a <code>Prop</code></p>",
        "id": 214670785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603786752
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.probability_mass_function</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">nat</span> <span class=\"n\">real</span> <span class=\"n\">finset</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first_at</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">position</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">position</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n<span class=\"k\">in</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{})</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">inf</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214670888,
        "sender_full_name": "Iocta",
        "timestamp": 1603786810
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">inf</span> <span class=\"n\">s</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">s</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">finset</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 214670913,
        "sender_full_name": "Iocta",
        "timestamp": 1603786833
    },
    {
        "content": "<p>If you want Lean to be able to compute <code>first_at</code>, then I suggest that you use <code>(finset.range N).filter (\\lam n, position n = k)</code></p>",
        "id": 214670914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603786835
    },
    {
        "content": "<p>There you go, so that's another argument for using <code>finset</code></p>",
        "id": 214670936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603786857
    },
    {
        "content": "<p>You could then write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"k\">then</span> <span class=\"n\">s.inf'</span> <span class=\"n\">hs</span> <span class=\"k\">else</span> <span class=\"n\">N</span>\n</code></pre></div>\n\n<p>on the final line</p>",
        "id": 214670980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603786915
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">first_at'</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">position</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">position</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"k\">in</span> <span class=\"k\">if</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"k\">then</span> <span class=\"n\">s.inf'</span> <span class=\"n\">hs</span> <span class=\"k\">else</span> <span class=\"n\">N</span>\n\n<span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">inf''</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"s2\">\"field\"</span> <span class=\"n\">because</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">finset.inf''</span>\n  <span class=\"n\">s</span>\n<span class=\"n\">which</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">finset</span> <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 214671586,
        "sender_full_name": "Iocta",
        "timestamp": 1603787390
    },
    {
        "content": "<p>Oops, my bad. I guess it is <code>s.min' hs</code></p>",
        "id": 214671669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603787450
    },
    {
        "content": "<p>ah that works</p>",
        "id": 214671693,
        "sender_full_name": "Iocta",
        "timestamp": 1603787474
    },
    {
        "content": "<p>Or <code>nat.find</code></p>",
        "id": 214671884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603787592
    },
    {
        "content": "<p>something like <code>first_at' N position k := nat.find (\\lam n, n &lt; N -&gt; position n = k)</code></p>",
        "id": 214672005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603787689
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 214672558,
        "sender_full_name": "Iocta",
        "timestamp": 1603788131
    },
    {
        "content": "<p>it's not hard to prove that <code>N</code> is a witness for the existential</p>",
        "id": 214672627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603788195
    }
]