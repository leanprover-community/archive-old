[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span>  <span class=\"n\">Model4</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Model4</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model4</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test6</span><span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">reflexivity</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test7</span><span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">reflexivity</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>test6 works fine, showing that the basic setup is OK,  but test7  fails, <br>\n\"don't know how to synthesize placeholder\"</p>",
        "id": 209230773,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599407784
    },
    {
        "content": "<p>Lean needs some way to know what <code>K</code>'s <code>c</code> you're talking about. For example, <code>(c : K) = c</code> should work.</p>",
        "id": 209231328,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599408670
    },
    {
        "content": "<p>Thank you Reid.   I tried that before,  but without the parentheses.   That is,   c:K = c  does not work, but (c:K) = c does work, as you said.</p>",
        "id": 209232002,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599409872
    },
    {
        "content": "<p>I think <code>c : K</code> without parentheses is not valid syntax.</p>",
        "id": 209233066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599411725
    }
]