[
    {
        "content": "<p>Where tt_ctx is a finmap.</p>\n<p>I'm guessing this is done with congruence, however, I don't know the exact procedure to solve this, and library_search doesn't find anything (maybe I'm stating it wrong?)</p>",
        "id": 229909078,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615490319
    },
    {
        "content": "<p><code>rintros ha hb rfl, contradicton</code></p>",
        "id": 229910049,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615490660
    },
    {
        "content": "<p>Or longer, <code>intros ha hb heq, rw heq at ha, exact hb ha,</code></p>",
        "id": 229910207,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615490724
    },
    {
        "content": "<p>First version works, but what does the rfl at the end do?<br>\n(the second version doesn't seem to work on my end)</p>",
        "id": 229911504,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615491213
    },
    {
        "content": "<p>It rewrites with <code>a=b</code></p>",
        "id": 229911667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615491258
    },
    {
        "content": "<p>Try now - I was rewriting in the wrong direction. <code>rintro rfl</code> does <code>intro heq, subst a</code></p>",
        "id": 229912000,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615491417
    },
    {
        "content": "<p>Thank you! now I understand it!</p>",
        "id": 229912702,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615491676
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne_of_mem_of_not_mem\">ne_of_mem_of_not_mem</a></p>",
        "id": 229998582,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615541129
    }
]