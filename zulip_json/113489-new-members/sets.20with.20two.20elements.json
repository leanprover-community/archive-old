[
    {
        "content": "<p>Dear All,</p>\n<p>I have managed to find a very convoluted proof of what I think of as a very simple fact.  Can anyone suggest a proof of the lemma below?</p>\n<p>I am happy to be embarrassed by showing my proof, although I am not doing it right away, in order not to lead anyone astray...  I will post it, if you ask, though!</p>\n<p>Thank you very much!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">card_two</span> <span class=\"o\">{</span><span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">sup</span> <span class=\"bp\">≠</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208698356,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598971983
    },
    {
        "content": "<p>(The reason that I would like a shorter proof is that at the moment, Lean times out every time I try to continue with my proofs...)</p>",
        "id": 208698573,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598972060
    },
    {
        "content": "<p>I was going to say your lemma doesn't look like it would type check but I guess it actually does.</p>",
        "id": 208699314,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598972364
    },
    {
        "content": "<p>Did you really prove it as a top-level lemma in this form?</p>",
        "id": 208699342,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598972372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/sets.20with.20two.20elements/near/208699342\">said</a>:</p>\n<blockquote>\n<p>Did you really prove it as a top-level lemma in this form?</p>\n</blockquote>\n<p>I did prove it, but I am not really proud of my proof:</p>",
        "id": 208699387,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598972401
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">card_two</span> <span class=\"o\">{</span><span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">sup</span> <span class=\"bp\">≠</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">sne</span> <span class=\"o\">:</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_pos</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n            <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">two_pos</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">ineq</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"n\">sup</span> <span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span><span class=\"o\">)},</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">chip</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">cinsup</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">sup</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">set_of_mem</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">clemax</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">le_max&#39;</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span> <span class=\"n\">c</span> <span class=\"n\">cinsup</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">minlec</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;_le</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span> <span class=\"n\">c</span> <span class=\"n\">cinsup</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">ineq</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span><span class=\"o\">)}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span><span class=\"o\">)},</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">set_of_eq_eq_singleton</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">set_of_mem</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n            <span class=\"n\">ext</span><span class=\"o\">,</span>\n            <span class=\"n\">split</span><span class=\"bp\">;</span><span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"n\">omega</span><span class=\"o\">},</span>\n        <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">ineq</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">set_of_eq_eq_singleton</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">set_of_mem</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">consingle</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"n\">sup</span> <span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span><span class=\"o\">},</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">set_of_mem</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">supfintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"n\">sup</span> <span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">refine</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n            <span class=\"n\">refine</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">subset</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"n\">dd</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"n\">sup</span> <span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">dd</span><span class=\"o\">},</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">set_of_mem</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">finite_to_set</span> <span class=\"n\">sup</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">supfinite</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"n\">sup</span> <span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">subset</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"n\">dd</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"n\">sup</span> <span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">dd</span><span class=\"o\">},</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">set_of_mem</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">finite_to_set</span> <span class=\"n\">sup</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">supins</span> <span class=\"o\">:</span> <span class=\"n\">sup</span> <span class=\"bp\">=</span> <span class=\"n\">supfinite</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">finite_to_set_to_finset</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">set_of_mem</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">singlefinite</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sne</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_pure</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">supfinite</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"n\">singlefinite</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_of_subset</span><span class=\"o\">,</span>\n            <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ah</span><span class=\"o\">,</span>\n            <span class=\"n\">refine</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_def</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n            <span class=\"n\">refine</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_map</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n            <span class=\"n\">tidy</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n    <span class=\"k\">let</span> <span class=\"n\">singsing</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">singsingfinite</span> <span class=\"o\">:</span> <span class=\"n\">singsing</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_singleton</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">eq1</span> <span class=\"o\">:</span> <span class=\"n\">singlefinite</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_eq_one</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n            <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"n\">sne</span><span class=\"o\">),</span>\n            <span class=\"n\">ext1</span><span class=\"o\">,</span>\n            <span class=\"n\">split</span><span class=\"bp\">;</span>\n                <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">xx</span><span class=\"o\">,</span><span class=\"n\">finish</span><span class=\"o\">,},</span>\n        <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eq1</span> <span class=\"n\">at</span> <span class=\"n\">le</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">careq</span> <span class=\"o\">:</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">supfinite</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">supins</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">careq</span> <span class=\"n\">at</span> <span class=\"n\">le</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208699497,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598972434
    },
    {
        "content": "<p><del>(I am not sure whether I need more <code>imports</code> for the proof to go through: I produced the <code>mwe</code> with only the statement)</del><br>\nI just checked that there is the need for no other <code>import</code>s.</p>",
        "id": 208699657,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598972503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/sets.20with.20two.20elements/near/208699342\">said</a>:</p>\n<blockquote>\n<p>Did you really prove it as a top-level lemma in this form?</p>\n</blockquote>\n<p>Btw, what does \"top-level lemma\" means?</p>",
        "id": 208699925,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598972605
    },
    {
        "content": "<p>Not part of another proof</p>",
        "id": 208700083,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598972650
    },
    {
        "content": "<p>well, this lemma is supposed to be part of another proof...  ahahah!  so I guess that it is a \"bottom-level lemma\"!</p>",
        "id": 208700169,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598972683
    },
    {
        "content": "<p>Here's a more efficient proof</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">card_two</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">sne</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_pos</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">min</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">s</span> <span class=\"n\">sne</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">s</span> <span class=\"n\">sne</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"bp\">=</span> <span class=\"n\">max</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">max</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">min</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">le_max&#39;</span> <span class=\"n\">s</span> <span class=\"n\">sne</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;_le</span> <span class=\"n\">s</span> <span class=\"n\">sne</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_one_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208701208,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598973070
    },
    {
        "content": "<p><code>finset.le_max'</code> seems to have spurious assumptions.</p>",
        "id": 208701363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598973126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/sets.20with.20two.20elements/near/208701208\">said</a>:</p>\n<blockquote>\n<p>Here's a more efficient proof</p>\n</blockquote>\n<p>Thank you so much!!!</p>",
        "id": 208701416,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598973149
    },
    {
        "content": "<p>I will try to understand why your proof works, but for the moment, I will continue with what I was doing!</p>",
        "id": 208701452,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598973168
    },
    {
        "content": "<p>The main step is to guess that something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_le_one_iff\">docs#finset.card_le_one_iff</a> already exists</p>",
        "id": 208701545,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598973207
    },
    {
        "content": "<p>Here is my proof, without looking at the one by Reid. I haven't made golfing attempts yet.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">card_two</span> <span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">sup</span> <span class=\"bp\">≠</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">or_iff_not_imp_left</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_eq_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_iff_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_pos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">eq_singleton_iff_unique_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">sup</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">sup</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"bp\">;</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">le_max&#39;</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">min&#39;_le</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208701679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598973249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/sets.20with.20two.20elements/near/208701545\">said</a>:</p>\n<blockquote>\n<p>The main step is to guess that something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_le_one_iff\">docs#finset.card_le_one_iff</a> already exists</p>\n</blockquote>\n<p>It always seems to simple, when someone else points it out to me...</p>",
        "id": 208701803,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598973307
    },
    {
        "content": "<p>The assumption is calling to be formulated in terms of <code>nontrivial</code> (which is equivalent to your assumption thanks to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.one_lt_card_iff_nontrivial\">docs#fintype.one_lt_card_iff_nontrivial</a> )</p>",
        "id": 208701827,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1598973315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/sets.20with.20two.20elements/near/208701545\">said</a>:</p>\n<blockquote>\n<p>The main step is to guess that something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_le_one_iff\">docs#finset.card_le_one_iff</a> already exists</p>\n</blockquote>\n<p>What does <code>Type*</code> mean?</p>",
        "id": 208701858,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598973325
    },
    {
        "content": "<p>Golfed</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">card_two</span> <span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">sup</span> <span class=\"bp\">≠</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_one_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">sup</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">sup</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"bp\">;</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">le_max&#39;</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">min&#39;_le</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208701893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598973340
    },
    {
        "content": "<p>Oh, now I understand what you mean about extraneous assumptions</p>",
        "id": 208702190,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598973398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/sets.20with.20two.20elements/near/208701858\">said</a>:</p>\n<blockquote>\n<p>What does <code>Type*</code> mean?</p>\n</blockquote>\n<p><code>Type _</code>, in other words: \"Hey lean, figure out the universe yourself\"</p>",
        "id": 208702217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598973404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/sets.20with.20two.20elements/near/208701893\">said</a>:</p>\n<blockquote>\n<p>Golfed</p>\n</blockquote>\n<p>Wow!  This proof is also very short!</p>",
        "id": 208702258,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598973411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/sets.20with.20two.20elements/near/208702217\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/sets.20with.20two.20elements/near/208701858\">said</a>:</p>\n<blockquote>\n<p>What does <code>Type*</code> mean?</p>\n</blockquote>\n<p><code>Type _</code>, in other words: \"Hey lean, figure out the universe yourself\"</p>\n</blockquote>\n<p>Ah, so I can skip introducing universes and go directly to never think about them anymore!</p>",
        "id": 208702429,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598973459
    },
    {
        "content": "<p>No, sorry, nontrivial is for (fin)types, but you're working with a finset.</p>",
        "id": 208702472,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1598973474
    },
    {
        "content": "<p>Yup... until you start doing fpqc cohomology (-;</p>",
        "id": 208702529,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598973487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Are you PRing a fix? Otherwise I will do it</p>",
        "id": 208702772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598973596
    },
    {
        "content": "<p>Go ahead</p>",
        "id": 208702968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598973671
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4020\">#4020</a></p>",
        "id": 208703436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598973856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I also finally understand why you were so surprised that this lemma typechecked <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 208703763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598973988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/sets.20with.20two.20elements/near/208701208\">said</a>:</p>\n<blockquote>\n<p>Here's a more efficient proof</p>\n</blockquote>\n<p>I really like your proof!  I see that you went for the minimum, rather than the maximum!  Anyway, it was very instructive for me, thanks!</p>",
        "id": 208703865,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598974027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Here is an evil proof that might satisfy Reid:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">card_two</span> <span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">sup</span> <span class=\"bp\">≠</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_pos</span> <span class=\"n\">at</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">funext_iff</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">],</span>\n  <span class=\"n\">use</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ne_of_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;_lt_max&#39;_of_card</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208704516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598974289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/sets.20with.20two.20elements/near/208704516\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> Here is an evil proof that might satisfy Reid:</p>\n</blockquote>\n<p>Ahaha an  evil proof!</p>\n<p>I was going over your previous one and I find it very clean!</p>",
        "id": 208704705,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598974352
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">card_two</span> <span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">sup</span> <span class=\"bp\">≠</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_pos</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">funext_iff</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">],</span>\n  <span class=\"n\">use</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ne_of_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;_lt_max&#39;_of_card</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208704844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598974406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/sets.20with.20two.20elements/near/208704516\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> Here is an evil proof that might satisfy Reid:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;_lt_max&#39;_of_card</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Oh nice</p>",
        "id": 208705013,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598974454
    },
    {
        "content": "<p>Presumably this is the statement one actually wants anyways (the inequality of functions is not very convenient)</p>",
        "id": 208705088,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598974483
    },
    {
        "content": "<p>If you look at the definition of <code>finset.min'_lt_max'_of_card</code>, you'll see the closely related <code>finset.min'_lt_max'</code>, which might be more convenient. Not sure how you showed that the cardinality is 2 or more. Could be that if you're still proving things about disjoint elements, the <code>card</code>-free lemma is simpler to utilize, instead of generating a hypothesis about <code>card</code> that is just for this lemma.</p>",
        "id": 208708560,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598975925
    },
    {
        "content": "<p>Thank you all for the useful lemmas that you found!</p>",
        "id": 208711697,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598977189
    },
    {
        "content": "<p>Perhaps I'm missing something, but to me the obvious thing to do here would be:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">card_two</span> <span class=\"o\">{</span><span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">sup</span> <span class=\"bp\">≠</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">sup</span> <span class=\"o\">:=</span>\n<span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;_lt_max&#39;_of_card</span> <span class=\"n\">sup</span> <span class=\"n\">H</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 210691903,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1600646914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I would like this to be easy, but using your approach, I get the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span>\n<span class=\"n\">sup</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n<span class=\"err\">⊢</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"bp\">≠</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span>\n<span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">mwe</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">21</span>\n<span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n<span class=\"err\">⊢</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span>\n<span class=\"n\">mwe</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">35</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">min&#39;_lt_max&#39;_of_card</span> <span class=\"n\">H</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">H</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">damiano</span><span class=\"bp\">/</span><span class=\"n\">Matematica</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Chevalley01</span><span class=\"bp\">/</span><span class=\"n\">mwe</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">35</span><span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"bp\">.</span><span class=\"n\">min&#39;_lt_max&#39;_of_card</span> <span class=\"err\">?</span><span class=\"n\">m_4</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"err\">?</span><span class=\"n\">m_4</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>\n\n\n<p>(the underlined bits are the underscore in <code>congr_fun h _</code>and <code>finset</code>)</p>",
        "id": 210710128,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600674543
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 210710708,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600675001
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 210710746,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600675042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> What Bhavik posted works for me. <code>finset.min'_lt_max'_of_card</code> was changed 15 days ago (<a href=\"https://github.com/leanprover-community/mathlib/issues/4020\">#4020</a>), so maybe you need to update mathlib?</p>",
        "id": 210710989,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1600675230
    },
    {
        "content": "<p>(Scratch what I said.  I wasn't paying attention to what was going on.)</p>",
        "id": 210711120,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600675381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/113489-new-members/topic/sets.20with.20two.20elements/near/210710989\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> What Bhavik posted works for me. <code>finset.min'_lt_max'_of_card</code> was changed 15 days ago (<a href=\"https://github.com/leanprover-community/mathlib/issues/4020\">#4020</a>), so maybe you need to update mathlib?</p>\n</blockquote>\n<p>Thanks: after downloading the new version of mathlib, it works!</p>",
        "id": 210722491,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600682990
    }
]