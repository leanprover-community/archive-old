[
    {
        "content": "<p>I have a predicate and some structures I've defined, all finite -- and so one I expect to be decidable if I've not done something wrong, but lean is telling me it has <code>failed to synthesize type class instance for\n⊢ decidable &lt;my long expression of state&gt;</code> -- is there any trick I can use to see where in my hierarchy of types and definitions am I losing decidability?  What I've been doing so far (sprinkling around <code>@[reducible]</code> on definitions and <code>[derive decidable_eq]</code> on structures to make the message continually simpler) is both a bit tedious and also ended in a dead end.</p>",
        "id": 213836617,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603137441
    },
    {
        "content": "<p>You can try  <code>example : decidable &lt;some subexpression&gt; := by apply_instance</code></p>",
        "id": 213838149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603138088
    },
    {
        "content": "<p>Aha, thanks, will give that a shot!</p>",
        "id": 213840347,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603139056
    },
    {
        "content": "<p>Julian can you give an example? I had some ideas for tricks that might work, but i want to see if they do before recommending anything here!</p>",
        "id": 213843379,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1603140439
    },
    {
        "content": "<p>My diff is small but it's to a larger amount of code which I'd have to tear out to make self contained.. I can paste the error message but I suspect that's not helpful until I minimize my example. Just in case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">lean</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ</span><span class=\"o\">),</span>\n       <span class=\"o\">({</span><span class=\"n\">start_board</span> <span class=\"o\">:=</span> <span class=\"n\">starting_position</span><span class=\"o\">,</span>\n         <span class=\"n\">elements</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n                        <span class=\"mi\">2</span><span class=\"o\">,</span>\n                        <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n                        <span class=\"mi\">1</span><span class=\"o\">,</span>\n                        <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)],</span>\n         <span class=\"n\">all_occupied_start'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n         <span class=\"n\">all_unoccupied_end'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">moves</span>\n          <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_legal</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ.succ</span><span class=\"o\">),</span>\n    <span class=\"o\">({</span><span class=\"n\">start_board</span> <span class=\"o\">:=</span> <span class=\"n\">starting_position</span><span class=\"o\">,</span>\n      <span class=\"n\">elements</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n                      <span class=\"mi\">0</span><span class=\"o\">),</span>\n                     <span class=\"mi\">0</span><span class=\"o\">,</span>\n                     <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n                     <span class=\"mi\">0</span><span class=\"o\">,</span>\n                     <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)],</span>\n      <span class=\"n\">all_occupied_start'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">all_unoccupied_end'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">moves</span>\n       <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_legal</span>\n</code></pre></div>",
        "id": 213844642,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603141013
    },
    {
        "content": "<p>Which I basically tried chipping away at by adding <code>dsimp [10 defs that stack to make that big thing]</code></p>",
        "id": 213844717,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603141048
    },
    {
        "content": "<p>But perhaps Kevin's suggestion to instead try \"bottoms-up\" with some subexpressions is a better idea</p>",
        "id": 213844747,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603141064
    },
    {
        "content": "<p>If I hit a wall again will work on getting something self-contained together.</p>",
        "id": 213845021,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603141137
    }
]