[
    {
        "content": "<p>I realized I don't understand how I am supposed to do the following with finsets. Suppose that I have a type <code>X</code> which I'd like to prove is finite. Suppose that I already have a proof of this which goes as follows: starting with some type <code>Y</code> and some subsets <code>s</code> and <code>t</code> of <code>Y</code> which I know are finite, I can construct a surjective map <code>s × t → X</code>. If I want to rewrite this proof to use some equivalent definition of <code>s</code> and <code>t</code> where they are finsets instead of just subsets of <code>Y</code>, how do I do that? When I try to write <code>s × t → X</code>, Lean complains to me about the type of <code>s</code> and <code>t</code> being <code>finset Y</code> rather than <code>Type u</code>.</p>",
        "id": 207367714,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809136
    },
    {
        "content": "<p>The situation where this came up is a little complicated so I have just tried to describe the source of my confusion. I can try to make a mwe if it would be helpful.</p>",
        "id": 207367721,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809168
    },
    {
        "content": "<p>is it possible to express the  function as simply Y -&gt; Y -&gt; X?</p>",
        "id": 207367740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597809222
    },
    {
        "content": "<p>Sure</p>",
        "id": 207367794,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809278
    },
    {
        "content": "<p>But I get the same error when I do that</p>",
        "id": 207367820,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809338
    },
    {
        "content": "<p>I.e. when I write <code>s → t → X</code>, Lean tells me that it expected something of type <code>Type u</code> but got something of type <code>finset Y</code> instead</p>",
        "id": 207367872,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809386
    },
    {
        "content": "<p>so something like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207367879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597809405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.20ignorance/near/207367740\">said</a>:</p>\n<blockquote>\n<p>is it possible to express the  function as simply Y -&gt; Y -&gt; X?</p>\n</blockquote>\n<p>Oops, I misread this.</p>",
        "id": 207367890,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809437
    },
    {
        "content": "<p>It's probably possible to write it as <code>Y -&gt; Y -&gt; X</code> but it would be a bit annoying</p>",
        "id": 207367951,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809518
    },
    {
        "content": "<p>why? what's the real setting</p>",
        "id": 207367953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597809532
    },
    {
        "content": "<p>For instance I don't actually know whether <code>X</code> is nonempty</p>",
        "id": 207367956,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809534
    },
    {
        "content": "<p>Is <code>X</code> also a subset of a bigger type?</p>",
        "id": 207367963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597809576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.20ignorance/near/207367963\">said</a>:</p>\n<blockquote>\n<p>Is <code>X</code> also a subset of a bigger type?</p>\n</blockquote>\n<p>Yeah</p>",
        "id": 207367967,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809587
    },
    {
        "content": "<p>This is not quite true, but it's basically the set of certain linear combinations of the roots of two polynomials</p>",
        "id": 207368024,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809621
    },
    {
        "content": "<p>is it a submodule or something like that?</p>",
        "id": 207368033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597809651
    },
    {
        "content": "<p>No</p>",
        "id": 207368034,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809656
    },
    {
        "content": "<p>Not all linear combinations, just a few of them</p>",
        "id": 207368046,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809677
    },
    {
        "content": "<p>Actually it's a little bit worse than that. I have two fields <code>F</code> and <code>E</code> and <code>E</code> is a field extension of <code>F</code> (expressed by saying <code>E</code> is an <code>F</code>-algebra) and <code>X</code> is the set of elements of <code>F</code> which can be written in a certain way as a linear combination of the roots of two polynomials over <code>E</code></p>",
        "id": 207368106,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809761
    },
    {
        "content": "<p>and <code>s</code> and <code>t</code> are basically the roots of the polynomials</p>",
        "id": 207368110,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809782
    },
    {
        "content": "<p>The surjection is pretty easy to construct when I just define <code>s</code> and <code>t</code> directly as subsets of <code>E</code>. But I want to use <code>polynomial.roots</code> instead</p>",
        "id": 207368127,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597809836
    },
    {
        "content": "<p>So like this then?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207368180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597809894
    },
    {
        "content": "<p>I'm just trying to get a sense of what kind of hypothesis would be easiest for you to work with</p>",
        "id": 207368192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597809952
    },
    {
        "content": "<p>that's pretty close, but it's more like <code>X</code> is actually a subset of <code>T</code> and there's some injective map <code>g : T -&gt; S</code> and the hypothesis is <code>forall z \\in X, \\exists (x \\in s) (y \\in t), f x y = g z</code></p>",
        "id": 207368375,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597810238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.20ignorance/near/207368180\">said</a>:</p>\n<blockquote>\n<p>So like this then?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I'd be happy to just know the best way to do this though</p>",
        "id": 207368380,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597810259
    },
    {
        "content": "<p>I would express it as \"the subset of the image of the product of finite sets is finite\"</p>",
        "id": 207368465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810409
    },
    {
        "content": "<p>and <code>h</code> is the proof that it's a subset</p>",
        "id": 207368471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810424
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">Y</span><span class=\"bp\">×</span><span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_mem_finset</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"n\">t</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">subset</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207368654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> it is an essential skill to be able to extract the essence of a lemma, i.e. remove all the noise about field extensions and state it as a lemma about sets and functions</p>",
        "id": 207375404,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597819924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.20ignorance/near/207375404\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> it is an essential skill to be able to extract the essence of a lemma, i.e. remove all the noise about field extensions and state it as a lemma about sets and functions</p>\n</blockquote>\n<p>So I'm learning.</p>",
        "id": 207375425,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597819974
    },
    {
        "content": "<p>You can promote a finset to a set and then to a type if you want to take those products</p>",
        "id": 207383952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597827400
    }
]