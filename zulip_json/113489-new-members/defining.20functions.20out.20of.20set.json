[
    {
        "content": "<p>I defined the set of natural numbers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> in a language (whose terms are elements of the type Exp) as the lfp of the function<code>math f : set(Exp) \\to set(Exp), s \\to \\{zero\\} \\cup \\{suc(e) \\mid e \\in s\\}</code>. Now I want to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> is equivalent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> as defined in lean. I need to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi><mo>→</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\omega \\to \\N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>, but this is not possible due to the Prop restriction. Is there another way of doing this (short of redefining set(A) to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">A \\to Type</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">e</span></span></span></span>?</p>",
        "id": 187286563,
        "sender_full_name": "?????",
        "timestamp": 1580752601
    },
    {
        "content": "<p>If <code>omega : set Exp</code>, then defining a function <code>omega -&gt; nat</code> really means <code>subtype omega -&gt; nat</code>, where an element of <code>subtype omega</code> is a pair of <code>e : Exp</code> and a proof that <code>e</code> belongs to <code>omega</code>. Presuming <code>Exp</code> is an inductive type, you can then define your function by induction on <code>e</code>, using the property that <code>e</code> belongs to <code>omega</code> to discard any impossible cases.</p>",
        "id": 187305053,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580764564
    },
    {
        "content": "<p>Also, you can write LaTeX in Zulip by surrounding it in <code>$$ ... $$</code>.</p>",
        "id": 187305091,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580764596
    },
    {
        "content": "<p>thanks for the latex tip</p>",
        "id": 187305418,
        "sender_full_name": "?????",
        "timestamp": 1580764855
    },
    {
        "content": "<p>So as you said I'm defining a function <code> subtype omega -&gt; nat</code>. The \"impossible cases\" work fine since false has a large eliminator (for some reason). But for the case such as when <code>(e : Exp) = zero</code>, the hypothesis one gets is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>∈</mo><mi>z</mi><mi>e</mi><mi>r</mi><mi>o</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>e</mi><mo>=</mo><mi>z</mi><mi>e</mi><mi>r</mi><mi>o</mi><mo>∨</mo><mi>e</mi><mo>∈</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">e \\in zero  \\iff e = zero \\lor e \\in \\emptyset</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">o</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span>. For this case, after I apply or.elim, I'm stuck in Prop. Since I actually want to construct a number in this case, I can't use the same trick as before.</p>",
        "id": 187306166,
        "sender_full_name": "?????",
        "timestamp": 1580765304
    },
    {
        "content": "<p>Can you show a minimal example that we can copy, and which compiles? That helps a lot to help you.</p>\n<p>What Reid mentioned is that you want to induct on <code>e</code>. Something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">omega</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>(or by using pattern matching)</p>",
        "id": 187307099,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580765821
    },
    {
        "content": "<p>That is my approach</p>",
        "id": 187307515,
        "sender_full_name": "?????",
        "timestamp": 1580766032
    },
    {
        "content": "<p>I will try to make an example</p>",
        "id": 187307532,
        "sender_full_name": "?????",
        "timestamp": 1580766042
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import order.fixed_points\n\nopen lattice\n\ninductive Exp\n| Zero : Exp\n| Suc : Exp → Exp\n\nopen Exp\n\ninstance exp.complete_lattice: complete_lattice (set Exp) := pi.complete_lattice\n\ndef fsucc : set(Exp) → Exp → Prop := λ α x,\n   ∃ w, x = Suc w ∧ set.mem w α\n\ndef fω := λ α, set.union { Zero } (fsucc α)\ndef ω : set Exp := @lfp (set Exp) _ fω\ndef w := {x : Exp // set.mem x ω}\n\ntheorem fmono : monotone fω :=\nbegin\nunfold monotone,\nintros a b h,\nunfold fω,\napply set.union_subset_union,\n{\n   apply set.subset.refl\n},\n{\n  unfold fsucc,\n  intros x g,\n  induction g with w h1,\n  induction h1 with h2 h3,\n  refine ⟨ w, _ ⟩,\n  apply and.intro,\n  exact h2,\n  apply set.mem_of_subset_of_mem h,\n  exact h3\n}\nend\n\ndef wtoN : w → ℕ :=\nbegin\nintros,\ninduction a with e p,\ninduction e,\n{\n  have g : ω = fω(ω), from lfp_eq fmono,\n  rw g at p,\n  unfold fω at p,\n  unfold set.union at p,\n  apply @or.elim _ _ ℕ p,\n}\nend\n</pre></div>",
        "id": 187309121,
        "sender_full_name": "?????",
        "timestamp": 1580766845
    },
    {
        "content": "<p>So the last or.elim in <code> wtoN</code> does not type check since I'm trying to eliminate in <code>Type</code> instead of <code>Prop</code></p>",
        "id": 187309209,
        "sender_full_name": "?????",
        "timestamp": 1580766923
    },
    {
        "content": "<p>Inside the <code>{ }</code> in <code>wtoN</code>, you are already in the case that <code>e</code> is <code>Zero</code>. So you just want to return <code>0</code>.</p>",
        "id": 187312626,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580769351
    },
    {
        "content": "<p>In fact, for this type <code>Exp</code>, <code>w</code> is the set of all <code>Exp</code>s (<code>w = set.univ</code>).</p>",
        "id": 187312724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580769398
    },
    {
        "content": "<p>So you would never need the hypothesis <code>p</code>.</p>",
        "id": 187312741,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580769414
    },
    {
        "content": "<p>ah right</p>",
        "id": 187313061,
        "sender_full_name": "?????",
        "timestamp": 1580769626
    },
    {
        "content": "<p>Also, it's probably better to write the recursive definition using pattern matching and not tactics.<br>\nSay you changed <code>Exp</code> to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Suc</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Neg</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n</pre></div>\n\n\n<p>without changing anything after that.</p>",
        "id": 187313098,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580769661
    },
    {
        "content": "<p>Then you could start to define <code>wtoN</code> this way:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ωtoN</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"err\">∈</span> <span class=\"n\">ω</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">Zero</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Suc</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">ωtoN</span> <span class=\"n\">e&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Neg</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">wtoN</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ωtoN</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</pre></div>",
        "id": 187313129,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580769688
    },
    {
        "content": "<p>You will have to fill in the two <code>_</code>s</p>",
        "id": 187313175,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580769722
    },
    {
        "content": "<p>But these are just propositions, so you will not need large elimination</p>",
        "id": 187313209,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580769744
    },
    {
        "content": "<p>I see, that's pretty nice.</p>",
        "id": 187313217,
        "sender_full_name": "?????",
        "timestamp": 1580769750
    },
    {
        "content": "<p>I tried the pattern matching definition before, but sometimes I would run into issues with size</p>",
        "id": 187313251,
        "sender_full_name": "?????",
        "timestamp": 1580769780
    },
    {
        "content": "<p>so size inequalities like size(e1) &lt; size(e1) + size(e2) is not automatically discharged</p>",
        "id": 187313325,
        "sender_full_name": "?????",
        "timestamp": 1580769828
    },
    {
        "content": "<p>Maybe you were doing recursion on the value of type <code>w</code>, rather than splitting it into two arguments like I did above</p>",
        "id": 187313577,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580770000
    },
    {
        "content": "<p>That recursion is not quite structural, because you have to build a new proof of membership which is not contained in the original one</p>",
        "id": 187313614,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580770038
    },
    {
        "content": "<p>that might be it. Also, in tactic mode i can do repeat { ... } for the impossible cases. I suppose this is not possible if you use pattern matching or the recursor?</p>",
        "id": 187313704,
        "sender_full_name": "?????",
        "timestamp": 1580770106
    },
    {
        "content": "<p>Yes, that's right. If you write definitions in tactic mode then you should be careful to use only \"simple\" tactics that will generate a predictable term, like <code>induction</code>, <code>refine</code>, <code>exact</code>, inside the parts of the definition that are data. Otherwise it will be hard to prove things about your definition later.</p>",
        "id": 187313853,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580770214
    },
    {
        "content": "<p>Inside the proof parts you can use any tactics because proofs are irrelevant.</p>",
        "id": 187313881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580770241
    },
    {
        "content": "<p>okay thanks!</p>",
        "id": 187313926,
        "sender_full_name": "?????",
        "timestamp": 1580770277
    }
]