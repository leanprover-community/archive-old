[
    {
        "content": "<p>I just started using Lean.  Can someone help me by telling me what I need to replace \"sorry\" with to prove this theorem:</p>\n<p>def beq_nat : ℕ → ℕ → bool<br>\n| beq_nat 0 0 := tt<br>\n| beq_nat (x+1) (y+1) := (beq_nat x y)<br>\n| beq_nat a b := ff</p>\n<p>example : beq_nat 3 3=tt := by sorry.</p>",
        "id": 129411503,
        "sender_full_name": "Ken Roe",
        "timestamp": 1531229533
    },
    {
        "content": "<p>your definition does not compile</p>",
        "id": 129411598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531229649
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">beq_nat</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">beq_nat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">beq_nat</span> <span class=\"mi\">3</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 129411605,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531229662
    },
    {
        "content": "<p>strange definition</p>",
        "id": 129411633,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531229705
    },
    {
        "content": "<p>I don't think it's strange</p>",
        "id": 129411644,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531229716
    },
    {
        "content": "<p>it's a viable way to prove that equality is decidable</p>",
        "id": 129411649,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531229724
    },
    {
        "content": "<p>it's less efficient than using the maths preamble</p>",
        "id": 129411658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531229752
    },
    {
        "content": "<p>I get the following using \"rfl\":</p>\n<p>impHeap.lean:35:28: error<br>\ntype mismatch, term<br>\n  rfl<br>\nhas type<br>\n  ?m_2 = ?m_2<br>\nbut is expected to have type<br>\n  beq_nat 3 3 = tt</p>",
        "id": 129411729,
        "sender_full_name": "Ken Roe",
        "timestamp": 1531229810
    },
    {
        "content": "<p>we changed the definition</p>",
        "id": 129411741,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531229826
    },
    {
        "content": "<p>your original definition does not compile</p>",
        "id": 129411747,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531229830
    },
    {
        "content": "<p>How do I fix the definition?</p>",
        "id": 129411943,
        "sender_full_name": "Ken Roe",
        "timestamp": 1531230050
    },
    {
        "content": "<p>see my message</p>",
        "id": 129411945,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531230059
    },
    {
        "content": "<p>we already gave you the new definition</p>",
        "id": 129411946,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531230060
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">beq_nat</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">beq_nat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">beq_nat</span> <span class=\"mi\">3</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n</blockquote>\n<p><span class=\"emoji emoji-261d\" title=\"point up\">:point_up:</span> <a href=\"#narrow/stream/113489-new-members/subject/Help.20with.20Lean/near/129411605\" title=\"#narrow/stream/113489-new-members/subject/Help.20with.20Lean/near/129411605\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/subject/Help.20with.20Lean/near/129411605</a></p>",
        "id": 129411966,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531230087
    },
    {
        "content": "<p>Thanks--didn't notice they were different.  It appears the syntax for recursive definitions changed from Lean 2.0.  This definition (copied from the Lean 2.0 tutorial) also fails:</p>\n<p>definition fib : nat → nat<br>\n| fib 0     := 1<br>\n| fib 1     := 1<br>\n| fib (a+2) := fib (a+1) + fib a</p>",
        "id": 129412219,
        "sender_full_name": "Ken Roe",
        "timestamp": 1531230460
    },
    {
        "content": "<p>how old is Lean 2.0 lol</p>",
        "id": 129412223,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531230474
    },
    {
        "content": "<p>I don't think I ever used Lean 2.0</p>",
        "id": 129412266,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531230486
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 129412274,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531230512
    },
    {
        "content": "<p>You shouldn't be reading anything written for Lean 2. This is all difficult enough without adding this layer of confusion. Reading <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">https://leanprover.github.io/theorem_proving_in_lean/</a> will already bring you a long way</p>",
        "id": 129416618,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531235771
    }
]