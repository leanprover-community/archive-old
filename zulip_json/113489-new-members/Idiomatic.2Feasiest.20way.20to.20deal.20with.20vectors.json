[
    {
        "content": "<p>Hi everyone, <br>\nI am wondering what could be the easiest way to prove this lemma (mwe) [1].  The proof is fairly trivial (pen and paper). Since  ms and rs </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ms</span><span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">n_n</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">rs</span><span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">n_n</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n</code></pre></div>\n\n\n<p>of length (n + 1), I can have ms = msh :: mstail for some msh and mstail, and similarly for rs. After this, I can substitute (rewrite) these values in the goal. Also, I would be happy with any other comment about the code to make it more better/idiomatic.   </p>\n<p>[1] <a href=\"https://gist.github.com/mukeshtiwari/df502c75eaffb201b5fbf878b9035b56#file-gistfile1-txt-L177\">https://gist.github.com/mukeshtiwari/df502c75eaffb201b5fbf878b9035b56#file-gistfile1-txt-L177</a></p>",
        "id": 210520325,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1600436882
    },
    {
        "content": "<p>One way to handle this would be to define a custom induction principle like (I didn't see it in mathlib already)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">C</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210547527,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600448370
    },
    {
        "content": "<p>Then you should be able to write something like <code>induction ms using vector.induction with msh mstail</code></p>",
        "id": 210548155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600448680
    },
    {
        "content": "<p>or an equivalent series of steps using <code>revert</code>, <code>apply vector.induction</code>, <code>intro</code></p>",
        "id": 210548180,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600448698
    },
    {
        "content": "<p>Thanks <strong>Reid Barton</strong> .  It appears that working with vector is not very easy, so I switched to list. So far everything is good, except at the line 222 [1] I can not apply the  lemma elgamal_enc_dec_identity.  I am getting this error: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span>\n</code></pre></div>\n\n\n<p>I don't understand why it fails to synthesize type class instance. Any idea how to resolve this issue? </p>\n<p>[1] <a href=\"https://gist.github.com/mukeshtiwari/df502c75eaffb201b5fbf878b9035b56#file-gistfile1-txt-L222\">https://gist.github.com/mukeshtiwari/df502c75eaffb201b5fbf878b9035b56#file-gistfile1-txt-L222</a></p>",
        "id": 210602710,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1600501648
    },
    {
        "content": "<p>Do you have any idea which type class it failed to synth?</p>",
        "id": 210602818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600501818
    },
    {
        "content": "<p>most probably it can't find <code>k</code></p>",
        "id": 210602852,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600501896
    },
    {
        "content": "<p>since you included all those hypotheses on L145</p>",
        "id": 210602898,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600501944
    },
    {
        "content": "<p>For the variables L32-36, are all of those supposed to be <code>[...]</code>? Since Lean then tries to use the typeclass search to find those.</p>",
        "id": 210602988,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1600502103
    },
    {
        "content": "<p><strong>Johan Commelin</strong>  No, I have no idea that why it fails to synthesize?  <br>\n<strong>Shing Tak Lam</strong>  My understanding of [...] making the assumptions implicit, but I don't have crystal clear idea about typeclass in Lean.</p>",
        "id": 210603134,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1600502369
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>      <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">elgamal_enc_dec_identity</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">Hp</span> <span class=\"n\">Hq</span> <span class=\"n\">Hdiv</span> <span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"n\">H₃</span> <span class=\"n\">H₄</span><span class=\"o\">,</span>\n      <span class=\"c\">/-</span><span class=\"cm\">    ^                                       ^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"cm\">        Make everything explicit,                             |</span>\n<span class=\"cm\">                                     Lean can&#39;t figure out any of these arguments</span>\n<span class=\"cm\">      -/</span>\n</code></pre></div>",
        "id": 210603207,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1600502483
    },
    {
        "content": "<p>If you want implicit arguments, use <code>{}</code>, not <code>[]</code></p>",
        "id": 210603259,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1600502557
    },
    {
        "content": "<p>Thanks everyone. It was great help.</p>",
        "id": 210606598,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1600508030
    }
]