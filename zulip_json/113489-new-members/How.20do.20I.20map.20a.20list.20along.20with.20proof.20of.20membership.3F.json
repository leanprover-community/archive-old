[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">list_dice</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">list_claim</span> <span class=\"o\">:=</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Action</span>\n<span class=\"bp\">|</span> <span class=\"n\">Claim</span> <span class=\"o\">(</span><span class=\"n\">claim</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">list_claim</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Action</span>\n<span class=\"bp\">|</span> <span class=\"n\">Dudo</span> <span class=\"o\">:</span> <span class=\"n\">Action</span>\n\n<span class=\"n\">def</span> <span class=\"n\">actions</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Action</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">claims</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Action</span> <span class=\"o\">:=</span>\n        <span class=\"n\">list_claim</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n            <span class=\"n\">Action</span><span class=\"bp\">.</span><span class=\"n\">Claim</span> <span class=\"bp\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"bp\">⟩</span>\n            <span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"n\">Action</span><span class=\"bp\">.</span><span class=\"n\">Dudo</span> <span class=\"bp\">::</span> <span class=\"n\">claims</span>\n</pre></div>\n\n\n<p>I've defined an inductive type like this and now I also want to turn it into a list. That having said, I have no idea how to provide the proof of membership. The <code>x</code> is opaque, so I do not have the necessary information to prove this.</p>\n<p>How should I approach this?</p>",
        "id": 178857209,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571839915
    },
    {
        "content": "<p>you can attach the proof of membership before mapping <a href=\"https://github.com/leanprover-community/mathlib/blob/24dd80b0db5f2adbefd3b00709b4a445fc18fb9b/src/data/list/basic.lean#L1720\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/24dd80b0db5f2adbefd3b00709b4a445fc18fb9b/src/data/list/basic.lean#L1720\">https://github.com/leanprover-community/mathlib/blob/24dd80b0db5f2adbefd3b00709b4a445fc18fb9b/src/data/list/basic.lean#L1720</a><br>\n(edited to provide permalink ;))</p>",
        "id": 178857697,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1571840250
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 178857886,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571840385
    }
]