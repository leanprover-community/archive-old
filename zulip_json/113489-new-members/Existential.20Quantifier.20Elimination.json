[
    {
        "content": "<p>Hello. I'm trying to prove a statement and among the givens is an existentially quantified proposition. My tactic state looks something like<br>\nh2 : \\exists (a : A) (H : a \\in my_finset), foo bar = a</p>\n<p>I would like to get this into something like<br>\na : A<br>\nH : a \\in my_finset<br>\nh3 : foo bar = a</p>\n<p>I sort of assumed this page <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html\">https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html</a> would explain how to accomplish this, but none of the snippets I found there work. Does anyone have any advice on how to do this/a better reference?</p>",
        "id": 217094036,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1605672071
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\">tactic#rcases</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#obtain\">tactic#obtain</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">my_finset</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">my_finset</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">my_finset</span><span class=\"o\">,</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">⟩,</span>\n  <span class=\"c1\">-- type ascriptions are optional</span>\n  <span class=\"c1\">-- rcases h2 with ⟨a, H, h3⟩,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">my_finset</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">my_finset</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">my_finset</span><span class=\"o\">,</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- type ascriptions are optional</span>\n  <span class=\"c1\">-- obtain ⟨a, H, h3⟩ := h2,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217094283,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605672418
    },
    {
        "content": "<p>Yes, this works, thanks so much for your help</p>",
        "id": 217094578,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1605672815
    },
    {
        "content": "<p>No problem! By the way, if you're using a recent version of Lean, hovering over the <code>∃</code> symbol should pop up some advice on how to prove an existential goal and how to use an existential hypothesis.</p>",
        "id": 217094674,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605672903
    }
]