[
    {
        "content": "<p>I try to make a definition of an algebraic number:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_algebraic_number</span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">polynomial</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>  <span class=\"bp\">¬</span> <span class=\"n\">is_root</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>But it expected that x and p are in the same semi-ring alpha. Here is what I found in the definition of  <code> is_root</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_root</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>What should I do in this case? Thank you.</p>",
        "id": 162506563,
        "sender_full_name": "Mii Nguyen",
        "timestamp": 1554368384
    },
    {
        "content": "<p><code>def is_algebraic_number{x: ℝ} := ∀ p:polynomial ℤ,  ¬ eval₂ int.cast x p  = 0</code> there may be a better looking solution, but this does what you want</p>",
        "id": 162507614,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554369447
    },
    {
        "content": "<p>this looks like the definition of a transcendental number, not an algebraic number</p>",
        "id": 162507708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554369513
    },
    {
        "content": "<p>I didn't look at the name, I fixed the definition...</p>",
        "id": 162507729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554369552
    },
    {
        "content": "<p>Computer scientists are so picky with naming conventions...</p>",
        "id": 162507735,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554369568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  It lack an important condition that p is not zero polynomial.<br>\nI fixed it by</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_transcendental_number</span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">polynomial</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">is_root</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>and it works</p>",
        "id": 162508470,
        "sender_full_name": "Mii Nguyen",
        "timestamp": 1554370391
    },
    {
        "content": "<p>You should also fix Mario's comment.</p>",
        "id": 162508479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554370423
    },
    {
        "content": "<p>thank you all!</p>",
        "id": 162508588,
        "sender_full_name": "Mii Nguyen",
        "timestamp": 1554370541
    },
    {
        "content": "<p>of course this definition is still defective... the number should be an explicit argument</p>",
        "id": 162508683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1554370606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138627\">@Mii Nguyen</span> That last definition is not at all what you want. If you <code>#print</code> it, you will see that what you defined is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_transcendental_number</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">polynomial</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">is_root</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>You want the following:</p>\n<div class=\"codehilite\"><pre><span></span>def is_transcendental_number (x : ℝ) : Prop := ∀(p : polynomial ℤ), p ≠ 0 → ¬ eval₂ int.cast x p = 0\n</pre></div>\n\n\n<p>If you want, you can abbreviate this to</p>\n<div class=\"codehilite\"><pre><span></span>def is_transcendental_number (x : ℝ) : Prop := ∀(p ≠ 0), ¬ eval₂ int.cast x p = 0\n</pre></div>",
        "id": 162636605,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1554480646
    },
    {
        "content": "<p>The problem with your definition is that you didn't have a name to the hypothesis <code>(p ≠ 0)</code>. You should write <code>(h : p ≠ 0)</code> or <code>p ≠ 0 → ...</code>. The syntax you used is notation for \"for all <code>p</code> not equal to <code>0</code>\" so this is a new <code>p</code> different from the previous one.</p>",
        "id": 162636791,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1554480814
    }
]