[
    {
        "content": "<p>Hi! I was trying to prove this example using this proof (You can look at the goal information below for ease of reading):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">variables</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">section</span>\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">h.left</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">boc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n    <span class=\"k\">from</span> <span class=\"n\">h.right</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">br</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">anb</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n    <span class=\"k\">from</span> <span class=\"n\">or.inl</span> <span class=\"n\">anb</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">cr</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">anc</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n    <span class=\"k\">from</span> <span class=\"n\">or.inr</span> <span class=\"n\">anc</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">bocr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n    <span class=\"k\">from</span> <span class=\"n\">or.elim</span> <span class=\"n\">boc</span> <span class=\"n\">br</span> <span class=\"n\">cr</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n    <span class=\"k\">from</span> <span class=\"n\">bocr</span> <span class=\"n\">boc</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This proof gives me an error on the proof of <code>(B ∨ C) → (A ∧ B) ∨ (A ∧ C)</code> using <code>or.elim</code> with the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">boc.elim</span> <span class=\"n\">br</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">br</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>The goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">boc</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">br</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">cr</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>This doesn't make sense to me since <code>or.elim</code>'s type says that I need three things to prove <code>A or B -&gt; C</code> :</p>\n<p><code>A or B</code><br>\n<code>A -&gt; C</code><br>\n<code>B -&gt; C</code></p>\n<p>which I have provided. So I'm a bit confused about where this is coming from. </p>\n<p>NOTE: The proof is a homework question. I only want to understand why there is a type error, not the answer.</p>",
        "id": 272981014,
        "sender_full_name": "Kunwar Shaanjeet Singh Grover",
        "timestamp": 1645636974
    },
    {
        "content": "<p>Check again what the output type of <code>or.elim boc br cr</code> is. Does it match the type you’ve given for <code>bocr</code>?</p>",
        "id": 272982548,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1645637488
    },
    {
        "content": "<p>Ah, that was a stupid mistake. Sorry!</p>",
        "id": 272983603,
        "sender_full_name": "Kunwar Shaanjeet Singh Grover",
        "timestamp": 1645637906
    },
    {
        "content": "<p>And thanks for helping out!</p>",
        "id": 272983629,
        "sender_full_name": "Kunwar Shaanjeet Singh Grover",
        "timestamp": 1645637917
    },
    {
        "content": "<p>No problem :)</p>",
        "id": 272984512,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1645638201
    }
]