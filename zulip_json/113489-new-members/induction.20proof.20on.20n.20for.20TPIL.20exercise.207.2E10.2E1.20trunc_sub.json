[
    {
        "content": "<p>I'm trying to learn Lean via reading and doing exercises in TPIL. Right now, I'm stuck at proving the following theorem:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">my_sub_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">trunc_sub</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The definition and a simple theorem I have are:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">trunc_sub</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">minus_m_n</span><span class=\"o\">,</span> <span class=\"n\">pred</span> <span class=\"n\">minus_m_n</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">trunc_sub_zero_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">trunc_sub</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">trunc_sub</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I tried finishing off the theorem with some <code>rw trunc_sub at *</code> and <code>simp</code>, but I am not sure how to simplify the <code>nat.rec</code> or <code>nat.rec_on</code> in a way that recognizes that it is only in the <code>nat.succ k</code> case at that point in the proof. I think I'm just not understanding something about how to work with <code>rec</code> and <code>rec_on</code>.</p>\n<p>I can include my definition of <code>pred</code> and associated theorems like <code>pred (succ n) = n</code> if that is helpful (or helps indicate that I have some grasp of Lean).</p>\n<p>As a new-member introduction, I'm a computational chemist based in NYC. To learn Lean, I'm hoping to work through Benedict Gross's group theory class (which I've done before), but formalizing the notes and exercises.</p>",
        "id": 199706026,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591247570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Hi, welcome! Try <code>show pred _ = _</code>. Let us know if that hint gets you back on track.</p>",
        "id": 199706214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591247831
    },
    {
        "content": "<p>In other words, lean realizes that it is in the <code>nat.succ</code> case of the proof, and using <code>show</code> you ask it to restate the goal in a way that is equal to the preceding goal <em>by definition</em>.</p>",
        "id": 199706369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591248118
    },
    {
        "content": "<p>I'm trying to follow your hint here. After including that in the proof, my goal state is currently:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">trunc_sub</span> <span class=\"n\">k</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">minus_m_n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">pred</span> <span class=\"n\">minus_m_n</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 199706473,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591248243
    },
    {
        "content": "<p>That state looks problematic, because the base case has also shifted</p>",
        "id": 199706499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591248320
    },
    {
        "content": "<p>the <code>nat.rec</code> term is <code>trunc_sub (nat.succ k) k</code>, which your induction hypothesis will not help with</p>",
        "id": 199706510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591248345
    },
    {
        "content": "<p>I'm just not sure how to get the <code>pred</code> to enter into the <code>nat.rec (*here* nat.succ k)</code></p>",
        "id": 199706555,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591248366
    },
    {
        "content": "<p>That's a lemma</p>",
        "id": 199706567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591248397
    },
    {
        "content": "<p>more simply stated as <code>pred (trunc_sub m n) = trunc_sub (pred m) n</code></p>",
        "id": 199706582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591248430
    },
    {
        "content": "<p>which you have to prove by induction</p>",
        "id": 199706586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591248438
    },
    {
        "content": "<p>Aha! Yes, I was missing that.</p>",
        "id": 199706593,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591248456
    },
    {
        "content": "<p>I tried looking at the source for <code>add_right_neg</code> and learn from that. Thanks for the guidance, I'll try proving the lemma first.</p>",
        "id": 199706649,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591248502
    },
    {
        "content": "<p>it generalizes to <code>trunc_sub (trunc_sub m n) k = trunc_sub m (n + k)</code></p>",
        "id": 199706652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591248505
    },
    {
        "content": "<p>(By the way, you presumably know that <code>trunc_sub</code> is also known as <code>-</code>)</p>",
        "id": 199706688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591248554
    },
    {
        "content": "<p>Yeah, other than the nasty thing about it that <code>succ (pred n) = succ (pred m)</code> does not imply <code>n = m</code>, so <code>succ (trunc_sub m n)</code> doesn't have to equal <code>trunc_sub (succ m) n</code>.</p>",
        "id": 199706755,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591248660
    },
    {
        "content": "<p>Because <code>pred 0 = 0</code> and <code>pred 1 = 0</code>.</p>",
        "id": 199706823,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591248775
    },
    {
        "content": "<p>On this topic, why does using <code>unfold</code> work but <code>rw</code> does not work?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">pred_trunc_sub</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">trunc_sub</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">trunc_sub</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">trunc_sub</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199707178,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591249364
    },
    {
        "content": "<p>My current solution is below. Please let me know if there are better stylistic or semantic choices.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">my_sub_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">trunc_sub</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">pred_succ</span> <span class=\"n\">k</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">pred_trunc_sub</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"c1\">--pred_trunc_sub (m n : nat) : pred (trunc_sub m n) = trunc_sub (pred m) n</span>\n<span class=\"n\">rw</span> <span class=\"n\">pred_succ</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">trunc_sub</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199708373,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591250713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/induction.20proof.20on.20n.20for.20TPIL.20exercise.207.2E10.2E1.20trunc_sub/near/199706755\">said</a>:</p>\n<blockquote>\n<p>Yeah, other than the nasty thing about it that <code>succ (pred n) = succ (pred m)</code> does not imply <code>n = m</code>, so <code>succ (trunc_sub m n)</code> doesn't have to equal <code>trunc_sub (succ m) n</code>.</p>\n</blockquote>\n<p>That's why the lemma is about <code>pred</code> and not <code>succ</code>. You can view <code>trunc_sub m n</code> as <code>pred^[n] m</code>, and so it has nice additivity properties with respect to <code>n</code>, irrespective of what <code>pred</code> does</p>",
        "id": 199709601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591252153
    },
    {
        "content": "<blockquote>\n<p>On this topic, why does using unfold work but rw does not work?</p>\n</blockquote>\n<p>You can see that <code>unfold</code> does rather more than just unfold <code>trunc_sub</code>, because it is actually <code>simp</code> with special configuration options and it does some beta/iota reduction when it can</p>",
        "id": 199709810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591252373
    },
    {
        "content": "<p>notice that <code>unfold</code> turns the statement into something about <code>rec</code> instead of <code>rec_on</code></p>",
        "id": 199709824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591252399
    },
    {
        "content": "<p><code>rw</code> is just using the definition for <code>trunc_sub</code></p>",
        "id": 199709835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591252415
    },
    {
        "content": "<p>Stylistically, you could write the proof like so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">pred_trunc_sub</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">trunc_sub</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">trunc_sub</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">trunc_sub</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">my_sub_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">trunc_sub</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">pred_succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">pred_trunc_sub</span><span class=\"o\">,</span> <span class=\"n\">pred_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">trunc_sub</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199709909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591252477
    },
    {
        "content": "<p>If I want to avoid using simp for pedagogical purposes, what would be the way to invoke the beta and iota reduction after <code>rw</code>, like the transformation of <code>rec_on</code> to <code>rec</code> and the application of <code>pred</code> in the right place? Thanks for the style tips!</p>",
        "id": 199709997,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591252572
    },
    {
        "content": "<p>But actually the use of <code>nat.rec_on</code> is itself non-idiomatic. You get better equations and better presentation by using the equation compiler:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">trunc_sub</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">trunc_sub</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">pred_trunc_sub</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">trunc_sub</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">trunc_sub</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">trunc_sub</span><span class=\"o\">,</span> <span class=\"n\">trunc_sub</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">my_sub_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">trunc_sub</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">trunc_sub</span><span class=\"o\">,</span> <span class=\"n\">pred_trunc_sub</span><span class=\"o\">,</span> <span class=\"n\">pred_succ</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199710110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591252753
    },
    {
        "content": "<p>and you can express the inductive proofs using the equation compiler as well, resulting in this mathlib-esque proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">pred_trunc_sub</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">trunc_sub</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">trunc_sub</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">trunc_sub</span><span class=\"o\">,</span> <span class=\"n\">trunc_sub</span><span class=\"o\">,</span> <span class=\"n\">pred_trunc_sub</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">my_sub_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">trunc_sub</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">trunc_sub</span><span class=\"o\">,</span> <span class=\"n\">pred_trunc_sub</span><span class=\"o\">,</span> <span class=\"n\">pred_succ</span><span class=\"o\">,</span> <span class=\"n\">my_sub_self</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 199710208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591252892
    },
    {
        "content": "<p>Ah, cool! The TPIL document's <code>add</code> example is using <code>nat.rec_on</code>, so I stuck with it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">add_m_n</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">add_m_n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 199710239,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591252922
    },
    {
        "content": "<p>The problem with definitions using <code>nat.rec_on</code> directly is that the equation you get for it is <code>add m n = nat.rec_on n m (λ n add_m_n, succ add_m_n)</code>, when the equations you would like are <code>add m 0 = m</code> and <code>add m (succ n) = succ (add m n)</code></p>",
        "id": 199710295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591252985
    },
    {
        "content": "<p>You can prove these equations yourself of course (by <code>rfl</code>), and if you use them to rewrite instead of unfolding the <code>rec_on</code> definition everything goes more smoothly because you don't have that big recursor term appearing. If you use the equation compiler to write your definition this happens automatically</p>",
        "id": 199710373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591253066
    },
    {
        "content": "<p>When developing new definitions and theorems, is it an incremental improvement approach of first doing a tactic style <code>begin ... end</code> and then refactoring to an equation compiler, or just internalize using the eq compiler from the get-go?</p>",
        "id": 199710612,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591253300
    },
    {
        "content": "<p>I would probably write a proof in tactic style first and then refactor if at the end of it I can see that I didn't really make much use of the flexibility of tactic mode</p>",
        "id": 199710667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591253390
    },
    {
        "content": "<p>but there is nothing wrong with a tactic proof by <code>induction</code>. Other methods are sometimes shorter and sometimes not</p>",
        "id": 199710724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591253428
    },
    {
        "content": "<p>Got it. Thanks for the walkthrough! I'll try these ideas with the <code>length</code> and <code>reverse</code> exercises.</p>",
        "id": 199710780,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591253517
    }
]