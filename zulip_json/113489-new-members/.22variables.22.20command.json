[
    {
        "content": "<p>I have an issue which I suspect arises from not really understanding lines like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/2660\">#2660</a> I defined scalar multiplication for bounded continuous functions from topological spaces to normed 𝕜-spaces.  Since 𝕜-algebras are 𝕜-spaces, I would like bounded continuous functions from topological spaces to normed 𝕜-algebras to inherit this scalar multiplication.  The following code fails with \"invalid apply tactic, failed to unify ⇑(c • f) x = c • ⇑f x with ?m_2 = ?m_2\".</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">bounded_continuous_function</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"err\">𝕜</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">smul_def</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"err\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bounded_continuous_function</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>But the lemma passes muster in a weaker context:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 197580120,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589473230
    },
    {
        "content": "<p>Note that <code>normed_space</code> and <code>normed_algebra</code> introduce different scalar multiplications.</p>",
        "id": 197580992,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589473590
    },
    {
        "content": "<p>Try to remove <code>normed_space</code> leaving only <code>normed_algebra</code></p>",
        "id": 197581020,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589473604
    },
    {
        "content": "<p>If I do that, I get, \"failed to synthesize type class instance for .... ⊢ has_scalar 𝕜 (bounded_continuous_function α β)\"</p>",
        "id": 197581163,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589473664
    },
    {
        "content": "<p>I put a <code>has_scalar</code> structure on bounded continuous functions in <a href=\"https://github.com/leanprover-community/mathlib/issues/2660\">#2660</a>, and would like to re-use it here.</p>",
        "id": 197581290,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589473706
    },
    {
        "content": "<p>Here it is: we miss a <code>normed_algebra.normed_space</code> instance.</p>",
        "id": 197581417,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589473760
    },
    {
        "content": "<p>It should go to <code>normed_space.basic</code></p>",
        "id": 197581447,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589473777
    },
    {
        "content": "<p>(yes, there are many unexpected holes in the library)</p>",
        "id": 197581570,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589473816
    },
    {
        "content": "<p>Shall I try to write it myself?</p>",
        "id": 197581628,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589473844
    },
    {
        "content": "<p>Yes.</p>",
        "id": 197581852,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589473931
    },
    {
        "content": "<p>Possibly you'll have to modify the definition of <code>normed_algebra</code></p>",
        "id": 197581872,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589473943
    },
    {
        "content": "<p>Okay, thank you.</p>",
        "id": 197581939,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589473983
    },
    {
        "content": "<p>Because <code>normed_ring</code> only assumes that norm of <code>x * y</code> is less than or equal to the product of the norms.</p>",
        "id": 197582011,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589474028
    },
    {
        "content": "<p>Can you explain your last point?  That is also the correct axiom for normed algebras, I thought.</p>",
        "id": 197582272,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589474154
    },
    {
        "content": "<p>I meant that you'll only have this axiom to prove <code>norm_smul</code> but then I realized that for a normed algebra over a field this will work anyway.</p>",
        "id": 197582501,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589474249
    },
    {
        "content": "<p>Because you can do the \"multiply by <code>c⁻¹</code>\" trick.</p>",
        "id": 197582544,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589474267
    },
    {
        "content": "<p>Does this mean that normed algebras over non-fields are \"broken\"?</p>",
        "id": 197585152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589475375
    },
    {
        "content": "<p>Yes. Possibly we should add <code>norm_smul</code> as an axiom, and a custom constructor that deduces this from coefficients being a field.</p>",
        "id": 197585594,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589475582
    },
    {
        "content": "<p>/me is not a functional analyst and has no clue at all what a \"true\" normed algebra should be.</p>",
        "id": 197586095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589475760
    },
    {
        "content": "<p>I never worked with normed algebras over non-fields.</p>",
        "id": 197587098,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589476136
    },
    {
        "content": "<p>I think I did once, but they were algebras over rings which contain a field...</p>",
        "id": 197620178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589491478
    },
    {
        "content": "<p>At the moment normed algebras are over fields only, by definition:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">normed_algebra</span> <span class=\"o\">(</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">𝕜&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">algebra</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">norm_algebra_map_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"err\">𝕜</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">algebra_map</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"n\">x</span><span class=\"err\">∥</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197623976,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589493706
    },
    {
        "content": "<p>Aah, that solves all issues <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 197644993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589513557
    }
]