[
    {
        "content": "<p>We've implemented a minimal imperative language following Pierce's Imp chapter. On line 28, the definition of cEval, we're getting this error: infer type failed, unknown variable _f_1. We're not familiar enough with Lean's implementation to know why we're seeing this. There is no variable _f_1 in our program.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">bvar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bvar_eq</span> <span class=\"o\">:</span> <span class=\"n\">bvar</span> <span class=\"bp\">→</span> <span class=\"n\">bvar</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bvar</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bvar</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n1</span><span class=\"bp\">=</span><span class=\"n\">n2</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">bExpr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">BLit</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">BVar</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">bvar</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">benv</span> <span class=\"o\">:=</span> <span class=\"n\">bvar</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bEval</span> <span class=\"o\">:</span> <span class=\"n\">bExpr</span> <span class=\"bp\">→</span> <span class=\"n\">benv</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bExpr</span><span class=\"bp\">.</span><span class=\"n\">BLit</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bExpr</span><span class=\"bp\">.</span><span class=\"n\">BVar</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"n\">v</span>\n\n<span class=\"n\">def</span> <span class=\"n\">init_benv</span> <span class=\"o\">:</span> <span class=\"n\">benv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">ff</span>\n\n<span class=\"n\">def</span> <span class=\"n\">update_benv</span> <span class=\"o\">:</span> <span class=\"n\">benv</span> <span class=\"bp\">→</span> <span class=\"n\">bvar</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">benv</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bvar_eq</span> <span class=\"n\">v</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">v2</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">bCmd</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">bAssm</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">bvar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">bExpr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">bSeq</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">bCmd</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cEval</span> <span class=\"o\">:</span> <span class=\"n\">benv</span> <span class=\"bp\">→</span> <span class=\"n\">bCmd</span> <span class=\"bp\">→</span> <span class=\"n\">benv</span>\n<span class=\"bp\">|</span> <span class=\"n\">i0</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>   <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bCmd</span><span class=\"bp\">.</span><span class=\"n\">bAssm</span> <span class=\"n\">v</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">update_benv</span> <span class=\"n\">i0</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">bEval</span> <span class=\"n\">e</span> <span class=\"n\">i0</span><span class=\"o\">)</span>\n            <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bCmd</span><span class=\"bp\">.</span><span class=\"n\">bSeq</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n                <span class=\"k\">let</span> <span class=\"n\">i1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cEval</span> <span class=\"n\">i0</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">cEval</span> <span class=\"n\">i1</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n            <span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">myFirstProg</span> <span class=\"o\">:=</span> <span class=\"n\">bCmd</span><span class=\"bp\">.</span><span class=\"n\">bAssm</span> <span class=\"o\">(</span><span class=\"n\">bvar</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bExpr</span><span class=\"bp\">.</span><span class=\"n\">BLit</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">newEnv</span> <span class=\"o\">:=</span> <span class=\"n\">cEval</span> <span class=\"n\">init_benv</span> <span class=\"n\">myFirstProg</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">newEnv</span> <span class=\"o\">(</span><span class=\"n\">bvar</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206359962,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1596913511
    },
    {
        "content": "<p>The way you have written <code>cEval</code> makes me think you learned this from coq style. In lean you just write a definition with multiple cases</p>",
        "id": 206362513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596917822
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">cEval</span> <span class=\"o\">:</span> <span class=\"n\">benv</span> <span class=\"bp\">→</span> <span class=\"n\">bCmd</span> <span class=\"bp\">→</span> <span class=\"n\">benv</span>\n<span class=\"bp\">|</span> <span class=\"n\">i0</span> <span class=\"o\">(</span><span class=\"n\">bCmd</span><span class=\"bp\">.</span><span class=\"n\">bAssm</span> <span class=\"n\">v</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">update_benv</span> <span class=\"n\">i0</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">bEval</span> <span class=\"n\">e</span> <span class=\"n\">i0</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">i0</span> <span class=\"o\">(</span><span class=\"n\">bCmd</span><span class=\"bp\">.</span><span class=\"n\">bSeq</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cEval</span> <span class=\"o\">(</span><span class=\"n\">cEval</span> <span class=\"n\">i0</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"n\">c2</span>\n</code></pre></div>",
        "id": 206362588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596917939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124175\">@Kevin Sullivan</span></p>",
        "id": 206362594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596917954
    },
    {
        "content": "<p>that said, the error message is phenomenally bad to the point that I suspect there is a bug somewhere</p>",
        "id": 206362839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596918403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Silly.20Imp.20problem/near/206362839\">said</a>:</p>\n<blockquote>\n<p>that said, the error message is phenomenally bad to the point that I suspect there is a bug somewhere</p>\n</blockquote>\n<p>Thanks, yeah. It is Coq-style but it seemed like a wrong response nonetheless, which is what prompted me to ask. Not sure if I should file an issue?</p>",
        "id": 206409713,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1597003657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124175\">Kevin Sullivan</span> <a href=\"#narrow/stream/113489-new-members/topic/Silly.20Imp.20problem/near/206409713\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Silly.20Imp.20problem/near/206362839\">said</a>:</p>\n<blockquote>\n<p>that said, the error message is phenomenally bad to the point that I suspect there is a bug somewhere</p>\n</blockquote>\n<p>Thanks, yeah. It is Coq-style but it seemed like a wrong response nonetheless, which is what prompted me to ask. Not sure if I should file an issue?</p>\n</blockquote>\n<p>Lean Prover repo has been archived. Doesn't seem I can post an issue. I'm probably missing something, but maybe not. Let me know. Thanks.</p>",
        "id": 206480341,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1597076298
    },
    {
        "content": "<p>The community version of Lean is at <a href=\"https://github.com/leanprover-community/lean\">https://github.com/leanprover-community/lean</a></p>",
        "id": 206481259,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597076788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Silly.20Imp.20problem/near/206481259\">said</a>:</p>\n<blockquote>\n<p>The community version of Lean is at <a href=\"https://github.com/leanprover-community/lean\">https://github.com/leanprover-community/lean</a></p>\n</blockquote>\n<p>Ah, yes, thanks.</p>",
        "id": 206487969,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1597080315
    }
]