[
    {
        "content": "<p>I was taught that (a \\/ b) is only false when both a and b are false. My prof drew a truth table on the board, crossed out the row where they were both false. Then concluded that the only truthful row where a was false b was true; therefore, not a implies b. I know this is a super simple example, but does lean have a form of truth table syntax? would I use a series of axioms, or define a function that returned false if they were both false and treat the function as the table?</p>",
        "id": 313403295,
        "sender_full_name": "James B Clifford",
        "timestamp": 1669939736
    },
    {
        "content": "<p>Typically, you would use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases\">tactic#by_cases</a> in tactic mode in a proof.</p>",
        "id": 313406720,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669941546
    },
    {
        "content": "<p>But maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bor\">docs#bor</a> is what you're after? This is precisely defined in a truth table kind of a way.</p>",
        "id": 313406814,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669941591
    },
    {
        "content": "<p>It can be confusing at first, but <code>Prop</code> isn't a boolean, and <code>∨</code> in Lean is defined as an <code>inductive</code> where you construct one precisely by giving a proof of either the left or right sides. Boolean or, as <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  notes, is easily defined via a match statement that's the normal truth table.</p>",
        "id": 313410600,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669943973
    },
    {
        "content": "<p>I carried around the implicit belief that a <code>Prop</code> is analogous to boolean, and that let me astray at first.</p>",
        "id": 313411120,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669944315
    },
    {
        "content": "<p><code>Prop</code> is like a boolean that you don't know the answer to; that is, <code>p : Prop</code> is either equal to <code>true</code> or to <code>false</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.prop_complete\">docs#classical.prop_complete</a>) but you can have a <code>Prop</code> representing, i.e. the Riemann hypothesis. A <code>bool</code> is always either _literally_ <code>true</code> or <code>false</code>, if that makes sense</p>",
        "id": 313411462,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1669944575
    },
    {
        "content": "<p>I think that's misleading (or at least it mislead me). If I have a proof of something (or take it as a premise), I have <code>hp: p</code> where <code>p: Prop</code>. I can also have a proof that <code>p → False</code> (which is called <code>¬p</code> in Lean). It turns out you need to know <code>p ∨ ¬p</code> only rarely.</p>",
        "id": 313411989,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669944894
    },
    {
        "content": "<p>The earlier you just accept the Curry-Howard correspondence the better.</p>",
        "id": 313412054,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669944944
    },
    {
        "content": "<p>The tactic <code>tauto!</code> should also be mentioned (IIRC it essentially uses truth tables under the hood)</p>",
        "id": 313412651,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669945382
    },
    {
        "content": "<p>Not to be confused with <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#tauto\">tactic#tauto</a></p>",
        "id": 313412681,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669945410
    },
    {
        "content": "<p>To the documentation, <code>tauto</code> and <code>tauto!</code> are the same tactic... (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.tauto\">docs#tactic.interactive.tauto</a>)</p>",
        "id": 313413803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669946183
    },
    {
        "content": "<p>... and I broke the rendering somehow, <a href=\"/user_uploads/3121/KX99VFlYRAp1PPxLvLTI_3c3/image.png\">image.png</a> (<a href=\"https://github.com/leanprover-community/lean/issues/789\">https://github.com/leanprover-community/lean/issues/789</a>)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KX99VFlYRAp1PPxLvLTI_3c3/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/KX99VFlYRAp1PPxLvLTI_3c3/image.png\"></a></div>",
        "id": 313413932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669946274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/113489-new-members/topic/are.20truth.20tables.20an.20option.3F/near/313411989\">said</a>:</p>\n<blockquote>\n<p>I think that's misleading (or at least it mislead me). If I have a proof of something (or take it as a premise), I have <code>hp: p</code> where <code>p: Prop</code>. I can also have a proof that <code>p → False</code> (which is called <code>¬p</code> in Lean). It turns out you need to know <code>p ∨ ¬p</code> only rarely.</p>\n</blockquote>\n<p>This is just a proof by contradiction, however. One of those terms cannot exist if Lean is sound; that is, it would have no constructors (but it's obviously hard to decide which one it is!)</p>",
        "id": 313464555,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1669975728
    },
    {
        "content": "<p>All I'm saying is that I carried around a mistaken belief that <code>Prop</code> was like a boolean and it helped (me at least) to drop that and just follow the types</p>",
        "id": 313543656,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670000355
    },
    {
        "content": "<p>I'm not sure I would characterize that belief as mistaken</p>",
        "id": 313551392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670002478
    },
    {
        "content": "<p>it's more natural to reason about propositions in natural deduction style, but there really are only two of them: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.prop_complete#doc\">docs4#Classical.prop_complete</a></p>",
        "id": 313551678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670002550
    },
    {
        "content": "<p>The kinds of issues that got me into trouble initially was thinking that  in  a function of type<code>p -&gt; q</code> I could pass a hypothesis of <code>¬p</code> on the analogy of type <code>Bool -&gt; Bool</code></p>",
        "id": 313581781,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670012395
    },
    {
        "content": "<p>Which is what I was used to in a non-dependent-type world.</p>",
        "id": 313581919,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670012449
    },
    {
        "content": "<p>You can, that's the <code>absurd</code> function</p>",
        "id": 313581970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670012472
    },
    {
        "content": "<p>or Not.elim I suppose</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Logic</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">h1.elim</span>\n</code></pre></div>",
        "id": 313582213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670012566
    },
    {
        "content": "<p>my brain hurts.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">err</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">hnp</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">imp</span> <span class=\"n\">hnp</span>\n</code></pre></div>",
        "id": 313583819,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670013154
    },
    {
        "content": "<p>FYI <code>p → q → p</code> means <code>p → (q → p)</code>. It says that if p and q are true then p is true</p>",
        "id": 313584096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670013275
    },
    {
        "content": "<p>where my brain hurt was when I expected <code>imp hnp</code> to fail with a type error</p>",
        "id": 313584444,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670013397
    },
    {
        "content": "<p>why would you think it would do that? (honest question)</p>",
        "id": 313589251,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670015180
    },
    {
        "content": "<p>I've got a function of <code>p → False</code> and I'm feeding it into a function of <code>p → q → p</code>? So maybe I can reason that <code>imp</code> takes <code>p</code> and turns it into <code>p</code> which then leads to a return of a function <code>p → False</code>?</p>",
        "id": 313593797,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670017147
    },
    {
        "content": "<p>You're feeding it into a function of type <code>p' -&gt; q -&gt; p'</code> so it just lets p' be not p.</p>",
        "id": 313593950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670017218
    },
    {
        "content": "<p>What's confusing is that both <code>p</code> don't mean the same thing.</p>",
        "id": 313593954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670017219
    },
    {
        "content": "<p>Yeah, the key point is that when you do <code>variable {p q : Prop}</code> then these are (universally quantified, and implicit!) variables in the forthcoming declarations. So <code>imp</code> says, <em>for any</em> propositions <code>p</code>and <code>q</code>, <code>p → q → p</code>. Now, if <code>p</code> is a proposition, so is <code>¬p</code> and hence we can plug it in instead, to get <code>¬p → q → ¬p</code> (i.e., <code>err := @imp ¬p q</code>).</p>\n<p>Perhaps Arien what you were trying to say is that you can't do this <em>in reverse</em>? That is, you can't go from <code>err</code> to <code>imp</code> in the same trivial way? (of course, you can after rewriting <code>¬¬p</code> to <code>p</code>, but that requires classical axioms)</p>",
        "id": 313596473,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670018447
    },
    {
        "content": "<p>\"Now, if p is a proposition, so is ¬p\" is where I get confused. I <strong>thought</strong> <code>¬p</code> was a function, not a <code>Prop</code></p>",
        "id": 313597166,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670018702
    },
    {
        "content": "<p>Remember, Lean has impredicative <code>Prop</code>, so a Pi type (i.e., edit: <em>type of</em> functions) from <code>Prop</code> ends up in <code>Prop</code>.</p>",
        "id": 313597375,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670018798
    },
    {
        "content": "<p>Those are non contradictory statements. <code>¬ p</code> is a function, but functions have a type too! And the type of <code>¬ p</code> is <code>Prop</code>.</p>",
        "id": 313597391,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670018806
    },
    {
        "content": "<p><code>p : Prop</code>, but also <code>p → False : Prop</code>.</p>",
        "id": 313597399,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670018812
    },
    {
        "content": "<p>Functions don't have the type <code>Prop</code>, but <code>¬p</code> is not a function, it is a type of functions, that is <code>p -&gt; False</code>, the type of all functions from <code>p</code> to <code>False</code>. <code>p -&gt; False</code> is not itself a function, it is a type, and the type of a type is a universe, in this case <code>Prop</code>.</p>",
        "id": 313600010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670020052
    },
    {
        "content": "<p>and <code>hnp</code> <em>is</em> a function, of type <code>Prop</code>?</p>",
        "id": 313602956,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670021416
    },
    {
        "content": "<p><code>hnp</code> <em>is</em> a function, of type <code>¬p</code> / <code>p -&gt; False</code></p>",
        "id": 313603181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670021515
    },
    {
        "content": "<p><code>hnp</code> is not of type <code>Prop</code></p>",
        "id": 313603246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670021529
    },
    {
        "content": "<p>hmm. So then I get confused again by <code>imp hnp</code> --  is my reasoning, that <code>imp hnp</code> works by resolving <code>imp p</code> to <code>p</code>to produce <code>p -&gt; False</code> on the right track?</p>",
        "id": 313603870,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670021822
    },
    {
        "content": "<p>The implicit arguments are doing you a disservice here. Here is your example again without them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_hq</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">err</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">hnp</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"n\">hnp</span>\n</code></pre></div>",
        "id": 313606581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670023169
    },
    {
        "content": "<p><code>imp</code> is actually a function that takes <em>four</em> arguments: two propositions <code>p</code> and <code>q</code>, and then a proof of that <code>p</code> and <code>q</code>. Depending on what propositions you pass for the first two arguments, the rest of the theorem can say different things. If you pass <code>(¬p)</code> and <code>q</code> to <code>imp</code>, that's two arguments down and the remaining two arguments should be proofs of <code>(¬p)</code> and <code>q</code> respectively</p>",
        "id": 313606856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670023338
    }
]