[
    {
        "content": "<p>I want to state <code>p a b → ∃ (at most one) c, q c</code>, and if such <code>c</code> exists, I want <code>f a b = c</code>.  Is there a smart/efficient way to do this?</p>",
        "id": 130274521,
        "sender_full_name": "Ali Sever",
        "timestamp": 1532524460
    },
    {
        "content": "<p>you'll need the axiom of choice, because you're constructing data from a proof :-)</p>",
        "id": 130275258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532525349
    },
    {
        "content": "<p>Are you trying to build such a <code>f</code>?</p>\n<p>The assertion I think could be made as <code>p a b -&gt; ∀ c₀ c₁, q c₀ → q c₁ → c₀ = c₁</code></p>",
        "id": 130275840,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532526108
    },
    {
        "content": "<p>If you're defining <code>f</code>, you can do it in two ways:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">epsilon</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>If a proper <code>c</code> exists (and your type is nonempty), the above <code>f</code> will return it (but you can't evaluate it). If such a <code>c</code> doesn't exist, we don't know what value <code>f</code> has.</p>\n<p>We can be more defensive and write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h&#39;</span>\n</pre></div>\n\n\n<p>This <code>f</code> can only used with a proof that a proper <code>c</code> exists and it will return that <code>c</code> (non-constructively, again).</p>",
        "id": 130276240,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532526583
    }
]