[
    {
        "content": "<p>Hi, from chapter 2, vec.cons is defined as <code>constant cons : Π {α : Type u} {n : ℕ}, α → vec α n → vec α (n + 1)</code> (I made the args optional). Trying <code>#check cons 5</code> works as expected, but doing <code>#check cons 5 (vec nat 10)</code> gives an error</p>\n<div class=\"codehilite\"><pre><span></span>error: type mismatch at application\n  cons 5 (vec ℕ 10)\nterm\n  vec ℕ 10\nhas type\n  Type : Type 1\nbut is expected to have type\n  vec ?m_1 ?m_2 : Type ?\n</pre></div>\n\n\n<p>What is it that I am doing wrong?</p>",
        "id": 182852276,
        "sender_full_name": "Kritixi Lithos",
        "timestamp": 1575737230
    },
    {
        "content": "<p>the definition of <code>cons</code> should be read as follows: given a value of type <code>α</code> and a value of type <code>vec α n</code>, you get a value of type <code>vec α (n + 1)</code>. you are passing <code>vec nat 10</code>, which is a type itself, not a value of type <code>vec α n</code> (similar to how ℕ is a type while 5 is a value of type ℕ).<br>\nan example that would work is <code>#check cons 5 empty</code>, for instance.</p>",
        "id": 182852782,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1575738104
    },
    {
        "content": "<p>Thank you, I understand better now. So then to test with my own examples, I'd have to create vectors using these elementary functions</p>",
        "id": 182853067,
        "sender_full_name": "Kritixi Lithos",
        "timestamp": 1575738562
    }
]