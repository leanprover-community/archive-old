[
    {
        "content": "<p>I'm going through \"Theorem Proving in Lean\" and I'm on page 19 where it has a little exercise to finish writing the curry and uncurry functions.<br>\nIf I start with what is written in the book:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">curry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">curry</span> <span class=\"n\">add</span>\n</pre></div>\n\n\n<p>It doesn't type check, but if I replace the parentheses of <code>(α β γ : Type)</code> to curly braces <code>{α β γ : Type}</code> then it works. Is this a typo in the book or am I misunderstanding something?</p>",
        "id": 192983685,
        "sender_full_name": "Brandon B",
        "timestamp": 1586129954
    },
    {
        "content": "<p>Are you looking at a PDF file? I don't see <code>#check curry add</code> in the more up-to-date <a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#introducing-definitions\" title=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#introducing-definitions\">web version</a>.</p>",
        "id": 192983837,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586130228
    },
    {
        "content": "<p>No I added the last two lines to verify that my curry function can curry a simple add function originally defined on the cartesian product two natural numbers</p>",
        "id": 192983956,
        "sender_full_name": "Brandon B",
        "timestamp": 1586130409
    },
    {
        "content": "<p>The first three arguments to curry are the three types: alpha, beta, gamma.</p>",
        "id": 192984009,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1586130490
    },
    {
        "content": "<p>The way you wrote it.</p>",
        "id": 192984014,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1586130506
    },
    {
        "content": "<p>Oh, then yeah, changing <code>curry</code> to use implicit arguments as you did is probably best. I think the only reason <code>α β γ</code> are explicit there is that implicit arguments aren't introduced until 2.9. As Daniel Keys says, if you want <code>#check</code> to work with the original version, you'd write it this way:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">curry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">curry</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">ℕ</span> <span class=\"n\">add</span>\n</pre></div>",
        "id": 192984026,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586130546
    },
    {
        "content": "<p>If you replace the parantheses with braces, these arguments become implicit. <br>\nOK, see the answer from <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> who was faster.</p>",
        "id": 192984035,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1586130600
    },
    {
        "content": "<p>Ohhh that makes sense, thanks!</p>",
        "id": 192984084,
        "sender_full_name": "Brandon B",
        "timestamp": 1586130647
    }
]