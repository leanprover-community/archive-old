[
    {
        "content": "<p>I thought it might work to have these simp lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">with_bot.coe_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">with_top.coe_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>But it seems like <code>simp</code> will only ever use one (the more recently defined) for both cases, which would make it a pretty bad idea. I guess it sees the left hand side of both as just <code>((a ⊔ b : α) : option α)</code>?</p>",
        "id": 232157359,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1616926566
    },
    {
        "content": "<p>Was just wondering if there was some way to make this work</p>",
        "id": 232157394,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1616926625
    },
    {
        "content": "<p>I'm pretty sure I saw this in a recent PR. An easy compromise is to remove <code>@[simp]</code> from one of them, and add comments that reference each other.</p>",
        "id": 232159450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616929106
    },
    {
        "content": "<p>No, adding <code>@[simp]</code> to just one would be bad because the <code>⊔</code> on the right is annotated with the <code>with_bot</code> type so if it fires on a <code>with_top</code> goal then you will get type confusion issues</p>",
        "id": 232159614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616929265
    },
    {
        "content": "<p>This is exactly why we should just have three isomorphic types and duplicate a load of code :-)</p>",
        "id": 232161377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616931425
    },
    {
        "content": "<p><code>irreducible</code> would fix this, right?</p>",
        "id": 232163544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616934147
    },
    {
        "content": "<p>I think they are already irreducible. This is a bug in <code>simp</code> which has already caused problems for mathport</p>",
        "id": 232164534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616935316
    },
    {
        "content": "<p>Thanks! That may have been my PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6922\">#6922</a>.  I have removed the <code>@[simp]</code> tags for the moment.<br>\nI don't know about <code>irreducible</code> but a quick search for the term in <code>bounded_lattice.lean</code> does not yield any results.</p>",
        "id": 232165204,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1616936062
    },
    {
        "content": "<p>I don't think they're irreducible. This has been discussed several times, but I don't think it made it to mathlib.</p>",
        "id": 232166637,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616937591
    }
]