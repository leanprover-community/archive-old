[
    {
        "content": "<p>Documentation seems to be unclear regarding the <code>let</code> tactic. What does it actually do? The <code>let</code> tactic introduces a hypothesis of the form <code>x : t := v</code>. What does it exactly mean? What is the <code>:=</code> operator here? Is it the meta-operator (like in <code>def</code> of something), or is it a term-level syntactic operator defined inductively (like <code>=</code>)? How to use such a hypothesis? Consider this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h1</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is the <code>simp only [f]</code> preferred way to use such hypothesis? Why do <code>rw</code> and <code>unfold</code> fail? Is there a way to split</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>into two hypothesis</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">t</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 261851674,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1637184353
    },
    {
        "content": "<p>You can use <code>set</code> if you want <code>hx</code>.</p>",
        "id": 261851779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637184392
    },
    {
        "content": "<p><code>set f := λ (x : ℕ), P x 0 with hf,</code></p>",
        "id": 261851868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637184439
    },
    {
        "content": "<p>The <code>let</code> tactic constructs a <code>let ... in ...</code> expression.  Modulo some details, its effect is as if you turned</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n<span class=\"k\">in</span> <span class=\"kd\">begin</span>\n  <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261854159,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637185585
    },
    {
        "content": "<p>I'm not sure why <code>simp only [f]</code> works but <code>rw f</code> doesn't.  I think it has something to do with the fact that <code>f</code> is only <code>let</code>-bound so doesn't have the \"equation lemmas\" that definitions get.</p>",
        "id": 261854466,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637185657
    },
    {
        "content": "<p>In the goal window, <code>x : t := v</code> is just how it writes a hypothesis that actually knows its value (unlike a hypothesis from an argument, or a hypothesis from <code>have</code> that intentionally forgets its value).  It's supposed to represent the <code>:=</code> in a <code>let</code> or a <code>def</code>.</p>",
        "id": 261855050,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637185814
    },
    {
        "content": "<p>simp has special code for let iirc</p>",
        "id": 261857501,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637186767
    }
]