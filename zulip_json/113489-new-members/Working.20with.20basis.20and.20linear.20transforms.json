[
    {
        "content": "<p>I'm going through the book \"Linear Algebra Done Right\", and thought I'd try to do some of the proof exercises from the book in Lean. I'm really struggling to understand how to deal with linear transforms and basis of vector spaces in lean. The proof I'm trying to write is of the following statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Suppose</span> <span class=\"n\">V</span> <span class=\"n\">and</span> <span class=\"n\">W</span> <span class=\"n\">are</span> <span class=\"n\">finite</span><span class=\"bp\">-</span><span class=\"n\">dimensional</span> <span class=\"n\">and</span> <span class=\"n\">T</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">linear</span> <span class=\"n\">transform</span> <span class=\"k\">from</span> <span class=\"n\">V</span> <span class=\"n\">to</span> <span class=\"n\">W.</span>\n<span class=\"n\">Show</span> <span class=\"n\">that</span> <span class=\"k\">with</span> <span class=\"n\">respect</span> <span class=\"n\">to</span> <span class=\"n\">each</span> <span class=\"n\">choice</span> <span class=\"n\">of</span> <span class=\"n\">bases</span> <span class=\"n\">of</span> <span class=\"n\">V</span> <span class=\"n\">and</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">matrix</span> <span class=\"n\">of</span>\n<span class=\"n\">T</span> <span class=\"n\">has</span> <span class=\"n\">at</span> <span class=\"n\">least</span> <span class=\"n\">dim</span> <span class=\"n\">range</span> <span class=\"n\">T</span> <span class=\"n\">nonzero</span> <span class=\"n\">entries.</span>\n</code></pre></div>\n<p>I'm able to express V and W in Lean as the following, based on what I found in a Xena lecture on Youtube:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>What I'm struggling to express is the idea of a Linear Transform <code>T</code> which maps from <code>V</code> to <code>W</code>, and how to write the basis of V and W. And then how to express the idea of the range of <code>T</code> in Lean. I see there's <code>linear_algebra/basis.lean</code>, and there's <code>linear_algebra/basic.lean</code> which mentions linear maps, but in a syntax I can't follow. I can't figure out how to use the concepts in these files though - are there examples somewhere of how to work with Linear Transforms and Basis of vector spaces in Lean?</p>",
        "id": 289958945,
        "sender_full_name": "David Chanin",
        "timestamp": 1658147752
    },
    {
        "content": "<p>A linear transform is called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map\">docs#linear_map</a> in Mathlib, and a <code>K</code>-linear transform is written <code>(T : V →ₗ[K] W)</code>. You have to indicate which field (ring) it's linear over, because <code>V</code> and <code>W</code> could also be vector spaces over other fields.</p>",
        "id": 289959467,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658148056
    },
    {
        "content": "<p>An arbitrary basis of <code>V</code> is written as <code>{ι : Type*} (b : basis ι K V)</code>. To choose a fixed, but unkown, basis for a vector space, use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis.of_vector_space\">docs#basis.of_vector_space</a>.</p>",
        "id": 289959722,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658148195
    },
    {
        "content": "<p>More specifically, <code>basis ι K V</code> is the type of all <code>#ι</code>-dimensional bases for the <code>K</code>-vector space <code>V</code>, where <code>#ι</code> is the cardinality of <code>ι</code>. So <code>basis (fin 4) K V</code> is the type of all 4-dimensional bases.</p>",
        "id": 289960356,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658148523
    },
    {
        "content": "<p>Aah thank you so much! I tried adding the following 2 lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">bV</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">basis.of_vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The <code>T</code> definition seems to not give an error, but <code>variables {bV: Type} [basis.of_vector_space K V]</code> gives the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">basis</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">basis.of_vector_space_index</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Sort</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>I don't understand what this means. Apologies I'm sure this is an extremely basic misunderstanding on my part!</p>",
        "id": 289960571,
        "sender_full_name": "David Chanin",
        "timestamp": 1658148630
    },
    {
        "content": "<p>What do you want to say with <code>variables {bV: Type} [basis.of_vector_space K V]</code>? Do you want to fix a basis?</p>",
        "id": 289960775,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658148728
    },
    {
        "content": "<p>I want to say \"bv is a basis of V\"</p>",
        "id": 289960799,
        "sender_full_name": "David Chanin",
        "timestamp": 1658148743
    },
    {
        "content": "<p>So you need to say <code>variables (bv : basis (basis.of_vector_space_index K V) K V))</code></p>",
        "id": 289960889,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658148793
    },
    {
        "content": "<p>or just <code>(bv : basis I K V)</code></p>",
        "id": 289961051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658148854
    },
    {
        "content": "<p>No need to specify that it's one particular arbitrary index set</p>",
        "id": 289961073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658148864
    },
    {
        "content": "<p>Oh sure, that's even better. <code>basis I K V</code> is the type (read set) of <code>K</code>-basis of <code>V</code> indexed by <code>I</code> (you need to introduce <code>(I : Type*)</code> before naming it).</p>",
        "id": 289961174,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658148924
    },
    {
        "content": "<p>Note that in mathlib basis have this index set, that is usually irrelevant in math. You can have a basis indexed the set <code>{1,2,3}</code> and a basis indexed by <code>{a,b,c}</code> (this is not precise, basis are indexed by types, but still), and even if the two basis \"choose\" the same elements of <code>V</code>, they're different.</p>",
        "id": 289961412,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658149054
    },
    {
        "content": "<p>Amazing! Thank you so much! That worked! I don't think I would have ever come up with that on my own <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 289961493,
        "sender_full_name": "David Chanin",
        "timestamp": 1658149083
    },
    {
        "content": "<p>This is because we usually think that a basis is a set, but this is incorrect, since then we order the elements to build the matrix. Also, at least in principle, we allow repetitions (as in the exercise \"the set <code>{v, v}</code>\" is not linear independent since <code>v-v = 0</code> is a non trivial linear combination equals to <code>0</code>). The way this idea is formalized is that a basis is a function <code>b : ι → V</code> for some index type <code>ι</code>. Usually only its cardinality matters, but technically it is there.</p>",
        "id": 289961767,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658149215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479618\">David Chanin</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20basis.20and.20linear.20transforms/near/289961493\">said</a>:</p>\n<blockquote>\n<p>Amazing! Thank you so much! That worked! I don't think I would have ever come up with that on my own <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>This is the way of things at the beginning. Even after I'd done 50 undergraduate problem sheet questions there were still plenty of problems where I couldn't even write down the question properly. Everything works, you just have to get the hang of the way mathlib thinks about mathematics.</p>",
        "id": 289962543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658149644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20basis.20and.20linear.20transforms/near/289962543\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479618\">David Chanin</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20basis.20and.20linear.20transforms/near/289961493\">said</a>:</p>\n<blockquote>\n<p>Amazing! Thank you so much! That worked! I don't think I would have ever come up with that on my own <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>This is the way of things at the beginning. Even after I'd done 50 undergraduate problem sheet questions there were still plenty of problems where I couldn't even write down the question properly. Everything works, you just have to get the hang of the way mathlib thinks about mathematics.</p>\n</blockquote>\n<p>That's encouraging to hear! I went through the natural number game and can do some basic proofs, but trying to prove things in the wild still feels really challenging</p>",
        "id": 289990420,
        "sender_full_name": "David Chanin",
        "timestamp": 1658161986
    },
    {
        "content": "<p>I'm struggling now to express the idea of \"the matrix of T has at least dim range T nonzero entries\". I think this really boils down to the idea that T(x) can be expressed as a sum of the T(coeffients * basis_of_v), and there should be at least <code>dim range T</code> non-zero coefficients in that equation. Is there a way I can express that <code>T</code> can be expressed be as <code>∑  a_i* T(basis_of_v_i)</code>, so that at least <code>dim range T</code> of those <code>a_i</code> must be non-zero?</p>",
        "id": 289991550,
        "sender_full_name": "David Chanin",
        "timestamp": 1658162473
    },
    {
        "content": "<p>Do you a <code>linear_map</code>? If so, you can make a matrix out of it, given a basis. Then you can form a multiset of the values in the matrix. And then you can say that <code>dim range T &lt;= multiset.card s - multiset.count s 0</code>.</p>",
        "id": 289993926,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658163520
    },
    {
        "content": "<p>I have the following setup so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">bv</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">I</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">bw</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">I</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So, <code>T</code> is a linear map (I think), and <code>bv</code> and <code>bw</code> are bases. How can I form a matrix from <code>T</code> given <code>bv</code>?</p>",
        "id": 289994283,
        "sender_full_name": "David Chanin",
        "timestamp": 1658163650
    },
    {
        "content": "<p>The guessable name <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.to_matrix\">docs#linear_map.to_matrix</a></p>",
        "id": 289994394,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658163688
    },
    {
        "content": "<p>Apologies this is probably really obvious, but I can't seem to get that function to work. I'm trying the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">T_matrix</span> <span class=\"o\">:</span> <span class=\"n\">linear_map.to_matrix</span> <span class=\"n\">bv</span> <span class=\"n\">bw</span> <span class=\"n\">T</span>\n</code></pre></div>",
        "id": 289995521,
        "sender_full_name": "David Chanin",
        "timestamp": 1658164173
    },
    {
        "content": "<p>In the docs it seems like it takes 2 bases and the linear map, but this seems like the wrong inputs</p>",
        "id": 289995600,
        "sender_full_name": "David Chanin",
        "timestamp": 1658164203
    },
    {
        "content": "<p>At this point, <code>linear_map.to_matrix bv bw</code> is a term, not a type</p>",
        "id": 289995702,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658164260
    },
    {
        "content": "<p>Does that mean I can't use <code>variable</code> to name this?</p>",
        "id": 289995953,
        "sender_full_name": "David Chanin",
        "timestamp": 1658164367
    },
    {
        "content": "<p>so you wouldn't say you have a variable of this type. you could have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">T_matrix</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">T_matrix</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.to_matrix</span> <span class=\"n\">bv</span> <span class=\"n\">bw</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T_matrix</span>  <span class=\"bp\">=</span> <span class=\"n\">T.to_matrix</span> <span class=\"n\">bv</span> <span class=\"n\">bw</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>There, I am using dot-notation to have a cleaner statement</p>",
        "id": 289995960,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658164369
    },
    {
        "content": "<p>ooh interesting. Hrm this is giving an error as well,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">W</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 289996452,
        "sender_full_name": "David Chanin",
        "timestamp": 1658164576
    },
    {
        "content": "<p>The full code is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">bv</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">I</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">bw</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">I</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">T_matrix</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">T_matrix</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.to_matrix</span> <span class=\"n\">bv</span> <span class=\"n\">bw</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n  <span class=\"n\">T_matrix</span> <span class=\"bp\">=</span> <span class=\"n\">T.to_matrix</span> <span class=\"n\">bv</span> <span class=\"n\">bw</span>\n<span class=\"o\">:=</span>\n  <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 289996543,
        "sender_full_name": "David Chanin",
        "timestamp": 1658164629
    },
    {
        "content": "<p>Ah, sorry. I was wrong about the syntax here.</p>",
        "id": 289996739,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658164748
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">bv</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">I</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">bw</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">I</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">T_matrix</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">T_matrix</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.to_matrix</span> <span class=\"n\">bv</span> <span class=\"n\">bw</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n  <span class=\"n\">T_matrix</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.to_matrix</span> <span class=\"n\">bv</span> <span class=\"n\">bw</span> <span class=\"n\">T</span>\n<span class=\"o\">:=</span>\n  <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 289996744,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658164753
    },
    {
        "content": "<p>So I couldn't get dot-notation working here. And I was missing the base ring argument of the <code>matrix</code> term, that was the error. And also I was confused about how to specify it -- I needed to give the indexing type. Then, I got errors about missing instances -- <code>linear_map.to_matrix</code> only really works on indexing types that can be finitely and distinctly enumerated, which is what <code>[decidable_eq I] [fintype I]</code> do.</p>",
        "id": 289996983,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658164858
    },
    {
        "content": "<p>I see so <code>I</code> refers to the length of the basis, so if I use the same <code>I</code> that means that both V and W are the same size space</p>",
        "id": 289997207,
        "sender_full_name": "David Chanin",
        "timestamp": 1658164964
    },
    {
        "content": "<p>How did you figure all of that out?</p>",
        "id": 289997260,
        "sender_full_name": "David Chanin",
        "timestamp": 1658164991
    },
    {
        "content": "<p>Going back to your original question about why <code>variables T_matrix : linear_map.to_matrix ...</code>, <code>variables</code> just means \"let us have an x \\mem X\" in regular math speak</p>",
        "id": 289997295,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658165009
    },
    {
        "content": "<p>You are the one that said that both <code>V</code> and <code>W</code> are the same size space here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">bv</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">I</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">bw</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">I</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289997337,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658165041
    },
    {
        "content": "<p>You're saying there \"I have this data package I will call bv, which is a set of vectors indexed by <code>I</code> that is a basis for the vector space <code>V</code> over the base field <code>K</code>\"</p>",
        "id": 289997474,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658165093
    },
    {
        "content": "<p>Similarly for <code>bw, W</code>. So you can have two different <code>I, I_prime</code> to generalize.</p>",
        "id": 289997534,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658165118
    },
    {
        "content": "<p>That makes sense - I just updated the code to the following to fix that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Vi</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Vi</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">Vi</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Wi</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Wi</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">Wi</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">bv</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">Vi</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">bw</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">Wi</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">T_matrix</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">Wi</span> <span class=\"n\">Vi</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">T_matrix</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.to_matrix</span> <span class=\"n\">bv</span> <span class=\"n\">bw</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n  <span class=\"n\">T_matrix</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.to_matrix</span> <span class=\"n\">bv</span> <span class=\"n\">bw</span> <span class=\"n\">T</span>\n<span class=\"o\">:=</span>\n  <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 289997736,
        "sender_full_name": "David Chanin",
        "timestamp": 1658165208
    },
    {
        "content": "<p>hrm maybe this proof is too advanced for me. I'm still struggle to even write out the thing that I'm trying to prove <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> .  I think I want something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">T_matrix</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">Wi</span> <span class=\"n\">Vi</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">T_matrix</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.to_matrix</span> <span class=\"n\">bv</span> <span class=\"n\">bw</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> number of non-zero entries in T_matrix -/</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">T.range</span>\n<span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 289999052,
        "sender_full_name": "David Chanin",
        "timestamp": 1658165884
    },
    {
        "content": "<p>If you were programming, how you would get the entries of a matrix?</p>",
        "id": 289999142,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658165935
    },
    {
        "content": "<p>I'd loop over the indices of the matrix</p>",
        "id": 289999567,
        "sender_full_name": "David Chanin",
        "timestamp": 1658166181
    },
    {
        "content": "<p>Great, so how would it look like explicitly here? If you can write it out, we can translate it to lean</p>",
        "id": 289999623,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658166214
    },
    {
        "content": "<p>or do something like <code>(mat != 0).sum()</code></p>",
        "id": 289999727,
        "sender_full_name": "David Chanin",
        "timestamp": 1658166249
    },
    {
        "content": "<p>Using nested for-loops, it would be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">total_non_zero</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">len</span><span class=\"o\">(</span><span class=\"n\">mat</span><span class=\"o\">):</span>\n  <span class=\"n\">row</span> <span class=\"bp\">=</span> <span class=\"n\">mat</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"n\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">len</span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]):</span>\n    <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span><span class=\"o\">:</span>\n      <span class=\"n\">total_non_zero</span> <span class=\"bp\">+=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 289999900,
        "sender_full_name": "David Chanin",
        "timestamp": 1658166352
    },
    {
        "content": "<p>OK, so here, we're going to express it as a map. Really, a map of maps</p>",
        "id": 289999982,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658166375
    },
    {
        "content": "<p>I see a <a href=\"http://matrix.map\">matrix.map</a> function. Is that the correct thing to use?</p>",
        "id": 290000580,
        "sender_full_name": "David Chanin",
        "timestamp": 1658166692
    },
    {
        "content": "<p>Something like <code>mat.map(elm -&gt; elm == 0 ? 0 : 1)</code> and then sum it somehow?</p>",
        "id": 290000706,
        "sender_full_name": "David Chanin",
        "timestamp": 1658166747
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Vi</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Vi</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">Vi</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Wi</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Wi</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">Wi</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">bv</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">Vi</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">bw</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">Wi</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">values</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset.product</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Vi</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Wi</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val.map</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">linear_map.to_matrix</span> <span class=\"n\">bv</span> <span class=\"n\">bw</span> <span class=\"n\">T</span> <span class=\"n\">p.2</span> <span class=\"n\">p.1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">target</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">set.finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">T.range</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">values</span> <span class=\"n\">T</span> <span class=\"n\">bv</span> <span class=\"n\">bw</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"n\">values</span> <span class=\"n\">T</span> <span class=\"n\">bv</span> <span class=\"n\">bw</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 290000844,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658166836
    },
    {
        "content": "<p>Yeah you could also do that</p>",
        "id": 290000908,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658166852
    },
    {
        "content": "<p>what does it mean to be noncomputable?</p>",
        "id": 290000988,
        "sender_full_name": "David Chanin",
        "timestamp": 1658166896
    },
    {
        "content": "<p>We don't have a <code>matrix.sum</code>, so even if we mapped the matrix, the count (which would be the sum), would require something similar</p>",
        "id": 290001016,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658166905
    },
    {
        "content": "<p>aah so I just need to prove the <code>target</code> lemma then!</p>",
        "id": 290001082,
        "sender_full_name": "David Chanin",
        "timestamp": 1658166940
    },
    {
        "content": "<p><code>noncomputable</code> here just means that it does not generate VM code to execute this definition. That is because the <code>linear_map.to_matrix</code> construction is a axiom-of-choice-based construction</p>",
        "id": 290001101,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658166949
    },
    {
        "content": "<p>OK, at least that's something for me to start with</p>",
        "id": 290001107,
        "sender_full_name": "David Chanin",
        "timestamp": 1658166950
    },
    {
        "content": "<p>I see, if I delete \"noncomputable\" it says I need to add it back , so at least I can't ever forget to write that if it's needed</p>",
        "id": 290001312,
        "sender_full_name": "David Chanin",
        "timestamp": 1658167034
    },
    {
        "content": "<p>It's axiom-of-choice, because, consider an arbitrary distinct finite set that indexes our matrix. Sure, but in what order? The order of the indexing doesn't matter for it being a linear map. But you have to choose _some_ order for the matrix to actually exist.</p>",
        "id": 290001352,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167058
    },
    {
        "content": "<p>That's not the full story, but it's close enough</p>",
        "id": 290001371,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167071
    },
    {
        "content": "<p>Does that mean you can write theorems about matrices, but can never actually instantiate a specific matrix and run a computation with it?</p>",
        "id": 290001493,
        "sender_full_name": "David Chanin",
        "timestamp": 1658167130
    },
    {
        "content": "<p>like, I could never create the matrix <code>[1 2; 3 4]</code> and then compute the determinant or something?</p>",
        "id": 290001553,
        "sender_full_name": "David Chanin",
        "timestamp": 1658167165
    },
    {
        "content": "<p>Oh, you definitely can:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">M</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"c1\">-- 4</span>\n</code></pre></div>",
        "id": 290001806,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167275
    },
    {
        "content": "<p>But in lean, there are different modes of computation. There is the kernel, the VM, and also tactic based. Like this is tactic based from <code>test/matrix.lean</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix.det</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.det_succ_row_zero</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">],</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Try this: simp only [det_succ_row_zero, fin.sum_univ_succ, neg_mul, cons_append,</span>\n<span class=\"cm\">  mul_one, fin.default_eq_zero, fin.coe_zero, cons_vec_bit0_eq_alt0, one_mul, cons_val_one,</span>\n<span class=\"cm\">  cons_vec_alt0, fin.succ_succ_above_one, fin.coe_succ, univ_unique, minor_apply, pow_one,</span>\n<span class=\"cm\">  fin.zero_succ_above, fin.succ_zero_eq_one, fin.succ_succ_above_zero, nat.neg_one_sq,</span>\n<span class=\"cm\">  finset.sum_singleton, cons_val_zero, cons_val_succ, det_fin_zero, head_cons, pow_zero]</span>\n<span class=\"cm\">   -/</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290001941,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167324
    },
    {
        "content": "<p>Note, the <code>#eval</code> example had concrete explicit types. In the <code>det</code> example, I \"computed\" the determinant on an arbitrary type of values.</p>",
        "id": 290002001,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167356
    },
    {
        "content": "<p>And yes, one can compute the <code>det</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.determinant</span>\n<span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">M.det</span> <span class=\"c1\">-- -2</span>\n</code></pre></div>",
        "id": 290002095,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167415
    },
    {
        "content": "<p>Seeing this is really helpful</p>",
        "id": 290002125,
        "sender_full_name": "David Chanin",
        "timestamp": 1658167439
    },
    {
        "content": "<p>Thank you so much for taking the time to walk me through all of this stuff!</p>",
        "id": 290002180,
        "sender_full_name": "David Chanin",
        "timestamp": 1658167449
    },
    {
        "content": "<p>Sure thing! My first foray into mathlib was also trying to prove stuff about matrices and determinants</p>",
        "id": 290002220,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167468
    },
    {
        "content": "<p>That 3x3 determinant example was one of my first pushes to get all the lemmas in place and make <code>simp; ring</code> be able to solve it</p>",
        "id": 290002302,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167512
    },
    {
        "content": "<p>ooh excellent - is any of that online? I didn't see a lot of examples of proving linear algebra stuff online</p>",
        "id": 290002305,
        "sender_full_name": "David Chanin",
        "timestamp": 1658167514
    },
    {
        "content": "<p>I kinda abandoned it, but you could look at <a href=\"https://github.com/pechersky/e222/tree/master/src\">https://github.com/pechersky/e222/tree/master/src</a></p>",
        "id": 290002369,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167557
    },
    {
        "content": "<p>There are other people working on formalizing Axler</p>",
        "id": 290002428,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167567
    },
    {
        "content": "<p>Here's another example of \"computation\": <a href=\"https://github.com/pechersky/e222/blob/master/src/problems02.lean#L49-L58\">https://github.com/pechersky/e222/blob/master/src/problems02.lean#L49-L58</a></p>",
        "id": 290002609,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167676
    },
    {
        "content": "<p>It's not only computing that these two matrices are the same, but also computing a proof certificate of that, that's via the <code>norm_num</code> tactic.</p>",
        "id": 290002683,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167700
    },
    {
        "content": "<p>ah great, I'll take a look at these!</p>",
        "id": 290002773,
        "sender_full_name": "David Chanin",
        "timestamp": 1658167759
    },
    {
        "content": "<p>And here's the \"proof-by-brute-force version\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.determinant</span>\n<span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">M.det</span> <span class=\"c1\">-- -2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">M.det</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 290002803,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167776
    },
    {
        "content": "<p>Watch how a tiny change breaks the \"proof-by-force\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.determinant</span>\n<span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">M.det</span> <span class=\"c1\">-- -2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">M.det</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- no longer works</span>\n</code></pre></div>",
        "id": 290002919,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167827
    },
    {
        "content": "<p>So instead, \"proof-by-tactic\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.determinant</span>\n<span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">M.det</span> <span class=\"c1\">-- -2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">M.det</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">matrix.det_fin_two</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 290003133,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658167943
    },
    {
        "content": "<p>And yet another change:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.determinant</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">M.det</span> <span class=\"c1\">-- uhhh, what?? it's showing underlying impl, not 2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">M.det</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">matrix.det_fin_two</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 290003343,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658168044
    },
    {
        "content": "<p>I can't get these examples to run, it doesn't seem to like the <code>!![1, 2; 3, 4]</code> syntax in Lean for me</p>",
        "id": 290005519,
        "sender_full_name": "David Chanin",
        "timestamp": 1658169124
    },
    {
        "content": "<p>Do you have <code>data.matrix.notation</code> imported? What mathlib commit are you on?</p>",
        "id": 290005571,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658169154
    },
    {
        "content": "<p>I am on current master, or maybe 13 commits behind</p>",
        "id": 290005600,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658169170
    },
    {
        "content": "<p>Mine is 16 days old, let me try updating...</p>",
        "id": 290005925,
        "sender_full_name": "David Chanin",
        "timestamp": 1658169317
    },
    {
        "content": "<p>oh yeah it works now! strange</p>",
        "id": 290006277,
        "sender_full_name": "David Chanin",
        "timestamp": 1658169485
    },
    {
        "content": "<p>It was a recent PR</p>",
        "id": 290006396,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658169553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20basis.20and.20linear.20transforms/near/290003343\">said</a>:</p>\n<blockquote>\n<p>And yet another change:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.determinant</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">M.det</span> <span class=\"c1\">-- uhhh, what?? it's showing underlying impl, not 2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">M.det</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">matrix.det_fin_two</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>whoa why does the #eval break so hard with real numbers? Stuff only works correctly on integers?</p>",
        "id": 290007194,
        "sender_full_name": "David Chanin",
        "timestamp": 1658170017
    },
    {
        "content": "<p>Reals are equivalence classes of Cauchy sequences of rational numbers - it's not so obvious to compute with those</p>",
        "id": 290008536,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1658170700
    },
    {
        "content": "<p>It's not obvious what it even means to print out a real!</p>",
        "id": 290008814,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658170826
    },
    {
        "content": "<p>🤯 math is hard</p>",
        "id": 290009316,
        "sender_full_name": "David Chanin",
        "timestamp": 1658171051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.to_matrix\">docs#linear_map.to_matrix</a> uses choice for totally silly reasons (in order to <em>state</em> that a basis is a linear map to coordinates), the actual data is computed without it.</p>",
        "id": 290011866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658172313
    },
    {
        "content": "<blockquote>\n<p>But you have to choose _some_ order for the matrix to actually exist.</p>\n</blockquote>\n<p>Not true, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix\">docs#matrix</a> and even <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det\">docs#matrix.det</a> requires no order</p>",
        "id": 290012026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658172382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, I was planning a PR such that reals that are coerced naturals have a reasonable repr</p>",
        "id": 290012317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658172520
    },
    {
        "content": "<p>Sorry for the FUD. What's the silly reason for that <code>basis</code> issue?</p>",
        "id": 290012509,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658172624
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.has_add\">docs#finsupp.has_add</a></p>",
        "id": 290014473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658173779
    },
    {
        "content": "<p>To avoid earning a <span aria-label=\"butterfly\" class=\"emoji emoji-1f98b\" role=\"img\" title=\"butterfly\">:butterfly:</span>; by \"totally silly\" I mean \"not mathematical\" as opposed to \"this was a bad design decision\".</p>",
        "id": 290014558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658173811
    },
    {
        "content": "<p>As a tip: you can hover over the word \"noncomputable\" in the docs to see why something is noncomputable</p>",
        "id": 290014743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658173926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20basis.20and.20linear.20transforms/near/290012317\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>, I was planning a PR such that reals that are coerced naturals have a reasonable repr</p>\n</blockquote>\n<p>And fractions too?</p>",
        "id": 290020303,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658176933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20basis.20and.20linear.20transforms/near/290020303\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20basis.20and.20linear.20transforms/near/290012317\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>, I was planning a PR such that reals that are coerced naturals have a reasonable repr</p>\n</blockquote>\n<p>And fractions too?</p>\n</blockquote>\n<p>Currently not possible, but should be doable after <a href=\"https://github.com/leanprover-community/mathlib/pull/14894\">#14894</a>.</p>",
        "id": 290076504,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658224660
    }
]