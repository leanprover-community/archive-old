[
    {
        "content": "<p>Dear All,</p>\n<p>another question with a complete, yet annoying, proof.  Lean likes to use <code>.to_fun</code> to refer to the coefficients of a polynomial, but whenever it does, I need to insert a <code>have</code> statement to convert <code>.to_fun</code> to <code>.coeff</code> (with proof <code>refl</code>), since most of the functionality that I know uses  <code>.coeff</code> instead of <code>.to_fun</code>.  In the example below, you can see this happening at the <code>have</code> line.  Can I avoid the <code>have</code> statement?</p>\n<p>Thank you very much!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">support_monomial</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">⊆</span> <span class=\"n\">singleton</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_singleton</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">3</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">coeff_X_pow</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211117968,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600947039
    },
    {
        "content": "<p>Things like <code>rw (X^n).3</code> are not an official part of the API, which is why you're seeing <code>to_fun</code>.</p>",
        "id": 211118132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600947155
    },
    {
        "content": "<p>Ok, in this case, possibly.  I have also seen it happen after <code>simp</code>, though</p>",
        "id": 211118168,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600947196
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">support_monomial</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">⊆</span> <span class=\"n\">singleton</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_singleton</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_support_iff_coeff_ne_zero</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">coeff_X_pow</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211118173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600947200
    },
    {
        "content": "<p>If it happens after <code>simp</code> then there might be a missing (or bad) simp lemma.</p>",
        "id": 211118182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600947218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thank you for the working example!  This is what I was hoping for!</p>",
        "id": 211118282,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600947291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.3A.20.2Eto_fun.20vs.20.2Ecoeff/near/211118182\">said</a>:</p>\n<blockquote>\n<p>If it happens after <code>simp</code> then there might be a missing (or bad) simp lemma.</p>\n</blockquote>\n<p>Should it happen again with <code>simp</code>, I may report it as well</p>",
        "id": 211118306,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600947318
    },
    {
        "content": "<p>The trick with these things is to try and keep everything (hypotheses, goals) in the \"standard form\" (because this is what <code>simp</code> and <code>rw</code> like to see).</p>",
        "id": 211118428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600947393
    },
    {
        "content": "<p>Essentially: anytime you see <code>.to_fun</code>, it's a reflection that the API for polynomials is imperfect. We should aim to get out of this situation! The fact that <code>polynomial</code> is actually defined in terms of <code>finsupp</code> should be sealed away as early as practically possible. PRs that improve on this are very welcome. :-)</p>",
        "id": 211123062,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600950183
    },
    {
        "content": "<p>Very well: I will take a close look at whether I produce <code>.to_fun</code> myself, or whether it is produced by <code>simp</code>/Lean!</p>",
        "id": 211123324,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600950337
    }
]