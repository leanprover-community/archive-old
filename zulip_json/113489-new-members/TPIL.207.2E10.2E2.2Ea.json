[
    {
        "content": "<p>TPIL exercise 7.10.2.a says to prove the following:</p>\n<div class=\"codehilite\"><pre><span></span>Length (s ++ t) = Length s + Length t\n</pre></div>\n\n\n<p>(Note, <code>List</code> and <code>Length</code> and others below are capitalized so as not to clash with the ones provided by Lean. Their definitions are from earlier in chapter 7.)</p>\n<p>Here's what I have so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n\n    <span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">s</span>\n\n        <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">Nil</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"n\">Nil</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n            <span class=\"k\">calc</span>\n                <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">Nil</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span>   <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nil_append</span><span class=\"o\">]</span>\n                <span class=\"bp\">...</span>                 <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">)))</span>\n\n        <span class=\"o\">(</span><span class=\"bp\">λ</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"n\">a_1</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n\n            <span class=\"k\">show</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n\n                <span class=\"k\">calc</span>\n\n                    <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">))</span>              <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cons_append</span><span class=\"o\">]</span>\n                    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span>        <span class=\"o\">:</span> <span class=\"n\">length_cons</span>\n                    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Length</span> <span class=\"n\">a_1</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n                    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">a_1</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span>\n                    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span>          <span class=\"o\">:</span> <span class=\"n\">length_cons</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Note that <code>length_cons</code> that's referenced in the <code>calc</code> expression does not exist. Lean seem to be OK with the rest of the proof (there are no other red squiggles).</p>\n<p>As you can see, I sketched out an approach that assumes the existence of something like this:</p>\n<div class=\"codehilite\"><pre><span></span>theorem length_cons (a : α) (s : List α) : Length (a :: s) = Length [a] + Length s\n</pre></div>\n\n\n<p>Is this a good approach? Should I continue on in proving <code>length_cons</code> and use that? Or would you recommend another approach?</p>\n<p>Thanks for any suggestions!</p>",
        "id": 183520868,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1576474098
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma ex1 {A : Type} {s t : list A} : length (s ++ t) = length s + length t :=\nbegin\ninduction s with x xs hs,\nunfold length,\nrw list.nil_append,\nrw zero_add,\nrw list.cons_append,\nunfold length,\nrw hs,\nrwa add_assoc,\nend\n</pre></div>",
        "id": 183523350,
        "sender_full_name": "YH",
        "timestamp": 1576478931
    },
    {
        "content": "<p>If you can state <code>length_cons</code>, sorry the proof, and get the example compiling modulo that one sorry, then sure you should continue!  As YH points out, it can be much easier to write this stuff in tactic mode, although I suspect they are using standard facts about <code>list</code>s which you might not have proved for <code>List</code>s.</p>",
        "id": 183529234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576486246
    },
    {
        "content": "<p><code>nil_append</code> and <code>cons_append</code> are just proved by <code>rfl</code> in mathlib, should be easy for <code>List</code> too.</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] lemma nil_append (s : list α) : [] ++ s = s :=\nrfl\n\n@[simp] lemma cons_append (x : α) (s t : list α) : (x::s) ++ t = x::(s ++ t) :=\nrfl\n</pre></div>",
        "id": 183564985,
        "sender_full_name": "YH",
        "timestamp": 1576513491
    },
    {
        "content": "<p>You can <code>#print prefix List</code> to see all the functions which Lean made for you to use with <code>List</code>.</p>",
        "id": 183565177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576513591
    },
    {
        "content": "<blockquote>\n<p>If you can state <code>length_cons</code>, sorry the proof, and get the example compiling modulo that one sorry, then sure you should continue!  As YH points out, it can be much easier to write this stuff in tactic mode, although I suspect they are using standard facts about <code>list</code>s which you might not have proved for <code>List</code>s.</p>\n</blockquote>\n<p>Good suggestion <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  regarding using <code>sorry</code> with <code>length_cons</code> to see if the whole thing compiles. Thanks!</p>\n<p>This version does indeed appear to compile:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">length_cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n\n    <span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">s</span>\n\n        <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">Nil</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"n\">Nil</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n            <span class=\"k\">calc</span>\n                <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">Nil</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span>   <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nil_append</span><span class=\"o\">]</span>\n                <span class=\"bp\">...</span>                 <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">)))</span>\n\n        <span class=\"o\">(</span><span class=\"bp\">λ</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"n\">a_1</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n\n            <span class=\"k\">show</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n\n                <span class=\"k\">calc</span>\n\n                    <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">))</span>              <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cons_append</span><span class=\"o\">]</span>\n                    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span>        <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">length_cons</span>\n                    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Length</span> <span class=\"n\">a_1</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n                    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">a_1</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span>\n                    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span>          <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">length_cons</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 183572298,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1576517946
    },
    {
        "content": "<p>Given that the above works in terms of an assumed <code>length_cons</code>,  I decided to look into proving that.</p>\n<p>This section of the chapter is emphasizing <code>rec_on</code> so I took an approach using that first:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- length_cons</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n\n    <span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">s</span>\n\n        <span class=\"n\">rfl</span>\n\n        <span class=\"o\">(</span><span class=\"bp\">λ</span>  <span class=\"o\">(</span><span class=\"n\">α_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">a_2</span><span class=\"o\">),</span>\n\n            <span class=\"k\">show</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">α_1</span> <span class=\"bp\">::</span> <span class=\"n\">a_2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">α_1</span> <span class=\"bp\">::</span> <span class=\"n\">a_2</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n\n                <span class=\"bp\">_</span>\n        <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>The helper that we end up with:</p>\n<div class=\"codehilite\"><pre><span></span>ih : Length (a :: a_2) = Length [a] + Length a_2\n</pre></div>\n\n\n<p>is very awkward and doesn't seem to help.</p>\n<p>Moreover, the goal left to prove is:</p>\n<div class=\"codehilite\"><pre><span></span>Length (a :: α_1 :: a_2) = Length [a] + Length (α_1 :: a_2)\n</pre></div>\n\n\n<p>which is seemingly more complex than the original statement! :-)</p>\n<p>So it seems like maybe this approach to <code>length_cons</code> is not the way to go. Perhaps I should not use <code>rec_on</code>? Any suggestions are welcome.</p>",
        "id": 183612036,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1576549493
    },
    {
        "content": "<p><code>length_cons</code> should be <code>rfl</code>, i.e. by definition.</p>",
        "id": 183612752,
        "sender_full_name": "Joe",
        "timestamp": 1576550733
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">length_cons&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n</pre></div>",
        "id": 183612805,
        "sender_full_name": "Joe",
        "timestamp": 1576550776
    },
    {
        "content": "<p>But I'm not sure of your definition of <code>Length</code>.</p>",
        "id": 183612825,
        "sender_full_name": "Joe",
        "timestamp": 1576550841
    },
    {
        "content": "<p>By the way, it seems that <code>length_append</code> can be solved by <code>simp</code>. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">length_cons&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">length_append&#39;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">squeeze_simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">squeeze_simp</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n</pre></div>\n\n\n<p>You can look into <code>squeeze_simp</code> to see what lemmas are used.</p>",
        "id": 183612941,
        "sender_full_name": "Joe",
        "timestamp": 1576551016
    },
    {
        "content": "<p>Here is what it looks like if you do it by hand.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">length_cons&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">length_append&#39;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nil_append</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">],</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cons_append</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">length_append</span><span class=\"o\">],</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n</pre></div>",
        "id": 183613031,
        "sender_full_name": "Joe",
        "timestamp": 1576551198
    },
    {
        "content": "<p>Thanks for your suggestions <span class=\"user-mention\" data-user-id=\"127148\">@Joe</span>!</p>\n<blockquote>\n<p>But I'm not sure of your definition of <code>Length</code>.</p>\n</blockquote>\n<p>Here's what I'm using:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Length</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">ls</span><span class=\"o\">,</span>\n        <span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">ls</span>\n            <span class=\"mi\">0</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ls</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 183614150,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1576552931
    },
    {
        "content": "<p>This appears to work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">length_cons&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">length_cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n\n    <span class=\"k\">calc</span>\n\n        <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">length_cons&#39;</span>\n        <span class=\"bp\">...</span>             <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">s</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span>\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">length_append</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n\n    <span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">s</span>\n\n        <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">Nil</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"n\">Nil</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n            <span class=\"k\">calc</span>\n                <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">Nil</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span>   <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nil_append</span><span class=\"o\">]</span>\n                <span class=\"bp\">...</span>                 <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">)))</span>\n\n        <span class=\"o\">(</span><span class=\"bp\">λ</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"n\">a_1</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n\n            <span class=\"k\">show</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n\n                <span class=\"k\">calc</span>\n\n                    <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">))</span>              <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cons_append</span><span class=\"o\">]</span>\n                    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span>        <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">length_cons</span>\n                    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Length</span> <span class=\"n\">a_1</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n                    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">a_1</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span>\n                    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">Length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Length</span> <span class=\"n\">t</span>          <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">length_cons</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 183614567,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1576553553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127148\">@Joe</span> ,</p>\n<p>This comment from you was key:</p>\n<blockquote>\n<p><code>length_cons</code> should be <code>rfl</code>, i.e. by definition.</p>\n</blockquote>\n<p>When I tried to use <code>rfl</code>, I noticed that it didn't work:</p>\n<div class=\"codehilite\"><pre><span></span>theorem length_cons (a : α) (s : List α) : Length (a :: s) = Length [a] + Length s\n</pre></div>\n\n\n<p>however, swapping the arguments to <code>+</code> causes it to work:</p>\n<div class=\"codehilite\"><pre><span></span>theorem length_cons&#39; (a : α) (s : List α) : Length (a :: s) = Length s + Length [a] := rfl\n</pre></div>\n\n\n<p>Thank you so much for your help and suggestions!</p>",
        "id": 183618302,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1576557795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249123\">@YH</span> , thanks for your tactics based solution!</p>\n<p>I wanted to try to use <code>rec_on</code> as that was what was emphasized in the section of the chapter. This is the approach demonstrated above.</p>",
        "id": 183618715,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1576558273
    },
    {
        "content": "<p>You're welcome.</p>",
        "id": 183618725,
        "sender_full_name": "Joe",
        "timestamp": 1576558293
    }
]