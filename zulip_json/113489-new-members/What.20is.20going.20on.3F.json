[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">what_is_going_on</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"err\">Ν</span><span class=\"o\">,</span> <span class=\"err\">ΗΝ</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">HN</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>have fun :)</p>",
        "id": 194610707,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587319826
    },
    {
        "content": "<p>Unicode shenanigans?</p>",
        "id": 194611864,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1587321516
    },
    {
        "content": "<p>The red boxes around some of the characters give it away</p>",
        "id": 194615088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587326021
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">what_is_going_on</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">ο</span><span class=\"o\">,</span> <span class=\"n\">hο</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">ho</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>No red boxes now?</p>\n<p>A meta point, anyone aware of what is allowed as part of an identifier name? Is it UAX 31 or Latin+Greek?</p>\n<p>Just to find the limits, I tried a few things from UTR 36, mixed script is accepted in Lean. At least Zero Width Characters aren't accepted by Lean(ahem, C++...)</p>",
        "id": 194627610,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587348011
    },
    {
        "content": "<p>the list of valid identifier character is a mess</p>",
        "id": 194627615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587348040
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kt\">bool</span> <span class=\"nf\">is_greek_unicode</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"mh\">0x391</span> <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x3DD</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"kt\">bool</span> <span class=\"nf\">is_letter_like_unicode</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x3b1</span>  <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x3c9</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">!=</span> <span class=\"mh\">0x3bb</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"c1\">// Lower greek, but lambda</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x391</span>  <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x3A9</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">!=</span> <span class=\"mh\">0x3A0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">!=</span> <span class=\"mh\">0x3A3</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"c1\">// Upper greek, but Pi and Sigma</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x3ca</span>  <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x3fb</span><span class=\"p\">)</span> <span class=\"o\">||</span>               <span class=\"c1\">// Coptic letters</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x1f00</span> <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x1ffe</span><span class=\"p\">)</span> <span class=\"o\">||</span>              <span class=\"c1\">// Polytonic Greek Extended Character Set</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x2100</span> <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x214f</span><span class=\"p\">)</span> <span class=\"o\">||</span>              <span class=\"c1\">// Letter like block</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x1d49c</span> <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x1d59f</span><span class=\"p\">);</span>              <span class=\"c1\">// Latin letters, Script, Double-struck, Fractur</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">bool</span> <span class=\"nf\">is_sub_script_alnum_unicode</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x207f</span> <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x2089</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"c1\">// n superscript and numberic subscripts</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x2090</span> <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x209c</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"c1\">// letter-like subscripts</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x1d62</span> <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x1d6a</span><span class=\"p\">);</span>   <span class=\"c1\">// letter-like subscripts</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">bool</span> <span class=\"nf\">is_id_first</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"k\">const</span> <span class=\"o\">*</span> <span class=\"n\">begin</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"k\">const</span> <span class=\"o\">*</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">isalpha</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">begin</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"o\">*</span><span class=\"n\">begin</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;_&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">utf8_to_unicode</span><span class=\"p\">(</span><span class=\"n\">begin</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">u</span> <span class=\"o\">==</span> <span class=\"n\">id_begin_escape</span> <span class=\"o\">||</span> <span class=\"n\">is_letter_like_unicode</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">bool</span> <span class=\"nf\">is_id_rest</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"k\">const</span> <span class=\"o\">*</span> <span class=\"n\">begin</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"k\">const</span> <span class=\"o\">*</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">isalnum</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">begin</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"o\">*</span><span class=\"n\">begin</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;_&#39;</span> <span class=\"o\">||</span> <span class=\"o\">*</span><span class=\"n\">begin</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;\\&#39;&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">utf8_to_unicode</span><span class=\"p\">(</span><span class=\"n\">begin</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">is_letter_like_unicode</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">is_sub_script_alnum_unicode</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 194627747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587348243
    },
    {
        "content": "<p>Is it the same in Lean 4?</p>",
        "id": 194627840,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587348470
    },
    {
        "content": "<p>I don't see any reason why they would change it</p>",
        "id": 194627882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587348489
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/ba648e419af29b140eb07dae7769a6659b7e6e23/src/util/name.cpp#L69-L98\" title=\"https://github.com/leanprover/lean4/blob/ba648e419af29b140eb07dae7769a6659b7e6e23/src/util/name.cpp#L69-L98\">https://github.com/leanprover/lean4/blob/ba648e419af29b140eb07dae7769a6659b7e6e23/src/util/name.cpp#L69-L98</a></p>",
        "id": 194627914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587348570
    },
    {
        "content": "<p>I don't know if there is another version of this code in lean</p>",
        "id": 194627955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587348615
    },
    {
        "content": "<p>here it is <a href=\"https://github.com/leanprover/lean4/blob/ba648e419af29b140eb07dae7769a6659b7e6e23/library/Init/Lean/Parser/Identifier.lean#L11-L31\" title=\"https://github.com/leanprover/lean4/blob/ba648e419af29b140eb07dae7769a6659b7e6e23/library/Init/Lean/Parser/Identifier.lean#L11-L31\">https://github.com/leanprover/lean4/blob/ba648e419af29b140eb07dae7769a6659b7e6e23/library/Init/Lean/Parser/Identifier.lean#L11-L31</a></p>",
        "id": 194627965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587348670
    },
    {
        "content": "<p>Note however that even characters outside this range can be used outside an escape if they are declared as notations</p>",
        "id": 194628029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587348825
    },
    {
        "content": "<p>see also <a href=\"#narrow/stream/116395-maths/topic/algebra.20on.20subtypes/near/129927817\" title=\"#narrow/stream/116395-maths/topic/algebra.20on.20subtypes/near/129927817\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/algebra.20on.20subtypes/near/129927817</a></p>",
        "id": 194628220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20is.20going.20on.3F/near/194628029\" title=\"#narrow/stream/113489-new-members/topic/What.20is.20going.20on.3F/near/194628029\">said</a>:</p>\n<blockquote>\n<p>Note however that even characters outside this range can be used outside an escape if they are declared as notations</p>\n</blockquote>\n<p>Oh wow. That accepts zero width characters as well. That's interesting...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"err\">​</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">)</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"err\">​</span><span class=\"mi\">234</span><span class=\"o\">)</span> <span class=\"c1\">-- 235</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"mi\">12</span><span class=\"err\">​</span><span class=\"mi\">34</span><span class=\"o\">)</span> <span class=\"c1\">-- 46</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"err\">​</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"c1\">-- 127</span>\n</pre></div>\n\n\n<p>(Zulip highlights the zero-width characters, but they're invisible in VSCode)</p>",
        "id": 194630231,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587353223
    },
    {
        "content": "<p>Which means if anyone feels like doing so, you can get (implicit) multiplication.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"err\">​</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n\n<span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"n\">def</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n<span class=\"n\">def</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">x</span><span class=\"err\">​</span><span class=\"n\">y</span>       <span class=\"c1\">-- 6</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">x</span><span class=\"err\">​</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"c1\">-- 27</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">​</span><span class=\"n\">z</span> <span class=\"c1\">-- 20</span>\n</pre></div>\n\n\n<p>For anyone reading this thread, please do not ever do this in real code.</p>",
        "id": 194630351,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587353451
    },
    {
        "content": "<p>Hah! That's a lovely hack!</p>",
        "id": 194637888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587365329
    },
    {
        "content": "<p>You can get some truly beautifully incomprehensible syntax if you use the right-to-left and left-to-right characters</p>",
        "id": 194640023,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1587367231
    },
    {
        "content": "<p>If you're motivated you can also use combining characters (think of umlauts and other diacritics) as postfix operators: <a href=\"https://github.com/flypitch/flypitch/blob/deb288e2f7aca1c5679c88ef3ba25351fc81fd89/src/bvm.lean#L2218\" title=\"https://github.com/flypitch/flypitch/blob/deb288e2f7aca1c5679c88ef3ba25351fc81fd89/src/bvm.lean#L2218\">https://github.com/flypitch/flypitch/blob/deb288e2f7aca1c5679c88ef3ba25351fc81fd89/src/bvm.lean#L2218</a></p>",
        "id": 194644485,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1587370513
    },
    {
        "content": "<p>Lol, there is actually a unicode symbol for \"invisible times\"</p>\n<div class=\"codehilite\"><pre><span></span>U+2062  note    INVISIBLE TIMES\n</pre></div>",
        "id": 195023390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587624406
    },
    {
        "content": "<p>I just looked into that and the design is actually rather interesting. It's for when typeset text need to be read by a program, then an expression like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> can have multiple meanings, either f times x (f is a variable) or f of x (f is a function). So you can put U+2062 between the f and ( if it is a function or  U+2061 if it is a function. I don't know if this is actually used anywhere though...</p>\n<p>and for when you want to break (almost?) all conventions, there is <code>U+2064 INVISIBLE PLUS</code></p>",
        "id": 195026104,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587626781
    },
    {
        "content": "<p>that's just <code>to_additive</code> of <code>INVISIBLE TIMES</code> I guess</p>",
        "id": 195047394,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587641570
    }
]