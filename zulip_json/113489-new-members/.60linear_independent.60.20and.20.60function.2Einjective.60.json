[
    {
        "content": "<p>Dear All,</p>\n<p>I would like to use that if a singleton <code>{m : M}</code> is <code>linear_independent</code>, then multiplying <code>m</code> by a scalar is an injective function <code>R → M</code>.  While this is all that I need, I also tried looking for a more general statement about linear independence and injectivity, but I could not find it.</p>\n<p>It might be available for something with <code>torsors</code> that I saw recently, but before looking for it there, I thought of asking here, since someone might simply know it straight-away.</p>\n<p>Something along the lines of the lemma below would be great!</p>\n<p>Thanks a lot!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_independent</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent_singleton_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Of course, I would also expect a surjectivity statement for <code>submodule.span</code>, but I have not actually checked whether it exists or not, since I have not (yet) needed it.</p>",
        "id": 233148843,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617611029
    },
    {
        "content": "<p>isn't <code>fin 0</code> empty?</p>",
        "id": 233149188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617611312
    },
    {
        "content": "<p>I would generalize this to necessary and sufficient conditions for <code>linear_independent R (λ i : A, m)</code></p>",
        "id": 233149220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617611387
    },
    {
        "content": "<p>I guess it is not hard to show that <code>A</code> has to be a subsingleton, assuming <code>R</code> is a ring</p>",
        "id": 233149422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617611534
    },
    {
        "content": "<p>If <code>A</code> is empty then it's trivially true</p>",
        "id": 233149447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617611558
    },
    {
        "content": "<p>and if <code>A</code> is a singleton then you get your statement</p>",
        "id": 233149468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617611582
    },
    {
        "content": "<p>I think it is possible to have weird linear independent sets on semimodules though. For example, with <code>nat</code> as a semimodule over itself, <code>\\lam _: A, 1</code> is a linearly independent set for all <code>A</code></p>",
        "id": 233149668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617611727
    },
    {
        "content": "<p>Mario, I corrected <code>fin 0</code> to <code>fin 1</code> in the lemma: thanks!</p>",
        "id": 233151160,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617613131
    },
    {
        "content": "<p>Yes, I am even thinking that I would like the definition of <code>linear_independent</code> to be that the appropriate function is injective.  Then, the definition in terms of vanishing linear combination would be a consequence.  And it would be equivalent in the case in which there are opposites (or maybe even simply for cancellative stuff, if true).</p>",
        "id": 233151288,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617613232
    },
    {
        "content": "<p>Ok, anyway, these proofs are likely all very easy, I was just wondering whether I should prove such injectivity statement or whether I could find it \"already in the box\"!</p>",
        "id": 233151457,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617613383
    },
    {
        "content": "<p>There are already theorems that say that <code>f.ker = bot</code> is equivalent to <code>injective f</code>, but I guess this is injectivity of the wrong function for you</p>",
        "id": 233154407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617615994
    },
    {
        "content": "<p>oh, interesting, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent_iff_injective_total\">docs#linear_independent_iff_injective_total</a> requires a ring</p>",
        "id": 233154611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617616194
    },
    {
        "content": "<p>Yes, the more I think about this, the more I would like to say that <code>linear_independent</code> \"should be\" defined for a <code>semiring</code> and should assert injectivity of the correct function.  If you have opposites, then injectivity is equivalent to having trivial kernel, by \"subtracting\".</p>",
        "id": 233154686,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617616237
    },
    {
        "content": "<p>Right, the theorem is false: if the semiring is <code>fin 37</code> then the theorem fails for <code>\\lam _: fin 1, 1</code></p>",
        "id": 233154727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617616290
    },
    {
        "content": "<p>Certainly when <code>linear_independent</code> was first written semimodules weren't a thing</p>",
        "id": 233154800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617616360
    },
    {
        "content": "<p>so perhaps this is the wrong definition</p>",
        "id": 233154803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617616369
    },
    {
        "content": "<p>Ok, so it seems like I can obtain what I want adding extra assumptions, but I would like to not do that and re-define the meaning of <code>linear_independent</code> to something that is equivalent to the one that is mathlib right now and is equivalent to it, assuming the existence of opposites (or possibly simply cancellativity assumptions).</p>",
        "id": 233154820,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617616408
    },
    {
        "content": "<p>This is all very similar to the <code>zero_divisors</code> vs <code>integral_domain</code> thing that was discussed (often by me!) on other occasions.</p>",
        "id": 233154898,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617616470
    },
    {
        "content": "<p>do you need semimodules? Probably the easiest thing is to just work with modules</p>",
        "id": 233154933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617616510
    },
    {
        "content": "<p>Still, I think that \"[linear combination equal zero] implies [coefficients equal zero]\" should really be a consequence of \"[linear combinations are injective functions] implies [coefficients are equal]\".</p>",
        "id": 233154967,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617616557
    },
    {
        "content": "<p>the whole idea of a kernel is a bit dubious on semimodules</p>",
        "id": 233155005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617616565
    },
    {
        "content": "<p>the kernel definition is definitely easier to work with when doing normal linear algebra</p>",
        "id": 233155023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617616602
    },
    {
        "content": "<p>No, I do not really \"need\" semimodules, it was just trying to work in the \"mathlib spirit\", of generalizing as much as I could.  In the end, I want to apply this to <code>nat</code>, though, so I can go by with stepping through <code>Z</code> and then restricting.</p>",
        "id": 233155039,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617616626
    },
    {
        "content": "<p>I don't think we need to really do \"linear algebra\" with semimodules</p>",
        "id": 233155111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617616692
    },
    {
        "content": "<p>To give some more context, I would like to prove that a module over <code>nat</code> or <code>int</code> that is generated by a single element has finitely many generators.  I only need this in the case in which the module is torsion-free, but it should be true regardless of this assumption.</p>",
        "id": 233155131,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617616710
    },
    {
        "content": "<p>they were originally introduced so that measures and nnreal and stuff can share <code>has_scalar</code></p>",
        "id": 233155140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617616726
    },
    {
        "content": "<p>but modules are already weird enough when it comes to doing proper linear algebra</p>",
        "id": 233155169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617616758
    },
    {
        "content": "<p>Ok, fair enough!  I will try to work-around this: I will do linear algebra over <code>int</code> and then deduce what I want for the \"<code>nat</code> inside <code>int</code>\".</p>",
        "id": 233155180,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617616775
    },
    {
        "content": "<p>generated how?</p>",
        "id": 233155195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617616792
    },
    {
        "content": "<p>I agree: linear algebra for modules is called K-theory!</p>",
        "id": 233155196,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617616793
    },
    {
        "content": "<p>isn't this some kind of PID thing?</p>",
        "id": 233155282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617616831
    },
    {
        "content": "<p>I would like to say that, if <code>M</code> is an <code>int</code> module and <code>submodule.span \\int { m } = submodule.span \\int { n }</code>, then <code>m = \\pm n</code>.  I did not actually write a lean statement for this, but I can if this is not clear enough.</p>",
        "id": 233155360,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617616910
    },
    {
        "content": "<p>I am fairly sure that I can \"simply prove\" this, but I was hoping that this was a simple enough statement that it was essentially already in mathlib.</p>\n<p>It boils down to \\pm 1 are the units in \\Z.</p>",
        "id": 233155442,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617616963
    },
    {
        "content": "<p>that statement is in mathlib</p>",
        "id": 233155455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617616980
    },
    {
        "content": "<p>(in the above statement, there is the implicit assumption that <code>M</code> has a basis.)</p>",
        "id": 233155496,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617617000
    },
    {
        "content": "<p>can you generalize it to \"equal submodule spans imply differing by a unit\"?</p>",
        "id": 233155502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617617015
    },
    {
        "content": "<p>Yes, I found the statement about integer units, but it is still cumbersome, for me, to convert between the two.</p>",
        "id": 233155514,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617617030
    },
    {
        "content": "<p>I don't think that this theorem has a significantly shorter proof than the composition of those two statements though</p>",
        "id": 233155596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617617090
    },
    {
        "content": "<p>Ah, you are right!  I have not tried looking at <code>associates</code>, that I think are in mathlib.  This would be the \"differ by a unit\"-like statement.</p>",
        "id": 233155600,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617617094
    },
    {
        "content": "<p>That's for rings though, I think you need associated elements in a module here</p>",
        "id": 233155721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617617186
    },
    {
        "content": "<p>you might just say <code>m = u \\bu n</code></p>",
        "id": 233155740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617617201
    },
    {
        "content": "<p>Ah, I have not worked with <code>associates</code> and, whenever I saw it, I assumed that it was for modules.  Ok, maybe I will stick to the statement about units.</p>",
        "id": 233155778,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617617243
    },
    {
        "content": "<p>Actually I think it's not too hard: <code>submodule.span R {m} = {r | r \\bu m}</code>, so <code>m = r1 * n</code> and <code>n = r2 * m</code>. The tricky part is to cancel <code>(r1 * r2) * m = m -&gt; r1 * r2 = 1</code></p>",
        "id": 233155890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617617327
    },
    {
        "content": "<p>ok, so here is a formal-looking, though not tested, statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">generators_cyclic_is_basis_plus_minus</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bH</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"n\">is_basis</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 233155894,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617617327
    },
    {
        "content": "<p>I have not yet made the convertion to <code>\\smul</code>.</p>",
        "id": 233155957,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617617387
    },
    {
        "content": "<p>there's a lemma about that</p>",
        "id": 233156018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617617412
    },
    {
        "content": "<p>Indeed, Mario, this was my beginning:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"n\">set.subset.antisymm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">c</span><span class=\"o\">)),</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"c1\">--    obtain F := generators_cyclic_is_basis_plus_minus bH c,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">submodule_generator</span> <span class=\"n\">bH</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">submodule_generator</span> <span class=\"n\">hc</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">hn1</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_smul</span> <span class=\"n\">ℤ</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn1</span> <span class=\"o\">{</span> <span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"n\">occurrences.pos</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">smul_smul</span> <span class=\"n\">at</span> <span class=\"n\">hn1</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 233156058,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617617438
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.mem_span_singleton\">docs#submodule.mem_span_singleton</a></p>",
        "id": 233156065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617617440
    },
    {
        "content": "<p>Ok, this is comforting: at least it seems that I am finding the right lemmas.  I had proven <code>submodule_generator</code> as a temporary helper lemma and it is essentially <code>submodule.mem_span_singleton</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">submodule_generator</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">submodule.mem_span_singleton.mp</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">set.range_const</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">h.2</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">submodule.mem_top</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233156180,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617617547
    },
    {
        "content": "<p>I'm feeling better about myself, though.  It seems that</p>\n<ul>\n<li>What I want may not be already in mathlib,</li>\n<li>My approach to proving it is close to a \"natural\" proof along the lines of what is in mathlib!</li>\n</ul>",
        "id": 233156296,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617617659
    },
    {
        "content": "<p>Of course, 10 lines of my proof would probably convert to a couple of symbols from Mario, but that is ok!</p>",
        "id": 233156333,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617617716
    },
    {
        "content": "<p>Anyway, Mario, thank you very much for this discussion: I feel more motivated now!</p>",
        "id": 233156477,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617617852
    }
]