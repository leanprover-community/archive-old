[
    {
        "content": "<p>I'm a little stumped by Lean's pattern-matching behavior here: <code>dsimp[monus]</code> fails to simplify. <code>cases</code>ing on <code>n</code> beforehand works as expected, but why isn't my second argument pattern-match definitional?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">monus</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span>        <span class=\"mi\">0</span>        <span class=\"o\">:=</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>        <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">monus</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monus</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">[</span><span class=\"n\">monus</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260876048,
        "sender_full_name": "Josh Chen",
        "timestamp": 1636499271
    },
    {
        "content": "<p>The generated definitions don't always agree with the patterns you write! The equation compiler is making some internal decisions about how to turn your patterns into nested applications of recursors. Try <code>#print prefix monus</code>, and then following up with <code>#print ...</code> for the various subsidiary definitions that appear, to see what was actually produced.</p>",
        "id": 260876456,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636499493
    },
    {
        "content": "<p>There is also somewhere a useful tactic for this, that automatically does whatever case bashing is required to unfold a given definition. I can never remember its name. :-(</p>",
        "id": 260876554,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636499532
    },
    {
        "content": "<p>Thanks! I expected something like that was happening, is there a reference for more detail on what the equation compiler is doing?</p>",
        "id": 260876590,
        "sender_full_name": "Josh Chen",
        "timestamp": 1636499551
    },
    {
        "content": "<p>The Lean3 reference on the equation compiler has this sentence: \"If some of the patterns overlap, the equation compiler interprets the definition so that the first matching pattern applies in each case\" which I interpreted to mean what I thought it meant at first.</p>",
        "id": 260876755,
        "sender_full_name": "Josh Chen",
        "timestamp": 1636499665
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold_cases\">tactic#unfold_cases</a></p>",
        "id": 260876879,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636499737
    }
]