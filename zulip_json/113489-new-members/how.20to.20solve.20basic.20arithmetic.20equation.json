[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">RawInt</span>\n<span class=\"n\">xy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">y</span>\n<span class=\"n\">yz</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">~</span> <span class=\"n\">z</span>\n<span class=\"n\">summed</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"n\">z.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.2</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">y.pos</span> <span class=\"bp\">+</span> <span class=\"n\">y.neg</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">z.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y.pos</span> <span class=\"bp\">+</span> <span class=\"n\">y.neg</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there any way to solve this without manually applying a bunch of lemmas to both sides?</p>\n<p>This is the code I have so far (I am doing this for educational reasons)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">LeanSandbox.Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">RawInt</span> <span class=\"n\">where</span>\n  <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">eqv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">RawInt</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ~ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eqv</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">eqv.refl</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">RawInt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">eqv.symm</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">RawInt</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">y</span><span class=\"o\">):</span>  <span class=\"n\">y</span> <span class=\"bp\">~</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.symm</span> <span class=\"n\">xy</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">a - b   c - d   e - f</span>\n<span class=\"cm\">a + d = c + b</span>\n<span class=\"cm\">c + f = e + d</span>\n<span class=\"cm\"> =&gt; a + f = e + b -- the target</span>\n\n<span class=\"cm\">a + d + c + f = c + b + e + d</span>\n<span class=\"cm\">a + f + e + b -- done</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">eqv.trans</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">RawInt</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">yz</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">~</span> <span class=\"n\">z</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">summed</span><span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add_equations</span> <span class=\"n\">xy</span> <span class=\"n\">yz</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Nat.subtract_to_equation_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">y.pos</span> <span class=\"bp\">+</span> <span class=\"n\">y.neg</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 278870653,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649874917
    },
    {
        "content": "<p>I'm not familiar with lean4; but why is that pretty-printing mixing <code>.1</code> and <code>.pos</code>?</p>",
        "id": 278887987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649882793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486803\">@Matei Adriel</span> What's in <code>LeanSandbox</code>? Can you extract the minimal code necessary to run the code you pasted? Or point to a GitHub repo</p>",
        "id": 278888439,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649883017
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 278888849,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649883237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Lean sandbox is just my \"learning lean\" folder. I'll make a repo the next time I'm on my laptop</p>",
        "id": 278901967,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649890662
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 278907341,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649895160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486803\">@Matei Adriel</span> If you were using Lean 3 and mathlib, then I'd suggest <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring_nf\">tactic#ring_nf</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#linear_combination\">tactic#linear_combination</a>. Something you can still do is use <code>simp</code> to put terms into a normal form, if you give it enough lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">RawInt</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">summed</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"n\">z.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">y.pos</span> <span class=\"bp\">+</span> <span class=\"n\">y.neg</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">z.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y.pos</span> <span class=\"bp\">+</span> <span class=\"n\">y.neg</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">summed</span> <span class=\"bp\">⊢</span>\n   <span class=\"n\">exact</span> <span class=\"n\">summed</span>\n</code></pre></div>",
        "id": 278907899,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649895718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20solve.20basic.20arithmetic.20equation/near/278887987\">said</a>:</p>\n<blockquote>\n<p>I'm not familiar with lean4; but why is that pretty-printing mixing <code>.1</code> and <code>.pos</code>?</p>\n</blockquote>\n<p>This is the issue I mentioned in <a href=\"#narrow/stream/270676-lean4/topic/Working.20with.20primitive.20projections\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Working.20with.20primitive.20projections</a></p>",
        "id": 278909139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649896696
    },
    {
        "content": "<p>when you see <code>.1</code> it's a primitive projection, while <code>.pos</code> is the projection function for the structure</p>",
        "id": 278909161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649896740
    },
    {
        "content": "<p>You can do this by two applications of <code>ring</code>: <code>Eq.trans (by ring) summed |&gt;.trans (by ring)</code></p>",
        "id": 278909333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649896887
    },
    {
        "content": "<p>This kind of arithmetic manipulation is something that I struggle with. How to use <code>this</code> to eliminate the <code>sorry</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">sumeqs</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcd</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">RawInt</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">yz</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">~</span> <span class=\"n\">z</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">sumeqs</span> <span class=\"n\">xy</span> <span class=\"n\">yz</span>\n  <span class=\"c1\">-- this : x.pos + y.neg + (y.pos + z.neg) = y.pos + x.neg + (z.pos + y.neg)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x.pos</span> <span class=\"bp\">+</span> <span class=\"n\">z.neg</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y.pos</span> <span class=\"bp\">+</span> <span class=\"n\">y.neg</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">z.pos</span> <span class=\"bp\">+</span> <span class=\"n\">x.neg</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y.pos</span> <span class=\"bp\">+</span> <span class=\"n\">y.neg</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.add_right_cancel</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 278909359,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649896913
    },
    {
        "content": "<p>I suspect this reasoning is similar to what Matei had in mind according to his code comments</p>",
        "id": 278909483,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649897029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"486803\">Matei Adriel</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20solve.20basic.20arithmetic.20equation/near/278901967\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> Lean sandbox is just my \"learning lean\" folder. I'll make a repo the next time I'm on my laptop</p>\n</blockquote>\n<p>Np, I only asked because I thought you wanted to know how to use <code>Nat.add_equations</code> and <code>Nat.subtract_to_equation_left</code> to prove the theorem</p>",
        "id": 278910200,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649897554
    },
    {
        "content": "<p>You can use the same sort of thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">RawInt</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">yz</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">~</span> <span class=\"n\">z</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">sumeqs</span> <span class=\"n\">xy</span> <span class=\"n\">yz</span>\n  <span class=\"c1\">-- this : x.pos + y.neg + (y.pos + z.neg) = y.pos + x.neg + (z.pos + y.neg)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x.pos</span> <span class=\"bp\">+</span> <span class=\"n\">z.neg</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y.pos</span> <span class=\"bp\">+</span> <span class=\"n\">y.neg</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">z.pos</span> <span class=\"bp\">+</span> <span class=\"n\">x.neg</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y.pos</span> <span class=\"bp\">+</span> <span class=\"n\">y.neg</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"bp\">⊢</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.add_right_cancel</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 278910336,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649897650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20solve.20basic.20arithmetic.20equation/near/278909333\">said</a>:</p>\n<blockquote>\n<p>You can do this by two applications of <code>ring</code>: <code>Eq.trans (by ring) summed |&gt;.trans (by ring)</code></p>\n</blockquote>\n<p>Just to show that this suggestion works even with a bad emulation of the <code>ring</code> tactic, if you're not using mathlib4 for some reason.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"ring\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">])</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">RawInt</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">summed</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"n\">z.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">y.pos</span> <span class=\"bp\">+</span> <span class=\"n\">y.neg</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">z.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y.pos</span> <span class=\"bp\">+</span> <span class=\"n\">y.neg</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">)</span> <span class=\"n\">summed</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 278910642,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649897848
    },
    {
        "content": "<p>Ah, then the reasoning is that we don't shape the hypothesis to be in the same form as the goal, but rather shape the hypothesis <em>and</em> the goal to be in the same form. And I thought that \"normal form\" would be <code>((a + b) + c) + d</code> but it's actually <code>a + (b + (c + d))</code> right?</p>",
        "id": 278910758,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649897921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I'll try your solution next time I'm on my laptop!<br>\n<span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> yep, that's exactly what my code is doing. Is there a way to search for existing lemmas, hoogle style?</p>",
        "id": 278949945,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649933703
    },
    {
        "content": "<p>I'm not familiar with Hoogle, but in Mathlib there's a tactic called <code>library_search</code> that tries to find the right lemma/theorem in your environment to prove a certain theorem. It works nicely in Lean 3, but for Lean 4 we'll need to wait some more</p>",
        "id": 278950564,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649934149
    },
    {
        "content": "<p>Mathlib4 has a Hoogle equivalent: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Find.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Find.html</a></p>",
        "id": 278950928,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1649934423
    },
    {
        "content": "<p>But, as Arthur said, <code>library_search</code> is the way to go in Lean 3 and will eventually work great in Lean 4 too</p>",
        "id": 278951058,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1649934506
    },
    {
        "content": "<p>So I have tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">eqv.trans</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">RawInt</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">yz</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">~</span> <span class=\"n\">z</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">summed</span><span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add_equations</span> <span class=\"n\">xy</span> <span class=\"n\">yz</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Nat.subtract_to_equation_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">y.pos</span> <span class=\"bp\">+</span> <span class=\"n\">y.neg</span><span class=\"o\">)</span>\n  <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">summed</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> and I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Diagnostics</span><span class=\"o\">:</span>\n<span class=\"mi\">1</span><span class=\"bp\">.</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n     <span class=\"n\">summed</span>\n   <span class=\"n\">has</span> <span class=\"n\">type</span>\n     <span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y.2</span> <span class=\"bp\">+</span> <span class=\"n\">z.2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z.1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x.2</span> <span class=\"bp\">+</span> <span class=\"n\">y.2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n   <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n     <span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z.2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y.neg</span> <span class=\"bp\">+</span> <span class=\"n\">y.pos</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">z.1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x.2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y.neg</span> <span class=\"bp\">+</span> <span class=\"n\">y.pos</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 279090523,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650036394
    },
    {
        "content": "<p>I had a similar sort of error before upgrading to the newest Lean 4 nightly build. What seems to be the case is that primitive projections and projection functions end up being sorted by <code>simp</code> in a different order, and in the newest version primitive projections stopped appearing. (Maybe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> has an idea of what changed?)</p>",
        "id": 279091152,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650036792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20solve.20basic.20arithmetic.20equation/near/279091152\">said</a>:</p>\n<blockquote>\n<p>I had a similar sort of error before upgrading to the newest Lean 4 nightly build. What seems to be the case is that primitive projections and projection functions end up being sorted by <code>simp</code> in a different order, and in the newest version primitive projections stopped appearing. (Maybe <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> has an idea of what changed?)</p>\n</blockquote>\n<p>How can I update using elan?</p>",
        "id": 279091305,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650036862
    },
    {
        "content": "<p>tried elan update but I still get the same error</p>",
        "id": 279091663,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650037100
    },
    {
        "content": "<p>The error is unrelated, your x and z are in different places</p>",
        "id": 279091936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650037313
    },
    {
        "content": "<p>so is there any way to get rid of that without manually applying a bazillion lemmas</p>",
        "id": 279092017,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650037346
    },
    {
        "content": "<p>What does <code>simpa</code> do here?</p>",
        "id": 279092067,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650037393
    },
    {
        "content": "<p>what <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> proposed</p>",
        "id": 279092177,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650037461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20solve.20basic.20arithmetic.20equation/near/279091936\">said</a>:</p>\n<blockquote>\n<p>The error is unrelated, your x and z are in different places</p>\n</blockquote>\n<p>The primitive projections seem to cause a different sort order</p>",
        "id": 279092354,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650037573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486803\">@Matei Adriel</span> If you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I can try it on my own computer</p>",
        "id": 279092366,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650037585
    },
    {
        "content": "<p><a href=\"https://github.com/Mateiadrielrafael/lean-sandbox\">https://github.com/Mateiadrielrafael/lean-sandbox</a></p>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 279092622,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650037750
    },
    {
        "content": "<p>On the Lean nightly from the last couple days, your code works. Actually, you need to delete the <code>exact summed</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">eqv.trans</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">RawInt</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">yz</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">~</span> <span class=\"n\">z</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">summed</span><span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add_equations</span> <span class=\"n\">xy</span> <span class=\"n\">yz</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Nat.add_right_cancel</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">y.pos</span> <span class=\"bp\">+</span> <span class=\"n\">y.neg</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 279092928,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650037911
    },
    {
        "content": "<p>yeah, removing the exact doesn't solve it either. How can I install the nightly build using elan?</p>",
        "id": 279093068,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650037975
    },
    {
        "content": "<p>Btw, I wasn't suggesting to tell you to delete <code>exact summed</code> -- I was just mentioning that you get \"goals accomplished\" on the newest Lean at the <code>simp_all</code> line.</p>",
        "id": 279093154,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650038021
    },
    {
        "content": "<p>I don't know how you're <em>supposed</em> to update your Lean 4 toolchain in a project, but for one of my projects I set the <code>lean-toolchain</code> file to contain <code>leanprover/lean4:nightly</code> rather than a specific version.</p>",
        "id": 279093244,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650038050
    },
    {
        "content": "<p>what lean-toolchain file?</p>",
        "id": 279093370,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650038144
    },
    {
        "content": "<p>I only know that I have one in the root folder of my project -- sorry, I can't really help beyond this.</p>",
        "id": 279093715,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650038328
    },
    {
        "content": "<p>thanks, figured it out eventually</p>",
        "id": 279094127,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650038535
    }
]