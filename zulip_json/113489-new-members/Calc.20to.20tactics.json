[
    {
        "content": "<p>Hello!</p>\n<p>I'm trying to convert automatically calc proofs to tactic proofs.<br>\nI currently have a way to transform automatically the intermediate steps of a calc proof into tactics. But I don't know how to combine them to get the final result.<br>\nFor example, below I have a simple example of a calc proof and a tactic proof deduced from the calc proof. The transformation of the calc steps is done with <code>have</code> and <code>exact</code>. But I can't find a way to automate the combination of all these steps.<br>\nDo you know how I could do that?</p>\n<p>Thank you in advance!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span>     <span class=\"bp\">=</span> <span class=\"n\">b</span>     <span class=\"o\">:</span> <span class=\"n\">h1</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">b</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"n\">h2</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span>     <span class=\"o\">:</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hyp1</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hyp2</span><span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hyp3</span><span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hyp4</span><span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hyp5</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">hyp1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hyp6</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">gt_of_ge_of_gt</span> <span class=\"n\">hyp3</span> <span class=\"n\">hyp5</span><span class=\"o\">,</span>\n  <span class=\"n\">transitivity</span> <span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span><span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207426848,
        "sender_full_name": "Auguste Poiroux",
        "timestamp": 1597852858
    },
    {
        "content": "<p>Well first of all <code>calc</code> is a tactic, so a calc proof is a tactic proof, I guess you want to only use simpler tactics like <code>have</code> <code>exact</code> and <code>apply</code>?</p>",
        "id": 207427541,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597853178
    },
    {
        "content": "<p>You can use <code>show_term</code>  to see the proof <code>calc</code> really generated under the hood like this</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">show_term</span><span class=\"o\">{</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span>     <span class=\"bp\">=</span> <span class=\"n\">b</span>     <span class=\"o\">:</span> <span class=\"n\">h1</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">b</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"n\">h2</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span>     <span class=\"o\">:</span> <span class=\"n\">h3</span><span class=\"o\">,},</span>\n</code></pre></div>",
        "id": 207427613,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597853222
    },
    {
        "content": "<p>and you should see <code> exact lt_trans (lt_of_lt_of_le (trans_rel_right has_lt.lt h1 (nat.lt_succ_self b)) (nat.succ_le_succ h2)) h3 </code></p>",
        "id": 207427643,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597853235
    },
    {
        "content": "<p>So to simulate <code>calc</code> you can go through these steps from outside in, once you have all your assumptions, you can do <code>apply lt_trans</code> to be left with two goals which you then use <code>exact one_of_your_assumptions</code>.</p>",
        "id": 207428043,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597853425
    },
    {
        "content": "<p>Also instead of doing</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">hyp2</span><span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>I'd recommend  just, <code> have hyp2: b&lt;b+1 := nat.lt_succ_self b</code>.</p>",
        "id": 207428106,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597853465
    },
    {
        "content": "<p>Thank you for your answers! It works very well!<br>\nI try to do these transformations with a python script. So I can call <code>show_term</code> with the Lean server. But it's a bit cumbersome and I'd rather do without it. Do you have other ideas how to do this without using things like <code>show_term</code>?</p>",
        "id": 207430646,
        "sender_full_name": "Auguste Poiroux",
        "timestamp": 1597854763
    },
    {
        "content": "<p>Well, you have all the haves :-) Can you just call 'apply' on each in reverse order?</p>\n<p>(I'm not sure if that would work with the inequalities, but I think it would work if all = )</p>",
        "id": 207435325,
        "sender_full_name": "Rick Love",
        "timestamp": 1597857128
    },
    {
        "content": "<p>You might be able to call linarith a few times at the end</p>",
        "id": 207435686,
        "sender_full_name": "Rick Love",
        "timestamp": 1597857333
    },
    {
        "content": "<p><code>calc</code> is special in that it calls the necessary transitivity lemmas too: <a href=\"https://leanprover-community.github.io/extras/calc.html#using-operators-other-than-equality`\">https://leanprover-community.github.io/extras/calc.html#using-operators-other-than-equality`</a></p>",
        "id": 207436199,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597857600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Calc.20to.20tactics/near/207427541\">said</a>:</p>\n<blockquote>\n<p>Well first of all <code>calc</code> is a tactic, so a calc proof is a tactic proof, I guess you want to only use simpler tactics like <code>have</code> <code>exact</code> and <code>apply</code>?</p>\n</blockquote>\n<p>Actually <code>calc</code> isn't a tactic, you can write <code>theorem foo := calc ...</code> and you can't do that for tactics. It is actually <code>begin calc ... end</code> that is the oddity; there is code in the parser to magically transform <code>calc ...</code> into <code>exact calc ...</code> when used in tactic position</p>",
        "id": 207455872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597867717
    },
    {
        "content": "<p>I think we have a missing <code>transitivity'</code> tactic here, that receives the proofs up front and picks the appropriate transitivity lemma</p>",
        "id": 207456629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597868144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Calc.20to.20tactics/near/207455872\">said</a>:</p>\n<blockquote>\n<p>Actually <code>calc</code> isn't a tactic, you can write <code>theorem foo := calc ...</code> and you can't do that for tactics. It is actually <code>begin calc ... end</code> that is the oddity; there is code in the parser to magically transform <code>calc ...</code> into <code>exact calc ...</code> when used in tactic position</p>\n</blockquote>\n<p>Into <code>refine calc</code>, not <code>exact calc</code>. E.g., you can do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"c1\">-- 2 goals : a = b and b = c</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207488116,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597898516
    }
]