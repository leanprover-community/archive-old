[
    {
        "content": "<p>Sometimes <code>apply'</code> can't stop when it should fail. Is this the expected behavior of <code>apply'</code> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> ?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_sin_sin</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply&#39;</span> <span class=\"n\">continuous_sin</span><span class=\"o\">,</span> <span class=\"c1\">-- should fail, but timeout instead</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">real</span>\n</pre></div>",
        "id": 174415043,
        "sender_full_name": "Joe",
        "timestamp": 1567040389
    },
    {
        "content": "<p>basically this is unfolding <code>continuous</code> and <code>sin</code> all the way down in case it turns out that <code>continuous (λx, sin (sin x))</code> and <code>continuous sin</code> are the same thing</p>",
        "id": 174415687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567041447
    },
    {
        "content": "<p>Maybe <code>sin</code> or at least <code>exp</code> ought to be irreducible?</p>",
        "id": 174416885,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567043193
    },
    {
        "content": "<p>I tried to add <code>attribute [irreducible] continuous sin</code> to the front, but it is of no use.</p>",
        "id": 174417197,
        "sender_full_name": "Joe",
        "timestamp": 1567043706
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 174417271,
        "sender_full_name": "Joe",
        "timestamp": 1567043798
    },
    {
        "content": "<p>That's curious. By defaut, <code>whnf</code> uses <code>semireducible</code> as a setting. I would think that would do it</p>",
        "id": 174418679,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567046212
    },
    {
        "content": "<p>I think the problem is with <code>exact e</code> on the fourth line of <code>retry_apply_aux</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">retry_apply_aux</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">apply_cfg</span><span class=\"o\">),</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">name</span> <span class=\"bp\">×</span>  <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"n\">cfg</span> <span class=\"n\">gs</span> <span class=\"o\">:=</span>\n<span class=\"n\">focus1</span> <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"o\">{</span>\n     <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n     <span class=\"n\">gs&#39;</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n     <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">reorder_goals</span> <span class=\"n\">gs</span> <span class=\"n\">cfg</span><span class=\"bp\">.</span><span class=\"n\">new_goals</span><span class=\"o\">,</span>\n     <span class=\"n\">set_goals</span> <span class=\"o\">(</span><span class=\"n\">gs&#39;</span> <span class=\"bp\">++</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">),</span>\n     <span class=\"n\">return</span> <span class=\"n\">r</span> <span class=\"o\">})</span> <span class=\"bp\">&lt;|&gt;</span>\n<span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">whnf</span> <span class=\"bp\">|</span> <span class=\"n\">apply_core</span> <span class=\"n\">e</span> <span class=\"n\">cfg</span><span class=\"o\">,</span>\n   <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_var</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">has_var</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">head_beta</span> <span class=\"err\">$</span> <span class=\"n\">e</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n   <span class=\"n\">retry_apply_aux</span> <span class=\"n\">e</span> <span class=\"n\">cfg</span> <span class=\"o\">((</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">gs</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 174418795,
        "sender_full_name": "Joe",
        "timestamp": 1567046427
    },
    {
        "content": "<p>It never stops.</p>",
        "id": 174418799,
        "sender_full_name": "Joe",
        "timestamp": 1567046443
    },
    {
        "content": "<p>Here is an example of <code>exact</code> not stopping</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">exact&#39;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">i_to_expr_for_apply</span> <span class=\"n\">q</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span>\n<span class=\"c1\">-- i_to_expr_strict ``(%%q : %%tgt) &gt;&gt;= tactic.exact</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_sin_sin</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact&#39;</span> <span class=\"n\">continuous_sin</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">real</span>\n</pre></div>",
        "id": 174418863,
        "sender_full_name": "Joe",
        "timestamp": 1567046535
    },
    {
        "content": "<p>if you uncomment the line with <code> ``(%%q : %%tgt)</code> does that make a difference?</p>",
        "id": 174419013,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567046826
    },
    {
        "content": "<p>Yes, that would work.</p>",
        "id": 174419059,
        "sender_full_name": "Joe",
        "timestamp": 1567046884
    },
    {
        "content": "<p>That's curious. What about </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">exact&#39;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">i_to_expr_for_apply</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n   <span class=\"n\">t</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"n\">unify</span> <span class=\"n\">t</span> <span class=\"n\">tgt</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"n\">e</span>\n</pre></div>",
        "id": 174419073,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567046951
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">unify</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">continuous</span> <span class=\"n\">sin</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">and</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</pre></div>",
        "id": 174419143,
        "sender_full_name": "Joe",
        "timestamp": 1567047093
    },
    {
        "content": "<p>that's the desired behavior, right?</p>",
        "id": 174419188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567047127
    },
    {
        "content": "<p>Yes, should fail</p>",
        "id": 174419196,
        "sender_full_name": "Joe",
        "timestamp": 1567047151
    },
    {
        "content": "<p>geez, it's not good when even <code>exact</code> isn't reliable</p>",
        "id": 174419206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567047189
    },
    {
        "content": "<p>So we should prefix that <code>exact</code> with a <code>unify</code>. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, what does <code>exact</code> do if it's not <code>unify</code>?</p>",
        "id": 174419208,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567047199
    },
    {
        "content": "<p>I would have guessed it did exactly that</p>",
        "id": 174419213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567047219
    },
    {
        "content": "<p>actually, I think <code>exact</code> will try quite a bit harder than <code>unify</code> to make things match</p>",
        "id": 174419219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567047241
    },
    {
        "content": "<p><code>unify</code> has a reducibility setting (default semireducible) whereas <code>exact</code> is implicitly reducibility all</p>",
        "id": 174419280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567047301
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">md</span> <span class=\"o\">:=</span> <span class=\"n\">semireducible</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n</pre></div>",
        "id": 174419301,
        "sender_full_name": "Joe",
        "timestamp": 1567047353
    },
    {
        "content": "<p>I stand corrected</p>",
        "id": 174419342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567047367
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 174419345,
        "sender_full_name": "Joe",
        "timestamp": 1567047378
    },
    {
        "content": "<p>It's surprising because the C++ code for exact uses the same machinery as unify</p>",
        "id": 174419504,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567047708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127148\">@Joe</span> Do you mind adding this <code>unify</code> line to your PR?</p>",
        "id": 174463641,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567091941
    },
    {
        "content": "<p>Sure, I’ll PR it.</p>",
        "id": 174467213,
        "sender_full_name": "Joe",
        "timestamp": 1567094222
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 174469281,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567095840
    },
    {
        "content": "<p>Since you're doing a PR on <code>apply'</code>, could you also change the code of <code>transitivity'</code> to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">transitivity&#39;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transitivity&#39;</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"k\">match</span> <span class=\"n\">q</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target_lhs_rhs</span><span class=\"o\">,</span>\n     <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">lhs</span><span class=\"o\">,</span>\n     <span class=\"n\">i_to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">unify</span> <span class=\"n\">rhs</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 174469484,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567095971
    },
    {
        "content": "<p>No problem.</p>",
        "id": 174473954,
        "sender_full_name": "Joe",
        "timestamp": 1567099536
    }
]