[
    {
        "content": "<p>Why is there an error in the second definition -- is there some difference in how universes are instantiated using a <code>variables</code> call?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">enum_some_core</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">functor.map_const</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">enum_some_core</span> <span class=\"o\">(</span><span class=\"n\">option.cases_on</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">enum_some_core'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">functor.map_const</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">enum_some_core</span> <span class=\"o\">(</span><span class=\"n\">option.cases_on</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">xs</span>\n<span class=\"c1\">-- error at functor.map_const</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217027399,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605630915
    },
    {
        "content": "<p>You might have written <code>alpha : Type*</code> in the first one, but if you <code>#check @enum_some_core</code> you'll see that Lean decided that alpha had type <code>Type</code>. It didn't have the ability to downgrade your alpha in the second one.</p>",
        "id": 217027774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605631067
    },
    {
        "content": "<p>I see, the alpha is restricted to be just Type. Why is that?</p>",
        "id": 217027859,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605631086
    },
    {
        "content": "<p>That's a logic puzzle which I don't immediately know the answer to.</p>",
        "id": 217027928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605631118
    },
    {
        "content": "<p>If you change it to <code>alpha : Type 1</code> you can look at the error you get and try and figure it out. Some internal thing is demanding <code>Type</code>.</p>",
        "id": 217028000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605631151
    },
    {
        "content": "<p>The reason I think is because <code>option nat</code> is <code>Type</code> because <code>nat</code> is <code>Type</code></p>",
        "id": 217028092,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605631200
    },
    {
        "content": "<p><code>map_const : Π {α β : Type u}, α → f β → f α </code> -- here alpha and beta need to have the same type. I don't know what any of these objects are so am in no real position to help.</p>",
        "id": 217028208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605631241
    },
    {
        "content": "<p>So I just have to avoid the <code>functor</code> instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">enum_some_core</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">functor.map_const</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">enum_some_core</span> <span class=\"o\">(</span><span class=\"n\">option.cases_on</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">enum_some_core'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">::</span> <span class=\"n\">enum_some_core'</span> <span class=\"o\">(</span><span class=\"n\">option.cases_on</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">⊢ Π {α : Type}, ℕ → list (option α) → list (option ℕ)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">enum_some_core</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">⊢ Π {α : Type u_1}, ℕ → list (option α) → list (option ℕ)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">enum_some_core'</span>\n</code></pre></div>",
        "id": 217028579,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605631398
    },
    {
        "content": "<p>Why are <code>functor</code> limited in how they infer universes? I'm trying to now do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.map_comp_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.map</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">functor.map_comp_map</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but the universes don't agree.</p>",
        "id": 217070927,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605651256
    },
    {
        "content": "<p>A, functor code expects all the input types to be of the same universe. Same issue as before. Why isn't it more polymorphic in universes in core?</p>",
        "id": 217071342,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605651499
    },
    {
        "content": "<p>How would you make it more polymorphic?</p>",
        "id": 217071624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605651690
    },
    {
        "content": "<p>The most polymorphism you can express is what there is already</p>",
        "id": 217071781,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605651808
    },
    {
        "content": "<p>I am not sure yet, experimenting. But this lemma indicates that it is more powerful for <code>list</code> than it is for a generic functor, and I'm trying to understand why. Haven't gotten there yet.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comp_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">map_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_comp_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"bp\">;</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">comp_map</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">map_comp_map :</span>\n<span class=\"cm\">  ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} (f : α → β) (g : β → γ), map g ∘ map f = map (g ∘ f)</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- works over 3 universes</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">map_comp_map</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">functor.map_comp_map :</span>\n<span class=\"cm\">  ∀ {F : Type u_1 → Type u_2} {α β γ : Type u_1} [_inst_1 : functor F] [_inst_2 : is_lawful_functor F]</span>\n<span class=\"cm\">  (f : α → β) (g : β → γ), functor.map g ∘ functor.map f = functor.map (g ∘ f)</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- input types all in 1 universe</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">functor.map_comp_map</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n</code></pre></div>",
        "id": 217072349,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605652204
    },
    {
        "content": "<p>Where the proof for <code>map_comp_map</code> is tactically the same as the proof for <code>functor.map_comp_map</code></p>",
        "id": 217072410,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605652241
    },
    {
        "content": "<p>That's because <code>list</code> has a free universe variable, but once something is the argument of <code>functor</code> it has to be instantiated to a specific universe.</p>",
        "id": 217072482,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605652293
    },
    {
        "content": "<p>I see. So we can't use the fact that <code>list</code> is a lawful functor to avoid replication of functor-like lemmas.</p>",
        "id": 217072636,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605652372
    }
]