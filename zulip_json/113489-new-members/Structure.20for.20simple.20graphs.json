[
    {
        "content": "<p>I am trying to create the following structure.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">SimpleGraph</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">vertexset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">adjacent</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">vertexset</span> <span class=\"bp\">×</span> <span class=\"n\">vertexset</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>But then, i am unable to create this graph object.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">triangle_graph</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">SimpleGraph</span> <span class=\"bp\">.</span> <span class=\"n\">vertexset</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">},</span>\n                 <span class=\"n\">adjacent</span>  <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)}}</span>\n</pre></div>\n\n\n<p>Lean gives me the following error, but I don't know what it means.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_insert</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"mi\">2</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}))</span> <span class=\"bp\">×</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"mi\">2</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}))))</span>\n</pre></div>",
        "id": 176670030,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1569512946
    },
    {
        "content": "<p>Your <code>adjacent</code> seems to me to have type <code>set ℕ × ℕ</code> rather than what you want. <code>set alpha</code>  is actually just <code>alpha -&gt; Prop</code>, so <code>vertexset</code> is a function. You treat it as a type, which Lean deals with internally by coercing it to a subtype of alpha, but now a term of type <code>vertexset × vertexset</code> must be of the form <code>(a,b)</code> with <code>a</code> and <code>b</code> having type not <code>alpha</code> but the subtype.</p>",
        "id": 176670910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569513611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Does <code>import data.set</code> have any effect on this?</p>",
        "id": 176671302,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1569513939
    },
    {
        "content": "<p><del>No.</del> [edit: yes]</p>",
        "id": 176671370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569513973
    },
    {
        "content": "<p>Thank you. How then can I translate the idea that \"A vertexset is a set of elements of type <code>alpha</code>\"?</p>",
        "id": 176671454,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1569514069
    },
    {
        "content": "<p>It may have.</p>",
        "id": 176671455,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569514070
    },
    {
        "content": "<p>I think the coercion from set to type is in mathlib</p>",
        "id": 176671464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569514082
    },
    {
        "content": "<p>Oh!</p>",
        "id": 176671510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569514090
    },
    {
        "content": "<p>With no import at all, Lean probably won't like the definition.</p>",
        "id": 176671519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569514101
    },
    {
        "content": "<p>I would knock up some code but I switched computers yesterday so currently have no Lean. Hang on...</p>",
        "id": 176671538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569514117
    },
    {
        "content": "<blockquote>\n<p>With no import at all, Lean probably won't like the definition.</p>\n</blockquote>\n<p>You are right about that. I had included the import already. Just forgot to mention it in my original question.</p>",
        "id": 176671609,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1569514184
    },
    {
        "content": "<p>3 is not a great thing to be using. When Lean sees <code>3</code> it immediately wants to know what the definition of addition and 1 are, and then defines 3 to basically be 1 + 1 + 1. That's fine for nat, but this is type theory, not set theory, and <code>vertexset</code> is a type. I guess I would not use sets at all.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">SimpleGraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">adjacent</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">V3</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">V3</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V3</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">V3</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">V3</span>\n\n<span class=\"n\">def</span> <span class=\"n\">triangle_graph</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V3</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">adjacent</span>  <span class=\"o\">:=</span> <span class=\"o\">{((</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)}}</span>\n</pre></div>",
        "id": 176673176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569515369
    },
    {
        "content": "<p>There's also the approach of <a href=\"https://gist.github.com/avigad/6c1b7a2b771ac561425f50ffd69a4815\" target=\"_blank\" title=\"https://gist.github.com/avigad/6c1b7a2b771ac561425f50ffd69a4815\">this gist of <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span></a>.</p>",
        "id": 176682213,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569521613
    },
    {
        "content": "<p>The reason we don't have graphs in mathlib is that everyone seems to have slightly different ideas about what a graph is, and people are reluctant to choose one way of setting it up with no applications in sight, in case the applications work much better with another choice. For example I could imagine a whole bunch of stuff could be made much easier if you're analysing a bunch of graphs all of whose vertex sets are subsets of alpha. But for other people this might just get in the way -- if I want a triangle graph I might not want to introduce some auxiliary type which contains my vertices and possibly other stuff, because then I will forever be having to supply proofs that a given vertex is in my set of vertices.</p>",
        "id": 176684334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569522927
    },
    {
        "content": "<p>That makes sense. I do have a particular theorem in mind I wish to formalize. So it might still be worth the effort for me to try and have graphs in Lean.</p>",
        "id": 176685371,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1569523617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Whoa! Thanks, this looks really useful.</p>",
        "id": 176685420,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1569523649
    },
    {
        "content": "<p>It's definitely worth having graphs in Lean! There are complicated questions about which versions of the definition we should have in mathlib but the question you want to know the answer to is how best to formalise them in such a way that your life is easier</p>",
        "id": 176686163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569524111
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 176690212,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1569526845
    },
    {
        "content": "<blockquote>\n<p>I think the coercion from set to type is in mathlib</p>\n</blockquote>\n<p>I looked around and found <a href=\"https://github.com/leanprover-community/mathlib/blob/3cd334161808c7dd59148634cade6d660f206565/src/data/set/basic.lean#L10\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/3cd334161808c7dd59148634cade6d660f206565/src/data/set/basic.lean#L10\">this line in mathlib</a>. The comment says it is set coercion, but i don't see a function that i can simply borrow and use.</p>\n<p>So now my new question is: <em>is there a function that given a Type returns a Set of values that inhabit that type?</em> Is there also a function that does the opposite?</p>",
        "id": 176699340,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1569533853
    },
    {
        "content": "<p><code>set.univ</code> will give you the set of objects that inhabits a type. Set coercion to type will do the opposite. There is an operator to do it but Lean inserts coercions automatically. The operator is <code>↥</code> and is typed as <code>\\u-|</code></p>",
        "id": 176700060,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569534508
    },
    {
        "content": "<p>If you are really sure that you want to use sets, then <code>set.univ : set α</code> is the set of values that inhabit <code>α</code>. This is just the function <code>α  -&gt; Prop</code> sending everything to True. But conversely given <code>S : set α</code> you already have alpha, it's mentioned in the type of S. But do be clear about what a set is -- there is no such thing as a random set in type theory, you should think of sets as being subsets of a given type, and you might find that subtypes work just as well.</p>",
        "id": 176700061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569534510
    }
]