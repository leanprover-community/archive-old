[
    {
        "content": "<p>I am trying some things out (apologise for the lengthiness)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">my_nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">my_nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_nat.add</span> <span class=\"o\">:</span> <span class=\"n\">my_nat</span> <span class=\"bp\">→</span> <span class=\"n\">my_nat</span> <span class=\"bp\">→</span> <span class=\"n\">my_nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>  <span class=\"n\">my_nat.zero</span>     <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>  <span class=\"o\">(</span><span class=\"n\">my_nat.succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">my_nat.succ</span> <span class=\"o\">(</span><span class=\"n\">my_nat.add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">my_nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">my_nat.add</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">my_nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">my_nat.zero</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- It works when I replace 0 here with `my_nat .zero`</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">my_nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">my_nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">my_nat.succ</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">my_nat.succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">succ_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">my_nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_nat.succ</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">my_nat.succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">add_succ</span> <span class=\"n\">at</span> <span class=\"n\">b_ih</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">b_ih</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The <code>succ_add</code> lemma only checks when <code>add_zero</code> refers to <code>my_nat .zero</code> rather than the <code>0</code> symbol. The hypothesises in induction are written in terms of <code>my_nat.zero</code> rather with the 0 symbol. Any ideas how to rewrite 0 &lt;-&gt; <code>my_nat.zero</code> ?</p>",
        "id": 308168767,
        "sender_full_name": "Ben",
        "timestamp": 1667668787
    },
    {
        "content": "<p>The fact that <code>0 = my_nat.zero</code> is true by definition, so you could either make a lemma stating that <code>my_nat.zero = 0</code> (proved by rfl) and rewrite with it, or you could use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#change\">tactic#change</a> or something similar to substitute the definitionally equal term you want, e.g. with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">change</span> <span class=\"n\">my_nat.zero</span> <span class=\"k\">with</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 308169361,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667669159
    },
    {
        "content": "<p>I guess the question is why doing induction on <code>nat</code> leaves literal <code>0</code> in the base case, while doing induction on <code>my_nat</code> leaves <code>my_nat.zero</code> in the base case, despite both <code>nat</code> and <code>my_nat</code> have defined <code>has_zero</code> and <code>has_add</code>.</p>",
        "id": 308170572,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1667669911
    },
    {
        "content": "<p>It probably has something to do with <code>nat</code> being in the core and gets special treatment by the pp.</p>",
        "id": 308170582,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1667669918
    },
    {
        "content": "<p>You're right, this does seem to be a pretty-printer thing</p>",
        "id": 308174391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667672616
    },
    {
        "content": "<p>Note that if you hover over the <code>0</code> in the widget goal view, you can tell the difference between <code>nat.zero</code> and <code>has_zero.zero</code>.</p>",
        "id": 308174415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667672639
    },
    {
        "content": "<p>Yes, it is the pretty printer. See the stupid-looking <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.nat_zero_eq_zero\">docs#nat.nat_zero_eq_zero</a></p>",
        "id": 308175881,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667673724
    },
    {
        "content": "<p>The special treatment for nats in the pretty printer is specifically <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/pp.cpp#L2040\">this line of pp.cpp</a>. I think it's <code>set_option pp.nat_numerals false</code> to turn it off.</p>",
        "id": 308181984,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667678409
    },
    {
        "content": "<p>Other numerals are decoded <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/pp.cpp#L2003\">here</a>. That's for pretty printing bit0/bit1/has_zero.zero/has_one.one/has_neg.neg expressions.</p>",
        "id": 308182301,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667678650
    },
    {
        "content": "<p>In the natural number game I had real problems with this, which I fixed by hacking the <code>induction</code> tactic so that after every time it ran it changed all <code>mynat.zero</code>s to <code>0</code> with a rewrite -- I wrote the rewrite lemma myself and proved it with <code>refl</code> and hid it from the user.</p>",
        "id": 308190494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667685143
    }
]