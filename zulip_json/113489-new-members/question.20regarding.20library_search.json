[
    {
        "content": "<p>Hi! </p>\n<p>I have a question regarding the library_search function. In particular on how we can use it to proof small modifications to known lemmas. For example, I would like to know why library_search does not understand the following example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">assume</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n<span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Whereas a simple </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hyp.right</span>\n</code></pre></div>\n<p>does the trick, and that seems like \" applying a single lemma\"  to me.</p>\n<p>Hope the question is clear and anyone can give me a clue on how to understand this type of behaviour!</p>",
        "id": 277104497,
        "sender_full_name": "ebp",
        "timestamp": 1648625874
    },
    {
        "content": "<p>I think this is a current blind spot of <code>library_search</code>, not being able to explore <code>right</code> or <code>left</code> attributes of certain terms</p>",
        "id": 277129745,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648640301
    },
    {
        "content": "<p>Actually I think this is the <code>apply</code> vs <code>apply'</code> bug. At least library search tries <code>and.right</code> but fails to unify.<br>\nJust trying <code>apply  and.right</code> also fails, but <code>apply' and.right</code> works.<br>\nI think this was discussed previously <a href=\"#narrow/stream/113488-general/topic/library_search.20failures/near/254188601\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/library_search.20failures/near/254188601</a> but I'll try and see what the concequences of changing library_search to use apply' instead are</p>",
        "id": 277132543,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1648641739
    },
    {
        "content": "<p>Maybe the smallest possible example of the <code>apply</code> bug? Usually it occurs with typeclasses involved!</p>",
        "id": 277133821,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648642309
    },
    {
        "content": "<p>Should this then be added to the issue?</p>",
        "id": 277141136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648645572
    },
    {
        "content": "<p>Which issue?</p>",
        "id": 277141364,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1648645671
    },
    {
        "content": "<p>I'm assuming there is an apply bug issue?</p>",
        "id": 277141503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648645717
    },
    {
        "content": "<p>I thought there was one but I can't find it</p>",
        "id": 277150859,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648649643
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2394\">https://github.com/leanprover-community/mathlib/issues/2394</a> and the issue it links seem related but doesn't seem to mention apply specifically</p>",
        "id": 277157218,
        "sender_full_name": "Julian Berman",
        "timestamp": 1648652049
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/runs/5755739008?check_suite_focus=true\">https://github.com/leanprover-community/mathlib/runs/5755739008?check_suite_focus=true</a> now fails a test as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Turn off trace messages so they don't pollute the test build: -/</span>\n<span class=\"c1\">-- set_option trace.silence_library_search true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.suggest</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n<span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"n\">B</span>         <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">apply'</span> <span class=\"n\">supr_le_iff.mp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span>               <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>leaves metavariables in the goal, unfortunately</p>",
        "id": 277174020,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1648659012
    }
]