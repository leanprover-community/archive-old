[
    {
        "content": "<p>I'd like to define curves in topology. I wish I could treat at the same time the case where the domain is any interval (close open, half close half open) as people often do in maths. My idea is to define a curve from a connected subset of the reals to the target space, so that I can give as an input every interval I want. However I do not really understand the details of the coercions between sets and subtypes, so I am not really sure this idea is feasible. Will <code>Icc</code> and <code>Ioo</code> be recognized as subsets? Does anyone see any other drawback with this approach / has suggestions?</p>",
        "id": 207715542,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598087443
    },
    {
        "content": "<p>I guess a disadvantage of this is that one has to require connectedness as a field of the structure. Why not making a <code>class : Prop</code> for connected and compact similarly to what they did for <code>path_connected_space</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">connected</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">connected</span> <span class=\"o\">:</span> <span class=\"n\">is_connected</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 207717028,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598090195
    },
    {
        "content": "<p>(Is <code>example : is_connected (Icc (0 : ℝ) 1) := by library_search!</code> really not in mathlib? or am I doing something wrong?)</p>",
        "id": 207717627,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598091259
    },
    {
        "content": "<p>It's not so clear that one would want such a result in a library, is it? Perhaps something about <code>Icc a b</code> if a&lt;=b but I'm not sure library_search would then find what you're asking</p>",
        "id": 207717760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598091561
    },
    {
        "content": "<p>I think you would want both.</p>",
        "id": 207717916,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598091819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207717760\">said</a>:</p>\n<blockquote>\n<p>It's not so clear that one would want such a result in a library, is it? Perhaps something about <code>Icc a b</code> if a&lt;=b but I'm not sure library_search would then find what you're asking</p>\n</blockquote>\n<p>I tried also with <code>a b</code> but no luck! Well I thought it would be there because it is the first example that comes to my mind of something connected!</p>",
        "id": 207717960,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598091869
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ordered</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">lemma</span> <span class=\"n\">is_preconnected_Icc</span> <span class=\"o\">:</span> <span class=\"n\">is_preconnected</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 207717979,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598091907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207717979\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ordered</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">lemma</span> <span class=\"n\">is_preconnected_Icc</span> <span class=\"o\">:</span> <span class=\"n\">is_preconnected</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Ok thanks! I guess to prove it is connected one just needs to add the hypothesis <code>a \\leq b</code></p>",
        "id": 207718045,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598092054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207717760\">said</a>:</p>\n<blockquote>\n<p>It's not so clear that one would want such a result in a library, is it? Perhaps something about <code>Icc a b</code> if a&lt;=b but I'm not sure library_search would then find what you're asking</p>\n</blockquote>\n<p>I think it should definitely be in the library! Why do you think not?</p>",
        "id": 207718090,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598092110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207717028\">said</a>:</p>\n<blockquote>\n<p>I guess a disadvantage of this is that one has to require connectedness as a field of the structure. Why not making a <code>class : Prop</code> for connected and compact similarly to what they did for <code>path_connected_space</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">connected</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">connected</span> <span class=\"o\">:</span> <span class=\"n\">is_connected</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> what do you think of this class?</p>",
        "id": 207718116,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598092201
    },
    {
        "content": "<p>What's it for?</p>",
        "id": 207718161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092214
    },
    {
        "content": "<p>To not look for the hypothesis of connected things every time and for consistency with <code>path_connected_space</code></p>",
        "id": 207718173,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598092258
    },
    {
        "content": "<p>I don't have anything against classes like this (I added <code>compact_space</code> for example)</p>",
        "id": 207718181,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092271
    },
    {
        "content": "<p>In the case of <code>path_connected</code> you have both <code>is_path_connected</code> and <code>path_connected_space</code> and it looks great to me</p>",
        "id": 207718188,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598092304
    },
    {
        "content": "<p>If you have a purpose for it, then sure. Probably it should be called <code>connected_space</code> though</p>",
        "id": 207718192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207718192\">said</a>:</p>\n<blockquote>\n<p>If you have a purpose for it, then sure. Probably it should be called <code>connected_space</code> though</p>\n</blockquote>\n<p>Sure</p>",
        "id": 207718232,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598092327
    },
    {
        "content": "<p>since that seems to be the current convention for some reason</p>",
        "id": 207718234,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092328
    },
    {
        "content": "<p>Returning to the original question, I'm not sure exactly what definition you have in mind or what it's for</p>",
        "id": 207718241,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092350
    },
    {
        "content": "<p>I'd think that, rather than just having \"a continuous(?) map from some sort of interval to X\", you'd want to know specifically what interval you're working with</p>",
        "id": 207718298,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092446
    },
    {
        "content": "<p>and at that point, you're just talking about a bundled continuous map at most</p>",
        "id": 207718306,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207718241\">said</a>:</p>\n<blockquote>\n<p>Returning to the original question, I'm not sure exactly what definition you have in mind or what it's for</p>\n</blockquote>\n<p>Well the final purpose is defining complete vector fields. For this I need curves on manifolds and for this I need curves in topological spaces</p>",
        "id": 207718316,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598092489
    },
    {
        "content": "<p>but don't you want curves indexed on some specific <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a, b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>ε</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, \\varepsilon)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">)</span></span></span></span> or something</p>",
        "id": 207718321,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092516
    },
    {
        "content": "<p>I think this is a case where we have a word in math that isn't really useful for formalization, but maybe you have a use I don't know about</p>",
        "id": 207718329,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092555
    },
    {
        "content": "<p>It's a question about bundling</p>",
        "id": 207718372,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092573
    },
    {
        "content": "<p>Why don't you just write explicitly here the kind of definition you have in mind?</p>",
        "id": 207718375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207718321\">said</a>:</p>\n<blockquote>\n<p>but don't you want curves indexed on some specific <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a, b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>ε</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, \\varepsilon)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">)</span></span></span></span> or something</p>\n</blockquote>\n<p>The point is that the velocity of a curve makes sense no matter if the interval is open or closed etc so I don't want to call curves just curves on open intervals or close intervals</p>",
        "id": 207718388,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598092638
    },
    {
        "content": "<p>the domain doesn't even have to be connected then?</p>",
        "id": 207718391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092662
    },
    {
        "content": "<p>but it probably shouldn't be a point etc.</p>",
        "id": 207718393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207718375\">said</a>:</p>\n<blockquote>\n<p>Why don't you just write explicitly here the kind of definition you have in mind?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">curve</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">connected</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">continuous_map</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 207718447,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598092753
    },
    {
        "content": "<p>Right, so this is what I'm saying we have already and there is no need to also call it a \"curve\".</p>",
        "id": 207718496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092808
    },
    {
        "content": "<p>I thought you wanted something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">curve</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">connected</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">continuous_map</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207718513,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092866
    },
    {
        "content": "<p>and this is what I thought seemed not so useful</p>",
        "id": 207718520,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598092920
    },
    {
        "content": "<p>About your <code>curve</code>, I'm not sure what concretely you expect to gain from making this definition. You'll still have to repeat the hypotheses <code>(α : set ℝ) [connected α] </code> everywhere you use <code>curve</code>, and then you could just write <code>continuous_map</code> instead of <code>curve</code>.</p>",
        "id": 207718769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598093323
    },
    {
        "content": "<p>Well in the topology case I actually do not have any particular reason, in the smooth case it's just to have a <code>curve</code> namespace to write things like <code>curve.speed</code> and use the . notation</p>",
        "id": 207718842,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598093441
    },
    {
        "content": "<p>I see</p>",
        "id": 207718918,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598093568
    },
    {
        "content": "<p>If you want to make a new type <code>curve</code> for the purpose of <code>.</code> notation, and maybe you have other stuff to include in a structure anyways, maybe it makes sense to bundle the <code>connected</code> hypothesis on <code>α</code> in that structure too, but not the type <code>α</code> itself</p>",
        "id": 207719028,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598093760
    },
    {
        "content": "<p>like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">curve&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">connected</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">continuous_map</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ... maybe more stuff ...</span>\n</code></pre></div>",
        "id": 207719067,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598093782
    },
    {
        "content": "<p>then you don't have to rely on instance search to find the <code>connected</code> hypothesis in your lemmas</p>",
        "id": 207719071,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598093798
    },
    {
        "content": "<p>but you could make a constructor that still uses typeclass search if you wanted to, or you could decide it's not really necessary after all</p>",
        "id": 207719085,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598093824
    },
    {
        "content": "<p>By the way, it might also be nice to have an inductive type with \"codes\" for all intervals, so you didn't have to rely on this somewhat indirect <code>connected</code></p>",
        "id": 207719144,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598093907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207719071\">said</a>:</p>\n<blockquote>\n<p>then you don't have to rely on instance search to find the <code>connected</code> hypothesis in your lemmas</p>\n</blockquote>\n<p>Why do you think this is better though? Since a curve (I mean this kind of curves, for complete vector fields) will always be defined on an interval, it's cooler if Lean automatically checks the interval is connected without me having to tell it where to find the proof!</p>",
        "id": 207719161,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598093936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207719144\">said</a>:</p>\n<blockquote>\n<p>By the way, it might also be nice to have an inductive type with \"codes\" for all intervals, so you didn't have to rely on this somewhat indirect <code>connected</code></p>\n</blockquote>\n<p>I don't know about this! What is codes?</p>",
        "id": 207719175,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598093956
    },
    {
        "content": "<p>It's only cooler if it actually works</p>",
        "id": 207719177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598093960
    },
    {
        "content": "<p>For example, there cannot be an instance for <code>is_connected (Icc a b)</code> because it needs a hypothesis <code>a &lt;= b</code>, but <code>&lt;=</code>isn't a class and the proof of <code>a &lt;= b</code> can't be recovered from just knowing <code>Icc a b</code>.</p>",
        "id": 207719244,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598094057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207719175\">said</a>:</p>\n<blockquote>\n<p>What is codes?</p>\n</blockquote>\n<p>I just mean creating an inductive type</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">interval</span>\n<span class=\"bp\">|</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">interval</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ioc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">interval</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">interval</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>and then defining the interpretation as a <code>set</code>.</p>",
        "id": 207719304,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598094140
    },
    {
        "content": "<p>then if you like you can even make that interpretation into a coercion to sort, and write <code>(i : interval \\R) (s t : i)</code>, etc.</p>",
        "id": 207719364,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598094252
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/bc72d9035a130cbf8d47f7398a6fa53196c40880/src/topology/subset_properties.lean#L1056\">src/topology/subset_properties.lean L1056</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">connected_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">preconnected_space</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207719374,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598094282
    },
    {
        "content": "<p>I expect with these codes that there would be some disagreement about exactly what or what does not qualify as an interval, though...</p>",
        "id": 207719446,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598094381
    },
    {
        "content": "<p>I mean, I'm not even sure I would agree with myself on the topic <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 207719515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598094537
    },
    {
        "content": "<p>For example: should we include a hypothesis <code>a &lt;= b</code> in the <code>Icc</code> constructor to make sure the interval is nonempty; does a point count as an interval.</p>",
        "id": 207719584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598094665
    },
    {
        "content": "<p>I'd still would like to register an instance of <code>Icc</code> as a <code>connected_space</code> but to do this I need to prove that a subset is connected iff it is connected as a space, and I have a problem converting elements of <code>set set a</code> into elements of <code>set a</code>.<br>\nHow am I supposed to go on with a proof like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">is_connected_univ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_preconnected</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">is_preconnected</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">is_preconnected</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">h</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"n\">h1</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"n\">hz</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"c1\">-- need to transform h1 to put it here...</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span> <span class=\"n\">univ_inter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207731054,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598113263
    },
    {
        "content": "<p>rather than do it this way, we should have some lemma like the image of a connected set is connected</p>",
        "id": 207731080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598113313
    },
    {
        "content": "<p>that would handle the <code>&lt;-</code> direction (apply to <code>subtype.val</code>)</p>",
        "id": 207731154,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598113349
    },
    {
        "content": "<p>hmm, maybe the <code>-&gt;</code> direction is more awkward</p>",
        "id": 207731192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598113389
    },
    {
        "content": "<p>we do have the theorem that a subset is connected iff it is connected</p>",
        "id": 207731366,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598113608
    },
    {
        "content": "<p>Haha I did not find it with library search</p>",
        "id": 207731592,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598113922
    },
    {
        "content": "<p>Where is it</p>",
        "id": 207731625,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598113929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207731366\">said</a>:</p>\n<blockquote>\n<p>we do have the theorem that a subset is connected iff it is connected</p>\n</blockquote>\n<p>You are basically the ultimate version of library search haha</p>",
        "id": 207731655,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598113972
    },
    {
        "content": "<p>Actually, the ultimate version of library search is reading the library</p>",
        "id": 207731688,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598114031
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">is_connected_iff_connected_space</span>\n</code></pre></div>",
        "id": 207731773,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598114161
    },
    {
        "content": "<p>If you want to know what is in the library about connected sets, why not read the whole section where connected sets are defined? It's only 360 lines and it will answer all subsequent questions of this form.</p>",
        "id": 207731871,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598114258
    },
    {
        "content": "<p><code>git grep</code> is also a recommended way to find lemmas.</p>",
        "id": 207731876,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598114270
    },
    {
        "content": "<p>I just wrote <code>#check connected</code> (<strong>and then reset the cursor by pressing escape</strong>) and then press Ctrl+space</p>",
        "id": 207732101,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598114624
    },
    {
        "content": "<p>then it gives you a bunch of lemmas with the name <code>connected</code></p>",
        "id": 207732104,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598114635
    },
    {
        "content": "<p>Ok sorry I actually did not even know a class which is proposition valued could be treated as a normal proposition in iff lemmas so I did not think such a lemma could exist.</p>",
        "id": 207733905,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598117263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207719244\">said</a>:</p>\n<blockquote>\n<p>For example, there cannot be an instance for <code>is_connected (Icc a b)</code> because it needs a hypothesis <code>a &lt;= b</code>, but <code>&lt;=</code>isn't a class and the proof of <code>a &lt;= b</code> can't be recovered from just knowing <code>Icc a b</code>.</p>\n</blockquote>\n<p>All the same this should not be a problem with fact: I was thinking to something like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">is_connected_Icc</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_connected</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">left_mem_Icc</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">}</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">is_preconnected_Icc</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">curve</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">connected_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">continuous_map</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">some_other_name</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">connected_space</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_connected_iff_connected_space</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"o\">(</span><span class=\"n\">is_connected_Icc</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">curve</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">continuous_induced_dom</span><span class=\"bp\">.</span><span class=\"n\">prod_mk</span> <span class=\"n\">continuous_induced_dom</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 207733964,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598117354
    },
    {
        "content": "<p>I mean this is in the topology case but I think of something like this for geometry</p>",
        "id": 207733981,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598117394
    },
    {
        "content": "<p>I take it that there is no point in defining curves in topology, it is just to illustrate my point</p>",
        "id": 207734028,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598117414
    },
    {
        "content": "<p>The geometry library already treats <code>[a, b]</code> as a manifold with corners by making use of <code>fact</code> so there should be no problem to use it further: the user already has to use it there</p>",
        "id": 207734113,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598117547
    },
    {
        "content": "<p>I don't really know what the story with the <code>fact</code> class is but it sounds more complicated than what I suggested.</p>",
        "id": 207734114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598117563
    },
    {
        "content": "<p>If it works for you, then OK.</p>",
        "id": 207734119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598117576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Curves/near/207733905\">said</a>:</p>\n<blockquote>\n<p>Ok sorry I actually did not even know a class which is proposition valued could be treated as a normal proposition in iff lemmas so I did not think such a lemma could exist.</p>\n</blockquote>\n<p>Remember this whole <code>class</code> business is only about inferring arguments that you don't provide. It doesn't change the type of anything. If <code>connected_space X : Prop</code> then it's a <code>Prop</code>.</p>",
        "id": 207734334,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598117961
    },
    {
        "content": "<p>Another idea that works particularly well in Lean, modeled on the idea of local_equiv, would be to define a curve to be a continuous / smooth function from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> to the target space / manifold and only care about its values on a source subset. This would be perfect to define an order relation on curves to define maximal curves. The problem with this however is that this breakes extensionality. I see that in the case of local equivalences extensionality requires that the two equivalences have same source, fun and inv_fun, which is not ideal. In the case of curves one would want two curves to be equal if they are the same only on their sources, and this is important for the order relation. One way to achieve this is to require that the target space be inhabited and require that the curves takes the default value on points not in the source, so to save extensinoality the way I want it. If someone else has better ideas to get the right extensionality however I am happy to hear them</p>",
        "id": 207767638,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598180500
    }
]