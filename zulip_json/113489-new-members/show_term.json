[
    {
        "content": "<p>What kinds of things cause <code>show_term</code> to show terms that don't solve the goal? I take it there's some \"hand wavy\" reconstruction happening in how it works, but is there anything one should know in general about when this goes wrong? I've seen this a number of times, but as a concrete example, the below from <code>formalising_mathematics</code> produces a term that doesn't close the goal, and also confusingly has <code>id</code> in it --</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">show_term</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>for me produces a term <code>exact id (λ (x y : X) (hxy : (g ∘ f) x = (g ∘ f) y), hf x y (hg (f x) (f y) hxy))</code> which errors when substituted. (Obviously <code>λ x y hxy, hf (hg hxy)</code> works)</p>",
        "id": 238513105,
        "sender_full_name": "Julian Berman",
        "timestamp": 1620840687
    },
    {
        "content": "<p>This is a known issue which is to do with the <code>\\{{</code> brackets in the definition of <code>function.injective</code>. I suspect there will be an issue somewhere.</p>",
        "id": 238516174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620841844
    },
    {
        "content": "<p>Ah, thanks, I see a couple of open mathlib issues that mention <code>show_term</code>.</p>",
        "id": 238518369,
        "sender_full_name": "Julian Berman",
        "timestamp": 1620842724
    },
    {
        "content": "<p>And now I've found <a href=\"https://github.com/leanprover-community/lean/issues/394\">https://github.com/leanprover-community/lean/issues/394</a> which I think is the one you pointed out, thank you!</p>",
        "id": 238523607,
        "sender_full_name": "Julian Berman",
        "timestamp": 1620844778
    }
]