[
    {
        "content": "<p>I've just started with the natural number game.  In \"Advanced Addition World\" level 1 there is the following:</p>\n<p>theorem succ_inj' {a b : mynat} (hs : succ(a) = succ(b)) :  a = b :=</p>\n<p>The initial state is:</p>\n<p>a b : mynat,<br>\nhs : succ a = succ b<br>\n⊢ a = b</p>\n<p>I started noodling with this, and did the following:</p>\n<p>begin<br>\ncases hs with aa bb,<br>\nrefl,<br>\nend</p>\n<p>If you look at what this does, after the first cases the state is:</p>\n<p>a : mynat,<br>\nhs : succ a = succ a<br>\n⊢ a = a</p>\n<p>which definitely looks wrong!  In retrospect, why was it able to apply cases at all?</p>",
        "id": 219890305,
        "sender_full_name": "Victor Miller",
        "timestamp": 1607973953
    },
    {
        "content": "<p>What were you expecting to happen?</p>",
        "id": 219891146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607974337
    },
    {
        "content": "<p><code>cases</code> is pretty smart. It can figure out that if <code>succ a = succ b</code>, then this must force <code>a = b</code>.</p>",
        "id": 219891188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607974361
    },
    {
        "content": "<p>So it will substitute <code>a</code> for <code>b</code> everywhere</p>",
        "id": 219891209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607974379
    },
    {
        "content": "<p>Hi Victor! You can also use <code>succ_inj</code>to prove this. You have inadvertently managed to persuade lean to be clever here</p>",
        "id": 219892142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607974818
    },
    {
        "content": "<p>I'd never considered applying <code>cases</code> to an <code>eq</code> object (like <code>hs</code>) before</p>",
        "id": 219896890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607977335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/A.20bug.20in.20cases.3F/near/219891209\">said</a>:</p>\n<blockquote>\n<p>So it will substitute <code>a</code> for <code>b</code> everywhere</p>\n</blockquote>\n<p>Johan, Thanks.  I assume that the full capabilities of cases are described in the big document.</p>\n<p>Victor</p>",
        "id": 219900858,
        "sender_full_name": "Victor Miller",
        "timestamp": 1607979465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/A.20bug.20in.20cases.3F/near/219896890\">said</a>:</p>\n<blockquote>\n<p>I'd never considered applying <code>cases</code> to an <code>eq</code> object (like <code>hs</code>) before</p>\n</blockquote>\n<p>I think we'd usually use <code>subst hs</code> instead (or preempt it by using <code>rfl</code> in <code>rcases</code> / <code>rintro</code> / <code>obtain</code>).</p>",
        "id": 219901380,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607979693
    }
]