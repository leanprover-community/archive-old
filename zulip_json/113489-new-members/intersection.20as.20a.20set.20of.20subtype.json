[
    {
        "content": "<p>Under <code>variables {α : Type*} (s t : set α)</code>, what is the proper way to have <code>s ∩ t</code> as a `set ? </p>\n<p>I am stuck in proving these 3 lemmas that should be obvious.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">subtype.image_preimage_coe</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">t.to_finset.card</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(The first example does not rewrite if I want to apply it to the second one,  I get a “motive is not type correct”…)</p>",
        "id": 275109321,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647108357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/113489-new-members/topic/intersection.20as.20a.20set.20of.20subtype/near/275109321\">said</a>:</p>\n<blockquote>\n<p>Under <code>variables {α : Type*} (s t : set α)</code>, what is the proper way to have <code>s ∩ t</code> as a `set ? </p>\n</blockquote>\n<p>Something seems to be missing at the end of this sentence...</p>",
        "id": 275109395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647108445
    },
    {
        "content": "<p>I meant <code>set s</code>.</p>",
        "id": 275144477,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647164934
    },
    {
        "content": "<p>If you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">subtype.image_preimage_coe</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">t.to_finset.card</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>you get a more precise error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">foo</span> <span class=\"bp\">↥</span><span class=\"n\">s</span> <span class=\"n\">t</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">t</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"n\">α</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"bp\">↥</span><span class=\"n\">s</span>\n</code></pre></div>",
        "id": 275144817,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647165475
    },
    {
        "content": "<p>In any case you can use <code>simp_rw</code>, that works.</p>",
        "id": 275144858,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647165494
    },
    {
        "content": "<p>Ah sorry, <code>α</code> is explicit, so what I wrote doesn't make sense.</p>",
        "id": 275145267,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647166030
    },
    {
        "content": "<p>but <code>simp_rw</code> seems to work anyway.</p>",
        "id": 275145445,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647166302
    },
    {
        "content": "<p>I update my initial question, since I now can prove these examples,.<br>\nHowever, I found it difficult, and it must be because I missed something.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">subtype.image_preimage_coe</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.coe_inj'</span> <span class=\"o\">(</span><span class=\"n\">ft</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ft</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"bp\">=</span> <span class=\"n\">ft</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">finset.coe_inj</span><span class=\"o\">,</span> <span class=\"n\">set.coe_to_finset</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ft</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.image</span> <span class=\"n\">coe</span> <span class=\"n\">ft</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">ft.card</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.card_image_of_inj_on</span> <span class=\"o\">(</span><span class=\"n\">function.injective.inj_on</span> <span class=\"o\">(</span><span class=\"n\">subtype.coe_injective</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">ft</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.card_coe</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"n\">t.to_finset.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">set.coe_to_finset</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">finset.coe_image</span><span class=\"o\">]</span>  <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">finset.image</span> <span class=\"n\">coe</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.card_image_of_inj_on</span> <span class=\"o\">(</span><span class=\"n\">function.injective.inj_on</span> <span class=\"o\">(</span><span class=\"n\">subtype.coe_injective</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.coe_inj</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">set.coe_to_finset</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.to_finset_inj</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">subtype.image_preimage_coe</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.card_coe</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n <span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 275147042,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647168622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/intersection.20as.20a.20set.20of.20subtype/near/275144858\">said</a>:</p>\n<blockquote>\n<p>You can use <code>simp_rw</code>, that seems to work.</p>\n</blockquote>\n<p>What do you mean? (I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simp_rw\">docs#simp_rw</a>. I need to understand how it can be used here…)</p>",
        "id": 275147071,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647168694
    },
    {
        "content": "<p>If <code>rw [foo]</code> gives you \"motive is not type correct\", you can try <code>simp_rw [foo]</code>. Sometimes it works, meaning that it does what you wanted from <code>rw</code>.</p>",
        "id": 275147327,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647169039
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp_rw\">simp_rw</a></p>",
        "id": 275147680,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647169552
    },
    {
        "content": "<p>Thanks to you, I have a much simpler proof !</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">subtype.image_preimage_coe</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.card_image_of_inj_on</span> <span class=\"o\">(</span><span class=\"n\">function.injective.inj_on</span> <span class=\"o\">(</span><span class=\"n\">subtype.coe_injective</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">finset.coe_inj</span><span class=\"o\">,</span> <span class=\"n\">set.coe_to_finset</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_image</span><span class=\"o\">,</span> <span class=\"n\">set.coe_to_finset</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">classical.dec_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>A new question arises: why do I now need to appeal explicitly to <code>classical.dec_eq α</code> ?…</p>",
        "id": 275148536,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647170799
    },
    {
        "content": "<p>I don't understand all the details of <code>decidable_eq</code>, but I noticed that using <code>open_locale classical</code> is often not as good as a \"classical\" mathematician thinks. I usually write <code>[decidable_eq α]</code> if I need it in the <em>statements</em>. If I need it in proof I just use <code>classical</code>. The point is that if you have <code>open_locale classical</code> and you need <code>decidable_eq α</code> in a statement, than the theorem will apply to the <code>decidable_eq α</code> instance provided by choice, and it will not work if there is another instance of <code>decidable_eq α</code> (for example <code>ℕ</code> has its own <code>decidable_eq</code> instance, that is not the one given by choice).</p>",
        "id": 275150300,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647173544
    },
    {
        "content": "<p>In your case adding <code>[decidable_eq α]</code> does not suffice, it seems that Lean is then missing some <code>fintype</code> instances, but I am not sure why.</p>",
        "id": 275150321,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647173598
    },
    {
        "content": "<p>Ah, it's because Lean wants some <code>decidable_pred (∈ _)</code>.</p>",
        "id": 275150453,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647173781
    },
    {
        "content": "<p>I think this proof is better</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">))]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">subtype.image_preimage_coe</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.card_image_of_inj_on</span> <span class=\"o\">(</span><span class=\"n\">function.injective.inj_on</span> <span class=\"o\">(</span><span class=\"n\">subtype.coe_injective</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">finset.coe_inj</span><span class=\"o\">,</span> <span class=\"n\">set.coe_to_finset</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_image</span><span class=\"o\">,</span> <span class=\"n\">set.coe_to_finset</span><span class=\"o\">],</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't know exactly why we need the last <code>apply_instance</code>, but it must be something related to the order of the elaboration.</p>",
        "id": 275150806,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647174312
    },
    {
        "content": "<p>Thanks ! </p>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/intersection.20as.20a.20set.20of.20subtype/near/275150806\">said</a>:</p>\n<blockquote>\n<p>I don't know exactly why we need the last <code>apply_instance</code>, but it must be something related to the order of the elaboration.</p>\n</blockquote>\n<p>Indeed, my impression is that Lean has less material to guess, it sometimes find such instances by itself.</p>",
        "id": 275152708,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647177015
    },
    {
        "content": "<p><code>apply</code> is normally the guilty party when you end up with random goals which are instances; try changing it to <code>refine X _ _</code> with appropriate number of underscores</p>",
        "id": 275152974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647177470
    },
    {
        "content": "<p>It indeed appeared after <code>apply congr_arg</code>, but <code>refine congr_arg _ _</code> does not help.<br>\n(It is on line 1099 of <a href=\"https://github.com/leanprover-community/mathlib/blob/cbfab7e23b9a594a477809e2cae58e9685413c68/acl-sandbox/group_theory/wielandt.lean\">https://github.com/leanprover-community/mathlib/blob/cbfab7e23b9a594a477809e2cae58e9685413c68/acl-sandbox/group_theory/wielandt.lean</a> )</p>",
        "id": 275154821,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647178897
    },
    {
        "content": "<p>You can try to write down the fist argument explicitly,  but I wouldn't bother too much about it.</p>",
        "id": 275154926,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647179011
    },
    {
        "content": "<p>I am so happy that this files now work that I will have some rest!<br>\n(This is a formalization of Wielandt's book on Finite permutation groups. I am close to proving a theorem of Jordan.)</p>",
        "id": 275155017,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647179092
    }
]