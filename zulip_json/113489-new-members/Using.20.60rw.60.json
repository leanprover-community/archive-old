[
    {
        "content": "<p>How can one prove these using only (or mainly) <code>rw</code> without any tactic in <code>mathlib</code> or the use of <code>succ_inj</code> or even <code>succ</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"n\">m</span>  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">T1</span> <span class=\"o\">(</span> <span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">T2</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>  <span class=\"o\">:</span>  <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span>  <span class=\"o\">:=</span>  <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 186343731,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579736704
    },
    {
        "content": "<p>But the first one is just <code>nat.succ_inj hyp</code>. </p>\n<p>What do you want to accomplish by only using <code>rw</code>? After all, some rewrite lemma must need <code>nat.succ_inj</code>.</p>",
        "id": 186344248,
        "sender_full_name": "Joe",
        "timestamp": 1579737135
    },
    {
        "content": "<p>Yes, it is just <code>succ_inj</code>. Basically what I'm saying is that I would like to know how <code>succ_inj</code> is proved from first principles. The first one is similar to a problem in the natural number game by Kevin Buzzard.</p>",
        "id": 186344374,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579737252
    },
    {
        "content": "<p><code>nat</code> is defined as an inductive type, and all constructors are injective by definition.</p>",
        "id": 186344454,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579737326
    },
    {
        "content": "<p>The proof of injectivity of constructors is somewhat involved. The core theorem is called <code>nat.no_confusion</code>, and it's defined from the recursor</p>",
        "id": 186345949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579738588
    },
    {
        "content": "<p>This theorem has an unreadable type that basically says \"all constructors are injective\".</p>",
        "id": 186346168,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579738823
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- first, consider the following definition:</span>\n<span class=\"c1\">-- def nat.injected : nat → nat → Prop</span>\n<span class=\"c1\">-- | 0 0 := true</span>\n<span class=\"c1\">-- | (m + 1) (n + 1) := m = n</span>\n<span class=\"c1\">-- | _ _ := false</span>\n\n<span class=\"c1\">-- which we write using the recursor because we aren&#39;t assuming</span>\n<span class=\"c1\">-- the equation compiler</span>\n<span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">injected</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">IH</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Now we prove by cases that this follows from equality, by a one argument recursion</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">injected_of_eq</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">injected</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">suffices</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">injected</span> <span class=\"n\">m</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">trivial</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">m</span>\n\n<span class=\"c1\">-- And now we observe that injectivity follows:</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj&#39;</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">injected_of_eq</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 186346450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579739167
    },
    {
        "content": "<p>The version you see in <code>nat.no_confusion</code> and <code>nat.no_confusion_type</code> is the same argument, but written in a way that generalizes to arbitrary inductive types</p>",
        "id": 186346599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579739350
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- This is also how you can show that zero is not a successor</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_zero&#39;</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">injected_of_eq</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 186346726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579739468
    },
    {
        "content": "<p>This helps! Where, i.e. in what file, is <code>succ_inj</code> defined in the LEAN source code?</p>",
        "id": 186347563,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579740417
    },
    {
        "content": "<p>You can ctrl-click on things in vscode to find them, but it probably won't help much in this case. <code>nat.succ_inj</code> is defined in <code>init.data.nat.lemmas</code>, but it is just an alias:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">succ_inj</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">inj_arrow</span> <span class=\"n\">H</span> <span class=\"n\">id</span>\n</pre></div>\n\n\n<p>where <code>nat.succ.inj_arrow</code> is an automatically generated lemma that is created when <code>nat</code> itself is written down</p>",
        "id": 186348077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579740993
    },
    {
        "content": "<p>Here is the stack of definitions involved. All of these except the first are autogenerated</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">inj_arrow</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">inj</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">no_confusion_type</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span>\n</pre></div>",
        "id": 186348177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579741104
    },
    {
        "content": "<p>Related: <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/</a></p>",
        "id": 186365396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579765900
    }
]