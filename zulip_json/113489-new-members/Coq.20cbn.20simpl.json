[
    {
        "content": "<p>Is there a way to evaluate some code inside a proof, just like cbn or simpl does in Coq?<br>\nLean4's simp tactic only seems to work if the goal is completed by the operation, but what about if you only want to take step forward and evaluate the code as much as possible, given some cases have made some of the variables specific.</p>",
        "id": 306947886,
        "sender_full_name": "awalterschulze",
        "timestamp": 1667130643
    },
    {
        "content": "<p>Want to create a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> illustrating what you're talking about? I think <code>simp</code> might be what you're looking for, but how you use it might depend on specifics. A general hint: if <code>f</code> is the name of the function you want evaluated, you can do <code>simp [f]</code>.</p>",
        "id": 306950302,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667131806
    },
    {
        "content": "<p>Thank you <code>simp [f]</code> seems very useful, but what do you do if you don't know the function name?</p>\n<p>I'll try to work on a minimal working example</p>",
        "id": 306954620,
        "sender_full_name": "awalterschulze",
        "timestamp": 1667134065
    },
    {
        "content": "<p>Here is a minimal working example, we <code>simp</code> didn't work, but <code>simp [ordering_mplus]</code> worked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ordering_mplus</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Ordering</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Ordering</span><span class=\"o\">):</span> <span class=\"n\">Ordering</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ordering.eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ordering_mplus_assocy</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Ordering</span><span class=\"o\">):</span>\n  <span class=\"n\">ordering_mplus</span> <span class=\"o\">(</span><span class=\"n\">ordering_mplus</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ordering_mplus</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">ordering_mplus</span> <span class=\"o\">(</span><span class=\"n\">ordering_mplus</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">ordering_mplus</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"n\">d</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span>\n  <span class=\"n\">case</span> <span class=\"n\">lt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">case</span> <span class=\"n\">gt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">case</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ordering_mplus</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p><code>simp [F]</code> seems to evaluate very deeply, much like <code>simpl</code> in Coq, which is great and something I really wanted, thank you.<br>\nNow I wonder if we can also get <code>cbn</code> equivalent.</p>\n<p>Sometimes you also want a tactic that only steps a small amount like <code>cbn</code> would or even better <code>cbn [F]</code>.<br>\nFor example in this case <code>simp [ordering_mplus]</code> goes a bit far and evaluates up to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ordering.eq</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Ordering.eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">d</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"k\">match</span>\n    <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Ordering.eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ordering.eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">d</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Ordering.eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>where I would have preferred it evaluated to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ordering_mplus</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">ordering_mplus</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">ordering_mplus</span> <span class=\"o\">(</span><span class=\"n\">ordering_mplus</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>Is there a tactic that does not evaluate so deeply <br>\nor a way to tell <code>simp</code> to not evaluate so deeply?</p>",
        "id": 306956270,
        "sender_full_name": "awalterschulze",
        "timestamp": 1667134901
    },
    {
        "content": "<p>Also if there is a notation used, how do we tell <code>simp</code> to evaluate that function.  For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span><span class=\"o\">:</span>  <span class=\"n\">Mul</span> <span class=\"n\">Ordering</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">ordering_mplus</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ordering_mul_assocy</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Ordering</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">d</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span>\n  <span class=\"n\">case</span> <span class=\"n\">lt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">case</span> <span class=\"n\">gt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">case</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 306956534,
        "sender_full_name": "awalterschulze",
        "timestamp": 1667135032
    },
    {
        "content": "<p>Also how does one do simp on a function that is notation like <code>*</code>?</p>",
        "id": 309144487,
        "sender_full_name": "awalterschulze",
        "timestamp": 1668153572
    },
    {
        "content": "<p>Generally you have to figure out which instance is used in the notation and write e.g. <code>simp [has_mul.mul, int.has_mul]</code></p>",
        "id": 309162795,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1668161692
    },
    {
        "content": "<p>You can use <code>simp [(*)]</code></p>",
        "id": 309250709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668195116
    },
    {
        "content": "<p>I don't think <code>simp [(*)]</code> works, it gave us a syntax error.  Maybe this works in lean3? but we are using lean4.</p>",
        "id": 309362554,
        "sender_full_name": "awalterschulze",
        "timestamp": 1668271027
    },
    {
        "content": "<p>Also is there a way to search for the instance of the notation, something like a Locate \"&lt;\" command in Coq?</p>",
        "id": 309362577,
        "sender_full_name": "awalterschulze",
        "timestamp": 1668271066
    },
    {
        "content": "<p>Is there a way to do the same as <code>simp [(*)]</code> in lean4?</p>",
        "id": 309366451,
        "sender_full_name": "awalterschulze",
        "timestamp": 1668273376
    },
    {
        "content": "<p>you should be able to control-click on the <code>*</code></p>",
        "id": 309380434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668281747
    },
    {
        "content": "<blockquote>\n<p>Is there a tactic that does not evaluate so deeply</p>\n</blockquote>\n<p>does Lean 4 have <code>simp only</code>? in Lean 3 you can use that to restrict the simplifications performed</p>",
        "id": 309384264,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668284500
    },
    {
        "content": "<p>I don't know if Lean 4 has <code>simp_rw</code> but that tactic is basically equivalent to <code>simp only</code> and is very useful in Lean 3</p>",
        "id": 309384408,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668284603
    },
    {
        "content": "<p>yes?</p>",
        "id": 309386351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668286106
    },
    {
        "content": "<p>I was just thinking that it might be what <span class=\"user-mention\" data-user-id=\"557483\">@awalterschulze</span> was looking for... <code>simp_rw F</code> or <code>simp only [F]</code> instead of <code>simp [F]</code> (or maybe <code>dsimp</code>/<code>dsimp only</code>)</p>\n<p>but I only know what's available in Lean 3</p>",
        "id": 309388003,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668287321
    }
]