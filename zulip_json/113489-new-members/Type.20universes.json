[
    {
        "content": "<p>I have possibly a naive question about type universes. Why does there have to be an infinite hierarchy of universes of types? For example in Python the type of \"type\" is just \"type\". </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">type</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">&lt;</span><span class=\"kd\">class</span> <span class=\"bp\">'</span><span class=\"n\">int'</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">type</span><span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">))</span>\n<span class=\"bp\">&lt;</span><span class=\"kd\">class</span> <span class=\"bp\">'</span><span class=\"n\">type'</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">type</span><span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)))</span>\n<span class=\"bp\">&lt;</span><span class=\"kd\">class</span> <span class=\"bp\">'</span><span class=\"n\">type'</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>Does it lead to some sort of Russell's paradox problem if you let the type of \"type\" be \"type\" ?</p>",
        "id": 316367175,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1671227585
    },
    {
        "content": "<p>Yes! You can prove <code>false</code>.</p>",
        "id": 316368281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671228052
    },
    {
        "content": "<p>I feel like it should be something like, it implies that you are allowed to define a function like <code>def f(g): g(g) is false</code>, but I don't see how that would be a result of letting the type of type be type</p>",
        "id": 316370035,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1671228741
    },
    {
        "content": "<p>It's called Girard's Paradox. <a href=\"https://github.com/leanprover-community/mathlib/blob/master/counterexamples/girard.lean\">here</a> is a proof in Lean.</p>",
        "id": 316370753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671229086
    }
]