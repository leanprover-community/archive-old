[
    {
        "content": "<p>Is it possible to infer the behavior of an unknown type's recursor given enough information?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kd\">parameter</span> <span class=\"n\">N.rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">N.rec</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">base</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N.rec</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">step</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">N.rec</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The only real difference that I see between <code>N.rec</code> and <code>nat.rec</code> is that <code>N.rec</code> is not universe polymorphic (it depends on the universe <code>u</code> and <code>u</code> is fixed in this context). But if finitely many universes are needed, the following can be done:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">parameter</span> <span class=\"n\">N.rec1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n<span class=\"kd\">parameter</span> <span class=\"n\">N.rec2</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n<span class=\"kd\">parameter</span> <span class=\"n\">N.rec3</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n<span class=\"c1\">-- ...</span>\n</code></pre></div>\n<p>If full universe polymorphism is required, would it be possible to prove the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axioms</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n<span class=\"kd\">axioms</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">N.rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">N.rec</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">base</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N.rec</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">step</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">N.rec</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 290497016,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1658491588
    },
    {
        "content": "<p>I don't think you can prove this in Lean, since <code>N.rec</code> could e.g. swap the result for <code>z</code> and <code>s z</code> if it detects <code>P z = P (s z)</code>.</p>",
        "id": 290529212,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658505138
    },
    {
        "content": "<p>However, since <code>N.rec</code> is polymorphic, you should be able to prove a metatheorem (in the vein of Wadler's \"theorems for free\") showing that it has to behave like recursion on natural numbers, conditional on the assumption that the definition of <code>N</code> consists only of Lean terms.</p>",
        "id": 290529504,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658505249
    },
    {
        "content": "<p>The first example is false:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Proof</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kd\">parameter</span> <span class=\"n\">N.rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lem</span> <span class=\"o\">:</span> <span class=\"n\">N.rec</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">base</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">lem</span> <span class=\"n\">ℕ</span> <span class=\"mi\">0</span> <span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"kt\">Prop</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n    <span class=\"k\">else</span> <span class=\"n\">n.rec_on</span> <span class=\"n\">z</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>\n<p>The second example (the one that uses axioms) is unprovable I think.</p>\n<blockquote>\n<p>The only real difference that I see between <code>N.rec</code> and <code>nat.rec</code> is that <code>N.rec</code> is not universe polymorphic (it depends on the universe <code>u</code> and <code>u</code> is fixed in this context)</p>\n</blockquote>\n<p>I think that's not the real problem (you could always lift the type up/down to fit the expected universe, while preserving type cardinality). The real problem is that <code>nat.rec</code> has <em>implicit</em> reduction rules (kernel is aware that <code>nat.rec base step 0 = base</code> and <code>nat.rec base step n.succ = step n (nat.rec base step n)</code>)</p>",
        "id": 290589229,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1658545857
    }
]