[
    {
        "content": "<p>I'm not sure if this is a bug, or if it's me not understanding what computation is. Here is my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:<br>\nThe following works fine</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)),</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_neg</span><span class=\"o\">],</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n<span class=\"n\">exact</span> <span class=\"n\">e</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>But if I use the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)),</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_neg</span><span class=\"o\">],</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n<span class=\"n\">exact</span> <span class=\"n\">e</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I get <code>(deterministic) timeout</code>.</p>",
        "id": 199111728,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1590724722
    },
    {
        "content": "<p>If you look at the goal after <code>simp [map_neg]</code> in the second one (delete the <code>ring</code>), you have <code>‚ä¢ f = X + -C a</code>, which <code>ring</code> can't do anything about. If you give <code>simp</code> <code>f</code>, then <code>ring</code> can solve it.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)),</span>\n  <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_neg</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">e</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199112248,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1590725551
    },
    {
        "content": "<p>Thanks so much! The only part I still don't get is why <code>exact e</code> is able to correctly prove the theorem, when <code>e</code> has type <code>f = (X + C (-a))</code> and not type <code>(X - C a) = (X + C (-a))</code>. This seems to be exactly the same issue that <code>ring</code> is worrying about, replacing something with another thing which is definitionally equal.</p>",
        "id": 199151870,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1590758035
    },
    {
        "content": "<p><code>f</code> is defeq to <code>X - C a</code> so <code>exact</code> (which only cares about defeq) works</p>",
        "id": 199152584,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590758388
    },
    {
        "content": "<p>but <code>ring</code> requires something stronger than defeq</p>",
        "id": 199152687,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590758419
    },
    {
        "content": "<p>You can try <code>ring!</code> sometimes for this.</p>",
        "id": 199156083,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590760063
    },
    {
        "content": "<p>Some tactics work up to definitional equality, and some up to syntactic equality (\"literally pressing the same buttons on your keyboard in the same order,  modulo variable renaming\" equality). <code>exact</code> is a good example of one which works up to definitional equality, and <code>rw</code> is a good example of one which works up to syntactic equality.</p>",
        "id": 199163640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590763583
    }
]