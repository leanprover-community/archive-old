[
    {
        "content": "<p>I wrote</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.univ_eq_set_univ_to_finset</span> <span class=\"o\">:</span>\n<span class=\"n\">finset.univ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.univ</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.univ</span><span class=\"o\">,</span> <span class=\"n\">set.to_finset</span><span class=\"o\">],</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">fintype.complete</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Should this be a simplification lemma? If so, which direction is the right direction to simply?</p>",
        "id": 246330716,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626536969
    },
    {
        "content": "<p>Did you try <code>by library_search</code> to see if we already have this?</p>",
        "id": 246331004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626537284
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset_univ\">docs#set.to_finset_univ</a> <del>or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.univ_to_finset\">docs#set.univ_to_finset</a></del> would be my immediate guess</p>",
        "id": 246331029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626537331
    },
    {
        "content": "<p>So yes, this should be and already is a simp lemma</p>",
        "id": 246331099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626537388
    },
    {
        "content": "<p>I think your mistake here was simplifying away the definitions before asking lean if the result was already proven</p>",
        "id": 246331133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626537443
    },
    {
        "content": "<p>I think they are not the same thing actually,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finset.univ_eq_set_univ_to_finset</span> <span class=\"o\">:</span>\n<span class=\"n\">finset.univ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.univ</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.to_finset_univ.symm</span>\n</code></pre></div>\n<p>won't able to close the goal.</p>",
        "id": 246333062,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626540138
    },
    {
        "content": "<p>With what error?</p>",
        "id": 246333380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626540696
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">set.to_finset_univ.symm</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">finset.univ</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">set.to_finset</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.univ</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subtype.fintype</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">@</span><span class=\"n\">set.univ</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">set.univ_decidable</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">finset.univ</span> <span class=\"n\">I</span> <span class=\"n\">_inst_1</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">set.to_finset</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.univ</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.fintype_univ</span> <span class=\"n\">I</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 246333643,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626541140
    },
    {
        "content": "<p>Can you give a mwe with imports?</p>",
        "id": 246333875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626541422
    },
    {
        "content": "<p>It might succeed / fail depending  on what you have imported</p>",
        "id": 246333881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626541441
    },
    {
        "content": "<p><code>by convert set.to_finset_univ.symm</code> may also close it</p>",
        "id": 246333933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626541466
    },
    {
        "content": "<p>That is weird, Eric. Why should this happen? <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nIf I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.univ_eq_set_univ_to_finset</span> <span class=\"o\">:</span>\n<span class=\"n\">finset.univ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.univ</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.to_finset_univ.symm</span>\n</code></pre></div>\n<p>then it fails, but it will succeed if I remove the import tactic.</p>",
        "id": 246335799,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626544480
    },
    {
        "content": "<p>Can you narrow down the import that makes it fail?</p>",
        "id": 246336069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626544844
    },
    {
        "content": "<p><code>import tactic</code> imports <code>tactic.default</code>, which is just a file full of imports</p>",
        "id": 246336075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626544867
    },
    {
        "content": "<p>You can paste those all in, and delete them one at a time until it works</p>",
        "id": 246336082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626544882
    },
    {
        "content": "<p><code>tactic</code> imports <code>data.set.finite</code>, which provides the instance <code>fintype_univ</code>, which conflicts with <code>subtype.fintype</code> for <code>set.univ</code>.</p>",
        "id": 246336295,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626545217
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">set.fintype_univ</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.univ_eq_set_univ_to_finset</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">finset.univ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.univ</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.to_finset_univ.symm</span>\n</code></pre></div>",
        "id": 246336302,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626545238
    },
    {
        "content": "<p>Maybe <code>set.to_finset_univ</code> should be changed to take a <code>[fintype set.univ]</code> instance</p>",
        "id": 246336323,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626545276
    },
    {
        "content": "<p>Is there any reason for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.fintype_univ\">docs#set.fintype_univ</a> to exist?</p>",
        "id": 246336580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626545633
    },
    {
        "content": "<p>If not, it seems easier to remove it than to add that argument</p>",
        "id": 246336625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626545680
    },
    {
        "content": "<p>I don't see why <code>set.fintype_univ</code> exists, since <code>set.univ</code> is a decidable predicate.  Only thing I can think of is that <code>subtype.fintype</code> breaks the set API slightly, since it treats sets as predicates directly.</p>\n<p>(Though it still might be worth fixing <code>set.to_finset_univ</code>, since it breaks the ideal rule that instances used in a lemma should all be given as arguments.)</p>",
        "id": 246336804,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626545990
    },
    {
        "content": "<p>I thought I fixed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.fintype\">docs#subtype.fintype</a> to not abuse the set API</p>",
        "id": 246337979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626547708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> The reason <code>by convert</code> works is that it makes use of the fact that <code>fintype</code> is a subsingleton (if you have two <code>fintype</code> instances, while they might not be definitionally equal, they are at least provably equal).  There are two instances for <code>fintype (@set.univ I)</code> floating around, and <code>set.to_finset_univ</code> has picked up on a different instance than <code>(@set.univ I).to_finset</code>.</p>\n<p>Just for completeness, here is how to get it to work (better to not mess around with removing attributes):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finset.univ_eq_set_univ_to_finset</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset.univ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.univ</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">set.to_finset_univ.symm</span>\n</code></pre></div>",
        "id": 246338084,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626547898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I'm not sure what counts as abuse exactly.  I was just going on the fact that <code>p</code> here is not a set:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">subtype.fintype</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.subtype</span> <span class=\"o\">(</span><span class=\"n\">univ.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(If this is an abuse, I think it's an ok one, but that's just my opinion. I think the fact that sets are predicates is a fundamental fact about them.)</p>",
        "id": 246338195,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626548034
    },
    {
        "content": "<p>Doesn't it infer that with <code>p = (∈ s)</code>?</p>",
        "id": 246338929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626548922
    },
    {
        "content": "<p>Interestingly we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_fintype\">docs#set_fintype</a> right below that, but it's not an instance</p>",
        "id": 246338941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626548946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Euniv_eq_set_univ_to_finset/near/246338929\">said</a>:</p>\n<blockquote>\n<p>Doesn't it infer that with <code>p = (∈ s)</code>?</p>\n</blockquote>\n<p>Oh, my mistake -- thanks.</p>",
        "id": 246339667,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626549751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Euniv_eq_set_univ_to_finset/near/246337979\">said</a>:</p>\n<blockquote>\n<p>I thought I fixed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.fintype\">docs#subtype.fintype</a> to not abuse the set API</p>\n</blockquote>\n<p>Eric, what do you mean by \"not abuse the set API\" here?</p>",
        "id": 246339715,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626549842
    },
    {
        "content": "<p>A lot of stuff used to behave the way you were claiming though - I changed it in the last week or so.</p>",
        "id": 246339737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626549844
    },
    {
        "content": "<p>By abuse, I mean using <code>s x</code> instead <code>x ∈ s</code> when <code>s : set α</code></p>",
        "id": 246339799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626549924
    },
    {
        "content": "<p>So is the current solution for working on relevant things to block an instance?</p>",
        "id": 246340328,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626550660
    },
    {
        "content": "<p>Is <code>local attribute [-instance] set.fintype_univ</code> the right thing supposed to do now?</p>",
        "id": 246340373,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626550690
    },
    {
        "content": "<p>and also do <code>local attribute [instance] set_fintype</code> perhas?</p>",
        "id": 246340388,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626550732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 246340404,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626550767
    },
    {
        "content": "<p>I asked how to block things in another post as I had felt that something was going wrong at that point before encounter this specific issue when working on my own project.</p>",
        "id": 246340552,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626551007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Euniv_eq_set_univ_to_finset/near/246340373\">said</a>:</p>\n<blockquote>\n<p>Is <code>local attribute [-instance] set.fintype_univ</code> the right thing supposed to do now?</p>\n</blockquote>\n<p>No, you should use <code>by convert</code> like in the code block in one of my last comments (at least until these overlapping instances are possibly fixed).</p>",
        "id": 246341666,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626552418
    },
    {
        "content": "<p>There is no mismatch of instances constructed between  <code>set_fintype</code> and <code>subtype.fintype</code> right? <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 246341951,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626552788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> Correct, those are definitionally equal.</p>",
        "id": 246342587,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626553826
    },
    {
        "content": "<p>I note there is one mismatch : <code>set_fintype</code> uses <code>[_inst_1 : decidable_pred p]</code>, <code>subtype.fintype</code> uses <code>[_inst_1 : decidable_pred p]</code>. I suggest to match them.<br>\nWhich condition is a better form?</p>",
        "id": 246343001,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626554513
    },
    {
        "content": "<p>Did you mean to type those as the same in both cases?</p>",
        "id": 246345123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626556785
    },
    {
        "content": "<p>Yes!</p>",
        "id": 246345965,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626558233
    },
    {
        "content": "<p>Then in what way are they a mismatch?</p>",
        "id": 246346377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626558884
    },
    {
        "content": "<p>sorry, there is a typo, I fixed it.</p>",
        "id": 246346721,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626559433
    },
    {
        "content": "<p><code>decidable_pred</code> expects a <code>p : α → Prop</code>, but <code>s : set α</code>. To get the right type, we need <code>(∈ s) : α → Prop</code>.</p>",
        "id": 246346935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626559784
    },
    {
        "content": "<p>Using <code>decidable_pred s</code> directly is telling lean to unfold <code>set</code>, which you should never do</p>",
        "id": 246346983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626559845
    },
    {
        "content": "<p>What I am saying is that <code>subtype.fintype</code> uses<code> [_inst_1 : decidable_pred p]</code> as a condition, I suggest to rewrite it to <code>[_inst_2 : decidable_pred (λ (_x : α), _x ∈ s)]</code></p>",
        "id": 246347244,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626560342
    },
    {
        "content": "<p>But subtype.fintype has no <code>s</code> argument, so that second version doesn't make sense!</p>",
        "id": 246347518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626560836
    },
    {
        "content": "<p>You use p.</p>",
        "id": 246347564,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626560902
    },
    {
        "content": "<p>You can't use <code> ∈</code> on <code>p</code> because it's not a set</p>",
        "id": 246347569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626560928
    },
    {
        "content": "<p>Oh, that's sad..</p>",
        "id": 246347581,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626560979
    },
    {
        "content": "<p>Why?</p>",
        "id": 246347582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626560987
    },
    {
        "content": "<p>If you have [_inst_2 : decidable_pred (λ (_x : α), _x ∈ s)], can lean infer <code>[_inst_1 : decidable_pred s]</code>?</p>",
        "id": 246347627,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626561039
    },
    {
        "content": "<p>The latter is nonsense, because it implies using <code>s x</code> on a set</p>",
        "id": 246347662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626561064
    },
    {
        "content": "<p>Lean happens to accept it, but you don't want to do it</p>",
        "id": 246347666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626561078
    },
    {
        "content": "<p>Because there are no lemmas about <code>s x</code> but lots of lemmas about <code>x ∈ x</code></p>",
        "id": 246347714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626561139
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8211\">#8211</a> tried to clean this sort of mess up</p>",
        "id": 246347790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626561340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Euniv_eq_set_univ_to_finset/near/246347581\">said</a>:</p>\n<blockquote>\n<p>Oh, that's sad..</p>\n</blockquote>\n<p>Just FYI, <code>set_of</code> is how you convert a predicate into a set.  The <code>subtype.fintype</code> instance will convert the set into a predicate (via <code>(λ (x : α), x ∈ s</code>) through a couple of nice coincidences.</p>",
        "id": 246347849,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626561439
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_of\">docs#set_of</a> aka <code>{x | p x}</code></p>",
        "id": 246347911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626561555
    },
    {
        "content": "<p>As I understand it, the only reason that lean doesn't define <code>set</code> as <code>structure set := (mem : α → Prop)</code> is so that both <code>(∈ {x | p x}) = p</code> and <code>{x | x ∈ s} = s</code> are true definitionally; if it were a <code>structure</code>, the second statement would require extensionality to prove as lean does not perform eta reduction.</p>",
        "id": 246348040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626561802
    },
    {
        "content": "<p>BTW, to answer the first question, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset_univ\">docs#set.to_finset_univ</a> is in the desired direction. An alright rule of thumb for simp lemmas is that the RHS term should have fewer terms.</p>",
        "id": 246354852,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626574324
    },
    {
        "content": "<p>On the LHS, you have both set.univ and set.to_finset. The RHS only have finset.univ</p>",
        "id": 246354866,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626574377
    }
]