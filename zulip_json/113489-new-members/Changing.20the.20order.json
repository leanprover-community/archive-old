[
    {
        "content": "<p>I want to define a Galois connection, but the usual ordering (given by an instance) is the opposite of the one that works… How to have the other one?</p>",
        "id": 277899382,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649173577
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual\">docs#order_dual</a> and a bunch of <code>@</code></p>",
        "id": 277899561,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649173645
    },
    {
        "content": "<p>If there are too many <code>@</code> it can be worth the trouble of wrapping the offending type in a synonym.</p>",
        "id": 277899633,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649173678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> is it by chance a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_coinsertion\">docs#galois_coinsertion</a>? Of course I don't know your context.</p>",
        "id": 277900459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649173939
    },
    {
        "content": "<p>I don't think so. It is the duality between <code>fixing_submonoid</code> and <code>fixed_points</code>. As in Galois theory, it reverses inclusion (it is antitone) while Galois connections are monotone  (see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_connection.monotone_u\">docs#galois_connection.monotone_u</a>  and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_connection.monotone_l\">docs#galois_connection.monotone_l</a>).<br>\nThat means that formulating the result that Galois theory is given by a Galois connection will require some tweeks.</p>",
        "id": 277902625,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649174701
    },
    {
        "content": "<p>It's like defining contravariant functors though -- do you do the op on the first variable or the second? There is no answer which works well for everything. We need Heather et al's semilinear maps to compose them.</p>",
        "id": 277902957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649174810
    },
    {
        "content": "<p>I guess you could make an API for the structure you want by just porting it over directly from the covariant case. What did people do in Galois theory? I'm assuming they proved _something_ was a Galois connection!</p>",
        "id": 277903213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649174893
    },
    {
        "content": "<p>Galois insertions and Galois coinsertions are both Galois connections. Maybe we need a Galois coconnection</p>",
        "id": 277903387,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649174973
    },
    {
        "content": "<p>It's probably simpler to have it contravariant in the first variable (subgroups). But that's OK, I would be fine with saying that my ordered set is that of subgroups with opposite order, except that I can't for the moment.</p>",
        "id": 277903413,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649174981
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_galois.galois_coinsertion_intermediate_field_subgroup\">docs#is_galois.galois_coinsertion_intermediate_field_subgroup</a></p>",
        "id": 277903419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649174984
    },
    {
        "content": "<p>Cool, that shows how to use it! Thank you! (I was browsing for <code>connections</code>there and did not find that one…)</p>",
        "id": 277903600,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649175045
    },
    {
        "content": "<p>But what is the <code>galois_insertion</code> of <code>galois_coconnection</code>, Riccardo?</p>",
        "id": 277904893,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649175601
    },
    {
        "content": "<p>I'm half joking, because it does come up all the time (look for <code>galois.*dual</code> in VScode).</p>",
        "id": 277905022,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649175649
    },
    {
        "content": "<p>Wait how do both directions involve <code>to_dual</code>?</p>",
        "id": 277905321,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649175783
    },
    {
        "content": "<p>I have no idea, I am always confused by insertion/coinsertion :D</p>",
        "id": 277905426,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649175832
    },
    {
        "content": "<p>I mean both <code>to_dual</code> and <code>of_dual</code> are the identity, so I understand why it typechecks, but I don't understand which two types are supposedly involved in <code>galois_coinsertion_intermediate_field_subgroup</code></p>",
        "id": 277905658,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649175934
    },
    {
        "content": "<p>I guess it's because you have maps in both directions that you need two duals. You have two contravariant functors. Oh I see your point! There's some abuse right?</p>",
        "id": 277905788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649175982
    },
    {
        "content": "<p>But logically shouldn't it be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">galois_coinsertion</span>\n    <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">order_dual.to_dual</span> <span class=\"bp\">∘</span> <span class=\"n\">intermediate_field.fixing_subgroup</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">intermediate_field.fixed_field</span> <span class=\"bp\">∘</span> <span class=\"bp\">⇑</span><span class=\"n\">order_dual.of_dual</span><span class=\"o\">)</span>   <span class=\"c1\">-- not to_dual!</span>\n</code></pre></div>",
        "id": 277905911,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649176051
    },
    {
        "content": "<p>It is abusing <code>order_dual (order_dual X) = X</code>, I guess. But that is idiomatic in the order-theory library.</p>",
        "id": 277905924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649176055
    },
    {
        "content": "<p>Reid's version looks better to me. There is no definitional abuse there. It will I suspect make Lean generally happier.</p>",
        "id": 277906178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649176157
    },
    {
        "content": "<p>Oh indeed that's fishy.</p>",
        "id": 277906243,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649176188
    },
    {
        "content": "<p><code>of_dual</code> seems to work, at least in that file</p>",
        "id": 277906472,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649176270
    },
    {
        "content": "<p>And it is definitely more readable</p>",
        "id": 277906500,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649176280
    },
    {
        "content": "<p>I wrote this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">galois_connection</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">submonoid</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">order_dual.preorder</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fixing_submonoid</span> <span class=\"n\">M</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">mul_action.fixed_points</span> <span class=\"n\">P</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">order_dual.to_dual</span> <span class=\"o\">(</span><span class=\"n\">fixing_submonoid</span> <span class=\"n\">M</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">mul_action.fixed_points</span> <span class=\"n\">P</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>worked, and I could write proofs for both. They are identical except that in the second case, I needed to change <code>p ∈ ⇑order_dual.to_dual (fixing_submonoid M s)</code> to <code>p ∈ fixing_submonoid M s</code> by hand.</p>",
        "id": 277906673,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649176343
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 277906845,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649176410
    },
    {
        "content": "<p>And </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">order_dual.to_dual</span> <span class=\"o\">(</span><span class=\"n\">fixing_submonoid</span> <span class=\"n\">M</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">mul_action.fixed_points</span> <span class=\"o\">(</span><span class=\"n\">order_dual.of_dual</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>follows Reid's convention (with the same proof)</p>",
        "id": 277907029,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649176474
    },
    {
        "content": "<p>(A seemingly unrelated question: if there are <code>fixing_submonoid</code>lemmas for actions of monoids, should there be <code>fixing_subgroup</code>lemmas as well, for group actions ? <br>\nShould their proof be repeated or should one made use of the one for monoids?)</p>",
        "id": 277907510,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649176683
    },
    {
        "content": "<p>It's better to prove as much as possible for monoid actions (I mean, without doing anything exotic, if the \"usual\" proof works we're happy, otherwise let's just do it for groups). Then we need that the monoid associated to the subgroup stabilizer is the same as the monoid stabilizer of the action of the underlying monoid.</p>",
        "id": 277907922,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649176846
    },
    {
        "content": "<p>If at some point you can't deduce a result about the subgroup stabilizer from the corresponding result about the monoid stabilizer it means there is an hole in the API <code>subgroup.to_submonoid</code>.</p>",
        "id": 277908305,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649176999
    },
    {
        "content": "<p><del>This is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_connection.dual\">docs#galois_connection.dual</a> we're talking about, right?</del> nevermind</p>",
        "id": 277908883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649177253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I thought so for a minute, but no : it seems that one reverts both preorders (Galois connections are monotone).<br>\nAs <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>  said, maybe a <code>galois.coconnection</code>would be useful, without theorems, just a reformulation into <code>galois.connection</code>.</p>",
        "id": 277910553,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649177981
    },
    {
        "content": "<p>I've thought about this but couldn't convince myself it was worth the code duplication. And we still need to find a name for the corresponding <code>insertion</code>/<code>coinsertion</code>. Maybe the three could be <code>cogalois_connection</code>, <code>cogalois_insertion</code>, <code>cogalois_coinsertion</code>?</p>",
        "id": 277911601,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649178375
    },
    {
        "content": "<p>There is PR about subsemigroup. In analysis semigroup actions are important, so we may even want consider a basic API in this generality</p>",
        "id": 277921638,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649182584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> ,  would something like this be useful?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">antitone.dual_left_iff</span> <span class=\"o\">:</span> <span class=\"n\">antitone</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">of_dual</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">hf</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>For the moment, there's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/antitone.dual_left\">docs#antitone.dual_left</a> that does one direction.<br>\nPossibly the other one can be obtained by rewriting, I'm not sure.</p>",
        "id": 277925526,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649184001
    },
    {
        "content": "<p>That shouldn't be necessary, but if we do want it, it should be  a simp lemma in the other direction.</p>",
        "id": 277925727,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649184067
    },
    {
        "content": "<p>Sorry for being late, but I feel like the answer is do the same as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.polar_gc\">docs#linear_map.polar_gc</a> (which is the same as Reid Barton's answer)</p>",
        "id": 277938728,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1649190367
    }
]