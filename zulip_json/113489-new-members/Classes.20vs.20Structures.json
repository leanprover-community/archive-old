[
    {
        "content": "<p>Hello, <br>\nI am interested to know the reason why in Mathlib <code>monoid</code> is defined as a <code>class</code>, while <code>monoid_hom</code> is defined as a <code>structure</code>. What do we miss if we define both as classes or structures? <br>\nAlso when projecting the member <code>op</code> of a class <code>monoid</code>, one need to qualify it as: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">monoid_class.op</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span>\n</code></pre></div>\n<p>while projecting from a structure  <code>monoid</code> can be sugared as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">m.op_struc</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span>\n</code></pre></div>",
        "id": 224744336,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1612194224
    },
    {
        "content": "<p>Mathematically, if you have a type <code>M</code> then probably you only want to consider one monoid structure on it. But if you have two monoids M and N, you might want to consider many monoid homomorphisms between them.</p>",
        "id": 224744488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612194274
    },
    {
        "content": "<p>Class instances are automatically filled in by the type class inference system, which works under a \"there is at most one term of this type\" assumption.</p>",
        "id": 224744556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612194308
    },
    {
        "content": "<p>so <code>monoid_hom</code> definitely shouldn't be a class, but there is no harm in making <code>monoid</code> a class.</p>",
        "id": 224744615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612194333
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_monoid_hom\">docs#is_monoid_hom</a> is the class version of <code>monoid_hom</code>, but it was considered a failed design because <code>simp</code> was not able to use it</p>",
        "id": 224745711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612194757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Classes.20vs.20Structures/near/224744488\">said</a>:</p>\n<blockquote>\n<p>Mathematically, if you have a type <code>M</code> then probably you only want to consider one monoid structure on it. But if you have two monoids M and N, you might want to consider many monoid homomorphisms between them.</p>\n</blockquote>\n<p>But one might want to define on <code>nat</code> a <code>monoid(nat,+,0,..)</code> and <code>monoid(nat,*,1,..)</code></p>",
        "id": 224758375,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1612199322
    },
    {
        "content": "<p>In practice, mathlib does that by <code>add_monoid(nat,+,0,..)</code>, which obviously doesn't scale to other monoid structures</p>",
        "id": 224758662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612199429
    },
    {
        "content": "<p>This is more of an issue about morphisms and the distinction between (+) and (*).</p>",
        "id": 224758712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612199451
    },
    {
        "content": "<p>A feature that <code>class</code> provides is that, for example, every group is automatically a monoid, so you can apply theorems about monoids to groups without any fuss.  There isn't quite so deep of a hierarchy for homomorphisms, so this kind of automatic casting seems like it would be less beneficial.</p>\n<p>What appears to be a plausible design heuristic for classes vs structures is whether you plan to do rewrites of terms.  \"Bundling\" a term with its properties (like with <code>monoid_hom</code>) lets you rewrite that whole object while maintaining its properties, but if it were a class you'd have to worry about whether the associated typeclass still applies to the rewritten term.  I think it's a lot less frequent rewriting an expression involving the monoid's type itself in comparison to rewriting expressions of homomorphisms.  (If you work with finite sets, you can feel some of this with <code>finset</code> vs a <code>set</code> with a <code>fintype</code> instance.)</p>\n<p>If I understand correctly, Coq uses structures for its algebraic hierarchy, but they use a feature called unification hints to do the automatic casting.</p>",
        "id": 224766796,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612202745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"358884\">@Yasmine Sharoda</span> it's what looks like an extraordinary design decision that Lean's monoids are bound to the notation <code>*</code> and we have a different but isomorphic class <code>add_monoid</code> bound to the notation <code>+</code>. I've never seen this approach in any other theorem prover. A lot of people are surprised by this! But we have a <code>to_additive</code> machine which duplicates all the lemmas for us automatically (so only one of the two needs to be stated, the multiplicative one) and it works just fine! So we have two classes, <code>monoid</code> and <code>add_monoid</code>, and we can have precisely one of each structure on a type with no trouble.</p>",
        "id": 224783174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612209964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Classes.20vs.20Structures/near/224766796\">said</a>:</p>\n<blockquote>\n<p>A feature that <code>class</code> provides is that, for example, every group is automatically a monoid, so you can apply theorems about monoids to groups without any fuss.  There isn't quite so deep of a hierarchy for homomorphisms, so this kind of automatic casting seems like it would be less beneficial.</p>\n<p>What appears to be a plausible design heuristic for classes vs structures is whether you plan to do rewrites of terms.  \"Bundling\" a term with its properties (like with <code>monoid_hom</code>) lets you rewrite that whole object while maintaining its properties, but if it were a class you'd have to worry about whether the associated typeclass still applies to the rewritten term.  I think it's a lot less frequent rewriting an expression involving the monoid's type itself in comparison to rewriting expressions of homomorphisms.  (If you work with finite sets, you can feel some of this with <code>finset</code> vs a <code>set</code> with a <code>fintype</code> instance.)</p>\n<p>If I understand correctly, Coq uses structures for its algebraic hierarchy, but they use a feature called unification hints to do the automatic casting.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Can you please elaborate more on what you mean by \"rewrites of terms\"? Do you mean the terms of <code>monoid</code> language? and what does that have to do with bundling?</p>",
        "id": 224789820,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1612213176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Classes.20vs.20Structures/near/224783174\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"358884\">Yasmine Sharoda</span> it's what looks like an extraordinary design decision that Lean's monoids are bound to the notation <code>*</code> and we have a different but isomorphic class <code>add_monoid</code> bound to the notation <code>+</code>. I've never seen this approach in any other theorem prover. A lot of people are surprised by this! But we have a <code>to_additive</code> machine which duplicates all the lemmas for us automatically (so only one of the two needs to be stated, the multiplicative one) and it works just fine! So we have two classes, <code>monoid</code> and <code>add_monoid</code>, and we can have precisely one of each structure on a type with no trouble.</p>\n</blockquote>\n<p>I understand that design decision. The automation provided by <code>to_additive</code> and other meta programs is what distinguishes Mathlib in a really good way. What I am asking is more of having a class like this one</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">monoid_class</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">assoc</span><span class=\"o\">:</span> <span class=\"bp\">âˆ€</span>  <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lunit</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">runit</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then creating 2 instances for nat, where you once instantiate <code>op</code> to be <code>+</code> and another time instantiate it to be <code>*</code>. <br>\nI am not sure if the two scenarios are the same of different!</p>",
        "id": 224790877,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1612213599
    },
    {
        "content": "<p>With the monoid and monoid homomorphism examples, by rewriting terms I mean rewriting expressions involving monoids themselves or of monoid homomorphisms.  For example, maybe you know that <code>M = f M'</code> and then rewrite according to this.  Since you have <code>[monoid M]</code>, you don't have <code>[monoid (f M')]</code> without rewriting the instance, too, so <code>f M'</code> isn't automatically a monoid itself.</p>",
        "id": 224795883,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612215960
    },
    {
        "content": "<p>Ultimately you have to hook into <code>has_add</code>, and I don't know how you'd do that with that example</p>",
        "id": 224795959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612215984
    },
    {
        "content": "<p>The issue with your <code>monoid_class</code> is that you can't extend <code>monoid_class</code> twice</p>",
        "id": 224795964,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612215987
    },
    {
        "content": "<p>and <code>op</code> would be a name conflict</p>",
        "id": 224795971,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612215998
    },
    {
        "content": "<p>and also you're only supposed to have one instance of a class per set of indices, so you couldn't have <code>nat</code> be both a <code>+</code> monoid and a <code>*</code> monoid in a natural way.  You'd want <code>op</code> to be one of the indices for the <code>class</code> for that, but then <code>assoc</code> and the rest would be name conflicts when you extend.  If lean had some way to rename fields when extending, it might work.</p>",
        "id": 224796200,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612216116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Classes.20vs.20Structures/near/224795883\">said</a>:</p>\n<blockquote>\n<p>With the monoid and monoid homomorphism examples, by rewriting terms I mean rewriting expressions involving monoids themselves or of monoid homomorphisms.  For example, maybe you know that <code>M = f M'</code> and then rewrite according to this.  Since you have <code>[monoid M]</code>, you don't have <code>[monoid (f M')]</code> without rewriting the instance, too, so <code>f M'</code> isn't automatically a monoid itself.</p>\n</blockquote>\n<p>Thanks for the clarification.</p>",
        "id": 224817808,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1612228871
    },
    {
        "content": "<p>The second part of my question is why projecting a field of <code>class monoid</code> requires different syntax from projecting one from <code>structure monoid</code>. </p>\n<ul>\n<li>In the case of a <code>class</code>, one has to use <code>@monoid_class.op a m x1 x2</code></li>\n<li>In the case of a <code>structure</code>, one can use <code>m.op x1 x2</code> (where <code>m</code> is the name of the <code>monoid</code> instance) <br>\nIs that just overlooking syntactic sugar? or is there a more profound reason?</li>\n</ul>",
        "id": 224818573,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1612229655
    },
    {
        "content": "<p>If <code>monoid_class</code> is a structure, the type of <code>op</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">monoid_class.op</span> <span class=\"o\">:</span> <span class=\"bp\">Î </span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">monoid_class</span> <span class=\"n\">m</span> <span class=\"bp\">â†’</span> <span class=\"n\">m</span> <span class=\"bp\">â†’</span> <span class=\"n\">m</span> <span class=\"bp\">â†’</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>As a class, the type is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">monoid_class.op</span> <span class=\"o\">:</span> <span class=\"bp\">Î </span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">monoid_class</span> <span class=\"n\">m</span><span class=\"o\">],</span> <span class=\"n\">m</span> <span class=\"bp\">â†’</span> <span class=\"n\">m</span> <span class=\"bp\">â†’</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>The difference between these is that class instance variable is automatically set to being inferred by the typeclass resolution system.  This gives you the ability to write this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">monoid_class</span> <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_class</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"n\">monoid_class.assoc</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>(The <code>open</code> line imports <code>monoid_class.op</code> into the current namespace, so you can write <code>op</code> for short.)</p>",
        "id": 224827810,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612240204
    },
    {
        "content": "<p>What you are observing is that <code>@monoid_class.op</code> changes the class instance argument to needing to be explicitly given.  When all goes well, you don't need to pass class instance arguments.</p>",
        "id": 224827879,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612240284
    },
    {
        "content": "<p>When a class extends another, there is an automatically defined class instance definition.  This lets you do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">semigroup_class</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">assoc</span><span class=\"o\">:</span> <span class=\"bp\">âˆ€</span>  <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">monoid_class</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">semigroup_class</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lunit</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">runit</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">semigroup_class</span> <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_class</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"n\">semigroup_class.assoc</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n</code></pre></div>",
        "id": 224828024,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612240416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Classes.20vs.20Structures/near/224827879\">said</a>:</p>\n<blockquote>\n<p>What you are observing is that <code>@monoid_class.op</code> changes the class instance argument to needing to be explicitly given.  When all goes well, you don't need to pass class instance arguments.</p>\n</blockquote>\n<p>Thank you!</p>",
        "id": 224933146,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1612298362
    }
]