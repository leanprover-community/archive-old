[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.dihedral</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span> <span class=\"n\">dihedral_group</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`|`</span> <span class=\"n\">x</span> <span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">complex.abs</span> <span class=\"n\">x</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">π</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">real.pi</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">random</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">θ</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">θ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">θ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246395159,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1626637920
    },
    {
        "content": "<p>How would I finish off this proof? As ring or simp do not work</p>",
        "id": 246395199,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1626637940
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">π</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">real.pi</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">random</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">real.pi_ne_zero</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246395401,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626638255
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">real.pi_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 246395454,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626638327
    },
    {
        "content": "<p>Basically, <code>field_simp</code> will get rid of all denominators, as long as it knows that the denoms aren't zero.</p>",
        "id": 246395467,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626638355
    },
    {
        "content": "<p>But I did it without simp at first:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">random</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">θ</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">θ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">θ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">real.pi_ne_zero</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">div_self</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246395530,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626638416
    },
    {
        "content": "<p>Guessed the lemma names.</p>",
        "id": 246395549,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626638431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"418334\">Shadman Sakib</span> <a href=\"#narrow/stream/113489-new-members/topic/Dividing.20values.20to.20left.20side.20of.20equation/near/246395199\">said</a>:</p>\n<blockquote>\n<p>How would I finish off this proof? As ring or simp do not work</p>\n</blockquote>\n<p><code>ring</code> proves goals in ring theory; your conclusion has a division in. <code>simp</code> is an equational rewriter and won't be able to get from <code>a*pi/pi</code> back to <code>a</code> as the corresponding lemma needs a proof that <code>pi</code> isn't zero, which the simplifier can only look for in the local context and it's not there. You have an unnecessary hypothesis that 2 (probably the natural number 2) isn't zero, but if you put the hypothesis that (pi : C) isn't zero then <code>simp *</code> would have some chance.</p>",
        "id": 246395643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626638612
    },
    {
        "content": "<p>Ahh okay, thank you!</p>",
        "id": 246395804,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1626638815
    }
]