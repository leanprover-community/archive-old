[
    {
        "content": "<p>My tactic state is this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">heqa</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">heqb</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>The union is defined as <code>x ∈ A ∪ B ↔ x ∈ A ∨ x ∈ B</code>,  so it seems like I need a proof of  <code>x ∈ A ∨ x ∈ B</code> from <code>ha : x ∈ A,</code> how could I do it?</p>",
        "id": 267675531,
        "sender_full_name": "ccn",
        "timestamp": 1641954896
    },
    {
        "content": "<p><code>or.inl ha</code></p>",
        "id": 267675715,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641955099
    },
    {
        "content": "<p>I am not sure offhand whether the other proposition is an explicit argument to <code>or.inl</code> or not</p>",
        "id": 267675729,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641955138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/267675715\">said</a>:</p>\n<blockquote>\n<p><code>or.inl ha</code></p>\n</blockquote>\n<p>Hey I think you're right, thank you!</p>\n<p>Here it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">inductive</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"kt\">Prop</span>\n\n    <span class=\"n\">inl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span>\n    <span class=\"n\">inr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I have an issue though, when I write <code>  have ho := or.inl ha (x ∈ B),</code> I get this as my tactic state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">or.inl</span> <span class=\"n\">ha</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">heqa</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">heqb</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 267676109,
        "sender_full_name": "ccn",
        "timestamp": 1641955675
    },
    {
        "content": "<p>That's suggesting that <code>or.inl</code> is taking only one argument, and you want <code>or.inl ha</code>.  I expect that <code>rw heqa, exact or.inl ha,</code> ought to finish the proof.</p>",
        "id": 267676515,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641956138
    },
    {
        "content": "<p>Hmm, you're right, that closes the goal. I don't think I fully understand <code>or.inl ha</code> doesn't it take two parameters namely a and b ? <code>  inl : ∀ (a b : Prop), a → a ∨ b</code></p>",
        "id": 267677016,
        "sender_full_name": "ccn",
        "timestamp": 1641956609
    },
    {
        "content": "<p>I guess that's a bug in our documentation generator.<br>\nIf you do this in Lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">or.inl</span>\n</code></pre></div>\n<p>we can see that Lean thinks the type is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>which has implicit a and b arguments</p>",
        "id": 267677198,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641956778
    },
    {
        "content": "<p><code>#print or</code> at least gets it all right:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">constructors</span><span class=\"o\">:</span>\n<span class=\"n\">or.inl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span>\n<span class=\"n\">or.inr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 267678492,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641958104
    },
    {
        "content": "<p>With <a href=\"https://github.com/leanprover-community/doc-gen/pull/151\">doc-gen#151</a> this should be fixed after the next time docs build</p>",
        "id": 267780305,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642018750
    },
    {
        "content": "<p>Last night Kyle showed me that </p>\n<p><code>exact or.inl ha</code></p>\n<p>finishes the following proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">heqa</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">heqb</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>I'm having trouble seeing why this is true, <code>or.inl ha</code> would just be <code>∀ {b : Prop}, x ∈ A -&gt; x ∈ A V b</code> I think I'm interpreting the implicit arguments wrong...</p>",
        "id": 267784932,
        "sender_full_name": "ccn",
        "timestamp": 1642020968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"367659\">@ccn</span> The secret is in the definition of union <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.union\">docs#set.union</a></p>\n<p>It's definitionally \"x in A or x in B\"</p>",
        "id": 267786046,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642021488
    },
    {
        "content": "<p>Oh, also <code>b</code> ends up being \"x in B\", which Lean infers through its elaboration process.</p>",
        "id": 267786141,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642021538
    },
    {
        "content": "<p>So it's able to guess it because it knows that that's what my goal is?</p>",
        "id": 267787887,
        "sender_full_name": "ccn",
        "timestamp": 1642022474
    },
    {
        "content": "<p>Is there a way to specifically create the term  \"x in A or x in B\" without letting it infer?</p>",
        "id": 267787932,
        "sender_full_name": "ccn",
        "timestamp": 1642022503
    },
    {
        "content": "<p>There are a couple of ways:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- -- uncomment ONE:</span>\n  <span class=\"c1\">-- simp</span>\n  <span class=\"c1\">-- dsimp only [mem_union_eq]</span>\n  <span class=\"c1\">-- change x ∈ s ∨ x ∈ t</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267796068,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642026634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/267787932\">said</a>:</p>\n<blockquote>\n<p>Is there a way to specifically create the term  \"x in A or x in B\" without letting it infer?</p>\n</blockquote>\n<p>You can also use <code>@or.inl</code> to turn all the implicit arguments into explicit arguments.  Fill in as many underscores as you want: <code>@or.inl _ _ ha</code> (the second underscore would be for the \"<code>b</code>\").</p>",
        "id": 267800272,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642029017
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/or.intro_left\">docs#or.intro_left</a></p>",
        "id": 267800704,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642029240
    },
    {
        "content": "<p>I was proving a basic set theory fact and this suprised me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span><span class=\"bp\">ᶜ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I'm not really sure what the goal is here, am I supposed to be making a function? I've tried <code>exact x</code> and <code>exact hint</code> but they don't work.</p>",
        "id": 267808278,
        "sender_full_name": "ccn",
        "timestamp": 1642033674
    },
    {
        "content": "<p>Try dsimp first</p>",
        "id": 267808437,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642033785
    },
    {
        "content": "<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would be good for this to know how you got into this situation. You can do <code>dsimp only</code> to beta reduce that lambda expression, giving you something definitionally equal.</p>",
        "id": 267808440,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642033788
    },
    {
        "content": "<p>fwiw this is the function mapping \"a\" to the proposition \"a is not in B\", applied to x.</p>",
        "id": 267808498,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642033807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/267808440\">said</a>:</p>\n<blockquote>\n<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would be good for this to know how you got into this situation. You can do <code>dsimp only</code> to beta reduce that lambda expression, giving you something definitionally equal.</p>\n</blockquote>\n<p>No problem, I am working on the real number game (<a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/rng090720/?world=1&amp;level=6\">https://www.ma.imperial.ac.uk/~buzzard/xena/rng090720/?world=1&amp;level=6</a>), click that link and paste in this code, you should be where I am at: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">ext_iff</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hdiff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hdiff.1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hdiff.2</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hint</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hint.1</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 267808735,
        "sender_full_name": "ccn",
        "timestamp": 1642034012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/267808498\">said</a>:</p>\n<blockquote>\n<p>fwiw this is the function mapping \"a\" to the proposition \"a is not in B\", applied to x.</p>\n</blockquote>\n<p>Ok, so that means I'm trying to prove that x is not in B right?</p>",
        "id": 267808831,
        "sender_full_name": "ccn",
        "timestamp": 1642034055
    },
    {
        "content": "<p>That was a good tip, <code>hint.2</code> solved it for me!</p>\n<p>It's a little weird why it didn't just say prove x is not in B though...</p>",
        "id": 267808947,
        "sender_full_name": "ccn",
        "timestamp": 1642034139
    },
    {
        "content": "<p>Is there a general way to prove arbitrary \"true\" inequalities like 57374 &lt; 99999999 ?</p>",
        "id": 267809189,
        "sender_full_name": "ccn",
        "timestamp": 1642034323
    },
    {
        "content": "<p><code>norm_num</code></p>",
        "id": 267809211,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642034346
    },
    {
        "content": "<p>Would you be referring to this: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/norm_num.html#norm_num.prove_lt_nat\">https://leanprover-community.github.io/mathlib_docs/tactic/norm_num.html#norm_num.prove_lt_nat</a> ?</p>",
        "id": 267809607,
        "sender_full_name": "ccn",
        "timestamp": 1642034720
    },
    {
        "content": "<p>Btw you can just write <a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_num.prove_lt_nat\">docs#norm_num.prove_lt_nat</a> and zulip will figure out the link <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 267809687,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642034769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"367659\">@ccn</span> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.diff\">docs#set.diff</a> is defined using set separation notation -- it takes a set and a predicate. What happened is that you <code>split</code> it, which while works, \"breaks the set API\", so you got something that notationally looks weird. (<code>dsimp only</code> does renormalize it, though).</p>\n<p>You're supposed to use <code>rw mem_sdiff_iff</code> like the level introduces to not have things look weird.</p>",
        "id": 267809723,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642034837
    },
    {
        "content": "<p>and eric means <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_num\">tactic#norm_num</a></p>",
        "id": 267809737,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642034851
    },
    {
        "content": "<p>but no, it's just a tactic; if your goal is <code>1233462734 &gt; 0</code>, then <code>by norm_num</code> will solve it</p>",
        "id": 267809744,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642034859
    },
    {
        "content": "<p>And for similar reasons, I gave you bad advice about how to prove union membership earlier. You should be doing <code>rw mem_union_iff</code> first to not accidentally rely on implementation details.</p>",
        "id": 267809864,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642034967
    },
    {
        "content": "<p>Someone else used <code>linarith</code> what is that doing?</p>",
        "id": 267810016,
        "sender_full_name": "ccn",
        "timestamp": 1642035105
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#linarith\">tactic#linarith</a> automatically solves linear (in)equalities</p>",
        "id": 267810116,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642035178
    },
    {
        "content": "<p>I've been working on this limit proof, but I get stuck around here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span> <span class=\"n\">algebra.geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.log</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.succ_pred</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lim_to_inf</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_point_nine_recurring_is_one</span> <span class=\"o\">:</span>\n  <span class=\"n\">lim_to_inf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">9</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">geom_sum</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">nat.ceil</span> <span class=\"o\">((</span><span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ge_iff_le</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">nat.lt_succ_self</span> <span class=\"o\">(</span><span class=\"bp\">⌈</span><span class=\"n\">real.log</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"bp\">⌉₊</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">h1</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_ceil</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- have h4 := lt_of_le_of_lt h3 h2,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>When I uncomment the last line there I get the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">h3</span> <span class=\"n\">h2</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h2</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">⌈</span><span class=\"n\">real.log</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"bp\">⌉₊</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑⌈</span><span class=\"n\">real.log</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"bp\">⌉₊</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">⌈</span><span class=\"n\">real.log</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"bp\">⌉₊</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">⌈</span><span class=\"n\">real.log</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"bp\">⌉₊</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⌈</span><span class=\"n\">real.log</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"bp\">⌉₊.</span><span class=\"n\">succ</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">⌈</span><span class=\"n\">real.log</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"bp\">⌉₊</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">real.log</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑⌈</span><span class=\"n\">real.log</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"bp\">⌉₊</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">9</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">geom_sum</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</code></pre></div>\n<p>I know that  this has to do with coercion in some way, but I'm not sure how to get it to work, I think I need to somehow convert it all to real numbers, any tips?</p>",
        "id": 267946313,
        "sender_full_name": "ccn",
        "timestamp": 1642116217
    },
    {
        "content": "<p>Can you give your h1, h2, h3 explicit types? It'll be clearer to you and to us what you expect them to be.</p>",
        "id": 267947087,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642116626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"367659\">@ccn</span> Just answering your question without checking what you're doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">h2'</span> <span class=\"o\">:=</span> <span class=\"n\">nat.cast_lt.mpr</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">h3</span> <span class=\"n\">h2'</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>I found this by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">h2'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⌈</span><span class=\"n\">real.log</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">real.log</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"bp\">⌉₊</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 267947755,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642117043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/267947087\">said</a>:</p>\n<blockquote>\n<p>Can you give your h1, h2, h3 explicit types? It'll be clearer to you and to us what you expect them to be.</p>\n</blockquote>\n<p>Sure I'll send it when I get home</p>",
        "id": 267949479,
        "sender_full_name": "ccn",
        "timestamp": 1642118038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/267947087\">said</a>:</p>\n<blockquote>\n<p>Can you give your h1, h2, h3 explicit types? It'll be clearer to you and to us what you expect them to be.</p>\n</blockquote>\n<p>I want to make the inequalities involving real numbers for now, would the type of that be <code>ℝ &lt; ℝ</code></p>",
        "id": 267952227,
        "sender_full_name": "ccn",
        "timestamp": 1642120023
    },
    {
        "content": "<p>The type of <code>h1</code> is whatever it is a proof of. It's displayed in the proof state you pasted earlier.</p>",
        "id": 267952614,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642120337
    },
    {
        "content": "<p>I have this proof: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_nonneg</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mul_nonneg_of_nonpos_of_nonpos</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">sub_nonpos</span><span class=\"o\">)</span> <span class=\"n\">hc</span>\n    <span class=\"bp\">...</span>  <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But I'm having trouble understanding some parts of it. Namely what the <code>(by rwa sub_nonpos)</code> is producing and how the <code>calc</code> tactic works.</p>",
        "id": 268217935,
        "sender_full_name": "ccn",
        "timestamp": 1642382236
    },
    {
        "content": "<p>To my understanding the <code>by</code> command will produce something? So it would be re-writing the current goal and outputting what that is (without changing what the actual goal is).</p>\n<p>Does the calc tactic take a chain of inequalities and then just compress it to to the final inequality (in our case <code>0 \\le a*c - b*c</code>) and then exit tactic mode?</p>",
        "id": 268218070,
        "sender_full_name": "ccn",
        "timestamp": 1642382414
    },
    {
        "content": "<p>You're right about calc, although in a technical sense it's not actually a tactic. It has a special place in leans core systems but it's not super important; but note that you can <code>calc</code> in term mode</p>",
        "id": 268218603,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642383226
    },
    {
        "content": "<p>For the <code>by</code>, lean is working outside in -  it knows what inequality you want, so it can synthesise the exact required goal for that specific term. You can see that by replacing the by with a begin end and seeing the goal there</p>",
        "id": 268218663,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642383301
    },
    {
        "content": "<p>I was recalling the different ways to define something:</p>\n<p>I thought that when we have something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>It's the same as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">double</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">lambda</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I wanted to try that out on this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I tried to do it myself, but I know something is off:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>  <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span>  <span class=\"bp\">→</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What would be the correct way of stating it?</p>",
        "id": 268319129,
        "sender_full_name": "ccn",
        "timestamp": 1642457139
    },
    {
        "content": "<p>fyi, there's a missing colon after <code>example</code> for the last one.</p>",
        "id": 268320437,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642458360
    },
    {
        "content": "<p>Haven't tested, but for the dependent types you need the pi:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span>  <span class=\"bp\">→</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 268320535,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642458448
    },
    {
        "content": "<p>Ah ok, that's making more sense, I managed to use <code>check</code> to get the type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I recall that the forall symbol is the same thing as the pi symbol under the proposition and types correspondance?</p>",
        "id": 268321145,
        "sender_full_name": "ccn",
        "timestamp": 1642458928
    },
    {
        "content": "<p>Oh, sure, forall is idiomatic here.</p>\n<p>The forall and pi symbols are completely equivalent, yielding the same type (a pi type). The pretty printer, when printing a pi type, looks to see if it's wrapping a <code>Prop</code>, and if it is the expression is printed with a forall rather than a pi symbol.</p>",
        "id": 268321616,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642459307
    },
    {
        "content": "<p>So this theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">x</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Even though the Pi isn't there is dependent just because of <code>(hf : non_decreasing f) (hg : non_decreasing g)</code> using <code>f</code> and <code>g</code> which were declared as arguments earlier?</p>",
        "id": 268323132,
        "sender_full_name": "ccn",
        "timestamp": 1642460480
    },
    {
        "content": "<p>Also if they have the same type then how come the same proof term doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 268323665,
        "sender_full_name": "ccn",
        "timestamp": 1642460993
    },
    {
        "content": "<p>The rule is simply that when you move an argument from \"before the colon\" to after, you add a <code>Π</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>(of course, using foralls instead of pis if you want). You can merge adjacent pis into a single one (that's a syntactic convenience). And, if it's non-dependent, you can use a function arrow (another syntactic convenience.)</p>",
        "id": 268323751,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642461020
    },
    {
        "content": "<p>That doesn't work because things before the colon are all automatically introduced with an implicit lambda.</p>",
        "id": 268323769,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642461044
    },
    {
        "content": "<p>You need <code>f</code> and <code>g</code> as additional arguments for the lambda after the <code>:=</code>.</p>",
        "id": 268323776,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642461056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/268323769\">said</a>:</p>\n<blockquote>\n<p>That doesn't work because things before the colon are all automatically introduced with an implicit lambda.</p>\n</blockquote>\n<p>woah that's super cool, how did you know about that?</p>",
        "id": 268324380,
        "sender_full_name": "ccn",
        "timestamp": 1642461542
    },
    {
        "content": "<p>About the cases tactic:</p>\n<p>when we try to case an element directly, like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>  <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">h</span>\n     <span class=\"n\">cases</span> <span class=\"n\">k</span>\n     <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>all the <code>k</code>s in the hypothesis gets substituted by none and some val. But, if we pattern match on (g k), then the (g k) in the hypothesis don't get substituted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">h</span>\n     <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How do I substitute the (g k) in the hypothesis in this context?</p>",
        "id": 268326401,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1642463568
    },
    {
        "content": "<p>Does \"cases v : g k\" work for you?</p>",
        "id": 268329054,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642466253
    },
    {
        "content": "<p>oh, didn't know about that hehe. Yes, thanks! It is still weird though, this difference in the behaviour of this tactic</p>",
        "id": 268329164,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1642466375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/268323776\">said</a>:</p>\n<blockquote>\n<p>You need <code>f</code> and <code>g</code> as additional arguments for the lambda after the <code>:=</code>.</p>\n</blockquote>\n<p>Ok, so I think I built this correctly now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Are the types (<code>f g hf hg x₁ x₂ h</code>) of my lambda function automatically inferred?</p>",
        "id": 268333704,
        "sender_full_name": "ccn",
        "timestamp": 1642470827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"367659\">@ccn</span> I'm not sure how I knew about the implicit lambda, but this is how many programming languages seem to work (although many don't have dependent types).</p>\n<p>Anyway, here are some examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"> λ (x : ℕ), x.succ -/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">foo'</span>\n<span class=\"c\">/-</span><span class=\"cm\"> λ (x : ℕ), x.succ -/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo''</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">foo''</span>\n<span class=\"c\">/-</span><span class=\"cm\"> λ (x : ℕ), x.succ -/</span>\n</code></pre></div>",
        "id": 268333860,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642470937
    },
    {
        "content": "<p>@ccn Yes. <code>λ x, x + 1</code> is short for <code>λ (x : _), x + 1</code>, for example, and Lean will try to fill in the the placeholder (the <code>_</code>).</p>",
        "id": 268333968,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642471008
    },
    {
        "content": "<p>So under the \"type\" way of thinking, I've showed a concrete example of an element of the correct type. In the proof way of thinking, we've found a proof for arbitrary f, g?</p>",
        "id": 268334068,
        "sender_full_name": "ccn",
        "timestamp": 1642471102
    },
    {
        "content": "<p>You can see for yourself by doing <code>#print y</code> after your theorem.</p>",
        "id": 268334070,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642471105
    },
    {
        "content": "<p>that's useful!</p>",
        "id": 268334099,
        "sender_full_name": "ccn",
        "timestamp": 1642471137
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hp</span>\n</code></pre></div>\n<p>what does <code>show p, from hp</code> do?</p>",
        "id": 268337142,
        "sender_full_name": "ccn",
        "timestamp": 1642474396
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/expressions.html#structured-proofs\">https://leanprover.github.io/reference/expressions.html#structured-proofs</a></p>",
        "id": 268339288,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642476908
    },
    {
        "content": "<p>it's the same as <code>hp</code> -- it just announces what it's going to prove before it proves it.</p>",
        "id": 268339678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642477346
    },
    {
        "content": "<p>Another model is that <code>show P, from hp</code> (in term mode) has the same effect as <code>(id hp : P)</code>, both of which are a less forgetful version of <code>(p : P)</code>.</p>",
        "id": 268619767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642635216
    },
    {
        "content": "<p>I found this calc proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">calc</span>\n  <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">|</span>   <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n                     <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">congr'</span> <span class=\"mi\">1</span> <span class=\"bp\">;</span> <span class=\"n\">ring</span>\n                     <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l'</span><span class=\"bp\">|</span>   <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">abs_add</span>\n                     <span class=\"bp\">...</span> <span class=\"bp\">≤</span>  <span class=\"n\">ε</span>                       <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>I have a question about this line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">|</span>   <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I read about what <code>rfl</code> is and apparently it is <code>eq.refl _</code> how is this different than refl? how can <code>rfl</code> work here if the two things on either side are different? Wouldn't we be using the fact that (a +b)*c = ac + bc ?</p>\n<p>And also about the line </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                     <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">congr'</span> <span class=\"mi\">1</span> <span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>I don't really understand what <code>by congr' 1 ; ring</code> is doing I know that  <code>congr'</code> tries to prove equalities between applications of functions by recursively proving the arguments are the same. But what is the function here? Also what does the <code>;</code> do in this case. </p>\n<p>Thanks.</p>",
        "id": 268991897,
        "sender_full_name": "ccn",
        "timestamp": 1642904749
    },
    {
        "content": "<p>I guess you're referring to <a href=\"https://github.com/leanprover-community/tutorials/blob/3eb9ca22d213f2644ec7bd094becde1c7786114a/src/exercises/05_sequence_limits.lean#L118\">this tutorial</a>.</p>\n<p>Tactic <code>refl</code> can be used in proof mode to prove any reflexive relation between definitionally equal terms.</p>\n<p>Term <code>rfl</code> is defined to be equal to the constructor <code>eq.refl</code> of the equality type <code>eq</code>. Whenever two terms are definitionally equal, <code>rfl</code> can construct an equality between them.</p>\n<p>In your example, <code>u</code> and <code>v</code> are functions from natural numbers to real numbers. Adding two functions is <a href=\"https://github.com/leanprover-community/mathlib/blob/f4b93c8c14da58eac47b5cc9ce45c1d5319a6275/src/data/pi.lean#L45\">defined</a> as <code>u + v = λ x, u x + v x</code>. That's definitional equality, so <code>|(u + v) n - (l + l')|</code> is definitionally equal to <code>|u n + v n - (l + l')|</code> and <code>rfl</code> can prove (construct) the equality.</p>\n<p>Tactic <code>congr' 1</code> reduces the goal from <code>|u n + v n - (l + l')| = |u n - l + (v n - l')|</code> to <code>u n + v n - (l + l') = u n - l + (v n - l')</code>. The absolute value is a unary function (see <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/abs.html\">here</a>). The semicolon applies the tactic on the right to every subgoal created by the tactic on the left. <code>congr' 1</code> created just one goal, so <code>ring</code> is used to solve that goal. Semicolon is used instead of a comma to save us from adding parentheses around <code>congr' 1 ; ring</code></p>",
        "id": 268994740,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642909530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/268994740\">said</a>:</p>\n<blockquote>\n<p>I guess you're referring to <a href=\"https://github.com/leanprover-community/tutorials/blob/3eb9ca22d213f2644ec7bd094becde1c7786114a/src/exercises/05_sequence_limits.lean#L118\">this tutorial</a>.</p>\n<p>Tactic <code>refl</code> can be used in proof mode to prove any reflexive relation between definitionally equal terms.</p>\n<p>Term <code>rfl</code> is defined to be equal to the constructor <code>eq.refl</code> of the equality type <code>eq</code>. Whenever two terms are definitionally equal, <code>rfl</code> can construct an equality between them.</p>\n<p>In your example, <code>u</code> and <code>v</code> are functions from natural numbers to real numbers. Adding two functions is <a href=\"https://github.com/leanprover-community/mathlib/blob/f4b93c8c14da58eac47b5cc9ce45c1d5319a6275/src/data/pi.lean#L45\">defined</a> as <code>u + v = λ x, u x + v x</code>. That's definitional equality, so <code>|(u + v) n - (l + l')|</code> is definitionally equal to <code>|u n + v n - (l + l')|</code> and <code>rfl</code> can prove (construct) the equality.</p>\n<p>Tactic <code>congr' 1</code> reduces the goal from <code>|u n + v n - (l + l')| = |u n - l + (v n - l')|</code> to <code>u n + v n - (l + l') = u n - l + (v n - l')</code>. The absolute value is a unary function (see <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/abs.html\">here</a>). The semicolon applies the tactic on the right to every subgoal created by the tactic on the left. <code>congr' 1</code> created just one goal, so <code>ring</code> is used to solve that goal. Semicolon is used instead of a comma to save us from adding parentheses around <code>congr' 1 ; ring</code></p>\n</blockquote>\n<p>Great explanation thank you!</p>",
        "id": 268996868,
        "sender_full_name": "ccn",
        "timestamp": 1642912819
    },
    {
        "content": "<p>I also had another related question. I am reading this proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- A sequence admits at most one limit</span>\n<span class=\"c1\">-- 0037</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- sorry</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hl</span> <span class=\"n\">hl'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_abs_sub_le_all</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hl</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hl'</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N'</span> <span class=\"n\">hN'</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">l'</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">N'</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">N'</span><span class=\"o\">)</span> <span class=\"bp\">-</span><span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">N'</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">N'</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">l'</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">abs_add</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span>  <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">N'</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">N'</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">l'</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">abs_sub_comm</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hN</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">N'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">hN'</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">N'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n  <span class=\"c1\">-- sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But I have trouble with this line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">N'</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">N'</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">l'</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">abs_add</span>\n</code></pre></div>\n<p>why aren't they just writing <code>abs_add</code> here? Doesn't apply  get used when you have a function like <code>p -&gt; q</code> and your goal is <code>q</code> so using apply you can change your goal to just <code>p</code>?</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/order/group.html#abs_add\">https://leanprover-community.github.io/mathlib_docs/algebra/order/group.html#abs_add</a></p>",
        "id": 268997143,
        "sender_full_name": "ccn",
        "timestamp": 1642913303
    },
    {
        "content": "<p>if you write just <code>abs_add</code>, it would be a type error since <code>abs_add</code> has a type like <code>\\forall x y, |x + y| &lt;= |x| + |y|</code> while the goal is <code>|a + b| &lt;= |a| + |b|</code> for some <code>a,b</code></p>",
        "id": 268998119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642914819
    },
    {
        "content": "<p>you would have to write <code>abs_add _ _</code></p>",
        "id": 268998125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642914834
    },
    {
        "content": "<p><code>by apply abs_add</code> is saying \"add underscores as necessary to make the types match up\"</p>",
        "id": 268998170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642914865
    },
    {
        "content": "<blockquote>\n<p>Doesn't <code>apply</code> get used when you have a function like <code>p -&gt; q</code> and your goal is <code>q</code> so using <code>apply</code> you can change your goal to just <code>p</code>?</p>\n</blockquote>\n<p>That's correct. Note that <code>A → B</code> is a non-dependent function type (the type of the result does not depend on the value of the argument). A more general function type is <code>Π (x : A), ϕ</code>, where <code>ϕ</code> is some expression that depends on <code>x</code>. The <code>Π</code> symbol can be written as <code>∀</code> (they are interchangeable).</p>\n<p>Term <code>abs_add</code> is a function whose type is <code>∀ x y, |x + y| ≤ |x| + |y|</code>. As its type says, <code>abs_add</code> is a function that takes two arguments <code>x</code> and <code>y</code>, and returns a term of type <code>|x + y| ≤ |x| + |y|</code>. When you perform <code>apply abs_add</code>, the <code>apply</code> tactic looks at the type of the goal and figures out what <code>x</code> and <code>y</code> should be.</p>",
        "id": 269021501,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642949171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/268991897\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                     <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">congr'</span> <span class=\"mi\">1</span> <span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If <code>congr' 1</code> leads to only one goal, it's considered to be better style to write it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                     <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>That makes is so that whenever you see <code>;</code> then you can be sure it's because more than one goal is being manipulated.</p>\n<p>Just thought I'd mention this.  (I'm not sure when this became the style. Maybe within the last two years?)</p>",
        "id": 269031365,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642961675
    },
    {
        "content": "<p>It also means you can see the proof state after <code>congr' 1</code> by positioning the cursor there</p>",
        "id": 269031577,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642961925
    },
    {
        "content": "<p>I have this proof I wrote down on paper and I'd like to try to get it into a lean proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">4</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">2003</span>\n\n<span class=\"n\">pf</span><span class=\"o\">:</span>\n\n<span class=\"mi\">2003</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">mod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"n\">because</span> <span class=\"mi\">2002</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"mi\">286</span>\n\n<span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"n\">mod</span> <span class=\"mi\">7</span> <span class=\"n\">is</span> <span class=\"n\">congruent</span> <span class=\"n\">to</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">because</span>\n\n<span class=\"mi\">0</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"mi\">3</span>  <span class=\"bp\">≡</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">so</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">repeats</span> <span class=\"n\">forever</span>\n\n<span class=\"n\">thus</span> <span class=\"mi\">4</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"n\">is</span> <span class=\"n\">congruent</span> <span class=\"n\">to</span> <span class=\"n\">one</span> <span class=\"n\">of</span> <span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"o\">}</span><span class=\"bp\">.</span>\n\n<span class=\"n\">For</span> <span class=\"n\">a</span> <span class=\"n\">contradiction</span> <span class=\"k\">assume</span> <span class=\"mi\">4</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2003</span><span class=\"o\">,</span> <span class=\"k\">then</span>\n\n<span class=\"mi\">4</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"mi\">2003</span>\n\n<span class=\"mi\">4</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span>  <span class=\"bp\">≡</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">impossible</span>\n</code></pre></div>\n<p>My main questions are how we  would show <code>2003 ≡ 1 (mod 7)</code> and how we would prove something like this:</p>\n<blockquote>\n<p>x^3 mod 7 is congruent to {0, 1, -1} because </p>\n<p>0^3 ≡ 0, 1^3 ≡ 1, 2^3 ≡ 1, 3^3 ≡ -1, 4^3  ≡ 1, 5^3 ≡ -1, 6^3 ≡ -1, 7^3 ≡ 0 </p>\n<p>so the pattern 0 1 1 -1 1 -1 -1 0 repeats forever</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 269299856,
        "sender_full_name": "ccn",
        "timestamp": 1643134716
    },
    {
        "content": "<p>Is this the answer to your first question?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.modeq</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2003</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int.modeq_iff_dvd</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269300702,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643135072
    },
    {
        "content": "<p>Yeah it does, thank you! This <code>norm_num</code> thing seems super powerful</p>",
        "id": 269302494,
        "sender_full_name": "ccn",
        "timestamp": 1643135764
    },
    {
        "content": "<p>What does it mean to normalize numerical expressions?</p>",
        "id": 269302559,
        "sender_full_name": "ccn",
        "timestamp": 1643135794
    },
    {
        "content": "<p>Some other useful tactics for this sort of thing are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dec_trivial\">docs#dec_trivial</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_cast\">tactic#norm_cast</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#push_cast\">tactic#push_cast</a> to deal with coercions from the integers to integers mod a number</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Here's how I'd show this</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">∈</span> <span class=\"o\">[(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">problem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">2003</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">2003</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2003</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">),</span>\n  <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">),</span>\n  <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ok</span> <span class=\"n\">X</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩⟩</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 269302974,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643135956
    },
    {
        "content": "<p><code>zmod</code>, like what <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, is a lot easier to work with and probably a better choice.</p>\n<p>I wanted to see what it was like continuing to work with ZMOD for the next part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">7</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">int.modeq.pow</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">int.mod_modeq</span> <span class=\"n\">x</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"n\">n</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≡</span> <span class=\"n\">n</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">7</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h1.trans</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h1.symm.trans</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">int.mod_nonneg</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">int.mod_lt_of_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">hy</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">int.modeq_iff_dvd</span><span class=\"o\">,</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">using</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"bp\">;</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269303747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643136228
    },
    {
        "content": "<p><code>interval_cases</code> seems to be rather slow in this proof. I don't have much experience with it to know whether that's expected</p>",
        "id": 269303896,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643136277
    },
    {
        "content": "<p>Thanks for the help both of you! </p>\n<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I'm trying to explore your proof but it's giving me some issues, do I need to import some things? <a href=\"/user_uploads/3121/-S_4u_YYnY6ScVgKicmP7QlW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-S_4u_YYnY6ScVgKicmP7QlW/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/-S_4u_YYnY6ScVgKicmP7QlW/image.png\"></a></div>",
        "id": 269305418,
        "sender_full_name": "ccn",
        "timestamp": 1643136926
    },
    {
        "content": "<p>Probably <code>import data.zmod.basic</code>?</p>",
        "id": 269305480,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643136947
    },
    {
        "content": "<p>I wrote this in another file with other stuff in so I'm not sure sorry!</p>",
        "id": 269305595,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643136987
    },
    {
        "content": "<p>that solved it!</p>",
        "id": 269306845,
        "sender_full_name": "ccn",
        "timestamp": 1643137443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269302974\">said</a>:</p>\n<blockquote>\n<p>Some other useful tactics for this sort of thing are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dec_trivial\">docs#dec_trivial</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_cast\">tactic#norm_cast</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#push_cast\">tactic#push_cast</a> to deal with coercions from the integers to integers mod a number</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Here's how I'd show this</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">∈</span> <span class=\"o\">[(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">problem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">2003</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">2003</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2003</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">),</span>\n  <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">),</span>\n  <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ok</span> <span class=\"n\">X</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩⟩</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p></div></div><br>\n</p>\n</blockquote>\n<p>Your link to <code>dec_trivial</code> didn't load for me, where can I read about it?</p>",
        "id": 269306954,
        "sender_full_name": "ccn",
        "timestamp": 1643137476
    },
    {
        "content": "<p>Oh right, its a funny one, both a tactic and a term, but defined via notation so there isn't a docs link.<br>\nAnyway you can read this section of tpil to learn about it <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions</a></p>",
        "id": 269307212,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643137577
    },
    {
        "content": "<p>So I'm trying to understand what's happening in this section of the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">2003</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>So far my  translation is, let's prove <code>(4 * x^3 - 7 * y^3 : zmod 7) ≠ 2003</code> so for the sake of contradiction, we assume <code> (4 * x^3 - 7 * y^3 : zmod 7) = 2003</code>, now we have to derive a contradiction.</p>\n<p>What does the <code>apply this</code> mean?</p>",
        "id": 269308253,
        "sender_full_name": "ccn",
        "timestamp": 1643138045
    },
    {
        "content": "<p>My confusion comes in because in the tactic screen everything looks the same:<br>\n<a href=\"http://\">Uploading image.png…</a></p>",
        "id": 269308494,
        "sender_full_name": "ccn",
        "timestamp": 1643138152
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">2003</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2003</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2003</span>\n</code></pre></div>",
        "id": 269308624,
        "sender_full_name": "ccn",
        "timestamp": 1643138200
    },
    {
        "content": "<p>Hmm <code>↑x ^ 3</code> has type <code>zmod 7</code></p>",
        "id": 269308740,
        "sender_full_name": "ccn",
        "timestamp": 1643138267
    },
    {
        "content": "<p>Oh so <code>this</code> is actually everything <code>(mod 7)</code> right?</p>",
        "id": 269308863,
        "sender_full_name": "ccn",
        "timestamp": 1643138310
    },
    {
        "content": "<p>Disregard above questions, I think I understand what's going on now.</p>",
        "id": 269309167,
        "sender_full_name": "ccn",
        "timestamp": 1643138459
    },
    {
        "content": "<p>I guess it's just confusing when the goal state says something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">2003</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>and you don't know it's <code>mod 7</code> until you hover</p>",
        "id": 269309325,
        "sender_full_name": "ccn",
        "timestamp": 1643138526
    },
    {
        "content": "<p>Yeah that is a bit unfortunate, I don't know any way of getting it to tell you that info other than hovering.<br>\nBut yes the idea is first to move the goal to zmod 7 <br>\nHere's another way of phrasing the same proof, maybe its simpler to see what's happening?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">∈</span> <span class=\"o\">[(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">problem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">2003</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- asume they are equal</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- then they are equal mod 7</span>\n  <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- simplifying coercions</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2003</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">),</span>\n  <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">),</span>\n  <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- more simplifying</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩⟩</span><span class=\"bp\">;</span> <span class=\"c1\">-- now we have only the 3 cases from before</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"c1\">-- h is decidably a contradiction in all cases</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269311103,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643139211
    },
    {
        "content": "<p>Ok, I'm understanding more and more of this proof, only part that's tripping me up is now this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rcases</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩⟩</span><span class=\"bp\">;</span> <span class=\"c1\">-- now we have only the 3 cases from before</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"c1\">-- h is decidably a contradiction in all case</span>\n</code></pre></div>\n<p>So I'm assuming <code>h' | h' | h' | ⟨⟨⟩⟩</code> gives us the three cases on the value of what x could be  what does the <code>⟨⟨⟩⟩</code> do though?</p>",
        "id": 269311567,
        "sender_full_name": "ccn",
        "timestamp": 1643139399
    },
    {
        "content": "<p>it gets rid of the trivial goal that <code>x</code> is in the empty list, if you delete just <code>| ⟨⟨⟩⟩</code> and the semicolon you'll see there are 4 goals, adding the <code>| ⟨⟨⟩⟩</code> back there are only 3</p>",
        "id": 269311779,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643139487
    },
    {
        "content": "<p>but the trick is I didn't write that by hand <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> I used <code>rcases? ok (x : zmod 7)</code>, which tells me the magic words to type for me</p>",
        "id": 269311873,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643139530
    },
    {
        "content": "<p>Well it tries to anyway, seems there is a bit of a bug with <code>x : zmod 7</code> but hopefully you can see it tells us almost the right thing here</p>",
        "id": 269311981,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643139595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269311779\">said</a>:</p>\n<blockquote>\n<p>it gets rid of the trivial goal that <code>x</code> is in the empty list, if you delete just <code>| ⟨⟨⟩⟩</code> and the semicolon you'll see there are 4 goals, adding the <code>| ⟨⟨⟩⟩</code> back there are only 3</p>\n</blockquote>\n<p>What does it mean for x to be in the empty list</p>",
        "id": 269312237,
        "sender_full_name": "ccn",
        "timestamp": 1643139707
    },
    {
        "content": "<p>(Maybe there should be a pretty printer option to print certain numerals in the form <code>(2007 : zmod 7)</code>? I've found this to be confusing to manipulate before.)</p>",
        "id": 269312341,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643139747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269307212\">said</a>:</p>\n<blockquote>\n<p>Oh right, its a funny one, both a tactic and a term, but defined via notation so there isn't a docs link.<br>\nAnyway you can read this section of tpil to learn about it <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions</a></p>\n</blockquote>\n<p>So <code>dec_trivial</code> is like if a computer has an algorithm to figure out if this thing is true or not</p>",
        "id": 269312771,
        "sender_full_name": "ccn",
        "timestamp": 1643139961
    },
    {
        "content": "<p>How does that differ from things like <code>linarith</code> and <code>ring</code> then?</p>",
        "id": 269312868,
        "sender_full_name": "ccn",
        "timestamp": 1643139998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269312237\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269311779\">said</a>:</p>\n<blockquote>\n<p>it gets rid of the trivial goal that <code>x</code> is in the empty list, if you delete just <code>| ⟨⟨⟩⟩</code> and the semicolon you'll see there are 4 goals, adding the <code>| ⟨⟨⟩⟩</code> back there are only 3</p>\n</blockquote>\n<p>What does it mean for x to be in the empty list</p>\n</blockquote>\n<p>Well it doesn't make sense, so we don't need to consider that case, but lean needs to be reminded of that somehow.</p>",
        "id": 269312890,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643140016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269312890\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269312237\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269311779\">said</a>:</p>\n<blockquote>\n<p>it gets rid of the trivial goal that <code>x</code> is in the empty list, if you delete just <code>| ⟨⟨⟩⟩</code> and the semicolon you'll see there are 4 goals, adding the <code>| ⟨⟨⟩⟩</code> back there are only 3</p>\n</blockquote>\n<p>What does it mean for x to be in the empty list</p>\n</blockquote>\n<p>Well it doesn't make sense, so we don't need to consider that case, but lean needs to be reminded of that somehow.</p>\n</blockquote>\n<p>How come that case is generated anyways then?</p>",
        "id": 269313118,
        "sender_full_name": "ccn",
        "timestamp": 1643140079
    },
    {
        "content": "<p>There are a few difference but the main one is that linarith and ring are allowed to fail, if a decidable algorithm exists it will always (eventually return) either a proof or a disproof.</p>",
        "id": 269313241,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643140096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269313118\">said</a>:</p>\n<blockquote>\n<p>How come that case is generated anyways then?</p>\n</blockquote>\n<p>These cases appear because the definition of <code>x^3 ∈ [(0 : zmod 7), 1, -1] </code> unfolds to <code>x^3 ∈ [(0 : zmod 7), 1] \\/ x^3 = -1</code> which is then <code>x^3 ∈ [(0 : zmod 7)] \\/ x^3 = 1 \\/ x^3 = -1</code> which becomes <code>x^3 ∈ [] \\/ x^3 = 0 \\/ x^3 = 1 \\/ x^3 = -1</code>. The empty list is treated the same as all others in the definition of being a member of a list</p>",
        "id": 269313880,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643140211
    },
    {
        "content": "<p>What is the point of the <code>revert h; dec_trivial</code> ?</p>",
        "id": 269314320,
        "sender_full_name": "ccn",
        "timestamp": 1643140430
    },
    {
        "content": "<p>expanding it out it looks like this: <a href=\"/user_uploads/3121/h_0H4YxZqP482lYRPftBIE67/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/h_0H4YxZqP482lYRPftBIE67/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/h_0H4YxZqP482lYRPftBIE67/image.png\"></a></div>",
        "id": 269314383,
        "sender_full_name": "ccn",
        "timestamp": 1643140461
    },
    {
        "content": "<p><code>dec_trivial</code> tries to prove the goal, without looking at your assumptions.</p>",
        "id": 269314612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643140516
    },
    {
        "content": "<p>Wouldn't we want to use somethign like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/succ_ne_zero\">docs#succ_ne_zero</a> ?</p>",
        "id": 269314637,
        "sender_full_name": "ccn",
        "timestamp": 1643140531
    },
    {
        "content": "<p>So any assumptions that should be used must be reverted into the goal first.</p>",
        "id": 269314638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643140531
    },
    {
        "content": "<p>I see</p>",
        "id": 269314726,
        "sender_full_name": "ccn",
        "timestamp": 1643140566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269314637\">said</a>:</p>\n<blockquote>\n<p>Wouldn't we want to use somethign like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/succ_ne_zero\">docs#succ_ne_zero</a> ?</p>\n</blockquote>\n<p>this goal is about <code>zmod 7</code> so <code>succ_ne_zero</code> won't apply I think</p>",
        "id": 269314745,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643140581
    },
    {
        "content": "<p>I haven't followed the thread. But <code>succ_ne_zero</code> doesn't hold in <code>zmod 7</code>, right? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 269314761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643140587
    },
    {
        "content": "<p>Oh right</p>",
        "id": 269314783,
        "sender_full_name": "ccn",
        "timestamp": 1643140601
    },
    {
        "content": "<p>You could use <code>mul_zero</code> and <code>zero_ne_one</code>.</p>",
        "id": 269314824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643140621
    },
    {
        "content": "<p>So that's like a more generalized version</p>",
        "id": 269314901,
        "sender_full_name": "ccn",
        "timestamp": 1643140663
    },
    {
        "content": "<p>where does the the decidability aspect come into the proving of <code>4 * 0 = 1 -&gt; false</code> ?</p>",
        "id": 269315113,
        "sender_full_name": "ccn",
        "timestamp": 1643140754
    },
    {
        "content": "<p>You can use other proof methods here, but the nice thing about decidability is that once we get to a small finite statement in the right form we can be pretty sure it will work without worrying about what other lemmas we need.</p>",
        "id": 269315291,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643140822
    },
    {
        "content": "<p>What constitutes the right form?</p>",
        "id": 269315387,
        "sender_full_name": "ccn",
        "timestamp": 1643140858
    },
    {
        "content": "<p>The lemma <code>ok</code> is where this method really shines.</p>",
        "id": 269315395,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643140862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269315387\">said</a>:</p>\n<blockquote>\n<p>What constitutes the right form?</p>\n</blockquote>\n<p>Well the main thing is what Johan says, <code>dec_trivial</code> doesn't look at your assumptions, so you have to use revert to make the goal statement false on its own.</p>",
        "id": 269315557,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643140935
    },
    {
        "content": "<p>Ok, I get the gist of it, I think it'll get more clear the more I use it</p>",
        "id": 269315682,
        "sender_full_name": "ccn",
        "timestamp": 1643141016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269315387\">said</a>:</p>\n<blockquote>\n<p>What constitutes the right form?</p>\n</blockquote>\n<p>There's are a great number of <code>decidable</code> instances in mathlib, and \"the right form\" is that one of them matches your proposition. (Though, even if one matches, that doesn't guarantee <code>dec_trivial</code> will succeed...)</p>",
        "id": 269315858,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643141100
    },
    {
        "content": "<p>If you click the dropdown under <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable\">docs#decidable</a> you can see them (not that this is very helpful -- the only point is that there are quite a few!)</p>",
        "id": 269315947,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643141146
    },
    {
        "content": "<p>thanks!</p>",
        "id": 269316425,
        "sender_full_name": "ccn",
        "timestamp": 1643141385
    },
    {
        "content": "<p>I know about the <code> ⟨⟩</code> as the anonymouse construction notation so when we prove something like there exists x in N P(x), we can just do like <code> ⟨3, Q 3⟩</code> or something like that, but I feel like it's being used in a different fashion  in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rcases</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩⟩,</span> <span class=\"c1\">-- now we have only the 3 cases from before</span>\n</code></pre></div>\n<p>what's going on there?</p>",
        "id": 269316750,
        "sender_full_name": "ccn",
        "timestamp": 1643141517
    },
    {
        "content": "<p>It's being used in the exact same way here. Its point is to construct and destruct structures. In that case, it destructs one-field structures.</p>",
        "id": 269317775,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643141912
    },
    {
        "content": "<p>I suspect one of them being <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq\">docs#eq</a></p>",
        "id": 269317812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643141930
    },
    {
        "content": "<p>Ok so this thing is a structure and we're taking it apart?<br>\n<a href=\"/user_uploads/3121/RCbG6asHvz2BklwTbq84m_6k/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RCbG6asHvz2BklwTbq84m_6k/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/RCbG6asHvz2BklwTbq84m_6k/image.png\"></a></div>",
        "id": 269318695,
        "sender_full_name": "ccn",
        "timestamp": 1643142326
    },
    {
        "content": "<p>Isn't that like a hypothesis though?</p>",
        "id": 269318728,
        "sender_full_name": "ccn",
        "timestamp": 1643142344
    },
    {
        "content": "<p>Precisely, it's an inductive!</p>",
        "id": 269318851,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643142380
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.mem\">docs#list.mem</a></p>",
        "id": 269318858,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643142385
    },
    {
        "content": "<p>The <code>... | ...</code> bit breaks the inductive part. The <code>⟨...⟩</code> bit breaks the structure part.</p>",
        "id": 269318941,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643142429
    },
    {
        "content": "<p>An inductive type is a type where you make some constructors which describe how to make new elements right?</p>",
        "id": 269318998,
        "sender_full_name": "ccn",
        "timestamp": 1643142456
    },
    {
        "content": "<p>Hmm, yes, but that's true of everything.</p>",
        "id": 269319264,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643142567
    },
    {
        "content": "<p>Take it as a pinch of salt, I'm not a type theorist, but an inductive type at your level is a primitive in the calculus of inductive constructions. Each inductive has a bunch of constructors, and constructors can refer to each other (in specific ways and the rules are complicated). Structures too are inductives, but they only have one constructor.</p>",
        "id": 269319577,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643142681
    },
    {
        "content": "<p>Ok, I'm trying to understand the usage of the <code> ... |  ...</code> and the <code>⟨...⟩</code> on this example: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>and in the docs they do <code>rcases h1 with ⟨ha, hb, hc⟩ | hd</code></p>\n<p>Why didn't they just do : <code>rcases h1 with ⟨ha, hb, hc, hd⟩</code> ?</p>",
        "id": 269320544,
        "sender_full_name": "ccn",
        "timestamp": 1643143184
    },
    {
        "content": "<p>because <code>∨</code> is an inductive with two constructors</p>",
        "id": 269320677,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643143245
    },
    {
        "content": "<p><code>|</code> is for alternatives, angle brackets are for (generalized) products. So, different constructors vs arguments to same constructor</p>",
        "id": 269320679,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643143247
    },
    {
        "content": "<p>If it helps, these are the parentheses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 269320919,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643143378
    },
    {
        "content": "<p>Why is <code>and</code> a structure but <code>or</code> is an inductive shouldn't they be the same?</p>",
        "id": 269321604,
        "sender_full_name": "ccn",
        "timestamp": 1643143707
    },
    {
        "content": "<p>If they were the same, we wouldn't need both!</p>",
        "id": 269321680,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643143749
    },
    {
        "content": "<p>Think about it. How do you build an <code>and</code>? How do you build an <code>or</code>?</p>",
        "id": 269321714,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643143764
    },
    {
        "content": "<p>two things and put them together</p>",
        "id": 269321736,
        "sender_full_name": "ccn",
        "timestamp": 1643143776
    },
    {
        "content": "<p>But they would be different right? One is true in the example of T and F and the other false?</p>",
        "id": 269321839,
        "sender_full_name": "ccn",
        "timestamp": 1643143813
    },
    {
        "content": "<p>You're thinking <a href=\"https://leanprover-community.github.io/mathlib_docs/find/band\">docs#band</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bor\">docs#bor</a></p>",
        "id": 269321878,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643143837
    },
    {
        "content": "<p>But how to make the <em>type</em> of proofs of <code>P</code> and <code>Q</code>?</p>",
        "id": 269321919,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643143857
    },
    {
        "content": "<p>by \"build\", Yael means roughly, \"how would you prove an 'and'? how would you prove an 'or'?\"</p>",
        "id": 269321944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643143868
    },
    {
        "content": "<p>and the <em>type</em> of proofs of <code>P</code> or <code>Q</code>?</p>",
        "id": 269321954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643143872
    },
    {
        "content": "<p>When we have <code>p : Prop</code> p is a proof of the proposition right?</p>",
        "id": 269322010,
        "sender_full_name": "ccn",
        "timestamp": 1643143899
    },
    {
        "content": "<p>Going back to \"why is <code>and</code> a structure\": a <code>structure</code> is an inductive with exactly one constructor</p>",
        "id": 269322147,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643143950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269321919\">said</a>:</p>\n<blockquote>\n<p>But how to make the <em>type</em> of proofs of <code>P</code> and <code>Q</code>?</p>\n</blockquote>\n<p>So you would want P and Q to have the type <code>Prop</code> and then you need <code>p: P</code> and <code>q:Q</code></p>",
        "id": 269322159,
        "sender_full_name": "ccn",
        "timestamp": 1643143963
    },
    {
        "content": "<p>(<code>structure</code> is a special case with some special notation because it's useful)</p>",
        "id": 269322195,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643143983
    },
    {
        "content": "<p>Wait, is that correct? -- zulip lagged, sorry -- <code>p : Prop</code> -- p is the <em>statement</em>, not the proof, and <code>f : p</code> <code>f</code> is a proof of <code>p</code>, right?</p>",
        "id": 269322407,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643144078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269322010\">said</a>:</p>\n<blockquote>\n<p>When we have <code>p : Prop</code> p is a proof of the proposition right?</p>\n</blockquote>\n<p>No. <code>p: Prop</code> means <code>p</code> is a proposition. Then <code>hp : p</code> means <code>hp</code> is a proof of that proposition <code>p</code>.</p>",
        "id": 269322734,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643144217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269322407\">said</a>:</p>\n<blockquote>\n<p>Wait, is that correct? -- zulip lagged, sorry -- <code>p : Prop</code> -- p is the <em>statement</em>, not the proof, and <code>f : p</code> <code>f</code> is a proof of <code>p</code>, right?</p>\n</blockquote>\n<p>Whoops sorry, read that too quick</p>",
        "id": 269322947,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643144308
    },
    {
        "content": "<p>Ok, I see. so if we have <code>p q: Prop</code> then <code>p ∧ q</code> should also be  a proposition and then <code>j : p ∧ q</code> would mean <code>j</code> is a proof of <code>p ∧ q</code> right?</p>",
        "id": 269323065,
        "sender_full_name": "ccn",
        "timestamp": 1643144367
    },
    {
        "content": "<p>If I replace the and symbol with or in above, then that would be right when we're talking about the or as well right?</p>",
        "id": 269323230,
        "sender_full_name": "ccn",
        "timestamp": 1643144415
    },
    {
        "content": "<p>Yep, those are also ways to make propositions out of other <del>ones</del> things.</p>",
        "id": 269323334,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643144442
    },
    {
        "content": "<p>So this is somehow a roadblock for us to have <code>or</code> and <code>and</code> both be inductive types?</p>",
        "id": 269323632,
        "sender_full_name": "ccn",
        "timestamp": 1643144549
    },
    {
        "content": "<p>Strictly speaking, they both are.</p>",
        "id": 269323960,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643144670
    },
    {
        "content": "<p>Don't be fooled by <code>structure</code>, they're both inductive types. They can be written like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">and</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">or</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">or</span>\n</code></pre></div>",
        "id": 269323968,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643144673
    },
    {
        "content": "<p>My question is why can't they be described in the same fashion</p>",
        "id": 269324126,
        "sender_full_name": "ccn",
        "timestamp": 1643144750
    },
    {
        "content": "<blockquote>\n<p>by \"build\", Yael means roughly, \"how would you prove an 'and'? how would you prove an 'or'?\"</p>\n</blockquote>\n<p>this question is really insightful</p>",
        "id": 269324246,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643144786
    },
    {
        "content": "<p>Isn't that the same fashion enough to you?</p>",
        "id": 269324256,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643144791
    },
    {
        "content": "<p>I guess like Yael said earlier, if they were described in exactly the same way, then <code>and</code> and <code>or</code> would be logically equivalent. That doesn't sound right, right?</p>",
        "id": 269324306,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643144815
    },
    {
        "content": "<p>I think I understand his doubt. Abstracting technicalities, <code>and</code> and <code>or</code> have different levels of restrictions to be instantiated</p>",
        "id": 269324420,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643144866
    },
    {
        "content": "<p>For an <code>and</code>, you need two things to be true in order to build it. Whereas for an <code>or</code> one true thing is enough</p>",
        "id": 269324529,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643144911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269324529\">said</a>:</p>\n<blockquote>\n<p>For an <code>and</code>, you need two things to be true in order to build it. Whereas for an <code>or</code> one true thing is enough</p>\n</blockquote>\n<p>Oh ok, this helps me think about it!</p>",
        "id": 269324582,
        "sender_full_name": "ccn",
        "timestamp": 1643144947
    },
    {
        "content": "<p>Then you need to think about the reverse for <code>rcases</code>: if you have an <code>and</code>, then you can get both things out of it, and if you have an <code>or</code>, you can get one thing, but you don't know which, so you have to be able to handle both cases.</p>",
        "id": 269324823,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643145041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269313880\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269313118\">said</a>:</p>\n<blockquote>\n<p>How come that case is generated anyways then?</p>\n</blockquote>\n<p>These cases appear because the definition of <code>x^3 ∈ [(0 : zmod 7), 1, -1] </code> unfolds to <code>x^3 ∈ [(0 : zmod 7), 1] \\/ x^3 = -1</code> which is then <code>x^3 ∈ [(0 : zmod 7)] \\/ x^3 = 1 \\/ x^3 = -1</code> which becomes <code>x^3 ∈ [] \\/ x^3 = 0 \\/ x^3 = 1 \\/ x^3 = -1</code>. The empty list is treated the same as all others in the definition of being a member of a list</p>\n</blockquote>\n<p>So because the <code>or</code> is an inductive type with multiple constructors we can use the <code> ... | ...</code> syntax to break it into different cases (but if that's true why is the first case <code>x^3 = 0</code> rather than x^3 being in the empty list?),  in any case when we deal with the empty list somehow <code>⟨⟨⟩⟩</code> solves it automatically? How is it doing that?</p>",
        "id": 269326011,
        "sender_full_name": "ccn",
        "timestamp": 1643145537
    },
    {
        "content": "<p>Are these <code>list.mem</code>'s constructors? <a href=\"/user_uploads/3121/RglAKOF3W-zMjXBWSq4SpKST/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RglAKOF3W-zMjXBWSq4SpKST/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/RglAKOF3W-zMjXBWSq4SpKST/image.png\"></a></div>",
        "id": 269326537,
        "sender_full_name": "ccn",
        "timestamp": 1643145751
    },
    {
        "content": "<p>Is it normal in the docs to not say that it's an inductive type ?</p>",
        "id": 269326598,
        "sender_full_name": "ccn",
        "timestamp": 1643145783
    },
    {
        "content": "<p>list.mem is not an inductive type</p>",
        "id": 269326627,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643145799
    },
    {
        "content": "<p>it's a function that creates an or expression (so creates an inductive type)</p>",
        "id": 269326649,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643145808
    },
    {
        "content": "<p><code>list.mem a [b1, b2]</code> is <code>a = b1 or a = b2 or false</code></p>",
        "id": 269326711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643145840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269318851\">said</a>:</p>\n<blockquote>\n<p>Precisely, it's an inductive!</p>\n</blockquote>\n<p>Wait is an inductive an instance of an inductive type?</p>",
        "id": 269326792,
        "sender_full_name": "ccn",
        "timestamp": 1643145862
    },
    {
        "content": "<p>If <code>list.mem</code> has two constructors  (like the or example)though shouldn't we be using the <code>... | ... </code>on it rather than using the <code>⟨⟩</code></p>",
        "id": 269327176,
        "sender_full_name": "ccn",
        "timestamp": 1643146004
    },
    {
        "content": "<p><code>list.mem</code> is just a recursive function, and I wouldn't call those two cases with red arrows in your image \"constructors\". I presume Yael is referring to this function's output</p>",
        "id": 269327302,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643146063
    },
    {
        "content": "<p>Ok, so somehow the <code>⟨⟨⟩⟩</code> can solve <code>list.mem (↑x ^ 3) list.nil</code>, what's happening there?</p>",
        "id": 269327526,
        "sender_full_name": "ccn",
        "timestamp": 1643146152
    },
    {
        "content": "<p><code>false</code> too is an inductive type!</p>",
        "id": 269327598,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643146201
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/4UoRCuCo_058fMjGlYgfMp0f/image.png\">image.png</a>  I thought they're supposed to have constructors?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4UoRCuCo_058fMjGlYgfMp0f/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/4UoRCuCo_058fMjGlYgfMp0f/image.png\"></a></div>",
        "id": 269327936,
        "sender_full_name": "ccn",
        "timestamp": 1643146350
    },
    {
        "content": "<p>how do you even make this thing</p>",
        "id": 269327950,
        "sender_full_name": "ccn",
        "timestamp": 1643146362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269327950\">said</a>:</p>\n<blockquote>\n<p>how do you even make this thing</p>\n</blockquote>\n<p>exactly <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 269328004,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643146388
    },
    {
        "content": "<p>oh ok, so you're allowed to have zero constructor inductive type</p>",
        "id": 269328036,
        "sender_full_name": "ccn",
        "timestamp": 1643146411
    },
    {
        "content": "<p>And you're not allowed to make something false is what that means?</p>",
        "id": 269328059,
        "sender_full_name": "ccn",
        "timestamp": 1643146429
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Jokx5-EnxkfGETgafCKYiNqm/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Jokx5-EnxkfGETgafCKYiNqm/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Jokx5-EnxkfGETgafCKYiNqm/image.png\"></a></div>",
        "id": 269328200,
        "sender_full_name": "ccn",
        "timestamp": 1643146490
    },
    {
        "content": "<p>It's even stronger! If you happen to have made a term of type <code>false</code>, then <span aria-label=\"explosion\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"explosion\">:explosion:</span></p>",
        "id": 269328241,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643146507
    },
    {
        "content": "<p>(I'm not understanding why rcases needs two levels of angle brackets for this nil case.  The first level seems to do nothing...)</p>",
        "id": 269328244,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643146508
    },
    {
        "content": "<p>it's really called the principle of explosion <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span></p>",
        "id": 269328281,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643146529
    },
    {
        "content": "<p>this is the main way you use <code>false</code>, by getting anything you want from it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">false.elim</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n</code></pre></div>",
        "id": 269328431,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643146593
    },
    {
        "content": "<p>What does it mean for true to have a constructor?</p>",
        "id": 269328468,
        "sender_full_name": "ccn",
        "timestamp": 1643146610
    },
    {
        "content": "<p>it means you can prove <code>true</code> by definition</p>",
        "id": 269328513,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643146639
    },
    {
        "content": "<p>the proof is <code>true.intro</code></p>",
        "id": 269328536,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643146649
    },
    {
        "content": "<p>So true can prove itself</p>",
        "id": 269328578,
        "sender_full_name": "ccn",
        "timestamp": 1643146669
    },
    {
        "content": "<p>and <code>false</code> having no constructors: by definition you cannot prove it</p>",
        "id": 269328668,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643146698
    },
    {
        "content": "<p>I see</p>",
        "id": 269328710,
        "sender_full_name": "ccn",
        "timestamp": 1643146722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269328578\">said</a>:</p>\n<blockquote>\n<p>So true can prove itself</p>\n</blockquote>\n<p><code>true</code> is not a proof of <code>true</code>, if that's what you mean. <code>true.intro</code> is the proof of <code>true</code></p>",
        "id": 269328722,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643146729
    },
    {
        "content": "<p>right right</p>",
        "id": 269328733,
        "sender_full_name": "ccn",
        "timestamp": 1643146740
    },
    {
        "content": "<p>Ok, if you have <code>h: a ∧b</code> then we can deconstruct it like <code>⟨ha, hb⟩</code> but  what does if you deconstructed something by using <code>⟨⟩</code> that means that whatever you deconstructed has no constructors?</p>",
        "id": 269328938,
        "sender_full_name": "ccn",
        "timestamp": 1643146848
    },
    {
        "content": "<p><code>⟨⟩</code> is the constructor that takes no parameter</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Q</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n<span class=\"k\">#check</span> <span class=\"n\">q</span> <span class=\"c1\">-- q : Q</span>\n</code></pre></div>",
        "id": 269329240,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643147021
    },
    {
        "content": "<p>Ok so the <code>⟨...⟩</code> is only used on things with only one constructor?</p>",
        "id": 269329394,
        "sender_full_name": "ccn",
        "timestamp": 1643147103
    },
    {
        "content": "<p>I'm confused with you here, @ccn. Angle brackets are for a constructor of an inductive type, but false has no constructors. Maybe this is undocumented behavior of <code>rcases</code>?</p>",
        "id": 269329410,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643147112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269329394\">said</a>:</p>\n<blockquote>\n<p>Ok so the <code>⟨...⟩</code> is only used on things with only one constructor?</p>\n</blockquote>\n<p>Hm? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <br>\nThings that have constructors can only have one constructor</p>",
        "id": 269329541,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643147187
    },
    {
        "content": "<p>Wrong, Arthur. All inductives have constructors.</p>",
        "id": 269329569,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643147209
    },
    {
        "content": "<p><code>rcases</code> lets you use angle brackets for each constructor using <code>⟨...⟩ | ⟨...⟩ | ... | ⟨...⟩</code></p>",
        "id": 269329584,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643147220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Arthur is referring to generic constructor syntax being for only one-constructor inductives</p>",
        "id": 269329623,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643147241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269329569\">said</a>:</p>\n<blockquote>\n<p>Wrong, Arthur. All inductives have constructors.</p>\n</blockquote>\n<p>But I mean, each inductive has its own constructor (and it's unique) (except for things like <code>false</code>?)</p>",
        "id": 269329628,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643147246
    },
    {
        "content": "<p>I'm confused by what you're confused about</p>",
        "id": 269329680,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643147274
    },
    {
        "content": "<p><code>⟨⟩</code> to me is just syntax for the nullary <code>⟨...⟩ | ⟨...⟩ | ... | ⟨...⟩</code>.</p>",
        "id": 269329775,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643147299
    },
    {
        "content": "<p>or the unary version with no arguments, typically for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq\">docs#eq</a></p>",
        "id": 269329847,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643147330
    },
    {
        "content": "<p>it might be \"just\" syntax for that, but it appears to be undocumented</p>",
        "id": 269329941,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643147392
    },
    {
        "content": "<p>It seems like it needs either a special case, or it's a side-effect of how <code>rcases</code> is implemented, to have <code>⟨⟩</code> work for <code>false</code></p>",
        "id": 269330081,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643147443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269329394\">said</a>:</p>\n<blockquote>\n<p>Ok so the <code>⟨...⟩</code> is only used on things with only one constructor?</p>\n</blockquote>\n<p>What got me confused was that this question seemed to raise the possibility of certain types having two or more constructors</p>",
        "id": 269330579,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643147678
    },
    {
        "content": "<p>Like <code>or</code>?</p>",
        "id": 269330626,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643147700
    },
    {
        "content": "<p><em>mindblow</em><br>\nI never thought of it this way <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 269330744,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643147768
    },
    {
        "content": "<p>Indeed, it has two distinct constructors</p>",
        "id": 269330765,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643147788
    },
    {
        "content": "<p>But then his question holds. Is it possible to instantiate <code>or</code> with two distinct anonymous constructors?</p>",
        "id": 269333347,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643149004
    },
    {
        "content": "<p>For <code>sum</code> at least, I don't see how. How would Lean know which side to put <code>a : α</code> in <code>α ⊕ α</code>? For <code>p ∨ p</code>, proof irrelevance means it doesn't matter.</p>",
        "id": 269333982,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643149232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269328244\">said</a>:</p>\n<blockquote>\n<p>(I'm not understanding why rcases needs two levels of angle brackets for this nil case.  The first level seems to do nothing...)</p>\n</blockquote>\n<p>The reason is because the general case of <code>rcases</code> destructuring is <code>⟨a⟩ | ⟨b, c⟩ | ⟨d, e, f⟩</code> (if the inductive had one argument in the first constructor, two in the second and three in the third). You can also leave off trailing arguments and they will be filled with <code>_</code> as needed. When a constructor has only one argument the angle brackets can be omitted when there is already a <code>|</code> indicating that we need to pattern match, but this leads to an ambiguity if you use an empty bracket: <code>⟨⟩ | ⟨hb⟩</code> matching <code>a \\/ b</code> could mean either <code>⟨_⟩ | ⟨b⟩</code> (bind <code>_ha : a</code> and <code>hb : b</code>) or <code>⟨⟨⟩⟩ | ⟨b⟩</code> (bind <code>_ha : a</code> and <code>hb : b</code>, and then pattern match <code>_ha : a</code> with pattern <code>⟨⟩</code>, which in this case would fail but might clear the case if <code>a</code> was, say, <code>false</code>). So the convention in this case is to use double brackets.</p>",
        "id": 269369487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643179268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269330081\">said</a>:</p>\n<blockquote>\n<p>It seems like it needs either a special case, or it's a side-effect of how <code>rcases</code> is implemented, to have <code>⟨⟩</code> work for <code>false</code></p>\n</blockquote>\n<p>There is kind of a syntactic hole for zero-ary patterns. <code>(a | b | c)</code> matches a 3-variant inductive, <code>(a | b)</code> matches 2-variant, <code>a</code> is a no op but <code>⟨a⟩</code> can be used to match a 1-variant inductive (a structure), but what would you write for a zero-variant inductive? <code>()</code>? <code>⟨⟩</code>? Nothing at all? In reality, anything other than an atomic pattern like <code>a</code> or <code>_</code> can be used to indicate that you want to keep matching, and once it hits a <code>false</code> anything beyond that is ignored. So you could use <code>(_|_)</code> or <code>⟨⟨but⟩|⟨why⟩⟩</code> if you wanted, and the convention is to use <code>⟨⟩</code> to match on a unit structure (like <code>unit</code> or <code>eq</code>) or an empty inductive like <code>false</code> or <code>empty</code>.</p>",
        "id": 269369865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643179710
    },
    {
        "content": "<p>Hey I want to prove this theorem, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_nfactltnexpnm1ngt3</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I've come up with the proof on paper by using induction on numbers greater than 3, so my base case is when n = 3, but when I try to start the proof off with <code>induction n with k IH</code> I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">nat.zero</span>\n<span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span><span class=\"bp\">!</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">case</span> <span class=\"n\">nat.succ</span>\n<span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">IH</span><span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"bp\">!</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">k.succ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">k.succ</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k.succ</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>as a tactic state which isn't really what I wanted to prove (the base case).</p>\n<p>How could I model this correctly? (eg having base case of k =3)</p>",
        "id": 269774913,
        "sender_full_name": "ccn",
        "timestamp": 1643392352
    },
    {
        "content": "<p>Do induction on <code>h₀</code>!</p>",
        "id": 269775923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643392739
    },
    {
        "content": "<p>Ah, I didn't know it could be used more generally like that. What's going on when it's not a varaible, but a hypothesis instead?</p>",
        "id": 269778414,
        "sender_full_name": "ccn",
        "timestamp": 1643393626
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.le\">docs#nat.le</a> is defined inductively, so <code>induction</code> simply follows the definition.</p>",
        "id": 269778540,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643393668
    },
    {
        "content": "<p>Thank you! <a href=\"/user_uploads/3121/4Myml8FLYC_37LJLTys4ZhAK/image.png\">image.png</a>  which part is inductive?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4Myml8FLYC_37LJLTys4ZhAK/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/4Myml8FLYC_37LJLTys4ZhAK/image.png\"></a></div>",
        "id": 269778703,
        "sender_full_name": "ccn",
        "timestamp": 1643393741
    },
    {
        "content": "<p>isn't it using <code>less_than_or_equal</code> ?</p>",
        "id": 269778860,
        "sender_full_name": "ccn",
        "timestamp": 1643393799
    },
    {
        "content": "<p>Ah, and that is recursive: <a href=\"/user_uploads/3121/KlehlWkwhVZduYj0sLaCgVXl/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KlehlWkwhVZduYj0sLaCgVXl/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/KlehlWkwhVZduYj0sLaCgVXl/image.png\"></a></div>",
        "id": 269778915,
        "sender_full_name": "ccn",
        "timestamp": 1643393820
    },
    {
        "content": "<p>One downside of induction on the <code>le</code> is that the syntax goes so wrong. Is this something we can fix? (Also: is there a reason we have <code>nat.le</code> in front of <code>nat.less_than_or_equal</code>?)</p>",
        "id": 269783051,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643395441
    },
    {
        "content": "<p>One solution is having a custom induction principle for <code>le</code> notation for <code>nat</code></p>",
        "id": 269783133,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643395471
    },
    {
        "content": "<p>Do you mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.le_induction\">docs#nat.le_induction</a>? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 269783379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643395588
    },
    {
        "content": "<p>It seems like that doesn't work with <code>induction</code>, but <code>refine</code> is fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_nfactltnexpnm1ngt3</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat.le_induction</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(@ccn That's how you can get some better syntax for your contexts.)</p>",
        "id": 269787342,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643397134
    },
    {
        "content": "<p>How would I prove something like <code>c * x^a &lt; c * (x+1)^a</code> (I'm just adding one to x, but it has to get bigger)</p>",
        "id": 269896704,
        "sender_full_name": "ccn",
        "timestamp": 1643500387
    },
    {
        "content": "<p>first get rid of the c with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_lt_mul_left\">docs#mul_lt_mul_left</a></p>",
        "id": 269896772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643500446
    },
    {
        "content": "<p>then use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_lt_pow_of_lt_left\">docs#pow_lt_pow_of_lt_left</a></p>",
        "id": 269896777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643500465
    },
    {
        "content": "<p>Thanks Mario!</p>",
        "id": 269897234,
        "sender_full_name": "ccn",
        "timestamp": 1643500980
    },
    {
        "content": "<p>What do you use to prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>linarith fails here, if I change k to be an integer instead of a natural number it works though...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">linarith</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"n\">contradiction</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 269902558,
        "sender_full_name": "ccn",
        "timestamp": 1643507734
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.sub_pos_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 269902958,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643508146
    },
    {
        "content": "<p>Thanks Patrick</p>",
        "id": 269904437,
        "sender_full_name": "ccn",
        "timestamp": 1643510144
    },
    {
        "content": "<p>I worked on this proof for a while and managed to get it this far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_nfactltnexpnm1ngt3</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h₀</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span> <span class=\"o\">:=</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">zero_le</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">kpos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nat.sub_pos_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">h₀</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpow</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">pow_lt_pow_of_lt_left</span> <span class=\"n\">h</span> <span class=\"n\">hpos</span> <span class=\"n\">kpos</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">kp1pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">k.succ</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k.succ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">kp1pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hpow</span><span class=\"o\">,</span>\n\n    <span class=\"k\">calc</span> <span class=\"n\">k.succ.factorial</span> <span class=\"bp\">=</span> <span class=\"n\">k.succ</span> <span class=\"bp\">*</span> <span class=\"n\">k.factorial</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">kp1pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h₀_ih</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k.succ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"n\">hf</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">k.succ</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n                      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">k.succ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k.succ</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"n\">rfl</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>aside from the one sorry, this proof should be correct, but I'd like to reduce the size of it somehow so it reads more like this: </p>\n<div class=\"message_inline_image\"><a href=\"https://i.imgur.com/izClHvy.jpg\"><img src=\"https://uploads.zulipusercontent.net/75cd11987b70284217568782c963168ae51eb8ec/68747470733a2f2f692e696d6775722e636f6d2f697a436c4876792e6a7067\"></a></div><p>Could anyone help me reduce the size of my proof? </p>\n<p>I mainly want to get rid of the trivial inequalities involving zero.</p>",
        "id": 269904495,
        "sender_full_name": "ccn",
        "timestamp": 1643510206
    },
    {
        "content": "<p>to prove the sorry, rewrite with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_succ\">docs#pow_succ</a> and then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.sub_add_cancel\">docs#nat.sub_add_cancel</a></p>",
        "id": 269904905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643510686
    },
    {
        "content": "<p>also don't forget to make an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> when you post theorems here</p>",
        "id": 269905030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643510863
    },
    {
        "content": "<p>(i.e. put the <code>import</code> line)</p>",
        "id": 269905036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643510881
    },
    {
        "content": "<p>Here's how I would write it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fact_lt_pow_self_sub_one</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h₀</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">h₀</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_pos</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ih</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">nat.mul_le_mul_left</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"o\">(</span><span class=\"n\">nat.le_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">nat.sub_add_cancel</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">h₀</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269905508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643511436
    },
    {
        "content": "<p>Here it is with a calc block if you're into that sort of thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">fact_lt_pow_self_sub_one</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h₀</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">h₀</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">k1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">k.succ</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"bp\">!</span>\n      <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_pos</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">k.succ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat.mul_le_mul_left</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"o\">(</span><span class=\"n\">nat.le_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">k.succ</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.sub_add_cancel</span> <span class=\"n\">k1</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269905805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643511837
    },
    {
        "content": "<p>If you prefer to do induction on <code>nat</code> instead of <code>≤</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n.factorial</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_add_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">nat.factorial</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">3</span> <span class=\"n\">nat.succ_add</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"n\">hn</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">simp_rw</span> <span class=\"n\">nat.succ_add</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.pow_lt_pow_of_lt_left</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269906893,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643513377
    },
    {
        "content": "<p>Thanks for showing me your approaches, it helps me learn a lot!</p>",
        "id": 269907745,
        "sender_full_name": "ccn",
        "timestamp": 1643514581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/269905805\">said</a>:</p>\n<blockquote>\n<p>Here it is with a calc block if you're into that sort of thing:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">fact_lt_pow_self_sub_one</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.factorial</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h₀</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">h₀</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">k1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">k.succ</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"bp\">!</span>\n      <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_pos</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">k.succ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat.mul_le_mul_left</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"o\">(</span><span class=\"n\">nat.le_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">k.succ</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.sub_add_cancel</span> <span class=\"n\">k1</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>How does the dollar sign work here?</p>",
        "id": 269908053,
        "sender_full_name": "ccn",
        "timestamp": 1643515008
    },
    {
        "content": "<p><code>$ nat.pow_le_pow_of_le_left (nat.le_succ _) _</code> is the same as <code>(nat.pow_le_pow_of_le_left (nat.le_succ _) _)</code></p>\n<p>It's just a way to write with less parentheses</p>",
        "id": 269908155,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643515184
    },
    {
        "content": "<p>Is the purpose so you can delimit in a more readable fashion?</p>",
        "id": 269908288,
        "sender_full_name": "ccn",
        "timestamp": 1643515265
    },
    {
        "content": "<p>Also note that <code>$</code> is right associative, so <code>a $ b $ c $ d</code> is equal to <code>a (b (c d))</code></p>",
        "id": 269908410,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643515424
    },
    {
        "content": "<p>Previously we were able to have this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">∈</span> <span class=\"o\">[(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">],</span>\n    <span class=\"n\">dec_trivial</span>\n</code></pre></div>\n<p>I wanted to prove another fact about modular arithmetic, but the same proof didn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">12</span><span class=\"o\">),</span>\n    <span class=\"n\">dec_trivial</span>\n</code></pre></div>\n<p>because it failed to synthesize the type class.</p>\n<p>Would I have to prove this by induction?</p>",
        "id": 270138388,
        "sender_full_name": "ccn",
        "timestamp": 1643680105
    },
    {
        "content": "<p>It's not at all obvious that the same kind of proof works. <code>4^n % 12</code> could have arbitrary non-periodic behavior</p>",
        "id": 270139944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643681166
    },
    {
        "content": "<p>In fact it doesn't, this is Fermat's little theorem, but there is definitely something to show</p>",
        "id": 270139977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643681192
    },
    {
        "content": "<p>In this case the simplest proof is induction, like you suggest, since the period is 1</p>",
        "id": 270140040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643681257
    },
    {
        "content": "<p>I'm not at a computer now, but is it even true for <code>n=0</code>?</p>",
        "id": 270141461,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643682447
    },
    {
        "content": "<p>You're right, It'll have to be for positive naturals.</p>",
        "id": 270141676,
        "sender_full_name": "ccn",
        "timestamp": 1643682625
    },
    {
        "content": "<p>Thanks for the feedback</p>",
        "id": 270141683,
        "sender_full_name": "ccn",
        "timestamp": 1643682632
    },
    {
        "content": "<p>removed</p>",
        "id": 270141847,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643682752
    },
    {
        "content": "<p>I've modified the statement to be this now: <code> ∀ (n : ℕ), (4^(n+1): zmod 12) = (4: zmod 12)</code></p>\n<p>in the induction step, I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">nat.succ</span>\n<span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">IH</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>(note these numbers are mod 12).</p>\n<p>I want to use the fact that if 4^(k+1) = 4 (mod 12), then I can multiply both sides by any constant (in this case 4). </p>\n<p>I've been looking around for the modular arithmetic docuemntation, but just found this link: <a href=\"https://leanprover-community.github.io/mathlib_docs/number_theory/modular.html\">https://leanprover-community.github.io/mathlib_docs/number_theory/modular.html</a> which doesn't seem right when I read the contents. Where could I find the theorem I need here?</p>",
        "id": 270142179,
        "sender_full_name": "ccn",
        "timestamp": 1643683052
    },
    {
        "content": "<p>Does <code>rw [pow_succ, IH]</code> get you to <code>4 * 4 = 4</code>?</p>",
        "id": 270142521,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643683302
    },
    {
        "content": "<p>Yes it does!</p>",
        "id": 270142609,
        "sender_full_name": "ccn",
        "timestamp": 1643683372
    },
    {
        "content": "<p><del>You may need an <code>succ_eq_add_one</code> as well.</del> apparently not!</p>",
        "id": 270142610,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643683373
    },
    {
        "content": "<p>so now I just need to prove <code>4 * 4 = 4</code> (mod 12) I can just use <code>norm_num</code> for something like that right?</p>",
        "id": 270142647,
        "sender_full_name": "ccn",
        "timestamp": 1643683408
    },
    {
        "content": "<p>norm_num just makes the goal <code>16 = 4</code></p>",
        "id": 270142735,
        "sender_full_name": "ccn",
        "timestamp": 1643683469
    },
    {
        "content": "<p>At this stage, <code>dec_trivial</code> might work?  Not sure...</p>",
        "id": 270142810,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643683547
    },
    {
        "content": "<p>Oh, you're right <code>dec_trivial</code> works, that works because that fact is something that could be derived from an algorithm, is that right?</p>",
        "id": 270142869,
        "sender_full_name": "ccn",
        "timestamp": 1643683576
    },
    {
        "content": "<p>I think so, but a very specific type of algorithm: brute-force.</p>",
        "id": 270142922,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643683626
    },
    {
        "content": "<p>Your previous statement was a fact about all natural numbers, while this one is about elements of zmod 12.</p>",
        "id": 270142945,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643683662
    },
    {
        "content": "<p>Which works because these are now finite things?</p>",
        "id": 270142954,
        "sender_full_name": "ccn",
        "timestamp": 1643683680
    },
    {
        "content": "<p>Brute-force works in the latter but not in the former</p>",
        "id": 270142957,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643683680
    },
    {
        "content": "<p>Thanks for the help, I'm still a little interested in the basic number theory facts though, do you think you could point me to where I could learn about them in the docs?</p>",
        "id": 270143016,
        "sender_full_name": "ccn",
        "timestamp": 1643683710
    },
    {
        "content": "<p>Things are more subtle than this and I do not really know the details, but for dec_trivial to work you should really have a finite statement, not just a trivial-looking one.</p>",
        "id": 270143051,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643683750
    },
    {
        "content": "<p>The <code>pow_succ</code> was simply manipulating powers in lean: you should \"happen to know\" that powers by natural numbers are defined inductively and therefore there should be a lemma about pow_zero and one about pow_succ (and of course others as well!).</p>",
        "id": 270143244,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643683914
    },
    {
        "content": "<p>For actually learning number theory, I am not sure, since I learned what I know before using Lean, from people and books: two activities that have changed much in recent years!  <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 270143337,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643683984
    },
    {
        "content": "<p>No problem, I managed to find a thoerem I wanted to use: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">nat.modeq_iff_dvd</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">↔</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">a</span>\n</code></pre></div>\n<p>My goal state looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">nat.modeq_iff_dvd</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">≡</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">]</span> <span class=\"bp\">↔</span> <span class=\"bp\">↑?</span><span class=\"n\">m_1</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑?</span><span class=\"n\">m_3</span> <span class=\"bp\">-</span> <span class=\"bp\">↑?</span><span class=\"n\">m_2</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n<span class=\"n\">twenty_fact</span> <span class=\"o\">:</span> <span class=\"mi\">20</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">4</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">12</span> <span class=\"bp\">∣</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span>\n</code></pre></div>\n<p>and my usage of that theorem is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">nat.modeq_iff_dvd</span> <span class=\"mi\">12</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"mi\">20</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>am I doing it wrong?</p>",
        "id": 270144467,
        "sender_full_name": "ccn",
        "timestamp": 1643684862
    },
    {
        "content": "<p>Yes, <code>n a b</code> are implicit parameters (in <code>{}</code>), so don't write them</p>",
        "id": 270144535,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643684902
    },
    {
        "content": "<p>If I leave off the arguments I get the error: <code>rewrite tactic failed, did not find instance of the pattern in the target expression\n  ↑?m_1 ∣ ↑?m_2 - ↑?m_3</code></p>",
        "id": 270144562,
        "sender_full_name": "ccn",
        "timestamp": 1643684941
    },
    {
        "content": "<p>But then, the pattern won't match because there is a <code>+</code> and not a <code>-</code></p>",
        "id": 270144580,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643684953
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 270144599,
        "sender_full_name": "ccn",
        "timestamp": 1643684964
    },
    {
        "content": "<p>So I need to turn my 20 into a - (- 20)</p>",
        "id": 270144606,
        "sender_full_name": "ccn",
        "timestamp": 1643684975
    },
    {
        "content": "<p>I tried using this: </p>\n<p><code>  rw ← neg_neg 20,</code> but it fails because it cannot synthesize the type class</p>",
        "id": 270144859,
        "sender_full_name": "ccn",
        "timestamp": 1643685170
    },
    {
        "content": "<p>```@[simp]<br>\ntheorem neg_neg {G : Type u} [add_group G] (a : G) :<br>\n--a = a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 270144871,
        "sender_full_name": "ccn",
        "timestamp": 1643685184
    },
    {
        "content": "<p>Oh right because you are using <code>nat</code></p>",
        "id": 270144914,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643685240
    },
    {
        "content": "<p>Oh ok, that's because the numbers doesn't have an additive inverse right?</p>",
        "id": 270145027,
        "sender_full_name": "ccn",
        "timestamp": 1643685352
    },
    {
        "content": "<p>Shouldn't there be a <code>neg_neg</code> that works for what I'm trying to do?</p>",
        "id": 270145093,
        "sender_full_name": "ccn",
        "timestamp": 1643685393
    },
    {
        "content": "<p>The arrows ↑ next to <code>?m_i</code> mean that whatever <code>?m_i</code> was (a natural number in this case) has been coerced into some other type (an integer in this case).  So, if you want to proceed along this path, you should change the divisibility statement about natural numbers to one about integers.</p>\n<p>[Note: I guessed the types of <code>?m_i</code> and <code>↑?m_i</code> since I've played with these objects, but the error above does not tell you what the types are.]</p>",
        "id": 270145571,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643685828
    },
    {
        "content": "<p>Ah I see, I'll keep playing with it then to get the right types</p>",
        "id": 270145875,
        "sender_full_name": "ccn",
        "timestamp": 1643686098
    },
    {
        "content": "<p>I also have a lingering doubt: if you use <code>-(-20)</code>, then -20 is not a natural number and you might run into more issues applying the result above anyway.</p>",
        "id": 270146236,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643686389
    },
    {
        "content": "<p>You're right, I've changed my twenty fact to look like <code>-20 = 4 (mod 12)</code></p>",
        "id": 270146430,
        "sender_full_name": "ccn",
        "timestamp": 1643686539
    },
    {
        "content": "<p>Does this congruence really work <em>in Lean</em>?  What is the type of -20?  ℤ?</p>",
        "id": 270146692,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643686735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270146692\">said</a>:</p>\n<blockquote>\n<p>Does this congruence really work <em>in Lean</em>?  What is the type of -20?  ℤ?</p>\n</blockquote>\n<p>This is what my proof is looking like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_12dvd4expnp1p20</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">12</span> <span class=\"bp\">∣</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"n\">zmod</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">IH</span><span class=\"o\">],</span>\n      <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">twenty_fact</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">12</span><span class=\"o\">),</span>\n    <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">int.coe_nat_dvd</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- rw ← (nat.modeq_iff_dvd),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270147556,
        "sender_full_name": "ccn",
        "timestamp": 1643687367
    },
    {
        "content": "<p>I think i'm having trouble because I forgot that everything has a different type in lean</p>",
        "id": 270147654,
        "sender_full_name": "ccn",
        "timestamp": 1643687410
    },
    {
        "content": "<p>What do you think the best way forward would be?</p>",
        "id": 270147660,
        "sender_full_name": "ccn",
        "timestamp": 1643687418
    },
    {
        "content": "<p>I was trying to use <code> rw ← int.coe_nat_dvd,</code> but I think that's making things harder to prove</p>",
        "id": 270147704,
        "sender_full_name": "ccn",
        "timestamp": 1643687461
    },
    {
        "content": "<p>I also think I'm confused about the difference between <code>MOD</code> and <code>zmod</code></p>",
        "id": 270148603,
        "sender_full_name": "ccn",
        "timestamp": 1643688097
    },
    {
        "content": "<p>I have a goal state of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">main</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">twenty_fact</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">20</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>where the arrow means that they both have type <code>zmod 12</code>, I want to push the cast through, by using <code>push_cast</code>, but when I do that the goal state changes to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>How can I do this properly?</p>",
        "id": 270166198,
        "sender_full_name": "ccn",
        "timestamp": 1643702912
    },
    {
        "content": "<p>Below is my solution, in case you are interested!</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.algebra</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">four_eq_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">induction_12dvd4expnp1p20</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">12</span> <span class=\"bp\">∣</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">show</span>  <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mul_dvd_mul_left</span> <span class=\"mi\">4</span> <span class=\"o\">((</span><span class=\"n\">zmod.nat_coe_zmod_eq_zero_iff_dvd</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">four_eq_one</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 270167223,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643703603
    },
    {
        "content": "<p>Oh very nice Damiano! I was working on something but it was longer. Do we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>? I was wondering whether it was easier or harder to avoid zmod completely.</p>",
        "id": 270167608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643703769
    },
    {
        "content": "<p>Cool, I seemed to have tunnel visioned on getting the coe stuff to work instead of trying a new approach, thanks for new angles on the question</p>",
        "id": 270167731,
        "sender_full_name": "ccn",
        "timestamp": 1643703834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270167608\">said</a>:</p>\n<blockquote>\n<p>Oh very nice Damiano! I was working on something but it was longer. Do we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>? I was wondering whether it was easier or harder to avoid zmod completely.</p>\n</blockquote>\n<p>If that's not in the mathlib, I could help add it in</p>",
        "id": 270168061,
        "sender_full_name": "ccn",
        "timestamp": 1643703997
    },
    {
        "content": "<p>My solution using it:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dvd_of_dvd_add_mul_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">induction_12dvd4expnp1p20</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">12</span> <span class=\"bp\">∣</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">dvd_of_dvd_add_mul_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">dvd_mul_of_dvd_right</span> <span class=\"n\">IH</span> <span class=\"mi\">4</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 270168079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643704015
    },
    {
        "content": "<p>ok, so this would complete it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dvd_of_dvd_add_mul_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">nat.dvd_add_left</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dvd_mul_right</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270168656,
        "sender_full_name": "ccn",
        "timestamp": 1643704383
    },
    {
        "content": "<p>Should I add it to mathlib?</p>",
        "id": 270168680,
        "sender_full_name": "ccn",
        "timestamp": 1643704405
    },
    {
        "content": "<p>You could try! I don't know the naming convention well enough to know whether it's <code>left</code> or <code>right</code>, and it should perhaps be an iff. We might have it; I just couldn't find it. Nice proof!</p>",
        "id": 270168772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643704448
    },
    {
        "content": "<p>I guess people might say that it's just an easy combination of two existing lemmas</p>",
        "id": 270168834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643704493
    },
    {
        "content": "<p>After studying your proofs the biggest thing that caused me trouble was involving modular arithmetic because I have trouble with coe stuff</p>",
        "id": 270168999,
        "sender_full_name": "ccn",
        "timestamp": 1643704558
    },
    {
        "content": "<p>No one seems to have mentioned <code>norm_fin</code> yet. It should be able to prove <code>(16 : zmod 12) = 4</code></p>",
        "id": 270169126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643704598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270168772\">said</a>:</p>\n<blockquote>\n<p>You could try! I don't know the naming convention well enough to know whether it's <code>left</code> or <code>right</code>, and it should perhaps be an iff. We might have it; I just couldn't find it. Nice proof!</p>\n</blockquote>\n<p>What's the procedure for checking? I've looked here so far and I didn't see it on a first look over: <a href=\"https://leanprover-community.github.io/mathlib_docs/data/nat/modeq.html#nat.modeq\">https://leanprover-community.github.io/mathlib_docs/data/nat/modeq.html#nat.modeq</a></p>",
        "id": 270169219,
        "sender_full_name": "ccn",
        "timestamp": 1643704639
    },
    {
        "content": "<p>Here's a proof which doesn't use it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_12dvd4expnp1p20</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">12</span> <span class=\"bp\">∣</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.dvd_add_left</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">12</span> <span class=\"bp\">∣</span> <span class=\"mi\">60</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">dvd_mul_of_dvd_right</span> <span class=\"n\">IH</span> <span class=\"mi\">4</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>inspired by your <code>nat.dvd_add_left</code> proof.</p>",
        "id": 270169414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643704703
    },
    {
        "content": "<p>actually that's a lie, it only works on <code>fin</code> not <code>zmod</code>. Alternatively you can rewrite the goal to <code>16 % 12 = 4 % 12</code> and use <code>norm_num</code></p>",
        "id": 270169439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643704713
    },
    {
        "content": "<p>Damiano's is still shorter though :-)</p>",
        "id": 270169546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643704759
    },
    {
        "content": "<p>So in Damiano's proof somehow we used the fact : <code>(4 : zmod 3) = 1</code> so that <code>4^n</code> would simplify to <code>1^n</code> ?  which in-turn became just 1 ?</p>",
        "id": 270169733,
        "sender_full_name": "ccn",
        "timestamp": 1643704848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"367659\">@ccn</span>  My line of reasoning was that I always try to get common factors out of the way from congruences and you had a 4 dividing everything in sight.  Once that is gone, you are really trying to prove that <code>4^n = 1 mod 3</code>, which is one step away from <code>4 = 1 mod 3</code>, which is so trivial that even <code>rfl</code> solves it!</p>\n<p>I hope that the thought process helps!</p>",
        "id": 270169778,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643704876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270169778\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span>  My line of reasoning was that I always try to get common factors out of the way from congruences and you had a 4 dividing everything in sight.  Once that is gone, you are really trying to prove that <code>4^n = 1 mod 3</code>, which is one step away from <code>4 = 1 mod 3</code>, which is so trivial that even <code>rfl</code> solves it!</p>\n<p>I hope that the thought process helps!</p>\n</blockquote>\n<p>It does help! for the proof of <code>4^n = 1 mod 3</code> that probably has induction in it somewhere right?</p>",
        "id": 270169832,
        "sender_full_name": "ccn",
        "timestamp": 1643704912
    },
    {
        "content": "<p>But <code>rfl</code> is able to do it?</p>",
        "id": 270169862,
        "sender_full_name": "ccn",
        "timestamp": 1643704922
    },
    {
        "content": "<p>You're going slightly the wrong way. The point is that<code>simp</code> knows that <code>1^n=1</code>. The route is 4^n=1^n=1, not 4^n=4=1.</p>",
        "id": 270169914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643704958
    },
    {
        "content": "<p>There are hidden coercions in the statement: you use the lemma to see that <code>4^n=1^n</code>, after that simp uses that <code>1^n=1</code>.</p>",
        "id": 270169984,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643705018
    },
    {
        "content": "<p>If you see, in the <code>simpa</code> I explicitly told the simplifier that <code>four_eq_one</code> was a useful lemma.  It turned out that I was right!  <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 270170173,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643705122
    },
    {
        "content": "<p>Can't that be changed to <code>simp</code>? (edit: apparently not!)</p>",
        "id": 270170245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643705162
    },
    {
        "content": "<p>(btw, the <code>a</code> in <code>simpa</code> takes care of another <code>rfl</code>: the proof that <code>1 + 5 = 0 mod 3</code>.)</p>",
        "id": 270170338,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643705209
    },
    {
        "content": "<p>Also, I recently learned that if you use <code>simpa</code> where <code>simp</code> suffices, you get an error.</p>",
        "id": 270170496,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643705297
    },
    {
        "content": "<p>Oh I see -- you're using the fact that <code>simpa</code> tries <code>refl</code> whereas <code>simp</code> doesn't? Or tries it harder, or something?</p>",
        "id": 270170579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643705352
    },
    {
        "content": "<p>To beat this problem to death, the strategy seems to be that the human makes all the variable useless, and then a combination of <code>simp</code> and <code>rfl</code> should solve your problems.</p>",
        "id": 270170638,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643705398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270170579\">said</a>:</p>\n<blockquote>\n<p>Oh I see -- you're using the fact that <code>simpa</code> tries <code>refl</code> whereas <code>simp</code> doesn't? Or tries it harder, or something?</p>\n</blockquote>\n<p>I do not really know what <code>simpa</code> does in this case that <code>simp</code> does not, but it seems to try some form of <code>rfl</code> after doing its simplifications.</p>",
        "id": 270170819,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643705455
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p><code>simp</code> knows <code>eq_self_iff_true</code> but <code>eq_self_iff_true</code> won't trigger on <code>X = ℕ</code> because <code>simp</code> won't unfold semireducible definitions. I only learnt this recently (when writing my course notes). We all say \"rw works up to syntactic equality\" but that's not quite true. <code>rw</code> will unfold reducible definitions but will leave semireducible ones alone, and <code>simp</code> inherits this behaviour. The default reducibility of a definition is semireducible. The <code>erw</code> tactic will unfold semireducible definitions too.</p>",
        "id": 270171383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643705685
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"c1\">-- fails lol</span>\n</code></pre></div>\n<p>Is that a bug in <code>simpa</code>??</p>",
        "id": 270171477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643705744
    },
    {
        "content": "<p>what are you guys doing to my baby</p>",
        "id": 270171535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643705764
    },
    {
        "content": "<p>that's not how you use <code>simpa</code></p>",
        "id": 270171550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643705769
    },
    {
        "content": "<p>That was why I was so surprised Damiano was using it in the first place!</p>",
        "id": 270171579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643705789
    },
    {
        "content": "<p>It's not at all the intended usage; he was using it to do <code>simp, refl</code></p>",
        "id": 270171615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643705806
    },
    {
        "content": "<p>aha,<code>simpa</code> uses <code>assumption &lt;|&gt; trivial</code> once it's done its simp work</p>",
        "id": 270171874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643705952
    },
    {
        "content": "<p>and <code>trivial</code> does several things, including <code>refl</code></p>",
        "id": 270171910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643705975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> the point about <code>simpa</code> is that it's supposed to reduce the goal to an (also simplified) assumption. That's why I initially said \"doesn't simp work?\" because as far as I could see there were no assumptions!</p>",
        "id": 270172104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643706032
    },
    {
        "content": "<p>I think <code>simpa</code> should be more aggressive about complaining when you aren't using it on an assumption</p>",
        "id": 270172237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643706113
    },
    {
        "content": "<p>You should just write <code>simp; trivial</code> if that's what you want</p>",
        "id": 270172310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643706138
    },
    {
        "content": "<p>maybe rename it to <code>simpA</code> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 270172312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643706140
    },
    {
        "content": "<p>Ok, I did not know that I was abusing the <code>a</code> in <code>simpa</code> so much!  <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 270172359,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643706166
    },
    {
        "content": "<p><code>A</code> for Aggressively Asserting Assumptions.</p>",
        "id": 270172378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643706174
    },
    {
        "content": "<p>well it can do like <code>ring</code> and succeed but passive-aggressively say <code>Try this: simp; trivial</code>, knowing that you can't check in a proof that prints stuff to mathlib</p>",
        "id": 270172457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643706202
    },
    {
        "content": "<p>If I had started with this proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_12dvd4expnp1p20</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">12</span> <span class=\"bp\">∣</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"o\">:=</span>\n<span class=\"n\">dvd_trans</span> <span class=\"o\">(</span><span class=\"n\">mul_dvd_mul_left</span> <span class=\"mi\">4</span> <span class=\"o\">((</span><span class=\"n\">zmod.nat_coe_zmod_eq_zero_iff_dvd</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">four_eq_one</span><span class=\"o\">])))</span> <span class=\"n\">dvd_rfl</span>\n</code></pre></div>\n<p>people may not have noticed the rough behaviour on <code>simpa</code>. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 270172484,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643706215
    },
    {
        "content": "<p>I've used <code>simpa</code> for <code>simp; refl</code> a lot too. It's very handy</p>",
        "id": 270172581,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643706253
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_12dvd4expnp1p20</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">12</span> <span class=\"bp\">∣</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"o\">:=</span>\n<span class=\"n\">dvd_trans</span> <span class=\"o\">(</span><span class=\"n\">mul_dvd_mul_left</span> <span class=\"mi\">4</span> <span class=\"o\">((</span><span class=\"n\">zmod.nat_coe_zmod_eq_zero_iff_dvd</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">four_eq_one</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span><span class=\"o\">)))</span> <span class=\"n\">dvd_rfl</span>\n</code></pre></div>\n<p>no <code>simpa</code>s were abused in this proof.</p>",
        "id": 270172864,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643706363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270169219\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270168772\">said</a>:</p>\n<blockquote>\n<p>You could try! I don't know the naming convention well enough to know whether it's <code>left</code> or <code>right</code>, and it should perhaps be an iff. We might have it; I just couldn't find it. Nice proof!</p>\n</blockquote>\n<p>What's the procedure for checking? I've looked here so far and I didn't see it on a first look over: <a href=\"https://leanprover-community.github.io/mathlib_docs/data/nat/modeq.html#nat.modeq\">https://leanprover-community.github.io/mathlib_docs/data/nat/modeq.html#nat.modeq</a></p>\n</blockquote>\n<p>see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coprime_add_mul_right_right\">docs#coprime_add_mul_right_right</a> for an example of how we did naming conventions for something similar in the past. In that situation there were 8 different lemma possibilities,  here there should only be 4.</p>",
        "id": 270173321,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1643706521
    },
    {
        "content": "<p>Maybe <code>simp</code> should try <code>refl</code> at the end.</p>",
        "id": 270176688,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643708077
    },
    {
        "content": "<p><del>If <code>simp</code> tried <code>refl</code> would the proof above no longer need the call to <code>four_eq_one</code>?</del><br>\nI tried and removing the explicit <code>four_eq_one</code> does not make <code>simp; refl</code> work (nor <code>simp; trivial</code>).</p>",
        "id": 270180688,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643709824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270176688\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>simp</code> should try <code>refl</code> at the end.</p>\n</blockquote>\n<p>Wouldn't this break all the proofs that end with <code>simp, refl</code>?</p>",
        "id": 270182403,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643710505
    },
    {
        "content": "<p>It certainly would, but I think that the question implicitly suggested to fix all the resulting issues.  It would be quite a major golf!</p>",
        "id": 270184097,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643711206
    },
    {
        "content": "<p>Lower bound:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rg</span> <span class=\"s2\">\"simp[,;] refl\"</span> <span class=\"bp\">|</span> <span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span>\n<span class=\"mi\">91</span>\n</code></pre></div>\n<p>This doesn't count proofs of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span>\n</code></pre></div>\n<p>that span 2 lines.</p>",
        "id": 270184266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643711286
    },
    {
        "content": "<p>Nor the ones that have <code>simp [lemmas][,;] refl</code> <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 270184338,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643711336
    },
    {
        "content": "<p>Also, I imagine that the abusive <code>simpa</code> proofs would fail, since <code>simp</code> would have worked...</p>",
        "id": 270184396,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643711376
    },
    {
        "content": "<p>Maybe <code>simp</code> should try <code>refl</code> at the end, and then if it closes the goal, monkeypatch <code>refl</code> into a noop so that it is ignored <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 270184781,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643711561
    },
    {
        "content": "<p>(just kidding of course)</p>",
        "id": 270184922,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643711640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270176688\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>simp</code> should try <code>refl</code> at the end.</p>\n</blockquote>\n<p>Or at least <code>refl</code> with reducible transparency (like how <code>rw</code> works, I think?)<br>\nI always find it funny when <code>simp</code> simplifies some complicated goal down to <code>0 = 0</code> or something and then gets stuck</p>",
        "id": 270188102,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643713013
    },
    {
        "content": "<p><code>simp</code> should call <code>eq_self_iff_true</code> on things like <code>a = a</code> and solve it, which I suppose is quite similar to calling <code>refl</code> with redicible transparency?</p>",
        "id": 270188952,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1643713398
    },
    {
        "content": "<p>What does <code>simp [rfl]</code> do?</p>",
        "id": 270191977,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643714667
    },
    {
        "content": "<p>Note that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>works.  Squeezing you obtain <code>simp only [eq_self_iff_true]</code>.  So, I think that <code>simp</code> already uses <code>eq_self_iff_true</code>, at least sometimes.</p>",
        "id": 270206735,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643721330
    },
    {
        "content": "<p>In the specific example at hand, without the extra <code>refl</code>, the outcome of <code>simp</code> is to leave <code>1 + 5 = 0</code>, where all the numbers are in <code>zmod 3</code>.</p>",
        "id": 270206874,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643721398
    },
    {
        "content": "<p>It shouldn't do refl automatically. In some cases, those refl can be really heavy. Would you imagine it does refl after each simp rewrite, or just at the end? Even if it's just at the end, that means when I'm developing a proof and want to do the simp to squeeze_simp to simp only development step in the middle of a proof, I might trigger really expensive refls that fail anyway.</p>",
        "id": 270221418,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643726586
    },
    {
        "content": "<p>I agree <code>simp</code> shouldn't do a \"full\" <code>refl</code>. Am I misremembering which kind of triviality <code>simp</code> likes to get stuck on?</p>",
        "id": 270223635,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643727375
    },
    {
        "content": "<p>Hi, I've written a formalisation of avl trees and I am now trying to build some basic theorems for it. My first step was trying to show that well formed trees are closed under all of the given definitions of operations, but this requires quite specific case analysis, so I've ended up with some quite complex tactic states (which lean helps with)! <br>\nMy issue is now that lean fails to apply the rw tactic in one case and I can't  seem to work out why. The relevant parts of the tactic state are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">t_val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">t_right_left</span> <span class=\"o\">:</span> <span class=\"n\">avlnode</span> <span class=\"n\">α</span>\n<span class=\"n\">t_right_val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">t_right_right</span> <span class=\"o\">:</span> <span class=\"n\">avlnode</span> <span class=\"n\">α</span>\n\n<span class=\"bp\">⊢</span> <span class=\"o\">(((</span><span class=\"n\">nil.node</span> <span class=\"n\">val</span> <span class=\"n\">nil</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">t_val</span> <span class=\"n\">t_right_left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">t_right_val</span> <span class=\"n\">t_right_right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">balance_factor</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Relevant definitions are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">avlnode</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>                                               <span class=\"o\">:</span> <span class=\"n\">avlnode</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">avlnode</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">avlnode</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">avlnode</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> gives the balance factor of a node -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">balance_factor</span> <span class=\"o\">:</span> <span class=\"n\">avlnode</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>              <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">nil</span> <span class=\"n\">_</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">nil</span> <span class=\"n\">_</span> <span class=\"n\">r</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">l</span> <span class=\"n\">_</span> <span class=\"n\">nil</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">l</span> <span class=\"n\">_</span> <span class=\"n\">r</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">avlnode</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>              <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">nil</span> <span class=\"n\">_</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">l</span> <span class=\"n\">_</span> <span class=\"n\">r</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">int.max</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>And the tactic that lean fails on is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">balance_factor</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Any help would be much appreciated!!</p>",
        "id": 270368849,
        "sender_full_name": "Henry Pearson",
        "timestamp": 1643801050
    },
    {
        "content": "<p>It's a bit hard to parse your goal (a good <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would help a lot!) but I suspect that the problem is that <code>balance_factor</code> isn't quite compiled to the code you expect. Namely, I assume you want to use the rewrite rule <code>balance_factor (node l _ r)     := (depth r) - (depth l)</code>, right?</p>",
        "id": 270369365,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643801329
    },
    {
        "content": "<p>However, the equation compiler will actually split <code>r</code> into a <code>nil</code> case (for the 4th line) and a <code>node</code> case (for the 5th line). So instead of <code>rw balance_factor</code> you should write <code>cases t_right_right; rw balance_factor</code>.</p>",
        "id": 270369636,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643801503
    },
    {
        "content": "<p>Ah I see - that is very helpful!!</p>",
        "id": 270369952,
        "sender_full_name": "Henry Pearson",
        "timestamp": 1643801669
    },
    {
        "content": "<p>Thanks a lot</p>",
        "id": 270369961,
        "sender_full_name": "Henry Pearson",
        "timestamp": 1643801675
    },
    {
        "content": "<p>How can I do cases on if a number is irrational or not?</p>",
        "id": 270448725,
        "sender_full_name": "ccn",
        "timestamp": 1643832145
    },
    {
        "content": "<p><code>by_cases irrational x</code></p>",
        "id": 270450236,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643832802
    },
    {
        "content": "<p>It might be convenient to have a variant of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/irrational_iff_ne_rational\">docs#irrational_iff_ne_rational</a> for when a number is not irrational. That way you could more quickly split on this sort of <code>or</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">irrational_or_rational</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">irrational</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">classical.em</span> <span class=\"o\">(</span><span class=\"n\">irrational</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">irrational_iff_ne_rational</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270450893,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643833094
    },
    {
        "content": "<p>Yeah, I'm a bit disappointed to see that <code>irrational</code> is already the negation.</p>",
        "id": 270451272,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643833294
    },
    {
        "content": "<p>I was trying to use the <code>by_cases irrational x</code> in the following proof, it works out but I'm having trouble proving the two different cases in it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">algebra_others_exirrpowirrrat</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">irrational</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">irrational</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">irrational</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">sqrt_2</span> <span class=\"o\">:=</span>  <span class=\"n\">real.sqrt</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">irrational</span> <span class=\"o\">(</span><span class=\"n\">sqrt_2</span><span class=\"bp\">^</span><span class=\"n\">sqrt_2</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">irrational</span> <span class=\"o\">((</span><span class=\"n\">sqrt_2</span><span class=\"bp\">^</span><span class=\"n\">sqrt_2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">sqrt_2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨(</span><span class=\"n\">sqrt_2</span><span class=\"bp\">^</span><span class=\"n\">sqrt_2</span><span class=\"o\">),</span> <span class=\"n\">sqrt_2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">irrational_sqrt_two</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n     <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">sqrt_2</span><span class=\"o\">,</span> <span class=\"n\">sqrt_2</span><span class=\"o\">,</span> <span class=\"n\">irrational_sqrt_two</span><span class=\"o\">,</span> <span class=\"n\">irrational_sqrt_two</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Can someone help me get this to work?</p>",
        "id": 270489079,
        "sender_full_name": "ccn",
        "timestamp": 1643853147
    },
    {
        "content": "<p>Use <code>let sqrt_2</code>, not <code>have sqrt_2</code></p>",
        "id": 270492942,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643856214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270492942\">said</a>:</p>\n<blockquote>\n<p>Use <code>let sqrt_2</code>, not <code>have sqrt_2</code></p>\n</blockquote>\n<p>with the proof of <code>((sqrt_2^sqrt_2)^sqrt_2)</code> I tried using <code>dec_trivial</code> and <code>norm_num</code> to no avail. The proof for that really is that that whole thing will simplify to the number 2, which is not irrational. How would we prove that then?</p>",
        "id": 270494706,
        "sender_full_name": "ccn",
        "timestamp": 1643857790
    },
    {
        "content": "<p>you should rewrite <code>((sqrt_2^sqrt_2)^sqrt_2) = sqrt_2^(sqrt_2*sqrt_2)</code> and then use the theorem that says <code>sqrt_2*sqrt_2 = 2</code></p>",
        "id": 270495123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643858200
    },
    {
        "content": "<p>the <code>let</code> is probably doing no favors here, you should just <code>open real</code> instead if you find it too verbose</p>",
        "id": 270495138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643858227
    },
    {
        "content": "<p>Is there a more direct way to prove <code>foo</code> here?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.irrational</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert_to</span> <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">transitivity</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">algebra_others_exirrpowirrrat</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">irrational</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">irrational</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">irrational</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">irrational</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">irrational</span> <span class=\"o\">((</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">irrational_iff_ne_rational</span><span class=\"o\">],</span>\n      <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n      <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">real.sqrt_nonneg</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨(</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">irrational_sqrt_two</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">irrational_sqrt_two</span><span class=\"o\">,</span> <span class=\"n\">irrational_sqrt_two</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">````</span>\n</code></pre></div>\n</div></div>",
        "id": 270496211,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643859414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270496211\">said</a>:</p>\n<blockquote>\n<p>Is there a more direct way to prove <code>foo</code> here?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.irrational</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert_to</span> <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">transitivity</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">algebra_others_exirrpowirrrat</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">irrational</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">irrational</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">irrational</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">irrational</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">irrational</span> <span class=\"o\">((</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">irrational_iff_ne_rational</span><span class=\"o\">],</span>\n      <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n      <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">real.sqrt_nonneg</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨(</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">irrational_sqrt_two</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">irrational_sqrt_two</span><span class=\"o\">,</span> <span class=\"n\">irrational_sqrt_two</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>What if we first simplify the stack of powers to 2, then use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">int.not_irrational</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">¬</span><span class=\"n\">irrational</span> <span class=\"bp\">↑</span><span class=\"n\">m</span>\n</code></pre></div>",
        "id": 270496530,
        "sender_full_name": "ccn",
        "timestamp": 1643859738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270495123\">said</a>:</p>\n<blockquote>\n<p>you should rewrite <code>((sqrt_2^sqrt_2)^sqrt_2) = sqrt_2^(sqrt_2*sqrt_2)</code> and then use the theorem that says <code>sqrt_2*sqrt_2 = 2</code></p>\n</blockquote>\n<p>Do you know the lame of the lemma  for that first part, I've been having trouble finding it</p>",
        "id": 270497330,
        "sender_full_name": "ccn",
        "timestamp": 1643860633
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.rpow_mul\">docs#real.rpow_mul</a></p>",
        "id": 270497569,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643860832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270497569\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.rpow_mul\">docs#real.rpow_mul</a></p>\n</blockquote>\n<p>I'm working on that now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">basic</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">irrational</span> <span class=\"o\">((</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">rpow_mul</span> <span class=\"o\">(</span><span class=\"n\">sqrt_nonneg</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">sqrt_mul</span> <span class=\"n\">basic</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">sqrt_mul_self</span> <span class=\"n\">basic</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">sq_sqrt</span> <span class=\"n\">basic</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>that last rw tactic doesn't seem to work though, and I can't figure out why, it gives me this goal state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">irrational</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 270498583,
        "sender_full_name": "ccn",
        "timestamp": 1643861860
    },
    {
        "content": "<p>That's where the <code>foo</code> lemma I was asking about came from -- I'd run into the same issue.</p>",
        "id": 270498680,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643861954
    },
    {
        "content": "<p>Ohh ok.</p>",
        "id": 270498697,
        "sender_full_name": "ccn",
        "timestamp": 1643861978
    },
    {
        "content": "<p>The exponent needs to be a nat for that lemma, but it's a real</p>",
        "id": 270498703,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643861981
    },
    {
        "content": "<p>Can't we make it into one?</p>",
        "id": 270498710,
        "sender_full_name": "ccn",
        "timestamp": 1643861992
    },
    {
        "content": "<p>That's what I did in the <code>foo</code> lemma, and my question is whether there's a simpler way to do this.</p>",
        "id": 270498778,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643862031
    },
    {
        "content": "<p>It's likely I just don't know my way around Lean's reals, but maybe it's a random oversight that there's no direct lemma yet.</p>",
        "id": 270498822,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643862101
    },
    {
        "content": "<p>I get your reasoning more now</p>",
        "id": 270498902,
        "sender_full_name": "ccn",
        "timestamp": 1643862166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270498703\">said</a>:</p>\n<blockquote>\n<p>The exponent needs to be a nat for that lemma, but it's a real</p>\n</blockquote>\n<p>I learned how to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">basic_2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>after that, we can use the lemma. It feels hacky but it does work.</p>",
        "id": 270500184,
        "sender_full_name": "ccn",
        "timestamp": 1643863507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270496211\">said</a>:</p>\n<blockquote>\n<p>Is there a more direct way to prove <code>foo</code> here?</p>\n</blockquote>\n<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">sq_sqrt</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270517136,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643878705
    },
    {
        "content": "<p>I am learning lean and trying to prove the associativity of <code>++</code> on <code>List</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">zs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">a</span><span class=\"o\">):</span>\n  <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"n\">zs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">zs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Now lean complains that it cannot do the rewrite:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"n\">zs</span><span class=\"o\">)</span>\n<span class=\"n\">case</span> <span class=\"n\">cons</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.246</span>\n<span class=\"n\">ys</span> <span class=\"n\">zs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">a</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">a</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"n\">zs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"n\">zs</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"n\">zs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"n\">zs</span>\n</code></pre></div>\n<p>Although my understanding is that <code>t ++ (ys ++ zs) </code> can be rewritten in the goal. Am I missing something here?</p>",
        "id": 270549140,
        "sender_full_name": "Hossam Karim",
        "timestamp": 1643895270
    },
    {
        "content": "<p>I think the brackets aren't where you think they are, if you hover over the info-view in vscode the highlighting will show that the goal is really like <code>⊢ (h :: t) ++ (ys ++ zs) = (h :: t) ++ ys ++ zs</code></p>",
        "id": 270549909,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643895610
    },
    {
        "content": "<p>The lemma <code>List.cons_append</code> will help you finish the proof from here though</p>",
        "id": 270550079,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643895708
    },
    {
        "content": "<p>Understood. Thanks a lot <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span></p>",
        "id": 270550175,
        "sender_full_name": "Hossam Karim",
        "timestamp": 1643895739
    },
    {
        "content": "<p>I'm working through this <code>calc</code> block, so far everything seems good aside from the two <code>ring_nf</code> blocks which are complaining to me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_sumkexp3eqsumksq</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">j</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j.succ</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">finset.sum_range_succ</span>  <span class=\"c1\">-- rewrite summation</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_sq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- (a + b)^2</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">finset.sum_range_id</span> <span class=\"n\">j</span> <span class=\"c1\">-- sum = j*(j-1)/2</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">IH</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span> <span class=\"c1\">-- 2 * ( ... )/2 = ( ... )</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span> <span class=\"c1\">-- (j +1)^2 (j+1) = (j+1)^3</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j.succ</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"c1\">-- by the definition of summation</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>any tips on which tactics I should be using there?</p>",
        "id": 270602911,
        "sender_full_name": "ccn",
        "timestamp": 1643915972
    },
    {
        "content": "<p>I simply get \"tactic failed, there are unsolved goals\": <br>\n<a href=\"/user_uploads/3121/TEgb6pyo6nWCT-UTds9T-xoB/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/TEgb6pyo6nWCT-UTds9T-xoB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/TEgb6pyo6nWCT-UTds9T-xoB/image.png\"></a></div>",
        "id": 270603164,
        "sender_full_name": "ccn",
        "timestamp": 1643916094
    },
    {
        "content": "<p>The problem with this step is that it actually requires an argument, as this is nat division cancellation requires that <code>j*(j-1)</code> is even, which of course it is, but even that requires a short argument, I doubt there is any tactic in mathlib that will just do this step. I recommend you break this step out as a separate lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 270604099,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643916505
    },
    {
        "content": "<p>So my aim with this new lemma would be to use this right? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">div_mul_cancel</span> <span class=\"o\">{</span><span class=\"n\">G₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group_with_zero</span> <span class=\"n\">G₀</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 270605018,
        "sender_full_name": "ccn",
        "timestamp": 1643916897
    },
    {
        "content": "<p>Unfortunately not, nat division is not group with zero division, you probably need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mul_div_cancel'\">docs#nat.mul_div_cancel'</a></p>",
        "id": 270605290,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643916995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270604099\">said</a>:</p>\n<blockquote>\n<p>The problem with this step is that it actually requires an argument, as this is nat division cancellation requires that <code>j*(j-1)</code> is even, which of course it is, but even that requires a short argument, I doubt there is any tactic in mathlib that will just do this step. I recommend you break this step out as a separate lemma</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh and your reasoning here is that division is defined as this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">nat.div</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>so you're not allowed to divide the natural 1 by the natural 2, because that would create something that's not a natural right?</p>",
        "id": 270605409,
        "sender_full_name": "ccn",
        "timestamp": 1643917045
    },
    {
        "content": "<p>Note that this is the cost of totalizing <code>/</code>, if <code>/</code> took a proof of divisibility as an argument, then the proof would be contained in the statement of <code>finset.sum_range_succ</code> and then reasoning like the kind you are doing here becomes automatable by a tactic.</p>",
        "id": 270605545,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643917087
    },
    {
        "content": "<p>Yes <span class=\"user-mention\" data-user-id=\"367659\">@ccn</span>, lean gets around this by definition nat division to be the floor of the actual value, and in the cases where you have divisibility you have to often manually supply this fact</p>",
        "id": 270606155,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643917364
    },
    {
        "content": "<p>I see</p>",
        "id": 270606378,
        "sender_full_name": "ccn",
        "timestamp": 1643917457
    },
    {
        "content": "<p>This would be the theorem I'm looking for right? (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.even_succ\">docs#nat.even_succ</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">nat.even_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">even</span> <span class=\"n\">n.succ</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">even</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>or is there one that's even closer?</p>",
        "id": 270606467,
        "sender_full_name": "ccn",
        "timestamp": 1643917495
    },
    {
        "content": "<p>In general its best to avoid introducing division as much as possible, it looks like in this case using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_range_id_mul_two\">docs#finset.sum_range_id_mul_two</a> instead of finset.sum_range_id a few lines above would save you a lot of work</p>",
        "id": 270606510,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643917509
    },
    {
        "content": "<p>Thanks Alex I always learn a lot from you</p>",
        "id": 270607493,
        "sender_full_name": "ccn",
        "timestamp": 1643917907
    },
    {
        "content": "<p>One last thing, the calc block is still having an issue with the last <code>ring_nf</code> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j.succ</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">finset.sum_range_succ</span>  <span class=\"c1\">-- rewrite summation</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_sq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- (a + b)^2</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span>  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">finset.sum_range_id_mul_two</span> <span class=\"n\">j</span> <span class=\"c1\">-- sum = j*(j-1)/2</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">IH</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span> <span class=\"c1\">-- 2 * ( ... )/2 = ( ... )</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span> <span class=\"c1\">-- (j +1)^2 (j+1) = (j+1)^3</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">j.succ</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"c1\">-- by the definition of summation</span>\n</code></pre></div>\n<p>Do you know why it can't do this one?</p>",
        "id": 270607642,
        "sender_full_name": "ccn",
        "timestamp": 1643917954
    },
    {
        "content": "<p>Wouldn't all it have to do <code>j^2 * (j - 1) + j^2 = j^2 *( j - 1 + 1) = j^2 * j = j^3</code>, can it not handle that?</p>",
        "id": 270607791,
        "sender_full_name": "ccn",
        "timestamp": 1643918016
    },
    {
        "content": "<p>This is due to natural number subtraction being a bit tricky (similar to division) the possibility that <code>j = 0</code> in which case <code>j-1</code> is also 0, but this is not usual in rings.<br>\nSplitting on those cases seems to work though with thisa instead</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span>\n</code></pre></div>",
        "id": 270608431,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643918268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270608431\">said</a>:</p>\n<blockquote>\n<p>This is due to natural number subtraction being a bit tricky (similar to division) the possibility that <code>j = 0</code> in which case <code>j-1</code> is also 0, but this is not usual in rings.<br>\nSplitting on those cases seems to work though with thisa instead</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I see. When you do that type of syntax does that mean in case one, norm_num can solve it and in the second case ring_nf can solve it?</p>",
        "id": 270609408,
        "sender_full_name": "ccn",
        "timestamp": 1643918643
    },
    {
        "content": "<p>It just means try <code>norm_num</code> on all goals, then try <code>ring_nf</code> on all remaining goals. It has the same effect in the end as what you said except the second goal gets <code>norm_num</code> then <code>ring_nf</code> applied</p>",
        "id": 270609896,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643918872
    },
    {
        "content": "<p>The syntax for what you said is <code>by cases j; [norm_num, ring_nf]</code>, and in fact it does work in this case too</p>",
        "id": 270610017,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643918913
    },
    {
        "content": "<p>I think that also makes sense because in the first case it's just a whole bunch of zero's being multiplied and the second case there's at most one zero there right?</p>\n<p>Also was this causing a problem (having both j and j-1 as zero) because a ring can't have two zeros'?</p>",
        "id": 270610626,
        "sender_full_name": "ccn",
        "timestamp": 1643919209
    },
    {
        "content": "<p>The lemma <code>m - n + n = m</code> is always true in <code>ring</code>s and is true in nat when <code>m &gt;= n</code>. But as nat is not a ring (only a semiring, for this reason) <code>ring_nf</code> doesn't know it can apply that lemma (and even if it did it would have to find a way to prove the condition. By doing cases we get one case where everything is zero and similifies and another one where the subtraction simplifies with succ and dissapears</p>",
        "id": 270611083,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643919424
    },
    {
        "content": "<p>So I'm looking to prove this theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_pprime_pdvdapowpma</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I've come up with the proof on paper, which is first change what we want to prove to <code>a^p - a ≡ 0 (mod p)</code> (since it's equivalent)  then note that from fermats little theorem we have <code>a^(p-1) ≡ 1 (mod p)</code> and then to re-write <code>a^p = a^(p-1) * a</code>, use that fact to go from <code>a^p - a ≡ 0 (mod p)</code> to <code>a^(p-1) * a - a ≡ 0 (mod p)</code> to <code>1 * a - a ≡ 0 (mod p)</code> to <code>0 ≡ 0 (mod p)</code> which is easy to prove.</p>\n<p>I've done some research on the main theorem (fermats little theorem) and found this theorem </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">group_with_zero</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_card_sub_one_eq_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">K</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">units.mk0</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">K</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">units.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">units.coe_mk0</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">fintype.card_units</span><span class=\"o\">,</span> <span class=\"n\">pow_card_eq_one</span><span class=\"o\">],</span> <span class=\"n\">refl</span>\n</code></pre></div>\n<p>(Note I don't think this is the same as the one you find on mathlib today: <a href=\"https://leanprover-community.github.io/mathlib_docs/field_theory/finite/basic.html#zmod.pow_card_sub_one_eq_one\">https://leanprover-community.github.io/mathlib_docs/field_theory/finite/basic.html#zmod.pow_card_sub_one_eq_one</a> because the project I'm working on uses a different version).</p>\n<p>I'm a little confused on how to call this theorem, but it would be great if someone could help me use it to prove <code>a^(p-1) = 1</code> mod p .</p>\n<p>Thanks</p>",
        "id": 270782481,
        "sender_full_name": "ccn",
        "timestamp": 1644014172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"367659\">@ccn</span> re your earlier question: I find these much easier if you just work over a field instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">induction_sumkexp3eqsumksq</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption_mod_cast</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">],</span>\n      <span class=\"n\">ring</span> <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">j</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">IH</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270791117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644020505
    },
    {
        "content": "<p>Thanks for the new view on it! It looks cleaner</p>",
        "id": 270791218,
        "sender_full_name": "ccn",
        "timestamp": 1644020591
    },
    {
        "content": "<p>I've decided I'd like to try solving some topology exercise in lean:</p>\n<p>I'm going to start with this first question I've highlighted here,</p>\n<p><a href=\"/user_uploads/3121/eAaLI-NUdlNrUF2Cow2A17H0/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/eAaLI-NUdlNrUF2Cow2A17H0/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/eAaLI-NUdlNrUF2Cow2A17H0/image.png\"></a></div><p>I've been trying to understand the docs for topology and I got it up to this point:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">open_set_for_each</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">X</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In know there are some things that are rough with this theorem so I'm hoping I can get some tips to fix it up (since it doesn't even compile), thanks!</p>",
        "id": 270914619,
        "sender_full_name": "ccn",
        "timestamp": 1644185203
    },
    {
        "content": "<p>Maybe you want to read the error message and deal with it. What is it?</p>",
        "id": 270914653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644185271
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">topological_spaces.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">77</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">⁇</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">⁇</span> <span class=\"bp\">⊂</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">⁇</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⁇</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">topological_spaces.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">94</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'A'</span>\n<span class=\"n\">topological_spaces.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">109</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'U'</span>\n</code></pre></div>",
        "id": 270914759,
        "sender_full_name": "ccn",
        "timestamp": 1644185378
    },
    {
        "content": "<p>When it says <code>unable to synthesize placeholder</code> what exactly does that mean?</p>",
        "id": 270914769,
        "sender_full_name": "ccn",
        "timestamp": 1644185398
    },
    {
        "content": "<p>So Lean is saying \"what the heck is this A that you just randomly started talking about without ever mentioning its type?\"</p>",
        "id": 270914816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644185414
    },
    {
        "content": "<p>and judging by the tactic state it doesn't know what X is either</p>",
        "id": 270914830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644185449
    },
    {
        "content": "<p>Why don't you take a look at the topology workshop I did in my formalising mathematics course last year?</p>",
        "id": 270914846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644185475
    },
    {
        "content": "<p>Ok, I'll try to understand the docs a little more <code>The main definition is the type class topological space α which endows a type α with a topology.</code> So pretty much I just want <code>X</code> to be some arbitrary set, and then the topology is a collection of subsets of <code>X</code> with those properties</p>",
        "id": 270914917,
        "sender_full_name": "ccn",
        "timestamp": 1644185560
    },
    {
        "content": "<p>So my <code>type a</code> should be <code>X</code> right?</p>",
        "id": 270914925,
        "sender_full_name": "ccn",
        "timestamp": 1644185582
    },
    {
        "content": "<p>No, you want X to be a type. Lean does type theory.</p>",
        "id": 270914931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644185592
    },
    {
        "content": "<p>Ah right, no sets...</p>",
        "id": 270914946,
        "sender_full_name": "ccn",
        "timestamp": 1644185615
    },
    {
        "content": "<p>There's how to do basic topology <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics/blob/master/src/week_4/Part_C_topology.lean\">https://github.com/ImperialCollegeLondon/formalising-mathematics/blob/master/src/week_4/Part_C_topology.lean</a></p>",
        "id": 270914998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644185650
    },
    {
        "content": "<p>and there's the blog post explaining what's going on in that Lean file <a href=\"https://xenaproject.wordpress.com/2021/02/10/formalising-mathematics-workshop-4/\">https://xenaproject.wordpress.com/2021/02/10/formalising-mathematics-workshop-4/</a></p>",
        "id": 270915027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644185705
    },
    {
        "content": "<p>Ok, I will check those out right now. One thing I want to get out of the way first though, if I want to say <code>collection of subsets of X</code> in type theory, what would be the type of that?</p>",
        "id": 270915095,
        "sender_full_name": "ccn",
        "timestamp": 1644185767
    },
    {
        "content": "<p><code>set (set X)</code></p>",
        "id": 270915119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644185819
    },
    {
        "content": "<p>Checkout the the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space\">docs#topological_space</a></p>",
        "id": 270915138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644185854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/270914998\">said</a>:</p>\n<blockquote>\n<p>There's how to do basic topology <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics/blob/master/src/week_4/Part_C_topology.lean\">https://github.com/ImperialCollegeLondon/formalising-mathematics/blob/master/src/week_4/Part_C_topology.lean</a></p>\n</blockquote>\n<p>I started working through this repo a little bit, so now I have a new question, at one point in the groups file, we had defined the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_eq_of_eq_inv_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_left_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mul_right_inv</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_eq_of_eq_inv_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_one</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">one_mul</span> <span class=\"n\">mul_left_inv</span> <span class=\"n\">mul_assoc</span>\n</code></pre></div>\n<p>Then later in the file you supply this proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_mul_cancel_left</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"c1\">-- the simplifier wouldn't do it that way</span>\n                  <span class=\"c1\">-- so we have to do it manually</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- simplifier takes it from here,</span>\n        <span class=\"c1\">-- rewriting a⁻¹ * a to 1 and then 1 * b to b</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The simplifier can't do this because when it has lemmas of the form <code>A = B</code> then it is only allowed to replace A's with B's, so with <code>mul_assoc : ∀ (a b c : G), a * b * c = a * (b * c)</code><br>\nit couldn't have helped us in that lemma due to this reason, so that's why we need the initial rewrite? If we had the other version of <code>mul_assoc</code> where LHS is swapped with RHS it would be a problem because the simplifier would get caught in a loop right?</p>",
        "id": 270920541,
        "sender_full_name": "ccn",
        "timestamp": 1644193914
    },
    {
        "content": "<p>Right -- with these proofs at the beginning of the theory you are often rewriting in both directions and you can't have both A=B and B=A as simp lemmas</p>",
        "id": 270941221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644218819
    },
    {
        "content": "<p>What is the section of the docs which has the definitions for infinite summations and products?</p>",
        "id": 271031179,
        "sender_full_name": "ccn",
        "timestamp": 1644262794
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum\">docs#tsum</a> (found it by looking at <a href=\"https://leanprover-community.github.io/undergrad.html\">https://leanprover-community.github.io/undergrad.html</a>)</p>",
        "id": 271032096,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644263209
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tprod\">docs#tprod</a></p>",
        "id": 271034544,
        "sender_full_name": "ccn",
        "timestamp": 1644264260
    },
    {
        "content": "<p>Oh maybe it's this? <a href=\"https://leanprover-community.github.io/mathlib_docs/data/tprod.html#list.tprod\">https://leanprover-community.github.io/mathlib_docs/data/tprod.html#list.tprod</a></p>",
        "id": 271034585,
        "sender_full_name": "ccn",
        "timestamp": 1644264278
    },
    {
        "content": "<p>unlucky</p>",
        "id": 271034598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644264283
    },
    {
        "content": "<p>I'm just trying to write this: <a href=\"/user_uploads/3121/l7ldmOGUZVTx685mXJrwm6cH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/l7ldmOGUZVTx685mXJrwm6cH/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/l7ldmOGUZVTx685mXJrwm6cH/image.png\"></a></div>",
        "id": 271034646,
        "sender_full_name": "ccn",
        "timestamp": 1644264299
    },
    {
        "content": "<p>right, <code>tprod</code> definitely seems like a thing that should exist but I don't know if it does</p>",
        "id": 271034824,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644264372
    },
    {
        "content": "<p>Oops</p>",
        "id": 271034960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644264446
    },
    {
        "content": "<p>Take logs, use tsum, and then exp? <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 271035074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644264485
    },
    {
        "content": "<p>Presumably if one of the terms in a general product is 0 then the classical convention that the product \"diverges to zero\" can be replaced with lean's convention that it converges to a junk value, namely zero.</p>",
        "id": 271035205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644264570
    },
    {
        "content": "<p>I recall that in order to say that <code>a</code> is the largest number satisfying a proposition <code>P</code> we could write <code>∀ x, a &lt; x → ¬ P(x)</code> Is that the way we would write it in lean as well, or is there a faster way?</p>",
        "id": 271189668,
        "sender_full_name": "ccn",
        "timestamp": 1644353800
    },
    {
        "content": "<p>What about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_greatest\">docs#is_greatest</a>?</p>",
        "id": 271190049,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644353992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"367659\">@ccn</span> in your formula, there is a missing assumption: you presumably want ˋP aˋ to also hold!  (Note that ˋis_greatestˋ includes this.)<br>\n[My backticks appear to have broken.]</p>",
        "id": 271191567,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1644354645
    },
    {
        "content": "<p>I haven't worked with sets much in lean, could someone show me how we can use <code>is_greatest</code> to prove something simple like a theorem which proves that <code>3</code> is the largest odd integer less than <code>5</code> ?</p>",
        "id": 271195319,
        "sender_full_name": "ccn",
        "timestamp": 1644356598
    },
    {
        "content": "<p>does this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_greatest</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">|</span> <span class=\"n\">odd</span> <span class=\"n\">x</span> <span class=\"bp\">/\\</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 271195499,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644356682
    },
    {
        "content": "<p>Yeah it does make sense, thanks I see how to use it now!</p>",
        "id": 271195605,
        "sender_full_name": "ccn",
        "timestamp": 1644356745
    },
    {
        "content": "<p>I want to make a statement for <code>a_1, ... ,a_n</code> which are real numbers where <code>∑ k in finset.range n, a_k = ...</code> what's the best way to go about that?</p>",
        "id": 271201921,
        "sender_full_name": "ccn",
        "timestamp": 1644359864
    },
    {
        "content": "<p>So far I've only had a finite number of parameters to my theorems/functions</p>",
        "id": 271201951,
        "sender_full_name": "ccn",
        "timestamp": 1644359883
    },
    {
        "content": "<p>Where did you get your various a_'s from? There's probably a better way to phrase what you want than just having 1 to n.</p>",
        "id": 271211477,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644365129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/271211477\">said</a>:</p>\n<blockquote>\n<p>Where did you get your various a_'s from? There's probably a better way to phrase what you want than just having 1 to n.</p>\n</blockquote>\n<p>Trying to write this out: <a href=\"/user_uploads/3121/WkBQ9_vJFVAAT5HVokrMFqv1/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WkBQ9_vJFVAAT5HVokrMFqv1/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/WkBQ9_vJFVAAT5HVokrMFqv1/image.png\"></a></div>",
        "id": 271219075,
        "sender_full_name": "ccn",
        "timestamp": 1644370369
    },
    {
        "content": "<p>I guess the lean way to state that is with an indexing set <code>{ι : Type*} [fintype ι]</code> and two functions <code>a b : ι → ℝ</code> (E: thanks Kyle!)</p>",
        "id": 271219184,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644370470
    },
    {
        "content": "<p>(small typo: it should be <code>[fintype ι]</code>)</p>",
        "id": 271219525,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644370827
    },
    {
        "content": "<p>I tried that out, but I'm getting still some issue: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cauchy</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 271219811,
        "sender_full_name": "ccn",
        "timestamp": 1644371084
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">a</span> <span class=\"n\">i</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">i</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 271219823,
        "sender_full_name": "ccn",
        "timestamp": 1644371099
    },
    {
        "content": "<p>So the finset.range thing is wrong because it 's producing a  natural number?</p>",
        "id": 271219879,
        "sender_full_name": "ccn",
        "timestamp": 1644371131
    },
    {
        "content": "<p>It's like I need to produce n distinct indices</p>",
        "id": 271219909,
        "sender_full_name": "ccn",
        "timestamp": 1644371160
    },
    {
        "content": "<p><code>Σ i :  ι, a i</code> (also I'm writing ι for iota instead of <code>l</code> but it doesn't matter ;b)</p>",
        "id": 271220122,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644371311
    },
    {
        "content": "<p>you're trying to plug in a nat to a function that doesn't take nats</p>",
        "id": 271220145,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644371329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/271220122\">said</a>:</p>\n<blockquote>\n<p><code>Σ i :  ι, a i</code> (also I'm writing ι for iota instead of <code>l</code> but it doesn't matter ;b)</p>\n</blockquote>\n<p>Ah ok, I understand it now. And this represents the same thing as the cauchy inequality because the <code>l</code> is a <code>fintype</code> so it can be labelled 1 to n, for some n ?</p>",
        "id": 271334841,
        "sender_full_name": "ccn",
        "timestamp": 1644435279
    },
    {
        "content": "<p>Yes, but also you never need to. On paper, we think of sums as an iterative process. We take the first element, add the second, the third...</p>",
        "id": 271341128,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644437814
    },
    {
        "content": "<p>This is not at all what's done in mathlib. Instead, we sum in all orders at once, and commutativity of addition tells us that we always ended up with the same result.</p>",
        "id": 271341279,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644437890
    },
    {
        "content": "<p>So we can get from \"sum of elements of a list\" to \"sum of elements of a set\".</p>",
        "id": 271341351,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644437931
    },
    {
        "content": "<p>In practice, the VM chooses an arbitrary order to do the calculation, but that's not so important to the <em>concept</em>.</p>",
        "id": 271341447,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644438002
    },
    {
        "content": "<p>If I have a polynomial like <code>(x^2  + 1) * (x^2 + 3) = x^4 + 4^2 + 3</code> (but assume I was just given <code>x^4 + 4^2 + 3</code>),  I want to talk about the product of all the complex roots of that polynomial (so in that case <code>+-i and  +-sqrt(3)*i</code>), is there a way to get this product in general from a polynomail using lean?</p>",
        "id": 271375590,
        "sender_full_name": "ccn",
        "timestamp": 1644457353
    },
    {
        "content": "<p>I found this which gives me the roots: <a href=\"https://leanprover-community.github.io/mathlib_docs_demo/data/polynomial/ring_division.html#polynomial.roots\">https://leanprover-community.github.io/mathlib_docs_demo/data/polynomial/ring_division.html#polynomial.roots</a></p>",
        "id": 271376273,
        "sender_full_name": "ccn",
        "timestamp": 1644458003
    },
    {
        "content": "<p>Now I need to somehow filter out the complex ones and multiply them all together...</p>",
        "id": 271376355,
        "sender_full_name": "ccn",
        "timestamp": 1644458049
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.prod\">docs#multiset.prod</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.filter\">docs#multiset.filter</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.im\">docs#complex.im</a> may be helpful</p>",
        "id": 271376490,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644458163
    },
    {
        "content": "<p>So your suggestion is to check if <code>complex.im r</code> is non-zero (where r is the root is non-zero)  as a way to filter the roots right?</p>",
        "id": 271378265,
        "sender_full_name": "ccn",
        "timestamp": 1644459738
    },
    {
        "content": "<p>Is it possible to define a polynomial like <code>x^4 + 4x^2 + 3</code> and then get it's roots in lean, or is it just on arbitrary polynomials?</p>",
        "id": 271378332,
        "sender_full_name": "ccn",
        "timestamp": 1644459824
    },
    {
        "content": "<p>If it's a specific polynomial you can just factor it</p>",
        "id": 271378739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644460210
    },
    {
        "content": "<p>I think I found a way to do it, if I start with a specific polynomial <code>P</code>, than I can do <code>{x : ℂ | P(x) = 0}</code> to get the complex roots...</p>",
        "id": 271378998,
        "sender_full_name": "ccn",
        "timestamp": 1644460526
    },
    {
        "content": "<p>For doing a <code>finset</code> prod, is this the cleanest way you know of <code>finset.prod {1, 2, 3} (λ x, x) = 6</code>?</p>",
        "id": 271380092,
        "sender_full_name": "ccn",
        "timestamp": 1644461778
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 271382932,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644464799
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 271382951,
        "sender_full_name": "David Landsberg",
        "timestamp": 1644464837
    },
    {
        "content": "<p>For small numbers, you can just let it directly compute:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">finset.prod</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 271412213,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644489038
    },
    {
        "content": "<p>For larger computations, the <code>norm_num</code> tactic is usually faster. There are enough lemmas available here that you can just replace <code>rfl</code> with <code>by norm_num</code>.</p>",
        "id": 271412964,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644489479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/271378998\">said</a>:</p>\n<blockquote>\n<p>I think I found a way to do it, if I start with a specific polynomial <code>P</code>, than I can do <code>{x : ℂ | P(x) = 0}</code> to get the complex roots...</p>\n</blockquote>\n<p>just remember that Lean will also give you the real roots in this too :) also you'll want to use a multiset if you want to count the roots with multiplicity</p>",
        "id": 271413960,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644489970
    },
    {
        "content": "<p>Is there an easy way to talk about the sum of the digits of a number in lean?</p>",
        "id": 271495375,
        "sender_full_name": "ccn",
        "timestamp": 1644527717
    },
    {
        "content": "<p>Use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.to_digits\">docs#nat.to_digits</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.sum\">docs#list.sum</a></p>",
        "id": 271496089,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644528007
    },
    {
        "content": "<p>Given a specific polynomial like <code>83x^4 + -3x^3 + 238x^2 + 99999x + 42</code> how do I get lean to talk about the cofficient on the term <code>x^2</code> ?</p>",
        "id": 271498916,
        "sender_full_name": "ccn",
        "timestamp": 1644529352
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.coeff\">docs#polynomial.coeff</a> ?</p>",
        "id": 271499277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644529430
    },
    {
        "content": "<p>Yeah that would work,  I'm trying to figure out how to define <code>83x^4 + -3x^3 + 238x^2 + 99999x + 42</code> as a specific polynomial so I can use the <code>.coeff</code> is that even possible?</p>",
        "id": 271501681,
        "sender_full_name": "ccn",
        "timestamp": 1644530538
    },
    {
        "content": "<p>Yes of course. You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.C\">docs#polynomial.C</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.X\">docs#polynomial.X</a></p>",
        "id": 271501947,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644530662
    },
    {
        "content": "<p>Hello all! I'm new here, and I'm a beginner in this field. I was wondering if there's somewhere appropriate for me to post \"stupid\" questions about basic concepts in automated theorem proving and proof verification, which might not be about Lean specifically. I don't want to spam this community with topics that aren't relevant, but I'm not sure where the best place for that type of thing is.</p>",
        "id": 271535287,
        "sender_full_name": "Reuben Dunn",
        "timestamp": 1644559498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"478207\">@Reuben Dunn</span> You might want to try out the brand new <a href=\"https://proofassistants.stackexchange.com/\">https://proofassistants.stackexchange.com/</a></p>",
        "id": 271535707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644559968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/271535707\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"478207\">Reuben Dunn</span> You might want to try out the brand new <a href=\"https://proofassistants.stackexchange.com/\">https://proofassistants.stackexchange.com/</a></p>\n</blockquote>\n<p>Awesome, that looks right up my alley. I'm surprised because I tried searching for something like that recently and didn't find this! So it really is brand new.</p>",
        "id": 271535927,
        "sender_full_name": "Reuben Dunn",
        "timestamp": 1644560210
    },
    {
        "content": "<p>That's not to say that such questions are off topic here though</p>",
        "id": 271536540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644560851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/271535707\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"478207\">Reuben Dunn</span> You might want to try out the brand new <a href=\"https://proofassistants.stackexchange.com/\">https://proofassistants.stackexchange.com/</a></p>\n</blockquote>\n<p>Is this appropriate for questions relating to proving specific statements and questions relating to mathlib?</p>",
        "id": 271581051,
        "sender_full_name": "ccn",
        "timestamp": 1644588323
    },
    {
        "content": "<p>I don't know... I guess that's being worked out during the current beta phase...</p>",
        "id": 271585077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644590145
    },
    {
        "content": "<p>There's also this thing: <a href=\"https://proofassistants.meta.stackexchange.com/\">https://proofassistants.meta.stackexchange.com/</a></p>",
        "id": 271585294,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644590240
    },
    {
        "content": "<p>Which you can ask that question on if you want some assurance -- but yeah you could just ask it if you're more comfortable there and if someone closes it big deal.</p>",
        "id": 271585373,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644590276
    },
    {
        "content": "<p>Whether or not it's appropriate for PASE, if it's a question specifically about mathlib you might get an answer more quickly by asking here on Zulip.</p>",
        "id": 271600186,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644596638
    },
    {
        "content": "<p>I want to write a summation like <a href=\"/user_uploads/3121/oO3gJpTsWDUYeSbvTWIu6c-d/image.png\">image.png</a> in lean, how can I do it?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/oO3gJpTsWDUYeSbvTWIu6c-d/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/oO3gJpTsWDUYeSbvTWIu6c-d/image.png\"></a></div>",
        "id": 271853711,
        "sender_full_name": "ccn",
        "timestamp": 1644857144
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum\">docs#finset.sum</a>, which has <code>\\sum</code> notation if you add <code>open_locale big_operators</code></p>",
        "id": 271853944,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644857231
    },
    {
        "content": "<p>I'm thinking I'll have to do a double summation like <code>∑ i in finset.range n, ∑ j in {k : ℕ | i + k = n}, ...</code> would that be best?</p>",
        "id": 271854023,
        "sender_full_name": "ccn",
        "timestamp": 1644857272
    },
    {
        "content": "<p>So your example would look something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">some_function</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 271854097,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644857290
    },
    {
        "content": "<p>Are those first two little <code>n</code>'s supposed to be the <code>N</code> ?</p>",
        "id": 271854174,
        "sender_full_name": "ccn",
        "timestamp": 1644857333
    },
    {
        "content": "<p>nevermind, I found <code>fin</code> in the docs now.</p>",
        "id": 271854587,
        "sender_full_name": "ccn",
        "timestamp": 1644857522
    },
    {
        "content": "<p>thanks Anne!</p>",
        "id": 271854627,
        "sender_full_name": "ccn",
        "timestamp": 1644857531
    },
    {
        "content": "<p>It would be neat if we could add <code>(h : i + j = n)</code> as indices to our sum, rather than having to use an if-then-else, but apparently <code>fintype</code> is defined only for <code>Type</code>s, not <code>Prop</code>s. :(</p>",
        "id": 271854878,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644857625
    },
    {
        "content": "<p>That bound is known as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.nat.antidiagonal\">docs#finset.nat.antidiagonal</a></p>",
        "id": 271855608,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644857914
    },
    {
        "content": "<p>I had to write the if statement like <code>if  (i + j : ℕ) = n then some_function i j else 0</code> (without the h)</p>",
        "id": 271855657,
        "sender_full_name": "ccn",
        "timestamp": 1644857936
    },
    {
        "content": "<p>I had just been using it for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fib_eq_sum_choose_antidiagonal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">finset.nat.antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat.choose</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 271856071,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644858101
    },
    {
        "content": "<p>I think you can also use it like: <code>∑ i j in (finset.nat.antidiagonal n), something i j</code></p>",
        "id": 271856190,
        "sender_full_name": "ccn",
        "timestamp": 1644858148
    },
    {
        "content": "<p>I don't think that you can use it this way.</p>",
        "id": 271905677,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644882091
    },
    {
        "content": "<p>Is there an easy way to get the units place of a real number?, so far Ive found <code>nat.to_digits</code> but that's only for naturals, any idea on what I can use there?</p>",
        "id": 272061221,
        "sender_full_name": "ccn",
        "timestamp": 1644973315
    },
    {
        "content": "<p>Do you mean the floor (not the unit place for negative reals)? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.floor\">docs#int.floor</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.floor\">docs#nat.floor</a> depending on your use.</p>",
        "id": 272062105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644974103
    },
    {
        "content": "<p>Yeah what I know is that the number is a positive real like<code> 128.232323...</code> and I want to get the ones place to get the answer <code>8</code></p>",
        "id": 272062768,
        "sender_full_name": "ccn",
        "timestamp": 1644974694
    },
    {
        "content": "<p>When I try this out <code>#eval nat.floor (3.2 : ℝ)</code> I just get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">code</span> <span class=\"n\">generation</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">VM</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">code</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">classical.choice'</span>\n</code></pre></div>",
        "id": 272062808,
        "sender_full_name": "ccn",
        "timestamp": 1644974737
    },
    {
        "content": "<p>Reals aren't computable, so <code>#eval</code> won't work for that</p>",
        "id": 272063058,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644974942
    },
    {
        "content": "<p><code>norm_num</code> should probably know how to compute this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.floor</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- should work</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272063172,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644975058
    },
    {
        "content": "<p>This works though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.floor</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.floor_eq_iff</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272063281,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644975144
    },
    {
        "content": "<p>So what you want is <code>nat.floor x % 10</code></p>",
        "id": 272063473,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644975354
    },
    {
        "content": "<p>Thanks that works well!</p>",
        "id": 272074509,
        "sender_full_name": "ccn",
        "timestamp": 1644988371
    },
    {
        "content": "<p>If I wanted to figure out the number of terms after simplification of the expansion of <code>(8* x^2 + 4 * x* y + 3 * y^2)^n</code> would there be a nice way to do it in lean?</p>",
        "id": 272074580,
        "sender_full_name": "ccn",
        "timestamp": 1644988465
    },
    {
        "content": "<p>It's 2n+1, you don't need lean. What's your actual question? Is n a variable? Do you want a formula or an algorithm etc</p>",
        "id": 272086310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645000486
    },
    {
        "content": "<p>I'm trying to state and then prove that it's equal to that in lean, so I'm having trouble writing the statement I'm trying to prove</p>",
        "id": 272187880,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645050232
    },
    {
        "content": "<p>I guess there would be a way to do this. A polynomial is stored as a function with finite support and you just want to count the size of the support.</p>",
        "id": 272189935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645051383
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">card_support</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">delta</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">delta</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"c1\">-- f is now a finsupp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f.support.card</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>There's probably a more idiomatic way to do it.</p>",
        "id": 272190625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645051754
    },
    {
        "content": "<p>Ah ok, thanks for showing me that!</p>",
        "id": 272190741,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645051827
    },
    {
        "content": "<p>It looks like <code>f.support.card</code> works without all that unfolding.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">card_support</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.support.card</span>\n</code></pre></div>",
        "id": 272191585,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645052370
    },
    {
        "content": "<p>Oh great! <code>mv_polynomial.support</code> exists :-)</p>",
        "id": 272192134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645052599
    },
    {
        "content": "<p>So I've been experimenting with the multivariable polynomial API, and I've figured some things out, but I'm having trouble understanding how to evaluate them properly, my first try was this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">trying_it</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">P.eval</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I think my problem is that I don't fully understand the definitions together:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">mv_polynomial.eval</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>I don't really understand what  <code>R →+* R</code> means (the + and *) , but if I understand that right, I first need to build some type of function which maps from sigma into the real numbers (for my case), so that function encodes my <code>1 2 3 4</code> ? Is that right?</p>",
        "id": 272198062,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645056863
    },
    {
        "content": "<p>Also is it correct to say that sigma is acting like an index set/index type ? <a href=\"/user_uploads/3121/SH0wbTQbsKGiaC5gzPC6Tk_0/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SH0wbTQbsKGiaC5gzPC6Tk_0/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/SH0wbTQbsKGiaC5gzPC6Tk_0/image.png\"></a></div>",
        "id": 272198124,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645056920
    },
    {
        "content": "<p><code>P.eval 1 2 3 4</code> seems very optimistic to me</p>",
        "id": 272198296,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645057073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">Callum Cassidy-Nolan</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20Proving.20Questions/near/272198062\">said</a>:</p>\n<blockquote>\n<p>I don't really understand what  <code>R →+* R</code> means (the + and *) , but if I understand that right, I first need to build some type of function which maps from sigma into the real numbers (for my case), so that function encodes my <code>1 2 3 4</code> ? Is that right?</p>\n</blockquote>\n<p>Yes, that's <code>f</code></p>",
        "id": 272198366,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645057104
    },
    {
        "content": "<p>I think you could use <a href=\"https://leanprover-community.github.io/mathlib_docs/data/matrix/notation.html\">https://leanprover-community.github.io/mathlib_docs/data/matrix/notation.html</a> for this</p>",
        "id": 272198443,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645057163
    },
    {
        "content": "<p>Your <code>σ</code> is <code>fin 4</code></p>",
        "id": 272198558,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645057242
    },
    {
        "content": "<p>\"mv_polynomial.eval ![1, 2, 3, 4] P\" if you import finvec notation</p>",
        "id": 272206645,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645064817
    },
    {
        "content": "<p>If I have an <code>ite (i=j) 1 0</code> built up from using <code>classical</code> to get decidability on the type of <code>i</code>, is there a way I can compare it to an <code>ite (i=j) 1 0</code> built from using an instance like <code>[decidable (i=j)]</code>?</p>",
        "id": 272273921,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1645110938
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#congr\">tactic#congr</a> family might help here</p>",
        "id": 272274182,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645111035
    },
    {
        "content": "<p>Nice! That did it. Thanks a ton!</p>",
        "id": 272274222,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1645111055
    },
    {
        "content": "<p>usually this means that a lemma statement went wrong somewhere</p>",
        "id": 272276252,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645111929
    },
    {
        "content": "<p>so, if you don't mind me asking, does the <code>classical</code> ite come from your code or mathlib?</p>",
        "id": 272276315,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645111961
    },
    {
        "content": "<p>It came from my code. I introduced a <code>open_locale classical</code> because the linter told me to replace all instances of <code>[decidable_eq]</code> with <code>classical</code> in the proof</p>",
        "id": 272279945,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1645113353
    },
    {
        "content": "<p>Okay, I figured out what was probably wrong. I had first inserted <code>classical</code>s in the tactics of proofs on an as-needed basis, but later decided to just <code>open_locale classical</code>, but in this one proof I had forgotten to take out the <code>classical</code> tactic.</p>",
        "id": 272280689,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1645113607
    },
    {
        "content": "<p>the two are not interchangeable. open_locale classical changes the statements of all your definitions and lemmas. classical as the tactic only changes the proofs.</p>",
        "id": 272313375,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645127542
    },
    {
        "content": "<p>You want the latter, not the former. The former restricts your definitions and lemmas to be only valid over things that are classically defined, instead of things that are either classically or decidably defined.</p>",
        "id": 272313553,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645127626
    },
    {
        "content": "<p>Whether or not you rely on decidability inside the proof doesn't matter for the proof itself, which is what the \"classical\" tactic does.</p>",
        "id": 272313647,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645127659
    },
    {
        "content": "<p>Ah, I see. So if I have a term-mode proof, should I turn it into a tactic-mode proof so that I can hit it with the <code>classical</code> tactic?</p>",
        "id": 272316474,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1645128728
    },
    {
        "content": "<p>Separately, doing this breaks the statements of some theorems with <code>ite</code> in them, is there a way to fix that without putting in <code>[decidable_eq]</code>s into the hypothesis?</p>",
        "id": 272316833,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1645128943
    },
    {
        "content": "<p>The way to fix them <em>is</em> to add <code>decidable_eq</code> hypotheses.</p>",
        "id": 272317002,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645129031
    },
    {
        "content": "<p>Okay, previously having <code>decidable_eq</code> in the hypothesis got the mathlib linter mad at me. Is there a way to tell which <code>decidable_eq</code>s are okay to have? Is it exactly when you need it to make the theorem statement work?</p>",
        "id": 272317189,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1645129129
    },
    {
        "content": "<p>Yes, exactly! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 272318637,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645129919
    },
    {
        "content": "<p>The idea is that the decidable instances appearing in the type should be general while the ones appearing in the proof can be whatever. And you want to have as few decidability hypotheses as possible, so any that doesn't appear in the type should be declared in the proof.</p>",
        "id": 272318911,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645130057
    },
    {
        "content": "<p>Note the difference between <code>def</code> and <code>lemma</code> here. Because <code>lemma</code> forgets the proof as soon as it's done, you can poison it with <code>classical</code> as much as you want. If you do that in a definition however, you'll make it noncomputable.</p>",
        "id": 272319050,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645130143
    },
    {
        "content": "<p>More details: an if-then-else that branches on a condition P must have that P is decidable! Otherwise you can't actually consider the two branches</p>",
        "id": 272319123,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645130169
    },
    {
        "content": "<p>Ah nice! This makes so much sense. Thank you all for the explanation.</p>",
        "id": 272319170,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1645130199
    },
    {
        "content": "<p>I should also add that usually some goals within a <code>def</code> are proofs, and those behave just as in a <code>lemma</code>, so you can classical-poison them as much as you want even though they are \"part of a <code>def</code>\".</p>",
        "id": 272319358,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645130301
    },
    {
        "content": "<p>The important distinction is Type-valued vs Prop-valued goal.</p>",
        "id": 272319406,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645130332
    },
    {
        "content": "<p>Right! So if I want a Prop, then I do the <code>classical</code> tactic, and if I want to make a (computable) definition, then I should use <code>decidable_eq</code>.<br>\n(And I should never use <code>open_locale classical</code>?)</p>",
        "id": 272319559,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1645130414
    },
    {
        "content": "<p><code>open_locale classical</code> is the mathematician's cheat code. Short term gain, long-earned pain.</p>",
        "id": 272319895,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645130624
    },
    {
        "content": "<p>I wish finsupp could be fixed :(</p>",
        "id": 272320459,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645130932
    },
    {
        "content": "<p>Couldn't we follow the same idea as for <code>dfinsupp</code>? There it seems to work well.</p>",
        "id": 272321999,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645131699
    },
    {
        "content": "<p>What’s wrong with <code>finsupp</code>? Is it just that the use of <code>open_locale classical</code> would be a big chore to unwind?</p>",
        "id": 272388533,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1645182595
    },
    {
        "content": "<p>No, not quite. It would indeed be a big chore to unwind, but mostly the definition of <code>finsupp</code> is such that it requires an awful lot of decidability. <code>dfinsupp</code> circumvents the problem by having a more flexible representation of the support.</p>",
        "id": 272399443,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645189894
    },
    {
        "content": "<p>What's wrong with <code>finsupp</code> is that it's hard for mathematicians to use because it's constructive and mathematicians have no idea what decidable equality means because in maths it's an axiom. In fact nobody likes <code>finsupp</code> because it's too constructive for the classical people and somehow not constructive enough for the constructive people, is my understanding of it (I remember Reid bashing it from a constructivist point of view at some point in the past). One day I'll write a purely classical finsupp :-) It's just f : X -&gt; Y and the hypothesis that the preimage of univ - 0 is set.finite.</p>",
        "id": 272409676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645195421
    },
    {
        "content": "<p>the main reason I care about it is that currently we have to do <a href=\"https://github.com/leanprover-community/mathlib/blob/3e6439cd7e04a883c6f71605e3eb333d7623af07/src/data/nat/factorization.lean#L257\">ugly hacks</a> to make the <code>nat</code> multiplicative inductions computable; I don't much care mathematically but it just seems to me that they should be computable in principle</p>",
        "id": 272409877,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645195532
    },
    {
        "content": "<p>So there in your link is the claim that <code>finsupp is noncomputable</code>, and yet it uses <code>finset</code> instead of <code>set.finite</code> so it's not classical either.</p>",
        "id": 272410227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645195714
    },
    {
        "content": "<p>Yeah <code>finsupp</code> is actually wrong in multiple ways, if you're expecting <code>finsupp X R</code> to be the free <code>R</code>-module on <code>X</code>.</p>",
        "id": 272412350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645196686
    },
    {
        "content": "<p><code>dfinsupp</code> is also wrong, but less so.</p>",
        "id": 272412991,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645196993
    },
    {
        "content": "<p>I've just written out this question : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">open_set_for_each</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>When I look at the topology api I see this: <a href=\"/user_uploads/3121/WJ3mXdGYyDIs1pc_0fTImo-9/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WJ3mXdGYyDIs1pc_0fTImo-9/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/WJ3mXdGYyDIs1pc_0fTImo-9/image.png\"></a></div><p>How does <code>is_open</code> know I'm talking about X ?</p>\n<p>Also, what does it mean when I write <code>X : Type</code> ? Am I just stating that it's an aribitrary type? I have trouble understanding <code>Type u</code> and all that stuff.</p>",
        "id": 272563452,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645329393
    },
    {
        "content": "<p>When writing code for mathlib you usually want to use <code>X : Type*</code> instead of <code>X : Type</code></p>",
        "id": 272563477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645329455
    },
    {
        "content": "<p><code>X : Type</code> means <code>X</code> is a type in the lowest universe; <code>X : Type*</code> means <code>X</code> is a type in any universe</p>",
        "id": 272563527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645329492
    },
    {
        "content": "<p>you don't need to know much about universes other than to know there is more than one and so <code>X : Type</code> is putting a restriction on users of your theorem. In 98% of cases you can just write <code>Type*</code> instead of <code>Type</code> and pay no more heed to it</p>",
        "id": 272563554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645329583
    },
    {
        "content": "<p>I am a little curious about the universes, I'm not sure what those are but I know that there are different type levels, like <code>Type 0</code>, <code>Type 1</code> and so on, why are there so many?</p>",
        "id": 272563685,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645329639
    },
    {
        "content": "<p>Also what is the difference between <code>X : Type*</code> and <code>X : Type u</code></p>",
        "id": 272563705,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645329669
    },
    {
        "content": "<p>Ideally there would be only one universe, the type of all types. Unfortunately Russell and Girard proved this is inconsistent, so the type of all types has to live in a bigger type</p>",
        "id": 272563719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645329699
    },
    {
        "content": "<p>So in lean <code>Type 0 : Type 1</code> and <code>Type 1 : Type 2</code> and so on</p>",
        "id": 272563731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645329719
    },
    {
        "content": "<p>You will almost never see the higher universes show up in practice, but they are theoretically important</p>",
        "id": 272563775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645329746
    },
    {
        "content": "<p><code>X : Type*</code> is the same as <code>X : Type _</code>, which is to say X has Type \"lean figure it out\"</p>",
        "id": 272563796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645329787
    },
    {
        "content": "<p>Ok, so the goal is that we want to say that <code>X</code> is an arbitrary type, but there's no type we can put on the underscore <code>X : _</code> to make that happen (based on Russel and Girard) ?</p>",
        "id": 272563800,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645329790
    },
    {
        "content": "<p>usually it will end up being a universe variable, so you get <code>X : Type u</code> with <code>u</code> being a universe parameter to the theorem</p>",
        "id": 272563818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645329818
    },
    {
        "content": "<p>So instead we build a tower of types that are increasing and then let it be one of the levels in the tower?</p>",
        "id": 272563859,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645329843
    },
    {
        "content": "<p>Right, we get a family of theorems, one for each universe we want to instantiate X to</p>",
        "id": 272563868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645329846
    },
    {
        "content": "<p>Do we ever use specific levels?</p>",
        "id": 272563913,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645329878
    },
    {
        "content": "<p>it seems like we have infinite of them just to solve the paradox.</p>",
        "id": 272563918,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645329891
    },
    {
        "content": "<p>Concrete types usually have the lowest possible level we can assign to them. So for example <code>nat : Type 0</code></p>",
        "id": 272563944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645329905
    },
    {
        "content": "<p>What would have gone wrong if we did <code>nat : Type *</code> ?</p>",
        "id": 272563954,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645329925
    },
    {
        "content": "<p>and if <code>A : Type u</code> and <code>B : Type v</code> then <code>A ⊕ B : Type (max u v)</code></p>",
        "id": 272563965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645329948
    },
    {
        "content": "<p>If we did <code>nat : Type u</code>, then it wouldn't really be one type, it would be a family of types, denoted <code>nat.{u} : Type u</code>. This is fine, but lean will often not be able to solve for <code>u</code> when you use <code>nat</code> in a theorem so users will have to pay closer attention to the universes</p>",
        "id": 272564043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330021
    },
    {
        "content": "<p>So <code>Type u</code> is the type of families of <code>Type u</code> ??</p>",
        "id": 272564065,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330072
    },
    {
        "content": "<p>so as a result, this technique is generally reserved to cases where universes really are important, like <code>ordinal.{u}</code> and <code>cardinal.{u}</code>, or they might be available as variants of an existing definition, for example <code>empty : Type 0</code> and <code>pempty.{u} : Type u</code></p>",
        "id": 272564112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330095
    },
    {
        "content": "<p><code>Type u</code> is the type of all types in universe u</p>",
        "id": 272564117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330107
    },
    {
        "content": "<p><code>Type u</code> is equal to <code>Sort (u+1)</code>, which extends the universe hierarchy one step downward to the universe <code>Prop = Sort 0</code>, which is special in a few ways</p>",
        "id": 272564129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330148
    },
    {
        "content": "<p>So then <code>nat : Type u</code> makes <code>nat</code> a type in universe <code>u</code>?</p>",
        "id": 272564132,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330151
    },
    {
        "content": "<p>You mean in the definition? Normally if you write <code>nat : Type u</code> you get a type error because <code>nat</code> doesn't have type <code>Type u</code>, it has type <code>Type 0</code></p>",
        "id": 272564196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330204
    },
    {
        "content": "<p>if you put that in the definition then it would become a family of types <code>nat.{u}</code> as mentioned, so you would have <code>nat.{0} : Type 0</code>, <code>nat.{1} : Type 1</code> and so on</p>",
        "id": 272564212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330244
    },
    {
        "content": "<p>Ok, and since we only need one version of the naturals we just do <code>nat : Type 0</code> ?</p>",
        "id": 272564231,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330276
    },
    {
        "content": "<p>exactly</p>",
        "id": 272564233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330282
    },
    {
        "content": "<p>Would integers also reside in <code>Type 0</code> ?</p>",
        "id": 272564246,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330309
    },
    {
        "content": "<p>yep</p>",
        "id": 272564249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330314
    },
    {
        "content": "<p>Or would it be a larger number?</p>",
        "id": 272564250,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330316
    },
    {
        "content": "<p>Oh ok</p>",
        "id": 272564289,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330326
    },
    {
        "content": "<p>it is occasionally technically useful to have a copy of the natural numbers in higher universes, and we use <code>ulift.{u v} : Type u -&gt; Type (max u v)</code> for that</p>",
        "id": 272564296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330333
    },
    {
        "content": "<p>I understand why we needed infinite types, because of the paradox, but what are the point of the <code>Sort</code>'s ?</p>",
        "id": 272564315,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330387
    },
    {
        "content": "<p>Some theorems are true for both <code>Prop</code> and <code>Type u</code></p>",
        "id": 272564324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330409
    },
    {
        "content": "<p>and it is useful to be able to prove them only once and have the theorem apply in both contexts</p>",
        "id": 272564335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330436
    },
    {
        "content": "<p>Why do we need both ?</p>",
        "id": 272564336,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330441
    },
    {
        "content": "<p>why have propositions? or why have types? Both are useful</p>",
        "id": 272564383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330463
    },
    {
        "content": "<p>obviously we need <code>nat</code> and we need <code>2 + 2 = 4</code></p>",
        "id": 272564391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330484
    },
    {
        "content": "<p>So it's to do with the types as propositions mindset thing right?</p>",
        "id": 272564395,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330486
    },
    {
        "content": "<p>yeah, basically</p>",
        "id": 272564398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330494
    },
    {
        "content": "<p>So why not set them equal? Like : <code>Type u</code> is equal to <code>Sort u</code> if they represent the same thing?</p>",
        "id": 272564416,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330525
    },
    {
        "content": "<p>That's the way it used to be, but inductive types that have type <code>Sort u</code> are really badly behaved so we usually have them in <code>Type u</code> or <code>Prop</code></p>",
        "id": 272564475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330577
    },
    {
        "content": "<p>I suppose we could write <code>Sort (u+1)</code> but that's a really common case</p>",
        "id": 272564489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330610
    },
    {
        "content": "<p>and <code>Type = Type 0</code> is especially common since it's the type of all your favorite types</p>",
        "id": 272564496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330636
    },
    {
        "content": "<p>Ok, so it's due to some implementation thing in Lean not due to some conceptual thing like, <code>we need infinite types to dodge the paradox</code> ?</p>",
        "id": 272564505,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330651
    },
    {
        "content": "<p>No this is just a design question. Coq does it differently, there is no <code>Sort</code> but there is <code>Prop</code>, <code>Set</code> and <code>Type u</code> and don't ask me why they need two base universes</p>",
        "id": 272564573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330722
    },
    {
        "content": "<p>oh and <code>SProp</code></p>",
        "id": 272564578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330733
    },
    {
        "content": "<p>Agda has <code>Prop u</code> and <code>Type u</code> IIRC</p>",
        "id": 272564600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330788
    },
    {
        "content": "<p>Ok, I think I came out of this understanding a little more (at least why there are infinite of them).</p>",
        "id": 272564652,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330824
    },
    {
        "content": "<p>Thank you</p>",
        "id": 272564656,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330839
    },
    {
        "content": "<p>Oh and of course ZFC just has one universe</p>",
        "id": 272564667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330866
    },
    {
        "content": "<p>Because everything is a set?</p>",
        "id": 272564677,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330885
    },
    {
        "content": "<p>everything except the set of all sets</p>",
        "id": 272564681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330895
    },
    {
        "content": "<p>there are sets and classes and some classes can't be sets</p>",
        "id": 272564685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330910
    },
    {
        "content": "<p>That doesn't exist right?</p>",
        "id": 272564688,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645330912
    },
    {
        "content": "<p>and the universe itself is one of them</p>",
        "id": 272564740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330925
    },
    {
        "content": "<p>so roughly speaking ZFC loses the type theory ability to say that everything expressible in the system has some type</p>",
        "id": 272564776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645330974
    },
    {
        "content": "<p>that's what really forces the infinite hierarchy</p>",
        "id": 272564786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331000
    },
    {
        "content": "<p>Right</p>",
        "id": 272564790,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645331017
    },
    {
        "content": "<p>Using types we still can't say \"a : &lt;type of all types&gt;\", but we can say <code>a : Type*</code> to say that it resides in of the layers which is equivalent ?</p>",
        "id": 272564858,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645331094
    },
    {
        "content": "<p>Well, <code>Type*</code> isn't really a type, it's notation for <code>Type &lt;something that lean will deduce from context&gt;</code></p>",
        "id": 272564888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331143
    },
    {
        "content": "<p>What about in a situation like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">open_set_for_each</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272564943,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645331191
    },
    {
        "content": "<p>If you say <code>X : Type*</code> in an assumption, then lean will deduce that you want it to live in a universe named by a fresh universe variable</p>",
        "id": 272564956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331211
    },
    {
        "content": "<p>so lean turns your theorem into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">open_set_for_each.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272564968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331229
    },
    {
        "content": "<p>(the lean 3 syntax for that is actually a little different BTW, <code>theorem {u} open_set_for_each</code>, but this is weird and has been changed to be the sensible thing in lean 4)</p>",
        "id": 272565014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331279
    },
    {
        "content": "<p>And the only way we can actually use that theorem is by specifying an <em>actual</em> number ?</p>",
        "id": 272565054,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645331287
    },
    {
        "content": "<p>no, we can specify a universe expression as well</p>",
        "id": 272565061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331305
    },
    {
        "content": "<p>What would that look like?</p>",
        "id": 272565080,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645331341
    },
    {
        "content": "<p>for example if you are proving some other theorem with a <code>{u}</code> in it then you might use <code>open_set_for_each.{u}</code>, or maybe <code>open_set_for_each.{u+1}</code> or <code>open_set_for_each.{max u 3}</code></p>",
        "id": 272565086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331350
    },
    {
        "content": "<p>lean is very good at figuring the right indexes out so you almost never have to specify</p>",
        "id": 272565098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331382
    },
    {
        "content": "<p>In that situation is <code>u : nat</code> ?</p>",
        "id": 272565100,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645331384
    },
    {
        "content": "<p>not exactly. You can think of it that way, it represents a natural number, but not in a way that lean itself has access to. You can't write <code>def foo (n : nat) : Type n := ...</code></p>",
        "id": 272565167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331450
    },
    {
        "content": "<p>So how do I say <code>u</code> is a universe variable thing?</p>",
        "id": 272565184,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645331483
    },
    {
        "content": "<p>This is also on pain of contradiction, because if such a <code>foo</code> existed then the type of <code>foo</code> itself would have to live in <code>Type ω</code></p>",
        "id": 272565193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331492
    },
    {
        "content": "<p>You use <code>universe(s) u</code>  to declare universe variables, analogous to <code>variable(s) n : nat</code> statements</p>",
        "id": 272565241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331534
    },
    {
        "content": "<p>and to declare universe variables in a theorem statement you put the names in braces <em>before</em> the theorem name, like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">open_set_for_each</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272565275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331588
    },
    {
        "content": "<p>Or you can use <code>Type*</code> which implicitly declares an anonymous universe variable for the statement</p>",
        "id": 272565338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331670
    },
    {
        "content": "<p>Another trick I like is to just use <code>(X)</code> which declares <code>X : Sort*</code>, which lean will solve to <code>Sort u</code> or <code>Prop</code> or <code>Type u</code> as appropriate based on how it is used</p>",
        "id": 272565373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331728
    },
    {
        "content": "<p>it's short and very difficult to get wrong</p>",
        "id": 272565408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645331763
    }
]