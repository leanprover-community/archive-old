[
    {
        "content": "<p>Hi! I'm a C++ developer in Dublin. I'm trying to learn Lean by doing some exercises.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">t‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">‚à®</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">p</span><span class=\"bp\">‚ü©</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">t‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚à®</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">‚à®</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">p</span><span class=\"bp\">‚ü©</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">p</span><span class=\"bp\">‚ü©</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>t‚ÇÅ works but t‚ÇÇ fails with \"don't know how to synthesize placeholder\". How can I get Lean to tell me what/where this placeholder is? Is there something better than or.cases_on that I could be using?</p>",
        "id": 130864937,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1533334871
    },
    {
        "content": "<p>There is a known issue with using projection notation in conjunction with <code>@[elab_as_eliminator]</code> definitions like <code>or.cases_on</code>. You can fix the proof by either not using projection notation, i.e. <code>or.cases_on h</code> instead of <code>h.cases_on</code>, or by using <code>h.elim</code> instead (which is basically the same as <code>or.cases_on</code> without the weird elaborator marking)</p>",
        "id": 130865206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533335328
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 130865584,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1533336044
    },
    {
        "content": "<p>How can you tell <code>or.cases_on</code> is tagged <code>@[elab_as_eliminator]</code>? <code>#print or.cases_on</code> only tells me it's <code>@[reducible]</code></p>",
        "id": 130865651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533336144
    },
    {
        "content": "<p>Hm, that's interesting. <code>T.rec</code>, <code>T.rec_on</code>, and <code>T.cases_on</code> are automatically generated for every inductive type and are always treated as if they have <code>elab_as_eliminator</code> enabled, although you are right that there is no explicit indication of such. You can test it by making a copy of <code>or.cases_on</code> with exactly the definition <code>#print</code> says, and the lemma will typecheck; then if you add <code>elab_as_eliminator</code> you get exactly the same errors</p>",
        "id": 130865788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533336371
    },
    {
        "content": "<p><code>example : @or.cases_on = @or.elim := rfl</code>, and they're both there, so they must be different somehow ;-) It's how the elaborator elaborates them.</p>",
        "id": 130865850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533336498
    },
    {
        "content": "<p>you should be aware that that's not the best way to check that two definitions are the same according to lean, that is only up to defeq which ignores annotations and bindings, as well as unifying universes</p>",
        "id": 130865947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533336645
    },
    {
        "content": "<p>Also, strange as it may sound I'm pretty sure there are duplicate definitions (completely identical) in lean. Often this has to do with renaming</p>",
        "id": 130866021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533336735
    },
    {
        "content": "<p>I got this to work with <br>\n<code>Œª h, or.cases_on h (Œª ‚ü®x, p‚ü©, ‚ü®x, or.inl p‚ü©) (Œª ‚ü®x, p‚ü©, ‚ü®x, or.inr p‚ü©)</code></p>",
        "id": 131118119,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533745213
    },
    {
        "content": "<p>Can someone explain what the \"synthesize placeholder\" error actually means? It is by far the most common error I get and I currently get rid of it by making random transformations to the source until it goes away</p>",
        "id": 131118228,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533745354
    },
    {
        "content": "<p>it means the proof is unfinished</p>",
        "id": 131118304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533745450
    },
    {
        "content": "<p>proof that the term typechecks?</p>",
        "id": 131118316,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533745470
    },
    {
        "content": "<p>lean is saying \"there is a missing part of the proof and I don't know how to fill it in\"</p>",
        "id": 131118320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533745478
    },
    {
        "content": "<p>No, the term itself is the proof</p>",
        "id": 131118344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533745512
    },
    {
        "content": "<p>I often get it where the goal that it is trying to prove is <code>Type ?</code>. What should I do then?</p>",
        "id": 131118347,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533745517
    },
    {
        "content": "<p>That means there is a missing type somewhere</p>",
        "id": 131118365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533745537
    },
    {
        "content": "<p>for example, looking at the term you just gave without any other context, I can't figure out the type of <code>h</code></p>",
        "id": 131118414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533745569
    },
    {
        "content": "<p>I know it is an <code>or</code> of something but I don't know what</p>",
        "id": 131118422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533745582
    },
    {
        "content": "<p>so if I were lean I would say \"couldn't synth placeholder <code>|- Type ?</code>\"</p>",
        "id": 131118427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533745603
    },
    {
        "content": "<p>Ok let me paste some code where I can't figure out what it wants<br>\nI put this file in <code>mathlib/category_theory/scratch.lean</code></p>\n<div class=\"codehilite\"><pre><span></span>import .category\nimport .functor\nuniverses u1 u2 v1 v2\n\nnamespace category_theory\n    section\n        variables\n            {C : Type u1} [ùíû : category.{u1 v1} C]\n            {D : Type u2} [ùíü : category.{u2 v2} D]\n        include ùíû ùíü\n        def t : Œ† (a b c : D) (p : a = b) (x : a ‚ü∂ c), b ‚ü∂ c := Œª a b c p x, eq.rec x p\n        def t2 (F G : C ‚Üù D) (ob_eq : ‚àÄ (Z : C), F Z = G Z)  (X Y : C) (f : X ‚ü∂ Y) : (G X ‚ü∂ F Y)\n            := t (F X) (G X) (F Y) (ob_eq X) (F.map f)\n    end\nend category_theory\n</pre></div>\n\n\n<p>And I get a synth <code>Type ?</code> error for <code>t</code> in <code>t2</code> but I can't figure out which type I am missing</p>",
        "id": 131119049,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533746333
    },
    {
        "content": "<p>Just looking at this (haven't built recent mathlib yet), I think the problem is that <code>t</code> \"depends on\" <code>C</code>, because of <code>include ùíû</code>, but there's nothing in the type of <code>t</code> which can ever determine what <code>C</code> has to be.</p>",
        "id": 131119269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533746594
    },
    {
        "content": "<p>Ah, so if you are in a section and write <code>variables</code>, then all definitions in that section implicitly depend on these variables, even if they are not used in the definition?</p>",
        "id": 131119333,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533746653
    },
    {
        "content": "<p>And so there's no reason that <code>t</code>'s <code>C</code> in the use of <code>t</code> in <code>t2</code>needs to be the same as the <code>C</code> in <code>t2</code>, so Lean can't figure out how to assign it.</p>",
        "id": 131119335,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533746658
    },
    {
        "content": "<p>Not in general, but using <code>include</code> forces the <code>variable</code> to be included as a parameter to every subsequent definition.</p>",
        "id": 131119347,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533746692
    },
    {
        "content": "<p>Where can I find some docs on <code>include</code>? I find it cryptic</p>",
        "id": 131119364,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533746719
    },
    {
        "content": "<p>So if you show the full inferred type of <code>t</code>, it should begin <code>t : \\Pi {C : Type u1} [ùíû : category.{u1 v1} C] ...</code></p>",
        "id": 131119365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533746721
    },
    {
        "content": "<p><code>ùíû</code>was included because of the <code>include</code>, and <code>C</code> was included because <code>ùíû</code> depends on it</p>",
        "id": 131119421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533746768
    },
    {
        "content": "<p>If I comment out <code>include</code>, then the <code>\\hom</code> arrows become errors. How would I get rid of those errors without using <code>include</code>?</p>",
        "id": 131119458,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533746846
    },
    {
        "content": "<p>It can't find evidence for <code>category D</code>.</p>",
        "id": 131119525,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533746901
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html</a> mentions <code>include</code>/<code>omit</code> in the first section. I don't remember whether it is also explained elsewhere in TPIL</p>",
        "id": 131119547,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533746942
    },
    {
        "content": "<p>In this case, you could put <code>include ùíü</code> between the definitions of <code>t</code> and <code>t2</code></p>",
        "id": 131119558,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533746963
    },
    {
        "content": "<p>Fixed code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">functor</span>\n<span class=\"n\">universes</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n    <span class=\"kn\">section</span>\n        <span class=\"kn\">variables</span>\n            <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u1</span> <span class=\"n\">v1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n            <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíü</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u2</span> <span class=\"n\">v2</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n        <span class=\"n\">include</span> <span class=\"err\">ùíü</span>\n        <span class=\"n\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">x</span> <span class=\"n\">p</span>\n        <span class=\"n\">include</span> <span class=\"err\">ùíû</span>\n        <span class=\"n\">def</span> <span class=\"n\">t2</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">‚Üù</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ob_eq</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">Z</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"n\">Z</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">F</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n            <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ob_eq</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n</pre></div>",
        "id": 131119625,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533747051
    },
    {
        "content": "<p>Normally you could just omit the names <code>ùíû : </code> and <code>ùíü : </code> and the include statements and Lean would figure out where it needs the instance variables. The fact that that doesn't work here is some combination of there being extra universe parameters involved and a bug in Lean, I think.</p>",
        "id": 131119700,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533747125
    },
    {
        "content": "<p>Ok but this then errors for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">functor</span>\n<span class=\"n\">universes</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n    <span class=\"kn\">section</span>\n        <span class=\"kn\">variables</span>\n            <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u1</span> <span class=\"n\">v1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n            <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u2</span> <span class=\"n\">v2</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n        <span class=\"c1\">--include ùíü</span>\n        <span class=\"n\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">x</span> <span class=\"n\">p</span>\n        <span class=\"c1\">--include ùíû</span>\n        <span class=\"n\">def</span> <span class=\"n\">t2</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">‚Üù</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ob_eq</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">Z</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"n\">Z</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">F</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n            <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ob_eq</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n</pre></div>",
        "id": 131119729,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533747175
    },
    {
        "content": "<p><code>kernel failed to type check declaration 't' this is usually due to a buggy tactic or a bug in the builtin elaborator</code></p>",
        "id": 131119748,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533747217
    },
    {
        "content": "<p>cool</p>",
        "id": 131119757,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533747239
    },
    {
        "content": "<p>which must be why it had <code>ùíû : </code> in to start with, to avoid the lean bug</p>",
        "id": 131119821,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533747285
    },
    {
        "content": "<p>Yes. The reason is either that Lean doesn't know what universe parameters to specialize <code>‚ü∂</code> to, or that there's a bug where including the instance variable doesn't cause <code>C</code> to also get included.  I don't remember the exact details any more.<br>\nWhen you get that \"kernel failed to type check declaration\" error, it means it failed to include <code>C</code>, I think.</p>",
        "id": 131119827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533747293
    },
    {
        "content": "<p>Right, the workaround is that when you manually tell it to include the <code>category</code> instance, then it can correctly infer that it needs <code>C</code> too. The downside is that now you are responsible for making sure the right variables are <code>include</code>d--if you have too many then you end up with your original issue.</p>",
        "id": 131119926,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533747379
    },
    {
        "content": "<p>thanks so much for your help</p>",
        "id": 131119929,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533747383
    },
    {
        "content": "<p>In general, this class of error can be tough to figure out. I don't know of a better way than thinking really hard about what Lean is trying to do and figuring out where it might be getting stuck.</p>",
        "id": 131119952,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533747433
    },
    {
        "content": "<p>No problem</p>",
        "id": 131119954,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533747435
    },
    {
        "content": "<p>It seems like solving these errors requires intimately knowing what the elaborator is doing.  And from what I know, the elaborator is very elaborate</p>",
        "id": 131120046,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533747569
    },
    {
        "content": "<blockquote>\n<p>Normally you could just omit the names <code>ùíû : </code> and <code>ùíü : </code> and the include statements and Lean would figure out where it needs the instance variables.</p>\n</blockquote>\n<p>I think this is not true. To me it seems Lean will always include these statements. That explains why we sometimes see unneeded or duplicate instance arguments, even in mathlib</p>",
        "id": 131120215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533747753
    },
    {
        "content": "<blockquote>\n<p>It seems like solving these errors requires intimately knowing what the elaborator is doing.  And from what I know, the elaborator is very elaborate</p>\n</blockquote>\n<p>Unfortunately and fortunately, this is all very true.</p>",
        "id": 131120241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533747814
    },
    {
        "content": "<p>It would be great if when there was an elaborator error, a textbox appeared that you could enter the missing type or proof into.</p>",
        "id": 131120395,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533747983
    },
    {
        "content": "<p>Lean will include an unnamed typeclass variable when all of its dependencies are included (usually because they are mentioned directly in the statement or are dependencies of something mentioned). Like so:</p>\n<div class=\"codehilite\"><pre><span></span>variables (A : Type) [group A]\nexample (x : A) : true := ... -- group A is included\nexample : true := ... -- group A is not included\n</pre></div>",
        "id": 131120407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533748006
    },
    {
        "content": "<p>yes, this matches what I saw</p>",
        "id": 131120439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533748067
    },
    {
        "content": "<p>Yes, good point <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>.</p>",
        "id": 131120443,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533748079
    },
    {
        "content": "<p>Lean will never include a named typeclass variable unless it is mentioned:</p>\n<div class=\"codehilite\"><pre><span></span>variables (A : Type) [G : group A]\nexample (x : A) : true := ... -- group A is not included\nexample : x + x = x := ... -- group A is included\n</pre></div>\n\n\n<p>And an included typeclass variable is always included:</p>\n<div class=\"codehilite\"><pre><span></span>variables (A : Type) [G : group A]\ninclude G\nexample (x : A) : true := ... -- group A is included\nexample : true := ... -- group A is included\n</pre></div>",
        "id": 131120505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533748123
    },
    {
        "content": "<p>I will add some documentation about <code>include</code> right in the <code>category_theory</code> files, specialised to the use case there.</p>\n<p>Unfortunately <code>category C</code> has an unbound universe level, because we need to know the universe level of the morphisms, and this is not determined by the universe level of <code>C</code> itself. (This design decision is constrained by the desire to be able to write uniform code for small categories and large categories.)</p>\n<p>When we write <code>variable [category.{u v} C]</code>, Lean is reasonably rather hesistant to use this variable, unless it is sure that <code>v</code> is the actually intended universe level. To avoid having to explicitly write this universe variable in every definition that you're hoping will make use of this <code>[category C]</code> variable, we give it a name as in <code>[ùíû :  category.{u v} C]</code> and explicitly include it in every following declaration, via <code>include ùíû</code>.</p>\n<p>This then adds a danger: if you write another declaration that doesn't actually care about this category (e.g. one declaration refers to four different categories, but a subsequent one only mentions two), this typeclass variable will still be included as an argument, mucking everything up. Hence <code>include ùíû</code> statements need to be carefully scoped with <code>section .... end</code> commands.</p>",
        "id": 131137096,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533768415
    }
]