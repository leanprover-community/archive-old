[
    {
        "content": "<p>Is there way to apply <code>rw</code> to the right hand side of an equation only?  This doesn't work (unknown <code>h1.right</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h1.right</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I want to get <code>x*x =x*1</code>.</p>",
        "id": 220881932,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608831112
    },
    {
        "content": "<p>You can use <code>conv_rhs</code>. See <a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a></p>",
        "id": 220881992,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1608831172
    },
    {
        "content": "<p>Actually I don't know how to make <code>conv</code> work on a hypothesis.  The article shows how to operate only on the goal state.  I am in this situation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">mul_one</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex2c</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span>\n  <span class=\"kd\">begin</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The tactic state after the <code>conv begin</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I want to apply <code>mul_one</code> to the right hand side of <code>h1</code> to get <code>x*x =x*1</code>.  <code>conv</code> mode only lets me operate on <code>| x = 0 ∨ x = 1</code>.</p>",
        "id": 220884445,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608834526
    },
    {
        "content": "<p><code>conv at h1</code></p>",
        "id": 220884463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608834579
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#conv\">tactic#conv</a> should cover this</p>",
        "id": 220884470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608834591
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 220884472,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608834592
    },
    {
        "content": "<p>As should the hover text for <code>conv</code> in vs-code, unless it's one of those tactics where the help formatter crashes.</p>",
        "id": 220884528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608834627
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">mul_one</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex2c</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"n\">at</span> <span class=\"n\">h1</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220884617,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1608834757
    },
    {
        "content": "<p>DONE.  This was hard for me. There's probably a 2-liner for this in Lean.  I'm just happy it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">integral_domain.only_idempotents_are_0_and_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"n\">at</span> <span class=\"n\">h1</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">sub_eq_zero.mpr</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">mul_sub</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero.mp</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">or.inr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_right_inj'</span> <span class=\"n\">h4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220885764,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608836417
    },
    {
        "content": "<p>I edited my post above to include a shorter proof.</p>",
        "id": 220885834,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1608836525
    },
    {
        "content": "<p>Note, this is true for a <code>domain</code>, the commutitivity is not used here.</p>",
        "id": 220885966,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608836758
    },
    {
        "content": "<p>Compressed version of Bryan's solution</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex2c</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">sub_eq_zero</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 220886704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608837775
    },
    {
        "content": "<p>simp ftw:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex2c</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">sub_eq_zero</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 220886776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608837861
    },
    {
        "content": "<p>term mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex2c</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">or_iff_not_imp_left.2</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">mul_left_cancel'</span> <span class=\"n\">hx</span> <span class=\"bp\">$</span> <span class=\"n\">h1.trans</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 220886946,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608838090
    }
]