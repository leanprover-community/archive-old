[
    {
        "content": "<p>Hello, I have a problem with the following snippet of code: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">axiom</span> <span class=\"n\">a1</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span>   <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span>  <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">a2</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">a3</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span>   <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">a4</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span>     <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span>  <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">a5</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span>     <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span>  <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">a6</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span>   <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span>  <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">a7</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span>   <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span>  <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">a8</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">a9</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span>   <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span>  <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">a10</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span>   <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span>  <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">a11</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">a12</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span>   <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">a13</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span>   <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">a14</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span>   <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">l1</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">@</span><span class=\"n\">a1</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)))</span> <span class=\"c1\">-- sub p</span>\n        <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span>                                <span class=\"c1\">-- sub q</span>\n\n<span class=\"n\">def</span> <span class=\"n\">l2</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"n\">l1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">a2</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"c1\">-- MP</span>\n\n<span class=\"n\">def</span> <span class=\"n\">l3</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">@</span><span class=\"n\">a1</span>\n        <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"c1\">-- sub p</span>\n        <span class=\"n\">p</span>       <span class=\"c1\">-- sub q</span>\n\n<span class=\"n\">def</span> <span class=\"n\">l4</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">@</span><span class=\"n\">a2</span>\n        <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span>             <span class=\"c1\">-- sub p</span>\n        <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span>       <span class=\"c1\">-- sub q</span>\n        <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"c1\">-- sub r</span>\n\n<span class=\"n\">def</span> <span class=\"n\">l5</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"n\">l4</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">l2</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"c1\">-- MP</span>\n\n<span class=\"n\">def</span> <span class=\"n\">e1</span>  <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"n\">l5</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">l3</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"c1\">-- MP</span>\n</pre></div>\n\n\n<p>I need to prove some theorems for my logic assignment using the Hilbert system above. The code works normally as it is, but when I change the <em>defs</em> to <em>lemmas</em> and <em>theorems</em>, Lean says that it cannot infer the type of the theorem/lemma, even though there is clearly enough information to do so, which deeply puzzles me.</p>\n<p>I would be very grateful for an explanation and any general suggestions regarding my code, since I'm only making my baby steps with Lean.</p>\n<p>Thanks!</p>",
        "id": 183772819,
        "sender_full_name": "Mikołaj Gradowski",
        "timestamp": 1576691336
    },
    {
        "content": "<p>I don't think you can have lemmas without explicitly giving the statement. At least that would look very weird</p>",
        "id": 183773026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576691483
    },
    {
        "content": "<p>Since you are redoing such basic logic, it's probably dangerous to use the built in logic connectors. You could very well end up implicitly using what you are meant to prove.</p>",
        "id": 183773192,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576691594
    },
    {
        "content": "<p>If the definitions are compiling fine, then use <code>#check</code> to see the types of the lemmas and then when you switch to lemma/theorem, explicitly put the type in. I guess in theory Lean should be able to work out the type from the proof but on the other hand it's not something I've seen before.</p>",
        "id": 183773207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576691606
    },
    {
        "content": "<p>You also have weird choices of implicit arguments if you need to use <code>@</code> evreywhere.</p>",
        "id": 183773246,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576691634
    },
    {
        "content": "<p>Even if Lean could work out the type, it's still good practice to give the types of the things you've proved: it makes it easier to see what lemmas we've proved when reading code</p>",
        "id": 183773322,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576691682
    },
    {
        "content": "<blockquote>\n<p>I don't think you can have lemmas without explicitly giving the statement. At least that would look very weird</p>\n</blockquote>\n<p>You can't, for more technical reasons than just \"looking weird.\" Lean processes lemmas in parallel. Lemma <code>b</code> may reference lemma <code>a</code>, but get type checked before. This is fine, as long as it knows the type of <code>a</code>, since proofs are irrelevant. But if you don't give the type of <code>a</code>, it would have to process <code>a</code> first.</p>",
        "id": 183773370,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576691709
    },
    {
        "content": "<p>If you are trying to develop a theory of <code>-&gt;</code> from first principles then you could use a different arrow to the one Lean already uses -- e.g. the one coming from <code>\\hom</code> (assuming you're not going to be importing any category theory libraries...)</p>",
        "id": 183773398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576691729
    },
    {
        "content": "<p>Wow, I didn't expect such quick and insightful feedback. It all seems reasonable to me now. Thanks for all the answers!</p>",
        "id": 183773569,
        "sender_full_name": "Mikołaj Gradowski",
        "timestamp": 1576691842
    },
    {
        "content": "<p>What Patrick is saying with the implicits is that if you write <code>axiom a1  : Π ( p q   : Prop ),  p → (q → p)</code> with <code>(</code> not <code>{</code> then you don't have to use <code>@</code> later on.</p>",
        "id": 183773661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576691890
    },
    {
        "content": "<p>But then I'll have to explicitly instantiate each axiom every time, right?</p>",
        "id": 183773760,
        "sender_full_name": "Mikołaj Gradowski",
        "timestamp": 1576691954
    },
    {
        "content": "<p>I don't really know what that means (sorry, I'm a mathematician). All I know is that if you change <code>{</code> to <code>(</code> then you don't have to write <code>@</code>. People tend not to use axioms in Lean. You could just be proving all of these things</p>",
        "id": 183774938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576692673
    }
]