[
    {
        "content": "<p>Is there syntax sugar for <code>dite</code>? It would be nice to have a \"dependent <code>if</code>\" or maybe <code>if</code> could add the hypothesis to the context and generate <code>ite</code> or <code>dite</code> based on whether or not it was used.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">pred</span>\n</code></pre></div>",
        "id": 202853194,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593831856
    },
    {
        "content": "<p><code>if h : f = 0 then 0 else f.pred h</code></p>",
        "id": 202853205,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593831893
    },
    {
        "content": "<p><code>if h : p then t else e = dite p (\\lam h, t) (\\lam h, e)</code></p>",
        "id": 202853216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593831908
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 202853335,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593832177
    },
    {
        "content": "<p>Is there an equivalent for <code>match</code>? I want a proof of equality with (e.g. <code>cmp x y = lt</code>) in each branch like I would have with the <code>cases</code> tactic.</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">match</span> <span class=\"n\">cmp</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ordering</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- I want a hypothesis `h : cmp x y = lt` here!</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ordering</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ordering</span><span class=\"bp\">.</span><span class=\"n\">gt</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202901065,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593915882
    },
    {
        "content": "<p>I came up with the following, which is horribly ugly.</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"bp\">@</span><span class=\"n\">ordering</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">cmp</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cmp</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 202901650,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593917132
    },
    {
        "content": "<p>I am trying to define a function that lives on <code>Type</code>. I remember seeing here a while ago that tactics should only be used to generate proof and not definitions of function.</p>",
        "id": 202901704,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1593917233
    },
    {
        "content": "<p>You should not use tactics for definitions if you care about details of the generated term (e.g., presence of unneeded <code>id</code>s etc). If you don't care, then you can use tactics.</p>",
        "id": 202903577,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593921060
    },
    {
        "content": "<p>You can also define <code>mydef</code> using tactics, then <code>#print mydef</code>.</p>",
        "id": 202903591,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593921118
    },
    {
        "content": "<p>I don't know how to deal with <code>match</code> but you can use something like this (from <code>algebra/order</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- `compares o a b` means that `a` and `b` have the ordering relation</span>\n<span class=\"cm\">  `o` between them, assuming that the relation `a &lt; b` is defined -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">compares</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ordering</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">gt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">compares</span><span class=\"bp\">.</span><span class=\"n\">eq_lt</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">o</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">compares</span> <span class=\"n\">o</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">lt</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">injection</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">h&#39;</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">gt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">injection</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">lt_asymm</span> <span class=\"n\">h</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">compares</span><span class=\"bp\">.</span><span class=\"n\">eq_eq</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">o</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">compares</span> <span class=\"n\">o</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">eq</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">injection</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">h</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">gt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">injection</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 202903652,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593921206
    },
    {
        "content": "<p>Now I know:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">ordering</span><span class=\"bp\">.</span><span class=\"n\">compares</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ordering</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"n\">compares</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"n\">swap</span><span class=\"bp\">.</span><span class=\"n\">compares</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">ordering</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"n\">ordering</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">|</span> <span class=\"n\">ordering</span><span class=\"bp\">.</span><span class=\"n\">gt</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202903705,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593921303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/Syntax.20sugar.20for.20.60dite.60/near/202903705\">said</a>:</p>\n<blockquote>\n<p>Now I know:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">ordering</span><span class=\"bp\">.</span><span class=\"n\">compares</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ordering</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"n\">compares</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"n\">swap</span><span class=\"bp\">.</span><span class=\"n\">compares</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">ordering</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"n\">ordering</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">|</span> <span class=\"n\">ordering</span><span class=\"bp\">.</span><span class=\"n\">gt</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I ended up setting for a solution using <code>algebra/order</code>. This lemma is very elegant, thank you!</p>",
        "id": 202949890,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1594004619
    }
]