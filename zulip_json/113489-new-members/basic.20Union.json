[
    {
        "content": "<p>hi am trying to complete the second <code>lean sorry </code>,  but I don't really know what command I should use, I trying library search but didn't work.<br>\nit seem pretty straightforward getting y in union A form y in A i.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">image</span><span class=\"o\">,</span>\n<span class=\"n\">dsimp</span><span class=\"o\">,</span>\n<span class=\"n\">ext1</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">dsimp</span><span class=\"o\">,</span>\n\n<span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">dsimp</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2.1</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Union</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 216172067,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604983275
    },
    {
        "content": "<p><code>rw mem_Union</code></p>",
        "id": 216172621,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1604984123
    },
    {
        "content": "<p>Should take it into the form that you can then feed in that <code>y \\in A i</code></p>",
        "id": 216172676,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1604984184
    },
    {
        "content": "<p>thx, it worked, but how could I have known that?</p>",
        "id": 216172774,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604984379
    },
    {
        "content": "<p>now am trying a different problem in which I have  <code>x ∈ Inter A </code> and am trying to reach <code>x ∈ A I </code></p>",
        "id": 216172883,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604984520
    },
    {
        "content": "<p>I tried to mimic your solution and gave a shot at <code> rw mem_Inter </code></p>",
        "id": 216172999,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604984663
    },
    {
        "content": "<p>oh, it did work when I applied it on the right place</p>",
        "id": 216173082,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604984776
    },
    {
        "content": "<p>but still, how did you know what do next?</p>",
        "id": 216173085,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604984801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359760\">Pedro Castilho</span> <a href=\"#narrow/stream/113489-new-members/topic/basic.20Union/near/216172774\">said</a>:</p>\n<blockquote>\n<p>thx, it worked, but how could I have known that?</p>\n</blockquote>\n<p>with  a little practice you can start guessing names of lemmas. You can also look in the file near where the term you are trying to get rid of is defined. if I click <code>Union A</code> in vscode a little box pops up with an arrow which takes me to the definition, and I see the lemma <code>mem_Union</code> a few lines below the definition. In fact in this case its a simp lemma, so <code>simp</code> would also make progress here.</p>",
        "id": 216173336,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1604985304
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/7euvIuWF79BXxLNFoVLf8YSQ/Screen-Shot-2020-11-10-at-00.15.21.png\">Screen-Shot-2020-11-10-at-00.15.21.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7euvIuWF79BXxLNFoVLf8YSQ/Screen-Shot-2020-11-10-at-00.15.21.png\" title=\"Screen-Shot-2020-11-10-at-00.15.21.png\"><img src=\"/user_uploads/3121/7euvIuWF79BXxLNFoVLf8YSQ/Screen-Shot-2020-11-10-at-00.15.21.png\"></a></div>",
        "id": 216173345,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1604985345
    },
    {
        "content": "<p>The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↪</mo></mrow><annotation encoding=\"application/x-tex\">\\hookrightarrow</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↪</span></span></span></span> arrow</p>",
        "id": 216173365,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1604985363
    },
    {
        "content": "<p>I actually tried clicking in the def of Union but it gave an error</p>",
        "id": 216218492,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1605018469
    },
    {
        "content": "<p>so I wasn't able to lookup this method</p>",
        "id": 216218581,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1605018499
    },
    {
        "content": "<p>Lean's maths library conforms to a pretty rigid naming convention, and VS Code provides a powerful interface to it. There's some <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> conventions which you might want to glance over.</p>",
        "id": 216224360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605020707
    },
    {
        "content": "<p>You used <code>library_search</code> too late <span class=\"user-mention\" data-user-id=\"359760\">@Pedro Castilho</span>  :-) Here's some proofs you might like :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"c1\">-- so I don't have to keep writing set.blah</span>\n\n<span class=\"c1\">-- it's in the library</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">image_Union</span><span class=\"o\">,</span> <span class=\"c1\">-- I found this with `library_search`, but I could have guessed the name anyway</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- A powerful tactic can solve this by brute force</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tidy</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- first principles proof -- click through it to see what's going on</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hxi</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hxi</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216226163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605021583
    },
    {
        "content": "<p>uau, thank a lot <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , I didn't know about the names conventions that will really help</p>",
        "id": 216292100,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1605053094
    },
    {
        "content": "<p>and the proofs are great also</p>",
        "id": 216292118,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1605053106
    },
    {
        "content": "<p>A great trick with the names is to half-guess what the name might be, type that, and then press ctrl-space to see possible completions</p>",
        "id": 216292220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605053186
    },
    {
        "content": "<p><a href=\"https://youtu.be/bghu6jVt0SY\">https://youtu.be/bghu6jVt0SY</a> the second half of this shows the trick one can use</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"bghu6jVt0SY\" href=\"https://youtu.be/bghu6jVt0SY\"><img src=\"https://i.ytimg.com/vi/bghu6jVt0SY/default.jpg\"></a></div>",
        "id": 216293955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605054644
    }
]