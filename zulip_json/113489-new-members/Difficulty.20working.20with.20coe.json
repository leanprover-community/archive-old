[
    {
        "content": "<p>I have in my proof a definition <code>instance has_coe (r : ℤ) : has_coe (A r) G := { coe := to_fun }</code>. However, for <code>ar : A r</code>, when I swap out <code>(to_fun ar : G)</code> in my lemmas for <code>(ar : G)</code>, I can't work out how to unfold <code>coe</code> in my proofs.</p>\n<p>The full code is self-contained, and at <a href=\"https://github.com/pygae/lean-ga/pull/5/files\">https://github.com/pygae/lean-ga/pull/5/files#</a>. I've added some comments on the lines where <code>coe</code> is causing me difficulty.</p>\n<p>Feedback would be very appreciated, and thanks all for all the help so far.</p>",
        "id": 202692502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593698675
    },
    {
        "content": "<p>That coe is a bad instance</p>",
        "id": 202693192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593698989
    },
    {
        "content": "<p>How so?</p>",
        "id": 202693280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593699021
    },
    {
        "content": "<p>because neither <code>A r</code> nor <code>G</code> have any interesting structure to key on</p>",
        "id": 202693290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593699026
    },
    {
        "content": "<p>Is it generally true that type-classes should never provide <code>coe</code>?</p>",
        "id": 202693444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593699103
    },
    {
        "content": "<p>When lean goes looking for a coe the right argument is unbound, so it's trying to see what <code>A r</code> can coerce to</p>",
        "id": 202693518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593699124
    },
    {
        "content": "<p>It can depend on typeclasses on <code>A r</code> but not on <code>A</code> and certainly not on <code>G</code></p>",
        "id": 202693621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593699182
    },
    {
        "content": "<p>However, you can use a notation to avoid mentioning <code>A r</code> and <code>G</code> in the section</p>",
        "id": 202693753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593699240
    },
    {
        "content": "<p>Presumably it does find my <code>coe</code> though, since the lemma statements are valid if I make the change - it's just my proofs which suffer</p>",
        "id": 202694713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593699668
    },
    {
        "content": "<p>Local notation did the trick, thanks! (done in <a href=\"https://github.com/pygae/lean-ga/commit/9643c01d7f7a69da952ffeaccad6b6dca55b4cd6\">https://github.com/pygae/lean-ga/commit/9643c01d7f7a69da952ffeaccad6b6dca55b4cd6</a>)</p>\n<p>To make <code>coe</code> simplify, I had to add <code>lemma coe_def {r : ℤ} (v : A r) : (v : G) = to_fun v := rfl</code></p>",
        "id": 202705326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593704353
    },
    {
        "content": "<p>Is there any way to take existing notation and bind the inferred arguments without repeating the symbols and precedence?</p>",
        "id": 202705369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593704373
    }
]