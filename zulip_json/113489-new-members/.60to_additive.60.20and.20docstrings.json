[
    {
        "content": "<p>Because it works like this for names of lemmas, I (naively) assumed that <code>to_additive</code> would use the existing docstring, if present, and I only need to pass a docstring to <code>to_additive</code> if I want to phrase it differently.</p>\n<p>But I have grown slightly less naive since, and learned that this is not the case, and a docstring always needs to be repeated for <code>to_additive</code>. Correct? (In <a href=\"https://github.com/leanprover-community/mathlib/pull/12476\">#12476</a> I propose to improve the documentation at  &lt;<a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group/to_additive.html#to_additive.attr\">https://leanprover-community.github.io/mathlib_docs/algebra/group/to_additive.html#to_additive.attr</a>&gt;, also fixing the syntax erring example with the docstring between the attribute and the definition, which I believe does not work.)</p>\n<p>I assume it’s simply not easily possible to let <code>to_additive</code> re-use an existing docstring, else it would already be the case?</p>\n<p>There are lemmas in mathlib that have a docstring, but no doc string in the <code>to_additive</code> attribute. Would it be possible and worthwhile to build  a linter that complains about that?</p>",
        "id": 274296720,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646560465
    },
    {
        "content": "<p>Such a linter was a very nice first exercise in meta-programming! PR at <a href=\"https://github.com/leanprover-community/mathlib/pull/12487\">#12487</a>. Still waiting for CI to tell me how many lemmas are missing an additive doc string…</p>",
        "id": 274366558,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646645225
    },
    {
        "content": "<p>Odd, no lint error reported by CI…<br>\nBut there are failures, e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod_ite_eq'\">docs#finset.prod_ite_eq'</a> vs. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_ite_eq'\">docs#finset.sum_ite_eq'</a>.<br>\nAnd if I put <code>#lint</code> at the end of that file, I get the lint error reported.<br>\nBut in <a href=\"https://github.com/leanprover-community/mathlib/pull/12487\">https://github.com/leanprover-community/mathlib/pull/12487</a> no lint error is reported…<br>\nIs CI running a different set of linters than <code>#lint</code>?</p>",
        "id": 274377333,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646651830
    },
    {
        "content": "<p>Probably, it says “with 24 linters” both on master and on my branch.</p>",
        "id": 274377474,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646651904
    },
    {
        "content": "<p>Ah, there is a definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The default linters used in mathlib CI. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mathlib_linters</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">do</span>\n<span class=\"n\">ls</span> <span class=\"bp\">←</span> <span class=\"n\">get_checks</span> <span class=\"n\">tt</span> <span class=\"o\">[]</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">ls</span> <span class=\"o\">:=</span> <span class=\"n\">ls.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">`</span><span class=\"n\">linter</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">ls</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>playing with that now…</p>",
        "id": 274377690,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646652073
    },
    {
        "content": "<p>Ok, it works now, and reveals ~350 affected lemmas. Not sure if fixing all of them is worth it. I'll check if the linter can be configured to only complain about new lemmas (I think I've seen something along these lines), then this can be improved over time. Is that reasonable?</p>",
        "id": 274409836,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646668020
    },
    {
        "content": "<p>Yes, we can add 350 new entries to <code>nolints.txt</code></p>",
        "id": 274409998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646668090
    },
    {
        "content": "<p>Ok, great, will do that.</p>",
        "id": 274410064,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646668115
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span> <span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">nolints.txt</span>\n<span class=\"mi\">950</span> <span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">nolints.txt</span>\n</code></pre></div>",
        "id": 274410088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646668126
    },
    {
        "content": "<p>Ha, just one day after this got merged it catches mistakes ij my own PRs…<br>\nInterestingly not because I forgot the additive docstring, but because I wrote <code>/-</code> instead of <code>/--</code> for the normal one…</p>",
        "id": 274656262,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646814819
    },
    {
        "content": "<p>Two birds one stone?</p>",
        "id": 274657847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646815880
    },
    {
        "content": "<p>FIrst batch of nolint extermination: <a href=\"https://github.com/leanprover-community/mathlib/pull/12578\">#12578</a></p>",
        "id": 274911125,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646955125
    }
]