[
    {
        "content": "<p>I want to show that gcd(a,b) \\mid a-b<br>\nthis is what I typed into lean:<br>\nhave h3: nat.gcd a b ∣  a - b ,<br>\ncases nat.gcd_dvd a b,<br>\napply dvd_sub,</p>\n<p>However, I get an error under apply saying that unable to unify m_1 \\mid m_2-m_3 even though the goal is in this exact form.<br>\nNote that using the exact same technique and div_add I am able to prove the addition version of this lemma.<br>\n<a href=\"/user_uploads/3121/KjKMTl06wb_UwjeJDFDXMFcQ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KjKMTl06wb_UwjeJDFDXMFcQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/KjKMTl06wb_UwjeJDFDXMFcQ/image.png\"></a></div>",
        "id": 206639536,
        "sender_full_name": "Ben Nale",
        "timestamp": 1597185556
    },
    {
        "content": "<p>the typeclasses are different</p>",
        "id": 206640106,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597186053
    },
    {
        "content": "<p><code>dvd_sub</code> is for commutative rings</p>",
        "id": 206640114,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597186063
    },
    {
        "content": "<p>but <code>nat</code> is only a commutative semiring</p>",
        "id": 206640138,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597186073
    },
    {
        "content": "<p>the subtraction in nat is different</p>",
        "id": 206640204,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597186095
    },
    {
        "content": "<p>Oh so I could say (nat.gcd a b : \\Z ) \\mid (a-b :\\Z)</p>",
        "id": 206640229,
        "sender_full_name": "Ben Nale",
        "timestamp": 1597186110
    },
    {
        "content": "<p>Yes</p>",
        "id": 206640251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597186124
    },
    {
        "content": "<p>If you type <code>#check @dvd_sub</code> you can see all the type classes required to make the lemma work, and you can see if <code>nat</code> has them by trying to construct them with <code>apply_instance</code>, e.g. <code>example : comm_ring \\N := by apply_instance</code>, which of course fails because nat isn't a ring.</p>",
        "id": 206640418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597186220
    },
    {
        "content": "<p>Oh the apply works now. Though using cases on nat.gcd_dvd a b produces to hypotheses with no arrows. But we need arrows</p>",
        "id": 206640436,
        "sender_full_name": "Ben Nale",
        "timestamp": 1597186234
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/RJSwS-Xa3Z1rDn5btM3YIxWL/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RJSwS-Xa3Z1rDn5btM3YIxWL/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/RJSwS-Xa3Z1rDn5btM3YIxWL/image.png\"></a></div>",
        "id": 206640454,
        "sender_full_name": "Ben Nale",
        "timestamp": 1597186258
    },
    {
        "content": "<p>the arrow is just the function from nat to int. You might be able to get rid of it with the <code>norm_cast</code> tactic.</p>",
        "id": 206640479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597186277
    },
    {
        "content": "<p>Nice. It works and I get it. Thanks.</p>",
        "id": 206640577,
        "sender_full_name": "Ben Nale",
        "timestamp": 1597186355
    },
    {
        "content": "<p>have h3: (nat.gcd a b :ℤ ) ∣  (a - b :ℤ) ,<br>\ncases nat.gcd_dvd a b,<br>\napply dvd_sub,<br>\nnorm_cast,<br>\nexact left,<br>\nnorm_cast,<br>\nexact right,</p>",
        "id": 206640609,
        "sender_full_name": "Ben Nale",
        "timestamp": 1597186383
    },
    {
        "content": "<p>no goals :)</p>",
        "id": 206640636,
        "sender_full_name": "Ben Nale",
        "timestamp": 1597186393
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 206663869,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597214055
    }
]