[
    {
        "content": "<p>I'm currently trying to write down statements of the form:  if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\"> R </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a Dedekind domain and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo separator=\"true\">,</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\"> I, J </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span> are ideals in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\"> R </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>gcd</mi><mo>⁡</mo><mi>I</mi><mtext> </mtext><mi>J</mi><mo>=</mo><mi>I</mi><mo>⊔</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">\\gcd I \\ J = I \\sqcup J</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mop\"><span style=\"margin-right:0.01389em;\">g</span>cd</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊔</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>. This should make sense to Lean because it has already been show that <code>ideal R</code> is a <code>unique_factorization_monoid</code> and that any <code>unique_factorization_monoid</code> is a <code>gcd_monoid</code>. When I tried to write it out, I got a <code>failed to synthesize type class instance</code> error.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.dedekind_domain</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gcd_eq_sup</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n<span class=\"n\">gcd</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"bp\">⊔</span> <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>How do I remind Lean that <code>ideal R</code> is a <code>gcd_monoid</code> ?</p>",
        "id": 250753288,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1629974883
    },
    {
        "content": "<p>The problem you are encountering is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unique_factorization_monoid.to_gcd_monoid\">docs#unique_factorization_monoid.to_gcd_monoid</a> needs two extra assumptions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.dedekind_domain</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">gcd_monoid</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">unique_factorization_monoid.to_gcd_monoid</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">R : Type,</span>\n<span class=\"cm\">_inst_1 : integral_domain R,</span>\n<span class=\"cm\">_inst_2 : is_dedekind_domain R</span>\n<span class=\"cm\">⊢ decidable_eq (associates (ideal R))</span>\n\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">R : Type,</span>\n<span class=\"cm\">_inst_1 : integral_domain R,</span>\n<span class=\"cm\">_inst_2 : is_dedekind_domain R</span>\n<span class=\"cm\">⊢ decidable_eq (ideal R)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 250760328,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629979192
    },
    {
        "content": "<p>So let's say we don't care about computability and throw in an <code>open_locale classical</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.dedekind_domain</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">gcd_monoid</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">unique_factorization_monoid.to_gcd_monoid</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gcd_eq_sup</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">associates</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">))]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">gcd</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"bp\">⊔</span> <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Still no `gcd_monoid` instance!</span>\n</code></pre></div>",
        "id": 250760516,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629979260
    },
    {
        "content": "<p>The second issue here is that <code>unique_factorization_monoid.to_gcd_monoid</code> is not actually an instance, so the typeclass system won't pick it up. Two ways to fix it: either promote <code>to_gcd_monoid</code> to an instance, or what would be a neater solution: provide your own instance for <code>ideal R</code> where <code>gcd</code> is defined as sup.</p>",
        "id": 250760795,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629979412
    },
    {
        "content": "<p>That is, a better way to formalize <code>gcd I J = I \\sup J</code> is to fill out these <code>sorry</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.dedekind_domain</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">gcd_monoid</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">gcd_monoid_of_gcd</span> <span class=\"o\">(</span><span class=\"bp\">⊔</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 250761073,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629979560
    },
    {
        "content": "<p>Does it make sense to have a <code>gcd_monoid.copy</code> that allows one to use <code>unique_factorization_monoid.to_gcd_monoid</code> for the proofy part, but replace the <code>gcd</code> function by something propeq?</p>",
        "id": 250761420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629979771
    },
    {
        "content": "<p><code>copy</code> is a good idea for structures in general. But I think the hypotheses for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gcd_monoid_of_gcd\">docs#gcd_monoid_of_gcd</a> are basically exactly what you would need to show something equals <code>gcd</code>, right? Do you have a suggestion as to what kind of work you would save?</p>",
        "id": 250761769,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629979962
    },
    {
        "content": "<p>The only proof obligation with the copy approach would be to show that <code>I ⊔ J</code> is propeq to whatever <code>unique_factorization_monoid.to_gcd_monoid</code> thinks is the <code>gcd</code> of two ideals.</p>",
        "id": 250762037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629980097
    },
    {
        "content": "<p>Aha, in this case that would be something like <code>I ⊔ J = (factors I ⊓ factors J).prod</code>.</p>",
        "id": 250762435,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629980329
    },
    {
        "content": "<p>I guess that would work fine, as long as there would be a convenient way to derive that equality from the characteristic predicates of gcd, i.e. <code>I &lt;= I ⊔ J</code>, <code>J &lt;= I ⊔ J</code>, <code>I ⊔ J ≤ K ↔ I ≤ K ∨ J ≤ K</code> and <code>normalize (I ⊔ J) = I ⊔ J</code>.</p>",
        "id": 250762635,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629980445
    },
    {
        "content": "<p>Or would we just write in the docstring for <code>gcd_monoid.copy</code> something like \"if you want to show this through the characteristic predicate, check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gcd_monoid_of_gcd\">docs#gcd_monoid_of_gcd</a>\".</p>",
        "id": 250762810,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629980530
    },
    {
        "content": "<p>yup, exactly</p>",
        "id": 250762981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629980642
    },
    {
        "content": "<p>Thanks for the answers ! <br>\nHow exactly should I use <code>gcd_monoid.copy</code> ? I've never come across <code>copy</code>before :-)</p>",
        "id": 250770023,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1629983866
    },
    {
        "content": "<p>I can't actually find gcd_monoid.copy but I have come across <code>copy</code> before and the idea is that if you have some instance of a structure but one of the fields is definitionally a bit convoluted, and you would like to get a new instance of the structure which is \"the same\" instance but with the bad field redefined in a more convenient way, then various <code>copy</code> functions enable you to do this in a pretty painless manner: you give the new field, a proof that it's equal to the old field, and then let the <code>copy</code> function build the new instance.</p>",
        "id": 250784326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629989348
    },
    {
        "content": "<p>Ok, that makes sense, thanks a lot !</p>",
        "id": 250796120,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1629993708
    },
    {
        "content": "<p>I think the suggestion above is that someone (Paul? :-) should add a <code>gcd_monoid.copy</code>.</p>",
        "id": 250863480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630026075
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice.copy\">docs#complete_lattice.copy</a> for an example of such a <code>copy</code> constructor.</p>",
        "id": 250884299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630041051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Ideals.20in.20a.20Dedekind.20domain.20form.20a.20.60gcd_monoid.60/near/250863480\">said</a>:</p>\n<blockquote>\n<p>I think the suggestion above is that someone (Paul? :-) should add a <code>gcd_monoid.copy</code>.</p>\n</blockquote>\n<p>Yup, I'll get to work on that soonish ;-)</p>",
        "id": 250894372,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1630049570
    }
]