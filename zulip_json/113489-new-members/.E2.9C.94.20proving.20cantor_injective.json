[
    {
        "content": "<p>Yes</p>",
        "id": 281214094,
        "sender_full_name": "Joseph O",
        "timestamp": 1651695578
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 281214107,
        "sender_full_name": "Joseph O",
        "timestamp": 1651695588
    },
    {
        "content": "<p>How could we use some shortcuts on this proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_surjective'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"n\">fx</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">ξ</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">ξ</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_set_of</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fx</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">p_equiv_np_implies_false</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281214428,
        "sender_full_name": "Joseph O",
        "timestamp": 1651695740
    },
    {
        "content": "<p>But still keeping the overall structure</p>",
        "id": 281214438,
        "sender_full_name": "Joseph O",
        "timestamp": 1651695747
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_surjective'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"n\">fx</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">ξ</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">ξ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_set_of</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fx</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">p_equiv_np_implies_false</span> <span class=\"n\">_</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281214661,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651695864
    },
    {
        "content": "<p>Ah yes I was looking for a way to use obtain</p>",
        "id": 281214885,
        "sender_full_name": "Joseph O",
        "timestamp": 1651695981
    },
    {
        "content": "<p>Thanks for the help everyone</p>",
        "id": 281217928,
        "sender_full_name": "Joseph O",
        "timestamp": 1651697609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 281217935,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651697613
    },
    {
        "content": "<p>By the way, would you suggest <code>intro h</code> or <code>by_contradiction h</code>. I think the latter expresses the intent more</p>",
        "id": 281238798,
        "sender_full_name": "Joseph O",
        "timestamp": 1651710439
    },
    {
        "content": "<p>Those mean/do very different things in general. I guess in this particular case they have the same effect though via double negation elimination? I would choose <code>intro h</code> and only use <code>by_contradiction</code> for when it is actually needed, but mathlib doesn't care too much about constructive mathematics so it's not that important.</p>",
        "id": 281245893,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651718565
    },
    {
        "content": "<p>I've never seen a slow <code>intro</code>, but I've experienced a slow <code>by_contradiction</code> before</p>",
        "id": 281246554,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651719257
    },
    {
        "content": "<p>Pro tip: if you're stuck on a proof you know, write it down on paper, then translate into Lean</p>",
        "id": 281246595,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651719313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20proving.20cantor_injective/near/281245893\">said</a>:</p>\n<blockquote>\n<p>Those mean/do very different things in general. I guess in this particular case they have the same effect though via double negation elimination? I would choose <code>intro h</code> and only use <code>by_contradiction</code> for when it is actually needed, but mathlib doesn't care too much about constructive mathematics so it's not that important.</p>\n</blockquote>\n<p>That makes sense</p>",
        "id": 281292301,
        "sender_full_name": "Joseph O",
        "timestamp": 1651754190
    },
    {
        "content": "<p>Like in the shorter version provided by <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>, <code>intro h</code> was used instead of <code>by_contradiction h</code>, and they did the same thing</p>",
        "id": 281292358,
        "sender_full_name": "Joseph O",
        "timestamp": 1651754222
    },
    {
        "content": "<p>I believe <code>by_contra</code> just checks if it's applied to a negation and uses <code>intro</code> instead in that case</p>",
        "id": 281292461,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651754279
    },
    {
        "content": "<p>Another way too think about <code>by_contra</code> is that it applies <a href=\"https://leanprover-community.github.io/mathlib_docs/find/of_not_not\">docs#of_not_not</a> if the goal doesn't start with ¬ (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/not\">docs#not</a>) to make it so that it does, and then applies <code>intro</code></p>",
        "id": 281293740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651754848
    }
]