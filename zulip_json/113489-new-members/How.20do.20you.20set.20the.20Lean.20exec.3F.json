[
    {
        "content": "<p>I'm working on BananaCats and figured I would reverse engineer the protocol for talking to Lean that VSCode uses.  I will do this by replacing the lean.exe with my own, and forwarding commands to the real lean.  So where does \"elan\" install Lean, and how do I specify a custom exe path?</p>\n<p>EDIT: found the Executable path in settings.  Would it be best if my app installed VSCode for the user too, so that I don't have to make any sort of Lean editor?  I think so...  It will have one lean file per app instance maybe, or should it be per diagram?  I think per app instance, so you can have many BanCats open, and one VSCode / Lean.  VSCode / Lean is much more processor intensive than my GUI code.</p>",
        "id": 174334160,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566970590
    },
    {
        "content": "<p>Thinks will be drag / droppable, so maybe if I'm dragging to the application lean.exe I can convert the objects in question into Lean data statements</p>",
        "id": 174334472,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971082
    },
    {
        "content": "<p>you do not need to reverse engineer it</p>",
        "id": 174334566,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1566971277
    },
    {
        "content": "<p>the base protocol is documented at <a href=\"https://github.com/Microsoft/language-server-protocol\" target=\"_blank\" title=\"https://github.com/Microsoft/language-server-protocol\">https://github.com/Microsoft/language-server-protocol</a></p>",
        "id": 174334613,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1566971295
    },
    {
        "content": "<p>I don't think lean is based on LSP</p>",
        "id": 174334630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566971320
    },
    {
        "content": "<p>I would suggest modifying the vscode extension to log all JSON packets</p>",
        "id": 174334670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566971386
    },
    {
        "content": "<p>ahh, there is a dummy lsp implementation then at <a href=\"https://github.com/leanprover/lean-client-js/tree/master/lean-language-server\" target=\"_blank\" title=\"https://github.com/leanprover/lean-client-js/tree/master/lean-language-server\">https://github.com/leanprover/lean-client-js/tree/master/lean-language-server</a></p>",
        "id": 174334672,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1566971392
    },
    {
        "content": "<p>which i guess is nonfunctional? idk</p>",
        "id": 174334677,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1566971400
    },
    {
        "content": "<p>Thx</p>",
        "id": 174334736,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971454
    },
    {
        "content": "<p>actually it probably is pretty easy to modify the extension to call <code>lean --server | tee lean.log</code> instead of <code>lean --server</code></p>",
        "id": 174334810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566971537
    },
    {
        "content": "<p>Yes, I don't mean rev engineering.  If I just hooked up an EXE between them, I could even maybe do the final version that way (a middle man).  Well doing the EXE between and you just print the JSON...</p>",
        "id": 174334843,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971568
    },
    {
        "content": "<p>In fact, a Lean EXE can only connect to one thing at a time, so I'd have to be the middle man anyway.  There's logically no other way to do it</p>",
        "id": 174334912,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971645
    },
    {
        "content": "<p>Lean &lt;-&gt; BanCats &lt;-&gt; VSCode</p>",
        "id": 174334925,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971665
    },
    {
        "content": "<p>Presumably there is no need for vscode in the \"final version\" though?</p>",
        "id": 174334929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566971685
    },
    {
        "content": "<p>Lean &lt;--&gt; VSCode -&gt; LogFile,  BanCats -&gt; ?</p>",
        "id": 174334933,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971695
    },
    {
        "content": "<p>There's no way I'm writing an IDE as good as VSCode</p>",
        "id": 174334943,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971709
    },
    {
        "content": "<p>but that's not the goal, right? You just need lean to act as backend for your theorem goals</p>",
        "id": 174334960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566971744
    },
    {
        "content": "<p>I'm going to use it in version 1.0 so that I will create a VSCode + Lean installer for us too.  On OSX / Linux, I will need help on getting the VSCode equivalents (to Windows 10)</p>",
        "id": 174334963,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971753
    },
    {
        "content": "<p>unless you are doing the text editor whole nine yards</p>",
        "id": 174334970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566971762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I want the user to be able to extend the system and be part of the Lean community as well</p>",
        "id": 174335014,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971776
    },
    {
        "content": "<p>I'm not sure I follow. How do you envision the interaction?</p>",
        "id": 174335025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566971804
    },
    {
        "content": "<p>So if there's something missing, like some new math area, then my system can support it by adding Lean support</p>",
        "id": 174335032,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971821
    },
    {
        "content": "<p>Is the user using your tool to edit lean files? Or are they using VSCode?</p>",
        "id": 174335047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566971840
    },
    {
        "content": "<p>They're using my tool 100% graphically (2D graphics) to create lean code on-the-fly.  This gets sent to Lean, and somehow I'd have to make VSCode update, not sure how.</p>",
        "id": 174335115,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971911
    },
    {
        "content": "<p>But optionally they can go into VSCode to add in their custom \"perfectoid spaces of the future\"</p>",
        "id": 174335126,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971937
    },
    {
        "content": "<p>I would guess that the easiest way to intervene is to make VSCode interact with your program by writing your own extension extending vscode-lean</p>",
        "id": 174335131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566971943
    },
    {
        "content": "<p>i.e. Lean &lt;-&gt; VSCode &lt;-&gt; BanCats</p>",
        "id": 174335141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566971957
    },
    {
        "content": "<p>The language of categories won't change, so there's less to extend with BanCats, and more so with Lean</p>",
        "id": 174335143,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971962
    },
    {
        "content": "<p>that way you can set the protocol on the BanCats side</p>",
        "id": 174335144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566971973
    },
    {
        "content": "<p>Interesting!</p>",
        "id": 174335152,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566971988
    },
    {
        "content": "<p>So I'll look at that plugin.  Thank you!</p>",
        "id": 174335163,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566972000
    },
    {
        "content": "<p>and vscode-lean has already done the messy work of parsing the lean protocol</p>",
        "id": 174335206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566972009
    },
    {
        "content": "<p>Right right right</p>",
        "id": 174335216,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566972028
    },
    {
        "content": "<p>:D</p>",
        "id": 174335220,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566972030
    },
    {
        "content": "<p>In about 7 months, people can start to use BananCats as an alternative way to install and use Lean.</p>",
        "id": 174335251,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566972109
    },
    {
        "content": "<p>Maybe in 1 year it will be useable</p>",
        "id": 174335294,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566972129
    },
    {
        "content": "<p>But the first release will have a proof of Yoneda's Lemma.  Since that's one of my design tests of the UX.</p>",
        "id": 174335301,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566972164
    }
]