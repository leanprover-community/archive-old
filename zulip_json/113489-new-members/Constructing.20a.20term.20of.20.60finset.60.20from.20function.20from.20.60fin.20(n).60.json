[
    {
        "content": "<p>Given a finite dimensional field extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">E/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, I would like to construct a term of <code>finset(polynomial K)</code>containing the minimum polynomials of a generating set. The idea is that I would then like to take the splitting field of their product to construct a normal closure of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>.  Here is my attempt so far: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">min_polys</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_findim</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">coe_fn</span><span class=\"o\">(</span><span class=\"n\">finite_dimensional.fin_basis</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">minpoly_func</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly_func</span> <span class=\"bp\">∘</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So I have a function <code>comp : fin(finkrank K E) \\to poly K</code>, and I would like to view its image as a finset, so that I can take the product of its elements. Does anyone have any suggestions for how to do this?</p>",
        "id": 265551249,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640000002
    },
    {
        "content": "<p>I know we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.image\">docs#finset.image</a> for the image of a finset, I don't think there's something specifically for the range of a function.</p>",
        "id": 265551361,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640000097
    },
    {
        "content": "<p><code>finset.univ.image comp</code>?</p>",
        "id": 265551362,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640000100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Constructing.20a.20term.20of.20.60finset.60.20from.20function.20from.20.60fin.20.28n.29.60/near/265551362\">said</a>:</p>\n<blockquote>\n<p><code>finset.univ.image comp</code>?</p>\n</blockquote>\n<p>I tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">min_polys</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_findim</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">coe_fn</span><span class=\"o\">(</span><span class=\"n\">finite_dimensional.fin_basis</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">minpoly_func</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly_func</span> <span class=\"bp\">∘</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span> <span class=\"n\">finset.univ.image</span> <span class=\"n\">comp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and I got a type class inference error. I guess it's because Lean doesn't know that <code>fin (finite_dimensional.finrank K E)</code> is a <code>finset</code>?</p>",
        "id": 265552337,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640000839
    },
    {
        "content": "<p>Try <code>#check fin.fintype</code>. Maybe you're missing the import of <code>data.fintype.basic</code>.</p>",
        "id": 265552625,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640001021
    },
    {
        "content": "<p>I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">h_findim</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">finite_dimensional.finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">finite_dimensional.fin_basis</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n<span class=\"n\">minpoly_func</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">finite_dimensional.finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly_func</span> <span class=\"bp\">∘</span> <span class=\"n\">B</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265552633,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640001027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Constructing.20a.20term.20of.20.60finset.60.20from.20function.20from.20.60fin.20.28n.29.60/near/265552633\">said</a>:</p>\n<blockquote>\n<p>I get the following error:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">h_findim</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">finite_dimensional.finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">finite_dimensional.fin_basis</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n<span class=\"n\">minpoly_func</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">finite_dimensional.finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly_func</span> <span class=\"bp\">∘</span> <span class=\"n\">B</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yeah this is the same error I get</p>",
        "id": 265552743,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640001121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Constructing.20a.20term.20of.20.60finset.60.20from.20function.20from.20.60fin.20.28n.29.60/near/265552625\">said</a>:</p>\n<blockquote>\n<p>Try <code>#check fin.fintype</code>. Maybe you're missing the import of <code>data.fintype.basic</code>.</p>\n</blockquote>\n<p>Gives me <code>fin (finite_dimensional.finrank K E)</code></p>",
        "id": 265552825,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640001154
    },
    {
        "content": "<p>The important line is the last one: the instance <code>decidable_eq (polynomial K)</code> was not found, which is needed to allow Lean to compute exactly which polynomials should be in the set. You can fix it in one of two ways: the easy way is to add a line <code>open_locale classical</code> after the imports that says we're not interested in computing, or add a <code>[decidable_eq K]</code> parameter to your definition that pushes this requirement to the user of your definition.</p>",
        "id": 265552908,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640001227
    },
    {
        "content": "<p>Wait hang on, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.decidable_eq\">docs#polynomial.decidable_eq</a> doesn't exist?</p>",
        "id": 265552963,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640001247
    },
    {
        "content": "<p>So I guess the second solution doesn't apply, and <code>open_locale classical</code> it is:</p>",
        "id": 265552990,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640001280
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.adjoin</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">min_polys</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_findim</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">coe_fn</span><span class=\"o\">(</span><span class=\"n\">finite_dimensional.fin_basis</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">minpoly_func</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly_func</span> <span class=\"bp\">∘</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span> <span class=\"n\">finset.univ.image</span> <span class=\"n\">comp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265553012,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640001304
    },
    {
        "content": "<p>(Works on the community playground)</p>",
        "id": 265553026,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640001312
    },
    {
        "content": "<p>Completed definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.adjoin</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">min_polys</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_findim</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.univ.image</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">K</span> <span class=\"bp\">∘</span> <span class=\"n\">finite_dimensional.fin_basis</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265553148,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640001418
    },
    {
        "content": "<p>Note that I added <code>noncomputable</code> in front of <code>def</code>, which is required because we don't have an algorithm to determine the list of polynomials. You can also put <code>noncomputable theory</code> after the <code>open_locale</code> line, then Lean will automatically figure out where to put <code>noncomputable</code>.</p>",
        "id": 265553265,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640001515
    },
    {
        "content": "<p>Nice, thank you <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>. As an aside, is it a normal workflow for definitions to start off in tactic mode and then tidy things up to term mode? Obviously it's valid, but is it what most people do?</p>",
        "id": 265553471,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640001668
    },
    {
        "content": "<p>Yes, I do that regularly. Generally you want definitions to be in term mode, so you know exactly what <code>unfold min_polys</code> will give you.</p>",
        "id": 265553518,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640001714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Constructing.20a.20term.20of.20.60finset.60.20from.20function.20from.20.60fin.20.28n.29.60/near/265552963\">said</a>:</p>\n<blockquote>\n<p>Wait hang on, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.decidable_eq\">docs#polynomial.decidable_eq</a> doesn't exist?</p>\n</blockquote>\n<p>Should we add it?</p>",
        "id": 265555522,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640002984
    },
    {
        "content": "<p>For proofs if I realise at the end that it's easy to rewrite in term mode, I often do, simply because it makes them compile a bit quicker. For definitions I try to stay in term mode at all times (unless I'm filling in a subproof) because I'm terrified about what random junk a tactic will add to my term</p>",
        "id": 265555666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640003070
    }
]