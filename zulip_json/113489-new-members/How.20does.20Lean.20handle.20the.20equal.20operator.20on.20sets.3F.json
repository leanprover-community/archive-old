[
    {
        "content": "<p>I've been working through Velleman's suggested set theory proof <a href=\"https://djvelleman.people.amherst.edu/help/Problems.html\">problems in Proof Designer</a> (except I'm doing the proofs in Lean and not Proof Designer). I'm stuck on <a href=\"https://github.com/leanprover-community/mathlib/pull/8\">#8</a>. I'm not sure I understand how Lean handles the equality operator on sets. Can Lean solve the below problem with how it is currently stated? I've tried using <code>eq.subst</code> and <code>iff.elim_left</code>and neither worked. I'm mainly looking for help where the <code>sorry</code> is placed now. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n\n\n  <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">\\</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">):</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"n\">by_contradiction</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">\\</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h₁.right</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">\\</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h₁.left</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 269195279,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643072923
    },
    {
        "content": "<p>you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq.subst\">docs#eq.subst</a> directly here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n\n\n  <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">\\</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">):</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"n\">by_contradiction</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">\\</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h₁.right</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">\\</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h₁.left</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h.subst</span> <span class=\"n\">h₄</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 269196054,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643073651
    },
    {
        "content": "<p>That works. Thank you. I originally tried (and then tested it again after your response) the below and that doesn't work. What's the difference between the below and what you have above?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n\n\n  <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">\\</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">):</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"n\">by_contradiction</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">\\</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h₁.right</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">\\</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h₁.left</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq.subst</span> <span class=\"n\">h</span> <span class=\"n\">h₄</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 269196848,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643074297
    },
    {
        "content": "<p>Huh, I'm actually not sure, I would have thought they would both work. It could be some elaboration order quirk, hopefully someone else can answer!</p>",
        "id": 269198546,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643075511
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/199965854\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/199965854</a></p>",
        "id": 269199074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643076044
    },
    {
        "content": "<p>... seems related, except the conclusion here is the opposite?</p>",
        "id": 269199118,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643076071
    },
    {
        "content": "<p>Maybe <code>eq.subst</code> should not have <code>elab_as_eliminator</code>, and could this be related to why the \"stupid triangle\" is so stupid?</p>",
        "id": 269199534,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643076192
    },
    {
        "content": "<p>Hmm. Weird. I'll just try both whenever I get an error like this in the future I guess. </p>\n<p>Thanks!</p>",
        "id": 269202100,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643078557
    },
    {
        "content": "<p>FWIW, pretty much everyone uses the <code>rw</code> tactic instead of using <code>eq.subst</code> directly.</p>",
        "id": 269202513,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643078941
    },
    {
        "content": "<p>Oh really? I'm still very much a beginner in Lean, so I'm not really too familiar with <code>rw</code>. I'm going to look into that and start using it more.</p>",
        "id": 269204261,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643080495
    }
]