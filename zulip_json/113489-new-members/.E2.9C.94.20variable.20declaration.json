[
    {
        "content": "<p>I'm not being able to declare the variable pointed with \"breakpoint\" in this code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">simple_graph</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">disjoint_union</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edgeless</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">G.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">G.partition</span><span class=\"o\">}</span>  <span class=\"c1\">-- breakpoint</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">simple_graph</span>\n</code></pre></div>\n<p>I'm failing to see what I did wrong. Help <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 261386754,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636847070
    },
    {
        "content": "<p><code>G</code> needs to be an explicit argument, you have it as implicit</p>",
        "id": 261386921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636847388
    },
    {
        "content": "<p>And you should rename partition to <code>simple_graph.partition</code> to make dot notation work here</p>",
        "id": 261386975,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636847437
    },
    {
        "content": "<p>(in addition to making the variable explicit as Eric said)</p>",
        "id": 261386981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636847465
    },
    {
        "content": "<p>It's in the namespace already, Adam</p>",
        "id": 261386983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636847471
    },
    {
        "content": "<p>Oh sorry</p>",
        "id": 261387036,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636847524
    },
    {
        "content": "<p>Missed that. Ignore me</p>",
        "id": 261387043,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636847537
    },
    {
        "content": "<p>Is it possible to turn a variable declaration explicit? I tried <code>variables (G) {P : G.partition}  -- breakpoint</code> and it still doesn't work</p>",
        "id": 261387088,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636847642
    },
    {
        "content": "<p>(in the original code, I already have -- and need-- <code>G</code> to be implicit before that line)</p>",
        "id": 261387122,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636847670
    },
    {
        "content": "<p>You need it to be explicit for <code>structure partition</code></p>",
        "id": 261387600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636848268
    },
    {
        "content": "<p>It's already too late if you change it after that</p>",
        "id": 261387604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636848276
    },
    {
        "content": "<p>It worked, thanks!</p>",
        "id": 261387637,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636848358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 261387638,
        "sender_full_name": "Notification Bot",
        "timestamp": 1636848360
    },
    {
        "content": "<p>Off-topic to the question: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.pairwise\">docs#set.pairwise</a> can be used for <code>edgeless</code> (it has an extra not-equals hypothesis, but it's harmless for simple graphs).</p>\n<p>Is there an official way to work with <code>set</code> partitions of a type?</p>",
        "id": 261387864,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636848640
    },
    {
        "content": "<p>I was wondering just that. On <code>set.pairwise</code>, how do I provide the negation of a relation?</p>",
        "id": 261388264,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636849268
    },
    {
        "content": "<p>I want to say <code>(edgeless : ∀ (s ∈ S), set.pairwise s ¬G.adj)</code> but it doesn't allow me</p>",
        "id": 261388276,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636849290
    },
    {
        "content": "<p>You want <code>G.adjᶜ</code> maybe?</p>",
        "id": 261388360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636849414
    },
    {
        "content": "<p>Or perhaps <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_antichain\">docs#is_antichain</a></p>",
        "id": 261388367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636849429
    },
    {
        "content": "<p>These seem to have been introduced by Yael for exactly this, according to the doc string.</p>",
        "id": 261388522,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636849669
    },
    {
        "content": "<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">disjoint_union</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edgeless</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">is_antichain</span> <span class=\"n\">G.adj</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 261388585,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636849754
    },
    {
        "content": "<p><code>independent</code> seems like it might be a better name than <code>edgeless</code>, since these are independent sets</p>",
        "id": 261388598,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636849782
    },
    {
        "content": "<p>As for partitions, I guess it might be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.is_partition\">docs#setoid.is_partition</a>, though it excludes the empty set. Other than that it's the same definition.  (Maybe <code>is_partition</code> would be a good name for the field?)</p>",
        "id": 261388883,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636850173
    },
    {
        "content": "<p>I don't want to exclude empty sets. if we do that we will have to treat empty graphs differently</p>",
        "id": 261388962,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636850303
    }
]