[
    {
        "content": "<p>I am stuck on the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hn1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n.val</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"o\">⟨(</span><span class=\"n\">n1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">hpos</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn1</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Lean reports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">⟨(</span><span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">hpos</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">_a</span><span class=\"o\">,</span> <span class=\"n\">hpos</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">,</span>\n<span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">hn1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n.val</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"o\">⟨(</span><span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">hpos</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>How can I get that rewrite to work?</p>",
        "id": 246484941,
        "sender_full_name": "David Renshaw",
        "timestamp": 1626715439
    },
    {
        "content": "<p>Try <code>simp_rw</code> instead?</p>",
        "id": 246485063,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1626715476
    },
    {
        "content": "<p>nice!</p>",
        "id": 246485139,
        "sender_full_name": "David Renshaw",
        "timestamp": 1626715515
    },
    {
        "content": "<p>Why does <code>rw</code> fail?</p>",
        "id": 246485178,
        "sender_full_name": "David Renshaw",
        "timestamp": 1626715540
    },
    {
        "content": "<p>Because <code>rw</code> is not powerful enough to rewrite under binders. And you have a hypothesis <code>hn1</code> about <code>(n1 + 1).val</code>. And <code>rw</code> isn't rewriting that hypothesis when you're rewriting the goal.</p>",
        "id": 246486116,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626715949
    },
    {
        "content": "<p>So then you have a subtyped term where the value isn't matching the hypothesis about it. Which is the motive error.</p>",
        "id": 246486148,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626715971
    },
    {
        "content": "<p>I don't fully follow what you are saying about binders, but it does make sense to me that  <code>a ⟨n.val, hpos⟩ = a n</code> might not typecheck (and therefore my attempt to rewrite might fail).</p>",
        "id": 246486792,
        "sender_full_name": "David Renshaw",
        "timestamp": 1626716298
    },
    {
        "content": "<p>I don't see how sprinkling in some <code>simp</code> fixes the problem.</p>",
        "id": 246486839,
        "sender_full_name": "David Renshaw",
        "timestamp": 1626716324
    },
    {
        "content": "<p><code>simp_rw</code> is able to rewrite under binders. Consider the goal after the <code>simp_rw</code> step:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hn1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n.val</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"o\">⟨(</span><span class=\"n\">n1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">hpos</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hn1</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ a ⟨n.val, _⟩ = a n</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246487102,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626716432
    },
    {
        "content": "<p>You can see that the subtype property has changed to <code>_</code>, it is no longer <code>hpos</code>.</p>",
        "id": 246487214,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626716488
    },
    {
        "content": "<p>We can expose it like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hn1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n.val</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"o\">⟨(</span><span class=\"n\">n1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">hpos</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hn1</span><span class=\"o\">],</span>\n  <span class=\"n\">generalize_proofs</span> <span class=\"n\">hpos'</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  a : ℕ+ → ℤ,</span>\n<span class=\"cm\">  n n1 : ℕ+,</span>\n<span class=\"cm\">  hpos : 0 &lt; (n1 + 1).val / 2,</span>\n<span class=\"cm\">  hn1 : (n1 + 1).val / 2 = n.val,</span>\n<span class=\"cm\">  hpos' : 0 &lt; n.val</span>\n<span class=\"cm\">  ⊢ a ⟨n.val, hpos'⟩ = a n</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246487257,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626716515
    },
    {
        "content": "<p>can I invoke proof irrelevance sooner, and then still use <code>rw</code>?</p>",
        "id": 246487303,
        "sender_full_name": "David Renshaw",
        "timestamp": 1626716525
    },
    {
        "content": "<p>I'm not sure what you mean. <code>hpos</code> and <code>hpos'</code> are only talking about the same term because of <code>hn1</code>.</p>",
        "id": 246487403,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626716587
    },
    {
        "content": "<p>Does the <code>_</code> imply that the proof term has been forgotten, or just that it is being suppressed in the pretty-printing?</p>",
        "id": 246487475,
        "sender_full_name": "David Renshaw",
        "timestamp": 1626716636
    },
    {
        "content": "<p>suppressed</p>",
        "id": 246487521,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626716647
    },
    {
        "content": "<p>Consider this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hn1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n.val</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"o\">⟨(</span><span class=\"n\">n1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">hpos</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hn1</span> <span class=\"n\">at</span> <span class=\"n\">hpos</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  a : ℕ+ → ℤ,</span>\n<span class=\"cm\">  n n1 : ℕ+,</span>\n<span class=\"cm\">  hpos : 0 &lt; (n1 + 1).val / 2,</span>\n<span class=\"cm\">  hn1 : (n1 + 1).val / 2 = n.val,</span>\n<span class=\"cm\">  hpos : 0 &lt; n.val</span>\n<span class=\"cm\">  ⊢ a ⟨(n1 + 1).val / 2, hpos⟩ = a n</span>\n<span class=\"cm\">  -/</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246487562,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626716672
    },
    {
        "content": "<p>rewriting at <code>hpos</code> now gives us two (clashing name) <code>hpos</code> hypotheses. We can't rewrite the first one away because the subtype depends on it because it mentions the value.</p>",
        "id": 246487613,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626716709
    },
    {
        "content": "<p>And we can't follow up with some coupled <code>rw</code> that changes both the value and the old <code>hpos</code> to the new <code>hpos</code>. But <code>simp_rw</code> can!</p>",
        "id": 246487663,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626716736
    },
    {
        "content": "<p>The relevant \"binder\" that we're talking about here is the one that comes from pnat being a dependent pair, right?</p>\n<p>Pnat is:<br>\nSigma x : Nat, 0 &lt; x</p>",
        "id": 246488206,
        "sender_full_name": "David Renshaw",
        "timestamp": 1626716992
    },
    {
        "content": "<p>I think that makes sense to me now. Thanks for the explanation!</p>",
        "id": 246488691,
        "sender_full_name": "David Renshaw",
        "timestamp": 1626717194
    },
    {
        "content": "<p>Yeah!</p>",
        "id": 246488940,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626717307
    },
    {
        "content": "<p>Another strategy for this case is <code>congr, ext, exact hn1</code></p>",
        "id": 246488982,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626717327
    }
]