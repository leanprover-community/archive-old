[
    {
        "content": "<p>I cannot for the life of me figure out how I should solve this even though it should be really simple</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">star_set</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">star_set</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">star_group</span>\n\n<span class=\"n\">def</span> <span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"err\">⌊</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">⌋</span>\n\n\n<span class=\"kn\">notation</span> <span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"err\">⋆</span><span class=\"bp\">`</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">star</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">star_set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">star_assoc</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⋆</span> <span class=\"n\">b</span> <span class=\"err\">⋆</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⋆</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">⋆</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">fract</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fract_eq_fract</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">fract</span><span class=\"o\">},</span>\n    <span class=\"c1\">--what now??</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">star_group</span>\n</code></pre></div>",
        "id": 201897155,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593029312
    },
    {
        "content": "<p>Is this true?</p>",
        "id": 201897744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593029588
    },
    {
        "content": "<p>I think this needs a bit of high-level strategy.</p>",
        "id": 201897771,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593029606
    },
    {
        "content": "<p>This is associativity of addition on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}/\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>.</p>",
        "id": 201897787,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593029614
    },
    {
        "content": "<p>i.e. first start with the math proof, even if it's only one sentence.</p>",
        "id": 201897789,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593029620
    },
    {
        "content": "<p><code>ring</code> reduces the goal to <code>⊢ -↑⌊a + b⌋ + ↑⌊b + c⌋ = ↑0</code></p>",
        "id": 201897797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593029624
    },
    {
        "content": "<p>It's not associativity of addition on R/Z because the star isn't a map from R/Z to R/Z</p>",
        "id": 201897994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593029706
    },
    {
        "content": "<p>I guess the lemma is true but the proof has made a wrong turn.</p>",
        "id": 201898144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593029774
    },
    {
        "content": "<p>Yeah it is true, I've done it by hand. Just the reordering of terms where I was stuck was kind of a nightmare</p>",
        "id": 201898234,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593029834
    },
    {
        "content": "<p>Is there a different way I should've approached it</p>",
        "id": 201898287,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593029866
    },
    {
        "content": "<p>I think you shouldn't have used 0</p>",
        "id": 201898319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593029880
    },
    {
        "content": "<p>here is a weird way to do it</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">star_assoc</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⋆</span> <span class=\"n\">b</span> <span class=\"err\">⋆</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⋆</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">⋆</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">fract</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fract_eq_fract</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">fract</span><span class=\"o\">},</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201898361,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593029885
    },
    {
        "content": "<p>You can also do <code>existsi _</code>. Remember that tactic?</p>",
        "id": 201898423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593029933
    },
    {
        "content": "<p><code>split</code> works instead of those two lines, too</p>",
        "id": 201898437,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593029941
    },
    {
        "content": "<p>I think Reid wins Zulip proof of the day for that one</p>",
        "id": 201898507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593029993
    },
    {
        "content": "<p>Yeah that was pretty nice, thanks!</p>",
        "id": 201898569,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593030007
    },
    {
        "content": "<p>The point <span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span> is that which integer you want to use depends on exactly what \"carries\" occurred when you added a+b and b+c.</p>",
        "id": 201898605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593030032
    },
    {
        "content": "<p>You used 0 and that can't be right, because the high-powered <code>ring</code> tactic (which is the tactic you didn't know when you posted the original question) reduced the goal as you had it to (some random integer) = 0.</p>",
        "id": 201898675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593030067
    },
    {
        "content": "<p>Reid's clever proof says \"instead of using 0, let's use z, where z is an integer I'll specify later when the dust has cleared\"</p>",
        "id": 201898736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593030101
    },
    {
        "content": "<p>It's one of those proofs that ended before I expected it to.</p>",
        "id": 201898808,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593030130
    },
    {
        "content": "<p>Yeah that makes sense, I knew there were gonna be some issues if 1 &lt; a + b or whatever, I think my plan was to try to split it up into cases again but I guess forgot</p>",
        "id": 201898830,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593030144
    },
    {
        "content": "<p>so at the end he has two goals:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">abc</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span>\n<span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span>\n<span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">-</span><span class=\"err\">↑⌊</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">⌋</span> <span class=\"bp\">+</span> <span class=\"err\">↑⌊</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"err\">⌋</span> <span class=\"bp\">=</span> <span class=\"err\">↑?</span><span class=\"n\">m_1</span>\n<span class=\"n\">abc</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span>\n<span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span>\n<span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">ℤ</span>\n</code></pre></div>\n\n\n<p>The first goal has a variable in! It's a bit of a silly name, ?m_1, but it's just an integer variable. The second goal is \"tell me what that variable is\". But if you try and solve the first goal with another tactic (<code>norm_cast</code>), Lean guesses that the variable you want is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mo stretchy=\"false\">⌊</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">⌋</mo><mo>+</mo><mo stretchy=\"false\">⌊</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">-\\lfloor a+b\\rfloor + \\lfloor b+c \\rfloor</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">⌊</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">⌋</span></span></span></span> and solves everything.</p>",
        "id": 201898925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593030196
    },
    {
        "content": "<p>Gotcha. Thanks!!</p>",
        "id": 201899158,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593030322
    },
    {
        "content": "<p>Also, this proof shows that the assumptions <code>ha</code>, <code>hb</code> and <code>hc</code> are not necessary. You can spot this by typing <code>#lint</code> after the proof, and it will tell you this, among other things.</p>",
        "id": 201902445,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593032103
    },
    {
        "content": "<p>Did not know about <code>#lint</code>! That's super useful, thanks!</p>",
        "id": 201903937,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593032908
    },
    {
        "content": "<p>(mathlib PRs will run <code>#lint</code> automatically, and complain about anything it finds, so it's a good habit to run it yourself occasionally)</p>",
        "id": 201931402,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593059437
    }
]