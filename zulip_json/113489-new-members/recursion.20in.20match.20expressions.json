[
    {
        "content": "<p>I just started learning Lean but I have a bit of a noob-ish question, I'm not sure if this is the right place to ask but,</p>\n<p>In the second example in this snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">example₁</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">example₁</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">example₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">example₂</span> <span class=\"n\">n</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>lean is complaining that the identifier example₂ does not exist.<br>\nI was wondering what the difference is between the match syntax in example 1 and the match expression in example 2 that disallows the recursive definition.</p>",
        "id": 279389087,
        "sender_full_name": "Nick Yu",
        "timestamp": 1650363210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Proving.20basic.20nat.20arithmetic.20equality/near/278753727\">said</a>:</p>\n<blockquote>\n<p>Note that in lean3 the recursion only works if you use the equation compiler</p>\n</blockquote>\n<p>This is improved in Lean 4, but Lean 3 relies on your first way of writing for defining recursive functions</p>",
        "id": 279394223,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650366602
    },
    {
        "content": "<p>Don't do this, but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">example₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">_match</span> <span class=\"n\">n</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279394360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650366710
    },
    {
        "content": "<p>Just to illustrate, these compile just fine in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">example₂</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">example₂</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">example₂'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">example₂'</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 279396956,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650368424
    }
]