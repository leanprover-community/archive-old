[
    {
        "content": "<p>Hello, I am trying to show that a subgroup of a finite group is a p-Sylow group if it has the right cardinality, so in some sense an inverse to <a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/sylow.html#sylow.card_eq_multiplicity\">sylow.card_eq_multiplicity</a>. Here is my current attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.sylow</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">card_eq_multiplicity_to_sylow</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">eq_card</span><span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">nat.factorization</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">to_subgroup</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">is_p_group'</span> <span class=\"o\">:=</span> <span class=\"n\">is_p_group.of_card</span> <span class=\"n\">eq_card</span><span class=\"o\">,</span>\n  <span class=\"n\">is_maximal'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">Q</span> <span class=\"n\">is_p_Q</span> <span class=\"n\">hHQ</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">hQP</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">is_p_group.exists_le_sylow</span> <span class=\"n\">is_p_Q</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hHP</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">hHQ</span> <span class=\"n\">hQP</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hHsubP_fintype</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">H.subgroup_of</span> <span class=\"bp\">↑</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">apply</span> <span class=\"n\">fintype.of_equiv</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">subgroup.subgroup_of_equiv_of_le</span> <span class=\"n\">hHP</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">eq_HP</span> <span class=\"o\">:</span> <span class=\"n\">H.subgroup_of</span> <span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">eq_card_P</span> <span class=\"o\">:=</span> <span class=\"n\">sylow.card_eq_multiplicity</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n      <span class=\"n\">resetI</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">subgroup.eq_top_of_card_eq</span><span class=\"o\">,</span> <span class=\"c1\">--fails</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>My idea is in order to show that H is a maximal p-subgroup is the following: every bigger p-subgroup Q has to be contained in a p-Sylow subgroup P, but H and P have the same cardinality, so they all have to be equal.</p>\n<p>I get the following error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">135</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n  <span class=\"n\">fintype</span> <span class=\"bp\">↥↑</span><span class=\"n\">P</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">eq_card</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"bp\">⇑</span><span class=\"o\">((</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">is_p_Q</span> <span class=\"o\">:</span> <span class=\"n\">is_p_group</span> <span class=\"n\">p</span> <span class=\"bp\">↥</span><span class=\"n\">Q</span><span class=\"o\">,</span>\n<span class=\"n\">hHQ</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">hQP</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">hHP</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">hHsubP_fintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">H.subgroup_of</span> <span class=\"bp\">↑</span><span class=\"n\">P</span><span class=\"o\">),</span>\n<span class=\"n\">eq_card_P</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"bp\">↥</span><span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"bp\">⇑</span><span class=\"o\">((</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">H.subgroup_of</span> <span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n</code></pre></div>\n<p>so there seems to be a typeclass coercion problem, but I have no idea how to address it. If this is fixed, would this be an interesting addition to mathlib?</p>",
        "id": 322975384,
        "sender_full_name": "Bernhard Reinke",
        "timestamp": 1674467123
    },
    {
        "content": "<p>It would be great if you could make your question a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> . Right now we're missing imports so the code as it stands doesn't compile in a new lean session. [Edit: thanks Alex for doing this for me ;-) ]</p>",
        "id": 322978014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674467902
    },
    {
        "content": "<p>You need to add <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#classical\">tactic#classical</a> so you get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.sylow</span>\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">card_eq_multiplicity_to_sylow</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">eq_card</span><span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">nat.factorization</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">to_subgroup</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">is_p_group'</span> <span class=\"o\">:=</span> <span class=\"n\">is_p_group.of_card</span> <span class=\"n\">eq_card</span><span class=\"o\">,</span>\n  <span class=\"n\">is_maximal'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">Q</span> <span class=\"n\">is_p_Q</span> <span class=\"n\">hHQ</span><span class=\"o\">,</span>\n    <span class=\"n\">classical</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">hQP</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">is_p_group.exists_le_sylow</span> <span class=\"n\">is_p_Q</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hHP</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">hHQ</span> <span class=\"n\">hQP</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hHsubP_fintype</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">H.subgroup_of</span> <span class=\"bp\">↑</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">apply</span> <span class=\"n\">fintype.of_equiv</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">subgroup.subgroup_of_equiv_of_le</span> <span class=\"n\">hHP</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">eq_HP</span> <span class=\"o\">:</span> <span class=\"n\">H.subgroup_of</span> <span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">eq_card_P</span> <span class=\"o\">:=</span> <span class=\"n\">sylow.card_eq_multiplicity</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n      <span class=\"n\">resetI</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">subgroup.eq_top_of_card_eq</span><span class=\"o\">,</span> <span class=\"c1\">--fails</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>to find this I noticed that the goal is trying to show a subgroup is a fintype, and when I search for these things in the docs I found <a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/subgroup/finite.html#subgroup.fintype\">https://leanprover-community.github.io/mathlib_docs/group_theory/subgroup/finite.html#subgroup.fintype</a>. This has  a decidable equality argument which is why it doesn't fire, using classical means that you can ignore such arguments (doing classical mathematics).</p>",
        "id": 322978025,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1674467905
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 322981470,
        "sender_full_name": "Bernhard Reinke",
        "timestamp": 1674468950
    },
    {
        "content": "<p>I am now here (I hope this should be a mwe):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.sylow</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">card_eq_multiplicity_to_sylow</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">eq_card</span><span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">nat.factorization</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">to_subgroup</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">is_p_group'</span> <span class=\"o\">:=</span> <span class=\"n\">is_p_group.of_card</span> <span class=\"n\">eq_card</span><span class=\"o\">,</span>\n  <span class=\"n\">is_maximal'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">Q</span> <span class=\"n\">is_p_Q</span> <span class=\"n\">hHQ</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">hQP</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">is_p_group.exists_le_sylow</span> <span class=\"n\">is_p_Q</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hHP</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">hHQ</span> <span class=\"n\">hQP</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hHsubP_fintype</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">H.subgroup_of</span> <span class=\"bp\">↑</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">apply</span> <span class=\"n\">fintype.of_equiv</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">subgroup.subgroup_of_equiv_of_le</span> <span class=\"n\">hHP</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">eq_HP</span> <span class=\"o\">:</span> <span class=\"n\">H.subgroup_of</span> <span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">eq_card_P</span> <span class=\"o\">:=</span> <span class=\"n\">sylow.card_eq_multiplicity</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n      <span class=\"n\">classical</span><span class=\"o\">,</span>\n      <span class=\"n\">resetI</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">subgroup.eq_top_of_card_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">of_equiv_card</span> <span class=\"o\">((</span><span class=\"n\">subgroup.subgroup_of_equiv_of_le</span> <span class=\"n\">hHP</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">),</span>\n      <span class=\"k\">have</span> <span class=\"n\">coe_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">↥↑</span> <span class=\"n\">P</span> <span class=\"bp\">≃</span> <span class=\"bp\">↥</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">of_equiv_card</span> <span class=\"n\">coe_assoc</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- rw eq_card_P, --fails</span>\n      <span class=\"c1\">-- rw eq_card, --fails</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">subgroup.subgroup_of_eq_top</span> <span class=\"n\">at</span> <span class=\"n\">eq_HP</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">hQP</span> <span class=\"n\">eq_HP</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hHQ</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I think I am still confused about coercions. I have no idea how to show <code>coe_assoc</code>. Since the rewrites <code>rw eq_card_P</code>and <code>rw eq_card</code>fail, I guess <code>↥P</code> means different things in <code>eq_card_P</code>and in the goal. How can I find out what I'm casting to?</p>",
        "id": 323004440,
        "sender_full_name": "Bernhard Reinke",
        "timestamp": 1674475962
    },
    {
        "content": "<p>I found <a href=\"https://leanprover-community.github.io/mathlib_docs/logic/basic.html#coe_sort_coe_trans\">coe_sort_coe_trans</a> which seems to be the lemma for the assertion I called <code>coe_assoc</code>, so I tried the following (again MWE):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.sylow</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">card_eq_multiplicity_to_sylow</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">eq_card</span><span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">nat.factorization</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">to_subgroup</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">is_p_group'</span> <span class=\"o\">:=</span> <span class=\"n\">is_p_group.of_card</span> <span class=\"n\">eq_card</span><span class=\"o\">,</span>\n  <span class=\"n\">is_maximal'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">Q</span> <span class=\"n\">is_p_Q</span> <span class=\"n\">hHQ</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">hQP</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">is_p_group.exists_le_sylow</span> <span class=\"n\">is_p_Q</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hHP</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">hHQ</span> <span class=\"n\">hQP</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hHsubP_fintype</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">H.subgroup_of</span> <span class=\"bp\">↑</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">apply</span> <span class=\"n\">fintype.of_equiv</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">subgroup.subgroup_of_equiv_of_le</span> <span class=\"n\">hHP</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">eq_HP</span> <span class=\"o\">:</span> <span class=\"n\">H.subgroup_of</span> <span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">eq_card_P</span> <span class=\"o\">:=</span> <span class=\"n\">sylow.card_eq_multiplicity</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n      <span class=\"n\">classical</span><span class=\"o\">,</span>\n      <span class=\"n\">resetI</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">subgroup.eq_top_of_card_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">of_equiv_card</span> <span class=\"o\">((</span><span class=\"n\">subgroup.subgroup_of_equiv_of_le</span> <span class=\"n\">hHP</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">),</span>\n      <span class=\"k\">have</span> <span class=\"n\">coe_eq</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"bp\">↥↑</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">coe_sort_coe_trans</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">eq_trans</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">eq_card</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- rw eq_card_P, --fails</span>\n      <span class=\"c1\">-- rw eq_card, --fails</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">subgroup.subgroup_of_eq_top</span> <span class=\"n\">at</span> <span class=\"n\">eq_HP</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">hQP</span> <span class=\"n\">eq_HP</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hHQ</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>but I get the following error for my definition of <code>coe_eq</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort_trans</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort_trans</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base_aux</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span><span class=\"o\">))</span>\n       <span class=\"n\">P</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort_trans</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span><span class=\"o\">))</span>\n          <span class=\"n\">P</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set_like.has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow.set_like</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n       <span class=\"n\">P</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"n\">P</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I don't understand the error yet, I will try to add more type information get a better understanding of what happens</p>",
        "id": 323038148,
        "sender_full_name": "Bernhard Reinke",
        "timestamp": 1674485188
    },
    {
        "content": "<p>I am now also using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>with this I hope I can figure this out myself.</p>",
        "id": 323049314,
        "sender_full_name": "Bernhard Reinke",
        "timestamp": 1674487787
    },
    {
        "content": "<p>I think I already understood the key issue: I was using <a href=\"https://leanprover-community.github.io/mathlib_docs/data/fintype/card.html#fintype.of_equiv_card\">fintype.of_equiv_card</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/data/fintype/card.html#fintype.card_congr\">fintype.card_congr</a>. With this I constructed new fintype instance as I moved along, resulting competing fintype instances on the same types</p>",
        "id": 323053332,
        "sender_full_name": "Bernhard Reinke",
        "timestamp": 1674488777
    },
    {
        "content": "<p>I managed to finish it :) here is the whole thing (a little bit golfed)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.sylow</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">card_eq_multiplicity_to_sylow</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">eq_card</span><span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">nat.factorization</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">to_subgroup</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">is_p_group'</span> <span class=\"o\">:=</span> <span class=\"n\">is_p_group.of_card</span> <span class=\"n\">eq_card</span><span class=\"o\">,</span>\n  <span class=\"n\">is_maximal'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">Q</span> <span class=\"n\">is_p_Q</span> <span class=\"n\">hHQ</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">hQP</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">is_p_group.exists_le_sylow</span> <span class=\"n\">is_p_Q</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">eq_HP</span> <span class=\"o\">:</span> <span class=\"n\">H.subgroup_of</span> <span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">classical</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">subgroup.eq_top_of_card_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">card_congr</span> <span class=\"o\">((</span><span class=\"n\">subgroup.subgroup_of_equiv_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hHQ</span> <span class=\"n\">hQP</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"n\">eq_card</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">coe_eq</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">↑</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↥</span> <span class=\"n\">P</span>  <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sylow.to_subgroup_eq_coe</span><span class=\"o\">,</span>\n        <span class=\"n\">refl</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">card_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv.cast</span> <span class=\"n\">coe_eq</span><span class=\"o\">),</span>\n      <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">sylow.card_eq_multiplicity</span> <span class=\"n\">P</span><span class=\"o\">),</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">subgroup.subgroup_of_eq_top</span> <span class=\"n\">at</span> <span class=\"n\">eq_HP</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hQP</span> <span class=\"n\">eq_HP</span><span class=\"o\">)</span> <span class=\"n\">hHQ</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">card_eq_multiplicity_to_sylow_coe</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">eq_card</span><span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">nat.factorization</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">card_eq_multiplicity_to_sylow</span> <span class=\"n\">H</span> <span class=\"n\">eq_card</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Does it make sense to polish it and try to open a PR to add it to <code>sylow</code>? What do the current authors of <code>sylow</code> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> think?</p>",
        "id": 323061664,
        "sender_full_name": "Bernhard Reinke",
        "timestamp": 1674490955
    },
    {
        "content": "<p>Is the <code>[fintype H]</code> assumption really necessary? Mathematically, a subgroup of a finite group has to be finite...</p>",
        "id": 323062279,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1674491083
    },
    {
        "content": "<p>It's not necessary, but it's good to have it -- there might be several ways one forms a <code>[fintype H]</code>, one of which is the <code>subgroup.fintype</code> or whatever, or by some other method.</p>",
        "id": 323063279,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1674491290
    },
    {
        "content": "<p>And including <code>[fintype H]</code> in the arguments is more general -- it means \"it doesn't matter which fintype instance one uses for this proof\", unlike if you didn't include it, which would mean \"this proof _might_ only work if one uses the fintype instance that relies on the <code>fintype G</code>\". That's my understanding at least</p>",
        "id": 323063603,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1674491377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"562819\">@Bernhard Reinke</span> Yes, this converse seems like a great addition to <code>sylow.lean</code>. Here's a golf, with a helpful lemma extracted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- can weaken h2</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lem</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≤</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">relindex_eq_one.mp</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_right_inj'</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">relindex_mul_relindex</span> <span class=\"bp\">⊥</span> <span class=\"n\">K</span> <span class=\"n\">H</span> <span class=\"n\">bot_le</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">relindex_bot_left_eq_card</span><span class=\"o\">,</span> <span class=\"n\">relindex_bot_left_eq_card</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">index_ne_zero_of_finite</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">card_eq_multiplicity_to_sylow</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">card_eq</span><span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_subgroup</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">is_p_group'</span> <span class=\"o\">:=</span> <span class=\"n\">is_p_group.of_card</span> <span class=\"n\">card_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">is_maximal'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">hHP</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">is_p_group.of_card</span> <span class=\"n\">card_eq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists_le_sylow</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lem</span> <span class=\"n\">hHP</span> <span class=\"o\">(</span><span class=\"n\">P.card_eq_multiplicity.trans</span> <span class=\"n\">card_eq.symm</span><span class=\"o\">))</span> <span class=\"bp\">▸</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">P.3</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 323099428,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1674501635
    },
    {
        "content": "<p>I tried to generalize your lemma, it seems it is possible to reduce it to <a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/finite.html#set.eq_of_subset_of_card_le\">set.eq_of_subset_of_card_le</a>. Here is my adjustment of your golf:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set_like.basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.sylow</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">set_like.eq_of_subset_of_card_le</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">set_like</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"n\">t</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">hsub</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcard</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"bp\">↥</span><span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"bp\">↥</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">set_like.coe_set_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.eq_of_subset_of_card_le</span> <span class=\"n\">hsub</span> <span class=\"n\">hcard</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">card_eq_multiplicity_to_sylow</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">card_eq</span><span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_subgroup</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">is_p_group'</span> <span class=\"o\">:=</span> <span class=\"n\">is_p_group.of_card</span> <span class=\"n\">card_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">is_maximal'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">classical</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">hHP</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">is_p_group.of_card</span> <span class=\"n\">card_eq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists_le_sylow</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">set_like.eq_of_subset_of_card_le</span> <span class=\"n\">hHP</span> <span class=\"o\">(</span><span class=\"n\">P.card_eq_multiplicity.trans</span> <span class=\"n\">card_eq.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">P.3</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 323260779,
        "sender_full_name": "Bernhard Reinke",
        "timestamp": 1674569436
    },
    {
        "content": "<p>Does it make sense to also add the first lemma to mathlib? What would be good place for it? <code>data.set_like.fintype</code>?</p>",
        "id": 323261605,
        "sender_full_name": "Bernhard Reinke",
        "timestamp": 1674569612
    },
    {
        "content": "<p>Also, I had to include <code>classical</code> in my proof again, is there a reason why you could omit it?</p>",
        "id": 323262279,
        "sender_full_name": "Bernhard Reinke",
        "timestamp": 1674569779
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 323293662,
        "sender_full_name": "Parivash",
        "timestamp": 1674576876
    },
    {
        "content": "<p>This is not true (for x=1). What are the types of your objects? (the reals, complexes? An arbitrary ring?) You are also writing a question in someone else's thread (this is a thread about Sylow subgroups). Can you move your question to a new thread and if possible write it as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with Lean code rather than in LaTeX? Questions written in fully compiling Lean are much easier to answer definitively.</p>",
        "id": 323294784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674577185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"562819\">Bernhard Reinke</span> <a href=\"#narrow/stream/113489-new-members/topic/Inverse.20to.20sylow.2Ecard_eq_multiplicity/near/323261605\">said</a>:</p>\n<blockquote>\n<p>Does it make sense to also add the first lemma to mathlib? What would be good place for it? <code>data.set_like.fintype</code>?</p>\n</blockquote>\n<p>Yeah, that seems like a good idea. Also, you should be able to get rid of the arrows and golf:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">set_like.eq_of_subset_of_card_le</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">set_like</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hsub</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcard</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">set_like.ext'</span> <span class=\"o\">(</span><span class=\"n\">set.eq_of_subset_of_card_le</span> <span class=\"n\">hsub</span> <span class=\"n\">hcard</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 323330587,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1674586739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"562819\">Bernhard Reinke</span> <a href=\"#narrow/stream/113489-new-members/topic/Inverse.20to.20sylow.2Ecard_eq_multiplicity/near/323262279\">said</a>:</p>\n<blockquote>\n<p>Also, I had to include <code>classical</code> in my proof again, is there a reason why you could omit it?</p>\n</blockquote>\n<p>Not sure. Perhaps it was because I was writing my proof inside <code>sylow.lean</code> (since that is where it would go eventually)?</p>",
        "id": 323330965,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1674586865
    },
    {
        "content": "<p>Either you have <code>open_locale classical</code> in that file or it's <a href=\"#narrow/stream/113488-general/topic/.60classical.60.20attribute.20leakage/near/323270759\">this leakage problem</a>.</p>",
        "id": 323332428,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1674587284
    }
]