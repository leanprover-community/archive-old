[
    {
        "content": "<p>Hello, I would like to concatenate two matrices together column wise, like in the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">+</span> <span class=\"n\">p₂</span><span class=\"o\">))</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"bp\">&lt;&gt;</span> <span class=\"n\">X₂</span><span class=\"o\">))</span>\n</code></pre></div>\n<p><code>&lt;&gt;</code> here represents concatenation, is there a function that does that? I'm aware matrices are functions, so I would have to concatenate their domains and ranges, right?</p>",
        "id": 279417465,
        "sender_full_name": "Aron Erben",
        "timestamp": 1650379054
    },
    {
        "content": "<p>I didn't see the method for that, but if you need to implement it you can use this idea:<br>\n<a href=\"https://i.imgur.com/nspxD5K.jpg\">https://i.imgur.com/nspxD5K.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://i.imgur.com/nspxD5K.jpg\"><img src=\"https://uploads.zulipusercontent.net/77a32f6c4feb728eb675a8f2d4e62f2fb4365922/68747470733a2f2f692e696d6775722e636f6d2f6e73707844354b2e6a7067\"></a></div>",
        "id": 279430959,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1650384493
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">matrix.fin_append_cols</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">+</span> <span class=\"n\">p₂</span><span class=\"o\">))</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">fin.add_cases</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 279432712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650385257
    },
    {
        "content": "<p>Or a more general way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.equiv.fin</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matrix.append_cols</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n₁</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n₂</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">sum.elim</span> <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">+</span> <span class=\"n\">p₂</span><span class=\"o\">))</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X₁.append_cols</span> <span class=\"n\">X₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">minor</span> <span class=\"n\">id</span> <span class=\"n\">fin_sum_fin_equiv.symm</span>\n</code></pre></div>",
        "id": 279433388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650385560
    },
    {
        "content": "<p>You might be interested in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.from_blocks\">docs#matrix.from_blocks</a></p>",
        "id": 279433458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650385573
    }
]