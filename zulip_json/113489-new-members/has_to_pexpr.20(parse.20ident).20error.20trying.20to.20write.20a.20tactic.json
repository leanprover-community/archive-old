[
    {
        "content": "<p>I'm trying to make a (very simple) tactic that replaces a subexpression with a new variable throughout the context.  Here's an example of the tactic logic I want to automate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>  <span class=\"c1\">-- target is now z ≥ 0</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>At the beginning of the proof, the goal is <code>x + y ≥ 0</code>.  The first three lines replace the goal with <code>z ≥ 0</code>, and add <code>z =: x + y</code> as a hypothesis.</p>\n<p>Here's an attempt at a tactic to do this, and the hoped-for rewritten proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.label</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.i_to_expr</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span> <span class=\"n\">s</span> <span class=\"n\">none</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">label</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Unfortunately, I'm pretty sure I have the quotation logic wrong in that tactic, as I get an obscure error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">,</span>\n<span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">,</span>\n<span class=\"n\">tactic.interactive.label</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">,</span>\n<span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_to_pexpr</span> <span class=\"o\">(</span><span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Thanks in advance for any pointers!</p>",
        "id": 289649115,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1657832415
    },
    {
        "content": "<p>Should you use <code>e</code> instead of <code>q</code> in have?</p>",
        "id": 289649839,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657832823
    },
    {
        "content": "<p>On mobile and it's late, so may be nonsense!</p>",
        "id": 289649976,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657832886
    },
    {
        "content": "<p>Alas, that produces the same error (which is not surprising since it's complaining about <code>parse ident</code>, not <code>parse texpr</code>).</p>",
        "id": 289650220,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1657833019
    },
    {
        "content": "<p>Indeed, here's a simpler version with no <code>texpr</code> and the same error (via hardcoding):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.label</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"c1\">--(q : parse texpr)</span>\n    <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"c1\">--e ← tactic.i_to_expr q,</span>\n  <span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span> <span class=\"n\">s</span> <span class=\"n\">none</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">`</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289650467,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1657833156
    },
    {
        "content": "<p>Can you make a mwe with imports?</p>",
        "id": 289663670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657841169
    },
    {
        "content": "<p>My guess is that you ned to write  <code> %%`(s)</code> instead of <code>%%s</code></p>",
        "id": 289663744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657841253
    },
    {
        "content": "<p>Or maybe you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.get_local\">docs#tactic.get_local</a> to turn the name into an expression</p>",
        "id": 289663751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657841267
    },
    {
        "content": "<p>I do not know how to fix the issue in your initial tactic, but I think that it is caused by the <code>rw</code>, not the <code>have</code>.  If you do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.label</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"n\">tactic.interactive.</span><span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span> <span class=\"n\">s</span> <span class=\"n\">none</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"n\">read</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">label</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Then you can see that the problem is with the <code>rw</code>.  Indeed, from the <code>read</code> command, you can see that you have successfully added <code>z</code> to the local context, but you did not create the expression <code>x + y = z</code>.</p>\n<p>Also, I think that instead of <code>rw</code> you may end up using <code>rewrite_target</code>.</p>",
        "id": 289683057,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657855766
    },
    {
        "content": "<p>For some strange reason, the first time that I pasted your code in, it was not highlighting the <code>rw</code> as wrong, but only the <code>def</code>.  Now, it seems more directly mentioning the <code>rw</code>.  I imagine that what I said above is not helpful, then, sorry!</p>",
        "id": 289688990,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657864194
    },
    {
        "content": "<p>Here's a working example of roughly what I want <em>except</em> for the ident part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.meta.rewrite_tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">parse</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean.parser</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive.types</span> <span class=\"o\">(</span><span class=\"n\">texpr</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>  <span class=\"c1\">-- target is now z ≥ 0</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.label</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.i_to_expr</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.pose</span> <span class=\"n\">s</span> <span class=\"n\">none</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.i_to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"c1\">-- Ideally, z would be %%s or similar</span>\n  <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.assert</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.reflexivity'</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.rewrite_target</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.clear</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">label</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289783019,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1657918945
    },
    {
        "content": "<p>In the end I'm not sure how to use <code>rw</code>, but calling into the noninteractive tactics seems reasonable (though I'd be curious if there are ways to do this in fewer lines).  The missing bit is that <code>(%%e = z)</code> hardcodes <code>z</code> rather than using <code>%%s</code> or similar.  I'm still not sure how to use <code>s</code> without getting the <code>has_to_pexpr (parse ident)</code> error.</p>",
        "id": 289783258,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1657919061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Thanks for also proposing <code>rewrite_target</code> instead of <code>rw</code>; that does seem to involve less magic.</p>",
        "id": 289783395,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1657919159
    },
    {
        "content": "<p>Did you try my suggestion to use <code>get_local</code>?</p>",
        "id": 289783918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657919519
    }
]