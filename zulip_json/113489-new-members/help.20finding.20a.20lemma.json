[
    {
        "content": "<p>Where is <code>(a - b) - (c - b) = a - c</code>? (With the appropriate inequality as a hypothesis)</p>",
        "id": 159223961,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550918008
    },
    {
        "content": "<p>so... for nat?</p>",
        "id": 159223962,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550918027
    },
    {
        "content": "<p>Sure.</p>",
        "id": 159224002,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550918044
    },
    {
        "content": "<p>(Sorry, yes, I should have said that!)</p>",
        "id": 159224009,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550918060
    },
    {
        "content": "<p>Is this meant to be called <code>sub_sub_sub_right</code> or something?</p>",
        "id": 159224088,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550918209
    },
    {
        "content": "<p>by analogy with <code>nat.add_sub_add_right : ∀ (n k m : ℕ), n + k - (m + k) = n - m</code></p>",
        "id": 159224099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550918252
    },
    {
        "content": "<p>The group version is called <code>sub_sub_sub_cancel_right</code>. I would rather be consistent with that.</p>",
        "id": 159224220,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550918484
    },
    {
        "content": "<p>Sure! But does it exist already?</p>",
        "id": 159224460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550918959
    },
    {
        "content": "<p>Surely?</p>",
        "id": 159224462,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550918965
    },
    {
        "content": "<p><code>#find ((_ - _) - (_ - _) = _)</code> didn't return anything about naturals.</p>",
        "id": 159224533,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550919042
    },
    {
        "content": "<p>And while we're at it: <code>a \\le b \\imp (a - c) \\le (b-c)</code>?</p>",
        "id": 159224537,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550919061
    },
    {
        "content": "<p><code>nat.sub_le_sub_left</code> is there.</p>",
        "id": 159224545,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550919111
    },
    {
        "content": "<p>sorry <code>right</code></p>",
        "id": 159224586,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550919149
    },
    {
        "content": "<p>Ok:</p>\n<div class=\"codehilite\"><pre><span></span>lemma sub_sub_sub_cancel_right {a b c : ℕ} (h₂ : c ≤ b) : (a - c) - (b - c) = a - b :=\nbegin\n  rw [nat.sub_sub, ←nat.add_sub_assoc, nat.add_sub_cancel_left],\n  exact h₂\nend\n</pre></div>\n\n\n<p>looks okay? Can I put that in <code>data/nat/basic.lean</code>?</p>",
        "id": 159224646,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550919316
    },
    {
        "content": "<p>Yes. Can't you <code>rw ←nat.add_sub_assoc h₂</code> and put the proof on one line</p>",
        "id": 159224700,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550919423
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 159224753,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550919540
    },
    {
        "content": "<p>Should probably be <code>protected</code> as well</p>",
        "id": 159224754,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550919541
    },
    {
        "content": "<p>Why is that?</p>",
        "id": 159224763,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550919565
    },
    {
        "content": "<p>One could go through every lemma proved for add comm groups and reprove it for nat with the appropriate inequalities added as hypotheses if necessary.</p>",
        "id": 159225156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550920328
    },
    {
        "content": "<p>That sounds like a good exercise for someone. :-)</p>",
        "id": 159225172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550920396
    },
    {
        "content": "<p>I _hate_ having to deal with stupid inequalities. At the moment I'm staring at </p>\n<div class=\"codehilite\"><pre><span></span>h₂ : a &lt; m,\nh₃ : m ≤ a\n⊢ false\n</pre></div>\n\n\n<p>and trying to remember implementation details of <code>lt</code> and <code>le</code>...</p>",
        "id": 159225224,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550920463
    },
    {
        "content": "<p>I guess <code>exact not_lt_of_ge h₃ h₂</code> is not so bad. But where is my <code>duh</code> tactic for these? Can we just import <code>linarith</code> at the beginning of time?</p>",
        "id": 159225291,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550920569
    },
    {
        "content": "<p>How about a lemma that says \"two lists are equal if they are both ordered according to a strict order, and they have the same members\"?</p>",
        "id": 159225301,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550920645
    },
    {
        "content": "<p><code>linarith</code></p>",
        "id": 159225350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550920719
    },
    {
        "content": "<p>oh you know <code>linarith</code>. Does it not work? whenever I'm doing undergraduate analysis it's the first thing I import after <code>data.real.basic</code></p>",
        "id": 159225374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550920766
    },
    {
        "content": "<p>you could also prove a &lt; a with lt_of_lt_of_le I guess</p>",
        "id": 159225428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550920854
    },
    {
        "content": "<p>The two lists are equal thing is <code>eq_of_sorted_of_perm</code></p>",
        "id": 159226125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550922147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, the problem here is that I'm filling in gaps I'm finding back in data.list, data.finset and data.multiset, where it's presumably too early to import linarith.</p>",
        "id": 159226416,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550922752
    },
    {
        "content": "<p>And there's no <code>linarith?</code> mode that prints out a proof term for you. :-)</p>",
        "id": 159226420,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550922768
    },
    {
        "content": "<p>Oh I see!</p>",
        "id": 159226438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550922801
    },
    {
        "content": "<p>I want a tactic that explores short tactic scripts and gives you a short proof if one exists</p>",
        "id": 159226905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550923644
    },
    {
        "content": "<p>I promise you don't want to see the proof terms that <code>linarith</code> generates. :)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">linarith</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">f</span>\n</pre></div>",
        "id": 159227834,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1550925384
    },
    {
        "content": "<p>What is <code>lemma nat.le_pred_of_lt (h : a &lt; b) : a ≤ b - 1</code> actually called?</p>",
        "id": 159248834,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550961887
    },
    {
        "content": "<p><code>nat.pred_le_iff</code></p>",
        "id": 159248899,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550961989
    },
    {
        "content": "<p>oh, but that's still only half of it</p>",
        "id": 159249038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550962245
    },
    {
        "content": "<p>actually, <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>, I think that one is irrelevant here</p>",
        "id": 159249049,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550962302
    },
    {
        "content": "<p>Yeah, it's <code>pred_le</code> not <code>le_pred</code></p>",
        "id": 159249162,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550962556
    },
    {
        "content": "<p>How is one meant to prove</p>\n<div class=\"codehilite\"><pre><span></span>lemma nat.ge_one_of_gt {n m : ℕ} (h : m &gt; n) : m ≥ 1 :=\nle_trans ((le_add_iff_nonneg_left _).2 (nat.zero_le _)) h\n</pre></div>\n\n\n<p>That proof is obviously lame.</p>",
        "id": 159258315,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550980043
    },
    {
        "content": "<p>I would have gone for <code>lt_trans (nat.zero_le _) h</code></p>",
        "id": 159258547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550980461
    },
    {
        "content": "<p>also, stop using <code>ge</code> and <code>gt</code> so much</p>",
        "id": 159258573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550980532
    },
    {
        "content": "<p>Hmm.. I used <code>ge</code> and <code>gt</code> here for the sake of naming.</p>",
        "id": 159259103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550981527
    },
    {
        "content": "<p>Would you name it <code>lemma nat.one_le_of_lt {n m : ℕ} (h : n &lt; m) : 1 \\le m :=</code>?</p>",
        "id": 159259106,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550981569
    },
    {
        "content": "<p>Somehow that seems harder to parse. (Because the subject of the phrase is embedded in the middle \"one is le than ARGUMENT of lt\", rather than \"ARGUMENT is ge one of gt\".)</p>",
        "id": 159259119,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550981631
    },
    {
        "content": "<p>Grah, I hate (Lean's lack of support for) the natural numbers so much.</p>",
        "id": 159259669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550982609
    },
    {
        "content": "<p>What is the easiest proof of false, given <code>a : n + 1 ≤ n</code>?</p>",
        "id": 159259674,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550982626
    },
    {
        "content": "<p><code>example (n : ℕ) : ¬(n + 1 ≤ n) := not_le_of_gt (nat.lt_succ_self _)</code></p>",
        "id": 159260148,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550983499
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span>.</p>",
        "id": 159260206,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550983613
    },
    {
        "content": "<p>there's also a <code>nat</code> lemma that says exactly what you want</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_succ_le_self</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>(of course <code>linarith</code> works, but the proof term is hideous)</p>",
        "id": 159260383,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1550984005
    },
    {
        "content": "<p>Do we have <code>lemma mul_mod (a b n : ℕ) : (a * b) % n = (a % n) * (b % n) % n := sorry</code>?</p>",
        "id": 159413106,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551176069
    },
    {
        "content": "<p>I would look into <code>data/nat/modeq.lean</code></p>",
        "id": 159413157,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551176158
    },
    {
        "content": "<p>Doesn't seem to be there. It seems a pain to prove, actually.</p>",
        "id": 159414197,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551177438
    },
    {
        "content": "<p>I'd be surprised if it hasn't been needed yet</p>",
        "id": 159414212,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551177470
    },
    {
        "content": "<p>similarly for <code>add_mod</code>.</p>",
        "id": 159414216,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551177478
    },
    {
        "content": "<p>It follows from some stuff about modeq</p>",
        "id": 159414474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177745
    },
    {
        "content": "<p>it is roughly <code>modeq_mul mod_modeq mod_modeq</code></p>",
        "id": 159414489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177782
    },
    {
        "content": "<p>okay, I see.</p>",
        "id": 159414510,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551177805
    },
    {
        "content": "<p>Why not descending all this to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">Z/n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\">n</span></span></span></span>?</p>",
        "id": 159414526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551177838
    },
    {
        "content": "<p>modeq seems supremely painful to use ... rather than just having a new type for N/nN and Z/nZ</p>",
        "id": 159414576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551177854
    },
    {
        "content": "<p>has someone done N/nZ and Z/nZ?</p>",
        "id": 159414583,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551177888
    },
    {
        "content": "<p>Prove that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi mathvariant=\"normal\">%</mi><mi>n</mi><mo>=</mo><mi>b</mi><mi mathvariant=\"normal\">%</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\"> a \\% n = b \\% n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"base\"><span class=\"mord mathit\">a</span><span class=\"mord mathrm\">%</span><span class=\"mord mathit\">n</span><span class=\"mrel\">=</span><span class=\"mord mathit\">b</span><span class=\"mord mathrm\">%</span><span class=\"mord mathit\">n</span></span></span></span> iff <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>π</mi><mo>(</mo><mi>a</mi><mo>)</mo><mo>=</mo><mi>π</mi><mo>(</mo><mi>b</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\pi(a) = \\pi(b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathit\">a</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathit\">b</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">π</span></span></span></span> goes down from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">Z</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">Z/n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\">n</span></span></span></span></p>",
        "id": 159414584,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551177889
    },
    {
        "content": "<p>there is a type for Z/nZ</p>",
        "id": 159414585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177891
    },
    {
        "content": "<p>like Patrick said</p>",
        "id": 159414589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177898
    },
    {
        "content": "<p><code>zmod</code></p>",
        "id": 159414590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177902
    },
    {
        "content": "<p>That is surely proven already</p>",
        "id": 159414603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177921
    },
    {
        "content": "<p><code>zmod.eq_iff_modeq_nat</code></p>",
        "id": 159414657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177978
    },
    {
        "content": "<p>Thanks!</p>\n<p>... so at the end of the day I get a hypothesis <code>1 = 1 + (1 + (1 + 4 * ↑n))</code> (here we are in <code>zmod 4</code>) and I want to prove false...</p>",
        "id": 159415432,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551178868
    },
    {
        "content": "<p>I think you can <code>change 4 with 0</code></p>",
        "id": 159415453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551178905
    },
    {
        "content": "<p>there's probably a better way though</p>",
        "id": 159415505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551178928
    },
    {
        "content": "<p><code>cast_self_eq_zero</code>?</p>",
        "id": 159415521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551178953
    },
    {
        "content": "<p>I can't seem to get that to rewrite. Because the 4 here is the actual numeral, not the cast of the 4 in \\nat+</p>",
        "id": 159415567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551179024
    },
    {
        "content": "<p><code>change 4 with 0 at w</code> doesn't seem to have any effect</p>",
        "id": 159415636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551179086
    },
    {
        "content": "<p><code>change 4 with ((4:N+):N)</code> might work</p>",
        "id": 159415775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551179251
    },
    {
        "content": "<p>Or just go back to nats from this point</p>",
        "id": 159415845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551179320
    },
    {
        "content": "<p>How do I go back to nats? That's what I'm missing, I think.</p>",
        "id": 159415854,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551179337
    },
    {
        "content": "<p>Here's a MWE:</p>\n<div class=\"codehilite\"><pre><span></span>lemma foo (n : ℕ) (h : @eq (zmod 4) 1\n    (@has_add.add (zmod 4)\n       (@add_semigroup.to_has_add (zmod 4) (@add_comm_semigroup.to_add_semigroup (zmod 4) (zmod.add_comm_semigroup 4)))\n       1\n       (@has_add.add (zmod 4)\n          (@add_semigroup.to_has_add (zmod 4)\n             (@add_comm_semigroup.to_add_semigroup (zmod 4) (zmod.add_comm_semigroup 4)))\n          1\n          (@has_add.add (zmod 4)\n             (@add_semigroup.to_has_add (zmod 4)\n                (@add_comm_semigroup.to_add_semigroup (zmod 4) (zmod.add_comm_semigroup 4)))\n             1\n             (@has_mul.mul (zmod 4)\n                (@mul_zero_class.to_has_mul (zmod 4)\n                   (@semiring.to_mul_zero_class (zmod 4)\n                      (@ring.to_semiring (zmod 4) (@comm_ring.to_ring (zmod 4) (zmod.comm_ring 4)))))\n                4\n                (@coe nat (zmod 4)\n                   (@coe_to_lift nat (zmod 4)\n                      (@coe_base nat (zmod 4)\n                         (@nat.cast_coe (zmod 4) (zmod.has_zero 4) (zmod.has_one 4)\n                            (@distrib.to_has_add (zmod 4)\n                               (@ring.to_distrib (zmod 4) (@comm_ring.to_ring (zmod 4) (zmod.comm_ring 4)))))))\n                   n)))))) : false :=\nbegin\n\nend\n</pre></div>",
        "id": 159415878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551179361
    },
    {
        "content": "<p>this works:</p>\n<div class=\"codehilite\"><pre><span></span>  simp [show (4:zmod 4) = 0, from @zmod.cast_self_eq_zero 4] at h,\n  cases h\n</pre></div>",
        "id": 159416187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551179727
    },
    {
        "content": "<p>woah... okay.</p>",
        "id": 159416265,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551179829
    },
    {
        "content": "<p>Is there any way we can make that more ergonomic?</p>",
        "id": 159416283,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551179876
    },
    {
        "content": "<p>It seems like the sort of thing you'd hope <code>simp</code> to do unassisted.</p>",
        "id": 159416330,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551179891
    },
    {
        "content": "<p>or are we just doomed because the <code>4</code> here is a numeral?</p>",
        "id": 159416434,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551180052
    },
    {
        "content": "<p>That's one of the things that the <code>cast</code> tactic is supposed to do</p>",
        "id": 159416505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551180134
    },
    {
        "content": "<p>I forget who was working on that</p>",
        "id": 159416510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551180144
    },
    {
        "content": "<p><code>simp</code> can't do this unassisted because the cast goes the wrong direction... It wants to get rid of up arrows not put them in</p>",
        "id": 159416536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551180190
    },
    {
        "content": "<p>The lemma <code>@[simp] lemma cast_self_eq_zero' {n : ℕ} {h : n &gt; 0} : (n : zmod ⟨n, h⟩) = 0 :=</code></p>",
        "id": 159416619,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551180247
    },
    {
        "content": "<p>seems to work... except that the <code>0</code> ends up in the wrong version of <code>zmod 4</code>, somehow...</p>",
        "id": 159416628,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551180274
    },
    {
        "content": "<p>so afterwards <code>rw [zero_mul]</code> fails, but <code>erw [zero_mul]</code> succeeds...</p>",
        "id": 159416637,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551180293
    },
    {
        "content": "<p>(or rather, it _doesn't_ work in the MWE example I posted, but mysteriously does work in my bigger example!)</p>",
        "id": 159416714,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551180369
    },
    {
        "content": "<p>grah</p>",
        "id": 159416717,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551180371
    },
    {
        "content": "<p>this is the main downside of <code>zmod</code> compared to <code>modeq</code> - you have to worry about positivity</p>",
        "id": 159416949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551180656
    },
    {
        "content": "<p>such a nightmare... I got most of the way through our 2nd years first problem sheet, and then this blew up in my face :-)</p>",
        "id": 159417076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551180832
    },
    {
        "content": "<p>Here's another MWE, where I can get a simp lemma working, but then have to <code>erw</code> later instead of <code>simp</code>:</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] lemma zmod.cast_self_eq_zero&#39; {n : ℕ} {h : n &gt; 0} : (n : zmod ⟨n, h⟩) = 0 :=\nzmod.cast_self_eq_zero\n\n\nlemma bar (n : ℕ) (w : @eq (zmod 4)\n    1\n    (@has_add.add (zmod 4)\n       (@distrib.to_has_add (zmod 4) (@ring.to_distrib (zmod 4) (@comm_ring.to_ring (zmod 4) (zmod.comm_ring 4))))\n       (@has_add.add (zmod 4)\n          (@distrib.to_has_add (zmod 4) (@ring.to_distrib (zmod 4) (@comm_ring.to_ring (zmod 4) (zmod.comm_ring 4))))\n          (@has_add.add (zmod 4)\n             (@distrib.to_has_add (zmod 4) (@ring.to_distrib (zmod 4) (@comm_ring.to_ring (zmod 4) (zmod.comm_ring 4))))\n             (@coe nat (zmod 4)\n                (@coe_to_lift nat (zmod 4)\n                   (@coe_base nat (zmod 4)\n                      (@nat.cast_coe (zmod 4) (zmod.has_zero 4) (zmod.has_one 4)\n                         (@distrib.to_has_add (zmod 4)\n                            (@ring.to_distrib (zmod 4) (@comm_ring.to_ring (zmod 4) (zmod.comm_ring 4)))))))\n                (@has_mul.mul nat nat.has_mul 4 n))\n             1)\n          1)\n       1)) : false :=\nbegin\n  simp at w,\n  erw [zero_mul] at w,\n  simp at w,\n  cases w,\nend\n</pre></div>",
        "id": 159417133,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551180856
    },
    {
        "content": "<p>This happened to me all the time when I was doing problem sheet questions.</p>",
        "id": 159417136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551180860
    },
    {
        "content": "<p>The Lean devs focus on theorems not examples, and sometimes examples are far harder than you'd like.</p>",
        "id": 159417154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551180902
    },
    {
        "content": "<p>the best solution is to stop doing problem sheet questions :P</p>",
        "id": 159417167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551180915
    },
    {
        "content": "<p>I'm sold...</p>",
        "id": 159417172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551180932
    },
    {
        "content": "<p>I know you're not interested in this aspect of Lean :-) But my students are.</p>",
        "id": 159417177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551180937
    },
    {
        "content": "<p>As you said a day or two ago, examples are for the educators.</p>",
        "id": 159417183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551180949
    },
    {
        "content": "<p>(For context, I was actually trying to write a \"an undergraduate could do this\" proof that there are infinitely many 4n+3 primes.)</p>",
        "id": 159417246,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551180992
    },
    {
        "content": "<p>when you say \"an undergraduate could do this\" do you mean you wrote it in a deliberately inefficient way to find out how to recover?</p>",
        "id": 159417287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551181043
    },
    {
        "content": "<p>That's a theorem I want in mathlib btw</p>",
        "id": 159417303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551181075
    },
    {
        "content": "<p>aha, you wanted to prove that a 4n+3 prime is not equal to 1?</p>",
        "id": 159417356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551181131
    },
    {
        "content": "<p>I was just proving a lemma, that a 4n+3 number has a 4n+3 prime factor:</p>",
        "id": 159417652,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551181448
    },
    {
        "content": "<p><a href=\"https://gist.github.com/semorrison/a43a508646169efe1d1b3bda1e142140\" target=\"_blank\" title=\"https://gist.github.com/semorrison/a43a508646169efe1d1b3bda1e142140\">https://gist.github.com/semorrison/a43a508646169efe1d1b3bda1e142140</a></p>",
        "id": 159417669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551181476
    },
    {
        "content": "<p>I think it would help to not call the number <code>4*k+3</code> and instead call it <code>k'</code> such that <code>k' % 4 = 3</code></p>",
        "id": 159417846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551181684
    },
    {
        "content": "<p>or maybe <code>k' == 3 [MOD 4]</code></p>",
        "id": 159417860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551181715
    },
    {
        "content": "<p>or maybe <code>(k' : zmod 4) = 1</code>, since <code>modeq</code> is horrible to use :-)</p>",
        "id": 159417885,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551181745
    },
    {
        "content": "<p>it's a relation between nats. This matters more than you seem to think</p>",
        "id": 159417906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551181775
    },
    {
        "content": "<p>It's just that the relation is almost-but-not-actually equality</p>",
        "id": 159417914,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551181799
    },
    {
        "content": "<p>so you find yourself wanting to rewrite using it, but you can't</p>",
        "id": 159417968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551181808
    },
    {
        "content": "<p>You can use it in calc blocks and apply transitivity lemmas and so on</p>",
        "id": 159417984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551181833
    },
    {
        "content": "<p>but it's true, the congruences you can use are controlled</p>",
        "id": 159417989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551181847
    },
    {
        "content": "<p>(hm, overlapping meanings of \"congruence\" here)</p>",
        "id": 159418008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551181866
    },
    {
        "content": "<p>(sure)</p>",
        "id": 159418013,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551181871
    },
    {
        "content": "<p>when you use zmod, you have to deal with coercions and how they affect everything else</p>",
        "id": 159418035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551181908
    },
    {
        "content": "<p>it's the same problem in a different notation</p>",
        "id": 159418041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551181916
    },
    {
        "content": "<blockquote>\n<p>I think it would help to not call the number <code>4*k+3</code> and instead call it <code>k'</code> such that <code>k' % 4 = 3</code></p>\n</blockquote>\n<p>Can you explain the motivation here? I can imagine this is worth trying, but I don't have an intuition ahead of time.</p>",
        "id": 159418098,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551181940
    },
    {
        "content": "<p>you don't care about <code>k</code> here. it's just some multiplier</p>",
        "id": 159418118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551181979
    },
    {
        "content": "<p>So this is exposing all that structure, the 4 and the 3 and the plus, to be rearranged by simp and friends and that will be bad news</p>",
        "id": 159418144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182011
    },
    {
        "content": "<p>okay</p>",
        "id": 159418223,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551182068
    },
    {
        "content": "<p>the point of definitions is to hide and idiomize irrelevant structure for the task at hand</p>",
        "id": 159418228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182077
    },
    {
        "content": "<blockquote>\n<p>That's a theorem I want in mathlib btw</p>\n</blockquote>\n<p>It's a trivial corollary of Chebotarev's density theorem.</p>",
        "id": 159418257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551182108
    },
    {
        "content": "<p>oh, actually I realize I misread it now... I was thinking about another theorem about 4*k+3 primes</p>",
        "id": 159418321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182164
    },
    {
        "content": "<p>Maybe the two square theorem? That's about 4*k+1 primes though</p>",
        "id": 159418336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182196
    },
    {
        "content": "<p>I don't know Chebotarev's density theorem, but it also follows from Dirichlet's theorem which I have some experience with</p>",
        "id": 159418370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551182252
    },
    {
        "content": "<p>Chebotarev's density theorem generalizes all the others. It's a very nice result in analytic number theory, but it's also quite hard to prove (-;<br>\nLet's do Cauchy first...</p>",
        "id": 159418614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551182499
    },
    {
        "content": "<blockquote>\n<p>the best solution is to stop doing problem sheet questions :P</p>\n</blockquote>\n<p>This was also my conclusion after reading Kevin's adventures. In my course I use only exercises designed specifically for Lean.</p>",
        "id": 159419375,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551183397
    },
    {
        "content": "<p>It is very exciting to hear about this sort of thing. So far, what do your students think of Lean and formal proofs?</p>",
        "id": 159419839,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551183946
    },
    {
        "content": "<p>It's hard to say. They like to pretend things are clear in their head, but they have difficulties explaining them to the machine. But actually things are not clear in their heads, and they also don't know how to explain them on paper.</p>",
        "id": 159420757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551184914
    },
    {
        "content": "<p>Also I had a non-optimal start because I didn't realize how far they were from being able to understand proofs (I hadn't seen a first year student for seven years, and even back then I was teaching stuff that did not require very precise reasonning)</p>",
        "id": 159420832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551184990
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\"><pre><span></span>def split_on {α : Type u} [decidable_eq α] (a : α) : list α → list (list α)\n</pre></div>\n\n\n<p>already exist in mathlib?</p>",
        "id": 162165893,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554024490
    },
    {
        "content": "<p>What about</p>\n<div class=\"codehilite\"><pre><span></span>def factor {m : Type u → Type v} [monad m] {α : Type u} : list (m α) → m (list α)\n| []          := return []\n| (a :: rest) := do a ← a, rest ← factor rest, return $ (a :: rest)\n</pre></div>",
        "id": 162165896,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554024514
    },
    {
        "content": "<p>and finally</p>\n<div class=\"codehilite\"><pre><span></span>def min {α : Type u} (l : list α) [has_lt α] [@decidable_rel α has_lt.lt] : option α := ...\n</pre></div>",
        "id": 162165987,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554024676
    },
    {
        "content": "<ul>\n<li><code>split_on</code>: I think not, but you haven't given the definition.</li>\n<li><code>factor</code>: This is <code>traverse</code> from the traversable library, as well as <code>monad.sequence</code> in core. </li>\n<li><code>min</code>: Not this particular function, but you can build it with <code>fold</code> easily enough. Also I would probably have assumed an <code>le</code> not an <code>lt</code> if it were there</li>\n</ul>",
        "id": 162166434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554025525
    },
    {
        "content": "<p>Do we want <code>min</code> and <code>max</code> (with <code>le</code>, I agree) in mathlib? Or should I just stick it at the point of use (needed for a tactic).</p>",
        "id": 162166628,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554025908
    },
    {
        "content": "<p><code>split_on</code> was defined as</p>\n<div class=\"codehilite\"><pre><span></span>def split_on_aux {α : Type u} [decidable_eq α] (a : α) : list α → list α → list (list α)\n| [] l       := [l.reverse]\n| (h :: t) l := if h = a then\n                  l.reverse :: (split_on_aux t [])\n                else\n                  split_on_aux t (h :: l)\n\ndef split_on {α : Type u} [decidable_eq α] (a : α) : list α → list (list α)\n| l := split_on_aux a l []\n</pre></div>",
        "id": 162166681,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554025966
    },
    {
        "content": "<p>I think <code>foldl1</code> would be good, and you could get <code>min</code> and <code>max</code> and variations easily from that</p>",
        "id": 162166682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554025969
    },
    {
        "content": "<p>With a few basic properties, can <code>split_on</code> go in the library?</p>",
        "id": 162166693,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554025991
    },
    {
        "content": "<p>Sorry, what did you have in mind as <code>foldl1</code>?</p>",
        "id": 162166709,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554026040
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldl1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldr1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldr1</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 162166984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554026405
    },
    {
        "content": "<p>Great. Why that name, though?</p>",
        "id": 162167129,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554026662
    },
    {
        "content": "<p>I think it's the haskell name</p>",
        "id": 162167130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554026670
    },
    {
        "content": "<p>it means \"fold at least one\"</p>",
        "id": 162167131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554026681
    },
    {
        "content": "<p>Here's how you can do <code>split_on</code> without the list postprocessing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">split_on_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">f</span>       <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">f</span> <span class=\"o\">[]]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">[]</span> <span class=\"bp\">::</span> <span class=\"n\">split_on_aux</span> <span class=\"n\">t</span> <span class=\"n\">id</span>\n  <span class=\"k\">else</span> <span class=\"n\">split_on_aux</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">split_on</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">split_on_aux</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">id</span>\n</pre></div>",
        "id": 162167152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554026750
    },
    {
        "content": "<p>ta!</p>",
        "id": 162167213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554026850
    },
    {
        "content": "<p>It would also be nice to have the inverse operation (<code>splice</code>? <code>riffle</code>?) and prove inverse</p>",
        "id": 162167273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554026999
    },
    {
        "content": "<p>working on it :-)</p>",
        "id": 162167521,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554027420
    },
    {
        "content": "<p>we already have <code>intersperse</code> in core for the inverse</p>",
        "id": 162167532,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554027432
    },
    {
        "content": "<p>it's only a one sided inverse</p>",
        "id": 162167537,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554027455
    },
    {
        "content": "<p>sorry, it's <code>intercalate</code>.</p>",
        "id": 162167663,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554027642
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma split_on_spec {α : Type u} [decidable_eq α] (a : α) (as : list α) :\n  list.intercalate [a] (as.split_on a) = as := sorry\n</pre></div>",
        "id": 162167664,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554027647
    },
    {
        "content": "<p>The inverse also holds in the other direction if you assume the intercalants have no <code>a</code></p>",
        "id": 162167817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554027916
    },
    {
        "content": "<p>I guess there is also a <code>split_on</code> that splits with a list argument</p>",
        "id": 162167820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554027959
    },
    {
        "content": "<p>although it's more complicated and should probably be a separate function</p>",
        "id": 162167865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554027976
    },
    {
        "content": "<p>or even a list predicate? ok I'll stop now</p>",
        "id": 162167869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554028013
    },
    {
        "content": "<p>Yeah, proving the spec doesn't seem the easiest thing in the world, in any case.</p>",
        "id": 162168494,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554028932
    },
    {
        "content": "<p>Can I PR the def separately? I really only need it for tactics at the moment. :-)</p>",
        "id": 162168497,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554028948
    },
    {
        "content": "<p>yeah, it's going in a different file anyway</p>",
        "id": 162171481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554034010
    },
    {
        "content": "<p><code>data.list.defs</code></p>",
        "id": 162171486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554034023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I'm curious now --- why do you think the version of <code>split_on_aux</code> that passes a function around it better than the list postprocessing version? Is it really more efficient than call <code>list.reverse</code>? The VM still needs to evaluate all the functions you've stacked up.</p>",
        "id": 162197645,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554075645
    },
    {
        "content": "<p>I'm asking because proving properties seems (likely to be?) easier with the post-processing version.</p>",
        "id": 162197658,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554075667
    },
    {
        "content": "<p>they are both linear time. It's hard to say</p>",
        "id": 162197661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554075680
    },
    {
        "content": "<p>You can also use <code>dlist</code> instead of a <code>list -&gt; list</code> accumulator, which amounts to the same thing but has some additional constraints that are relevant for the proof</p>",
        "id": 162197712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554075745
    },
    {
        "content": "<p>I see. For the sake of proofs the easiest implementation is more like: \"find the position <code>n</code> of the first <code>a</code>, if there is one, then return <code>(take n) :: split_on (drop (n+1))</code>.</p>",
        "id": 162197772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554075874
    },
    {
        "content": "<p>That's also linear time, I think, although obviously with a worse constant.</p>",
        "id": 162197775,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554075888
    },
    {
        "content": "<p>I would avoid an implementation like that because of the index manipulation</p>",
        "id": 162197793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554075934
    },
    {
        "content": "<p>(for proving things)</p>",
        "id": 162197794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554075951
    },
    {
        "content": "<p>interesting, okay. In any case, I'm not planning on proving anything here; but I was considering offering it to a student.</p>",
        "id": 162197841,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554076004
    },
    {
        "content": "<p>you want to do this proof by induction on the list; you should assume in the proof that the function has the form <code>\\lam r, l ++ r</code> for some <code>l</code>, and then use append assoc and stuff to proceed to the subcase in the inductive hypothesis</p>",
        "id": 162198103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554076463
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>-- Surely this is in the library?\nlemma foo {β : Type} [add_monoid β] (x : β) (h : ∀ y, x + y = y) : x = 0 :=\nby simpa using h 0\n</pre></div>",
        "id": 162292945,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554165891
    },
    {
        "content": "<p>And where do I find these?</p>\n<div class=\"codehilite\"><pre><span></span>lemma foo {a b : ℝ} (h : a + b = 0) (wa : a ≥ 0) (wb : b ≥ 0) : a = 0 :=\nsorry\nlemma turkle {a : ℝ} (h : a * a = 0) : a = 0 :=\nsorry\n</pre></div>",
        "id": 162298533,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554173298
    },
    {
        "content": "<p>... hmm, why didn't <code>library_search</code> find <br>\n<code>lemma bar {a : ℝ} : a * a ≥ 0 := mul_self_nonneg a</code></p>",
        "id": 162298670,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554173524
    },
    {
        "content": "<p>I'm really struggling finding lemmas today:</p>\n<div class=\"codehilite\"><pre><span></span>lemma or.self {P : Prop} (h : P ∨ P) : P :=\nby cases h; exact h\n</pre></div>\n\n\n<p>is surely already somewhere?</p>",
        "id": 162298931,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554173993
    },
    {
        "content": "<p><code>or_self</code></p>",
        "id": 162299013,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554174078
    },
    {
        "content": "<p>ah, which you have to use as <code>(or_self _).1</code></p>",
        "id": 162299089,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554174187
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (a b : ℕ) (h : 0 &lt; b) : a = (a / b) * b + (a % b) := sorry\n</pre></div>\n\n\n<p>?</p>",
        "id": 177698446,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570614906
    },
    {
        "content": "<p><code>nat.mod_add_div</code></p>",
        "id": 177698630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570615120
    },
    {
        "content": "<p>we should probably make all four variations on this, people never know which one to expect</p>",
        "id": 177698649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570615153
    },
    {
        "content": "<p>you don't need the side condition</p>",
        "id": 177698656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570615171
    },
    {
        "content": "<p>maybe all 8 variations... I tried swapping both the <code>*</code> and the <code>+</code>, but didn't think of reversing the <code>=</code>...</p>",
        "id": 177698774,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570615315
    },
    {
        "content": "<p>I really should add that to <code>library_search</code>.</p>",
        "id": 177698815,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570615326
    },
    {
        "content": "<p>that's standard mathlib practice</p>",
        "id": 177698816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570615327
    },
    {
        "content": "<p>I thought that commuting was already done by <code>library_search</code>?</p>",
        "id": 177698839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570615376
    },
    {
        "content": "<p>no, not yet</p>",
        "id": 177699134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570615661
    },
    {
        "content": "<p>it will apply either direction of an <code>iff</code></p>",
        "id": 177699156,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570615674
    },
    {
        "content": "<p>I think if it fails, it should just call <code>symmetry</code> and try again...</p>",
        "id": 177699219,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570615697
    },
    {
        "content": "<p>Ooof, just to be confusing we have <code>nat.mod_add_div</code>, but <code>euclidean_domain.div_add_mod</code>...</p>",
        "id": 177699270,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570615766
    },
    {
        "content": "<p>and we have helpful lemmas like</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] theorem mod_add_mod (m n k : ℤ) : (m % n + k) % n = (m + k) % n\n@[simp] theorem add_mod_mod (m n k : ℤ) : (m + n % k) % k = (m + n) % k\n</pre></div>\n\n\n<p>but without the corresponding versions on <code>nat</code>.</p>",
        "id": 177699389,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570615877
    },
    {
        "content": "<p>nor apparently the multiplicative versions anywhere</p>",
        "id": 177699454,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570615924
    },
    {
        "content": "<p>Most of those kinds of theorems are hidden behind the <code>modeq</code> definition</p>",
        "id": 177699835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570616343
    },
    {
        "content": "<p>it makes more sense to view that as a congruence lemma for <code>nat.modeq</code></p>",
        "id": 177699865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570616367
    },
    {
        "content": "<p>I have never managed to do anything under <code>modeq</code>. The thing I wanted to prove was </p>\n<div class=\"codehilite\"><pre><span></span>lemma foo (n k : ℕ) : k ≡ ((k / 2^n) + (k % 2^n)) [MOD 2^n - 1] :=\n</pre></div>\n\n\n<p>using the following proof:</p>\n<ol>\n<li>rewrite the <code>k</code> on the left hand side using <code>k = (k / 2^n) * 2^n + k % 2^n</code></li>\n<li>now replace the <code>* 2^n</code> with <code>* 1</code>, since we are working mod <code>2^n - 1</code>.</li>\n<li>simplify away <code>(k / 2^n) * 1</code> to <code>k / 2^n</code>, and we're done.</li>\n</ol>\n<p>But once we're inside the <code>modeq</code> I can't use <code>simp</code>, or <code>rw</code>, or <code>conv</code>, and so I don't know how to express this proof... :-(</p>",
        "id": 177704137,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570620549
    },
    {
        "content": "<p>work with <code>zmod</code> instead?</p>",
        "id": 177704170,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1570620590
    },
    {
        "content": "<p>I agree that we need to be able to write nice <code>calc</code> style proofs working modulo some ideal/element.</p>",
        "id": 177704418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570620832
    },
    {
        "content": "<p>I remember that this was quite painful when I was writing Witt vectors.</p>",
        "id": 177704469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570620847
    },
    {
        "content": "<p>You need to remind Lean all the time that the quotient map is a ring hom. No content at all. Should be transparent.</p>",
        "id": 177704517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570620904
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≡</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"err\">%</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">to_rhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">add_comm</span><span class=\"o\">]},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_add</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">to_rhs</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_mul</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_iff_dvd</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_sub</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_pos</span> <span class=\"n\">dec_trivial</span> <span class=\"bp\">_</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 177705236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570621672
    },
    {
        "content": "<p>that basically follows your proof sketch</p>",
        "id": 177705288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570621705
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 177760538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570658961
    },
    {
        "content": "<p>A better proof of</p>\n<div class=\"codehilite\"><pre><span></span>example (a : ℕ) : ¬ (a &lt; a - 1) :=\nbegin\n  intro h₁,\n  have h₂ : a - 1 ≤ a, { erw nat.pred_le_iff, exact nat.le_succ _ },\n  exact lt_irrefl _ (lt_of_lt_of_le h₁ h₂),\nend\n</pre></div>\n\n\n<p>?</p>",
        "id": 178810025,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571788498
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_lt_of_ge</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 178810121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571788591
    },
    {
        "content": "<p>dang too slow<br>\n<code>example (a : ℕ) : ¬ (a &lt; a - 1) := not_lt_of_ge (nat.pred_le a)</code></p>",
        "id": 178810159,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571788668
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span>\n</pre></div>",
        "id": 178813448,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571792150
    },
    {
        "content": "<p>I tried this problem again, using <code>push_cast</code> from <a href=\"https://github.com/leanprover-community/mathlib/issues/1464\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1464\">#1464</a>, but still can't get there:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_cast</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"err\">%</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">one_mul</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Anyone see how to finish this, or have an alternative suggestion to approach this in <code>zmod</code> land?</p>",
        "id": 180307730,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1573297037
    },
    {
        "content": "<p>This stuff is still too awkward! :-)</p>",
        "id": 180307734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1573297044
    },
    {
        "content": "<p>This is hard in part because of the strange definition of <code>zmod</code></p>",
        "id": 180318876,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573315019
    },
    {
        "content": "<p>You probably will have to treat <code>n = 0</code> separately. Or just don't use <code>zmod</code></p>",
        "id": 180318966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573315111
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≡</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"err\">%</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">transitivity</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_iff_dvd</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">set</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 180319176,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573315419
    },
    {
        "content": "<p>Is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>readily available somewhere?</p>",
        "id": 197565672,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589467651
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">library</span><span class=\"bp\">/</span><span class=\"n\">init</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">nat</span><span class=\"bp\">/</span><span class=\"n\">lemmas</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">theorem</span> <span class=\"n\">add_mul_div_right</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 197566299,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589467937
    },
    {
        "content": "<p>or more relevantly <code>add_mul_div_left</code></p>",
        "id": 197566375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589467971
    },
    {
        "content": "<p>I'm disappointed my technique of grepping for <code>a / b +</code> didn't directly work</p>",
        "id": 197566446,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589468005
    },
    {
        "content": "<p>did <code>library_search</code> fail? if so, is it because of that hypothesis <code>z &gt; 0</code> instead of <code>0&lt; z</code>? The latter is what I'm told mathlib is supposed to prefer, so maybe we should fix this?</p>",
        "id": 197572617,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589470221
    },
    {
        "content": "<p><code>library_search</code> finds it when i just tried it.</p>\n<p>Also I think this lemma is in core lean, not mathlib btw.</p>",
        "id": 197573040,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589470438
    },
    {
        "content": "<p>The z&gt;0 thing should still be changed though</p>",
        "id": 197621758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589492345
    },
    {
        "content": "<p>More broadly, <a href=\"https://github.com/leanprover-community/lean/issues/200\">lean#200</a> is on fixing lint errors on the core library. We should probably hold off on tackling that in earnest until after <a href=\"https://github.com/leanprover-community/lean/issues/229\">lean#229</a> (Johan's big alegbra removal PR) is merged though.</p>",
        "id": 197622350,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589492693
    },
    {
        "content": "<p>I failed to find it using <code>library_search</code> just because I had <code>(a + b * c) /b</code>, rather than <code>(a + c * b)/b</code>. Clearly I should have tried that variation too.</p>",
        "id": 197639171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589506250
    },
    {
        "content": "<p><code>library_search</code> is aggressive enough about using <code>apply</code> that <code>0 &lt; z</code> and <code>z &gt; 0</code> is not an obstacle.</p>",
        "id": 197639185,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589506297
    },
    {
        "content": "<p>Both versions are in the library though.</p>",
        "id": 197639192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589506304
    },
    {
        "content": "<p>oh...</p>",
        "id": 197639197,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589506308
    },
    {
        "content": "<p>okay, I will look again.</p>",
        "id": 197639207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589506318
    },
    {
        "content": "<p>I just pasted the wrong one first</p>",
        "id": 197639301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589506419
    }
]