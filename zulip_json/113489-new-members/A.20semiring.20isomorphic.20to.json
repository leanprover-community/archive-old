[
    {
        "content": "<p>Dear All,</p>\n<p>in the code below, I define the subsemiring of non-negative elements of an <code>ordered_semiring</code>.  After that, I would like to prove that, if I apply this construction starting from ℤ, I obtain ℕ.  I know that in Type theory, this will not really be an equality, but I would like to be able to convert from one to the other easily.  What can I do?</p>\n<p>Also, any suggestions/improvements on the given definition are more than welcome!</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.subsemiring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--  The subtype of non-negative elements of `R`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pR</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">zero_le_one</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">mul_nonneg</span> <span class=\"n\">x0</span> <span class=\"n\">y0</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl.le</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">add_nonneg</span> <span class=\"n\">x0</span> <span class=\"n\">y0</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- feel free to change this statement to something else that will still</span>\n<span class=\"c1\">-- assert that `pR ℤ` *is* ℕ!</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pR_Z_eq_N</span> <span class=\"o\">:</span> <span class=\"n\">pR</span> <span class=\"n\">ℤ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 228567332,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614766708
    },
    {
        "content": "<p>I think that, in addition to <code>pR</code> you also want a predicate <code>is_nonneg_subsemiring N Z</code>.</p>",
        "id": 228568400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614766851
    },
    {
        "content": "<p>You should then:</p>\n<p>1) Show that <code>pR</code> satisfies this predicate<br>\n2) Show that <code>nat</code> and <code>int</code> satisfy this predicate (and eg <code>nnreal</code> and <code>real</code>)<br>\n3) Use that predicate whenever you develop API in this setting.</p>",
        "id": 228568492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614766902
    },
    {
        "content": "<p>In applications, you should then be able to freely switch between <code>pR</code> or <code>nat</code>, etc</p>",
        "id": 228568587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614766929
    },
    {
        "content": "<p>Ok, thanks Johan!  I will process this and report with more questions!</p>",
        "id": 228568616,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614766950
    },
    {
        "content": "<p>The predicate should probably assume that <code>Z</code> is an <code>N</code>-algebra, and then just require that the image of <code>N</code> is positive, <code>algebra_map</code> is injective, and for every positive element, there exists a preimage.</p>",
        "id": 228568720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614767000
    },
    {
        "content": "<p>The predicate <code>is_nonneg_subsemiring</code> is a predicate on subsemirings of a general ordered_semiring, right?  And it simply checks that all the elements are non-negative, I imagine</p>",
        "id": 228568735,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614767012
    },
    {
        "content": "<p>No, not on subsemirings, because then <code>nat</code> will not be an example.</p>",
        "id": 228568763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614767033
    },
    {
        "content": "<p>ah, I see, subsemirings up to injections!</p>",
        "id": 228568865,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614767061
    },
    {
        "content": "<p>It should be a predicate on two types, <code>[semiring N] [ordered_semiring Z] [algebra N Z]</code></p>",
        "id": 228568875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614767066
    },
    {
        "content": "<p>I get it now and it already addresses some of the issues that I was experiencing in my naïve approach!</p>",
        "id": 228568955,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614767106
    },
    {
        "content": "<p>Don't you want the stronger statement <code>pR ℤ ≃+* ℕ</code>?</p>",
        "id": 228569162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614767180
    },
    {
        "content": "<p>Eric, yes, definitely!  I thought that the iso symbol meant what I can see now that your symbol means!</p>",
        "id": 228569243,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614767220
    },
    {
        "content": "<p>You might of course also want <code>pR ℤ ≃o ℕ</code>, once the order PR stuff we worked on gets merged</p>",
        "id": 228569290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614767247
    },
    {
        "content": "<p>Unfortunately there's no <code>≃o+*</code> I don't think</p>",
        "id": 228569299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614767259
    },
    {
        "content": "<p>Properties of bundled homs don't compose well</p>",
        "id": 228569304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614767265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> this is a consequence of what I sketched, right?</p>",
        "id": 228569319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614767272
    },
    {
        "content": "<p>Yes, I definitely want all these things, but I am hoping that with the setup that Johan suggested, they will fall through.</p>\n<p>Also, Eric, the PR that is causing you so much pain was my attempt at a start of this project...</p>",
        "id": 228569469,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614767349
    },
    {
        "content": "<p>At this point I think everything is resolved, and I just need to wait for the build queue to clear</p>",
        "id": 228569612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614767420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, probably yeah</p>",
        "id": 228569630,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614767430
    },
    {
        "content": "<p>You may be interested in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonneg_ring\">docs#nonneg_ring</a>, although I think that's not quite what you're asking for</p>",
        "id": 228569667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614767461
    },
    {
        "content": "<p>Eric, thank you so much for your help with the earlier, shattered, PR!</p>",
        "id": 228569676,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614767465
    },
    {
        "content": "<p>Johan, is there any reason for wanting <code>N</code> to be <em>all</em> non-negative elements?  Would it not be enough to ask that all the elements of <code>N</code> map to non-negative ones?</p>\n<p>Will I get in trouble down the road if I allow subrings of non-negative elements that are not all of the non-negative elements?</p>",
        "id": 228570246,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614767709
    },
    {
        "content": "<p>I don't know...</p>",
        "id": 228570548,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614767872
    },
    {
        "content": "<p>Both concepts might be useful</p>",
        "id": 228570574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614767882
    },
    {
        "content": "<p>I will try!</p>",
        "id": 228570703,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614767928
    },
    {
        "content": "<p>For toric your version might be good enough <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span></p>",
        "id": 228570763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614767956
    },
    {
        "content": "<p>And then <code>nat -&gt; real</code> might be another interesting example</p>",
        "id": 228570814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614767981
    },
    {
        "content": "<p>Exactly, this is what I wanted.  Also <code>nat -&gt; rat</code></p>",
        "id": 228570932,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614768022
    },
    {
        "content": "<p>I am going to try this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_nonneg_subsemiring</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">N</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">N</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">algebra_map</span> <span class=\"n\">N</span> <span class=\"n\">Z</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 228571194,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614768158
    }
]