[
    {
        "content": "<p>Hello,</p>\n<p>I am currently learning Lean, after practicing a bit of Coq in the past. For this, I alternate between following tutorials and trying to transpose some code of mine from Coq (mostly related to programming language semantics) to get a feel of the differences.</p>\n<p>I am struggling to understand an issue with dependent pattern matching in Lean3. I tried to minimize the example by removing as much as I could from the original code, and I get the following, which of course makes little sense in itself but exhibits my issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extend</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">grow</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">truncate</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">grow</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">thing.nil</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get the error <em>dependent pattern matching result is not a constructor application</em> but I don't get why, because everything in the definition of <code>truncate</code> has an expected type that starts with a constructor. I tried to use <code>set_option trace.eqn_compiler.elim_match true</code> as the message suggests but it doesn't help me understand. If I translate this into Coq, it works fine, so my guess is that this is not a deep theoretical issue but rather has something to do with the form of my definition.</p>\n<p>Further exploration shows that:</p>\n<ul>\n<li>if I replace <code>some (thing.nil _)</code> with <code>some _</code>, then it works fine</li>\n<li>if I remove the first case of <code>extend</code> so that no matching is needed there, then it works fine too</li>\n<li>I can also define the function in tactic mode with <code>cases</code> and <code>exact</code>, or with calls to <code>cases_on</code> with explicit motives</li>\n</ul>\n<p>So what would be the proper way to proceed? Maybe I need to add some type annotations somewhere?</p>",
        "id": 280172790,
        "sender_full_name": "Emmanuel Beffara",
        "timestamp": 1650959569
    },
    {
        "content": "<p>I tested it out in Lean 4, and it works fine there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[matchPattern]</span>\n<span class=\"kd\">def</span> <span class=\"n\">thing.nil'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">thing.nil</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extend</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">grow</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">truncate</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">grow</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">thing.nil'</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>(I just needed to define a synonym for the constructor since for some reason <code>α</code> is now forced to be implicit. Not sure if that's intended.)</p>",
        "id": 280231765,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650989035
    },
    {
        "content": "<p>Ok, good to know. I still fail to see how I should do this properly in Lean 3, though.</p>\n<p>As for the choice of versions, at first I thought that learning directly with Lean 4 would be natural, since it does appear first in the documentation page and it already works, but most existing libraries and learning material is for Lean 3 and mathlib 4 is still experimental, so Lean 4 does not seem ready for development of stable things.</p>",
        "id": 280366258,
        "sender_full_name": "Emmanuel Beffara",
        "timestamp": 1651073331
    },
    {
        "content": "<p>Sorry, I forgot to mention that I only tested it in Lean 4 to see whether it's something might expect to work or not. It would be nice to see why it's not working in Lean 3.</p>",
        "id": 280367733,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651073983
    },
    {
        "content": "<p>It seems that in Lean 3 a workaround is to use the <code>cases</code> tactic, which isn't the best, but at least it points to this being possible.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extend</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">grow</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">truncate</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">grow</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- create a local variable `x` that is equal to `grow n t` via `h`</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">option.none</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">none</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">option.some</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> h : grow n t = some (thing.nil (extend n α)) -/</span>\n    <span class=\"n\">exact</span> <span class=\"n\">none</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280368471,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651074289
    },
    {
        "content": "<p>It seems that <code>extend</code> is somehow causing the \"dependent pattern matching result is not a constructor application\" error. If you comment out the <code>0</code> case for it, then the error goes away.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">extend</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"c1\">--| 0 α := α</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 280368745,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651074411
    },
    {
        "content": "<p>Or if you change <code>n</code> to <code>n+1</code> in <code>truncate</code> the error goes away.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">truncate</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">grow</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">thing.nil</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280368828,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651074462
    },
    {
        "content": "<p>This makes me think that it's trying to see what <code>extend n α</code> is definitionally equal to -- both of these modifications are things that let it reduce <code>extend</code>.</p>",
        "id": 280368973,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651074520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484119\">@Emmanuel Beffara</span> Oh, maybe it has something to do with exhaustiveness checking and your use of <code>_</code> as a catch-all pattern. All you need to do is use <code>none</code> instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">truncate</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">grow</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">thing.nil</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280369284,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651074663
    },
    {
        "content": "<p>Interesting ! Thanks for the last solution. So maybe it has to do with the shape of the code produced by the equation compiler.</p>\n<p>This trick does solve the issue in my original code, although I have to manually split the catch-all <code>_</code> into enough sub-cases so that all cases are explicitly disjoint, which makes 5 cases because the pattern and the types are more complicated. not completely satisfying, but it does the job…</p>",
        "id": 280372137,
        "sender_full_name": "Emmanuel Beffara",
        "timestamp": 1651075748
    }
]