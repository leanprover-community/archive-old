[
    {
        "content": "<p>Hi, essentially, I have a goal of the form </p>\n<p>{to_a := a_2} + {to_a := a_1} + {to_a := a_0} = {to_a := a_2} + ({to_a := a_1} + {to_a := a_0}).</p>\n<p>These are destructed structures (you can use induction or cases to get something similar) that extend \"a\" and have no arguments.</p>\n<p>I can prove <br>\na_2 + a_1 + a_0 = a_2 + (a_1 + a_0). What is the simplest way to change the goal and get rid of the bracket/structure cruft? Or, can I go from a_2 + a_1 + a_0 = a_2 + (a_1 + a_0) to the goal? I've tried using various tactics, split, constructor, injection seems to do the opposite of what I need.  I am guessing there is a simple way to do this but for the life of me can't find the right tactic.</p>\n<p>Thank you for your help!</p>",
        "id": 232480151,
        "sender_full_name": "Andrew Elsey",
        "timestamp": 1617131278
    },
    {
        "content": "<p>When you defined your structure, add an <code>[ext]</code> attribute above it. That will autogenerate an extensionality lemma, which you can use via the <code>ext</code> tactic</p>",
        "id": 232480797,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617131504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplify.20Structure.20With.20One.20Argument.20In.20Tactic/near/232480797\">said</a>:</p>\n<blockquote>\n<p>When you defined your structure, add an <code>[ext]</code> attribute above it. That will autogenerate an extensionality lemma, which you can use via the <code>ext</code> tactic</p>\n</blockquote>\n<p>Thank you. Sorry, I should have mentioned, I do have that actually, however,  I get this goal when I use ext : </p>\n<p>(a + b + c).to_a.to_prod.fst = (a + (b + c)).to_a.to_prod.fst</p>\n<p>which I can technically prove, but I have a proof of \"a_2 + a_1 + a_0 = a_2 + (a_1 + a_0)\" which I was specifically hoping to use. Is that a bad way to go about things or is there some way I can still remove the structure junk without ext?</p>",
        "id": 232482143,
        "sender_full_name": "Andrew Elsey",
        "timestamp": 1617132025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301362\">Andrew Elsey</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplify.20Structure.20With.20One.20Argument.20In.20Tactic/near/232482143\">said</a>:</p>\n<blockquote>\n<p>(a + b + c).to_a.to_prod.fst = (a + (b + c)).to_a.to_prod.fst</p>\n</blockquote>\n<p>If you have a proof of a + b + c = a + (b + c), then you could rewrite using that proof as a premise.</p>\n<p>Or is the issue about the difference between a_0 etc. and a etc.?</p>",
        "id": 232482709,
        "sender_full_name": "Greg Price",
        "timestamp": 1617132245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"397997\">Greg Price</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplify.20Structure.20With.20One.20Argument.20In.20Tactic/near/232482709\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"301362\">Andrew Elsey</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplify.20Structure.20With.20One.20Argument.20In.20Tactic/near/232482143\">said</a>:</p>\n<blockquote>\n<p>(a + b + c).to_a.to_prod.fst = (a + (b + c)).to_a.to_prod.fst</p>\n</blockquote>\n<p>If you have a proof of a + b + c = a + (b + c), then you could rewrite using that proof as a premise.</p>\n<p>Or is the issue about the difference between a_0 etc. and a etc.?</p>\n</blockquote>\n<p>Don't think I can. To clarify, I have a proof of a.to_a + b.to_a + c.to_a = a.to_a + (b.to_a + c.to_a) but not a + b + c = a + (b + c), which is the ultimate goal. The \"_0, _1, _2\" stuff is just caused by destructing a, b, c</p>",
        "id": 232484916,
        "sender_full_name": "Andrew Elsey",
        "timestamp": 1617133131
    },
    {
        "content": "<p>It may be helpful to post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. Then people can try out tweaks to your code and see exactly what's happening.</p>",
        "id": 232485432,
        "sender_full_name": "Greg Price",
        "timestamp": 1617133367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"397997\">Greg Price</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplify.20Structure.20With.20One.20Argument.20In.20Tactic/near/232485432\">said</a>:</p>\n<blockquote>\n<p>It may be helpful to post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. Then people can try out tweaks to your code and see exactly what's happening.</p>\n</blockquote>\n<p>I will do that in a bit. Thank you for the suggestion.</p>",
        "id": 232485541,
        "sender_full_name": "Andrew Elsey",
        "timestamp": 1617133434
    },
    {
        "content": "<p>You need lemmas saying <code>(a + b).to_a = a.to_a + b.to_a</code> and so on; these are probably true by <code>rfl</code> and <code>@[simps]</code> will automatically generate them</p>",
        "id": 232494374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617136829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplify.20Structure.20With.20One.20Argument.20In.20Tactic/near/232494374\">said</a>:</p>\n<blockquote>\n<p>You need lemmas saying <code>(a + b).to_a = a.to_a + b.to_a</code> and so on; these are probably true by <code>rfl</code> and <code>@[simps]</code> will automatically generate them</p>\n</blockquote>\n<p>I gave that a quick try and that actually worked really cleanly. After those lemmas all I needed to was cc. Thank you very much (and Greg and Yakov)!</p>",
        "id": 232512610,
        "sender_full_name": "Andrew Elsey",
        "timestamp": 1617146302
    }
]