[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Can't.20display.20a.20number.20whose.20type.20is.20wrapped.20in.20a.20structure/near/310650069\">said</a>:</p>\n<blockquote>\n<p>This feels like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem</p>\n</blockquote>\n<p>What do you think my X is?</p>",
        "id": 310860855,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668789093
    },
    {
        "content": "<p>Or maybe I should say, what makes you think what I'm asking about isn't my X?  Isn't it reasonable to want to display things?</p>",
        "id": 310860943,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668789117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Can't.20display.20a.20number.20whose.20type.20is.20wrapped.20in.20a.20structure/near/310650163\">said</a>:</p>\n<blockquote>\n<p>What do you mean by instance of wrap (instance is a keyword) are you varying wrapN or the class?</p>\n</blockquote>\n<p>I mean different elements of <code>wrap</code> in which <code>t</code> is different.</p>",
        "id": 310861156,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668789164
    },
    {
        "content": "<p>I have no idea what your X is, but I'm very skeptical that <code>structure wrap := (t : Type)</code> is something you want to go anywhere near</p>",
        "id": 310862913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668789655
    },
    {
        "content": "<p>Well, we have newtypes like that in mathlib in several places.</p>",
        "id": 310862979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668789682
    },
    {
        "content": "<p>Do we? Can you give an example?</p>",
        "id": 310863000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668789691
    },
    {
        "content": "<p>Category theory is maybe the only place I can think of</p>",
        "id": 310863031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668789703
    },
    {
        "content": "<p>But usually they are very much on a one-off basis, and so reimplementing a couple of typeclasses is not a problem.</p>",
        "id": 310863044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668789709
    },
    {
        "content": "<p>For example, we have something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">real</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cauchy</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">cau_seq.completion.Cauchy</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">abs</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 310863477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668789834
    },
    {
        "content": "<p>Which is a similar pattern.</p>",
        "id": 310863583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668789853
    },
    {
        "content": "<p>Johan, I think you're misreading <code>structure wrap := (t : Type)</code> for <code>structure wrap := (val : some_type)</code> where <code>some_type : Type</code></p>",
        "id": 310863660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668789874
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 310863848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668789947
    },
    {
        "content": "<p>Well, the actual example has more fields of course:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">group</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- etc.</span>\n</code></pre></div>",
        "id": 310900399,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668797931
    },
    {
        "content": "<p>You could probably <code>@[derive has_repr]</code>    and save a few characters</p>",
        "id": 310900943,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668798083
    },
    {
        "content": "<p>(In the Nat case, that is)</p>",
        "id": 310901007,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668798102
    },
    {
        "content": "<p>What behaviour do you expect from eval in the group case?</p>",
        "id": 310901305,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668798188
    },
    {
        "content": "<p><code>group</code> is the analogue of the general <code>wrap</code>.  I would only want to display elements of particular groups, like a <code>groupN</code>.</p>",
        "id": 310901818,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668798357
    },
    {
        "content": "<p>Where do I put <code>@[derive has_repr]</code>?</p>",
        "id": 310902374,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668798573
    },
    {
        "content": "<p>hmmm <code>derive</code> doesn't quite work. sorry!</p>",
        "id": 310903650,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668799056
    },
    {
        "content": "<p>wasn't the solution already shown?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">wrapN.t</span> <span class=\"o\">:=</span> <span class=\"n\">nat.has_repr</span>\n</code></pre></div>",
        "id": 310903768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668799088
    },
    {
        "content": "<p>yeah that works</p>",
        "id": 310903811,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668799103
    },
    {
        "content": "<p>you can also do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">wrapN.t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dunfold</span> <span class=\"n\">wrapN</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>if you don't know the instance name</p>",
        "id": 310904912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668799492
    },
    {
        "content": "<p>Okay, this works for ℕ, but not for ℝ.  When I try it with ℝ I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">kernel</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">type</span> <span class=\"n\">check</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">t.has_repr'</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"n\">usually</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">buggy</span> <span class=\"n\">tactic</span> <span class=\"n\">or</span> <span class=\"n\">a</span> <span class=\"n\">bug</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">builtin</span> <span class=\"n\">elaborator</span>\n<span class=\"n\">elaborated</span> <span class=\"n\">type</span><span class=\"o\">:</span>\n  <span class=\"n\">has_repr</span> <span class=\"n\">Rvsp.t</span>\n<span class=\"n\">elaborated</span> <span class=\"n\">value</span><span class=\"o\">:</span>\n  <span class=\"n\">id</span> <span class=\"n\">real.has_repr</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"kd\">definition</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">uses</span> <span class=\"n\">untrusted</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">real.has_repr'</span>\n</code></pre></div>",
        "id": 310936978,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668812030
    },
    {
        "content": "<p>You need the word <code>meta</code> for <code>real</code></p>",
        "id": 310937055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668812050
    },
    {
        "content": "<p>Note that if you use my <code>@[reducible]</code> suggestion I made in the third post you don't have to deal with any of this</p>",
        "id": 310937135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668812083
    },
    {
        "content": "<p>Where does the word <code>meta</code> go?</p>",
        "id": 310954726,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668823119
    },
    {
        "content": "<p>In the form <code>meta instance ...</code> should work</p>",
        "id": 310954992,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668823332
    },
    {
        "content": "<p>Thanks.  What does <code>meta</code> mean?</p>",
        "id": 310955886,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668824246
    },
    {
        "content": "<p>It's a tag that's used for defs at the metaprogramming level</p>",
        "id": 310955958,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668824307
    },
    {
        "content": "<p>(In Lean3. Lean4 doesn't have <code>meta</code>.)</p>",
        "id": 310955981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668824341
    },
    {
        "content": "<p>And why does the instance for <code>real</code> need to be at the metaprogramming level, but not the one for <code>nat</code>?</p>",
        "id": 310956132,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668824439
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.has_repr/src\">src#real.has_repr</a> (just so I can take a look ;))</p>",
        "id": 310956164,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668824473
    },
    {
        "content": "<p>I was wondering if you were going to ask that... :) It's the same issue I <a href=\"#narrow/stream/113489-new-members/topic/Error.3A.20missing.20'noncomputable'.20modifier/near/310908013\">highlighted before</a>: the implementation has to cheat using unsafe code to get at the representation behind the quotient</p>",
        "id": 310956260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668824586
    },
    {
        "content": "<p>The ultimate source of this unsafe hackery is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.unquot/src\">src#quot.unquot</a></p>",
        "id": 310956279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668824628
    },
    {
        "content": "<p>As you yourself said <span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> there are no computable functions definable in the logic which can distinguish real numbers by a continuity argument, but clearly a function that turns a <code>real</code> into a <code>string</code> would have to do just that</p>",
        "id": 310956454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668824819
    },
    {
        "content": "<p><code>meta</code> means \"I don't care if this introduces type unsafety or unsoundness\" and enables access to stuff like unchecked type casting, unguarded recursion and C++ FFI. The lean 4 equivalent is <code>unsafe</code> and luckily it is much less necessary than it was in lean 3. <code>meta</code> declarations don't exist as far as the kernel is concerned, they are only for the VM/compiler.</p>",
        "id": 310956693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668825022
    },
    {
        "content": "<p>Thanks.  I think the error message could have been more helpful in indicating that this was the problem...</p>",
        "id": 310956818,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668825195
    },
    {
        "content": "<p>do you have a mwe?</p>",
        "id": 310956881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668825244
    },
    {
        "content": "<p>it is true that the error message is pretty bad, it looks like something made it past the first line of defense and you are getting the backup error message</p>",
        "id": 310956892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668825282
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">structure</span> <span class=\"n\">wrap</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">wrapR</span> <span class=\"o\">:</span> <span class=\"n\">wrap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">wrapR.t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dunfold</span> <span class=\"n\">wrapR</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 310956911,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668825311
    },
    {
        "content": "<p>Huh, I guess that's always what you get when you use a meta declaration in a non-meta one. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n<span class=\"c1\">-- kernel failed to type check declaration 'foo' this is usually due to a buggy tactic or a bug in the builtin elaborator</span>\n<span class=\"c1\">-- elaborated type:</span>\n<span class=\"c1\">--   ℕ</span>\n<span class=\"c1\">-- elaborated value:</span>\n<span class=\"c1\">--   bar</span>\n<span class=\"c1\">-- nested exception message:</span>\n<span class=\"c1\">-- invalid definition, it uses untrusted declaration 'bar'</span>\n</code></pre></div>\n<p>The error for missing <code>noncomputable</code> is much better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span><span class=\"bp\">!</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n<span class=\"c1\">-- missing 'noncomputable' modifier, definition 'foo' depends on 'bar'</span>\n</code></pre></div>",
        "id": 310957133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668825590
    },
    {
        "content": "<p>The last line \"invalid definition, it uses untrusted declaration 'bar'\" would be fairly informative if it were on its own.</p>",
        "id": 310961254,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668830397
    },
    {
        "content": "<p>Is this related to <code>bundled</code>?</p>",
        "id": 310972369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668842017
    }
]