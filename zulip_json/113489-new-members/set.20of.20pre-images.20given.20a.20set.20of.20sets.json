[
    {
        "content": "<p>Having some difficulty formalizing what should be a simple mathematical intuition. Suppose I have a structure which organizes<br>\n1) a set X of type α<br>\n2) a set D of type β <br>\n3) a function f : α → β<br>\n4) a finite set of sets {D₁, D₂... Dₙ} such that each Dᵢ ⊆ D </p>\n<p>and I want to create a set of pre-images of f, a set of sets {X₁, X₂... Xₙ}  where Xᵢ = {x ∈ X | f(x) ∈ Dᵢ}</p>\n<p>The structure for points 1-4 I've defined as </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Ds</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">subs_D</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">Ds</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>But I have been struggling to come up with a way to write something like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">pre_images</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I haven't been able to work out how set.preimage should fit in to this picture. I'm also wondering if it would be better to use a (finite?) indexed set instead of finset for this purpose. Any suggestions would be appreciated!</p>",
        "id": 204120387,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594922717
    },
    {
        "content": "<p>This might be it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">pre_images</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">Ds</span>\n</code></pre></div>\n\n\n<p>The <code>decidable_eq</code> instance refers to how you need to be able to tell whether two given sets are equal to be able to do deduplication.  If you already are in the classical locale, then I don't think you need this.</p>",
        "id": 204121670,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594923284
    },
    {
        "content": "<p>cool, I will try it out. Thank you very much!</p>",
        "id": 204121781,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594923361
    },
    {
        "content": "<p>Trying out a small example without using finset just to observe the behaviour, I'm not sure how to parse the type error I've gotten.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span>  <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">variables</span> <span class=\"n\">α</span>  <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Ds</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pre_images</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">preimage</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">Ds</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fun1</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"mi\">5</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">struct</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">bool</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"n\">fun1</span> <span class=\"o\">{{</span><span class=\"mi\">5</span><span class=\"o\">},{</span><span class=\"mi\">7</span><span class=\"o\">}}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pre_images</span>  <span class=\"n\">struct</span> <span class=\"c1\">-- error here</span>\n</code></pre></div>\n\n\n<p>Err : </p>\n<p>type mismatch, term<br>\n    pre_images ?m_1<br>\n  has type<br>\n    Π (β : Type), foo ?m_1 β → Π [_inst_1 : decidable_eq (set ?m_1)], set (set ?m_1) : Type 1<br>\n  but is expected to have type<br>\n    set (set ℕ) : Type</p>",
        "id": 204137378,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594930756
    },
    {
        "content": "<p>I expanded the <code>pre_images</code> defn:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">struct</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"n\">fun1</span> <span class=\"o\">{{</span><span class=\"mi\">5</span><span class=\"o\">},{</span><span class=\"mi\">7</span><span class=\"o\">}})</span> <span class=\"k\">in</span>\n  <span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">preimage</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">struct</span><span class=\"bp\">.</span><span class=\"n\">Ds</span> <span class=\"c1\">-- you need an ℕ → ℕ</span>\n</code></pre></div>",
        "id": 204138520,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594931375
    },
    {
        "content": "<p>The <code>α β : Type</code> variables were being explicit. Now, with this syntax, you just need to know that your test was typed wrong initially. This works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span>  <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Ds</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pre_images</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">preimage</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">Ds</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fun1</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"mi\">5</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">struct</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"n\">fun1</span> <span class=\"o\">{{</span><span class=\"mi\">5</span><span class=\"o\">},{</span><span class=\"mi\">7</span><span class=\"o\">}})</span> <span class=\"k\">in</span>\n  <span class=\"n\">pre_images</span> <span class=\"n\">struct</span>\n</code></pre></div>",
        "id": 204139253,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594931715
    },
    {
        "content": "<p>For one, you should  see what <code>#check pre_images</code> is.  Because your <code>variables</code> declaration involves non-implicit arguments, the first two arguments to <code>pre_images</code> are <code>α</code> and <code>β</code>.  For another, you might have meant <code>test : set (set bool)</code>.</p>\n<p>Since you won't have a <code>decidable_eq</code> instance most of the time, you may as well do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span>  <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Ds</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pre_images</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">preimage</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">Ds</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fun1</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"mi\">5</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">struct</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">bool</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"n\">fun1</span> <span class=\"o\">{{</span><span class=\"mi\">5</span><span class=\"o\">},{</span><span class=\"mi\">7</span><span class=\"o\">}}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pre_images</span> <span class=\"n\">struct</span>\n</code></pre></div>",
        "id": 204139299,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594931731
    },
    {
        "content": "<p>Oh right, these are <code>set</code> and not <code>finset</code>, so no need for the <code>noncomputable theory</code> and <code>open_locale classical</code> here.</p>",
        "id": 204139433,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594931798
    },
    {
        "content": "<p>You can also do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fun1</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"mi\">5</span> <span class=\"mi\">7</span>\n</code></pre></div>",
        "id": 204139450,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594931814
    },
    {
        "content": "<p>As it is right now, nothing required any <code>decidable_eq</code></p>",
        "id": 204139514,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594931860
    },
    {
        "content": "<p>Thanks to you both!</p>",
        "id": 204139611,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594931917
    }
]