[
    {
        "content": "<p>I want to DLLize Lean so that I can drive it from a Python app.  What are your thoughts on this.  Will this already be a feature through some API in version 4?  In other words, should I wait?  Or will this DLLization be valuable to people?</p>",
        "id": 174026915,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566629349
    },
    {
        "content": "<p>Out of curiosity, what are the things you need that you can't get by writing Python code to communicate with Lean's server mode?</p>\n<p>It may be some time before Lean 4 is ready for use by anyone outside the core developers. A community fork of Lean 3 is being developed <a href=\"https://github.com/leanprover-community/lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean\">in this repo</a>.</p>",
        "id": 174027329,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1566630204
    },
    {
        "content": "<p>I didn't know there <em>was</em> server mode!  Any reference for that in the docs?<br>\nI also see that Lean is (at least Lean4 that I know of) is written in Python, so rethinking this, I just should modify the python code which is already communicating with Lean's C++ code.</p>",
        "id": 174027428,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566630407
    },
    {
        "content": "<p>the server mode is what is used by editor interfaces like emacs and vscode</p>",
        "id": 174027435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566630429
    },
    {
        "content": "<p>lean is definitely not written in python...?</p>",
        "id": 174027437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566630451
    },
    {
        "content": "<p>So you have full access to Lean I guess?</p>",
        "id": 174027438,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566630458
    },
    {
        "content": "<p>What are all those .py files doing in the repo?</p>",
        "id": 174027442,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566630475
    },
    {
        "content": "<p>are you talking about lean 4?</p>",
        "id": 174027484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566630497
    },
    {
        "content": "<p>*I mean you have full access through server mode ?</p>",
        "id": 174027485,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566630507
    },
    {
        "content": "<p>Yep, Lean 4, I cloned it and viewed some of the directories.</p>",
        "id": 174027487,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566630526
    },
    {
        "content": "<p>No, certainly not full access</p>",
        "id": 174027496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566630567
    },
    {
        "content": "<p>Through server mode you can basically shove lean text around. Even lean code doesn't have full access</p>",
        "id": 174027542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566630609
    },
    {
        "content": "<p>What I mean is, you can type in commands on the front end (my python app), and they'll go into Lean's main input, and you can get the reply from Lean sent back to the frontend.</p>",
        "id": 174027555,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566630693
    },
    {
        "content": "<p>you can do that with server mode</p>",
        "id": 174027560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566630718
    },
    {
        "content": "<p>Is there an article on how to use server mode?</p>",
        "id": 174027600,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566630737
    },
    {
        "content": "<p>it's not very well documented</p>",
        "id": 174027604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566630747
    },
    {
        "content": "<p>I would consult the vscode-lean extension</p>",
        "id": 174027613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566630772
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 174027615,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566630780
    },
    {
        "content": "<p>:)</p>",
        "id": 174027621,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566630786
    },
    {
        "content": "<p>You might also ask <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> , whose work on observable notebooks seems similar. (Are those python based?)</p>",
        "id": 174027674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566630859
    },
    {
        "content": "<p>Another place to look for really simple server use is the <code>tests/interactive/</code> collection. I think there is a bash script in there that composes a really basic query for the server and checks the result</p>",
        "id": 174027729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566630970
    },
    {
        "content": "<p>I see, in <a href=\"http://test_single.sh\" target=\"_blank\" title=\"http://test_single.sh\">test_single.sh</a> they're using Lean's command line interface</p>",
        "id": 174027801,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566631179
    },
    {
        "content": "<p><a href=\"https://github.com/enjoysmath/lean/blob/master/tests/lean/interactive/test_single.sh\" target=\"_blank\" title=\"https://github.com/enjoysmath/lean/blob/master/tests/lean/interactive/test_single.sh\">https://github.com/enjoysmath/lean/blob/master/tests/lean/interactive/test_single.sh</a></p>",
        "id": 174027804,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566631198
    },
    {
        "content": "<p>As Mario said there isn't really any written documentation for the server mode. But basically if you start lean from the command line with <code>lean --server</code> you can pass it messages in JSON format via stdin and recieve JSON responses via stdout. The format for these JSON objects is kind of documented in the <a href=\"https://github.com/leanprover/lean-client-js/blob/master/lean-client-js-core/src/commands.ts\" target=\"_blank\" title=\"https://github.com/leanprover/lean-client-js/blob/master/lean-client-js-core/src/commands.ts\">lean-client-js repo</a>.</p>\n<p>The Observable notebooks are written in Javascript but they also utilize the Lean server interface (for the webassembly build of Lean). If you're comfortable reading JS, you might find this informative: <a href=\"https://observablehq.com/@bryangingechen/hello-lean-prover\" target=\"_blank\" title=\"https://observablehq.com/@bryangingechen/hello-lean-prover\">https://observablehq.com/@bryangingechen/hello-lean-prover</a></p>",
        "id": 174027850,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1566631207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> thank you!  That is very helpful</p>",
        "id": 174027859,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566631268
    },
    {
        "content": "<p>No problem, feel free to ask if you have more questions!</p>",
        "id": 174027918,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1566631385
    },
    {
        "content": "<p>What's the difference between regular Lean and Lean Community Edition?</p>",
        "id": 174027920,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566631395
    },
    {
        "content": "<p>Lean 3 is frozen until lean 4 comes out</p>",
        "id": 174027929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566631430
    },
    {
        "content": "<p>Oh, so community gets updated, I see.</p>",
        "id": 174027982,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566631455
    },
    {
        "content": "<p>the community fork is maintained by the folks on this chat</p>",
        "id": 174027984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566631460
    },
    {
        "content": "<p>Not sure which one I should use...</p>",
        "id": 174027991,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566631481
    },
    {
        "content": "<p>Lean3 vs Lean3 community</p>",
        "id": 174028000,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566631492
    },
    {
        "content": "<p>Right now, mathlib builds on both versions, but the hope is to migrate to the community version</p>",
        "id": 174028008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566631505
    },
    {
        "content": "<p>Cool, community version it is!</p>",
        "id": 174028017,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566631523
    },
    {
        "content": "<p>I'll use whichever one doesn't require me to build it first, lol.</p>",
        "id": 174028023,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566631561
    },
    {
        "content": "<p>There are builds for the community edition at <a href=\"https://github.com/leanprover-community/lean-nightly\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-nightly\">https://github.com/leanprover-community/lean-nightly</a></p>",
        "id": 174028068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566631589
    },
    {
        "content": "<p>Thank you, again!</p>",
        "id": 174028085,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566631637
    },
    {
        "content": "<p>lol, I just noticed that the readme for <a href=\"https://github.com/leanprover-community/lean-nightly\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-nightly\">https://github.com/leanprover-community/lean-nightly</a> has a link to the releases page for the official version, don't go there</p>",
        "id": 174028091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566631657
    },
    {
        "content": "<p>Oh, you know where the community release page is?</p>",
        "id": 174028143,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566631731
    },
    {
        "content": "<p>it's the \"releases\" button on that page (the github one)</p>",
        "id": 174028159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566631801
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-nightly/releases\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-nightly/releases\">https://github.com/leanprover-community/lean-nightly/releases</a></p>",
        "id": 174028201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566631806
    },
    {
        "content": "<p>Thx, downloaded.</p>",
        "id": 174028288,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566631971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236489\">@EnjoysMath</span>  It would probably help us helping you to learn more about what you actually want to do.</p>",
        "id": 174028937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566633315
    },
    {
        "content": "<p>You can also have a look at <a href=\"https://github.com/leanprover/lean/issues/1996\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1996\">this discussion</a></p>",
        "id": 174028988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566633364
    }
]