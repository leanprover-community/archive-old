[
    {
        "content": "<p>Is it considered bad form to use the equation compiler instead of explicit induction? I much, much prefer using the equation compiler like so; it lets me proceed without knowing which induction principle I will require. (Note that the definition of <code>subs_of_size</code> is, as far as I can tell, approximately idiomatic; my question is about the proof of <code>subs_of_size_upper_bound</code>.) I'm aware that my code is complete garbage, with terrible variable names and formatting; I'm only asking whether the overall structure, using the equation compiler to induct for me in a lemma, is considered acceptable for mathlib.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">subs_of_size</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">empty</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">empty</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">empty</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">from_lower</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">subs_of_size</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">from_upper</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subs_of_size</span> <span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n    <span class=\"n\">from_lower</span> <span class=\"err\">∪</span> <span class=\"n\">from_upper</span>\n\n<span class=\"n\">def</span> <span class=\"n\">subs_of_size_upper_bound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">subs_of_size</span> <span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">s_in</span> <span class=\"n\">x</span> <span class=\"n\">x_in</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">subs_of_size</span> <span class=\"n\">at</span> <span class=\"n\">s_in</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">s_in</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">s_in</span> <span class=\"n\">at</span> <span class=\"n\">x_in</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">x_in</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">s_in</span> <span class=\"n\">x</span> <span class=\"n\">x_in</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">subs_of_size</span> <span class=\"n\">at</span> <span class=\"n\">s_in</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">s_in</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">s_in</span> <span class=\"n\">x</span> <span class=\"n\">x_in</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">subs_of_size</span> <span class=\"n\">at</span> <span class=\"n\">s_in</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">s_in</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">s_in</span> <span class=\"n\">at</span> <span class=\"n\">x_in</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">x_in</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">subs_of_size</span> <span class=\"n\">at</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_succ_of_le</span> <span class=\"o\">(</span><span class=\"n\">subs_of_size_upper_bound</span> <span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">u</span><span class=\"o\">),</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span> <span class=\"n\">b</span> <span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">⟩</span> <span class=\"bp\">⟩</span> <span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">c</span> <span class=\"n\">at</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_eq</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_succ_of_le</span> <span class=\"o\">(</span><span class=\"n\">subs_of_size_upper_bound</span> <span class=\"n\">m</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 197519245,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589442037
    },
    {
        "content": "<p>No, it's fine. It's done a lot.</p>",
        "id": 197519416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589442155
    },
    {
        "content": "<p>I ask because I haven't seen any similarly-styled proofs in mathlib yet (which isn't to say that they don't exist)</p>",
        "id": 197519425,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589442163
    },
    {
        "content": "<p>Oh phew, thanks</p>",
        "id": 197519430,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589442166
    },
    {
        "content": "<p>But with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>you also don't need to know which induction principle you want</p>",
        "id": 197519458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589442193
    },
    {
        "content": "<p>I got myself into a horrible mess when I wrote the above proof in the <code>lemma blah (m i : nat) (s : finset nat)…</code> form, I just couldn't get the final recursive calls to chain together correctly - is it possible to use <code>induction</code> to match on two naturals simultaneously? The above proof really doesn't want to make two jumps to get from <code>f m.succ n.succ</code> to <code>f m n</code>, I found it very hard to go via <code>f m.succ n</code> or <code>f m n.succ</code></p>",
        "id": 197519744,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589442432
    },
    {
        "content": "<p>The equation compiler lets me do induction \"as God intended\", of just assuming that the result is true for any smaller collection of inputs, and I haven't found as intuitive a way of doing that with <code>induction</code></p>",
        "id": 197519927,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589442558
    },
    {
        "content": "<p>you do <code>induction m generalizing n; cases n</code></p>",
        "id": 197520043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589442643
    },
    {
        "content": "<p>Again, in Lean one would probably use a different strategy from the start, like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"n\">def</span> <span class=\"n\">subs_of_size</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">subs_of_size_upper_bound</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">subs_of_size</span> <span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">powerset</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_powerset</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">Ico</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197524221,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589445441
    }
]