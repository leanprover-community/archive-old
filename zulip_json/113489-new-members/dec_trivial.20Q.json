[
    {
        "content": "<p>I can not dec_trivial equalities and inequalities among rationals. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">good</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">lemma</span>  <span class=\"n\">bad</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- doesn't work</span>\n</code></pre></div>",
        "id": 272431210,
        "sender_full_name": "Cedric Holle",
        "timestamp": 1645205502
    },
    {
        "content": "<p>I guess, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> should know how <code>dec_trivial</code> works.</p>",
        "id": 272433229,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645206425
    },
    {
        "content": "<p>I think there's been two threads over the last month and a half that mention this. If I were to hazard a guess, it's that there's well-founded recursion in some of the definitions, which dec_trivial can't evaluate.</p>",
        "id": 272434036,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645206773
    },
    {
        "content": "<p>nat.div is via wf, iirc. Cedric, are you OK with using norm_num?</p>",
        "id": 272434300,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645206892
    },
    {
        "content": "<p>Why do we need division to compare two rational numbers?</p>",
        "id": 272434479,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645206970
    },
    {
        "content": "<p>Or we use it in <code>bit0</code>/<code>bit1</code> (I guess, yes)?</p>",
        "id": 272434503,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645206983
    },
    {
        "content": "<p>I see that the decidable eq is from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tactic.mk_dec_eq_instance</span>\n</code></pre></div>\n<p>A few months ago I had an instance created by that tactic where <code>dec_trivial</code> didn't work, and, after rewriting it manually, it did (or so I remember...)</p>",
        "id": 272434921,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645207167
    },
    {
        "content": "<p>I tried, it doesn't help.</p>",
        "id": 272435337,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645207320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/dec_trivial.20Q/near/272434300\">said</a>:</p>\n<blockquote>\n<p>nat.div is via wf, iirc. Cedric, are you OK with using norm_num?</p>\n</blockquote>\n<p>nat.div and nat.mod are both implemented using structural recursion now (as of a couple of months ago)</p>",
        "id": 272435367,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645207322
    },
    {
        "content": "<p>But nat.gcd isn't.</p>",
        "id": 272435428,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645207343
    },
    {
        "content": "<p>The decidable_eq instance uses <code>nat.coprime</code>, and this fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.coprime</span> <span class=\"mi\">5</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 272435545,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645207386
    },
    {
        "content": "<p>The actual issue <span class=\"user-mention\" data-user-id=\"452637\">@Cedric Holle</span> minimized to this question was about some 4x4 matrices. <span class=\"user-mention\" data-user-id=\"452637\">@Cedric Holle</span> , you should post an example of what you actually want to prove to a new topic.</p>",
        "id": 272438634,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645208814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"452637\">@Cedric Holle</span> why do you even want to use this primitive tactic when we have <code>norm_num</code> which was designed to solve goals of this form (and which would even prove that (-100000000000000000000 : Q) != -2000000000000000) when <code>dec_trivial</code> could well time out).</p>",
        "id": 272439792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645209337
    },
    {
        "content": "<p>I guess, I'm responsible for this attempt.</p>",
        "id": 272442896,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645210866
    }
]