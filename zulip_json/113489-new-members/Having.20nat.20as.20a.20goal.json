[
    {
        "content": "<p>I have :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq.trans</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Now the tactic state in the <code>apply eq.trans</code> line is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"mi\">3</span> <span class=\"n\">goals</span>\n  <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n\n  <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n  <span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n\n  <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>Why do we have as the third goal that we need to show that we have a term of type nat? And why does this goal get solved when using (the first) assumption automatically, even though it is never the active goal?</p>",
        "id": 258451505,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1634767381
    },
    {
        "content": "<p>When you apply <code>eq.trans</code>, it doesn't know what the middle value is supposed to be, so Lean leaves it as a metavariable (pretty printed as <code>?m_1</code>).  In tactics, every goal corresponds to some metavariable, and the type of which is shown in the last line.  The third goal corresponds to this metavariable.</p>\n<p>When you do <code>assumption</code>, Lean will try unifying the goal with each hypothesis.  The <code>a = b</code> hypothesis will succeed, and the metavariable will be set to <code>b</code>.  Lean notices that the third goal's metavariable has been set, and it's automatically removed.</p>",
        "id": 258454024,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634768638
    },
    {
        "content": "<p>Metavariables are \"holes\" in an expression, and Lean is very eager to fill them.</p>",
        "id": 258454139,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634768698
    },
    {
        "content": "<p>Here's an example for how you can tell Lean what the middle value's supposed to be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">eq.trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">,</span>  <span class=\"c1\">-- only two goals after this line</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258454256,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634768772
    },
    {
        "content": "<p>There's a tactic for (generalized) transitivity.  Rather than <code>apply eq.trans</code> you can do <code>transitivity b</code> or <code>transitivity</code>.  <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#transitivity\">tactic#transitivity</a></p>",
        "id": 258454374,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634768850
    },
    {
        "content": "<p>I didn't know about <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#assumption'\">tactic#assumption'</a>, which can replace <code>repeat {assumption}</code> here</p>",
        "id": 258455215,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634769318
    },
    {
        "content": "<p>This example might also be illuminating:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq.trans</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258455658,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634769562
    },
    {
        "content": "<p>So we have these meta-variables that are generated by the tactics, because they are actually not part of the actual type theory of LEAN, but are something additional that we use in the tactic mode, which allows us to create a sort of program that generates a proof term? And the idea is that this is more flexible, and allows inspection of state, I guess.</p>\n<p>But so you are saying, that the goal of <code>nat</code> is actually the goal to show that <code>?m_1</code> is of type <code>nat</code>? It just seems a bit strange to me, because there is no annotation that this is what it is about. It seems that I could switch (how do you do that I only know swap) to the 3rd goal and apply any of <code>a</code>,  <code>b</code> or <code>c</code>. And I guess based on what I use to close the goal, I would replace all <code>?m_1</code> with that.</p>\n<p>You can also have multiple goals of <code>nat</code> and then it is not clear what meta variable it refers to. (Although all of this is in practice probably never an issue possibly.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq.trans</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq.trans</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Gives you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">5</span> <span class=\"n\">goals</span>\n  <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n\n  <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n  <span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n\n  <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span>\n\n  <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n  <span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n\n  <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>But here I would guess that the first <code>nat</code> refers to <code>?m_2</code> as it does not appear after that the first <code>nat </code> goal.</p>",
        "id": 258456972,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1634770325
    },
    {
        "content": "<p>Yes, this is all correct. \"Under the hood\" there is no ambiguity, of course, although it is true that there could be nicer labelling of goals that appear as metavariables in other goals. Very often proofs will avoid ever having exposed metavariables like this: e.g. through use of <code>have</code> and <code>suffices</code> and other structured proof tactics.</p>",
        "id": 258459123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634771537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391104\">Johannes C. Mayer</span> <a href=\"#narrow/stream/113489-new-members/topic/Having.20nat.20as.20a.20goal/near/258456972\">said</a>:</p>\n<blockquote>\n<p>But so you are saying, that the goal of <code>nat</code> is actually the goal to show that <code>?m_1</code> is of type <code>nat</code>? </p>\n</blockquote>\n<p>To be a little more precise with the language here, the goal is <code>?m_1 : nat</code>, and you're trying to fill in the <code>?m_1</code>.  Lean already knows that <code>?m_1</code> has type <code>nat</code>.</p>\n<p>A bit more about the mechanics of it: when you do <code>apply eq.trans</code>, what Lean effectively does is <code>exact @eq.trans ?M1 ?M2 ?M3 ?M4 ?M5 ?M6</code> where <code>?M1</code> through <code>?M6</code> are metavariables.  It's immediately able to figure out that <code>?M1</code> is <code>nat</code>, <code>?M2</code> is <code>a</code>, and <code>?M4</code> is <code>c</code>.  The remaining metavariables become the three goals.</p>",
        "id": 258459648,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634771859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391104\">Johannes C. Mayer</span> <a href=\"#narrow/stream/113489-new-members/topic/Having.20nat.20as.20a.20goal/near/258456972\">said</a>:</p>\n<blockquote>\n<p>It seems that I could switch (how do you do that I only know swap) to the 3rd goal and apply any of <code>a</code>,  <code>b</code> or <code>c</code>. And I guess based on what I use to close the goal, I would replace all <code>?m_1</code> with that.</p>\n</blockquote>\n<p>Try out the last example I gave, which uses <code>show</code> to select the <code>nat</code> goal and then uses <code>exact</code> to close it.</p>",
        "id": 258459777,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634771920
    },
    {
        "content": "<p>Also, metavariables are actually used for all of typechecking/elaboration, as I understand it, not just in tactics.  This is how Lean solves for things like implicit variables.  For example, the <code>id</code> function has the type <code>Π {α : Sort*}, α → α</code>.  If you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>then Lean's not able to solve for the metavariable for <code>α</code> and you get <code>id : ?M_1 → ?M_1</code>.</p>\n<p>Lean doesn't allow metavariables to go unfilled.  For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_id</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>results in the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>This is referring to the fact it's not able to solve for <code>?M_1 : Sort*</code> with some actual expression. (I guess \"placeholder\" is a synonym for \"metavariable.\")</p>\n<p>It's able to solve for this metavariable in the following, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_nat_id</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 258460386,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634772331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391104\">Johannes C. Mayer</span> <a href=\"#narrow/stream/113489-new-members/topic/Having.20nat.20as.20a.20goal/near/258456972\">said</a>:</p>\n<blockquote>\n<p>It seems that I could switch (how do you do that I only know swap) to the 3rd goal and apply any of <code>a</code>,  <code>b</code> or <code>c</code>.</p>\n</blockquote>\n<p>By the way the <code>swap</code> tactic takes an optional argument, and will bring the specified goal to the front, i.e. <code>swap 3</code> will move goal 3 to the front. <code>rotate</code> can also be used for a similar effect.</p>",
        "id": 258462902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634773996
    },
    {
        "content": "<p>Thanks all, that's all very informative.</p>",
        "id": 258503169,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1634803270
    }
]