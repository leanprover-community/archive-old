[
    {
        "content": "<p>I'm trying to use permutation <code>perm</code>, for which I'm trying to import <code>data</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cayley</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">perm</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>But  Lean gives me this error under <code>import algebra</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">file</span> <span class=\"err\">&#39;</span><span class=\"n\">data&#39;</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">search</span> <span class=\"n\">path</span>\n<span class=\"n\">Use</span> <span class=\"err\">&#39;</span><span class=\"n\">lean</span> <span class=\"c1\">--path&#39; to see where lean is looking, or https://leanprover-community.github.io/file-not-found.html for more</span>\n</code></pre></div>\n\n\n<p>and this one under <code>import data</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data</span>\n<span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">resolve</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data</span>\n</code></pre></div>",
        "id": 207710602,
        "sender_full_name": "Chris M",
        "timestamp": 1598077823
    },
    {
        "content": "<p>You want <code>import data.equiv</code>, and likewise for algebra a filename after the .</p>",
        "id": 207710731,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1598078086
    },
    {
        "content": "<p>Probably <code> algebra.group.basic</code></p>",
        "id": 207710792,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1598078177
    },
    {
        "content": "<p>This is what I have now:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">group_action</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cayley</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">perm</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">=</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>But this gives the same error as before, now regarding <code>data.equiv</code> instead.</p>\n<p>It works if I remove <code>import data.equiv</code> and instead write <code>theorem cayley (G:Type*) [h:group G] : ∃ f: G →* equiv.perm G, f=f := sorry</code>, but I don't wanna write equiv.perm all the time.</p>",
        "id": 207712477,
        "sender_full_name": "Chris M",
        "timestamp": 1598081441
    },
    {
        "content": "<p>I think you are confused about <code>import</code> and <code>open</code>.</p>",
        "id": 207713667,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598083771
    },
    {
        "content": "<p><code>import</code> is for importing the content of files, but have no bearing on namespaces or how you refer to identifiers.</p>",
        "id": 207713672,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598083796
    },
    {
        "content": "<p><code>open</code> opens namespaces, so you can omit prefixes of fully qualified names.</p>",
        "id": 207713711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598083810
    },
    {
        "content": "<p>Something you might consider doing is to define a homomorphism rather than proving existence:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">cayley</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">perm</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>This is stronger because then proofs about <code>cayley</code> can make use of how it was defined.  And, the fact you defined it means it exists.</p>",
        "id": 207714099,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598084556
    },
    {
        "content": "<p>I am editing the file <code>\\src\\data\\matrix\\basic.lean</code> and I added a new import <code>import data.complex.basic</code><br>\nbut why does the code then report </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">resolve</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data.complex.basic</span>\n</code></pre></div>\n<p>after a long time of \"loading...\"?</p>",
        "id": 245801610,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626170162
    },
    {
        "content": "<p>It is quite possible that <code>data.complex.basic</code> imports <code>data.matrix.basic</code> transitively.</p>",
        "id": 245801682,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626170193
    },
    {
        "content": "<p>At any rate I don't think <code>data.matrix.basic</code> should be importing the complex numbers</p>",
        "id": 245801758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626170253
    },
    {
        "content": "<p>I assume you're wanting to define the conjugate transpose?</p>",
        "id": 245801863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626170307
    },
    {
        "content": "<p>Yes, indeed.</p>",
        "id": 245801887,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626170324
    },
    {
        "content": "<p>If so, you don't need the complex numbers, you can define it on matrices over any <code>star_ring</code></p>",
        "id": 245801920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626170343
    },
    {
        "content": "<p>good suggestion!</p>",
        "id": 245802100,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626170438
    },
    {
        "content": "<p><code>data/matrix/basic.lean</code> is also quite long, so could you define it in a new file?</p>",
        "id": 245802175,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626170480
    },
    {
        "content": "<p><code>transpose</code> is defined in that file. I am considering defining <code>conj_trans</code> close to that. Would that be ok?</p>",
        "id": 245802376,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626170609
    },
    {
        "content": "<p>Probably the easiest way to shrink matrix/basic is to put all the block matrix stuff in a new file</p>",
        "id": 245802618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626170754
    },
    {
        "content": "<p>I think I am going to add <code>conj_trans</code> close to <code>transpose</code> as it seems inconvenient for the users to me to put these two in different files.</p>",
        "id": 245802775,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626170836
    },
    {
        "content": "<p>I think conj_trans fits nicely in basic, probably right before the <code>star_ring</code> instance</p>",
        "id": 245802822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626170859
    },
    {
        "content": "<p>Good suggestion! I think I am going to do this work first. Perhaps someone else can put out things that should be in a new file.</p>",
        "id": 245802947,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626170928
    },
    {
        "content": "<p>Thoughts on <code>conj_transpose</code> vs <code>conj_trans</code>?</p>",
        "id": 245802971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626170943
    },
    {
        "content": "<p>I prefer <code>conj_transpose</code></p>",
        "id": 245802989,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626170956
    },
    {
        "content": "<p>Do you have a notation in mind?</p>",
        "id": 245803023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626170994
    },
    {
        "content": "<p>I will do <code>localized \"postfix </code>ᴴ<code>:1500 := matrix.conj_transpose\" in matrix</code></p>",
        "id": 245803114,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626171063
    },
    {
        "content": "<p>as <code>localized \"postfix </code>ᵀ<code>:1500 := matrix.transpose\" in matrix</code> has been in the file.</p>",
        "id": 245803132,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626171081
    },
    {
        "content": "<p>fwiw, you can put backticks in codeblocks by just surrounding it with more backticks:</p>\n<blockquote>\n<p>I will do <code>localized \"postfix `ᴴ`:1500 := matrix.conj_transpose\" in matrix</code></p>\n</blockquote>",
        "id": 245806739,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626173335
    },
    {
        "content": "<p><code> ```````````````````````` </code> is an example of a zillion backticks that works</p>",
        "id": 245806750,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626173347
    },
    {
        "content": "<p>I have finished adding it. I am making a PR.</p>",
        "id": 245807351,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626173729
    },
    {
        "content": "<p>The PR is <a href=\"https://github.com/leanprover-community/mathlib/issues/8289\">#8289</a>. IMO there's way too much going on in that, and it should be split into smaller PRs</p>",
        "id": 245808789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626174618
    }
]