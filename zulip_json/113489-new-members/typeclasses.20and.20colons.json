[
    {
        "content": "<p>Here are two versions of \"the same\" function, a simple list membership function. The item type is a parameter, along with an implicit proof of decidable equality for that type. In the first version, these arguments are given before the color. In the second version, they are given after the colon (and so two additional variables are also used in pattern matching, etc. The problem is that while the first version works, in the second, I get a typeclass inference error: Lean complains that it can't synthesize a typeclass instance for \"decidable (h = i),\" the condition in the if. Can you tell me what's the underlying problem here? Thank you!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">member'</span>\n    <span class=\"o\">{</span><span class=\"n\">item_type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">item_type</span><span class=\"o\">]</span>  <span class=\"o\">:</span>  <span class=\"c1\">-- COLON HERE</span>\n    <span class=\"n\">list</span> <span class=\"n\">item_type</span> <span class=\"bp\">→</span> <span class=\"n\">item_type</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">list.nil</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span>      <span class=\"c1\">-- THIS IS FINE</span>\n    <span class=\"k\">then</span> <span class=\"n\">tt</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">member'</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">member</span> <span class=\"o\">:</span>        <span class=\"c1\">-- COLON NOW HERE</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">item_type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">item_type</span><span class=\"o\">],</span>\n    <span class=\"n\">list</span> <span class=\"n\">item_type</span> <span class=\"bp\">→</span> <span class=\"n\">item_type</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">item_type</span> <span class=\"n\">e</span> <span class=\"n\">list.nil</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">item_type</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span>     <span class=\"c1\">-- THIS IS NOT FINE</span>\n    <span class=\"k\">then</span> <span class=\"n\">tt</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">member</span> <span class=\"n\">item_type</span> <span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289767485,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1657910851
    },
    {
        "content": "<p>Type class inference works with a cache that is populated at the colon, you'd need resetI or something like that</p>",
        "id": 289768099,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657911195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/typeclasses.20and.20colons/near/289768099\">said</a>:</p>\n<blockquote>\n<p>Type class inference works with a cache that is populated at the colon, you'd need resetI or something like that</p>\n</blockquote>\n<p>Hmm. Where would I learn more about resetI</p>",
        "id": 289768328,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1657911298
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#resetI\">tactic#resetI</a>, maybe</p>",
        "id": 289768420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657911356
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#Instance%20cache%20tactics\">https://leanprover-community.github.io/mathlib_docs/tactics.html#Instance%20cache%20tactics</a></p>",
        "id": 289768492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657911375
    },
    {
        "content": "<p>You can use <code>by exactI your_expression</code> to have the instance cache be reset in the context of <code>your_expression</code></p>",
        "id": 289768997,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657911634
    },
    {
        "content": "<p>Thank you, everyone.</p>",
        "id": 289769179,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1657911718
    },
    {
        "content": "<p>Solution.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">member</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">item_type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">item_type</span><span class=\"o\">],</span>\n    <span class=\"n\">list</span> <span class=\"n\">item_type</span> <span class=\"bp\">→</span> <span class=\"n\">item_type</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">item_type</span> <span class=\"n\">e</span> <span class=\"n\">list.nil</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">item_type</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"o\">(</span>    <span class=\"c1\">--- HERE</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"k\">then</span> <span class=\"n\">tt</span>\n        <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">member</span> <span class=\"n\">item_type</span> <span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289773943,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1657914046
    },
    {
        "content": "<p>You should not even need the parentheses (maybe barring some weird edge cases that aren't present here)</p>",
        "id": 289774653,
        "sender_full_name": "Reid Barton",
        "timestamp": 1657914456
    }
]