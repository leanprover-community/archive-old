[
    {
        "content": "<p>Hi! I'm currently learning lean and I'm trying to figure out what is the problem with this tactic </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">hâ‚€</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">add_pos</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">exp_pos</span><span class=\"o\">,}</span>\n</code></pre></div>\n<p>Lean says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">add_pos</span> <span class=\"n\">zero_lt_one</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">zero_lt_one</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n</code></pre></div>\n<p>What does that mean?</p>",
        "id": 217941949,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606339853
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, i.e. fully working code that we can just cut and paste?</p>",
        "id": 217942017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606339903
    },
    {
        "content": "<p>oh -- you could try <code>exact add_pos zero_lt_one exp_pos,</code>, that might do it.</p>",
        "id": 217942112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606339953
    },
    {
        "content": "<p>Thanks, exact works with (exp_pos a) instead of exp_pos. What was the problem with apply?</p>",
        "id": 217942297,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606340086
    },
    {
        "content": "<p>Using <code>exact</code> is being a bit more friendly towards the unifier, saying \"this is the whole proof\". <code>apply</code> is supposed to guess a lot more about what's going on.</p>",
        "id": 217942325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606340112
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 217942393,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606340161
    },
    {
        "content": "<p><code>apply</code> isn't really the correct tactic to use here -- if <code>h : P -&gt; Q</code> then <code>apply h</code> turns a goal of <code>Q</code> into a goal of <code>P</code>. That's <code>apply</code>'s job. That's not what is happening in your proof.</p>",
        "id": 217942442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606340168
    },
    {
        "content": "<p>You're writing down the exact proof term here, so <code>exact</code> is the tactic to use. But <code>apply</code> does sometimes work in this situation, it's just a bit more hit-and-miss :-)</p>",
        "id": 217942467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606340201
    }
]