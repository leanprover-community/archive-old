[
    {
        "content": "<p>Hello, I was trying to define a datatype of propositional formulas over an arbitrary language in the following way:</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"kn\">structure</span> <span class=\"n\">prop_lang</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">Symb</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Arity</span> <span class=\"o\">:</span> <span class=\"n\">Symb</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"o\">:</span> <span class=\"n\">prop_lang</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">V</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n<span class=\"bp\">|</span> <span class=\"n\">Conn</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℒ</span><span class=\"bp\">.</span><span class=\"n\">Symb</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">Form</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span><span class=\"bp\">.</span><span class=\"n\">Arity</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n</pre></div>\n\n\n<p>but using the standard vector datatype (lists with fixed length) it gives me the following error:</p>\n<div class=\"codehilite\"><pre><span></span>nested inductive type compiled to invalid inductive type\nnested exception message:\nnested occurrence &#39;subtype.{1} (_nest_1_1.list.Form Var ℒ) (fun (l : _nest_1_1.list.Form Var ℒ), (eq.{1} nat (list.length.{0} (_nest_1_1.Form Var ℒ) l) (prop_lang.Arity ℒ c)))&#39; contains variables that are not parameters\n</pre></div>\n\n\n<p>while if I define it with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">myvector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">myvector</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span>   <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">myvector</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">myvector</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>everything goes okay. I imagine this is because vector isn't really a datatype but it is a set over the list datatype  while myvector is a proper datatype. After this I have some questions:<br>\n1) The error is really due to what I am supposing to?<br>\n2) It is a good idea to work with myvector datatype? I know it is quite standard in other languages (like Agda) but it  seems that in lean it is not so used.<br>\n3) It is possible to define Form with vector (set of lists of fixed length) as a datatype (not as a set of well-formed formula over<br>\na datatype where ill-formed formulas can be build).<br>\nThanks to everyone!</p>",
        "id": 186208864,
        "sender_full_name": "Borja Sierra",
        "timestamp": 1579629342
    },
    {
        "content": "<p>My recommendation is to avoid nested inductive types in lean 3 (and maybe lean 4, we'll see). You should just code it as a regular inductive type. One way to do this, similar to what is done in the flypitch project:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">prop_lang</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">Symb</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Arity</span> <span class=\"o\">:</span> <span class=\"n\">Symb</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">PreForm</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"o\">:</span> <span class=\"n\">prop_lang</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">V</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"bp\">→</span> <span class=\"n\">PreForm</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">Symb</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℒ</span><span class=\"bp\">.</span><span class=\"n\">Symb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PreForm</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span><span class=\"bp\">.</span><span class=\"n\">Arity</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PreForm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">PreForm</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">PreForm</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Form</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"o\">:</span> <span class=\"n\">prop_lang</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">PreForm</span> <span class=\"n\">Var</span> <span class=\"n\">ℒ</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 186232742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579644033
    },
    {
        "content": "<p>That is, you say \"everything goes okay with <code>myvector</code>\" but actually you will have issues when you want to e.g. define functions out of the nested inductive</p>",
        "id": 186232968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579644222
    }
]