[
    {
        "content": "<p>hi everyone, new Lean user here! I have some questions about this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">ys</span> <span class=\"o\">:=</span> <span class=\"n\">ys</span>\n<span class=\"bp\">|</span> <span class=\"n\">xs</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span>\n\n<span class=\"c1\">--#reduce merge [1,3] [2]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₂</span> <span class=\"bp\">=</span> <span class=\"n\">merge</span> <span class=\"n\">list.nil</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">merge</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₂</span> <span class=\"bp\">=</span> <span class=\"n\">append</span> <span class=\"n\">list.nil</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">refl</span> <span class=\"kd\">end</span>\n</code></pre></div>\n<p>1: is there something wrong with the way I've defined merge? the reduce command times out, although <code>#eval</code> works<br>\n2: I had the mental model that definitions would be normalized away inside proofs, so I was expecting <code>refl</code> to prove the first <code>example</code>. is there a way for me to see why it works for <code>append</code> but <code>simp</code> is required for <code>merge</code>? why does that proof require an initial case split?</p>",
        "id": 221083583,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1609182250
    },
    {
        "content": "<p>For me, in an empty file with your first defn, <code>#reduce</code> does not time out for me.</p>",
        "id": 221083808,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609182466
    },
    {
        "content": "<p>oops, I agree. it seems that adding <code>import data.list.perm</code> causes the timeout (I haven't intentionally used anything from this module, but I was planning to)</p>",
        "id": 221084826,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1609183322
    },
    {
        "content": "<p><code>#print prefix merge</code> shows you what is really going on. The four equations e.g. <code>merge.equations._eqn_3</code> show you the things which are true, but Lean will not guarantee that they're true by definition.</p>",
        "id": 221084871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609183371
    },
    {
        "content": "<p>It's not possible for all three equations in <code>merge</code> to be defeqs</p>",
        "id": 221084914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609183430
    },
    {
        "content": "<p>because you have to case on one of the arguments first; if you case on <code>xs</code> then <code>merge xs [] = xs</code> will not be defeq</p>",
        "id": 221084984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609183473
    },
    {
        "content": "<p>incidentally, lean has a slightly stupid case tree generator so it manages to break <em>both</em> of the first two defeqs</p>",
        "id": 221085033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609183534
    },
    {
        "content": "<p>But there is another issue here: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"o\">[]</span>      <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">[]</span>      <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span>\n</code></pre></div>\n<p>does not make <code>example {α : Type} [linear_order α] (x : α) (xs : list α) : merge (x :: xs) [] = x :: xs := rfl</code> work.</p>",
        "id": 221085047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609183559
    },
    {
        "content": "<p>oh, right, this function also has a weird recursion structure</p>",
        "id": 221085118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609183604
    },
    {
        "content": "<p>it's probably being compiled with well founded recursion which breaks all the defeqs</p>",
        "id": 221085132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609183622
    },
    {
        "content": "<p><code>example {α : Type} [linear_order α] : merge ([] : list α) [] = [] := rfl</code> works!</p>",
        "id": 221085144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609183638
    },
    {
        "content": "<p>It's possible to compile this one to satisfy the four equations you wrote</p>",
        "id": 221085159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609183654
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">list.rec_on</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">IH</span> <span class=\"n\">ys</span><span class=\"o\">,</span>\n<span class=\"n\">list.rec_on</span> <span class=\"n\">ys</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">ys</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">merge</span> <span class=\"o\">[]</span> <span class=\"n\">ys</span> <span class=\"bp\">=</span> <span class=\"n\">ys</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 221085485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609183889
    },
    {
        "content": "<p>but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">merge</span> <span class=\"n\">xs</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 221085563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609183944
    },
    {
        "content": "<p>This is about the best one can expect, I guess.</p>",
        "id": 221085695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609184043
    },
    {
        "content": "<p>right, the different cases that you get defeqs for have to be disjoint</p>",
        "id": 221085723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609184072
    },
    {
        "content": "<p>People like me who take definitional equality less seriously just need to know the trick that <code>simp [merge]</code> will solve these lemmas. In a typical Lean formalisation one would in fact take these four \"definitional\" lemmas and restate them (with any notation which one wants to use), prove them (with <code>rfl</code> or not depending on what works) and then tag the lemmas with <code>simp</code> and let the simplifier do the rewriting for you.</p>",
        "id": 221085840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609184187
    },
    {
        "content": "<p>thanks Kevin and Mario! i'll carry on with propositional equalities for now</p>",
        "id": 221086448,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1609184858
    }
]