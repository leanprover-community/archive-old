[
    {
        "content": "<p>Hello world. While experimenting with some Rosetta Code tasks to learn Lean; I've encountered a few obscure type synthesis failures. Can someone shed any light as to why and how often these issues are?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- corecursive factorial works perfectly</span>\n<span class=\"n\">def</span> <span class=\"n\">cofac</span> <span class=\"o\">:=</span> <span class=\"n\">stream</span><span class=\"bp\">.</span><span class=\"n\">corec</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- corecursive fibonacci however, fails to synthesize the type of the first function</span>\n<span class=\"n\">def</span> <span class=\"n\">cofib</span> <span class=\"o\">:=</span> <span class=\"n\">stream</span><span class=\"bp\">.</span><span class=\"n\">corec</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- which requires annotating it as either `(prod.fst : prod \\nat \\nat -&gt; \\nat)` or the</span>\n<span class=\"c1\">-- second lambda body as `(b + 0, a + b)` (adding `+ 0`)</span>\n<span class=\"c1\">-- or rewriting to use `corec_on` where `(0, 1)` is passed before the lambdas</span>\n<span class=\"n\">def</span> <span class=\"n\">cofib&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">stream</span><span class=\"bp\">.</span><span class=\"n\">corec_on</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>I also hit these inconsistencies.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- `multiset` can be constructed with `{}` but `finset` cannot</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">({}</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">({}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"c1\">-- `finset` has `finset.empty` but `multiset` does not have `multiset.empty`</span>\n</code></pre></div>",
        "id": 207364315,
        "sender_full_name": "SnowFox",
        "timestamp": 1597804240
    },
    {
        "content": "<p>multiset uses additive notation, so it is <code>(0 : multiset nat)</code></p>",
        "id": 207365633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597806003
    },
    {
        "content": "<p>as for the lambda match, those require the type to be known when reading left to right. I think that from the pattern <code>stream.corec prod.fst _ _</code> you can't determine that the first <code>_</code> has type <code>A x B -&gt; C</code> which is necessary to interpret <code>(λ ⟨a, b⟩, ...)</code></p>",
        "id": 207365675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597806106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/corecursive.20fibonacci.20and.20factorial/near/207365675\">said</a>:</p>\n<blockquote>\n<p>as for the lambda match, those require the type to be known when reading left to right. I think that from the pattern <code>stream.corec prod.fst _ _</code> you can't determine that the first <code>_</code> has type <code>A x B -&gt; C</code> which is necessary to interpret <code>(λ ⟨a, b⟩, ...)</code></p>\n</blockquote>\n<p>I suspected as much; but then I tried <code>stream.unfolds (0, 1) ..</code> because this pushes the type of <code>(0,1)</code> all the way to the left, but this has the same issue.</p>",
        "id": 207367812,
        "sender_full_name": "SnowFox",
        "timestamp": 1597809320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/corecursive.20fibonacci.20and.20factorial/near/207365633\">said</a>:</p>\n<blockquote>\n<p>multiset uses additive notation, so it is <code>(0 : multiset nat)</code></p>\n</blockquote>\n<p>The weird detail there is that <code>({} : multiset nat)</code> does work but <code>({} : finset nat)</code> does not. I did notice <code>\\empty</code> works for both.. but why doesn't <code>{}</code>?</p>",
        "id": 207368043,
        "sender_full_name": "SnowFox",
        "timestamp": 1597809668
    },
    {
        "content": "<p>Because multiset doesn't have insert, I think</p>",
        "id": 207368054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597809694
    },
    {
        "content": "<p>insert is kind of a weird operation for multisets</p>",
        "id": 207368058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597809712
    },
    {
        "content": "<p>actually correction, insert works for multiset, it's just cons</p>",
        "id": 207368117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597809795
    },
    {
        "content": "<p>also </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">({}</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>works for me and produces <code>∅ : multiset ℕ</code></p>",
        "id": 207368125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597809824
    },
    {
        "content": "<p>Right, but try finset.</p>",
        "id": 207368166,
        "sender_full_name": "SnowFox",
        "timestamp": 1597809845
    },
    {
        "content": "<p>oh, the error is weirder than I thought</p>",
        "id": 207368239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810002
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">({}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"c1\">-- invalid structure value { ... }, field &#39;val&#39; was not provided</span>\n<span class=\"c1\">-- invalid structure value { ... }, field &#39;nodup&#39; was not provided</span>\n</code></pre></div>",
        "id": 207368252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810029
    },
    {
        "content": "<p>It has interpreted the <code>{}</code> as an empty structure literal</p>",
        "id": 207368254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810041
    },
    {
        "content": "<p>because <code>finset</code> is a <code>structure</code></p>",
        "id": 207368255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810049
    },
    {
        "content": "<p>Yeah.. I should have included this. Sorry.</p>",
        "id": 207368263,
        "sender_full_name": "SnowFox",
        "timestamp": 1597810057
    },
    {
        "content": "<p>and multiset isn't</p>",
        "id": 207368265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810060
    },
    {
        "content": "<p>Ah!</p>",
        "id": 207368266,
        "sender_full_name": "SnowFox",
        "timestamp": 1597810063
    },
    {
        "content": "<p>I should note that we don't usually write <code>{}</code> for the empty set</p>",
        "id": 207368305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810084
    },
    {
        "content": "<p>we're all about the unicode here</p>",
        "id": 207368307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810091
    },
    {
        "content": "<p>Heh, noted.</p>",
        "id": 207368319,
        "sender_full_name": "SnowFox",
        "timestamp": 1597810135
    },
    {
        "content": "<p>Any idea why the corecursive fib doesn't work when using the unfolds variant?</p>",
        "id": 207368331,
        "sender_full_name": "SnowFox",
        "timestamp": 1597810184
    },
    {
        "content": "<p>The alpha type is as far left as it gets; yet still fails</p>",
        "id": 207368377,
        "sender_full_name": "SnowFox",
        "timestamp": 1597810246
    },
    {
        "content": "<p>Well; without being explicitly provided.</p>",
        "id": 207368386,
        "sender_full_name": "SnowFox",
        "timestamp": 1597810278
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 207368434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810329
    },
    {
        "content": "<p>Er, I misremembered. That was a different thing I tried. It was <code>stream.corec_on</code> which pushes the <code>(0, 1)</code> to the start and works as expected.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">stream</span>\n<span class=\"n\">def</span> <span class=\"n\">cofib</span> <span class=\"o\">:=</span> <span class=\"n\">stream</span><span class=\"bp\">.</span><span class=\"n\">corec</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">cofib2</span> <span class=\"o\">:=</span> <span class=\"n\">stream</span><span class=\"bp\">.</span><span class=\"n\">corec_on</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"n\">def</span> <span class=\"n\">cofib3</span> <span class=\"o\">:=</span> <span class=\"n\">stream</span><span class=\"bp\">.</span><span class=\"n\">unfolds</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207368588,
        "sender_full_name": "SnowFox",
        "timestamp": 1597810578
    },
    {
        "content": "<p>The first one works because of the <code>+ 0</code>, the second works because <code>(0, 1)</code> is first, and the 3rd fails along with <code>s/unfolds/corec</code>, so is the same problem. Except I suspected <code>unfolds</code> might work where <code>corec</code> didn't because <code>unfolds</code> puts all bindings on the left-hand-side of the colon in the type. Unsure if that'd make any difference. It didn't.</p>",
        "id": 207368659,
        "sender_full_name": "SnowFox",
        "timestamp": 1597810731
    },
    {
        "content": "<p>here's another trick for the toolbox:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">cofib3</span> <span class=\"o\">:=</span> <span class=\"n\">stream</span><span class=\"bp\">.</span><span class=\"n\">unfolds</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207368742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810818
    },
    {
        "content": "<p><code>by exact</code> is a way to say \"elaborate this last\"</p>",
        "id": 207368748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810835
    },
    {
        "content": "<p>also you can (should) just give more type ascriptions when this happens</p>",
        "id": 207368802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810910
    },
    {
        "content": "<p>Huh! Nice to know. Thanks. Though I'll just go with the <code>corec_on</code> variant for simplicity.</p>",
        "id": 207368883,
        "sender_full_name": "SnowFox",
        "timestamp": 1597810948
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">cofib3</span> <span class=\"o\">:=</span> <span class=\"n\">stream</span><span class=\"bp\">.</span><span class=\"n\">unfolds</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207368885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597810951
    },
    {
        "content": "<p>Yeah, as I had earlier, I annotated the prod.fst part, as that was where the error was.</p>",
        "id": 207368903,
        "sender_full_name": "SnowFox",
        "timestamp": 1597811002
    },
    {
        "content": "<p>Thanks again. I need to take a break, have a headache due to insufficient sleep. TTYL. o/</p>",
        "id": 207368999,
        "sender_full_name": "SnowFox",
        "timestamp": 1597811116
    }
]