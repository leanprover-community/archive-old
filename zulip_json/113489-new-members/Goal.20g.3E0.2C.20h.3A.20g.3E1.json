[
    {
        "content": "<p>Is there a simple way to apply a comparison that is more strict than the required goal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 207134490,
        "sender_full_name": "Rick Love",
        "timestamp": 1597665724
    },
    {
        "content": "<p>Some options:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">linarith</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">transitivity</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">h</span>\n<span class=\"bp\">...</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 207135461,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1597666391
    },
    {
        "content": "<p><code>apply</code> has a strict meaning that isn't \"use this fact somehow\"</p>",
        "id": 207138228,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597668348
    },
    {
        "content": "<p>norm_num seems like something I need to use more</p>",
        "id": 207143997,
        "sender_full_name": "Rick Love",
        "timestamp": 1597671174
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"c1\">-- please use &lt; and ≤ instead of &gt; and ≥</span>\n<span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 207144802,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597671600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Goal.20g.3E0.2C.20h.3A.20g.3E1/near/207144802\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"c1\">-- please use &lt; and ≤ instead of &gt; and ≥</span>\n<span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">h</span>\n<span class=\"bp\">````</span>\n<span class=\"n\">Yeah</span><span class=\"o\">,</span> <span class=\"n\">I&#39;m</span> <span class=\"n\">going</span> <span class=\"n\">to</span> <span class=\"n\">go</span> <span class=\"n\">through</span> <span class=\"n\">and</span> <span class=\"n\">make</span> <span class=\"n\">that</span> <span class=\"n\">consistent</span><span class=\"bp\">.</span> <span class=\"n\">Are</span> <span class=\"n\">they</span> <span class=\"n\">definitionally</span> <span class=\"n\">equivalent</span><span class=\"err\">?</span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 207145173,
        "sender_full_name": "Rick Love",
        "timestamp": 1597671786
    },
    {
        "content": "<p>This works, but should perhaps be avoided if you want a readable proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 207145549,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1597671986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329841\">Rick Love</span> <a href=\"#narrow/stream/113489-new-members/topic/Goal.20g.3E0.2C.20h.3A.20g.3E1/near/207145173\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Goal.20g.3E0.2C.20h.3A.20g.3E1/near/207144802\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"c1\">-- please use &lt; and ≤ instead of &gt; and ≥</span>\n<span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">h</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Yeah, I'm going to go through and make that consistent. Are they definitionally equivalent?</p>\n</blockquote>\n<p>Yeah</p>",
        "id": 207145616,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597672024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Goal.20g.3E0.2C.20h.3A.20g.3E1/near/207145549\">said</a>:</p>\n<blockquote>\n<p>This works, but should perhaps be avoided if you want a readable proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">h</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Right, I'm a software engineer so used to keeping my variables on the left and values on the right. I just have to form the habit.</p>",
        "id": 207145880,
        "sender_full_name": "Rick Love",
        "timestamp": 1597672186
    },
    {
        "content": "<p>Ah, but the key is to think of <code>h</code> as a variable too</p>",
        "id": 207158238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597678410
    },
    {
        "content": "<p>that's the curry howard isomorphism in action, hypotheses are just like variables in a type because propositions are types</p>",
        "id": 207158418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597678479
    },
    {
        "content": "<p>(never mind, I misread the statement)</p>",
        "id": 207158936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597678705
    },
    {
        "content": "<p>To answer my own question (in the context of needing a tactic):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 207160010,
        "sender_full_name": "Rick Love",
        "timestamp": 1597679229
    },
    {
        "content": "<p>linarith should be able to do this without the cases</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 207160560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597679485
    },
    {
        "content": "<p>Oh, I see. Thanks!</p>",
        "id": 207160701,
        "sender_full_name": "Rick Love",
        "timestamp": 1597679537
    }
]