[
    {
        "content": "<p>I was wondering if the following definition can be formalized in Lean, and if so, how. I am thinking that a propositional variable might be defined as a natural number, but I am not sure how to introduce the connectives.</p>\n<p>DEFINITION. The set of wffs is the intersection of all sets S of formulas such<br>\nthat:</p>\n<p>(i) p ∈ S for each propositional variable p.<br>\n(ii) For each formula A, if A ∈ S, then ~A ∈ S.<br>\n(iii) For all formulas A and B, if A ∈ S and B ∈ S, then [A ∨ B] ∈ S.</p>\n<p>A wff is a member of the set of wffs.</p>\n<p>I would like to use this definition in a formal proof of the following exercise:</p>\n<p>Using the definition of the set of wffs, show that:</p>\n<p>(a) Every formula consisting of a propositional variable standing alone is<br>\na wff.<br>\n(b) If A is a wff, then ~A is a wff.<br>\n(c) If A and B are wffs, then [A ∨ B] is a wff.</p>",
        "id": 172382723,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1564791067
    },
    {
        "content": "<p>While it is possible to define wffs in this set-theoretic way, the much easier approach is to use an inductive type - this is what they are designed for. With that the theorem is trivial, as it is just the constructors of the inductive type</p>",
        "id": 172383273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564792038
    },
    {
        "content": "<p>Here is an example of using inductive types for this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- α is the type of propositional variables</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">wff</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">wff</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">wff</span> <span class=\"bp\">→</span> <span class=\"n\">wff</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">wff</span> <span class=\"bp\">→</span> <span class=\"n\">wff</span> <span class=\"bp\">→</span> <span class=\"n\">wff</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">prefix</span> <span class=\"bp\">`#`</span> <span class=\"o\">:=</span> <span class=\"n\">wff</span><span class=\"bp\">.</span><span class=\"n\">var</span>\n<span class=\"n\">local</span> <span class=\"kn\">prefix</span> <span class=\"bp\">`~`</span> <span class=\"o\">:=</span> <span class=\"n\">wff</span><span class=\"bp\">.</span><span class=\"n\">neg</span>\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">∨</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">wff</span><span class=\"bp\">.</span><span class=\"n\">or</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">wff</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">#</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">~</span> <span class=\"bp\">#</span><span class=\"n\">q</span>\n</pre></div>",
        "id": 172383399,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564792264
    },
    {
        "content": "<p>Thank you. I would still be interested in seeing how it might be done in the set-theoretic way, if you have a chance.</p>",
        "id": 172383726,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1564792853
    },
    {
        "content": "<p>In that case, I would define a character as a propositional variable or one of the 4 special characters (<code>~ [ ] ∨</code>) and then define <code>S</code> to be a set on the type of list of characters (<code>S</code> is the intersection of all sets satisfying ...)</p>",
        "id": 172384054,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564793366
    },
    {
        "content": "<p>I'm sorry, I'm not sure I understand.</p>",
        "id": 172384401,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1564793927
    },
    {
        "content": "<p>It's a much more raw interpretation. Your formulas are sequences of <code>[ ] ~ \\/ 1 2 3 4 5 6 7 8 9</code>. Step 1 is to turn a sequence of digits into a var. Step 2 is to come up with a prop describing 1, 2, 3 in terms of this raw list of characters.</p>",
        "id": 172385003,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1564795018
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.set.lattice\n\nnoncomputable theory\nopen sum\n-- Var is the type of propositional variables\nconstant Var : Type\ndef character := Var ⊕ fin 4\ndef lbracket : character := inr 0\ndef rbracket : character := inr 1\ndef neg : character := inr 2\ndef disj : character := inr 3\n\nlocal notation `⟦` := lbracket\nlocal notation `⟧` := rbracket\nlocal notation `~` := neg\nlocal notation `∨` := disj\n\ndef wff : set (list character) :=\n⋂₀ { S | (∀(p : Var), [inl p] ∈ S) ∧ (∀(A ∈ S), [ ~ ] ++ A ∈ S) ∧\n  ∀(A B ∈ S), [ ⟦ ] ++ A ++ [ ∨ ] ++ B ++ [ ⟧ ]  ∈ S }\n</pre></div>",
        "id": 172385022,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564795076
    },
    {
        "content": "<p>It might take me a bit to go through this, but thank you!</p>",
        "id": 172385227,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1564795461
    }
]