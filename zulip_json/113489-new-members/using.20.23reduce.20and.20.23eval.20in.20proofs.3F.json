[
    {
        "content": "<p>Is there a way to use the output of <code>#reduce</code> and/or <code>#eval</code> in defining a constant without copy/paste?  <code>def foo : ℕ := #reduce (0 + 1)</code> gives <code>error: invalid expression, unexpected token</code> and <code>warning: declaration 'foo' uses sorry</code></p>",
        "id": 204593990,
        "sender_full_name": "Jason Gross",
        "timestamp": 1595360600
    },
    {
        "content": "<p><code>#eval</code> is unsafe and/so it is faster and/so you basically can't use it (usually <code>norm_num</code> works in this situation)</p>",
        "id": 204594735,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595360932
    },
    {
        "content": "<p><code>#reduce</code> is as fast/slow as <code>rfl</code></p>",
        "id": 204594746,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595360938
    },
    {
        "content": "<p>note that <code>0 + 1</code> already defines a natural number, so you don't need to reduce it</p>",
        "id": 204594798,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595360963
    },
    {
        "content": "<p>how you could use it would be <code>theorem foo : 0 + 1 = [copy result of #reduce] := rfl</code></p>",
        "id": 204594841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595360983
    },
    {
        "content": "<p>and <code>theorem foo : 0 + 1 = [copy result of #eval] := by norm_num</code></p>",
        "id": 204594859,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595360999
    },
    {
        "content": "<p><code>norm_num</code> has asymptotically quadratic performance in the size of the term I'm building (even though my algorithm is obviously linear) and so seems to be unsuitable (maybe I'm using it wrong).  I want a replacement for something like <code>theorem foo : Σ v, v = 0 + 1 := by { eapply sigma.mk, norm_num }</code> which is faster</p>",
        "id": 204595171,
        "sender_full_name": "Jason Gross",
        "timestamp": 1595361160
    }
]