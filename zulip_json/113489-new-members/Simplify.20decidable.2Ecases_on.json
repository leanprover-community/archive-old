[
    {
        "content": "<p>I have a function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">decidable.cases_on</span> <span class=\"o\">(</span><span class=\"n\">nat.decidable_eq</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I want to prove something like <code>∀ (n : ℕ), f n n</code>.<br>\nSo far, my solution is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">nat.decidable_eq</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">decidable.is_true</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but it seems too convoluted. Is there a better way?</p>\n<p>Also, I noticed if I instead define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>then <code>simp [f']</code> is enough to solve the goal, even though both <code>f</code> and <code>f'</code> unfold to the same expression (after unfolding <code>ite</code> in the case of <code>f'</code>).</p>",
        "id": 225662146,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1612862581
    },
    {
        "content": "<p>There is probably a missing simp lemma to convert decidable.cases_on into <code>dite</code></p>",
        "id": 225662508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612862814
    },
    {
        "content": "<p>Indeed, some simp lemmas for simple cases like this did what I needed. Thanks, I think I understand simp better now</p>",
        "id": 225873409,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1612977198
    },
    {
        "content": "<p>In general though, you should use <code>if ... then ... else</code> instead of <code>decidable.cases_on</code></p>",
        "id": 225875948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612978242
    },
    {
        "content": "<p>I don't think I can. Essentially, what I'm trying to write is of the form <code>def f (α β : Type) (x : α) := if α = β then cast x to β else ...</code>.<br>\nBut cast needs an argument <code>h : α = β</code> which <code>if ... then ... else</code> hides. Maybe there is a way and I just couldn't figure it out.</p>",
        "id": 225907194,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1612990913
    },
    {
        "content": "<p>You should use <code>function.update</code> for that</p>",
        "id": 225907317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612990962
    },
    {
        "content": "<p>You can get a proof out from the if using <code>if h : α = β then .. else ..</code> btw</p>",
        "id": 225907414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612990996
    },
    {
        "content": "<p>that's <code>dite</code> (for \"dependent if-then-else\")</p>",
        "id": 225907564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612991054
    },
    {
        "content": "<p>I see, that simplifies my code a lot, thanks!</p>",
        "id": 225909550,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1612991950
    }
]