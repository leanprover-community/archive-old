[
    {
        "content": "<p>I am trying to prove a trig identity, but I am struggling to remove the type coercions that I am showing up in my goals. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.data.nat.gcd</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.euclidean_domain</span>\n<span class=\"kn\">import</span> <span class=\"n\">geometry.euclidean.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">real</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">real_inner_product_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">euclidean_geometry</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">periodic_cos</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">θ</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">int.gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">θ</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cos</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">real</span>\n</code></pre></div>\n<p>Is the issue with how I am stating my assumptions? I have been unable to make progress on the goal because the coercions mean theorems I try to apply have pattern mismatch errors.</p>",
        "id": 246895588,
        "sender_full_name": "Taylor Belcher",
        "timestamp": 1626982950
    },
    {
        "content": "<p>Have you tried just doing  a <code>simp</code> first?</p>",
        "id": 246899507,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626984894
    },
    {
        "content": "<p>Or even a <code>norm_cast</code>?</p>",
        "id": 246899521,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626984901
    },
    {
        "content": "<p>I did try simp, <code>norm_cast</code> unfortunately did not help either.</p>",
        "id": 246900258,
        "sender_full_name": "Taylor Belcher",
        "timestamp": 1626985330
    },
    {
        "content": "<p>What is the problem exactly?  (i.e., what is a lemma you would like to apply which gives you errors.)</p>",
        "id": 246907474,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626988695
    },
    {
        "content": "<p>Coercions are a bit of an art. I would be tempted to go the whole way and not even have r or theta (they can be immediately eliminated with <code>subst h2</code> and <code>subst h3</code> anyway) and then just press on from there. You want to use div_add_mod or mod_add_div or whatever it's called, I guess</p>",
        "id": 246915124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626994584
    },
    {
        "content": "<p>Right, you'd first want to get m*theta in a state that looks like some rational or integer times pi.</p>",
        "id": 246915831,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626995068
    }
]