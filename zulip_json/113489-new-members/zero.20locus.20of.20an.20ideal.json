[
    {
        "content": "<p>I'm trying to prove the following lemma:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">radical_vanishing_ideal_zero_locus</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">vanishing_ideal</span> <span class=\"o\">(</span><span class=\"n\">zero_locus</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">radical</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>but lean is giving me a type error at <code>zero_locus</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">zero_locus</span> <span class=\"n\">I</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">I</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</pre></div>\n\n\n<p>This is puzzling to me because <code>zero_locus I</code> for an ideal <code>I</code> seems to type check when used in <code>prime_spectrum.lean</code> in mathlib</p>",
        "id": 195152391,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1587711694
    },
    {
        "content": "<p>try <code>zero_locus (I : set R)</code></p>",
        "id": 195152728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587712056
    },
    {
        "content": "<p>That did it!</p>",
        "id": 195152969,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1587712230
    },
    {
        "content": "<p>Does the notation <code>set R</code> mean subset of <code>R</code>?</p>",
        "id": 195153252,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1587712523
    },
    {
        "content": "<p>If you are a mathematician: yes</p>",
        "id": 195153261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587712537
    },
    {
        "content": "<p>Alternatively, read it as \"a set whose elements are all of type <code>R</code>\"</p>",
        "id": 195153317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587712569
    },
    {
        "content": "<p>In Lean you cannot (at least you don't want to!) have a set containing a natural number, a list of reals, a group, and a metric space.</p>",
        "id": 195153355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587712617
    },
    {
        "content": "<p>All elements of a set must have the same type.</p>",
        "id": 195153365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587712627
    },
    {
        "content": "<p>So you may also think of them as \"subsets of the ambient space\"</p>",
        "id": 195153386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587712656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294709\">@Aniruddh Agarwal</span>  Let me emphasize that the \"alternative\" reading \"a set whose elements are all of type <code>R</code>\" is the correct one, and you should really try to get used to it.</p>",
        "id": 195182823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587732728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/zero.20locus.20of.20an.20ideal/near/195153355\" title=\"#narrow/stream/113489-new-members/topic/zero.20locus.20of.20an.20ideal/near/195153355\">said</a>:</p>\n<blockquote>\n<p>In Lean you cannot (at least you don't want to!) have a set containing a natural number, a list of reals, a group, and a metric space.</p>\n</blockquote>\n<p>If you want to package such data together in Lean, you would use a type (a structure). Sets are more primitive than types, in Lean, because they can only have elements of one type.</p>",
        "id": 195184383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587733422
    },
    {
        "content": "<p>I think this is the wrong wording; types are of course more primitive than sets in <em>type</em> theory</p>",
        "id": 195184694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587733575
    },
    {
        "content": "<p>I think you mean to say that sets are less flexible than types in lean</p>",
        "id": 195184757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587733613
    },
    {
        "content": "<p>He meant \"primitive\" = \"less nice\"</p>",
        "id": 195184832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587733662
    }
]