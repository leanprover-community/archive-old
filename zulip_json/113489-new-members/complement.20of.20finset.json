[
    {
        "content": "<p>I have a type <code>ι</code> and functions <code>f : ι → ℝ</code> and <code>g : ι → ℝ</code>.  I want to state that for all but finitely many <code>x : ι</code>, it is true that <code>f x ≤ g x</code>.  I can see one way of doing this, </p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"err\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>but is there a more idiomatic way?</p>",
        "id": 202160009,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593219908
    },
    {
        "content": "<p>You could say that the set of <code>i</code> for which the condition does not hold is the coersion of some finset. I'm not sure which one would be better...</p>",
        "id": 202160741,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593221023
    },
    {
        "content": "<p>I guess <code>eventually</code> is for things like this.</p>",
        "id": 202161113,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593221607
    },
    {
        "content": "<p>Reid, can you tell me the syntax?  I had that idea but could not figure out how to phrase it.</p>",
        "id": 202161168,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593221678
    },
    {
        "content": "<p>Does mathlib know that cofinite sets form a filter?</p>",
        "id": 202161236,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593221851
    },
    {
        "content": "<p>I haven't used it myself</p>",
        "id": 202161237,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593221858
    },
    {
        "content": "<p>yes, should be <code>cofinite</code></p>",
        "id": 202161238,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593221865
    },
    {
        "content": "<p>Maybe <code>∀ᶠ i in cofinite, f i &lt;= g i</code></p>",
        "id": 202161289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593221922
    },
    {
        "content": "<p>Yup, I was just off trying that and it works.  Thank you!</p>",
        "id": 202161351,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593222014
    },
    {
        "content": "<p>Very soon you'll be able to use <a href=\"https://github.com/leanprover-community/mathlib/pull/3172/files#diff-63a3fd7051270b9139b68fd8b4e04bc0R51-R54\">https://github.com/leanprover-community/mathlib/pull/3172/files#diff-63a3fd7051270b9139b68fd8b4e04bc0R51-R54</a> (not in mathlib yet).</p>",
        "id": 202173051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593243331
    }
]