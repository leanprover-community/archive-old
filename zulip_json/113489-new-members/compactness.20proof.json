[
    {
        "content": "<p>Could someone give me an example of a compactness proof in Lean?<br>\nFor example assuming that the closed unit ball is compact, <br>\nthere are finitely many points a_1, ..., a_n such that every any <br>\npoint in the unit ball is at most 1/2 from one of the a_i.</p>",
        "id": 180151401,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1573145741
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcomp</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">O</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">O</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>(any <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">r&gt;0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> will do rather than <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">1/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span> I guess)</p>",
        "id": 180161675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573152375
    },
    {
        "content": "<p>In discussions with Lambert I realised that <code>compact_iff_finite_subcover</code> is not an ideal first step in this proof.</p>",
        "id": 180182089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573164713
    },
    {
        "content": "<p>Is something like <code>compact (s : set X) iff forall J, forall f : J -&gt; set X, (forall j, is_open f j) -&gt; ... exists J' : finset J, ...</code> in mathlib?</p>",
        "id": 180182252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573164825
    },
    {
        "content": "<p><code>compact_iff_finite_subcover</code> is <code>compact s ↔ (∀c, (∀t∈c, is_open t) → s ⊆ ⋃₀ c → ∃c'⊆c, finite c' ∧ s ⊆ ⋃₀ c')</code></p>",
        "id": 180182314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573164848
    },
    {
        "content": "<p>and here it would be easier to have the version involving an indexed family of opens</p>",
        "id": 180182361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573164863
    }
]