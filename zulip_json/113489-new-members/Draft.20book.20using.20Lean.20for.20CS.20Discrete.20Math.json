[
    {
        "content": "<p>Hi everyone, Happy to find this forum. I'm Kevin Sullivan, University of Virginia CS. I've been using Coq, and now Lean, and also Dafny, in teach graduate and undergraduate students, for several years. I'm ramping up the role of Lean. I haven't been a Lean dev, and so am likely to have some questions, concerns, comments, etc. about aspects of Lean that impinge on pedagogy. Very best wishes and thanks to all. --Kevin</p>",
        "id": 130789420,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1533228989
    },
    {
        "content": "<p>Wahoowa! Welcome!</p>",
        "id": 130790784,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1533230763
    },
    {
        "content": "<p>Welcome!</p>",
        "id": 130791119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533231252
    },
    {
        "content": "<p>Hi Kevin -- I'm Kevin Buzzard, a pure mathematician at Imperial College London. This autumn I'll be using Lean as part of my undergraduate mathematics teaching, in my introduction to proof course. As you can imagine I'm also very much interested in aspects of Lean that impinge on pedagogy. I hope to spend some time this summer making some good teaching materials for mathematicians; I currently have a bunch of stuff scattered around, and a bunch of ideas, but it seriously needs collating. One year ago I knew absolutely nothing about Coq or Lean or anything; I was just starting. I'm blogging as I learn at <a href=\"http://xenaproject.wordpress.com\" target=\"_blank\" title=\"http://xenaproject.wordpress.com\">xenaproject.wordpress.com</a> .</p>",
        "id": 130793967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533234771
    },
    {
        "content": "<blockquote>\n<p>Hi Kevin -- I'm Kevin</p>\n</blockquote>",
        "id": 130793973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533234779
    },
    {
        "content": "<p><a href=\"https://www.theonion.com/report-u-s-still-leads-world-with-highest-density-of-1819576406\" target=\"_blank\" title=\"https://www.theonion.com/report-u-s-still-leads-world-with-highest-density-of-1819576406\">https://www.theonion.com/report-u-s-still-leads-world-with-highest-density-of-1819576406</a></p>",
        "id": 130796514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533237816
    },
    {
        "content": "<p>Welcome Kevin! It's great to see more and more people using Lean in teaching. I'm Scott Morrison, a pure mathematician at the Australian National University. I'm not at all at the scale Kevin B is at yet, but I do have 3 maths undergraduates doing semester long projects with me at the moment in Lean, and I'm hoping to incorporate Lean in a larger way soon.</p>",
        "id": 130805703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533249626
    },
    {
        "content": "<p>Maybe one day we will have a teaching stream here. I'll also experiment on real students during the spring term. I'll try to teach them how to write traditional maths proofs on paper after convincing Lean.</p>",
        "id": 130828708,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533289432
    },
    {
        "content": "<p>Yeah, there are quite a few people who have taught using Lean or who are planning to. Jeremy Avigad and I taught a intro math course at CMU; I'll be adapting that and teaching to a CS audience this winter. <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> and our boss are teaching Lean in a more advanced CS course this fall.</p>",
        "id": 130832691,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1533294577
    },
    {
        "content": "<p>Just to advertise a bit <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span> I'm hoping to make this a topic of discussion at our January workshop: <a href=\"https://lean-forward.github.io/lean-together/2019/index.html\" target=\"_blank\" title=\"https://lean-forward.github.io/lean-together/2019/index.html\">https://lean-forward.github.io/lean-together/2019/index.html</a></p>",
        "id": 130832746,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1533294613
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 159629051,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1551371334
    },
    {
        "content": "<blockquote>\n<p>Just to advertise a bit <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> I'm hoping to make this a topic of discussion at our January workshop: <a href=\"https://lean-forward.github.io/lean-together/2019/index.html\" target=\"_blank\" title=\"https://lean-forward.github.io/lean-together/2019/index.html\">https://lean-forward.github.io/lean-together/2019/index.html</a></p>\n</blockquote>\n<p>Here's where we're posting notes / draft book on this stuff for my discrete math class. We've got a draft of all of it, and are pushing chapters to this site for the students as we get them edited. <a href=\"https://kevinsullivan.github.io/cs-dm-dev/\" target=\"_blank\" title=\"https://kevinsullivan.github.io/cs-dm-dev/\">https://kevinsullivan.github.io/cs-dm-dev/</a>. Comments welcome.</p>",
        "id": 159629246,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1551371447
    },
    {
        "content": "<blockquote>\n<p>We now know for sure that no one will ever find integers, a, b, c, and n, where n &gt; 2, such that a^n + b^n = c^n.</p>\n</blockquote>\n<p>Hum...</p>",
        "id": 159632606,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551373984
    },
    {
        "content": "<p>And why don't you use mathjax instead of images?</p>",
        "id": 159632647,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551374013
    },
    {
        "content": "<p>and why is section 1.4 called <em>Automated</em> reasoning?  Do you have a tactic I don't have?</p>",
        "id": 159633032,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551374246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124175\">@Kevin Sullivan</span>  Do you know whether your students managed to install Lean on Windows following your appendix?</p>",
        "id": 159633822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551374841
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>We now know for sure that no one will ever find integers, a, b, c, and n, where n &gt; 2, such that a^n + b^n = c^n.</p>\n</blockquote>\n<p>Hum...</p>\n</blockquote>\n<p>Maybe you should stick to positive integers here -- but even so, I don't think anyone formalised the proof yet ;-)</p>",
        "id": 159634178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551375186
    },
    {
        "content": "<p>This time I did it. I created a stream \"Lean for teaching\". Click and subscribe!</p>",
        "id": 159651939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551387796
    },
    {
        "content": "<p>An excellent read! I was thinking of trying to push Lean (and really, even this kind of course, as we only have \"logic\") on my uni so I've taken a peek at your work. I have a few observations.<br>\nIn 2.1.6.1.<br>\na) The error that contains \"already has an object named ‘x’\" is, imho, more aching to what would happen in an imperative language if you tried to define a second function with the same name (and same parameters if we consider overloading), which is also disallowed - and you get an error that resembles the one of Lean, something along the lines of \"redefinition of x\". In Lean, this doesn't quite talk about attempting to somehow assign a new value to the same variable or some such - note that your example there contains the keyword <code>def</code> twice, the second one is therefore not even attempting to do some kind of would-be assignment; for that you would have a hypothetical <code>def x := 5</code> followed by <code>x := 6</code>, note the lack of <code>def</code>.<br>\nIn 2.2.4.<br>\na) Just malformed math environment.<br>\nIn 2.3.<br>\na) The chapter rises a question that should be addressed briefly therein - why isn't every programming language typed then. You do say \"type checking does constrain the programmer to produce type-correct code\", but I find this a bit vague. While I have yet to hear a convincing argument anyway, the one that has yet not been completely debunked is that occasionally, types can potentially reject programs that would work correctly - good examples are various numeric type conversions, which leads me to:<br>\nb) \"They are also strongly typed, which means that all type errors are detected\". Weakly typed systems also detect all type errors! :) It's more about their attitude towards what constitutes a type error.<br>\nIn 2.4.<br>\na) Given the very introduction to this chapter talks about what are essentially extensional / intentional points of views on functions, there is very little mentioned about this thereafter - I see 2.4.4. tries, but perhaps an example of how the axiom of functional extensionality loses the computational information would be beneficial; e.g. just because ''normal'' matrix multiplication and Strassen both do the same thing does not mean they are the same algorithm / function.<br>\nIn 2.4.5.<br>\na) You've already talked a bit how functions are essentially sets of pairs, might be worth using this fact to reinforce the idea that \"functions are just values\".<br>\nb) Have I missed something - there's no notion of currying (schoenfinkeling, should i say :)!) and partial application anywhere? This would also help with this concept of returning functions / using them as arguments, as <code>a -&gt; b -&gt; c</code> = <code>a -&gt; (b -&gt; c)</code> and then <code>(a -&gt; b) -&gt; c</code> is something completely different.</p>",
        "id": 159691836,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1551432027
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124175\">Kevin Sullivan</span>  Do you know whether your students managed to install Lean on Windows following your appendix?</p>\n</blockquote>\n<p>Yes, they did.</p>",
        "id": 159946118,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1551730235
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>We now know for sure that no one will ever find integers, a, b, c, and n, where n &gt; 2, such that a^n + b^n = c^n.</p>\n</blockquote>\n<p>Hum...</p>\n</blockquote>\n<p>We'll take another look at that! :)</p>",
        "id": 159946211,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1551730312
    },
    {
        "content": "<blockquote>\n<p>An excellent read! I was thinking of trying to push Lean (and really, even this kind of course, as we only have \"logic\") on my uni so I've taken a peek at your work. I have a few observations.<br>\nIn 2.1.6.1.<br>\na) The error that contains \"already has an object named ‘x’\" is, imho, more aching to what would happen in an imperative language if you tried to define a second function with the same name (and same parameters if we consider overloading), which is also disallowed - and you get an error that resembles the one of Lean, something along the lines of \"redefinition of x\". In Lean, this doesn't quite talk about attempting to somehow assign a new value to the same variable or some such - note that your example there contains the keyword <code>def</code> twice, the second one is therefore not even attempting to do some kind of would-be assignment; for that you would have a hypothetical <code>def x := 5</code> followed by <code>x := 6</code>, note the lack of <code>def</code>.<br>\nIn 2.2.4.<br>\na) Just malformed math environment.<br>\nIn 2.3.<br>\na) The chapter rises a question that should be addressed briefly therein - why isn't every programming language typed then. You do say \"type checking does constrain the programmer to produce type-correct code\", but I find this a bit vague. While I have yet to hear a convincing argument anyway, the one that has yet not been completely debunked is that occasionally, types can potentially reject programs that would work correctly - good examples are various numeric type conversions, which leads me to:<br>\nb) \"They are also strongly typed, which means that all type errors are detected\". Weakly typed systems also detect all type errors! :) It's more about their attitude towards what constitutes a type error.<br>\nIn 2.4.<br>\na) Given the very introduction to this chapter talks about what are essentially extensional / intentional points of views on functions, there is very little mentioned about this thereafter - I see 2.4.4. tries, but perhaps an example of how the axiom of functional extensionality loses the computational information would be beneficial; e.g. just because ''normal'' matrix multiplication and Strassen both do the same thing does not mean they are the same algorithm / function.<br>\nIn 2.4.5.<br>\na) You've already talked a bit how functions are essentially sets of pairs, might be worth using this fact to reinforce the idea that \"functions are just values\".<br>\nb) Have I missed something - there's no notion of currying (schoenfinkeling, should i say :)!) and partial application anywhere? This would also help with this concept of returning functions / using them as arguments, as <code>a -&gt; b -&gt; c</code> = <code>a -&gt; (b -&gt; c)</code> and then <code>(a -&gt; b) -&gt; c</code> is something completely different.</p>\n</blockquote>\n<p>Moses,</p>\n<p>Thank you very much for these comments. I will process them shortly and make some mods to the draft. It's still in somewhat rough shape as you can see. There's plenty of room for improvement, and I will take your comments to heart (and start a list of acks for people who send helpful suggestions and corrections).  Very busy with some other stuff at the moment, but will get back to this shortly. Thank you again and kind regards, </p>\n<p>Kevin</p>",
        "id": 159946629,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1551730570
    },
    {
        "content": "<blockquote>\n<p>And why don't you use mathjax instead of images?</p>\n</blockquote>\n<p>The aim is to produce both HTML and LaTeX from the same source. Maybe mathjax would work. It's clear that the typography needs to be improved throughout. We borrowed (with thanks and acks) Jeremy Avigad's technology for generating HTML+LaTeX. So it's partly just the legacy issue. We'll take a look at alternatives at some point.</p>",
        "id": 159946884,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1551730755
    },
    {
        "content": "<p>mathjax certainly won't prevent you from getting  HTML+LaTeX from the same source, it's quite the contrary. I don't understand how you can blame Jeremy. <a href=\"https://leanprover.github.io/logic_and_proof\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof\">https://leanprover.github.io/logic_and_proof</a> certainly uses mathjax</p>",
        "id": 159948981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551732305
    },
    {
        "content": "<blockquote>\n<p>mathjax certainly won't prevent you from getting  HTML+LaTeX from the same source, it's quite the contrary. I don't understand how you can blame Jeremy. <a href=\"https://leanprover.github.io/logic_and_proof\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof\">https://leanprover.github.io/logic_and_proof</a> certainly uses mathjax</p>\n</blockquote>\n<p>Ok,, we'll take another look. Clearly needs fixing. Apologies to Jeremy. Will fix when time permits. Right now fairly slammed getting context edited and out to my students.</p>",
        "id": 159952674,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1551735106
    },
    {
        "content": "<p>I finally had the time to go over 3. Observations are for the most part just nitpicks.<br>\nIn 3.4.(6) is missing?<br>\na) Formalization of <code>false'</code> is simply <code>inductive false' : Prop</code>, then I guess <code>example : false' ↔ false := iff.intro (λcontra : false', contra.cases_on _) (λcontra : false, contra.cases_on _)</code> is pertinent there. <br>\nIn 3.5.6<br>\na) <code>example : true' ↔ true := iff.intro (λh : true', true.intro) (λh : true, true'.intro)</code> could be handy here<br>\nIn 3.6.3.2.<br>\na) I may have missed some previous occurences but it appears that here is the first time you curry a function (<code>sumOfSqaures</code>) - this \"works\" in combination with my previous comment 2.4.5/b<br>\nIn 3.7.4.<br>\na) Hahah, there really appears to be no mp in core Lean;  I guess function application is enough :).  Anyway, in your example you provide two interpretations, written in different styles. You \"missed\" my absolute favourite ones, once again have to do with currying: <code>def arrow_elim' { P Q : Prop } (pimpq: P -&gt; Q) : (P -&gt; Q) := pimpq</code>- note that the parens around the return (P -&gt; Q) are redundant, but under this particular interpretation, it's clear that this thing is really just identity, so then this follows: <code>def arrow_elim'' { P Q : Prop } : forall (pimpq : P -&gt; Q), forall p : P, Q := id</code> where the proof itself is just id! (Lean can figure out that this is the identity for (P -&gt; Q), or you could even be explicit and say <code>:= @id (P -&gt; Q)</code>. Furthermore, might be worth noting this is basically Haskell's <code>($) :: (a -&gt; b) -&gt; a -&gt; b</code>, which Lean has too, but I believe it's some baked-in syntax in Lean because of... reasons. (You can't do <code>#check ($)</code> in Lean).<br>\nIn 3.7.5.<br>\na) I would help with <code>todo: give better example</code> but I am not sure what exactly youre trying to demonstrate here :P<br>\nIn 3.10.4.7.<br>\na) altImplication should have implicit P Q<br>\nIn 3.11.<br>\na) It could be perhaps instructive to show that exists can be built from forall and by extension, show dependent pairs / Sigmas, as I believe I saw Pi being mentioned somewhere.</p>",
        "id": 160009944,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1551798242
    },
    {
        "content": "<blockquote>\n<p>I finally had the time to go over 3. Observations are for the most part just nitpicks.<br>\nIn 3.4.(6) is missing?<br>\na) Formalization of <code>false'</code> is simply <code>inductive false' : Prop</code>, then I guess <code>example : false' ↔ false := iff.intro (λcontra : false', contra.cases_on _) (λcontra : false, contra.cases_on _)</code> is pertinent there. <br>\nIn 3.5.6<br>\na) <code>example : true' ↔ true := iff.intro (λh : true', true.intro) (λh : true, true'.intro)</code> could be handy here<br>\nIn 3.6.3.2.<br>\na) I may have missed some previous occurences but it appears that here is the first time you curry a function (<code>sumOfSqaures</code>) - this \"works\" in combination with my previous comment 2.4.5/b<br>\nIn 3.7.4.<br>\na) Hahah, there really appears to be no mp in core Lean;  I guess function application is enough :).  Anyway, in your example you provide two interpretations, written in different styles. You \"missed\" my absolute favourite ones, once again have to do with currying: <code>def arrow_elim' { P Q : Prop } (pimpq: P -&gt; Q) : (P -&gt; Q) := pimpq</code>- note that the parens around the return (P -&gt; Q) are redundant, but under this particular interpretation, it's clear that this thing is really just identity, so then this follows: <code>def arrow_elim'' { P Q : Prop } : forall (pimpq : P -&gt; Q), forall p : P, Q := id</code> where the proof itself is just id! (Lean can figure out that this is the identity for (P -&gt; Q), or you could even be explicit and say <code>:= @id (P -&gt; Q)</code>. Furthermore, might be worth noting this is basically Haskell's <code>($) :: (a -&gt; b) -&gt; a -&gt; b</code>, which Lean has too, but I believe it's some baked-in syntax in Lean because of... reasons. (You can't do <code>#check ($)</code> in Lean).<br>\nIn 3.7.5.<br>\na) I would help with <code>todo: give better example</code> but I am not sure what exactly youre trying to demonstrate here :P<br>\nIn 3.10.4.7.<br>\na) altImplication should have implicit P Q<br>\nIn 3.11.<br>\na) It could be perhaps instructive to show that exists can be built from forall and by extension, show dependent pairs / Sigmas, as I believe I saw Pi being mentioned somewhere.</p>\n</blockquote>\n<p>These are terrific comments. Thank you very much. I'm tied up with another project but will come back to this in a few days. Very much appreciated. Thanks, again. More soon enough. -Kevin</p>",
        "id": 160400257,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1552195297
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 160452374,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1552281452
    }
]