[
    {
        "content": "<p>I can't finish this trivial goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n<span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">classical.some</span> <span class=\"n\">h</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n</code></pre></div>\n<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">classical.some</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">injection</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"c1\">-- error</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The injection tactic doesn't work here, but I don't know how else to solve this.</p>",
        "id": 241394462,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622728904
    },
    {
        "content": "<p>Does <code>rw \\l h', refl</code> work?</p>",
        "id": 241396295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622729670
    },
    {
        "content": "<p>Yeah that works. Unfortunately in my real-world scenario the goal state doesn't show <code>classical.some h</code> (for some <code>h</code>), but instead <code>classical.some _</code>. I think this is messing with the rewriting somehow, so it doesn't work there.</p>",
        "id": 241396964,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622729967
    },
    {
        "content": "<p>Can you share the larger state? It is 'messing' with the rewrite because your proof might contain the term you're rewriting also.</p>",
        "id": 241398068,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622730421
    },
    {
        "content": "<p>Like Eric said in another thread, if you really need to work with such a state, the generalize family of tactics helps. But I think trying to work with classical.some values is an antipattern, you probably care more about the spec that the value</p>",
        "id": 241398240,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622730501
    },
    {
        "content": "<p>Here's an example where the goal state shows <code>classical.some _</code> instead of <code>classical.some h</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">some_lemma</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">some_element</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">some_lemma</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">some_element</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">some_element</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(The lemmas/definitions here are not intended to make any sense.)</p>",
        "id": 244858454,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1625403430
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">some_lemma</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">some_element</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">some_lemma</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">some_element_spec</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">some_element</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">some_lemma</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">some_element</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">set.singleton_eq_singleton_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">some_element_spec</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244859166,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625404549
    },
    {
        "content": "<p>Inlined:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">some_lemma</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">some_element</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">some_lemma</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">some_element</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">set.singleton_eq_singleton_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">some_element</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize_proofs</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">classical.some_spec</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244859217,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625404634
    },
    {
        "content": "<p>Thanks! <code>generalize_proofs</code> was what I needed :)</p>",
        "id": 244859563,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1625405205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/113489-new-members/topic/Injection.20failing/near/241396964\">said</a>:</p>\n<blockquote>\n<p>Yeah that works. Unfortunately in my real-world scenario the goal state doesn't show <code>classical.some h</code> (for some <code>h</code>), but instead <code>classical.some _</code>. I think this is messing with the rewriting somehow, so it doesn't work there.</p>\n</blockquote>\n<p>Lean by default doesn't pretty print proof terms, and instead it writes them as <code>_</code>.  Put this at the top level to override this behavior:<br>\n<code>set_option pp.proofs true</code></p>",
        "id": 245008139,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625559596
    }
]