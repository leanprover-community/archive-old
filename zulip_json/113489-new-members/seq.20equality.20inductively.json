[
    {
        "content": "<p>Is there a way to prove that two <code>seq</code>s are equal by using an inductive approach?<br>\nI have two sequences <code>s</code> and <code>s'</code> of which I know that <code>s.head = s'.head</code>, and I know that each element is determined by its predecessor alone.<br>\nI don't know how to show <code>s = s'</code> from this though.</p>",
        "id": 241133079,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622631367
    },
    {
        "content": "<p>I think using <code>seq.ext</code> and then performing induction on the index might work.</p>",
        "id": 241133337,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622631571
    },
    {
        "content": "<p>Can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 241142714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622637860
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">evens</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">nums</span> <span class=\"o\">:</span> <span class=\"n\">seq</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">nums.head</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">nums.nth</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nums.nth</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">nat.add</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">evens</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">seq.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241172121,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622650445
    },
    {
        "content": "<p>The proof at the bottom is to demonstrate my current approach.</p>",
        "id": 241172172,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622650471
    },
    {
        "content": "<p>This approach works, but you need to use what you know about e and e'.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.seq.seq</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">evens</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">nums</span> <span class=\"o\">:</span> <span class=\"n\">seq</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">nums.head</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">nums.nth</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nums.nth</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">nat.add</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">evens</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">seq.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">e.nums.head</span> <span class=\"bp\">=</span> <span class=\"n\">e'.nums.head</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e.head</span><span class=\"o\">,</span> <span class=\"n\">e'.head</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e.next</span><span class=\"o\">,</span> <span class=\"n\">e'.next</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span>  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 241175758,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622652107
    },
    {
        "content": "<p>I guess what I'm wondering is whether there exists a nice lemma that wraps up this induction approach?</p>",
        "id": 241176406,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622652382
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/seq.coinduction\">docs#seq.coinduction</a></p>",
        "id": 241176987,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622652693
    },
    {
        "content": "<p>(seq is a \"coinductive\" type)</p>",
        "id": 241177032,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622652722
    },
    {
        "content": "<p>it might not be obvious but <code>eq_of_bisim</code> is the general coinduction principle (<code>seq.coinduction</code> only applies when you have an appropriate function <code>fr</code>)</p>",
        "id": 241180213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622654180
    },
    {
        "content": "<p>well, actually for this theorem you probably want to use induction on the index since you have defined things in terms of <code>nth</code> instead of using the destructors <code>head</code> and <code>tail</code></p>",
        "id": 241180484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622654319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/seq.20equality.20inductively/near/241177032\">said</a>:</p>\n<blockquote>\n<p>(seq is a \"coinductive\" type)</p>\n</blockquote>\n<p>What does that mean (for non-mathematicians)/how does it manifest in Lean?<br>\nI looked it up, but didn't understand the difference to inductive types.</p>",
        "id": 241353067,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622702131
    },
    {
        "content": "<p>Trust me, mathematicians don't know anything about conductive types</p>",
        "id": 241353600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622702761
    },
    {
        "content": "<p>I was secretly hoping that the expected explanation from Adam would have been for mathematicians, to get an idea of what they are... <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 241353681,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622702838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/seq.20equality.20inductively/near/241353600\">said</a>:</p>\n<blockquote>\n<p>Trust me, mathematicians don't know anything about conductive types</p>\n</blockquote>\n<p>I can't tell if the misspelling here is a joke...</p>",
        "id": 241357368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622705951
    },
    {
        "content": "<p>My flawed intuition is that inductive types are like colimits while coinductive types are like limits (in the categorical sense). There is a formal definition in terms of a terminal object which you can find on the nlab, which is probably even less helpful. </p>\n<p>In less categorical terms, the defining property of an inductive type is the rule that tells you how to map out of it, while the defining property of a coinductive type tells you how to map into it… I don’t know if that’s helpful at all 😕</p>",
        "id": 241405179,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622733191
    },
    {
        "content": "<p>And of course this is the point of view of a mathematician who doesn’t care about computations. A computer scientist will give you some other description in terms of infinite data and lazy evaluation or something 😉</p>",
        "id": 241406130,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622733567
    },
    {
        "content": "<p>My naive mental picture always was that inductive means \"the smallest type closed under these rules of construction\", while coinductive means \"the largest one\". I don't know if that's entirely right</p>",
        "id": 241432171,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622744645
    }
]