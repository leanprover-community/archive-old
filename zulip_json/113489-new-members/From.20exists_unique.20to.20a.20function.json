[
    {
        "content": "<p>Hello,</p>\n<p>I'm sorry that this question is quite similar to another one that I asked a while ago. I'd like to fix the code below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">basic_general</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">A</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">basic_neq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">A</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">B</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">line_through_points</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">classical.some</span> <span class=\"n\">basic_general</span><span class=\"o\">,</span> <span class=\"c1\">-- this doesn't work</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">basic_neq</span> <span class=\"n\">h</span><span class=\"o\">),</span>  <span class=\"c1\">-- this doesn't work, either</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_through_left</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>  <span class=\"c1\">-- how to prove this? should use classical.some_spec...</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_through_right</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>  <span class=\"c1\">-- how to prove this? should use classical.some_spec...</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_unique</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">A</span> <span class=\"n\">ℓ</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">B</span> <span class=\"n\">ℓ</span> <span class=\"bp\">→</span> <span class=\"n\">ℓ</span> <span class=\"bp\">=</span> <span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Essentially, I have two axioms (or lemmas, whatever) that guarantee the existence of a line through two points. If the points are distinct, then the line is unique. From this I would like to have a function that outputs a line in any case (when the points are equal, it will be one of the possibly infinitely many, I don't care). It is then in <code>line_unique</code> that the hypothesis of the points being different will get used.</p>\n<p>I (think that I) know that <code>by_cases</code> shouldn't be used because I am constructing data, but I don't know how to do it properly. Any hints?</p>\n<p>Thank you.</p>",
        "id": 216638517,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605285988
    },
    {
        "content": "<p>doesn't <code>basic_general</code> need to take <code>h</code>?</p>",
        "id": 216639592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605286430
    },
    {
        "content": "<p>Wait, <code>basic_general</code> is inconsistent</p>",
        "id": 216639808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605286508
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">basic_general</span> <span class=\"n\">unit</span> <span class=\"n\">unit</span> <span class=\"o\">()</span> <span class=\"o\">()</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"k\">in</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 216640015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605286586
    },
    {
        "content": "<p>it seems unlikely that you want <code>p</code> to be a <code>variable</code> here</p>",
        "id": 216640051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605286603
    },
    {
        "content": "<p><code>basic_ne</code> is also inconsistent for a similar reason</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">basic_neq</span> <span class=\"n\">bool</span> <span class=\"n\">unit</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">bool.ff_ne_tt</span> <span class=\"k\">in</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 216640250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605286690
    },
    {
        "content": "<p>A cleaner setup is to first prove a <code>lemma</code> that for any points <code>A B</code>, there is a line through <code>A</code> and <code>B</code></p>",
        "id": 216640289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605286708
    },
    {
        "content": "<p>use <code>classical.some</code> on that to define <code>line_through_points</code>, and <code>classical.some_spec</code> to prove the next two lemmas</p>",
        "id": 216640350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605286743
    },
    {
        "content": "<p>and for the last one you don't care what the definition of <code>line_through_points A B</code> is as long as you know it's also a line through <code>A</code> and <code>B</code></p>",
        "id": 216640387,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605286766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/From.20exists_unique.20to.20a.20function/near/216640051\">said</a>:</p>\n<blockquote>\n<p>it seems unlikely that you want <code>p</code> to be a <code>variable</code> here</p>\n</blockquote>\n<p>Sorry, I wanted a constant there. This is me failing to write a proper MWE...</p>",
        "id": 216647757,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605290004
    },
    {
        "content": "<p>You edited your code above (changing a variable to a constant) so now Mario's observations don't apply, but neither do most of your comments. The first thing that you say doesn't work is easily fixed, the second thing you say doesn't work now works, and the things you say you can't prove now don't even compile.</p>",
        "id": 216649721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605290957
    },
    {
        "content": "<p>I'm working now on  doing what <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> suggested. Just changed it back so now everything still applies...</p>",
        "id": 216650038,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605291100
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 216650204,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605291179
    },
    {
        "content": "<p>When Ali Sever set all this up in Lean he didn't ever need to use a constant.</p>",
        "id": 216650380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605291261
    },
    {
        "content": "<p>Constants and axioms are dangerous.</p>",
        "id": 216650496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605291318
    },
    {
        "content": "<p>Yes, I am trying to set it up so that advanced results can be proved easily. This is the MWE I cooked up to ask the question.</p>",
        "id": 216650512,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605291331
    },
    {
        "content": "<p>I have set it up in a structure (actually a class). The axioms originally were non-constructive, then I thought it would be easier to work with them if they were constructive. But now I think the best is to have them non-construtive, and then have some constructive functions and lemmas.</p>",
        "id": 216650651,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605291385
    },
    {
        "content": "<p>Yeah, Ali used a class. This then somehow reduces the question \"is there actually a model of what you're doing\" to \"can you prove these theorems about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>\"</p>",
        "id": 216650781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605291455
    },
    {
        "content": "<p>I also thought that it would be nice that <code>line_through_points</code> didn't need them to be different (a bit similar to the 1/0 issue). This way, in constructing proofs (a la Euclid) I'd say things like \"take the line throught these two points\", later on I'll see whether I need it to be unique (and use they are different) or not.</p>",
        "id": 216650872,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605291485
    },
    {
        "content": "<p>So far I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n<span class=\"kd\">constant</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">basic_general</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">=</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">A</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">B</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">basic_neq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">A</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">B</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_line_through_points</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">A</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">B</span> <span class=\"n\">ℓ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">basic_general</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">exists_of_exists_unique</span> <span class=\"o\">(</span><span class=\"n\">basic_neq</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">line_through_points</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">exists_line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_through_left</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_through_right</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_unique</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">A</span> <span class=\"n\">ℓ</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">B</span> <span class=\"n\">ℓ</span> <span class=\"bp\">→</span> <span class=\"n\">ℓ</span> <span class=\"bp\">=</span> <span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216651526,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605291787
    },
    {
        "content": "<p>But <code>line_through_left</code> doesn't typecheck, it says it doesn't know how to synthethize placeholder.</p>",
        "id": 216651592,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605291820
    },
    {
        "content": "<p>Do you understand the full error message?</p>",
        "id": 216651764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605291891
    },
    {
        "content": "<p><code>line_through_points A B</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">line_through_points</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">L</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 216651847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605291937
    },
    {
        "content": "<p>Try to be the compiler. The error message is correct.</p>",
        "id": 216651938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605291964
    },
    {
        "content": "<p>To me, line_through_points takes two terms of type Omega and spits out a term of type L.</p>",
        "id": 216652293,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605292144
    },
    {
        "content": "<p>Your axioms are still not correct:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"bp\">@</span><span class=\"n\">basic_general</span> <span class=\"n\">unit</span> <span class=\"n\">empty</span> <span class=\"o\">()</span> <span class=\"o\">()</span> <span class=\"n\">rfl</span> <span class=\"k\">with</span> <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216652384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605292187
    },
    {
        "content": "<p>To Lean, <code>line_through_points</code> takes two types Omega and L, which Lean is supposed to guess because they are in <code>{}</code>s, and then two terms of type Omega (meaning that Lean can easily guess Omega) and then it's supposed to return a term of type L, but you didn't tell Lean what L was, and there's no way it can guess.</p>",
        "id": 216652462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605292206
    },
    {
        "content": "<p>the problem is that <code>p</code> is too general, it quantifies over all possible types</p>",
        "id": 216652573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605292261
    },
    {
        "content": "<p>you probably want Omega and L to be constants too</p>",
        "id": 216652654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605292290
    },
    {
        "content": "<p>I think that <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> are pointing to the same issue: I did a terrible mwe</p>",
        "id": 216652661,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605292293
    },
    {
        "content": "<p>does the real version look like this?</p>",
        "id": 216652713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605292313
    },
    {
        "content": "<p>usually an MWE is made by deleting irrelevant things from the real example, so I wouldn't expect a <code>constant</code> to become a <code>variable</code></p>",
        "id": 216652847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605292349
    },
    {
        "content": "<p>Not at all. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pts</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_pts</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>  <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">p</span> <span class=\"bp\">`</span><span class=\"n\">xor</span><span class=\"bp\">`</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">xor3</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">PreHilbertPlane</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">Line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">belongs</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">between</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n    <span class=\"o\">(</span><span class=\"kd\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`∈`</span> <span class=\"n\">ℓ</span> <span class=\"o\">:=</span> <span class=\"n\">belongs</span> <span class=\"n\">A</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">-- I1: there is a unique line passing through two distinct points.</span>\n    <span class=\"o\">(</span><span class=\"n\">I1'</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">-- I2: any line contains at least two points.</span>\n    <span class=\"o\">(</span><span class=\"n\">I2'</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">-- I3: there exists 3 non-collinear points.</span>\n    <span class=\"o\">(</span><span class=\"n\">I3'</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"o\">))))</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">PreHilbertPlane</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PreHilbertPlane</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"bp\">Ω</span> <span class=\"o\">(</span><span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">belongs</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Line.has_coe</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pts</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_coe_to_mem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">points_between</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">|</span> <span class=\"n\">between</span> <span class=\"n\">A</span> <span class=\"n\">P</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n<span class=\"kd\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`*`</span> <span class=\"n\">B</span> <span class=\"bp\">`*`</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">PreHilbertPlane.between</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span>\n\n<span class=\"c1\">-- Put the axioms in terms of this has_mem</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">I1</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">),</span> <span class=\"o\">(</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">I1'</span> <span class=\"n\">h</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">I2</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">:=</span> <span class=\"n\">I2'</span> <span class=\"n\">ℓ</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">I3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">:=</span> <span class=\"n\">I3'</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">collinear_iff</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">collinear</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">collinear</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">intersect</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parallel</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">intersect</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">r</span> <span class=\"bp\">`||`</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">parallel</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">PreHilbertPlane</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">PreHilbertPlane</span>\n\n<span class=\"sd\">/-- A segment is created by giving two points. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Segment</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`⬝`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">Segment.mk</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Segment</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PreHilbertPlane</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">When thought of as a set, it is the the set consisting of the endpoints</span>\n<span class=\"sd\">and all the points between them</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"bp\">Ω</span> <span class=\"o\">(</span><span class=\"n\">Segment</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">S.A</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">S.B</span> <span class=\"bp\">∨</span> <span class=\"n\">S.A</span> <span class=\"bp\">*</span> <span class=\"n\">P</span> <span class=\"bp\">*</span> <span class=\"n\">S.B</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_coe_to_set</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">Segment</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pts</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_coe_to_mem_pts</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Segment</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">S.A</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">S.B</span> <span class=\"bp\">∨</span> <span class=\"n\">S.A</span> <span class=\"bp\">*</span> <span class=\"n\">P</span> <span class=\"bp\">*</span> <span class=\"n\">S.B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_pts</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Segment</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">S.A</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">S.B</span> <span class=\"bp\">∨</span> <span class=\"n\">S.A</span> <span class=\"bp\">*</span> <span class=\"n\">P</span> <span class=\"bp\">*</span> <span class=\"n\">S.B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Segment</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">Ray</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">):=</span>\n    <span class=\"o\">(</span><span class=\"n\">origin</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`=&gt;`</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">Ray.mk</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Ray</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PreHilbertPlane</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"bp\">Ω</span> <span class=\"o\">(</span><span class=\"n\">Ray</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">r.origin</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">collinear</span> <span class=\"n\">r.origin</span> <span class=\"n\">P</span> <span class=\"n\">r.target</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">r.origin</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">⬝</span><span class=\"n\">r.target</span><span class=\"o\">))⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_coe_to_set</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">Ray</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pts</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_coe_to_mem_pts</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Ray</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n    <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">r.origin</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">collinear</span> <span class=\"n\">r.origin</span> <span class=\"n\">P</span> <span class=\"n\">r.target</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">r.origin</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">⬝</span><span class=\"n\">r.target</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_pts</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Ray</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">r.origin</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">collinear</span> <span class=\"n\">r.origin</span> <span class=\"n\">P</span> <span class=\"n\">r.target</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">r.origin</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">⬝</span><span class=\"n\">r.target</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Ray</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Angle</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`∟`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">Angle.mk</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Angle</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PreHilbertPlane</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nondegenerate</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Angle</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"n\">collinear</span> <span class=\"n\">a.A</span> <span class=\"n\">a.x</span> <span class=\"n\">a.B</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"bp\">Ω</span> <span class=\"o\">(</span><span class=\"n\">Angle</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">a.x</span><span class=\"bp\">=&gt;</span><span class=\"n\">a.A</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">a.x</span><span class=\"bp\">=&gt;</span><span class=\"n\">a.B</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_coe_to_set</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">Angle</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pts</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_coe_to_mem_pts</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Angle</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n    <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">a.x</span><span class=\"bp\">=&gt;</span><span class=\"n\">a.A</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">a.x</span><span class=\"bp\">=&gt;</span><span class=\"n\">a.B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_pts</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Angle</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span>\n    <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">a.x</span><span class=\"bp\">=&gt;</span><span class=\"n\">a.A</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">a.x</span><span class=\"bp\">=&gt;</span><span class=\"n\">a.B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Angle</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HilbertPlane</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">PreHilbertPlane</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Betweenness is symmetric -/</span>\n    <span class=\"o\">(</span><span class=\"n\">B11</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> If A * B * C then the three points are distinct and collinear. -/</span>\n    <span class=\"o\">(</span><span class=\"n\">B12</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"n\">collinear</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Given two distinct points A, B, there is a third point C such that A * B * C.-/</span>\n    <span class=\"o\">(</span><span class=\"n\">B2</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Given 3 distinct collinear points A B C, exactly one of them is between the other two.-/</span>\n    <span class=\"o\">(</span><span class=\"n\">B3</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">collinear</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"n\">xor3</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n\n    <span class=\"o\">(</span><span class=\"n\">B4</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span><span class=\"o\">}</span> <span class=\"c1\">-- Pasch</span>\n        <span class=\"o\">(</span><span class=\"n\">hnc</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">collinear</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">hnAl</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hnBl</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnCl</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">hDl</span><span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hADB</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">D</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n            <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">E</span> <span class=\"o\">,</span>  <span class=\"n\">E</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">E</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"n\">xor</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">E</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)))</span>\n\n    <span class=\"o\">(</span><span class=\"n\">seg_cong</span> <span class=\"o\">:</span> <span class=\"n\">Segment</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Segment</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">notation</span> <span class=\"n\">X</span> <span class=\"bp\">`≅`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">seg_cong</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ang_cong</span> <span class=\"o\">:</span> <span class=\"n\">Angle</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Angle</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">notation</span> <span class=\"n\">X</span> <span class=\"bp\">`≃`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">ang_cong</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n    <span class=\"c\">/-</span><span class=\"cm\"> Given a segment AB and a ray C-&gt;D, there is a unique point E on C-&gt;D such that</span>\n<span class=\"cm\">        AB ≅ CE. -/</span>\n    <span class=\"o\">(</span><span class=\"n\">C1</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Segment</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Ray</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"bp\">∃!</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">S.A</span><span class=\"bp\">⬝</span><span class=\"n\">S.B</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"n\">r.origin</span><span class=\"bp\">⬝</span><span class=\"n\">E</span><span class=\"o\">)))</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Congruence of segments is reverse-transitive -/</span>\n    <span class=\"o\">(</span><span class=\"n\">C21</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">≅</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">≅</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">≅</span> <span class=\"n\">U</span><span class=\"o\">))</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Congruence of segments is reflexive.</span>\n<span class=\"cm\">       Note that this together with C21 implies symmetry of congruence. -/</span>\n    <span class=\"o\">(</span><span class=\"n\">C22</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≅</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Congruence of segments respects the notion of sum of segments -/</span>\n    <span class=\"o\">(</span><span class=\"n\">C3</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">*</span> <span class=\"n\">E</span> <span class=\"bp\">*</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">((</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"n\">D</span><span class=\"bp\">⬝</span><span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">B</span><span class=\"bp\">⬝</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">⬝</span><span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"n\">D</span><span class=\"bp\">⬝</span><span class=\"n\">F</span><span class=\"o\">)))</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Given a nondegenerate angle α, a segment AB, and a point s,</span>\n<span class=\"cm\">       construct a point E on the same side as s, such that ∟EAB ≃ α. -/</span>\n    <span class=\"o\">(</span><span class=\"n\">C4</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Angle</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Ray</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">α.nondegenerate</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">collinear</span> <span class=\"n\">s</span> <span class=\"n\">S.origin</span> <span class=\"n\">S.target</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">S.origin</span> <span class=\"bp\">≠</span> <span class=\"n\">S.target</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"bp\">∃!</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span>\n        <span class=\"o\">(</span><span class=\"bp\">∟</span> <span class=\"n\">E</span> <span class=\"n\">S.origin</span> <span class=\"n\">S.target</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n         <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span><span class=\"o\">),</span> <span class=\"n\">S.origin</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">S.target</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span>\n         <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    (C4spec (α : Angle Point) (S : Ray Point) (s : Point)</span>\n<span class=\"cm\">        (hα : α.nondegenerate) (hs : ¬ collinear s S.origin S.target)</span>\n<span class=\"cm\">        (hr : S.origin ≠ S.target) : (∟ (C4 α S s hα hs hr) S.origin S.target ≃ α) ∧</span>\n<span class=\"cm\">        (∀ (x : Point), ((C4 α S s hα hs hr) * x * s) → ¬ x ∈ line_through hr))</span>\n<span class=\"cm\">    (C4uniq (α : Angle Point) (S : Ray Point) (s : Point) (Z : Point)</span>\n<span class=\"cm\">        (hBAC : α.nondegenerate) (hs : ¬ collinear s S.origin S.target) (hr : S.origin ≠ S.target) :</span>\n<span class=\"cm\">         (∟ Z S.origin S.target ≃ α) →</span>\n<span class=\"cm\">         ((∀ (x : Point), (Z * x * s) → ¬ x ∈ line_through hr)) →</span>\n<span class=\"cm\">         pts (S.origin=&gt;Z) = pts (S.origin=&gt;(C4 α S s hBAC hs hr)))</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Congruence of angles is reverse-transitive.-/</span>\n    <span class=\"o\">(</span><span class=\"n\">C5</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">Angle</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Given triangles T and T', if they have two sides and their middle angle</span>\n<span class=\"cm\">       congruent, then the third sides and the other two angles are also congruent.-/</span>\n    <span class=\"o\">(</span><span class=\"n\">C6</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">A'</span> <span class=\"n\">B'</span> <span class=\"n\">C'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">B</span> <span class=\"bp\">≅</span> <span class=\"n\">A'</span><span class=\"bp\">⬝</span><span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">C</span> <span class=\"bp\">≅</span> <span class=\"n\">A'</span><span class=\"bp\">⬝</span><span class=\"n\">C'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∟</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"bp\">≃</span> <span class=\"bp\">∟</span> <span class=\"n\">B'</span> <span class=\"n\">A'</span> <span class=\"n\">C'</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">⬝</span><span class=\"n\">C</span> <span class=\"bp\">≅</span> <span class=\"n\">B'</span><span class=\"bp\">⬝</span><span class=\"n\">C'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∟</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"bp\">≃</span> <span class=\"bp\">∟</span> <span class=\"n\">A'</span> <span class=\"n\">B'</span> <span class=\"n\">C'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∟</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">B</span> <span class=\"bp\">≃</span> <span class=\"bp\">∟</span> <span class=\"n\">A'</span> <span class=\"n\">C'</span> <span class=\"n\">B'</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">EuclideanPlane</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">HilbertPlane</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">parallel_postulate</span> <span class=\"o\">{</span><span class=\"n\">ℓ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Line</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n        <span class=\"o\">(</span><span class=\"n\">intersect</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">||</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">||</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">HilbertPlane</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">X</span> <span class=\"bp\">`≅`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">HilbertPlane.seg_cong</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n<span class=\"kd\">notation</span> <span class=\"n\">X</span> <span class=\"bp\">`≃`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">HilbertPlane.ang_cong</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">Triangle</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`▵`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">Triangle.mk</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Triangle</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HilbertPlane</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nondegenerate</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Triangle</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"n\">collinear</span> <span class=\"n\">T.A</span> <span class=\"n\">T.B</span> <span class=\"n\">T.C</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">congruent_triangles</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Triangle</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">T.A</span><span class=\"bp\">⬝</span><span class=\"n\">T.B</span> <span class=\"bp\">≅</span> <span class=\"n\">R.A</span><span class=\"bp\">⬝</span><span class=\"n\">R.B</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">T.A</span><span class=\"bp\">⬝</span><span class=\"n\">T.C</span> <span class=\"bp\">≅</span> <span class=\"n\">R.A</span><span class=\"bp\">⬝</span><span class=\"n\">R.C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">T.B</span><span class=\"bp\">⬝</span><span class=\"n\">T.C</span> <span class=\"bp\">≅</span> <span class=\"n\">R.B</span><span class=\"bp\">⬝</span><span class=\"n\">R.C</span><span class=\"o\">)</span>\n    <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∟</span> <span class=\"n\">T.B</span> <span class=\"n\">T.A</span> <span class=\"n\">T.C</span> <span class=\"bp\">≃</span> <span class=\"bp\">∟</span> <span class=\"n\">R.B</span> <span class=\"n\">R.A</span> <span class=\"n\">R.C</span><span class=\"o\">)</span>\n    <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∟</span> <span class=\"n\">T.A</span> <span class=\"n\">T.C</span> <span class=\"n\">T.B</span> <span class=\"bp\">≃</span> <span class=\"bp\">∟</span> <span class=\"n\">R.A</span> <span class=\"n\">R.C</span> <span class=\"n\">R.B</span><span class=\"o\">)</span>\n    <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∟</span> <span class=\"n\">T.C</span> <span class=\"n\">T.B</span> <span class=\"n\">T.A</span> <span class=\"bp\">≃</span> <span class=\"bp\">∟</span> <span class=\"n\">R.C</span> <span class=\"n\">R.B</span> <span class=\"n\">R.A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"bp\">Ω</span> <span class=\"o\">(</span><span class=\"n\">Triangle</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">T.A</span><span class=\"bp\">⬝</span><span class=\"n\">T.B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">T.B</span><span class=\"bp\">⬝</span><span class=\"n\">T.C</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">T.A</span><span class=\"bp\">⬝</span><span class=\"n\">T.C</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_coe_to_set</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">Triangle</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pts</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_coe_to_mem_pts</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Triangle</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n    <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">T.A</span><span class=\"bp\">⬝</span><span class=\"n\">T.B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">T.B</span><span class=\"bp\">⬝</span><span class=\"n\">T.C</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">T.A</span><span class=\"bp\">⬝</span><span class=\"n\">T.C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_pts</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Triangle</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span>\n    <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">T.A</span><span class=\"bp\">⬝</span><span class=\"n\">T.B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">T.B</span><span class=\"bp\">⬝</span><span class=\"n\">T.C</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"o\">(</span><span class=\"n\">T.A</span><span class=\"bp\">⬝</span><span class=\"n\">T.C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Triangle</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">HilbertPlane</span>\n</code></pre></div>",
        "id": 216652887,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605292364
    },
    {
        "content": "<p>So what's the actual question?</p>",
        "id": 216652929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605292387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/From.20exists_unique.20to.20a.20function/near/216652847\">said</a>:</p>\n<blockquote>\n<p>usually an MWE is made by deleting irrelevant things from the real example, so I wouldn't expect a <code>constant</code> to become a <code>variable</code></p>\n</blockquote>\n<p>I guess I was trying to aks a question and provide an example to illustrate, and I messed up.</p>",
        "id": 216652990,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605292415
    },
    {
        "content": "<p>aha, so you should probably delete unneeded fields from the structure and using <code>sorry</code> for the lemmas</p>",
        "id": 216653001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605292420
    },
    {
        "content": "<p>You can change those <code>by refl</code> tactic proofs to <code>iff.rfl</code> term proofs (I remark this in passing while I'm waiting for the question :D )</p>",
        "id": 216653307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605292541
    },
    {
        "content": "<p>(working on this)...</p>",
        "id": 216653311,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605292543
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pts</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_pts</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">pts</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>  <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">PreHilbertPlane</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">Line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">belongs</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">between</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n    <span class=\"o\">(</span><span class=\"kd\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`∈`</span> <span class=\"n\">ℓ</span> <span class=\"o\">:=</span> <span class=\"n\">belongs</span> <span class=\"n\">A</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">-- I1: there is a unique line passing through two distinct points.</span>\n    <span class=\"o\">(</span><span class=\"n\">I1'</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">-- I3: there exists 3 non-collinear points.</span>\n    <span class=\"o\">(</span><span class=\"n\">I3'</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">)</span> <span class=\"o\">))))</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">PreHilbertPlane</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PreHilbertPlane</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"bp\">Ω</span> <span class=\"o\">(</span><span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">belongs</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Line.has_coe</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pts</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_coe_to_mem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"c1\">-- Put the axioms in terms of this has_mem</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">I1</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">),</span> <span class=\"o\">(</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">I1'</span> <span class=\"n\">h</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">I3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">≠</span> <span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">:=</span> <span class=\"n\">I3'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">PreHilbertPlane</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">PreHilbertPlane</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PreHilbertPlane</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ℓ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">I11</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">:=</span> <span class=\"n\">exists_of_exists_unique</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">I12</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAr</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hBr</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAs</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hBs</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">unique_of_exists_unique</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">there_are_two_points</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">I3</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩⟩⟩⟩,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">],</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">line_through_points</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_through_points_left</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_through_points_right</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_unique</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">→</span> <span class=\"n\">ℓ</span> <span class=\"bp\">=</span> <span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The question: I'd like to fill in the sorrys. But after what <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> suggested maybe I can work it out myself!</p>",
        "id": 216654577,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605293049
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_point_ne</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hBC</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">there_are_two_points</span> <span class=\"bp\">Ω</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hBC</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">line_through_points_aux</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span> <span class=\"bp\">//</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">classical.indefinite_description</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_point_ne</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ℓ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">I11</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ℓ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">I11</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">line_through_points</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">line_through_points_aux</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_through_points_left</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">line_through_points_aux</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_through_points_right</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">line_through_points_aux</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_unique</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">→</span> <span class=\"n\">ℓ</span> <span class=\"bp\">=</span> <span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">ab</span> <span class=\"n\">al</span> <span class=\"n\">bl</span><span class=\"o\">,</span> <span class=\"n\">I12</span> <span class=\"n\">ab</span> <span class=\"n\">al</span> <span class=\"n\">bl</span> <span class=\"n\">line_through_points_left</span> <span class=\"n\">line_through_points_right</span>\n</code></pre></div>",
        "id": 216656406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605293793
    },
    {
        "content": "<p>I didn't know about indefinite_description!</p>",
        "id": 216660104,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605295624
    },
    {
        "content": "<p>you can also use <code>classical.choice</code> instead, it's basically the same proof</p>",
        "id": 216661729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605296091
    },
    {
        "content": "<p>to use <code>some</code> and <code>some_spec</code> you would factor the proof a little differently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">line_through_points_aux</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_point_ne</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ℓ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">I11</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ℓ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">I11</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">line_through_points</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">line_through_points_aux</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_through_points_left</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">line_through_points_aux</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_through_points_right</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">line_through_points_aux</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 216661885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605296162
    },
    {
        "content": "<p>How come</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">line_through_points_aux</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span> <span class=\"bp\">//</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">classical.indefinite_description</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_point_ne</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ℓ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">I11</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ℓ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">I11</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is clearly not best practice, making a definition in tactic mode and using eq.rec etc, and yet you don't run into any trouble? The some/some_spec route I completely understand and this would have been the route I would have taken.</p>",
        "id": 216670491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605300331
    },
    {
        "content": "<p>Because you never plan to look at the definition again anyways, just use the information encoded in the type</p>",
        "id": 216671076,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605300609
    },
    {
        "content": "<p>it could be <code>@[irreducible] def</code></p>",
        "id": 216671161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605300659
    },
    {
        "content": "<p>Aah I see! You don't need to use any properties of the term the function produces, other than the fact that its type is its type.</p>",
        "id": 216671362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605300748
    },
    {
        "content": "<p>Here is my solution (the first lemma should be written in a much shorter way, I know). Thanks so much for all the discussion. This is helping me in understanding the differences between Prop and Type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_line_through_points</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"bp\">≠</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">there_are_two_points</span><span class=\"o\">,</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">hCD</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n        <span class=\"n\">by_cases</span> <span class=\"n\">hAC</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">subst</span> <span class=\"n\">hAC</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">D</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">:=</span> <span class=\"n\">I11</span> <span class=\"n\">hCD</span><span class=\"o\">,</span>\n            <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ℓ</span><span class=\"o\">,</span> <span class=\"n\">hAℓ</span><span class=\"o\">,</span> <span class=\"n\">hCℓ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n            <span class=\"n\">use</span> <span class=\"n\">ℓ</span><span class=\"o\">,</span>\n            <span class=\"n\">tauto</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"o\">:=</span> <span class=\"n\">I11</span> <span class=\"n\">hAC</span><span class=\"o\">,</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ℓ</span><span class=\"o\">,</span> <span class=\"n\">hAℓ</span><span class=\"o\">,</span> <span class=\"n\">hCℓ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"n\">ℓ</span><span class=\"o\">,</span>\n        <span class=\"n\">tauto</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">I11</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">line_through_points</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span> <span class=\"o\">:=</span>\n    <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">exists_line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_through_points_left</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n     <span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">exists_line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_through_points_right</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">exists_line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">points_mem_of_line_through_points</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"n\">line_through_points_left</span><span class=\"o\">,</span> <span class=\"n\">line_through_points_right</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">line_unique</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">→</span> <span class=\"n\">ℓ</span> <span class=\"bp\">=</span> <span class=\"n\">line_through_points</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">hAℓ</span> <span class=\"n\">hBℓ</span><span class=\"o\">,</span> <span class=\"n\">unique_of_exists_unique</span> <span class=\"o\">(</span><span class=\"n\">I1</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">hAℓ</span><span class=\"o\">,</span> <span class=\"n\">hBℓ</span><span class=\"o\">⟩</span> <span class=\"n\">points_mem_of_line_through_points</span>\n</code></pre></div>",
        "id": 216721926,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1605350960
    },
    {
        "content": "<p>Maybe you could factor out a lemma that there exists a line through one point for the first</p>",
        "id": 216722449,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605351540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/From.20exists_unique.20to.20a.20function/near/216671362\">said</a>:</p>\n<blockquote>\n<p>Aah I see! You don't need to use any properties of the term the function produces, other than the fact that its type is its type.</p>\n</blockquote>\n<p>Does this mean that you should mark the <code>def</code> a <code>lemma</code>, even though doing so is obviously unusual?</p>",
        "id": 217008571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605623229
    },
    {
        "content": "<p>I don't think this is the case. I think the tactic here works because <code>classical.indefinite_description</code> constructs data out of a <code>p : Line Ω → Prop</code> term and a <code>(h : ∃ x, p x)</code> term, which is the supplied proof. The <code>apply classical.indefinite_description</code> step takes care of inferring the <code>p</code> data, and the rest (the Prop term) can be done via tactics as usual.</p>",
        "id": 217010588,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605624077
    },
    {
        "content": "<p>That's also because that <code>def</code> is equivalent to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">line_through_points_aux</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">ℓ</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"bp\">Ω</span> <span class=\"bp\">//</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℓ</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.indefinite_description</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exists.elim</span> <span class=\"o\">(</span><span class=\"n\">exists_point_ne</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">C</span> <span class=\"n\">hne</span><span class=\"o\">,</span> <span class=\"n\">exists.elim</span> <span class=\"o\">(</span><span class=\"n\">I11</span> <span class=\"n\">hne</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ℓ</span> <span class=\"o\">⟨</span><span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">hC</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">hA</span><span class=\"o\">⟩)))</span>\n    <span class=\"n\">I11</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and my understanding is that <code>subst</code> and <code>obtain</code> are term-friendly.</p>",
        "id": 217018767,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605627521
    }
]