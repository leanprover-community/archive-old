[
    {
        "content": "<p>I'm looking for a hint.  <code>library_search</code> doesn't help.  <code>slim_check</code> doesn't provide a counterexample.  It's not there out of the box in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_ring\">docs#ordered_ring</a> as far as I can see.  <code>ring</code> and <code>norm_cast</code> and <code>simp</code> don't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt0_lt_flip</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223818823,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611502061
    },
    {
        "content": "<p>Try rephrasing it as <code>0 &lt; x</code></p>",
        "id": 223818879,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611502102
    },
    {
        "content": "<p>That doesn't change <code>library_search</code> or <code>ring</code>.   Is <code>a&lt;b</code> different from <code>b&gt;a</code> under the hood?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt0_lt_flip</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223818975,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611502239
    },
    {
        "content": "<p>mathlib tries to avoid using <code>&gt;</code>, so things are almost always written with <code>&lt;</code>. That makes certain tools better at finding relevant things. Why would <code>ring</code> help here? <code>ring</code> is a tactic for shuffling terms of addition and multiplication.</p>",
        "id": 223819082,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611502374
    },
    {
        "content": "<p><code>linarith</code> sounds more likely</p>",
        "id": 223819110,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1611502402
    },
    {
        "content": "<p><code>linarith</code> doesn't work. The proof is something in this zone: <a href=\"https://proofwiki.org/wiki/Real_Number_Ordering_is_Compatible_with_Multiplication/Negative_Factor\">https://proofwiki.org/wiki/Real_Number_Ordering_is_Compatible_with_Multiplication/Negative_Factor</a></p>",
        "id": 223819127,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611502438
    },
    {
        "content": "<p>If that doesn't work, I'd try contraposing to <code>a &lt;  0 → x \\le 0 → 0 \\le a * x</code></p>",
        "id": 223819182,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1611502479
    },
    {
        "content": "<p>In this case <code>linarith</code> on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt0_lt_flip</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>throws an interesting error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Remember this is not integers or reals, it's <code>α</code>.  Maybe I need to make clear that <code>0:α</code>.</p>",
        "id": 223819310,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611502671
    },
    {
        "content": "<p>Adding the ascription for 0 doesn't fix <code>linarith</code>.  If I replace it by <code>sorry</code> the lemma is fine but otherwise with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt0_lt_flip</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I still get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Maybe I don't have enough order in <code>ordered_ring</code> to prove this lemma or <code>linarith</code> assumes more order than <code>ordered_ring</code>?</p>",
        "id": 223819444,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611502816
    },
    {
        "content": "<p><code>linear_ordered_ring</code> is sufficient - not sure if it's true without that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lt0_lt_flip</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_nonneg_of_nonpos_of_nonpos</span> <span class=\"n\">ha.le</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>or directly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lt0_lt_flip</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">pos_of_mul_neg_right</span> <span class=\"n\">hx</span> <span class=\"n\">ha.le</span>\n</code></pre></div>",
        "id": 223819737,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1611503275
    },
    {
        "content": "<p>Nice, I didn't find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pos_of_mul_neg_right\">docs#pos_of_mul_neg_right</a>, instead coming up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt0_lt_flip</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">or.resolve_left</span> <span class=\"o\">(</span><span class=\"n\">mul_neg_iff.mp</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">not_lt_of_lt</span> <span class=\"n\">h.1</span> <span class=\"n\">ha</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 223819794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611503332
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lt0_lt_flip</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(with \\le in <code>ha</code>)</p>",
        "id": 223819817,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1611503381
    },
    {
        "content": "<p>Great, thanks!  Which property of <code>linear_ordered_ring</code> is needed over <code>ordered_ring</code> to make it go?  The extra axioms are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">le_total</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"n\">decidable_le</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">has_le.le</span>\n<span class=\"n\">decidable_eq</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span>\n<span class=\"n\">decidable_lt</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">has_lt.lt</span>\n<span class=\"n\">exists_pair_ne</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>Excluding the decidability that leaves</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">le_total</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"n\">exists_pair_ne</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>So maybe <code>le_total</code> is necessary?  Can you construct an example in some domain that excludes <code>le_total</code> where <code>a&lt;0</code> and <code>a*x &lt; 0</code> and <code>x≤0</code>?  </p>\n<p>Note, for context, this is section 1.3 problem 1C which is about  \"ordered domain\". </p>\n<p><a href=\"user_uploads/3121/2fZzDFkWFtojB6LZaO7RE0Ca/Screenshot-from-2021-01-24-11-17-41.png\">Screenshot-from-2021-01-24-11-17-41.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/3121/2fZzDFkWFtojB6LZaO7RE0Ca/Screenshot-from-2021-01-24-11-17-41.png\" title=\"Screenshot-from-2021-01-24-11-17-41.png\"><img src=\"user_uploads/3121/2fZzDFkWFtojB6LZaO7RE0Ca/Screenshot-from-2021-01-24-11-17-41.png\"></a></div><p>Note that 1A and 1B do not need linear order, just <code>ordered_ring</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_1_a</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"n\">add_lt_add_right</span> <span class=\"n\">h</span> <span class=\"n\">c</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_1_b</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sub_lt_sub_iff_left</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I approximated \"ordered domain\" with <code>integral_domain</code> and <code>ordered_ring</code>.  I should instead have traced down all the properties.   The book defines \"ordered domain\" as </p>\n<p><a href=\"/user_uploads/3121/nqcNB6_pcE1PP3xB9VHwYaBB/Screenshot-from-2021-01-24-11-11-19.png\">Screenshot-from-2021-01-24-11-11-19.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nqcNB6_pcE1PP3xB9VHwYaBB/Screenshot-from-2021-01-24-11-11-19.png\" title=\"Screenshot-from-2021-01-24-11-11-19.png\"><img src=\"/user_uploads/3121/nqcNB6_pcE1PP3xB9VHwYaBB/Screenshot-from-2021-01-24-11-11-19.png\"></a></div><p>with</p>\n<p><a href=\"/user_uploads/3121/xpnNJ_Xs8m33oIvXf21z2qeD/Screenshot-from-2021-01-24-11-12-03.png\">Screenshot-from-2021-01-24-11-12-03.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/xpnNJ_Xs8m33oIvXf21z2qeD/Screenshot-from-2021-01-24-11-12-03.png\" title=\"Screenshot-from-2021-01-24-11-12-03.png\"><img src=\"/user_uploads/3121/xpnNJ_Xs8m33oIvXf21z2qeD/Screenshot-from-2021-01-24-11-12-03.png\"></a></div><p>So implicitly I guess the book was talking about integers and I might have got <code>linear_ordered_ring</code> for free if I'd expressed the lemma for ℤ.   It's more interesting to prove it in a more general setting though.  I don't know if in the world of mathematicians \"ordered domain\" would immediately mean integers or would really mean <code>linear_ordered_ring</code> with <code>integral_domain</code>.</p>",
        "id": 223821193,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611504842
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/lt_trichotomy\">docs#lt_trichotomy</a></p>",
        "id": 223821504,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611505254
    },
    {
        "content": "<p>That requires <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order\">docs#linear_order</a>, which as you can see, has <code>le_total</code></p>",
        "id": 223821525,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611505292
    },
    {
        "content": "<p>I was just trying to think of an example where without <code>le_total</code> it failed.  Probably pairs.  Anyway, here is the proof of exercise 1C which is how this got started.  It's kind of hard, all things considered:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt0_lt_flip</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pos_of_mul_neg_right</span> <span class=\"n\">hx</span> <span class=\"n\">ha.le</span>\n\n<span class=\"c1\">-- 1.3. Properties of Ordered Domains</span>\n\n<span class=\"c1\">-- Exercises for section 1.3</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_1_c</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">a</span><span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">sub_lt_zero.mpr</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sub_lt_zero.1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_sub</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">lt0_lt_flip</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">neg_sub</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">neg_pos.1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sub_lt_zero.1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">sub_pos.2</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_neg_of_neg_of_pos</span> <span class=\"n\">h</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223824551,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611508942
    },
    {
        "content": "<p>FYI <code>linarith</code> won't work because this arithmetic isn't linear</p>",
        "id": 223850333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611542525
    }
]