[
    {
        "content": "<p>I am trying to figure out how decidability works. I have an incomplete picture of this and so am writing various functions to see if I can figure it out.</p>\n<p>My instinct is that any predicate on a fintype should be decidable + computable. Is that correct? For example I wrote:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">decidable_set_of</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>Lean informs me that this is <em>noncomputable</em> because it depends on <em>classical.prop_decidable</em>. But I don't want to give up computability. How can I make this computable?</p>",
        "id": 190853375,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584454674
    },
    {
        "content": "<p>I'm don't care at all about computability so read this with caution, but I don't think knowing finiteness is enough</p>",
        "id": 190853735,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584454834
    },
    {
        "content": "<p>My understanding is probably even worse than Patrick's but if I have two real numbers a and b for which a=b is undecidable then can't I just make a fintype from a and b and now equality is not decidable on this fintype?</p>",
        "id": 190857220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584456243
    },
    {
        "content": "<p>It's not true. This would imply decidability of every Proposition, since for any Proposition <code>P</code>, and a fintype <code>X</code>, <code>λ x : X, P</code> is a predicate on a finite type.</p>",
        "id": 190857349,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584456306
    },
    {
        "content": "<p>Well, maybe not if <code>X</code> is empty but otherwise yes</p>",
        "id": 190859707,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584457202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/fintype.20.2B.20decidability/near/190857220\" title=\"#narrow/stream/113489-new-members/topic/fintype.20.2B.20decidability/near/190857220\">said</a>:</p>\n<blockquote>\n<p>My understanding is probably even worse than Patrick's but if I have two real numbers a and b for which a=b is undecidable then can't I just make a fintype from a and b and now equality is not decidable on this fintype?</p>\n</blockquote>\n<p>But the code I included in my question does type-check! So Lean is telling me that any predicate on a fintype is decidable. My question is why is it not computable.</p>",
        "id": 190861214,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584457746
    },
    {
        "content": "<p>With classical logic every proposition is decidable. You can't computable decide every predicate on a fintype because then you'd be able to computably decide every proposition.</p>",
        "id": 190862062,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584458070
    },
    {
        "content": "<p>Okay. I didn't realize that. I commented out <code>open classical</code> and <code>local attribute prop_decidable</code> from my file. Now the example above does not type-check.</p>",
        "id": 190862747,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584458306
    }
]