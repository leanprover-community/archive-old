[
    {
        "content": "<p>If I write some (silly for example purposes) structure like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">value</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">value</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>where I have a structure with a field and then a proof of something about that field, then I can instantiate that structure via e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"n\">thing</span> <span class=\"bp\">.</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tauto</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>and that will compile. According to <a href=\"https://leanprover.github.io/reference/declarations.html#structures-and-records\">https://leanprover.github.io/reference/declarations.html#structures-and-records</a> I should also be able to set defaults for fields within a structure. Can that default be a tactic somehow? I.e. this does not work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">value</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tauto</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>where I wanted that tactic to be applied when instances are created, saving having to pass it, but I get an interesting type error if I do that and then try <code>#check {thing . value := 12}</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">chess</span><span class=\"bp\">/</span><span class=\"n\">board</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">47</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">Error</span> <span class=\"o\">[</span><span class=\"n\">lean</span><span class=\"o\">]</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"err\">&#39;</span><span class=\"n\">h&#39;</span>  <span class=\"n\">rfl</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"err\">?</span><span class=\"n\">hhas</span> <span class=\"n\">type</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">12</span><span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">12</span>\n</code></pre></div>",
        "id": 209571712,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599687274
    },
    {
        "content": "<p>(in my \"real code\" for transparency, which is here: <a href=\"https://github.com/Julian/lean-across-the-board/blob/main/src/chess/board.lean#L24-L31\">https://github.com/Julian/lean-across-the-board/blob/main/src/chess/board.lean#L24-L31</a>, the thing I wanted to default was <code>dec_trivial</code> rather than <code>tauto</code> in case that's relevant, but the error seems similar)</p>",
        "id": 209571790,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599687325
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">value</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">value</span> <span class=\"bp\">.</span> <span class=\"n\">tauto</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 209571992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599687461
    },
    {
        "content": "<p>hm, that gives me... <code>invalid auto_param, 'tauto' must have type (tactic unit)</code></p>",
        "id": 209572195,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599687594
    },
    {
        "content": "<p>Is <code>tauto</code> imported?</p>",
        "id": 209572822,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599688000
    },
    {
        "content": "<p>The category theory library uses <code>obviously</code>, which for now refers to <code>tidy</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">value</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">value</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 209573134,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599688269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/structure.20default.20for.20proof.20fields/near/209572822\">said</a>:</p>\n<blockquote>\n<p>Is <code>tauto</code> imported?</p>\n</blockquote>\n<p>ah interesting, indeed it wasn't, I didn't realize it was transitively imported by the original place I extracted my code from</p>",
        "id": 209573238,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599688328
    },
    {
        "content": "<p>(I still don't know that I can tell which import imports it? it's not <code>import tactic.tauto</code> seemingly?)</p>",
        "id": 209573272,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599688361
    },
    {
        "content": "<p>The error you're seeing might be that it's <code>tactic.interactive.tauto</code>, since you likely haven't used <code>open</code> for <code>tactic.interactive</code>.</p>",
        "id": 209573284,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599688371
    },
    {
        "content": "<p>But once you solve that, you might run into the issue that <code>tauto</code> is not a <code>tactic unit</code>, it's</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n</code></pre></div>",
        "id": 209573348,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599688418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I'm reading to make sure I understand what <code>tidy</code> means</p>",
        "id": 209573449,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599688468
    },
    {
        "content": "<p>It's just a \"kitchen sink\" tactic which tries <code>simp</code> and <code>ext</code> and <code>induction</code> and...</p>",
        "id": 209573493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599688495
    },
    {
        "content": "<p>It looks like it's basically an (annotation?) for a bunch of stuff that's useful to \"make structures tidy\" when instantiating yeah?</p>",
        "id": 209573497,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599688498
    },
    {
        "content": "<p>got it, cool</p>",
        "id": 209573511,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599688506
    },
    {
        "content": "<p>ok will try <code>obviously</code>.</p>",
        "id": 209573542,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599688537
    },
    {
        "content": "<p>That does the same as <code>tidy</code></p>",
        "id": 209573559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599688551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/structure.20default.20for.20proof.20fields/near/209573559\">said</a>:</p>\n<blockquote>\n<p>That does the same as <code>tidy</code></p>\n</blockquote>\n<p>and which doesn't solve the goal from my silly example seemingly, if I did this correctly</p>",
        "id": 209573682,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599688622
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">value</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">value</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"n\">thing</span> <span class=\"bp\">.</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>that says \"tactic failed, there are unsolved goals\"</p>",
        "id": 209573730,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599688658
    },
    {
        "content": "<p>If you want <code>tauto</code>, it looks like this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_tauto</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tautology</span> <span class=\"n\">tt</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">value</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">value</span> <span class=\"bp\">.</span> <span class=\"n\">my_tauto</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 209573749,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599688678
    },
    {
        "content": "<p>the <code>tt</code> means \"allow classical reasoning.\" Set it to <code>ff</code> if you don't want that</p>",
        "id": 209573848,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599688712
    },
    {
        "content": "<p>interesting</p>",
        "id": 209573876,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599688738
    },
    {
        "content": "<p>For some reason, you cannot use tactics that have optional arguments, which is why I defined <code>my_tauto</code></p>",
        "id": 209573888,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599688748
    },
    {
        "content": "<p>yeah basically that's defining whether it's <code>tauto</code> with or without the <code>!</code>?</p>",
        "id": 209573917,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599688765
    },
    {
        "content": "<p>Yeah.  <code>tactic.interactive.tauto</code> ultimately uses <code>tactic.tautology</code> and passes it <code>tt</code> or <code>ff</code> depending on whether or not a <code>!</code> follows it.</p>",
        "id": 209574041,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599688835
    },
    {
        "content": "<p>got it, thanks. is there a place to read about the <code>auto_param</code> syntax itself y'all just showed me?</p>",
        "id": 209574155,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599688910
    },
    {
        "content": "<p>I don't see it in that reference manual page unless I'm missing it</p>",
        "id": 209574164,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599688918
    },
    {
        "content": "<p>I've only picked it up by osmosis.  I have the same question <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 209574215,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599688935
    },
    {
        "content": "<p>Cool! After \"unwrapping\" <code>dec_trivial</code> this works in my real code too, though I seem to not need <code>meta def</code> since I found a tactic (<code>exact_def_trivial</code>) that I think I get to use directly already.</p>",
        "id": 209575445,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599689862
    },
    {
        "content": "<p>I get a new error now if I try to use record updating though -- when I do <code>{foo with value := 46}</code> I guess the auto_param isn't reevaluated again (i.e. the proof isn't rerun on the new value, it takes the proof from the original record as-is, and type-errors)? Will have to put together a small example there to show what I mean.</p>",
        "id": 209575632,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599689992
    },
    {
        "content": "<p>So if I have this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n<span class=\"kn\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">elements</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">contents</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">contains_elements</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ix</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">contents</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">ix</span> <span class=\"bp\">.</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact_dec_trivial</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">thing</span> <span class=\"bp\">.</span> <span class=\"n\">elements</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">contents</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]]}</span>\n</code></pre></div>\n\n\n<p>then it appears I can happily do <code>#check {t with elements := ![2, 3]}</code> but I cannot do <code>#check {t with contents := ![![1, 1], ![0, 0]]}</code></p>",
        "id": 209578188,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599691853
    },
    {
        "content": "<p>The error being:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"err\">&#39;</span><span class=\"n\">contains_elements&#39;</span>\n  <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">contains_elements</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ix</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">contents</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">ix</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;exact_dec_trivial&quot;</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;tactic&quot;</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ix</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]]</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">ix</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;exact_dec_trivial&quot;</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;tactic&quot;</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>which I guess I interpret as \"the auto_param didn't get re-run again\". Which I guess makes sense retrospectively, but I assume I can't get it to re-run in that situation (as part of defining the structure) can I?</p>",
        "id": 209578311,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599691936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/structure.20default.20for.20proof.20fields/near/209574164\">said</a>:</p>\n<blockquote>\n<p>I don't see it in that reference manual page unless I'm missing it</p>\n</blockquote>\n<p>(again in case anyone searches and finds this thread... I found this :) -- it's covered in <a href=\"https://leanprover.github.io/reference/expressions.html#implicit-arguments\">https://leanprover.github.io/reference/expressions.html#implicit-arguments</a> as the last form there)</p>",
        "id": 212882127,
        "sender_full_name": "Julian Berman",
        "timestamp": 1602282472
    }
]