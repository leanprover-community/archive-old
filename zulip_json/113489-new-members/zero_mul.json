[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_left_neg</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_left_neg</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_left_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197193333,
        "sender_full_name": "Iocta",
        "timestamp": 1589225518
    },
    {
        "content": "<p><em>Mathematics in Lean</em> provides</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">add_left_neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">mul_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">add_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197193474,
        "sender_full_name": "Iocta",
        "timestamp": 1589225563
    },
    {
        "content": "<p>What's your math proof?</p>",
        "id": 197193549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589225599
    },
    {
        "content": "<p>Oh this is a mathematics in Lean question!</p>",
        "id": 197193580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589225613
    },
    {
        "content": "<p>But is R a ring or a comm_ring? I still don't understand at all what you are asking.</p>",
        "id": 197193635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589225639
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_mul&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">zero_mul</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>I'm assuming that this is not the answer.</p>",
        "id": 197193691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589225654
    },
    {
        "content": "<p>I think they want a proof using only the ring axioms in their second post</p>",
        "id": 197193733,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589225681
    },
    {
        "content": "<p>But those are for a comm_ring</p>",
        "id": 197193754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589225694
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathematics_in_lean/blob/0da899df6064a7eb50a7fd49618047d3a3a35963/examples/basic_skills/unnamed_711.lean#L6\">https://github.com/leanprover-community/mathematics_in_lean/blob/0da899df6064a7eb50a7fd49618047d3a3a35963/examples/basic_skills/unnamed_711.lean#L6</a></p>",
        "id": 197193860,
        "sender_full_name": "Iocta",
        "timestamp": 1589225748
    },
    {
        "content": "<p>Let's say we can't assume multiplication is commutative</p>",
        "id": 197194051,
        "sender_full_name": "Iocta",
        "timestamp": 1589225846
    },
    {
        "content": "<p>I second <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>'s question, do you know how to prove this on pen and paper?</p>",
        "id": 197194158,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589225892
    },
    {
        "content": "<p>Oh well, this is a spoiler :-)</p>",
        "id": 197194162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589225895
    },
    {
        "content": "<p>I don't know what the book wants you to do, but for puzzles like this it's usually easier to work out a proof on paper first</p>",
        "id": 197194189,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589225912
    },
    {
        "content": "<p>If not, I think the right answer is \"think about it for five minutes, and if you can't do it, come back for a hint\"</p>",
        "id": 197194192,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589225914
    },
    {
        "content": "<p>because you probably want to be able to actually solve puzzles like this!</p>",
        "id": 197194234,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589225932
    },
    {
        "content": "<p>otherwise you wouldn't be reading a book about doing mathematics</p>",
        "id": 197194253,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589225945
    },
    {
        "content": "<p>ok i'll try that</p>",
        "id": 197194260,
        "sender_full_name": "Iocta",
        "timestamp": 1589225947
    },
    {
        "content": "<p>I keep ending up in a circle. Need a hint.</p>",
        "id": 197198523,
        "sender_full_name": "Iocta",
        "timestamp": 1589227976
    },
    {
        "content": "<p>Hint: think about the equation <code>b * (a + 0) = b * a</code></p>",
        "id": 197202518,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589229966
    },
    {
        "content": "<p>You might end up proving <code>mul_zero</code> with that hint :-)</p>",
        "id": 197213492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589236387
    },
    {
        "content": "<p>Ah, true, though it should then be pretty easy to use the same technique to prove <code>zero_mul</code>. I'll leave the hint as-is</p>",
        "id": 197213669,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589236496
    },
    {
        "content": "<p>got it, thanks</p>",
        "id": 197218686,
        "sender_full_name": "Iocta",
        "timestamp": 1589240018
    },
    {
        "content": "<p>don't leave us hanging, post your Lean code!</p>",
        "id": 197220527,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589241538
    },
    {
        "content": "<p>turns out the book proves <code>mul_zero</code>, and it's easy to adapt.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">zero_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_right_cancel</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197222341,
        "sender_full_name": "Iocta",
        "timestamp": 1589243042
    },
    {
        "content": "<p>not sure I woulda come up with that indirection but that's progress anyway</p>",
        "id": 197222432,
        "sender_full_name": "Iocta",
        "timestamp": 1589243143
    },
    {
        "content": "<p>learning new such \"indirections\" is one of the fun parts of learning math</p>",
        "id": 197222516,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589243218
    },
    {
        "content": "<p>This is just a \"standard trick\" if you like. It's of no use in practice because mathematicians are very fluid about their axioms for a ring; you'd probably find that some said this was an axiom anyway (we care far more about confluent rewriting systems than what the axioms of a ring actually <em>are</em>)</p>",
        "id": 197236966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589263828
    }
]