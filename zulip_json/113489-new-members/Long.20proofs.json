[
    {
        "content": "<p>I need style advice about writing long proofs. <br>\nImagine there is a case disjunction, should one write each of them as a separate lemma? <br>\nPassing all needed variables (but not more), although sometimes that could make a lot of them?<br>\nIn mathlib, it seems that a lot of the initial lemmas have 1-line proofs, but more complicated stuff has rarely more than 20 lines.<br>\n(The proof I'm in already makes more than 100 lines…)</p>",
        "id": 265286080,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639741869
    },
    {
        "content": "<p>Long proofs are rubbish because after you've written 100 lines, you have to wait 5 seconds for the orange bars to go every time you press a key. I tend to factor out as much as possible because of this. An alternative is to finish a subgoal proof, and then comment out the proof and replace it with <code>sorry</code> and then just unsorry everything at the end.</p>",
        "id": 265286241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639742005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/113489-new-members/topic/Long.20proofs/near/265286080\">said</a>:</p>\n<blockquote>\n<p>I need style advice about writing long proofs. </p>\n</blockquote>\n<p>The latest <a href=\"https://leanprover-community.github.io/blog/posts/backstage-with-dillies/\">community blog</a> talks about such.</p>",
        "id": 265286373,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1639742101
    },
    {
        "content": "<p>If you extract a lemma from a long proof, you should spend some time trying to generalize that lemma; after thinking about the generalization, often you find mathlib already has that more general form</p>",
        "id": 265286771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639742403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366057\">Eric Taucher</span> <a href=\"#narrow/stream/113489-new-members/topic/Long.20proofs/near/265286373\">said</a>:</p>\n<blockquote>\n<p>The latest <a href=\"https://leanprover-community.github.io/blog/posts/backstage-with-dillies/\">community blog</a> talks about such.</p>\n</blockquote>\n<p>Ahah! I can now preemptively answer questions.</p>",
        "id": 265288978,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639743999
    },
    {
        "content": "<p>Working with long proofs is perfectly fine if you <code>sorry</code> out long subproofs once they are completed, to keep a reasonable compile time. After the fact, you can try to factor out some lemmas if it makes sense, or if the proof takes too long to compile. I've definitely written proofs of more than 200 lines in mathlib.</p>",
        "id": 265289192,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1639744190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Long.20proofs/near/265286241\">said</a>:</p>\n<blockquote>\n<p>Long proofs are rubbish because after you've written 100 lines, you have to wait 5 seconds for the orange bars to go every time you press a key. I tend to factor out as much as possible because of this.</p>\n</blockquote>\n<p>I like how this technical limitation incentivizes doing things \"right.\" It's very rare that there's some large proof that can't be meaningfully subdivided into useful pieces. Though, I don't like how it makes it harder to write the proof the \"wrong\" way as a prototype (<code>sorry</code> and comment is a good trick -- maybe that should be an editor command where you can select text and have it toggle between <code>text</code> and <code>sorry/-text-/</code>).</p>\n<p>It would be nice if Lean could remember tactic state for each line of a file so that, when you make a change, it continues from the last unchanged line's state. It seems complicated to implement, but not impossible.</p>",
        "id": 265342110,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639766942
    },
    {
        "content": "<p>The easiest way I've found is not to comment lines at all, hopefully if your proof is in <code>{  .. }</code> blocks already you can just do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"gr\">sorry</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">blah</span><span class=\"o\">,</span>\n  <span class=\"n\">HUGE</span> <span class=\"n\">PROOF</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and only have to edit one line at a time</p>",
        "id": 265347001,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639769202
    },
    {
        "content": "<p>That's a great trick</p>",
        "id": 265347141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639769273
    },
    {
        "content": "<p>can you explain what you mean with a fuller example? I don;'t think I get this</p>",
        "id": 265347641,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639769454
    },
    {
        "content": "<p>If you have a <code>{ foo, bar, baz}</code> that is really slow, add <code>sorry;</code> before it to temporarily skip it so you can work on the rest of the proof more quickly</p>",
        "id": 265348044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639769526
    },
    {
        "content": "<p>oh my god, because the <code>;</code> applies to all created subgoals. that's brilliant</p>",
        "id": 265348252,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639769567
    },
    {
        "content": "<p>Right; and <code>sorry</code> creates no subgoals.</p>",
        "id": 265348389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639769593
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 276347165,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1648048008
    }
]