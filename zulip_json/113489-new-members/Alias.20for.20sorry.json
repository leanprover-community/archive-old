[
    {
        "content": "<p>Is it possible to create alias for <code>sorry</code> so that, when I call <code>#print axioms</code> it will list all versions (all different names) of <code>sorry</code> that are (transitively) referenced by the given theorem?</p>",
        "id": 281253992,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1651728418
    },
    {
        "content": "<p>You can add axioms. As a degenerate case you could add <code>axiom sorry2 {a : Sort*} : a</code>, <code>sorry3</code> ... but probably a more sensible thing to do is to turn the <code>lemma</code> you haven't proven yet into an <code>axiom</code> of the same type.</p>",
        "id": 281279428,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651746238
    },
    {
        "content": "<p>Note that <code>sorry</code> itself is a bit special, e.g., it is a tactic too</p>",
        "id": 281279503,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651746273
    },
    {
        "content": "<p><code>sorry</code> is also noisy -- as far as I know you can't make new axioms cause warnings.</p>\n<p>Here's a hack I thought of to let you create a custom sorry that is both noisy (it says \"uses sorry\") and shows up in the axioms list.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">my_sorry_reason</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.my_sorry</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">my_sorry_reason</span> <span class=\"gr\">sorry</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">my_sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- declaration 'baz' uses sorry</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">baz</span>\n<span class=\"c1\">-- my_sorry_reason</span>\n<span class=\"c1\">-- [sorry]</span>\n</code></pre></div>",
        "id": 281310668,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651762711
    }
]