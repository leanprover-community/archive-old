[
    {
        "content": "<p>This doesn't work, even though replacing the two arguments of <code>n.rec_on</code> shows that <code>x₀</code> is expected to be of type <code>α</code> instead of the <code>?m_1 0</code> the error message shows.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">my_rec_error</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">n.rec_on</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  type mismatch at application</span>\n<span class=\"cm\">    n.rec_on x₀</span>\n<span class=\"cm\">  term</span>\n<span class=\"cm\">    x₀</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    α : Type</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    ?m_1 0 : Sort ?</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>On the other hand, replacing <code>x₀</code> by <code>exact x₀</code> works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">my_rec</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">n.rec_on</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Is this is a bug? Or is it the normal thing to happend and I am misunderstanding something?</p>",
        "id": 241808492,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623085556
    },
    {
        "content": "<p>There is a special way to elaborate <code>nat.rec_on</code> so that it works properly, but it is turned off when using projection notation. Try <code>nat.rec_on n x₀ x</code> instead.</p>",
        "id": 241809299,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1623085868
    }
]