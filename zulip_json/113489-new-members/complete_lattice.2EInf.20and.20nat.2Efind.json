[
    {
        "content": "<p>What is the recommended way to prove this <code>sorry</code>? It seems trivial: since there is at least one number that satisfies the argument of <code>nat.find</code>, it means that if <code>nat.find</code> returns <code>0</code>, then the argument must hold for <code>0</code>, but <code>h₁</code> asserts that it doesn't hold; contradiction. But I'm failing to see how <code>nat.find</code> lemmas can easily prove this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Inf</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span> <span class=\"k\">with</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h₄</span> <span class=\"o\">:=</span> <span class=\"n\">h₄</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₄</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The proof already looks excessively long for such a trivial statement. Is there a better way to deal with <code>Inf</code>?</p>",
        "id": 264287874,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639049501
    },
    {
        "content": "<p>By the way, is there a short way to rewrite <code>n ∉ {b : ℕ | ¬f b}</code> to <code>¬¬f n</code>. They are definitionally equal, but the first one looks ugly.</p>",
        "id": 264288152,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639049697
    },
    {
        "content": "<p>Which hypothesis contains <code>n ∉ {b : ℕ | ¬f b}</code>?</p>",
        "id": 264288437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639049880
    },
    {
        "content": "<p><code>h₄</code> after <code>replace h₄ := h₄ n</code></p>",
        "id": 264288535,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639049933
    },
    {
        "content": "<p>You could use <code>Inf_mem</code> to obtain a one line proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"bp\">▸</span> <span class=\"n\">Inf_mem</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"n\">h₁</span>\n</code></pre></div>",
        "id": 264288748,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639050100
    },
    {
        "content": "<p>if you want to do it \"directly\", your first case in the split_ifs can be replaced with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">classical.prop_decidable</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.find_spec</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h₃</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>but <code>Inf_mem</code> is a better approach</p>",
        "id": 264288880,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639050167
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.Inf_eq_zero\">docs#nat.Inf_eq_zero</a> also looked promising, but isn't as fast</p>",
        "id": 264288904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639050192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/complete_lattice.2EInf.20and.20nat.2Efind/near/264287874\">said</a>:</p>\n<blockquote>\n<p>it means that if <code>nat.find</code> returns <code>0</code>, then the argument must hold for <code>0</code></p>\n</blockquote>\n<p><code>nat.find_eq_zero</code> should do this, but I got stuck in decidability hell</p>",
        "id": 264288944,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639050230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/complete_lattice.2EInf.20and.20nat.2Efind/near/264288944\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/complete_lattice.2EInf.20and.20nat.2Efind/near/264287874\">said</a>:</p>\n<blockquote>\n<p>it means that if <code>nat.find</code> returns <code>0</code>, then the argument must hold for <code>0</code></p>\n</blockquote>\n<p><code>nat.find_eq_zero</code> should do this, but I got stuck in decidability hell</p>\n</blockquote>\n<p><code>Inf</code> uses <code>classical.prop_decidable</code></p>",
        "id": 264290015,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639050933
    }
]