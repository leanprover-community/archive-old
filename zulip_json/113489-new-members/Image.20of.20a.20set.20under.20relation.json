[
    {
        "content": "<p>I'm trying to prove that if a set <code>A</code> is a subset of <code>B</code> then the image of <code>A</code> under relation <code>R</code> is a subset of the image of <code>B</code> under relation <code>R</code>.  I've got the code below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subset_image</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">R</span> <span class=\"bp\">''</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">x</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">⟩,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>According to mathlib, this is the notation for the image of a function, so I'm guessing the notation is the same for a relation. My <code>x</code> in this example is assigned <code>U → Prop</code>. Is this assignment correct? Am I using the right notation to prove what I'm looking to prove here? It doesn't feel like the right assignment, but I also wouldn't be able to give a reason that it would be wrong.</p>",
        "id": 272741059,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645482809
    },
    {
        "content": "<p><code>R</code> is a function from U to functions from U to Prop. Hence the image of A is a set in <code>U → Prop</code></p>",
        "id": 272741151,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645482892
    },
    {
        "content": "<p>This is clearly not what you want</p>",
        "id": 272741158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645482900
    },
    {
        "content": "<p>I'm not even sure what you want to state</p>",
        "id": 272741191,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645482953
    },
    {
        "content": "<p>What do you mean by \"image of a set under a relation\"?</p>",
        "id": 272741261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645482984
    },
    {
        "content": "<p>Probably <code>{b | \\exists a, R a b}</code></p>",
        "id": 272741266,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645482988
    },
    {
        "content": "<p>Is it meant to generalize the case where R is the graph of a function?</p>",
        "id": 272741278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645483003
    },
    {
        "content": "<p>You probably want to have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/logic/relation.html\">https://leanprover-community.github.io/mathlib_docs/logic/relation.html</a></p>",
        "id": 272741348,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645483069
    },
    {
        "content": "<p>I'm working through (Elias Zakon's Basic Mathematics)[http://www.trillia.com/dA/zakon-basic-us-one.pdf], so the below problem is page 20 of that book.</p>\n<p>Prove the following: If A ⊆ B, then R[A] ⊆ R[B]</p>\n<p>He uses the phrase 'image of A under a relation R'. Is his terminology and notation not standard?</p>",
        "id": 272741484,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645483195
    },
    {
        "content": "<p>If the notation is unfamiliar, he also gives the below definition</p>\n<p>By definition, R[x] is the set of all R-relatives of x. Hence y ∈ R[x] means that y is an R-relative of x, i.e., that (x, y) ∈ R, which can also be written as<br>\nxRy. Thus the formulas (x, y) ∈ R, xRy and y ∈ R[x] are equivalent.</p>",
        "id": 272741627,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645483299
    },
    {
        "content": "<p>Oh didn't see that link. Let me look at that. Thank you!</p>",
        "id": 272741697,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645483358
    },
    {
        "content": "<p>The thing you wrote above does not correspond to your lean code. Maybe you want to write your own code for the image rather than using <code>R ''</code>, which means something else (namely, the image of a set under a function)</p>",
        "id": 272742182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645483816
    },
    {
        "content": "<p>Yes, that's what I was asking. Thanks very much. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<p>Also, if no one even knows about this thing I'm talking about, it must be unimportant. I'm thinking I should skip these questions.</p>",
        "id": 272742307,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645483927
    },
    {
        "content": "<p>It's good lean practice doing this sort of thing</p>",
        "id": 272742375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645484038
    },
    {
        "content": "<p>In fact you still haven't said what your question means; you only defined <code>R[x]</code> for <code>x : U</code> but in your question you have <code>R[A]</code> for <code>A : set U</code>. You can't do it in Lean until you've explained what the question means.</p>",
        "id": 272742687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645484294
    },
    {
        "content": "<p>Yes, maybe you're right. I have been meaning to learn how to write definitions in Lean. I'd be writing a <code>def</code> right? I was thinking of using the below as an example, but obviously changing the definition to have the notation and content <br>\n (so basically it will only have the same structure as below, but none of the same content) from the example question (taken from Logic and Proof):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">reflexive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Is this the right direction? Would there be anything I could use to get that bracket notation, similar to what's in the practice example?</p>",
        "id": 272742739,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645484376
    },
    {
        "content": "<p>Let's get the definition first, before worrying about the notation. You still haven't told us the mathematical definition.</p>",
        "id": 272742881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645484444
    },
    {
        "content": "<p>Okay, hold on let  me find the definition in the book.</p>",
        "id": 272742906,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645484480
    },
    {
        "content": "<p>Okay, this is the first part, telling us what an R-relative is:</p>\n<p>If R is a relation, and (x, y) ∈ R, then y is called an R-relative of x</p>\n<p>and the second part is here:</p>\n<p>The image of a set A under a relation R (briefly, the R-image of A) is the set of all R-relatives of elements of A.</p>\n<p>so, putting the two together, I think a good definition would be the below:</p>\n<p>{ y  | \\ex x \\in A, R x y} where R is a relation</p>",
        "id": 272743509,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645485018
    },
    {
        "content": "<p>OK then, so it's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- the definition</span>\n<span class=\"kd\">def</span> <span class=\"n\">relation.image</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- notation for the deiinition</span>\n<span class=\"kd\">notation</span> <span class=\"n\">R</span><span class=\"bp\">`</span><span class=\"o\">[[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">A</span><span class=\"bp\">`</span><span class=\"o\">]]</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"o\">:=</span> <span class=\"n\">relation.image</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n\n<span class=\"c1\">-- the API for the definition</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">relation.image_def</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span><span class=\"o\">[[</span><span class=\"n\">A</span><span class=\"o\">]]</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subset_image</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">[[</span><span class=\"n\">A</span><span class=\"o\">]]</span> <span class=\"bp\">⊆</span> <span class=\"n\">R</span><span class=\"o\">[[</span><span class=\"n\">B</span><span class=\"o\">]]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- over to you</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272743623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645485086
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subset_image</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">[[</span><span class=\"n\">A</span><span class=\"o\">]]</span> <span class=\"bp\">⊆</span> <span class=\"n\">R</span><span class=\"o\">[[</span><span class=\"n\">B</span><span class=\"o\">]]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hAB</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.subset_def</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">relation.image_def</span> <span class=\"n\">at</span> <span class=\"n\">hy</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hy</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">hxA</span> <span class=\"n\">hRxy</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">set.subset_def</span> <span class=\"n\">at</span> <span class=\"n\">hAB</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hAB</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hxA</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hRxy</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subset_image'</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">[[</span><span class=\"n\">A</span><span class=\"o\">]]</span> <span class=\"bp\">⊆</span> <span class=\"n\">R</span><span class=\"o\">[[</span><span class=\"n\">B</span><span class=\"o\">]]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">hAB</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hxA</span><span class=\"o\">,</span> <span class=\"n\">hRxy</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hAB</span> <span class=\"n\">hxA</span><span class=\"o\">,</span> <span class=\"n\">hRxy</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 272743821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645485288
    },
    {
        "content": "<p>Wow, that's amazing. Thanks so much. I want to start writing more of my own definitions in the future. I have two questions about this: 1) is there any way to keep these definitions in a different file and them import them like I <code>import data.set</code>? 2) I'm a total beginner. the definition I gave you above sounds right to me, but I'm honestly not sure. Is there any way to verify that my definition captures what the author really had in mind short of asking someone with more experience?</p>",
        "id": 272744030,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645485477
    },
    {
        "content": "<p>The only way to find out what the author had in mind was to read the book written by the author. Note however that based on the context Reid guessed something very close to this about an hour ago.</p>",
        "id": 272744130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645485574
    },
    {
        "content": "<p>Importing definitions -- no problem at all. You can see me doing it in my undergraduate course <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics-2022/blob/14424af6ae5060ad3b00ff3b3da1dda7aecd63ce/src/section02reals/sheet5.lean#L9\">here</a> for example. Did you make a Lean project yet? If so, and if you're putting your files in <code>/src</code>, it should just work. In the example I link to, I am importing <code>src/solutions/section02reals/sheet3.lean</code>.</p>",
        "id": 272744232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645485697
    },
    {
        "content": "<p>Yes, I have a Lean project up and running. I'm trying this now. I named the file <code>relation_image.lean</code> and saved it in <code>src</code> with all my other Lean files. At the top of my working file I have <code>import relation_image.lean</code> I'm getting an error.</p>",
        "id": 272744628,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645486093
    },
    {
        "content": "<p>I'm going to try the full file path and see if that works.</p>",
        "id": 272744666,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645486129
    },
    {
        "content": "<p>Look at my project; I don't use a full path (and it wouldn't work with a full path because <code>/</code> isn't in the search path for imports)</p>",
        "id": 272744685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645486154
    },
    {
        "content": "<p>Yes, I should look at that.</p>",
        "id": 272744702,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645486177
    },
    {
        "content": "<p>I'll do that now</p>",
        "id": 272744705,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645486185
    },
    {
        "content": "<p>Saying \"I'm getting an error\" is really unhelpful. Even if you don't understand the error, you certainly aren't making anyone else's life easier by not saying what the error is. I guess you'd be better off posting a screenshot of your VS Code with the file explorer on the top left open.</p>",
        "id": 272744786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645486232
    },
    {
        "content": "<p>got it. I didn't need the <code>.lean</code> file extension in the import. Thanks!</p>",
        "id": 272744788,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645486236
    },
    {
        "content": "<p>Oh yeah -- <code>import data.set</code> actually means <code>import data.set.default</code> so it was difficult to work out from your example :-)</p>",
        "id": 272744876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645486323
    },
    {
        "content": "<p>I created a definition for the inverse image below. I've realized that there are a few things I'm confused about here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- the definition</span>\n<span class=\"kd\">def</span> <span class=\"n\">relation.image_inverse</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- notation for the deiinition</span>\n<span class=\"kd\">notation</span> <span class=\"n\">R</span><span class=\"bp\">`⁻¹</span><span class=\"o\">[[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">A</span><span class=\"bp\">`</span><span class=\"o\">]]</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"o\">:=</span> <span class=\"n\">relation.image_inverse</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n\n<span class=\"c1\">-- the API for the definition</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">relation.image_inverse_def</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span><span class=\"bp\">⁻¹</span><span class=\"o\">[[</span><span class=\"n\">A</span><span class=\"o\">]]</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I pretty much followed your example exactly for the notation. What does <code>1024</code> mean? I found somewhere that it has something to do with left binding or something, but I don't know what that means. Again for the notation, we set the notation equal to <code>relation.image_inverse R A</code>. I copied this pretty much exactly from your example again, but I can't figure out what the <code>R</code>is doing in there. In the definition, there is only one argument, but it seems like here <code>relation.image_inverse</code> and the original <code>relatino.image</code> take two arguments. Is there any good documentation that explains this?</p>\n<p>Thanks!</p>",
        "id": 273037781,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645667671
    },
    {
        "content": "<p>Your code doesn't compile but I'm assuming that one of the lines you omitted was <code>variable (R : ...)</code> which means \" if the user ever mentions R in a definition or theorem statement, add R as an explicit input\".</p>\n<p>The 1024 is indeed binding power. Remove it and see what breaks. I wrote a <a href=\"https://xenaproject.wordpress.com/2019/01/20/a-word-on-bidmas/\">blog post about it once</a></p>",
        "id": 273049517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645680811
    },
    {
        "content": "<p>Okay, I understand. In this case, the definition was  <code>{ y | ∃ x, x ∈ A ∧ R x y }</code>, which includes <code>R</code>, so we needed it there as an input. I'm experimenting a bit here, below is the full code just for reference. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- the definition</span>\n<span class=\"kd\">def</span> <span class=\"n\">relation.image_inverse</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- notation for the deiinition</span>\n<span class=\"kd\">notation</span> <span class=\"n\">R</span><span class=\"bp\">`⁻¹</span><span class=\"o\">[[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">A</span><span class=\"bp\">`</span><span class=\"o\">]]</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"o\">:=</span> <span class=\"n\">relation.image_inverse</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n\n<span class=\"c1\">-- the API for the definition</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">relation.image_inverse_def</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span><span class=\"bp\">⁻¹</span><span class=\"o\">[[</span><span class=\"n\">A</span><span class=\"o\">]]</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I have <code>variables A B: set U</code>. My thought is that since I have <code>variables A B: set U</code> at the top, I shouldn't need to list <code>A</code> or <code>B</code> as arguments to any def or theorem (and perhaps also lemma) that uses those variables. I have <code>(A : set U)</code> as an argument to <code>relation.image_inverse</code>. When I remove <code>(A : set U)</code> from <code>relation.image_inverse</code>, I get an error at <code>relation.image_inverse_def</code> with the name <code>type mismatch at application relation.image_inverse R</code>. What's going wrong in this case? I'm not sure why <code>A B : set U</code> seems to be treated differently from <code>R</code>.</p>",
        "id": 273090126,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645710185
    },
    {
        "content": "<p>sorry part of my message was cut off, let me edit really quickly</p>",
        "id": 273090275,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645710268
    },
    {
        "content": "<p>Okay, the question is good to go now.</p>",
        "id": 273090874,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645710498
    }
]