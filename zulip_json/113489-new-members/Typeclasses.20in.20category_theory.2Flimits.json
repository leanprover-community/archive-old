[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, while I was thinking about your comment on <a href=\"https://github.com/leanprover-community/mathlib/issues/2083\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2083\">#2083</a> I noticed that I don't understand how the typeclasses in the limits library work. Say I have some concrete category where I can instantiate <code>has_finite_products</code> and <code>has_equalizers</code> explicitly. Now assume that there is some theorem that tells me something about an equalizer, but it requires <code>has_finite_limits</code> for some reason and infers the existence of equalizers from that (for example using <a href=\"https://github.com/leanprover-community/mathlib/issues/2083\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2083\">#2083</a>). If I use this theorem with <code>finite_limits_from_equalizers_and_finite_products</code>, do I get a statement about the nice equalizers I instantiated manually or about those constructed by <code>finite_limits_from_equalizers_and_finite_products</code>?</p>",
        "id": 189766167,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1583393520
    },
    {
        "content": "<p>I'm not exactly sure what you mean, but I suspect a pessimistic answer is appropriate: \"it depends\". Certainly we could end up with non-definitionally equal instances of these typeclasses.</p>",
        "id": 189766293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583393662
    },
    {
        "content": "<p>At the moment, all these typeclasses carry data. To what extent could we actually make them <code>Prop</code>s?</p>",
        "id": 189767055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583394789
    },
    {
        "content": "<p>I guess that would mean an ugly amount of <code>classical.choice</code> all over the place. Which probably means that for all practical purposes the answer to my question is \"No. Don't\".</p>",
        "id": 189767072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583394842
    },
    {
        "content": "<p>Maybe one could make <code>has_equalizers</code> a synonym for <code>\\forall f g, has_limit (parallel_pair f g)</code>?</p>",
        "id": 189767154,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1583394916
    },
    {
        "content": "<p>I'm not sure what you mean. <code>parallel_pair f g</code> isn't a shape</p>",
        "id": 189767244,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583394997
    },
    {
        "content": "<p>Sorry, that was a typo</p>",
        "id": 189767260,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1583395025
    }
]