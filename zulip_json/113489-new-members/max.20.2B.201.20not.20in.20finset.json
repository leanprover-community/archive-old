[
    {
        "content": "<p>I was wondering if someone might be able to give me a hint in proving the admit here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"c1\">-- a computable function to find an element not in a finset.</span>\n<span class=\"kd\">def</span> <span class=\"n\">variant</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">vars</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">vars</span>\n<span class=\"k\">then</span> <span class=\"n\">vars.max'</span> <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">else</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- a proof that the function returns an element not in the finset.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">variant_not_mem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">variant</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">variant</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286689594,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1655614680
    },
    {
        "content": "<p>Or a proof of something equivalent.</p>",
        "id": 286689665,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1655614758
    },
    {
        "content": "<p>I think this may be called generating a fresh variable in substitution.</p>",
        "id": 286689772,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1655614862
    },
    {
        "content": "<p>I would start with <code>contrapose! h</code></p>",
        "id": 286691298,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1655617031
    },
    {
        "content": "<p>I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">infer</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">unexpected</span> <span class=\"n\">bound</span> <span class=\"kd\">variable</span> <span class=\"n\">occurrence</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">s.max'</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span>\n\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 286692119,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1655618201
    },
    {
        "content": "<p>Hmm. And <code>intros h con</code>?</p>",
        "id": 286692688,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1655618982
    },
    {
        "content": "<p>Sorry, no, different error.</p>",
        "id": 286692949,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1655619373
    },
    {
        "content": "<p>That's all I have while I'm not at lean, maybe something with <code>generalize_proofs</code> will work?</p>",
        "id": 286693738,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1655620720
    },
    {
        "content": "<p>This seems to work here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">variant_not_mem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">variant</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">variant</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">con</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">s.le_max'</span> <span class=\"n\">_</span> <span class=\"n\">con</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not_lt</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286694810,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1655622594
    }
]