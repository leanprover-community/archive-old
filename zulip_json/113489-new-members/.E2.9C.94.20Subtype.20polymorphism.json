[
    {
        "content": "<p>It stops working when I name the subtype.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">def</span> <span class=\"n\">sqrt4</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"n\">sqrt4</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">⟩</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"n\">two</span>\n</code></pre></div>\n<p>Did I do anything wrong?</p>",
        "id": 270441019,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643829107
    },
    {
        "content": "<p>When you make a new definition then by default typeclasses (such as has_coe) won't carry over to the new type.<br>\nYou could make <code>@[reducible] def sqrt4</code>, or define a coercion from <code>nat</code> to <code>sqrt4</code> in this case.</p>",
        "id": 270441323,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643829233
    },
    {
        "content": "<p>Works like magic!! Thanks a lot!!!!</p>",
        "id": 270444581,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643830499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 270444725,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643830554
    },
    {
        "content": "<p>We should make the coercion from subtype to parent type a def that people should be able to just invoke ad hoc in s specialized way if they want</p>",
        "id": 270448343,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643832015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Subtype.20polymorphism/near/270448343\">said</a>:</p>\n<blockquote>\n<p>We should make the coercion from subtype to parent type a def that people should be able to just invoke ad hoc in s specialized way if they want</p>\n</blockquote>\n<p>Do you want it to be implicit for all subtypes, without adding <code>@[reducible]</code> to it?</p>",
        "id": 270449000,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643832282
    },
    {
        "content": "<p>I think the whole point of non-reducible subtypes is for when you don't want the user to know that it's a subtype - think of it like <code>class sqrt4 : private subtype&lt;...&gt;</code> in C++.</p>",
        "id": 270464104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643838830
    },
    {
        "content": "<p>The line between <code>semireducible</code> and <code>irreducible</code> blurs the analogy a bit.</p>",
        "id": 270464229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643838882
    }
]