[
    {
        "content": "<p>Hi everyone, I'm trying to prove ∀ x y z : A, x ≠ y → (x ≠ z ∨ y ≠ z) :=, which I believe to be provable.<br>\nReason why this is is because I use implication logical equivalences e.g. P -&gt; Q === !P V Q such that I derived:<br>\nx ≠ y → ¬ (x ≠ z) → y ≠ z ==&gt; x ≠ y → x = z → y ≠ z which is essentially stating:<br>\n\"If x isn't equivalent to y, if x is equivalent to z, then y isn't equivalent to z\", which is a tautology.</p>\n<p>However, I just can't seem to do anything... thank you very much.</p>",
        "id": 259281344,
        "sender_full_name": "Jia Xuan Ng",
        "timestamp": 1635358001
    },
    {
        "content": "<p>do a case split on <code>x = z</code></p>",
        "id": 259281676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635358142
    },
    {
        "content": "<p>the result probably isn't provable constructively</p>",
        "id": 259292198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635362140
    },
    {
        "content": "<p>It's provable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span>\n</code></pre></div>\n<p>(It's probably using non-constructive logic to prove it, if that matters to you.)</p>",
        "id": 259292587,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635362299
    },
    {
        "content": "<p>Oh, the fact you're using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>P</mi><mo>→</mo><mi>Q</mi><mo stretchy=\"false\">)</mo><mo>↔</mo><mi mathvariant=\"normal\">¬</mi><mi>P</mi><mo>∨</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">(P \\to Q) \\leftrightarrow \\neg P \\vee Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↔</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> suggests you're doing classical logic.  Your approach is very close to the end, and you can do a rewrite to substitute <code>z</code> for <code>x</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">imp_iff_not_or</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h'</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 259293494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635362749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.88.80.20x.20y.20z.20.3A.20A.2C.20x.20.E2.89.A0.20y.20.E2.86.92.20.28x.20.E2.89.A0.20z.20.E2.88.A8.20y.20.E2.89.A0.20z.29.20.3A.3D/near/259292587\">said</a>:</p>\n<blockquote>\n<p>It's provable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span>\n</code></pre></div>\n<p>(It's probably using non-constructive logic to prove it, if that matters to you.)</p>\n</blockquote>\n<p>If it is possible to do it intuitionistically(I believe that's the same as constructively?) then I'd prefer to do so! Thank you though!</p>",
        "id": 259309993,
        "sender_full_name": "Jia Xuan Ng",
        "timestamp": 1635370485
    },
    {
        "content": "<p>I doubt it. I doubt \"P implies Q\" can prove \"(not P) or Q\" intuitionistically or constructively or whatever you want to call it, it's goals with an \"or\" in that are precisely the sort of stuff that these weak logics can't do because they don't know which way to go.</p>",
        "id": 259310137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635370562
    },
    {
        "content": "<p>for example P implies P, but for sure you can't deduce \"(not P) or P\" from this constructively, because that's precisely the thing that these people get all excited about</p>",
        "id": 259310251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635370604
    },
    {
        "content": "<p>As a concrete example of a counterexample using complexity classes, P != PSPACE is known but either P != NP or NP != PSPACE would be big news</p>",
        "id": 259310387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635370682
    },
    {
        "content": "<p>and intuitionistic logic has the \"disjunction property\" meaning that if you proved <code>P != NP \\/ NP != PSPACE</code> then the proof could be modified to prove one disjunct or the other</p>",
        "id": 259310562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635370760
    },
    {
        "content": "<p>What's a thing in PSPACE but not P?</p>",
        "id": 259310821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635370908
    },
    {
        "content": "<p>I'm pretty sure P vs PSPACE is open. An example that works would be P, PSPACE and EXP. It is known that P != EXP by the time hierarchy theorem, but I believe P vs PSPACE and PSPACE vs EXP are both open.</p>",
        "id": 259312485,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635371899
    },
    {
        "content": "<p>Examples of EXPTIME-complete problems apparently include \"does this TM halt in k steps?\" and solving certain generalized board games.</p>",
        "id": 259315405,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635373527
    },
    {
        "content": "<p>Ah, sorry I meant EXP not PSPACE</p>",
        "id": 259315945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635373829
    },
    {
        "content": "<p>Hello everyone, I worked on it on my own for a bit and came up with this solution, using raa(abducto ad absurdum); from this I see there are many ways of doing the same thing but please let me know if you find any other ways, thank you all!</p>\n<p>From what I've seen, it seems most members write proofs in a much more concise manner. My professor has only taught us to write it in this way(although I do know there are some other ways to do the same thing). So I hope it doesn't offend that I'm writing my proofs in a different manner :D</p>\n<p>PS: Could anyone tell me how to format lean code on Zulip; or do I just copy in things from an IDE?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">xny</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">raa</span><span class=\"o\">,</span> <span class=\"c1\">-- reducto ad absurdum</span>\n    <span class=\"k\">assume</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">xz</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">yz</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">xny</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">yz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">xz</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Also, I'll attach the theorem of raa below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">raa</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">nnp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">np</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">nnp</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">np</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 259322562,
        "sender_full_name": "Jia Xuan Ng",
        "timestamp": 1635378671
    },
    {
        "content": "<p>Given it looks like you're sticking to a very limited tactic dialect intentionally for pedagogical reasons, my only advice would be to use <code>{}</code> to keep track of multiple goals</p>",
        "id": 259326523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635382004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.88.80.20x.20y.20z.20.3A.20A.2C.20x.20.E2.89.A0.20y.20.E2.86.92.20.28x.20.E2.89.A0.20z.20.E2.88.A8.20y.20.E2.89.A0.20z.29.20.3A.3D/near/259326523\">said</a>:</p>\n<blockquote>\n<p>Given it looks like you're sticking to a very limited tactic dialect intentionally for pedagogical reasons, my only advice would be to use <code>{}</code> to keep track of multiple goals</p>\n</blockquote>\n<p>Yup, I have been doing this.</p>",
        "id": 259433919,
        "sender_full_name": "Jia Xuan Ng",
        "timestamp": 1635446640
    }
]