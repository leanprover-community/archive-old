[
    {
        "content": "<p>Sorry for the long example, I didn't manage to further isolate the problem.<br>\nI get <code>equation compiler failed to prove equation lemma</code> when defining <code>match_lcase</code>, but I don't see what's wrong with this recursion. What's happening?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`&gt;&gt;`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">type.comp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">var</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">σ.comp</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">τ</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"n\">τ</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ρ</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">σ</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">τ</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ρ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">lcase</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">var</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk_const</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">τ</span><span class=\"o\">},</span> <span class=\"n\">lcase</span> <span class=\"n\">x</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk_app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ρ</span> <span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"n\">ρ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">σ.comp</span> <span class=\"n\">τ</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">σ</span><span class=\"o\">},</span>\n    <span class=\"n\">lcase</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">lcase</span> <span class=\"n\">x</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">lcase</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">u.app</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">match_lcase</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">τ</span><span class=\"o\">},</span> <span class=\"n\">lcase</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">τ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">lcase.mk_const</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">τ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">lcase.mk_app</span> <span class=\"n\">lu</span> <span class=\"n\">lv</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">S.app</span> <span class=\"bp\">$</span> <span class=\"n\">match_lcase</span> <span class=\"n\">lu</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"bp\">$</span> <span class=\"n\">match_lcase</span> <span class=\"n\">lv</span>\n</code></pre></div>",
        "id": 227082962,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1613817408
    }
]