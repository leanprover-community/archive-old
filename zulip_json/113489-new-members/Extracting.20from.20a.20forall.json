[
    {
        "content": "<p>Suppose I am given <code>ha: ∀ (n_1 : ℕ)</code>. How do I extract this <code>n_1</code> for my proof? When we are given an existential statement we can uses <code>cases h1 with u hu</code>. Is there an analogous way for forall?</p>",
        "id": 195343892,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1587921750
    },
    {
        "content": "<p>As an example here is my tactic state: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">ge</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">dvd</span> <span class=\"n\">n_1</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n_1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n_1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">a1</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">temp</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</pre></div>",
        "id": 195343910,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1587921804
    },
    {
        "content": "<p>and just in case <code>def dvd (m n: ℕ): Prop := ∃ k, n = m * k</code></p>",
        "id": 195343953,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1587921845
    },
    {
        "content": "<p>forall meant that you get the property for any n_1 whatsoever. You should be feeding it a witness, not the other way around!</p>",
        "id": 195344316,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587922452
    },
    {
        "content": "<p>code is generally preferred to tactic states by people trying to give help, since then we can recreate the tactic state in our own environment and figure out what works</p>",
        "id": 195344341,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587922517
    },
    {
        "content": "<p>So how do I feed in a witness?</p>",
        "id": 195344407,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1587922570
    },
    {
        "content": "<p>it's a function</p>",
        "id": 195344422,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587922598
    },
    {
        "content": "<p>so for example  <code>a.right b : dvd b n → b = 1 ∨ b = n</code></p>",
        "id": 195344465,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587922632
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">dvd</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n<span class=\"n\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dvd</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n<span class=\"n\">def</span> <span class=\"n\">composite</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span><span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">composite_not_prime</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ge</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"o\">(</span> <span class=\"n\">composite</span> <span class=\"n\">n</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n       <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">composite</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">prime</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a1</span> <span class=\"n\">ha1</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">ha1</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n\n <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a1</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">temp</span><span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195344485,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1587922645
    },
    {
        "content": "<p>So how would I use this function in my code above?</p>",
        "id": 195344550,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1587922694
    },
    {
        "content": "<p>I want to use by statement <code>h1</code> in my tactic state previously to show that <code>dvd n b</code> I want to use b as my <code>n_1</code>.</p>",
        "id": 195344596,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1587922758
    },
    {
        "content": "<p>Like I said before, <code>a.right b</code> should be a term whose type is interesting to you</p>",
        "id": 195344662,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587922811
    },
    {
        "content": "<p>you could write e.g. <code>have hb := a.right b,</code></p>",
        "id": 195344681,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587922841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>  Thanks</p>",
        "id": 195344771,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1587922940
    },
    {
        "content": "<p>what's the deal with this ==&gt; arrow? it doesn't compile for me ant I had to replace it with <code>→</code></p>",
        "id": 195344851,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587923057
    },
    {
        "content": "<p>The ASCII version of <code>→</code> should be <code>-&gt;</code>.</p>",
        "id": 195344874,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587923123
    },
    {
        "content": "<p>my bad</p>",
        "id": 195345005,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1587923302
    }
]