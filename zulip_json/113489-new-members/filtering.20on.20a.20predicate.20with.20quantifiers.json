[
    {
        "content": "<p>i'm still working on what i was yesterday, this is the first issue i'm stuck on.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">bitnode</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">indices</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"c1\">--these pointers indicate what it is connected to</span>\n  <span class=\"o\">(</span><span class=\"n\">isconstant</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">considered</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">gatenode</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">valence</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">possib</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span> <span class=\"n\">vector</span> <span class=\"n\">bool</span> <span class=\"n\">valence</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"n\">valence</span><span class=\"o\">))</span> <span class=\"c1\">--the fst of this indicates that the front of consideration has passed the node</span>\n  <span class=\"o\">(</span><span class=\"n\">indices</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">valence</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tables</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">satnet</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"c1\">--make a table listing all the ways that nextbits could be,</span>\n                                                              <span class=\"c1\">--given the last table in s.tablesequence and the gate at index g</span>\n<span class=\"k\">let</span> <span class=\"n\">set</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>  <span class=\"o\">:=</span>\n<span class=\"n\">list.erase_dup</span> <span class=\"o\">(</span><span class=\"n\">list.append</span> <span class=\"n\">s.nextbits</span> <span class=\"o\">((([</span><span class=\"n\">g</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">filter_map</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">s.gts</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x.indices.1</span><span class=\"o\">))</span> <span class=\"o\">)</span>\n<span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">,(</span>\n    <span class=\"k\">let</span>\n    <span class=\"n\">subset</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">list.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"o\">,(</span>        <span class=\"c1\">--why does this fail?</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s.bts</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">d</span>  <span class=\"bp\">∈</span>  <span class=\"o\">([</span><span class=\"n\">nat.sub</span> <span class=\"n\">s.tablesequence.length</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">filter_map</span><span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">s.tablesequence</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head.2</span><span class=\"o\">,</span>\n      <span class=\"n\">list.nth</span> <span class=\"n\">s.bts</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"o\">(([</span><span class=\"n\">g</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">filter_map</span><span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">s.gts</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">head.indices.1</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n      <span class=\"bp\">→</span> <span class=\"n\">list.nth</span> <span class=\"n\">s.bts</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"o\">(([</span><span class=\"n\">nat.sub</span> <span class=\"n\">s.tablesequence.length</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">filter_map</span><span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">s.tablesequence</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head.1</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n      <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">list.nth</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n      <span class=\"o\">)</span> <span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"n\">gatenode.possib</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">s.gts</span> <span class=\"n\">g</span><span class=\"o\">)),</span>\n    <span class=\"n\">expset</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">list.foldr</span> <span class=\"bp\">λ</span><span class=\"n\">z</span><span class=\"o\">,(</span><span class=\"n\">list.concat</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,(</span> <span class=\"n\">list.map</span> <span class=\"bp\">λ</span><span class=\"n\">y</span><span class=\"o\">,(</span><span class=\"n\">list.append</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">prod.snd</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">s.tablesequence</span> <span class=\"o\">(</span><span class=\"n\">nat.sub</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"n\">s.tablesequence</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">subset</span><span class=\"o\">))</span>\n    <span class=\"k\">in</span>\n    <span class=\"n\">list.erase_dup</span> <span class=\"o\">(</span><span class=\"n\">list.transpose</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">prod.snd</span> <span class=\"o\">(</span><span class=\"n\">list.erase_dup</span> <span class=\"o\">(</span> <span class=\"n\">list.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,(</span> <span class=\"o\">(</span><span class=\"n\">list.fst</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">))))</span>\n    <span class=\"n\">list.zip</span> <span class=\"o\">(</span> <span class=\"n\">list.append</span> <span class=\"o\">(</span><span class=\"n\">prod.fst</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">s.tablesequence</span> <span class=\"o\">(</span><span class=\"n\">nat.sub</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"n\">s.tablesequence</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">gatenode.indices</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">s.gts</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"n\">list.transpose</span> <span class=\"o\">(</span><span class=\"n\">list.erase_dup</span> <span class=\"n\">expset</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n  <span class=\"o\">))</span>\n</code></pre></div>",
        "id": 257405570,
        "sender_full_name": "Jared green",
        "timestamp": 1634146321
    },
    {
        "content": "<p>you are missing some imports</p>",
        "id": 257413064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634149266
    },
    {
        "content": "<p>the imports are exactly the same as before. what am i missing?</p>",
        "id": 257415069,
        "sender_full_name": "Jared green",
        "timestamp": 1634149986
    },
    {
        "content": "<p>when making a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> it is good to put all the imports in, instead of making people follow along with the history, especially if you change topics/streams</p>",
        "id": 257415270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634150056
    },
    {
        "content": "<p>Here's some cleanup; the types aren't quite working yet. I don't know how you can write so much code with such a high density of syntax errors... You should address the syntax errors before you continue on to more stuff, or else you will just get uninformative errors from lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.vector.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.prod</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">@[derive inhabited]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">bitnode</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">indices</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"c1\">--these pointers indicate what it is connected to</span>\n  <span class=\"o\">(</span><span class=\"n\">isconstant</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">considered</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[derive inhabited]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">gatenode</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">valence</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">possib</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span> <span class=\"n\">vector</span> <span class=\"n\">bool</span> <span class=\"n\">valence</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"n\">valence</span><span class=\"o\">))</span> <span class=\"c1\">--the fst of this indicates that the front of consideration has passed the node</span>\n  <span class=\"o\">(</span><span class=\"n\">indices</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">valence</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">satnet</span> <span class=\"o\">:=</span>  <span class=\"c1\">--i use an undirected graph representation of a sat instance,</span>\n                     <span class=\"c1\">--implemented as lists with indices as pointers</span>\n<span class=\"n\">mk</span><span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">bts</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bitnode</span><span class=\"o\">)(</span><span class=\"n\">gts</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">gatenode</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nextbits</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">nextgates</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">table</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">tablesequence</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tables</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">satnet</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"c1\">--make a table listing all the ways that nextbits could be,</span>\n                                                              <span class=\"c1\">--given the last table in s.tablesequence and the gate at index g</span>\n<span class=\"k\">let</span> <span class=\"n\">set</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list.erase_dup</span> <span class=\"o\">(</span><span class=\"n\">s.nextbits</span> <span class=\"bp\">++</span> <span class=\"o\">(([</span><span class=\"n\">g</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">filter_map</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">s.gts</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x.indices.1</span><span class=\"o\">))</span>\n<span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span>\n    <span class=\"n\">subset</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"n\">gatenode.possib</span> <span class=\"o\">(</span><span class=\"n\">list.inth</span> <span class=\"n\">s.gts</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s.bts</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">s.tablesequence.inth</span> <span class=\"o\">(</span><span class=\"n\">s.tablesequence.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n         <span class=\"n\">s.bts.inth</span> <span class=\"o\">(</span><span class=\"n\">list.inth</span> <span class=\"o\">(([</span><span class=\"n\">g</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">list.inth</span> <span class=\"n\">s.gts</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">head.indices.1</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n        <span class=\"bp\">→</span>  <span class=\"n\">s.bts.inth</span> <span class=\"o\">(</span><span class=\"n\">list.inth</span> <span class=\"o\">(</span><span class=\"n\">s.tablesequence.inth</span> <span class=\"o\">(</span><span class=\"n\">s.tablesequence.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n        <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">list.inth</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">expset</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">list.foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">list.concat</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"bp\">$</span>\n        <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">s.tablesequence.inth</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"n\">s.tablesequence</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">subset</span>\n    <span class=\"k\">in</span>\n    <span class=\"n\">list.erase_dup</span> <span class=\"o\">(</span><span class=\"n\">list.transpose</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">prod.snd</span> <span class=\"o\">(</span><span class=\"n\">list.erase_dup</span> <span class=\"o\">(</span> <span class=\"n\">list.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,(</span> <span class=\"o\">(</span><span class=\"n\">list.fst</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">))))</span>\n    <span class=\"n\">list.zip</span> <span class=\"o\">(</span> <span class=\"n\">list.append</span> <span class=\"o\">(</span><span class=\"n\">prod.fst</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">s.tablesequence</span> <span class=\"o\">(</span><span class=\"n\">nat.sub</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"n\">s.tablesequence</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">gatenode.indices</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">s.gts</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"n\">list.transpose</span> <span class=\"o\">(</span><span class=\"n\">list.erase_dup</span> <span class=\"n\">expset</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n  <span class=\"o\">))</span>\n</code></pre></div>",
        "id": 257415690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634150216
    },
    {
        "content": "<p>By using <code>@[derive inhabited]</code> on all the types, it means we can use <code>list.inth</code> instead of struggling with <code>list.nth</code> all the time</p>",
        "id": 257415799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634150263
    },
    {
        "content": "<p>Okay, here's a version that works, except for a decidability requirement because you are filtering by a predicate that has an unbounded quantification <code>∀ (b c: ℕ),</code> in it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- make a table listing all the ways that nextbits could be,</span>\n<span class=\"c1\">-- given the last table in s.tablesequence and the gate at index g</span>\n<span class=\"kd\">def</span> <span class=\"n\">tables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">satnet</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">set</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s.nextbits</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">s.gts.inth</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indices.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase_dup</span> <span class=\"k\">in</span>\n<span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">subset</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">((</span><span class=\"n\">s.gts.inth</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">possib.map</span> <span class=\"n\">subtype.val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s.bts</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">s.tablesequence.last'.iget.2</span><span class=\"o\">),</span>\n      <span class=\"n\">s.bts.inth</span> <span class=\"o\">((</span><span class=\"n\">s.gts.inth</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indices.1.inth</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n      <span class=\"bp\">→</span>  <span class=\"n\">s.bts.inth</span> <span class=\"o\">(</span><span class=\"n\">s.tablesequence.last'.iget.1.inth</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n      <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">list.inth</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"c\">/-</span><span class=\"cm\">d-/</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">expset</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">subset.bind</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s.tablesequence.last'.iget.2.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"n\">list.erase_dup</span> <span class=\"bp\">$</span> <span class=\"n\">list.transpose</span> <span class=\"bp\">$</span> <span class=\"n\">list.map</span> <span class=\"n\">prod.snd</span> <span class=\"bp\">$</span> <span class=\"n\">list.erase_dup</span> <span class=\"bp\">$</span>\n  <span class=\"n\">list.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.1</span> <span class=\"bp\">∈</span> <span class=\"n\">set</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n    <span class=\"o\">(</span><span class=\"n\">s.tablesequence.last'.iget.1</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">s.gts.inth</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indices.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zip</span> <span class=\"n\">expset.erase_dup.transpose</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257418381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634151275
    },
    {
        "content": "<p>also the use of <code>d</code> at the <code>sorry</code> is a type error</p>",
        "id": 257418461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634151307
    },
    {
        "content": "<p>why isnt d being used directly there</p>",
        "id": 257419828,
        "sender_full_name": "Jared green",
        "timestamp": 1634151852
    },
    {
        "content": "<p>I commented it out since it's not the right type</p>",
        "id": 257419854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634151868
    },
    {
        "content": "<p>I don't understand the code well enough to suggest a fix</p>",
        "id": 257419894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634151886
    },
    {
        "content": "<p>but <code>d</code> has type <code>list bool</code> and the <code>sorry</code> has type <code>list (list bool)</code></p>",
        "id": 257419985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634151924
    },
    {
        "content": "<p>it could also be that <code>x</code> has the wrong type (it is <code>list bool</code>)</p>",
        "id": 257420054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634151962
    },
    {
        "content": "<p>both x and d should have type list bool</p>",
        "id": 257420152,
        "sender_full_name": "Jared green",
        "timestamp": 1634151994
    },
    {
        "content": "<p>then what does it mean to say <code>d.inth c = x</code>?</p>",
        "id": 257420196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634152012
    },
    {
        "content": "<p>with d being the row of the truth table, c picks out the column</p>",
        "id": 257420380,
        "sender_full_name": "Jared green",
        "timestamp": 1634152085
    },
    {
        "content": "<p>that's a bool</p>",
        "id": 257420397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634152094
    },
    {
        "content": "<p>whats a bool</p>",
        "id": 257420437,
        "sender_full_name": "Jared green",
        "timestamp": 1634152114
    },
    {
        "content": "<p>so why is it being equated to <code>x</code> which is a list bool</p>",
        "id": 257420443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634152115
    },
    {
        "content": "<p><code>d.inth c = x</code> is a type error</p>",
        "id": 257420465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634152126
    },
    {
        "content": "<p>i should have equated it to an element of x</p>",
        "id": 257420738,
        "sender_full_name": "Jared green",
        "timestamp": 1634152234
    },
    {
        "content": "<p>that with the index b</p>",
        "id": 257420877,
        "sender_full_name": "Jared green",
        "timestamp": 1634152301
    },
    {
        "content": "<p>ok, this typechecks</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">satnet</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">set</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s.nextbits</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">s.gts.inth</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indices.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase_dup</span> <span class=\"k\">in</span>\n<span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">subset</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">((</span><span class=\"n\">s.gts.inth</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">possib.map</span> <span class=\"n\">subtype.val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s.bts</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">s.tablesequence.last'.iget.2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">list.length</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n        <span class=\"n\">s.bts.inth</span> <span class=\"o\">((</span><span class=\"n\">s.gts.inth</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indices.1.inth</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span>\n        <span class=\"n\">s.bts.inth</span> <span class=\"o\">(</span><span class=\"n\">s.tablesequence.last'.iget.1.inth</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span>\n        <span class=\"bp\">¬</span> <span class=\"n\">d.inth</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">x.inth</span> <span class=\"n\">b</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">expset</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">subset.bind</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s.tablesequence.last'.iget.2.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"n\">list.erase_dup</span> <span class=\"bp\">$</span> <span class=\"n\">list.transpose</span> <span class=\"bp\">$</span> <span class=\"n\">list.map</span> <span class=\"n\">prod.snd</span> <span class=\"bp\">$</span> <span class=\"n\">list.erase_dup</span> <span class=\"bp\">$</span>\n  <span class=\"n\">list.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.1</span> <span class=\"bp\">∈</span> <span class=\"n\">set</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n    <span class=\"o\">(</span><span class=\"n\">s.tablesequence.last'.iget.1</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">s.gts.inth</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indices.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zip</span> <span class=\"n\">expset.erase_dup.transpose</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Double check the bounds on <code>b</code> and <code>c</code>. There are two equalities of <code>bitnode</code>s here (<code>a</code> is a <code>bitnode</code>), so you have to <code>derive decidable_eq</code> on bitnode to make it work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [inhabited, decidable_eq]</span><span class=\"o\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">bitnode</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">indices</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"c1\">--these pointers indicate what it is connected to</span>\n  <span class=\"o\">(</span><span class=\"n\">isconstant</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">considered</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257421631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634152635
    }
]