[
    {
        "content": "<p>Are there ways to auto search proofs? I'm trying to make something similar to the code below , but I have no idea how to make these verbose ways to create a hetlist simpler to use.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Under</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Under</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Under</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">Under</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Is there some way to write something like [2,\"a\"] and it automatically creates it</span>\n<span class=\"kd\">def</span> <span class=\"n\">hetList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Under</span> <span class=\"o\">[</span><span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Under.nil</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">Under.cons</span> <span class=\"o\">(</span><span class=\"n\">Under.nil</span> <span class=\"s2\">\"a\"</span><span class=\"o\">)]</span>\n\n<span class=\"c1\">-- Or something to search by x \\in xs</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">HetList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span>  <span class=\"n\">HetList</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span>  <span class=\"n\">x</span>  <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span>  <span class=\"n\">HetList</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">HetList</span> <span class=\"n\">xs</span>\n\n<span class=\"c1\">-- It looks really bad :/</span>\n<span class=\"kd\">def</span> <span class=\"n\">httList</span> <span class=\"o\">:</span> <span class=\"n\">HetList</span> <span class=\"o\">[</span><span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n     <span class=\"n\">HetList.cons</span> <span class=\"mi\">2</span>   <span class=\"o\">(</span><span class=\"n\">List.Mem.head</span> <span class=\"n\">Int</span> <span class=\"o\">[</span><span class=\"n\">String</span><span class=\"o\">])</span>\n   <span class=\"bp\">$</span> <span class=\"n\">HetList.cons</span> <span class=\"s2\">\"a\"</span> <span class=\"o\">(</span><span class=\"n\">List.Mem.tail</span> <span class=\"n\">Int</span> <span class=\"bp\">$</span> <span class=\"n\">List.Mem.head</span> <span class=\"n\">String</span> <span class=\"o\">[])</span>\n   <span class=\"bp\">$</span> <span class=\"n\">HetList.nil</span>\n</code></pre></div>",
        "id": 287118036,
        "sender_full_name": "Felipe GS",
        "timestamp": 1655934373
    },
    {
        "content": "<p>What would <code>[1,2]</code> mean for <code>HetList [Int, Int]</code>?</p>",
        "id": 287126284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655940166
    },
    {
        "content": "<p>Because 1 could be either <code>Under.nil 1</code> or <code>Under.cons (Under.nil 1)</code></p>",
        "id": 287126337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655940237
    },
    {
        "content": "<p>So there's no way of making something like that because of the multiple ways to create a value for HetList [Int, Int]?</p>",
        "id": 287193766,
        "sender_full_name": "Felipe GS",
        "timestamp": 1655992566
    },
    {
        "content": "<p>I mean, you could still make something like that, but the problem statement is ambiguous and lean can't read your mind about which interpretation you want</p>",
        "id": 287194331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655992795
    },
    {
        "content": "<p>It could totally just always prefer the earlier items in the list in the cae of ambiguity</p>",
        "id": 287194407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655992811
    },
    {
        "content": "<p>So how can I get lean compiler to do that automatically?</p>",
        "id": 287217273,
        "sender_full_name": "Felipe GS",
        "timestamp": 1656002572
    },
    {
        "content": "<p>I assume this is a Lean4 question? Does <code>by decide</code> work for the proof fields?</p>",
        "id": 287228394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656007967
    }
]