[
    {
        "content": "<p>In the book <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html\">Theorem Proving in Lean</a></p>\n<p>The exercises for associativity</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- associativity of ∧ and ∨</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I am not able to add braces when I prove the above theorems<br>\nMy solution : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">and_assoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Iff.intro</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">And.intro</span>\n          <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">h₁</span><span class=\"o\">))</span>\n          <span class=\"o\">((</span><span class=\"n\">And.intro</span>\n            <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">h₁</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">h₁</span><span class=\"o\">))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">And.intro</span>\n          <span class=\"o\">((</span><span class=\"n\">And.intro</span>\n            <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">h₂</span><span class=\"o\">))))</span>\n          <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">h₂</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>when I check it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">#check</span> <span class=\"n\">and_assoc</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>I get the following message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">and_assoc</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>but it should be ideally</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">and_assoc</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 305267578,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666315031
    },
    {
        "content": "<p>You can add <code>set_option pp.parens true</code> on a new line before the check to ask lean to insert the parentheses in places like this where it chooses not to by default (because and is left associative for lean so the statement isn't ambiguous for lean without)</p>",
        "id": 305269241,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666316548
    },
    {
        "content": "<p>so when I add <code>set_option pp.parens true</code> on a newline before the check I am getting the following message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">option</span> <span class=\"bp\">'</span><span class=\"n\">pp.parens'</span>\n</code></pre></div>",
        "id": 305269815,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666317168
    },
    {
        "content": "<p>Which version of lean are you running?</p>",
        "id": 305322694,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666348602
    },
    {
        "content": "<p>Lean 4</p>",
        "id": 305372476,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666363698
    },
    {
        "content": "<p>Ah I see, then maybe that option doesn't exist in Lean 4 unfortunately. You can use the info-view to click on the expression in vscode to see how the brackets are implicitly placed if that helps</p>",
        "id": 305379188,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666365609
    }
]