[
    {
        "content": "<p>I want to prove this lemma, where F is a Field.  </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">eqor</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"n\">y₂</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"bp\">-</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"bp\">+</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"n\">y₂</span> <span class=\"bp\">∨</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">y₂</span> <span class=\"o\">:=</span>\n   <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> I want to multiply (y₁ + y₂)⁻¹ in a</span>\n<span class=\"cm\">       to y₁ = y₂ -/</span>\n\n   <span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>and my goal is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">y₁</span> <span class=\"n\">y₂</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"bp\">-</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"bp\">+</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"n\">y₂</span> <span class=\"bp\">∨</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">y₂</span>\n</code></pre></div>\n\n\n<p>What I want is to multiply (y₁ + y₂)⁻¹ in a to infer  (y₁ -  y₂) = 0, and similarly, (y₁ + y₂) = 0. How can I do this ?</p>",
        "id": 196967356,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1588988560
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">eqor</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"n\">y₂</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"bp\">-</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"bp\">+</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"n\">y₂</span> <span class=\"bp\">∨</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">y₂</span> <span class=\"o\">:=</span>\n   <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">classical</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y₁</span> <span class=\"bp\">-</span> <span class=\"n\">y₂</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">apply_fun</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"bp\">-</span> <span class=\"n\">y₂</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n   <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196967624,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588988991
    },
    {
        "content": "<p>I guess to make this a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> you need to add</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>?</p>",
        "id": 196967664,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588989003
    },
    {
        "content": "<p>Alex, that looks right to me? why did you delete it?</p>",
        "id": 196967696,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588989077
    },
    {
        "content": "<p>It was in the wrong order, rewriting</p>",
        "id": 196967702,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588989101
    },
    {
        "content": "<p>I deleted nothing, but it was re-formatting (but let me add all the information).</p>",
        "id": 196967745,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1588989142
    },
    {
        "content": "<p>Maybe there is a way to avoid by cases, but this should work</p>",
        "id": 196967754,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588989171
    },
    {
        "content": "<p>I am getting unknown identifier for 'apply_fun'.</p>",
        "id": 196967883,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1588989396
    },
    {
        "content": "<p>Here is my complete source code (if that helps): <a href=\"https://gist.github.com/mukeshtiwari/23a6256f4edd109f6fe820704bc6aa9c\" title=\"https://gist.github.com/mukeshtiwari/23a6256f4edd109f6fe820704bc6aa9c\">https://gist.github.com/mukeshtiwari/23a6256f4edd109f6fe820704bc6aa9c</a></p>",
        "id": 196967896,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1588989460
    },
    {
        "content": "<p>Alex should add <code>import tactic</code> to the beginning of their example</p>",
        "id": 196967900,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588989474
    },
    {
        "content": "<p>Mukesh, instead of linking your whole source code, you should make a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 196967943,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588989498
    },
    {
        "content": "<p>(if you click on the link, the community definition of mwe will appear)</p>",
        "id": 196967952,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588989523
    },
    {
        "content": "<p>Here's another proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"c1\">-- [decidable_eq F]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eqor</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"n\">y₂</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"bp\">-</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"bp\">+</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"n\">y₂</span> <span class=\"bp\">∨</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">y₂</span> <span class=\"o\">:=</span>\n   <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">add_eq_zero_iff_eq_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> I want to multiply (y₁ + y₂)⁻¹ in a</span>\n<span class=\"cm\">       to y₁ = y₂ -/</span>\n   <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196967964,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588989567
    },
    {
        "content": "<p>Bryan's proof is nicer, but I guess the answer to Mukesh's original question is <code>apply_fun</code></p>",
        "id": 196968085,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588989726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239476\">@Mukesh Tiwari</span> , <code>apply_fun</code> is provided by <code>import tactic</code> or if you want to be conservative, <code>import tactic.apply_fun</code></p>",
        "id": 196968092,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588989752
    },
    {
        "content": "<p>Thank you very much every one.  I wanted to know how apply (or rewrite in a hypothesis). In Coq, I can simply apply f in H or rewrite H1 in H2. So, both answers are very helpful.</p>",
        "id": 196968112,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1588989811
    },
    {
        "content": "<p>Yeah, for some reason, the preposition we use in lean is <code>at</code>, not <code>in</code>.</p>",
        "id": 196968181,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588989899
    },
    {
        "content": "<p>If you run through the natural number game, you'd probably pick up several of these \"Coq translations\" pretty quickly</p>",
        "id": 196968237,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588989966
    },
    {
        "content": "<p><a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" title=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a></p>",
        "id": 196968246,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588989978
    }
]