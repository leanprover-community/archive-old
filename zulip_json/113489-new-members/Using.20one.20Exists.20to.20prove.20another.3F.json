[
    {
        "content": "<p>This came up in my attempt at the first codewars Lean problem. I want to show that the inductive definition for divisibility by 3 (<code>mult_3</code>) implies that the number can also be written as a multiple of 3. I'm getting stuck at the end of my <code>p_eq_3n</code> proof. I want to extract a <code>k</code> from <code>h</code>, and then use <code>k+3</code> on my goal state, and I saw another post suggest using <code>classical.some</code>, but then my goal state doesn't seem responsive to <code>rfl</code>. Am I misusing <code>classical.some</code>? Is there another way to do this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">mult_3</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">mult_3_O</span> <span class=\"o\">:</span>\n    <span class=\"n\">mult_3</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">mult_3_SSS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">mult_3</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n    <span class=\"n\">mult_3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">p_eq_3n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mult_3</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">mult_3</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193538068,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586494215
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 193538126,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586494351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20one.20Exists.20to.20prove.20another.3F/near/193538126\" title=\"#narrow/stream/113489-new-members/topic/Using.20one.20Exists.20to.20prove.20another.3F/near/193538126\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n</pre></div>\n\n\n</blockquote>\n<p>Thank you!</p>",
        "id": 193538875,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586495648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261068\">@ROCKY KAMEN-RUBIO</span> Welcome to Codewars! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 193539608,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586496912
    }
]