[
    {
        "content": "<p>My first original result proved in Lean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">\\</span><span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">::</span> <span class=\"mi\">1</span> <span class=\"o\">::</span> <span class=\"mi\">0</span> <span class=\"o\">::</span> <span class=\"n\">list.nil</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">right</span><span class=\"o\">,</span>\n   <span class=\"n\">right</span><span class=\"o\">,</span>\n   <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265819147,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640188079
    },
    {
        "content": "<p>Welcome!</p>",
        "id": 265820200,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640188629
    },
    {
        "content": "<p>Can you get the proof to a single line?</p>",
        "id": 265822738,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640189889
    },
    {
        "content": "<p>Hint: the computer can compute whether or not a given natural is in a list of naturals ;)</p>",
        "id": 265822770,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640189917
    },
    {
        "content": "<p>What I'd really like to understand is how to write this without tactics.  Or, more generally, I confess I don't exactly understand what <code>right</code> and <code>left</code> are doing, from the internal point of view.  I gather that they <code>apply</code> the first and second constructors of an inductive type.  But what is the inductive type under consideration here?  I'm trying to read the source code for the <code>list</code> type but I can't match things up.</p>",
        "id": 265825261,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640191336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462625\">Jeremy Teitelbaum</span> <a href=\"#narrow/stream/113489-new-members/topic/My.20first.20original.20result/near/265825261\">said</a>:</p>\n<blockquote>\n<p>What I'd really like to understand is how to write this without tactics.  Or, more generally, I confess I don't exactly understand what <code>right</code> and <code>left</code> are doing, from the internal point of view.  I gather that they <code>apply</code> the first and second constructors of an inductive type.  But what is the inductive type under consideration here?  I'm trying to read the source code for the <code>list</code> type but I can't match things up.</p>\n</blockquote>\n<p>You can use the <code>#print</code> command to inspect the term that was constructed by a begin-end block:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">my_theorem</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">::</span> <span class=\"mi\">1</span> <span class=\"o\">::</span> <span class=\"mi\">0</span> <span class=\"o\">::</span> <span class=\"n\">list.nil</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">right</span><span class=\"o\">,</span>\n   <span class=\"n\">right</span><span class=\"o\">,</span>\n   <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">my_theorem</span>\n<span class=\"c1\">--theorem my_theorem : 0 ∈ [2, 1, 0] :=  or.inr (or.inr (or.inl (eq.refl 0)))</span>\n</code></pre></div>",
        "id": 265825464,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640191459
    },
    {
        "content": "<p><code>left</code> and <code>right</code> are tactics that you can use when you want to prove a disjunction of two props <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>∨</mo><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">p \\vee q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.75em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span>. If the goal is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>∨</mo><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">p \\vee q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.75em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span>, then left will replace the goal with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> and right will replace the goal with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span>.</p>",
        "id": 265825481,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640191470
    },
    {
        "content": "<p>The <code>has_mem</code> instance for a list is defined recursively so that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>:</mo><mo>:</mo><mi>a</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x \\in (a :: as)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">::</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">x = a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>a</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">x \\in as</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span></span></span></span>, and this is why <code>left</code> and/or <code>right</code> work for such a goal.</p>",
        "id": 265825568,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640191536
    },
    {
        "content": "<p>(the base case <code>x \\in list.nil</code> is defined to be false.)</p>",
        "id": 265825600,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640191558
    },
    {
        "content": "<p>Jeremy, do you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#show_term\">tactic#show_term</a>?</p>",
        "id": 265825727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640191621
    },
    {
        "content": "<p>The process by which <code>0 \\in [0,1,2]</code> gets converted to <code>0=0 \\or 0\\in [1,2]</code> seems like utter magic.</p>",
        "id": 265825742,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640191629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462625\">Jeremy Teitelbaum</span> <a href=\"#narrow/stream/113489-new-members/topic/My.20first.20original.20result/near/265825742\">said</a>:</p>\n<blockquote>\n<p>The process by which <code>0 \\in [0,1,2]</code> gets converted to <code>0=0 \\or 0\\in [1,2]</code> seems like utter magic.</p>\n</blockquote>\n<p>That comes from the definition of <code>list.mem</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>From this definition we can deduce that <code>0 \\in [0,1,2]</code> (which is syntactic sugar for <code>list.mem 0 [0, 1, 2]</code>) means the same as <code>0 = 0 ∨ list.mem 0 [1, 2]</code>.</p>",
        "id": 265825900,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640191716
    },
    {
        "content": "<p>Jeremy, there is this weird non-mathematical concept called definitional equality.</p>",
        "id": 265826056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640191808
    },
    {
        "content": "<p>For example x+0=x is definitionally true, but 0+x=x is not, you need to prove it by induction.</p>",
        "id": 265826117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640191844
    },
    {
        "content": "<p>Yes, I see that.  But I can't find this syntax for definition of a function in the manual. (probably just dumb).  I can infer its meaning, but what language mechanism takes a statement like <code>list.mem 0 [0,1,2]</code>, which I gather is a proposition, and rewrites it as the appropriate <code>\\or</code> taking into account that <code>[0,1,2]</code> is not null?</p>",
        "id": 265826118,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640191844
    },
    {
        "content": "<p>You don't need manuals, you just right click on what you want to see the definition of</p>",
        "id": 265826219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640191902
    },
    {
        "content": "<p><code>#check list.mem</code>, right click, see what the definitional equalities are</p>",
        "id": 265826318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640191943
    },
    {
        "content": "<p>or <code>unfold list.mem</code> in tactic mode</p>",
        "id": 265826356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640191967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462625\">Jeremy Teitelbaum</span> <a href=\"#narrow/stream/113489-new-members/topic/My.20first.20original.20result/near/265826118\">said</a>:</p>\n<blockquote>\n<p>Yes, I see that.  But I can't find this syntax for definition of a function in the manual. (probably just dumb).  I can infer its meaning, but what language mechanism takes a statement like <code>list.mem 0 [0,1,2]</code>, which I gather is a proposition, and rewrites it as the appropriate <code>\\or</code> taking into account that <code>[0,1,2]</code> is not null?</p>\n</blockquote>\n<p>For the syntax, cf. <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#pattern-matching\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#pattern-matching</a></p>",
        "id": 265826375,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640191977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/113489-new-members/topic/My.20first.20original.20result/near/265826375\">said</a>:</p>\n<blockquote>\n<p>For the syntax, cf. <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#pattern-matching\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#pattern-matching</a></p>\n</blockquote>\n<p>Aha.  I am still trying to make sense of the discussion of inductive types in chapter 7.  I will press on. Thanks!</p>",
        "id": 265826545,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640192061
    },
    {
        "content": "<p>The definition of <code>list.mem</code>says that <code>a \\in []</code> is defined to be <code>false</code> and <code>a \\in b :: l</code> is defined to be <code>a = b \\or a \\in l</code></p>",
        "id": 265826980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640192320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462625\">Jeremy Teitelbaum</span> <a href=\"#narrow/stream/113489-new-members/topic/My.20first.20original.20result/near/265825261\">said</a>:</p>\n<blockquote>\n<p>What I'd really like to understand is how to write this without tactics.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lem</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">of_as_true</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 265827095,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1640192401
    },
    {
        "content": "<p>you just keep unwinding the definitions and at each point you observe that there is an algorithm to determine whether the proposition is true or not, so you just keep applying the algorithm.</p>",
        "id": 265827329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640192474
    },
    {
        "content": "<p>equality is decidable for concrete naturals, and if P and Q are decidable then P or Q is decidable (because you just decide them both and see if either are true)</p>",
        "id": 265827398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640192513
    }
]