[
    {
        "content": "<p>I think I found a good solution! :D<br>\nSo at first I tried to define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ancestor add_equiv]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">add_equiv_with_structure</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">N</span><span class=\"o\">)</span>  <span class=\"kd\">extends</span> <span class=\"n\">M</span> <span class=\"bp\">≃+</span> <span class=\"n\">N</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">≃+'</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">add_equiv_with_structure</span>\n</code></pre></div>\n<p>So then I could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">≃+'</span> <span class=\"n\">convert_g₀_into_g_op</span> <span class=\"o\">(</span><span class=\"n\">convert_g_into_g₀_op</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where I actually feed in the group <code>g</code>, instead of <code>S ≃+ R</code> like with normal equivalence.</p>",
        "id": 257464180,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634174180
    },
    {
        "content": "<p>But, this didn't work: because I was feeding in an <code>add_group S</code>, instead of a <code>has_mul S</code>, everything yelled at me. It wasn't automatically building stuff from context, so I had to done a bunch of manual casting, and it was pretty awful</p>",
        "id": 257464238,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634174224
    },
    {
        "content": "<p>I could have written</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">add_equiv_with_structure</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n   <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">N</span><span class=\"o\">]</span>  <span class=\"kd\">extends</span> <span class=\"n\">M</span> <span class=\"bp\">≃+</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>and that would work, but that's hardly elegant since then my <code>add_equiv_with_structure</code> would _require_ its arguments to be <code>add_group</code>s and not, say, monoids or rings</p>",
        "id": 257464341,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634174295
    },
    {
        "content": "<p>This does the trick nicely though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ancestor add_equiv]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">add_equiv_with_structure</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">child</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">cM</span> <span class=\"o\">:</span> <span class=\"n\">child</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cN</span> <span class=\"o\">:</span> <span class=\"n\">child</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">N</span><span class=\"o\">]</span>  <span class=\"kd\">extends</span> <span class=\"n\">M</span> <span class=\"bp\">≃+</span> <span class=\"n\">N</span>\n</code></pre></div>",
        "id": 257464368,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634174323
    },
    {
        "content": "<p>Then I actually just write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">group_gzero_mul_iso</span> <span class=\"o\">[</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">S</span><span class=\"o\">]:</span> <span class=\"n\">g</span> <span class=\"bp\">≃+'</span> <span class=\"n\">convert_g₀_into_g_op</span> <span class=\"o\">(</span><span class=\"n\">convert_g_into_g₀_op</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and that works! :D Now to actually do this for my squags and sloops, and then actually write out the proof</p>",
        "id": 257464428,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634174375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 257464439,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634174385
    },
    {
        "content": "<p>Before you go on, I suggest you rethink a bit of your design. <code>convert_g_into_g₀_op</code> looks like a bad idea. Instead, you should define type synonyms, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">as_squag</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">sloop</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">squaq</span> <span class=\"o\">(</span><span class=\"n\">as_squag</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 257464684,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634174557
    },
    {
        "content": "<p>Oh, that does seem like a cleaner way to do things. Good idea.</p>",
        "id": 257464742,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634174618
    },
    {
        "content": "<p>Later you will construct things like <code>sloop_equiv S (as_sloop (as_squag S))</code>.</p>",
        "id": 257464760,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634174636
    },
    {
        "content": "<p>Yes, okay, that does seem better then. Thanks!</p>",
        "id": 257464855,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634174693
    },
    {
        "content": "<p>It's usually a good idea to make <code>as_squag</code> irreducible as early as possible, to avoid \"leakage\". This may necessitate having functions like <code>to_squag {S : Type} (s : S) : as_squag S := s</code></p>",
        "id": 257464892,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634174726
    },
    {
        "content": "<p>(i.e. thinking of an element of a sloop as an element of the same type, but now thought of as a squag.)</p>",
        "id": 257464920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634174750
    },
    {
        "content": "<p>Alex, your \"does the trick nicely\" version may not be a good idea, as it ends up passing in two possibly-different has_add instances on the same type, only one of which will be used in the equiv.</p>",
        "id": 257494597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634198309
    },
    {
        "content": "<p>I'm going with the <code>to_squag</code> and <code>to_sloop</code> method. That's working out alright. Thanks!</p>",
        "id": 257748292,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634324660
    }
]