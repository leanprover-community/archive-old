[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>1) How do I say this without the <code>\\forall</code>?  2) What is the name of this lemma?</p>",
        "id": 201917297,
        "sender_full_name": "Iocta",
        "timestamp": 1593042192
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">library_search</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201917671,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593042497
    },
    {
        "content": "<p>putting things to the left of the binder makes them arguments</p>",
        "id": 201917686,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593042517
    },
    {
        "content": "<p>in this case, you've stated the lemma in a way that's very similar to how it's stated in the library, so <code>library_search</code> finds the name for you</p>",
        "id": 201917708,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593042546
    },
    {
        "content": "<p>Thanks</p>",
        "id": 201917832,
        "sender_full_name": "Iocta",
        "timestamp": 1593042655
    },
    {
        "content": "<p>it sounds dumb, but it's actually pretty efficient to <em>guess</em> the name of this lemma using autocomplete</p>",
        "id": 201917946,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593042742
    },
    {
        "content": "<p>How come I can't</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 201917956,
        "sender_full_name": "Iocta",
        "timestamp": 1593042751
    },
    {
        "content": "<p>you have two binders</p>",
        "id": 201917967,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593042769
    },
    {
        "content": "<p><code>:</code> is not a synonym for <code>→</code></p>",
        "id": 201917991,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593042799
    },
    {
        "content": "<p>this should work</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 201918080,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593042853
    },
    {
        "content": "<p>hypotheses to the left of the binder ought to have names, though I think you can omit them</p>",
        "id": 201918111,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593042876
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 201918190,
        "sender_full_name": "Iocta",
        "timestamp": 1593042958
    }
]