[
    {
        "content": "<p>Hi all,</p>\n<p>Is it possible to define a notation like <code>f 1 +...+ f n</code> to mean \"the sum of f applied to the numbers from 1 to n\"?  </p>\n<p>I though it might be useful (at least it would for me, since it could allow to write proofs that look more similar to what we do with pen and paper), but couldn't figure out how to define it, since it must look inside the expression <code>f 1</code> and <code>f n</code> to find both the function <code>f</code> and the indexes <code>1</code>and <code>n</code>.</p>",
        "id": 275449220,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1647386607
    },
    {
        "content": "<p>The <code>...</code> notation is handwavy on paper, so dropping it is probably a necessary sacrifice.</p>",
        "id": 275449616,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647386895
    },
    {
        "content": "<p>Assuming your indices are contiguous integers from 1 to n, inclusive, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pos_range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum_range</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">pos_range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`∑`</span> <span class=\"n\">f</span> <span class=\"bp\">`⬝`</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>  <span class=\"n\">sum_range</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">4</span><span class=\"o\">)</span>  <span class=\"bp\">⬝</span> <span class=\"mi\">10</span>\n</code></pre></div>",
        "id": 275452279,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1647388652
    },
    {
        "content": "<p>We already have <code>finset.sum</code> with notation <code>\\sum</code></p>",
        "id": 275452364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647388734
    },
    {
        "content": "<p>To a limited extent, you can get the first notation to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.interval</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dot_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">lo</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">hi</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset.Icc</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">+...+</span> <span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">dot_sum</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">id</span> <span class=\"mi\">1</span> <span class=\"bp\">+...+</span> <span class=\"n\">id</span> <span class=\"mi\">10</span>\n<span class=\"c1\">-- 55</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+...+</span> <span class=\"n\">f</span> <span class=\"mi\">10</span>\n<span class=\"c1\">-- 110</span>\n\n<span class=\"k\">#eval</span> <span class=\"mi\">1</span> <span class=\"bp\">+...+</span> <span class=\"mi\">10</span>\n<span class=\"c1\">-- Random error because it's just a hack. Too much to expect</span>\n</code></pre></div>",
        "id": 275457306,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647393657
    }
]