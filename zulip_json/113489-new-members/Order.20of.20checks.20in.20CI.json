[
    {
        "content": "<p>What's the order in which checks are performed in the GitHub CI?  I ask because I've just had a commit fail CI (on <a href=\"https://github.com/leanprover-community/mathlib/pull/13086\">#13086</a>), seemingly because I forgot to provide docstrings for some <code>def</code>s — but this failure only arose after 101 minutes had been spent on the \"Build mathlib\" phase.</p>",
        "id": 277350872,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648767304
    },
    {
        "content": "<p>In principle the docstring could have been added in minute 100</p>",
        "id": 277351047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648767430
    },
    {
        "content": "<p>With <code>add_decl_doc</code></p>",
        "id": 277351057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648767444
    },
    {
        "content": "<p>So you really can't run that linter accurately without building everything</p>",
        "id": 277351090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648767470
    },
    {
        "content": "<p>Of course, the linter could become the stricter \"has a docstring in the same file\", but we don't have infrastructure to run linters in parallel with the build yet</p>",
        "id": 277351171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648767526
    },
    {
        "content": "<p>Doesn't adding a docstring for <code>foo</code> just involve a line like <code>add_decl_doc foo</code>?  So you could search the entire codebase for that without having to spend 100 minutes building all of mathlib.</p>",
        "id": 277351554,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648767791
    },
    {
        "content": "<p>In practice do we add docstrings to declarations from a different file? (Outside of cases where we add docstrings to definitions in the core library perhaps.)</p>",
        "id": 277351695,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648767933
    },
    {
        "content": "<p>Stuart, you can't tell whether <code>add_decl_doc</code> in the last file is a command or not until you've parsed all the notation up till that point</p>",
        "id": 277352973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648769001
    },
    {
        "content": "<p>The only way to parse lean reliably is to compile it, and that's what we're already doing</p>",
        "id": 277352987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648769031
    },
    {
        "content": "<p>Obviously I'm describing pathological cases that we don't care about, but hopefully that gives some insight into why it's last fragile to do it a different way to what we currently do</p>",
        "id": 277353187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648769162
    },
    {
        "content": "<p>But in the present case the <code>def</code> had no adjacent docstring and there's nothing that could be a candidate <code>add_decl_doc ...</code> in the codebase.  Isn't it worth spending a few milliseconds doing a quick search that will occasionally find a definite failure quickly?</p>",
        "id": 277353478,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648769352
    },
    {
        "content": "<p>PRs welcome <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 277353881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648769663
    },
    {
        "content": "<p>TBH, I do find this sort of thing very annoying as well.</p>",
        "id": 277353906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648769698
    },
    {
        "content": "<p>Unfortunately I don't know where I'd even start with writing the relevant code, or even where I'd look for examples of the code that currently runs the CI.</p>",
        "id": 277354144,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648769916
    },
    {
        "content": "<p>Is there someone suitably knowledgable and keen that we could bat-signal on this? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 277354193,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648769974
    },
    {
        "content": "<p>You could have a quick check on your computer, where you grep a couple of lines above every <code>def</code> and make sure that the string <code>-/</code> is present.  Maybe only on the <code>diff</code> with the previous commit or on a single file.</p>\n<p>Not a full check, but might catch some actually missing doc-strings.</p>",
        "id": 277361591,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648777456
    },
    {
        "content": "<p>What I usually do is put <code>#lint</code> at the bottom of the file. It'd be nice if the linters had nicer integration with VS Code, but that's not likely to happen until we port them over to Lean 4.</p>",
        "id": 277361633,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1648777505
    },
    {
        "content": "<p>On the other hand, <em>something</em> has to be checked last. There is no point in cyclically prioritising some check because \"it would have caught my error faster\".</p>",
        "id": 277390782,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648805318
    },
    {
        "content": "<p>True but imagine you have two checks that take 1 and 10000 seconds respectively--on average you will be much better off doing the cheap check first, and no one will complain that they had to wait an extra second to get their failure after 10001 seconds.</p>",
        "id": 277394645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648807510
    },
    {
        "content": "<p>And moreover every time the cheap check fails that's 10000 seconds of redundant computation that you've avoided, meaning more resources for other users, better scalability as mathlib and its user-base grows, and (as a side benefit) less unnecessarily wasted electricity.</p>",
        "id": 277415334,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648818838
    },
    {
        "content": "<p>I always feel a small (but surely disproportionate) twinge of guilt whenever I make the CI computers do work needlessly.  If I wanted to get computers to waste power and generate heat for no purpose at all I'd have invested in bitcoin!</p>",
        "id": 277415969,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648819142
    }
]