[
    {
        "content": "<p>Hi all, i am very new to lean so trying to do some easy cleanup task, however as a begginier, i have some problems that i can't figure out. I made a draft PR to ask a question: <a href=\"https://github.com/leanprover-community/mathlib/pull/11805\">https://github.com/leanprover-community/mathlib/pull/11805</a><br>\nAny input will be great, thanks in advance.</p>",
        "id": 270588669,
        "sender_full_name": "Alfredo",
        "timestamp": 1643910104
    },
    {
        "content": "<p>hiya Alfredo, you should try move this to another thread!</p>",
        "id": 270589190,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643910290
    },
    {
        "content": "<p>I've moved the message to a new thread.</p>",
        "id": 270589309,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643910350
    },
    {
        "content": "<p>(feel free to modify the title)</p>",
        "id": 270589370,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643910364
    },
    {
        "content": "<p>ops, sorry about that. thanks for the move, title looks good.</p>",
        "id": 270590469,
        "sender_full_name": "Alfredo",
        "timestamp": 1643910822
    },
    {
        "content": "<p>What is the error you are getting?</p>",
        "id": 270677474,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643960665
    },
    {
        "content": "<p>forgot to post that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">has_mul.mul</span> <span class=\"n\">X</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">X</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">polynomial</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">power_series</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n</code></pre></div>",
        "id": 270705637,
        "sender_full_name": "Alfredo",
        "timestamp": 1643976654
    },
    {
        "content": "<p>It looks like lean thinks you are trying to multiply polynomials whereas it expects you to multiply power series.</p>",
        "id": 270710875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643979660
    },
    {
        "content": "<p>Does writing <code>power_series.X</code> instead of <code>X</code> help?</p>",
        "id": 270710901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643979671
    },
    {
        "content": "<p>i think i tried, the error change to a lower line if we do that</p>",
        "id": 270712273,
        "sender_full_name": "Alfredo",
        "timestamp": 1643980381
    },
    {
        "content": "<p>it will fial in the <code>rw</code> line: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_succ_X_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_rescale</span><span class=\"o\">,</span> <span class=\"n\">coeff_exp</span><span class=\"o\">,</span> <span class=\"n\">coeff_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">nat.sum_antidiagonal_eq_sum_range_succ_mk</span><span class=\"o\">,</span> <span class=\"n\">sum_range_succ</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>with error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">power_series.coeff</span> <span class=\"n\">A</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">bernoulli_poly</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n<span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">status</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 270712486,
        "sender_full_name": "Alfredo",
        "timestamp": 1643980473
    },
    {
        "content": "<p>Did you move things from the <code>power_series</code> namespace to a place working inside the <code>polynomial</code> namespace?</p>",
        "id": 270712688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643980571
    },
    {
        "content": "<p>i dont think i did that<br>\ncan you explain more ?</p>",
        "id": 270712915,
        "sender_full_name": "Alfredo",
        "timestamp": 1643980689
    },
    {
        "content": "<p>I suggested to work in the <code>polynomial</code> namespace (since the file is about Bernoulli polynomials). Let me check what's going on.</p>",
        "id": 270713017,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643980745
    },
    {
        "content": "<p>yea, that is what i am trying to do, i can add everything to the polynomial namespace without issues but the second theorem is the one that fails  when we do that</p>",
        "id": 270713193,
        "sender_full_name": "Alfredo",
        "timestamp": 1643980822
    },
    {
        "content": "<p>Here is what is going on: writing <code>namespace polynomial</code> means that all the lemma will have <code>polynomial</code> in the name, so for example <code>lemma foo</code> will be called <code>polynomial.foo</code> (this answer your first comment about collision with another name).</p>",
        "id": 270713939,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643981182
    },
    {
        "content": "<p>It also means that if a lemma is called <code>polynomial.bar</code> you can use it just writing <code>bar</code> (so <code>namespace polynomial</code> implies <code>open polynomial</code>, and this line can be deleted).</p>",
        "id": 270714025,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643981226
    },
    {
        "content": "<p>In the file there is also <code>open power_series</code>, to avoid writing <code>power_series.exp</code> and similar stuff.</p>",
        "id": 270714068,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643981251
    },
    {
        "content": "<p>yes</p>",
        "id": 270714090,
        "sender_full_name": "Alfredo",
        "timestamp": 1643981262
    },
    {
        "content": "<p>Now, there is <code>polynomial.X</code> and <code>power_series.X</code> in mathlib, and this confuses Lean, since now both are called <code>X</code>. This is why you got the first error: Lean tried to use <code>polynomial.X</code>, but there one should use <code>power_series.X</code>. You can help it writing <code>power_series.X</code> in that location.</p>",
        "id": 270714269,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643981330
    },
    {
        "content": "<p>right</p>",
        "id": 270714454,
        "sender_full_name": "Alfredo",
        "timestamp": 1643981413
    },
    {
        "content": "<p>The second error is similar: it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span>\n</code></pre></div>\n<p>In the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_succ_X_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_rescale</span><span class=\"o\">,</span> <span class=\"n\">coeff_exp</span><span class=\"o\">,</span> <span class=\"n\">coeff_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">nat.sum_antidiagonal_eq_sum_range_succ_mk</span><span class=\"o\">,</span> <span class=\"n\">sum_range_succ</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>Looking at the error one can guess that it's something related to <code>coeff_mul</code> (you can also delete one lemma after the other to see which one creates problems).</p>",
        "id": 270714483,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643981433
    },
    {
        "content": "<p>And indeed we have both <code>polynomial.coeff_mul</code> and <code>power_series.coeff_mul</code>.</p>",
        "id": 270714537,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643981462
    },
    {
        "content": "<p>Here again the correct one is the latter, so with <code>power_series.coeff_mul</code> the error goes away.</p>",
        "id": 270714581,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643981486
    },
    {
        "content": "<p>cool, you are the best, thank you!</p>",
        "id": 270714847,
        "sender_full_name": "Alfredo",
        "timestamp": 1643981621
    },
    {
        "content": "<p>i made an additional comment about the first question</p>",
        "id": 270714930,
        "sender_full_name": "Alfredo",
        "timestamp": 1643981653
    },
    {
        "content": "<p>The same error occurs again later, but it's a little trickier  to understand: it says that it cannot use <code>apply congr_arg</code> to make progress, but this is because the previous line, the one with <code>simp only</code> changed it's effect and it has become less efficient. You should replace <code>coeff_one</code> with <code>power_series.coeff_one</code> and then everything works.</p>",
        "id": 270715004,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643981700
    },
    {
        "content": "<p>awsome</p>",
        "id": 270715067,
        "sender_full_name": "Alfredo",
        "timestamp": 1643981738
    },
    {
        "content": "<p>Concerning your new comment: I don't understand what you mean, I don't have any error.</p>",
        "id": 270715220,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643981819
    },
    {
        "content": "<p>Can I push a commit to your branch?</p>",
        "id": 270715236,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643981826
    },
    {
        "content": "<p>sure</p>",
        "id": 270715274,
        "sender_full_name": "Alfredo",
        "timestamp": 1643981850
    },
    {
        "content": "<p>Ah sorry, now I got what you mean. Yes, if you want to use <code>bernoulli</code> you can write <code>_root_.bernoulli</code>.</p>",
        "id": 270715522,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643981984
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The Bernoulli polynomials are defined in terms of the negative Bernoulli numbers. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">bernoulli</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">bernoulli</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bernoulli_def</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bernoulli</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">polynomial.monomial</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">_root_.bernoulli</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sum_range_reflect</span><span class=\"o\">,</span> <span class=\"n\">add_succ_sub_one</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">bernoulli</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_range_succ_iff</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">choose_symm</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">tsub_tsub_cancel_of_le</span> <span class=\"n\">hx</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This works. (There are other changes to be done later in the file.)</p>",
        "id": 270715665,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643982050
    },
    {
        "content": "<p>apologies, had to go out for a bit</p>",
        "id": 270717688,
        "sender_full_name": "Alfredo",
        "timestamp": 1643983026
    },
    {
        "content": "<p>thank you for the help , i will try to do the other changes suggested, i think there are just lemma name changes left</p>",
        "id": 270717962,
        "sender_full_name": "Alfredo",
        "timestamp": 1643983146
    }
]