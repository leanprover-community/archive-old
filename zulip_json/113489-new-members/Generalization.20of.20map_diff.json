[
    {
        "content": "<p>Hi all! I'm a Lean newbie primarily interested in formal verification of software. I'd like to show the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list_map_diff_subset</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n<span class=\"o\">((</span><span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">l₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">diff</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">l₂</span><span class=\"o\">))</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l₁.diff</span> <span class=\"n\">l₂</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>This statement is a generalization of <a href=\"https://github.com/leanprover-community/mathlib/blob/8f604aa32be6acbbc0f28e24a47dfacf1da834f6/src/data/list/basic.lean#L3353\"><code>map_diff</code></a> in mathlib (which critically depends on <a href=\"https://github.com/leanprover-community/mathlib/blob/0f9edf98f8cd8a99a6694f19e0b3f47e7e12c165/src/data/list/basic.lean#L3316\"><code>map_foldl_erase</code></a>) to the case where <code>f</code> is not necessarily injective. (Clearly, the two sides must only be equal when <code>f</code> is injective; consider the case of a constant <code>f</code>.) For my purposes, I'd also just be happy to show</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list_map_diff_length</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n<span class=\"o\">((</span><span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">l₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">diff</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">l₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">l₁.diff</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n</code></pre></div>\n<p>I'm not sure how to approach this—the definition of <code>diff</code> is slightly hairy compared to list concatenation, etc., which make it difficult to naively apply induction. Any tips on where to start? Are there any theorems in <code>mathlib</code>that look roughly like this? Is it more natural to consider sublists instead of subsets? Thanks! :)</p>",
        "id": 280148939,
        "sender_full_name": "Parker J. Rule",
        "timestamp": 1650934251
    },
    {
        "content": "<p>That's an interesting lemma and, as far as I can tell, it's not in mathlib. I proved your first lemma, but the proof is very long. The proof can be found <a href=\"https://github.com/user7230724/lean-projects/blob/master/src/list_diff_map/main.lean\">here</a>.</p>",
        "id": 280222664,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650985171
    },
    {
        "content": "<p>Wow, thank you so much for the quick response! I look forward to going through the proof in more detail later. Would it be alright with you if I used this (with attribution, of course) in an open-source project related to the formalization of differential privacy mechanisms? (It might also be worth getting this into <code>mathlib</code>...)</p>",
        "id": 280260577,
        "sender_full_name": "Parker J. Rule",
        "timestamp": 1651001343
    },
    {
        "content": "<p>I looked at Patrick's proof and was surprised about how long it was, but when I tried this myself I realised I would probably end up writing something just as long. The only thing which occurred to me about a possible different approach is to change the question into a question about multisets. The question at stake doesn't care about the order of the lists so it's really a question about the associated multisets and I idly wondered whether they'd be easier to work with.</p>",
        "id": 280262732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651002398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"496809\">Parker J. Rule</span> <a href=\"#narrow/stream/113489-new-members/topic/Generalization.20of.20map_diff/near/280260577\">said</a>:</p>\n<blockquote>\n<p>Would it be alright with you if I used this (with attribution, of course) in an open-source project</p>\n</blockquote>\n<p>Feel free to use it, no need for attribution :)</p>",
        "id": 280268829,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651005429
    },
    {
        "content": "<p>multiset version is indeed easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.multiset.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">multiset</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">multiset.map_diff_subset</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s₁.map</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">s₂.map</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"bp\">-</span> <span class=\"n\">s₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_le_iff_right</span><span class=\"o\">,</span> <span class=\"n\">le_iff_count</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">count_add</span><span class=\"o\">,</span> <span class=\"n\">count_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">card_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">filter_add</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">card_le_of_le</span> <span class=\"o\">(</span><span class=\"n\">filter_le_filter</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">tsub_le_iff_right.1</span> <span class=\"n\">le_rfl</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.map_diff_subset</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l₁.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">diff</span> <span class=\"o\">(</span><span class=\"n\">l₂.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">l₁.diff</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">coe_subset</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">coe_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">coe_map</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">subset_of_le</span> <span class=\"o\">(</span><span class=\"n\">multiset.map_diff_subset</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280279581,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651011309
    },
    {
        "content": "<p>Oh nice! Ha ha i stopped when <code>sub_le_iff_le_add</code> didn't work, I should have thought to look in the multiset namespace!</p>",
        "id": 280279931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651011555
    },
    {
        "content": "<p>updated with list version</p>",
        "id": 280280303,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651011757
    },
    {
        "content": "<p>Oh very nice</p>",
        "id": 280280323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651011770
    },
    {
        "content": "<p>Is a version of this true with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.sublist\">docs#list.sublist</a>?</p>",
        "id": 280280513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651011886
    },
    {
        "content": "<p>I would guess that version (assuming it's true) requires the much longer proof we started with, since it doesn't follow from the multiset version</p>",
        "id": 280280564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651011935
    },
    {
        "content": "<p>yes, probably needs induction.</p>",
        "id": 280280628,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651011968
    },
    {
        "content": "<p>I'd kind of expect you can get there by just modifying the existing <code>map_diff</code> proof and all the lemmas it uses along the way</p>",
        "id": 280280692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651012019
    },
    {
        "content": "<p>Which is the right approach anyway, because eventually someone will come along and ask for the weaker version of those lemmas too</p>",
        "id": 280280733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651012055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Generalization.20of.20map_diff/near/280279931\">said</a>:</p>\n<blockquote>\n<p>Oh nice! Ha ha i stopped when <code>sub_le_iff_le_add</code> didn't work, I should have thought to look in the multiset namespace!</p>\n</blockquote>\n<p>Yes, it's weird that<code>sub_le_iff_le_add</code>can't be directly used to rewrite; it should be enabled by the instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.has_ordered_sub\">docs#multiset.has_ordered_sub</a>. On the other hand <code>multiset.sub_le_iff_le_add</code> is protected and is not supposed to be used directly?</p>",
        "id": 280280825,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651012102
    },
    {
        "content": "<p>Hmm, <code>tsub_le_iff_right</code> is enabled by the instance, not <code>sub_le_iff_le_add</code>. Rewriting by the former works, so everything works as intended.</p>",
        "id": 280281259,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651012439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Here's a counterexample to the sublist version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">l₁</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">l₁.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">diff</span> <span class=\"o\">(</span><span class=\"n\">l₂.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> [1, 0] -/</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">l₁.diff</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"c\">/-</span><span class=\"cm\"> [0, 1] -/</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"n\">l₁.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">diff</span> <span class=\"o\">(</span><span class=\"n\">l₂.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">&lt;+</span> <span class=\"o\">(</span><span class=\"n\">l₁.diff</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> ff -/</span>\n</code></pre></div>",
        "id": 280285206,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651015129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/Generalization.20of.20map_diff/near/280281259\">said</a>:</p>\n<blockquote>\n<p>Hmm, <code>tsub_le_iff_right</code> is enabled by the instance, not <code>sub_le_iff_le_add</code>. Rewriting by the former works, so everything works as intended.</p>\n</blockquote>\n<p>Indeed, <code>sub_le_iff_le_add</code> is a lemma about <code>add_group</code>. <code>tsub_le_iff_le_right</code> is a lemma about <code>has_ordered_sub</code>, truncated subtraction, as the name indicates.</p>",
        "id": 280310073,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651042173
    },
    {
        "content": "<p>Note that <code>tsub_le_iff_right</code> is strictly more general than <code>sub_le_iff_le_add</code> but we decided to duplicate the API nonetheless to have a uniform interface for <code>tsub</code>. That could change.</p>",
        "id": 280310169,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651042261
    },
    {
        "content": "<p>Yeah, I didn't know what <code>protected</code> does to a declaration, and only checked the docs last night to find out it means you have to prepend the namespace when calling that declaration even if you opened that namespace, so that's why I had to do <code>multiset.sub_le_iff_le_add</code>.</p>",
        "id": 280357968,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651069764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/Generalization.20of.20map_diff/near/280279581\">said</a>:</p>\n<blockquote>\n<p>multiset version is indeed easy:</p>\n</blockquote>\n<p>Thanks so much, all! This makes a lot of sense. Indeed, my problem was originally in terms of multisets, but the <code>induction</code> tactic steered me toward formulating it in terms of lists. I was able to generalize <code> multiset.map_diff_subset</code> to a notion of symmetric difference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Junyan's snippet here... -/</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">sym_diff</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span>\n  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">Δ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">51</span> <span class=\"o\">:=</span> <span class=\"n\">sym_diff</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">multiset.map_sym_diff_subset</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s₁.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">Δ</span> <span class=\"o\">(</span><span class=\"n\">s₂.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"bp\">Δ</span> <span class=\"n\">s₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sym_diff</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">s₁.map</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">s₂.map</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"bp\">-</span> <span class=\"n\">s₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">multiset.map_diff_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">s₂.map</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">s₁.map</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">s₂</span> <span class=\"bp\">-</span> <span class=\"n\">s₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">multiset.map_diff_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s₁.map</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">s₂.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">s₂.map</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">s₁.map</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"bp\">-</span> <span class=\"n\">s₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">s₂</span> <span class=\"bp\">-</span> <span class=\"n\">s₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_le_add</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"bp\">-</span> <span class=\"n\">s₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">s₂</span> <span class=\"bp\">-</span> <span class=\"n\">s₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span>\n    <span class=\"bp\">≤</span> <span class=\"o\">((</span><span class=\"n\">s₁</span> <span class=\"bp\">-</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">s₂</span> <span class=\"bp\">-</span> <span class=\"n\">s₁</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>...which was my ultimate goal. Any tips on cleaning this proof up? :) It seems overly calculation-heavy...</p>",
        "id": 280362888,
        "sender_full_name": "Parker J. Rule",
        "timestamp": 1651071907
    },
    {
        "content": "<p>Somewhat less explicitly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">multiset.map_sym_diff_subset</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s₁.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">Δ</span> <span class=\"o\">(</span><span class=\"n\">s₂.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"bp\">Δ</span> <span class=\"n\">s₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sym_diff</span><span class=\"o\">],</span>\n  <span class=\"n\">transitivity</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"bp\">-</span> <span class=\"n\">s₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">s₂</span> <span class=\"bp\">-</span> <span class=\"n\">s₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">add_le_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">multiset.map_diff_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_iff_right</span><span class=\"o\">,</span> <span class=\"n\">multiset.map_add</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280364147,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651072422
    },
    {
        "content": "<p>You could use the <code>calc</code> blocks, if you've seen them</p>",
        "id": 280364250,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651072454
    },
    {
        "content": "<p>also <code>:= by { exact [xyz] }</code> can just be replaced with <code>:= [xyz]</code> (term mode)</p>",
        "id": 280364347,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651072504
    }
]