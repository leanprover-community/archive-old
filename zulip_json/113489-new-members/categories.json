[
    {
        "content": "<p>I made a silly .lean file for mathematical category theory.<br>\n<a href=\"https://gist.github.com/EdAyers/87fa2de6ddfc13ab273af52c21d48681\" target=\"_blank\" title=\"https://gist.github.com/EdAyers/87fa2de6ddfc13ab273af52c21d48681\">https://gist.github.com/EdAyers/87fa2de6ddfc13ab273af52c21d48681</a><br>\nTwo questions; <br>\n- what is the best way to solve the lemmas with <code>sorry</code> in them?<br>\n- doesn't the definition of <code>Cat</code> break the type universe hierarchy? And if so why doesn't lean care?</p>",
        "id": 131073671,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533681748
    },
    {
        "content": "<p>Also any comments on style / readability would be appreciated</p>",
        "id": 131074009,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533682211
    },
    {
        "content": "<p>Just to comment that fresh this week we've had a huge category theory PR accepted into mathlib: <a href=\"https://github.com/leanprover/mathlib/commit/9b1be732e122d371100b0df479ca000c2a3f73b0\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/9b1be732e122d371100b0df479ca000c2a3f73b0\">https://github.com/leanprover/mathlib/commit/9b1be732e122d371100b0df479ca000c2a3f73b0</a></p>",
        "id": 131074344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533682729
    },
    {
        "content": "<p>ok thanks I can compare it to my code</p>",
        "id": 131074686,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533683178
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, sorry to disappoint, but that PR that was merged was only the first epsilon of the actual category theory library (just 3 files!) It's still a long way to go anything useful to you is there. :-)</p>",
        "id": 131079511,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533690396
    },
    {
        "content": "<p>There's a second PR waiting, if anyone feels like giving some comments.&lt;<a href=\"https://github.com/leanprover/mathlib/pull/239\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/239\">https://github.com/leanprover/mathlib/pull/239</a>&gt;.</p>",
        "id": 131079519,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533690425
    },
    {
        "content": "<blockquote>\n<p>I made a silly .lean file for mathematical category theory.<br>\n<a href=\"https://gist.github.com/EdAyers/87fa2de6ddfc13ab273af52c21d48681\" target=\"_blank\" title=\"https://gist.github.com/EdAyers/87fa2de6ddfc13ab273af52c21d48681\">https://gist.github.com/EdAyers/87fa2de6ddfc13ab273af52c21d48681</a></p>\n</blockquote>\n<p>Who keeps the record of all beginners who had category theory as their first idea of something to formalize?</p>",
        "id": 131165293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533812790
    },
    {
        "content": "<p>If you want to add to the list of \"stuff which it looks like a good idea to be the first thing to formalise\" then you seem to be able to add basic number theory to that list. My students ended up in coercion hell going from nat to int to zmod n</p>",
        "id": 131165597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533813321
    },
    {
        "content": "<p>Heh, the first two things I tried to formalize were fibrations of categories (that went poorly) and FLT for n=4</p>",
        "id": 131169156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533818184
    },
    {
        "content": "<p>At least FLT for n=4 is a statement about nat.</p>",
        "id": 131169279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533818332
    },
    {
        "content": "<p>The proof might not stray too far from nat either</p>",
        "id": 131169292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533818353
    },
    {
        "content": "<p>oh actually maybe it strays into int a fair bit...</p>",
        "id": 131169296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533818374
    },
    {
        "content": "<p>I managed to nearly avoid using int, I think, but it might have been better to use it more. Lots of annoying inequality side conditions to check when doing algebraic manipulations over nat</p>",
        "id": 131169410,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533818474
    },
    {
        "content": "<p>I chose cats because that's the area of maths I'm strongest at and because it forces me to use lots of dependent-type features</p>",
        "id": 131170956,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533820254
    },
    {
        "content": "<p>I don't disagree that it's a logical choice when starting to play with a DTT prover, but it really is so common it's almost a joke</p>",
        "id": 131171043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533820330
    },
    {
        "content": "<p>I'm sure I've seen this happen at least 8 times</p>",
        "id": 131171049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533820350
    },
    {
        "content": "<p>Another fun one is making <code>vec n</code> and matrices and so on.</p>",
        "id": 131171320,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533820600
    },
    {
        "content": "<p>Those might be in TPIL though</p>",
        "id": 131171614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533820925
    },
    {
        "content": "<p>So I would like to say that I have some category, and say that it has some object. It's not obvious how to even declare a variable of type <code>category</code>. What I would like to do is to define the type of terminal objects of a given category. In type theory I guess I would do something like the dependent type</p>\n<p>C:category |- terminalObj(C): C.obj</p>\n<p>where C.obj is the type of objects of C.</p>",
        "id": 135524085,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1539156180
    },
    {
        "content": "<p>(I should say I'm using <code>category_theory</code> in mathlib)</p>\n<p>Then terminalObj(C) := Σ t: C.Obj Π_{x:C.Obj} Π_{f,g:Hom(x,t)} f = g</p>",
        "id": 135524246,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1539156440
    },
    {
        "content": "<p>In lean, we have <code>category A</code> as the type of categories where <code>A</code> is the type of objects. (That is, they are \"partially unbundled\" with the type of objects exposed.) Then you can define a structure <code>is_terminal (X : A) : Type</code> with fields for the unique map in, and the statement of uniqueness</p>",
        "id": 135524331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539156578
    },
    {
        "content": "<p>Ah, that makes sense. Particularly as Cat is fibred over Class by sending a category to its class of objects, so that it makes sense to talk of the dependent type A:Type |- category(A): Type.</p>",
        "id": 135527489,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1539161008
    },
    {
        "content": "<p>Yes, what you call fibration is what we call unbundling</p>",
        "id": 135527835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539161408
    },
    {
        "content": "<p>Terminal objects (along with every other shape of (co)limit) are on the horizon. If you want to peek, and don't mind peeking at often-broken code, see the <code>working</code> branch of <a href=\"https://github.com/semorrison/lean-category-theory/tree/working/src/category_theory/limits\" target=\"_blank\" title=\"https://github.com/semorrison/lean-category-theory/tree/working/src/category_theory/limits\">https://github.com/semorrison/lean-category-theory/tree/working/src/category_theory/limits</a>.</p>",
        "id": 135528430,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539162298
    },
    {
        "content": "<p>(\"working\" here is as-in \"I'm working on it\", not \"it is working\"...)</p>",
        "id": 135528440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539162315
    },
    {
        "content": "<p>I think <code>wip</code> is less susceptible to misinterpretation</p>",
        "id": 135528454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539162361
    },
    {
        "content": "<p>ok, I'll use that in future! thanks.</p>",
        "id": 135528498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539162384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> thanks, I'll check it out</p>",
        "id": 135529320,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1539163644
    }
]