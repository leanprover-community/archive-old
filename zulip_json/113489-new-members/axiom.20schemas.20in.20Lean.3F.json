[
    {
        "content": "<p>In set theory, we have the axiom schema of specification: Let ϕ(u, p) be a formula. Then there is an axiom ∀X ∀p ∃Y ∀u (u ∈ Y ↔ u ∈ X ∧ ϕ(u, p)).</p>\n<p>It seems like in CoIC we can formalize this as: <code>∀(φ : Set → Set → Prop) , ∀X, ∀p, ∃S, (∀u, u ε S ↔ u ε X ∧ φ u p)</code>, where I'm interpreting <code>ε</code> as $\\in$.  However,  it seems to me that strictly speaking, this is stronger than the axiom schema as used in set theory, since φ : Set → Set → Prop does not have to correspond to any first-order formula. It could be a binary property that cannot be represented in (first-order) logic.</p>\n<p>How do we more faithfully represent axiom schemas in Lean?</p>",
        "id": 193694252,
        "sender_full_name": "Chris M",
        "timestamp": 1586666805
    },
    {
        "content": "<p>first formalize a theory of FOL (first order languages), then build a model of ZFC, and then verify that the model satisfies the axioms</p>",
        "id": 193694419,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586667189
    },
    {
        "content": "<p>lol, I hope you're joking</p>",
        "id": 193694460,
        "sender_full_name": "Chris M",
        "timestamp": 1586667284
    },
    {
        "content": "<p>have fun: <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/set_theory\" title=\"https://github.com/leanprover-community/mathlib/tree/master/src/set_theory\">https://github.com/leanprover-community/mathlib/tree/master/src/set_theory</a></p>",
        "id": 193694854,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586668004
    },
    {
        "content": "<p>Isn't there a simple way that one can formalize axiom schema's in Lean?</p>",
        "id": 193695118,
        "sender_full_name": "Chris M",
        "timestamp": 1586668456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> What you described <em>is</em> the way we represent schemas. Yes, this is a second order formulation, and it's not exactly equivalent, but it is the version that plays well with everything else. The quantifier ranges over all formulas that can be described <em>in lean</em>, which is more important for formalization in lean. This is strictly more than the set of formulas that can be described in FOL, because Lean is has access to higher order quantifiers, and if you want to capture all and only the first order formulas you have to define what a first order formula is, which requires a definition of FOL as kenny said.</p>",
        "id": 193695600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586669336
    },
    {
        "content": "<p>you don't have to build a model of ZFC though</p>",
        "id": 193695649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586669416
    },
    {
        "content": "<p>can you evaluate a FOL formula?</p>",
        "id": 193695912,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586669954
    },
    {
        "content": "<p>sure</p>",
        "id": 193695916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586669990
    },
    {
        "content": "<p>not computably, but you can define a function from <code>formula</code> to <code>(nat -&gt; Prop) -&gt; Prop</code> or something like that</p>",
        "id": 193695958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670038
    },
    {
        "content": "<p>oh right, Prop is impredicative</p>",
        "id": 193695963,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586670060
    },
    {
        "content": "<p>Impredicativity isn't needed here, i.e. you could do the same in <code>Type</code> if the model also lives in <code>Type</code></p>",
        "id": 193695972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670118
    },
    {
        "content": "<p>actually the type of the eval should be <code>formula -&gt; (nat -&gt; A) -&gt; Prop</code></p>",
        "id": 193696012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670172
    },
    {
        "content": "<p>where the function is providing elements of the model <code>A</code> for every free variable</p>",
        "id": 193696017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670201
    },
    {
        "content": "<p>When you say \"define what a FOL formula is\", does that mean you can no longer use the <code>∀(φ : Set → Set → Prop)</code> approach, because a <code>formula</code> is now no longer a function to <code>Prop</code>, but a normal structure like any other structure we'd want to formalize?</p>",
        "id": 193696064,
        "sender_full_name": "Chris M",
        "timestamp": 1586670248
    },
    {
        "content": "<p>yeah</p>",
        "id": 193696074,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586670265
    },
    {
        "content": "<p>The quantifier would range over <code>formula</code>, and then you would replace <code>phi</code> with <code>eval2 phi : Set -&gt; Set -&gt; Prop</code></p>",
        "id": 193696079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670297
    },
    {
        "content": "<p>You can restrict attention to two variable formulas, or set variables out of range to a default value</p>",
        "id": 193696094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670337
    },
    {
        "content": "<p>If you use a quantifier <code>∀(φ : Set → Set → Prop)</code>, then it's a higher order quantifier so you get those \"indescribable\" formulas</p>",
        "id": 193696169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284606\">Chris M</span> <a href=\"#narrow/stream/113489-new-members/topic/axiom.20schemas.20in.20Lean.3F/near/193694460\" title=\"#narrow/stream/113489-new-members/topic/axiom.20schemas.20in.20Lean.3F/near/193694460\">said</a>:</p>\n<blockquote>\n<p>lol, I hope you're joking</p>\n</blockquote>\n<p><a href=\"https://github.com/flypitch/flypitch/\" title=\"https://github.com/flypitch/flypitch/\">https://github.com/flypitch/flypitch/</a></p>",
        "id": 193711805,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586695770
    }
]