[
    {
        "content": "<p>Why does <code>#check</code> reports the error<code>invalid field notation, function 'has_coe.coe' does not have explicit argument with type (has_coe ...)</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">matrix</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">to_mul_vec</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">⟩</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">matrix.to_mul_vec.coe</span> <span class=\"n\">A</span>\n<span class=\"kd\">end</span> <span class=\"n\">matrix</span>\n</code></pre></div>",
        "id": 245539801,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625908607
    },
    {
        "content": "<p>Btw, <code>#check matrix.to_mul_vec.coe</code> gives <code>has_coe.coe : matrix ?M_1 ?M_2 ?M_5 → (?M_2 → ?M_5) → ?M_1 → ?M_5</code>.</p>",
        "id": 245539816,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625908667
    },
    {
        "content": "<p><code>has_coe.coe</code> is usually written <code>\\u</code>, why are you using projection notation for it?</p>",
        "id": 245539882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625908783
    },
    {
        "content": "<p>it has an argument of type <code>has_coe</code> but it's a typeclass argument, so it isn't supposed to work with projection notation. (It does in some circumstances due to a bug that no one has cared to fix.)</p>",
        "id": 245539937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625908863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/has_coe/near/245539882\">said</a>:</p>\n<blockquote>\n<p><code>has_coe.coe</code> is usually written <code>\\u</code>, why are you using projection notation for it?</p>\n</blockquote>\n<p>Because I am not sure how to properly use <code>\\u</code> in this case. I would like <code>#check ↑A </code> to print <code>↑A : (J → α) → I → α</code> but it prints <code>↑A : ?M_1</code>. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 245540100,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625909142
    },
    {
        "content": "<p>it needs to know what it is coercing to as well. <code>#check (↑A : (J → α) → I → α )</code> should work</p>",
        "id": 245540153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625909202
    },
    {
        "content": "<p>I think in this example it would be better to have a coe_fun instance instead, so that you can write <code>A v</code> for mul_vec</p>",
        "id": 245540181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625909275
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 245540229,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625909326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/has_coe/near/245540153\">said</a>:</p>\n<blockquote>\n<p>it needs to know what it is coercing to as well. <code>#check (↑A : (J → α) → I → α )</code> should work</p>\n</blockquote>\n<p>Yeah, Mario. I know this should work. I was using the projection notation for another reason.</p>",
        "id": 245540235,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625909352
    },
    {
        "content": "<p>if you are just exploring and noticed the oddity with <code>matrix.to_mul_vec.coe</code>, that's just a bug</p>",
        "id": 245540239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625909365
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">matrix</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">to_mul_vec</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">to_vec_mul</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">M.vec_mul</span> <span class=\"n\">v</span><span class=\"o\">⟩</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"kd\">end</span> <span class=\"n\">matrix</span>\n</code></pre></div>",
        "id": 245540249,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625909392
    },
    {
        "content": "<p>In the above case, if I use <code>\\u</code>, I think I am unable to pick which one of <code>to_mul_vec</code> <code>to_vec_mul</code> I am using. That is the other reason I was not using <code>\\u</code> before.</p>",
        "id": 245540298,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625909442
    },
    {
        "content": "<p>yeah that looks like a bad notation</p>",
        "id": 245540316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625909485
    },
    {
        "content": "<p>I would do something like <code>A *&gt; v</code> and <code>v &lt;* A</code></p>",
        "id": 245540367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625909542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Mario, do you have a way to pick a particular coercion?<br>\n I don't quite understand your last reply, could you please give more explanation?</p>",
        "id": 245540439,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625909669
    },
    {
        "content": "<p>btw, <code>#check A.to_mul_vec.coe</code> also reports an error.</p>",
        "id": 245540458,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625909748
    },
    {
        "content": "<p>The notation is ambiguous about a mathematically relevant distinction, so even if lean worked perfectly here I wouldn't recommend it</p>",
        "id": 245540538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625909817
    },
    {
        "content": "<p>you shouldn't use <code>A v</code> to mean both <code>A*v</code> and <code>v*A</code></p>",
        "id": 245540546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625909831
    },
    {
        "content": "<p>Because if you did, it would be ambiguous when <code>I = J</code></p>",
        "id": 245540560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625909875
    },
    {
        "content": "<p>even if one of them is type incorrect and so lean knows what you are talking about, readers will be confused</p>",
        "id": 245540606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625909919
    },
    {
        "content": "<p>Not just readers, people trying to prove things about your definition will get ambiguous goal states they have to hover over to interpret.</p>",
        "id": 245540620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625909962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/has_coe/near/245540367\">said</a>:</p>\n<blockquote>\n<p>I would do something like <code>A *&gt; v</code> and <code>v &lt;* A</code></p>\n</blockquote>\n<p>As I noticed <code>\\u A</code> and <code>A v</code> are ambiguous in the <code>(A : matrix I I α)</code> case , I attempted to use the dot notation. Then Mario pointed out to me that there is a bug.  <br>\n<code> *&gt;</code> and <code>&lt;*</code> have already been used to mean <code>has_seq_right</code> and <code>has_seq_left</code>(, of which I don't quite understand the purpose).<br>\nWhat I am not sure is if you mean to use <code>has_seq_right</code> and <code>has_seq_left</code> or just overload of notations?</p>",
        "id": 245540898,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625910469
    },
    {
        "content": "<p>Have you considered <code>A • v</code> as a spelling?</p>",
        "id": 245541253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625911050
    },
    {
        "content": "<p>Oh, I guess that only works for square matrices</p>",
        "id": 245541321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625911148
    },
    {
        "content": "<p>No. <code>•</code> is used for scalar multiplication. I am not sophisticated in playing around with abused notations.</p>",
        "id": 245541565,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625911484
    },
    {
        "content": "<p>I'd argue that for square matrices <code>A • v</code> is actually the right syntax, since  it satisfies <code>module (matrix n n R) (n → R)</code>. Lean 4's heterogenous multiplication would help a lot here</p>",
        "id": 245541726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625911735
    },
    {
        "content": "<p>Maybe this is a little bit far away from my original question. As <code>#check (↑A : (I → α) → (I → α))</code> is ambiguous, is there a way to invoke <code>to_mul_vec</code> or <code>to_vec_mul</code> manually?</p>",
        "id": 245541881,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625912029
    },
    {
        "content": "<p>Yes, you can use <code>@has_coe.coe _ _ to_vec_mul A</code></p>",
        "id": 245542249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625912549
    },
    {
        "content": "<p>But this is an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem, if your notation is ambiguous then you shouldn't have defined it in the first place.</p>",
        "id": 245542263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625912583
    },
    {
        "content": "<p>Thanks and good point! I was exploiting things in Lean.</p>",
        "id": 245544588,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625916026
    }
]