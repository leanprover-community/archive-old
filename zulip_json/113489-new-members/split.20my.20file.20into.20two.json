[
    {
        "content": "<p>Now my file is about 3000 lines, and Lean is way too slow.   So I thought the cure is to put the first 2000 lines in <br>\nfile1.lean and the last 1000 lines in file2.lean  and put  \"import file1\"   at the top of file2.</p>\n<p>But that caused a lot of error messages from file2,  such as </p>\n<p>All Messages (46)<br>\ninf2.lean:3:0<br>\ndeclaration 'lemma9c' uses sorry<br>\ninf2.lean:3:29<br>\nunknown identifier 'M'</p>\n<p>I guess the end of file1  automatically closes a section or a namespace or something.   What is the right way <br>\nto split my file?</p>",
        "id": 209740986,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599800407
    },
    {
        "content": "<p>A module is a single file, starting with a list of imports, and then the rest is as if it is contained in an implicit section.  The module system is how Lean resolves which code to load for <code>import</code> statements.</p>\n<p>A section groups together things like <code>variables</code>, <code>open</code>, and other locally defined things (such as <code>private</code> definitions). Orthogonal to modules, there is a namespace system that groups together definitions under the prefix specified by the <code>namespace</code> declaration -- this also introduces an implicit section for local things.  (Namespaces are sort of like Common Lisp <em>packages</em> or Mathematica <em>contexts</em>.)  Since a module is as if there is an implicit section, you'll need to <code>open</code> the namespaces you're interested in within each separate module.</p>\n<p>I use sections for two reasons: (1) grouping together related definitions for documentation reasons only and (2) to control the current variables and opened namespaces.  (By the way, <code>open</code> essentially just copies the definitions within a given namespace into the current section's list of names that can be referenced.  There's no corresponding operation of closing a namespace.)</p>\n<p>There's a chance some of your errors might be because of stale olean files, so you might need to delete them (and maybe restart Lean? I'm not sure).</p>",
        "id": 209743900,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599804504
    },
    {
        "content": "<p>If   file1  has  import xxx   at the top and file2 has import file1  at the top then <br>\nare things defined in xxx  accessible in file2?   That is, is \"import\" transitive?</p>",
        "id": 209744285,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599805079
    },
    {
        "content": "<p>Yes</p>",
        "id": 209744674,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599805507
    },
    {
        "content": "<p>OK,  I split my file,  and it seemed at first to speed up,  but then it started going slowly again, i.e.,  it takes a long time to <br>\nprocess (like 15 seconds or longer)  after I type a new proof step, and the fan goes on (meaning all four cores are in use). <br>\nWhat can I do about this?</p>",
        "id": 209748125,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599808806
    },
    {
        "content": "<p>you can compile the first file into an olean</p>",
        "id": 209748941,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599809407
    },
    {
        "content": "<p>and whenever everything start compiling again, just restart Lean (Ctrl+Shift+P)</p>",
        "id": 209748966,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599809433
    },
    {
        "content": "<p>If you're on VSCode too it might be helpful to restrict what files/lines Lean is checking, if you open the <a href=\"https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette\">Command Palette</a> and type \"lean check\" you can see the various options (check open files only, check only lines above cursor etc.)</p>",
        "id": 209754815,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1599814154
    },
    {
        "content": "<p>Thanks Alex, command palette  helped a lot and only took seconds.   I don't know how to compile to olean and will try to learn that tomorrow.  Unless command palette makes it unnecessary.</p>",
        "id": 209757144,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599815712
    },
    {
        "content": "<p>Re: oleans see here <span class=\"user-mention\" data-user-id=\"284844\">@Michael Beeson</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> - <a href=\"https://leanprover-community.github.io/leanproject.html#building-a-project\">https://leanprover-community.github.io/leanproject.html#building-a-project</a></p>",
        "id": 209758744,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1599816752
    },
    {
        "content": "<p>Or for a single file, you can run <code>lean --make blah.lean</code></p>",
        "id": 209758839,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1599816803
    }
]