[
    {
        "content": "<p>I'm playing around with Pi types and I've come across something where I don't know how to tell lean what to do. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">instance</span> <span class=\"n\">list_as_func</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xs</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xs</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">absurd</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xs</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xs</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">absurd</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>How can I show that two Pi types are the same?</p>",
        "id": 198654784,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590402880
    },
    {
        "content": "<p>you can't</p>",
        "id": 198654804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590402904
    },
    {
        "content": "<p>your theorem is nonsense</p>",
        "id": 198654817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590402914
    },
    {
        "content": "<p>sad HoTT noises</p>",
        "id": 198654998,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590403087
    },
    {
        "content": "<p>Actually, looking at it carefully I think this theorem might be true</p>",
        "id": 198655002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590403095
    },
    {
        "content": "<p>the question is still nonsense though</p>",
        "id": 198655009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590403105
    },
    {
        "content": "<p>But I have seen lean go ahead and simplify things in the type, too. Like for instance it does understand that <code>{ i // i &lt; [nat, nat] i}</code> is the same as <code>{i // i &lt; 0 + 1 + 1}</code>.</p>",
        "id": 198655012,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590403114
    },
    {
        "content": "<p>If it's true then the proof should be <code>rfl</code>, right?</p>",
        "id": 198655020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590403124
    },
    {
        "content": "<p>yes</p>",
        "id": 198655024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590403130
    },
    {
        "content": "<p>Rule of thumb: don't try to prove that types are equal. My understanding is that in Lean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}=\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> is undecidable. Prove your types are <code>equiv</code> instead.</p>",
        "id": 198655042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590403149
    },
    {
        "content": "<p>It is okay to prove types are equal by defeq, but if they aren't then you shouldn't be trying to prove an equality</p>",
        "id": 198655049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590403163
    },
    {
        "content": "<p>This is definitely an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> question though. What are you trying to do?</p>",
        "id": 198655085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590403195
    },
    {
        "content": "<p>I think they're not equal because you need funext &amp; cases on <code>i</code> to prove it</p>",
        "id": 198655124,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590403203
    },
    {
        "content": "<p>oh hmm</p>",
        "id": 198655141,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590403225
    },
    {
        "content": "<p>The first components are defeq, the second are regular eq, so it's provable</p>",
        "id": 198655146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590403232
    },
    {
        "content": "<p>In that case I guess maybe they are non-definitionally equal yes</p>",
        "id": 198655153,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590403238
    },
    {
        "content": "<p>I know that we can use a proof <code>x=y</code> to rewrite using <code>rw</code>, but that only works on the term level, not on the type level.</p>\n<p>Is there a deep reason, why if I can prove something like <code>forall i, [nat, nat] i = nat</code>, I shouldn't be allowed to do a rewrite of the pi type?</p>",
        "id": 198655336,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590403428
    },
    {
        "content": "<p>I understand, that it would want a proof, of course, because it would have to go and apply a potentially large amount of unfolding and whatnot and it may not be decidable. But if I have the proof, shouldn't it be possible to do the rewrites?</p>",
        "id": 198655420,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590403519
    },
    {
        "content": "<p>mwe:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">pi_congr</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 198655521,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590403606
    },
    {
        "content": "<p>I have no clue how to do this</p>",
        "id": 198655524,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590403612
    },
    {
        "content": "<p>But the real question is why someone would want to do this. <code>=</code> is overrated. It's not the right concept anyway, for types. It's a random equivalence relation, which seems very different to the equivalence relations on mathematical objects which mathematicians carry around in their heads.</p>",
        "id": 198655561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590403670
    },
    {
        "content": "<p>aha I know how to do this</p>",
        "id": 198655565,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590403678
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">pi_congr</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">funext</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 198655609,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590403692
    },
    {
        "content": "<p>boom</p>",
        "id": 198655610,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590403693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/type.20rewriting.20.2F.20type.20extensionality.3F/near/198655042\">said</a>:</p>\n<blockquote>\n<p>Rule of thumb: don't try to prove that types are equal. My understanding is that in Lean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}=\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> is undecidable. Prove your types are <code>equiv</code> instead.</p>\n</blockquote>\n<p>Say I do this (in my case it would be easy to show the equivalence), what then? Can you use it to rewrite terms with it?</p>",
        "id": 198655614,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590403695
    },
    {
        "content": "<p>Maybe they'd want to do it because they're an UG in the summer with nothing better to do :-)</p>",
        "id": 198655622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590403704
    },
    {
        "content": "<p>Yes <code>rw</code> works with <code>=</code>.</p>",
        "id": 198655626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590403716
    },
    {
        "content": "<p>with = yes</p>",
        "id": 198655637,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590403732
    },
    {
        "content": "<p>but what about simeq</p>",
        "id": 198655645,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590403739
    },
    {
        "content": "<p>Then you need a tactic.</p>",
        "id": 198655655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590403753
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">from</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198655680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590403791
    },
    {
        "content": "<p>I think you are barking up the wrong tree. You probably don't need to rewrite across equivs either</p>",
        "id": 198655759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590403853
    },
    {
        "content": "<p>Right. I was <em>very</em> surprised about this.</p>",
        "id": 198655769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590403868
    },
    {
        "content": "<p>When I realised I couldn't prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mi>g</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/fg]=R[1/f][1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> in Lean (these are two rings which a mathematician would call equal, but if you put a gun to their head they might confess that they are merely canonically isomorphic) I instantly started banging on about an <code>equiv_rw</code> tactic being of utmost importance -- and Scott Morrison even <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#equiv_rw\">made a start on one</a>.</p>",
        "id": 198655867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590403934
    },
    {
        "content": "<p>The problem with these equalities of types isn't proving them, it's everything that comes after that.</p>",
        "id": 198655897,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590403984
    },
    {
        "content": "<p>But then when Ramon Fernandez Mir started work on schemes, he didn't need the tactic anyway, he just worked with the universal property instead</p>",
        "id": 198655901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590403992
    },
    {
        "content": "<p>If you have a type <code>A</code> and you proved that <code>h : A = A'</code> and you want to rewrite along <code>h</code>, presumably you also have a value of type <code>A</code> and that value will not just come along for the ride.</p>",
        "id": 198655914,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590404021
    },
    {
        "content": "<p>The origin of this whole mess was this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">prod_to_pi</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hi</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n\n\n<p>So it comes from choosing a crappy index type. Using boolean instead would simplify type.</p>",
        "id": 198655930,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590404038
    },
    {
        "content": "<p>but I just wanted to explore what can be done, really.</p>",
        "id": 198655975,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590404056
    },
    {
        "content": "<p>not proving anything too meaningful, but more like trying to figure out how to write things down so that the proofs are easy to deal with.</p>",
        "id": 198655993,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590404091
    },
    {
        "content": "<p>that is properly an equiv, and you should use either <code>bool</code> or a bespoke inductive type for the index type</p>",
        "id": 198655999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590404098
    },
    {
        "content": "<p>To do that, I basically have to try things out and see where (and more importantly why) they fail.</p>",
        "id": 198656025,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590404128
    },
    {
        "content": "<p>This is exactly how I got my understanding of <code>=</code> within my domain -- I just tried to make a bunch of pure mathematical objects and learnt a lot.</p>",
        "id": 198656044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590404151
    },
    {
        "content": "<p>So yes, sorry for the question being not meaningful for practical purposes. Now I basically learnt, that it's not really useful to talk about definitional equality of types.</p>\n<p>I had an <code>exists ...</code> that I wanted to instantiate using my type. And it said it couldn't unify, precisely because it didn't know the types were the same. The expression was the same.</p>",
        "id": 198656196,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590404297
    },
    {
        "content": "<p>Split by cases twice and then eliminate the 3rd case.</p>",
        "id": 198656210,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590404314
    },
    {
        "content": "<p>Definitional equality of types is fine. Because if <code>A</code> is definitionally equal to <code>A'</code> and <code>a : A</code> then also <code>a : A'</code>.<br>\nIt's the non-definitional equality of types that is problematic.</p>",
        "id": 198656245,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590404365
    },
    {
        "content": "<p>Even when you can prove it, you probably shouldn't.</p>",
        "id": 198656273,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590404396
    },
    {
        "content": "<p>The problem is that as a mathematician I don't want to think about \"the\" definition of an object -- I only care about the specification of the object, and its implementation is a matter for the CS people. I never quite know how much weight to put on definitional equality.</p>",
        "id": 198656367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590404450
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">index</span> <span class=\"bp\">|</span> <span class=\"n\">left</span> <span class=\"bp\">|</span> <span class=\"n\">right</span>\n\n<span class=\"n\">def</span> <span class=\"n\">index</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">index</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">index</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">index</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n\n<span class=\"n\">def</span> <span class=\"n\">prod_to_pi</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">index</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"n\">index</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"n\">index</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pi_to_prod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">index</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">index</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">index</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">prod_equiv_pi</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"err\">≃</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">index</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">prod_to_pi</span><span class=\"o\">,</span> <span class=\"n\">pi_to_prod</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"bp\">⟩;</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"bp\">_|_</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 198656386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590404478
    },
    {
        "content": "<p>yes, clearly having my own DU is the right way to go. And I knew that the moment, I realised that <code>{i // i &lt; 2}</code> is NOT a type consisting of two elements, but rather <code>nat</code> with a proof of <code>i &lt; 2</code>.</p>",
        "id": 198656592,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590404682
    },
    {
        "content": "<p>So any pattern matching requires me to prove the impossible case.</p>",
        "id": 198656607,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590404701
    },
    {
        "content": "<p>The Pi extensionality, if you will, was more like a curiosity after that.</p>",
        "id": 198656654,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590404742
    },
    {
        "content": "<p>I mean, it <em>is</em> a type with two elements, you can prove that, but when it comes to equations in types you really want things to be defeq and that means using inductive types and recursive definitions such that everything evaluates smoothly</p>",
        "id": 198656713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590404777
    },
    {
        "content": "<p>makes a lot of sense.</p>",
        "id": 198656832,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590404902
    }
]