[
    {
        "content": "<p>I know I've been asking a lot about Cartesian products, but I've been having some trouble and want to ask one more. I have the below code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span>\n</code></pre></div>\n<p>In my line starting with <code>have h2</code>, I'm getting an error: <code>failed to synthesize type class instance</code>. Does anyone have an idea about how I can fix this?</p>",
        "id": 270129283,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643674441
    },
    {
        "content": "<p>what are your <code>import</code>s?</p>",
        "id": 270129477,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643674552
    },
    {
        "content": "<p>only <code>open set</code></p>",
        "id": 270129594,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643674625
    },
    {
        "content": "<p>you may need the brackets around the <code>B ∩ C</code> on the <code>have</code> in the last line</p>",
        "id": 270129610,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643674634
    },
    {
        "content": "<p>wow, clutch. Thanks!</p>",
        "id": 270129670,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643674667
    },
    {
        "content": "<p>Okay, I wrote up a proof in Lean about the equality of Cartesian products, but I'm having getting it to compile. I proved both sides of the equality, but I'm now getting errors when I try to finish off the proof with <code>eq_of_subset_of_subset</code>.  What command should I use to prove the equality of Cartesian products?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">eq_of_subset_of_subset</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq.subst</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h₃.right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mk_mem_prod</span> <span class=\"o\">(</span><span class=\"n\">h₃.left</span><span class=\"o\">)</span> <span class=\"n\">h₅</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h₃.right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mk_mem_prod</span> <span class=\"o\">(</span><span class=\"n\">h₃.left</span><span class=\"o\">)</span> <span class=\"n\">h₆</span><span class=\"o\">),</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h₄</span> <span class=\"n\">h₅</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n      <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h₁.left</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq.subst</span> <span class=\"n\">h₄</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h₁.right</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₇</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₈</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq.subst</span> <span class=\"n\">h₇</span> <span class=\"n\">h₆</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h₅.left</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"o\">(</span><span class=\"n\">h₅.right</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₈.right</span><span class=\"o\">))),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">prod_mk_mem_set_prod_eq</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">eq.subst</span> <span class=\"n\">h₃</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 270138806,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643680418
    },
    {
        "content": "<p>I've also tried <code>ext</code> with <code>iff.intro</code>, but I'm not able to get it to work</p>",
        "id": 270141909,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1643682828
    },
    {
        "content": "<p>Is there a reason you're not using tactic mode?</p>",
        "id": 270162958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643700338
    },
    {
        "content": "<p><code>ext, simp</code> can probably close this, if we don't already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.prod_inter\">docs#set.prod_inter</a></p>",
        "id": 270163059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643700432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466607\">@Andrew Lubrino</span> <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> . Can you please include your imports and opens in your initial post so that other people can run your code more easily?</p>",
        "id": 270169786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643704886
    }
]