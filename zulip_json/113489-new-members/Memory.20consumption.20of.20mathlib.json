[
    {
        "content": "<p>Hey y'all, new Lean user here :) I'm trying to do some simple proofs using mathlib and am encountering a memory error:</p>\n<blockquote>\n<p>excessive memory consumption detected at 'expression traversal' (potential solution: increase memory consumption threshold)</p>\n</blockquote>\n<p>I've already allowed Lean to use up to 12GB of memory. How much more should I allocate to compile it the first time?  Is there a memory leak in mathlib?</p>",
        "id": 214228505,
        "sender_full_name": "Meyer Zinn",
        "timestamp": 1603391290
    },
    {
        "content": "<p>If you set up your local copy of mathlib using leanproject, it should have downloaded the oleans files and you shouldn't have to recompile mathlib itself. How did you download mathlib, and how did you open it in your editor?</p>",
        "id": 214228711,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603391379
    },
    {
        "content": "<p>I just changed the reference in the tutorials project, and re-ran the build. However, I may have found the issue--I thought I'd increased the memory limit by adding a command-line flag to the VSCode settings and did not even see the specific setting for memory limits. It seems to build fine now that I've actually increased the limit.</p>",
        "id": 214230803,
        "sender_full_name": "Meyer Zinn",
        "timestamp": 1603392334
    },
    {
        "content": "<p>how long does the build take?</p>",
        "id": 214231236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603392511
    },
    {
        "content": "<p>are you building mathlib or the tutorials project?</p>",
        "id": 214231249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603392523
    },
    {
        "content": "<p>Did you mean you changed the reference to the version of mathlib in the toml file? Did you run <code>leanproject get-mathlib-cache</code> and then restart the Lean interpreter in VSCode?</p>",
        "id": 214231593,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603392695
    },
    {
        "content": "<p>The \"orange bars\" that show up next to lines in VS Code indicate that Lean is processing them; in almost all cases they should disappear within 10 seconds or so when you open a new file; if they stick around any longer, (especially near the \"import\" lines) that's a strong indication that the Lean server is recompiling mathlib, which is almost always not what you want. For one, when the Lean server launched by your editor compiles mathlib, it doesn't write <code>olean</code> files to disk, which means that next time you open the project the same thing might happen.</p>\n<p>If you do run into this, the solution is to go to the command line and run either <code>leanproject get-mathlib-cache</code> to get the precompiled olean files from our Azure server, or <code>leanproject build</code> and wait an hour or so for mathlib to build locally.</p>",
        "id": 214235266,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603394262
    },
    {
        "content": "<p>It took less than five minutes to build from scratch (on a fairly beefy computer). I'll run the get-mathlib-cache command and see what it does.</p>",
        "id": 214235589,
        "sender_full_name": "Meyer Zinn",
        "timestamp": 1603394403
    },
    {
        "content": "<p>Yeah, an hour is the worst case (single-threaded, no previous olean files).</p>",
        "id": 214235791,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603394496
    },
    {
        "content": "<p>Ah, what did you mean when you say you \"changed the reference\" above? I'm guessing you either edited <code>leanpkg.toml</code> or ran <code>leanproject up</code>?</p>",
        "id": 214236028,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603394612
    },
    {
        "content": "<p>I edited the TOML.</p>",
        "id": 214237351,
        "sender_full_name": "Meyer Zinn",
        "timestamp": 1603395218
    },
    {
        "content": "<p>The TOML edit means that you're likely having older oleans but newer lean files. Which triggers the recompilation. try <code>leanproject get-mathlib-cache</code>, which will sync the oleans to the commit you've indicated in the toml.</p>",
        "id": 214237608,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603395348
    },
    {
        "content": "<p>Then a restart of the lean interpreter (via VSCode) will update the interpreter cache to use those oleans. so the oleans will now correspond to the lean files, and won't have to recompile any of them.</p>",
        "id": 214237728,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603395384
    },
    {
        "content": "<p>A more interesting question to us is: why did you feel the need for all those manipulations? Why not following the instructions (which never ever mention modifying the toml file)?</p>",
        "id": 214237961,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603395498
    },
    {
        "content": "<p>I can't answer for the original person, and I'm guilty of the same sin of editing the TOML file -- but TOML is an odd choice for a non-human-editable file. It'd perhaps be a bit clearer if it were specifically a non-human-editable file-format as maybe one additional signal it's not meant to be edited. =</p>",
        "id": 214254982,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603405166
    },
    {
        "content": "<p>it's quite human editable</p>",
        "id": 214255400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603405501
    },
    {
        "content": "<p>Well I agree but I've seen Patrick say a few times \"no one should edit it directly\" :)</p>",
        "id": 214255427,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603405525
    },
    {
        "content": "<p>but <code>leanproject</code> also makes it easy to manage without direct editing</p>",
        "id": 214255446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603405543
    },
    {
        "content": "<p>I think patrick associates editing the TOML file with people who take installation \"into their own hands\" and end up with strange configuration messes</p>",
        "id": 214255589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603405615
    },
    {
        "content": "<p>which is understandably frustrating since <code>leanproject</code> was written specifically to solve that problem</p>",
        "id": 214255627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603405644
    },
    {
        "content": "<p>Ah, that's probably fair.</p>",
        "id": 214255631,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603405646
    },
    {
        "content": "<p>YEah.</p>",
        "id": 214255634,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603405649
    },
    {
        "content": "<p>I mean I'd still say if you're coming from somewhere else and you see a TOML file you'll assume you should edit it, so personally I wouldn't find it too surprising if someone did so. But I guess I see the conundrum.</p>",
        "id": 214255717,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603405700
    },
    {
        "content": "<p>I liken it to the git configuration file</p>",
        "id": 214255800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603405769
    },
    {
        "content": "<p>you can write your settings in the file directly, or if you prefer use <code>git config</code> and it writes to the file for you</p>",
        "id": 214255829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603405798
    },
    {
        "content": "<p>Yeah :) I think it'd be an interesting usability study to know who does what more -- I essentially never use <code>git config</code> personally, but maybe it's a good analogy indeed since some sites will tell new users which <code>git config</code> command lines to paste.</p>",
        "id": 214255916,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603405847
    },
    {
        "content": "<p>You also have to keep in mind that there is some history here; <code>leanpkg</code> was written to solve these problems and <code>leanpkg.toml</code> is its frontend, but now <code>leanproject</code> is a wrapper around that and it produces a <code>leanpkg.toml</code> file for consumption by <code>lean</code> and <code>leanpkg</code></p>",
        "id": 214255970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603405901
    },
    {
        "content": "<p><em>nod</em></p>",
        "id": 214256105,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603405997
    },
    {
        "content": "<p>I don't really understand all the reasoning behind why <code>leanproject</code> needs to be a separate program from <code>leanpkg</code>, and it's obviously confusing for newcomers. I think it was just that <code>leanpkg</code> is written in <code>lean</code> and patrick wanted to write python?</p>",
        "id": 214256254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603406140
    },
    {
        "content": "<p>it also has a bunch of mathlib-specific features while <code>leanpkg</code> is in core and is mostly lean-only</p>",
        "id": 214256318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603406181
    },
    {
        "content": "<p>Possibly if it wants to front leanpkg entirely for someone who doesn't want to use it it could plop leanpkg.toml into and out of existence only when it's communicating with leanpkg (if it doesn't have some other way to communicate). But maybe that was also considered</p>",
        "id": 214256824,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603406621
    },
    {
        "content": "<p>personally I expected that the toml file was editable and ran into the same problem at first - the reason people use markup files like yaml for config is usually so that you can edit them, and in most programming ecosystems like npm in javascript or requirements.txt in python, you are supposed to edit those files and it will not cause a massive recompilation</p>",
        "id": 214257630,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603407364
    },
    {
        "content": "<p>it seems like people run into the problem of \"it is forever recompiling\" often enough that maybe some level of the tooling can alert you about it automatically?</p>",
        "id": 214257653,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603407406
    },
    {
        "content": "<p>one trick is, if it isn't supposed to be edited, you can keep it gzipped it on disk, so that it's impossible for people to edit it ;-)</p>",
        "id": 214257734,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603407499
    },
    {
        "content": "<p>or rename with a leading <code>.</code></p>",
        "id": 214257796,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603407591
    },
    {
        "content": "<p>well, you typically do edit those, like your <code>.emacs</code></p>",
        "id": 214257870,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603407629
    },
    {
        "content": "<p>Yeah it's kind of trying to be a lockfile it sounds like, except because of the hysterical raisins it's TOML and has to be named as is since that's what leanpkg is looking for</p>",
        "id": 214257882,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603407653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/Memory.20consumption.20of.20mathlib/near/214257882\">said</a>:</p>\n<blockquote>\n<p>hysterical raisins</p>\n</blockquote>\n<p>Can I have some? <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 214258009,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603407793
    },
    {
        "content": "<p>If <code>leanproject</code> doesn't expect the <code>leanpkg.toml</code> file to be edited by a human then it could add a comment to the file to this effect</p>",
        "id": 214258693,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603408478
    },
    {
        "content": "<p>I think it's totally fine to edit <code>leanpkg.toml</code> yourself if you know what you're doing. I don't think <code>leanproject</code> has any trouble with manually edited <code>leanpkg.toml</code> files. It's just that people might not know to manually run <code>leanproject get-mathlib-cache</code> afterwards and then they end up compiling mathlib in their editor.</p>",
        "id": 214258895,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603408662
    },
    {
        "content": "<p>what if leanproject just got the cache for me</p>",
        "id": 214258914,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603408679
    },
    {
        "content": "<p>One wrinkle is that <code>leanpkg</code> (which <code>leanproject</code> runs) removes comments from <code>leanpkg.toml</code>.</p>",
        "id": 214258967,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603408692
    },
    {
        "content": "<p>How would leanproject know to get the cache if all you did was edit <code>leanpkg.toml</code> and open VS Code or emacs?</p>",
        "id": 214258987,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603408712
    },
    {
        "content": "<p>Are you suggesting that the editor should always run <code>leanproject</code>?</p>",
        "id": 214259000,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603408728
    },
    {
        "content": "<p>well... sure?</p>",
        "id": 214259032,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603408764
    },
    {
        "content": "<p>could just run <code>leanproject --get-the-cache-if-I-should-obviously-get-the-new-cache</code></p>",
        "id": 214259049,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603408779
    },
    {
        "content": "<p>It's a good idea; I recorded it as a vscode-lean issue <a href=\"https://github.com/leanprover/vscode-lean/issues/228\">here</a>.</p>",
        "id": 214259275,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603408995
    },
    {
        "content": "<p>or, if we consider the goal to be to minimize the number of identical complaints in zulip that compiling is taking forever, with a minimal amount of work, we could just change the \"compiling is taking forever\" error message to say \"try running leanproject get-cache\"</p>",
        "id": 214259406,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603409131
    },
    {
        "content": "<p>So the comment in <code>leanpkg.toml</code> (added by <code>leanproject</code>) should be something like:</p>\n<blockquote>\n<p>This file is meant to be managed by the \"leanproject\" script. Do not edit this file unless you know what you are doing.</p>\n</blockquote>\n<p>Editing <code>leanpkg.toml</code> is simply the first idea one gets when he looks into the directory of a lean project, and he does not remember all the various commands for lean package management.</p>",
        "id": 214293258,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603446726
    },
    {
        "content": "<p>In some languages, a newly generated manifest/config file will start with a comment along the lines of <code>users aren't really supposed to edit this directly, learn more [here]</code>. Maybe something like that is appropriate for a newly generated leanpkg.toml.</p>",
        "id": 214299219,
        "sender_full_name": "Chris B",
        "timestamp": 1603451021
    },
    {
        "content": "<p>IE the default cargo.lock produced by Rust's package manner starts with:</p>\n<div class=\"codehilite\" data-code-language=\"markdown\"><pre><span></span><code><span class=\"gh\"># This file is automatically @generated by Cargo.</span>\n<span class=\"gh\"># It is not intended for manual editing.</span>\n</code></pre></div>",
        "id": 214299453,
        "sender_full_name": "Chris B",
        "timestamp": 1603451176
    },
    {
        "content": "<p>Let us repeat once more: there is no issue at all editing this file by hand <em>if you know what you are doing</em>. The message is: if you are a beginner and edit this file, don't be surprised when things don't work.</p>",
        "id": 214300662,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603452189
    },
    {
        "content": "<p>The message coming back to us is that it's all well and good you saying this here, but this is not at all clear before the chaos starts because there is no such warning in the toml.</p>",
        "id": 214303158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603453585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Memory.20consumption.20of.20mathlib/near/214300662\">said</a>:</p>\n<blockquote>\n<p>Let us repeat once more: there is no issue at all editing this file by hand <em>if you know what you are doing</em>. The message is: if you are a beginner and edit this file, don't be surprised when things don't work.</p>\n</blockquote>\n<p>I understand, but your original question was \"why did you feel the need for all those manipulations? Why not following the instructions (which never ever mention modifying the toml file)?\".  The point is that some languages use comments to directly address users within their configuration files, the contents are obviously variable. </p>\n<p>This applies to your question in that \"the directions don't mention editing the toml file\" is not the same thing as \"the toml files tells you not to edit the toml file (unless you know what you're doing)\".  You can put whatever version  of<code>If you're new to Lean, please read [link] before editing the contents of this file.</code> in there.</p>",
        "id": 214306434,
        "sender_full_name": "Chris B",
        "timestamp": 1603455960
    },
    {
        "content": "<p>Was just about to throw together the trivial PR (which I'm sure we can bikeshed on), but I think said trivial PR may not be completely trivial since I think the leanpkg TOML parser  needs a fix</p>",
        "id": 214308524,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603457269
    },
    {
        "content": "<p>Will send the mathlibtools one anyway but I guess it can't be merged until that's investigated (and I haven't had coffee yet)</p>",
        "id": 214308582,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603457286
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-tools/pull/85\">https://github.com/leanprover-community/mathlib-tools/pull/85</a> for anyone's bikeshedding pleasure.</p>",
        "id": 214309311,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603457742
    },
    {
        "content": "<p>Great, I'll have a look during the week-end. I also have some suggestion by Floris in the leanproject backlog.</p>",
        "id": 214325251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603465639
    },
    {
        "content": "<p>Cool and thanks for being open to it :) I'm sure as usual this is a thing that you've thought about like 20 times already so it's probably not fun to revisit.</p>",
        "id": 214327903,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603466942
    },
    {
        "content": "<p>In fact people continually come here saying \"I did random stuff not in the instructions and now it's broken\" and of course this is frustrating to read, but it seems difficult to stop this happening. I think part of the problem is that if you're going to engage with lean at all then you're probably the kind of person who might fiddle with config files.</p>",
        "id": 214330054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603468037
    },
    {
        "content": "<p>I would like to point out that I did try to follow the instructions (not in their entirety), but I could not find a description of how <code>leanproject</code> works and what are the commands that it executes.</p>\n<p>Somewhat related to memory timeouts, one command that I just learned today from <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span> <span class=\"c1\">--make src/data/finset/lattice.lean</span>\n</code></pre></div>\n\n<p>which, as far as I can tell, allows you to build locally only the file specified in the path.  I would have liked to know about this command earlier!</p>",
        "id": 214330483,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603468258
    },
    {
        "content": "<p>I guess we need two kinds of docs... for people that want to casually experiment with mathlib, and for people who want to make (more than one) PRs</p>",
        "id": 214330666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603468361
    },
    {
        "content": "<p>I mean this is obviously a common thing for better or worse, there's people who just won't read docs, whether because they're too excited to use lean or otherwise, so to me it's basically \"make things as error-proof as can be reasonably\", and then yeah the docs may fill in the rest.</p>",
        "id": 214330927,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603468497
    },
    {
        "content": "<p>For 10 years (quite literally) I think we've (in Python land) been answering the same questions (about someone setting up Python wrong on ubuntu, or touching their system python, or etc. etc.)</p>",
        "id": 214330987,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603468530
    },
    {
        "content": "<p>All things which are documented, folks just have limited initial reading buffers :)</p>",
        "id": 214331016,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603468547
    },
    {
        "content": "<p>I think the main issue is that the mathlib build system is unusual compared to other build systems. so people come in expecting it to work like python or node.js and it doesn't. in particular, the situation where you cannot compile the library on your own machine, but the packaging system does not distribute prebuilt object files at import time, instead you manually grab the cached olean files and that lookup is based on git hashes which normally would not be worked into a package management system.</p>",
        "id": 214346133,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603476157
    },
    {
        "content": "<p>it doesn't really make much sense to try to improve the build system now, though, if lean 4 is going to use a totally incompatible one, and it is at least probable that mathlib ends up migrating to lean 4</p>",
        "id": 214346383,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603476271
    },
    {
        "content": "<p>You can compile the library on your own machine though. We just recommend that people avoid it if they can.</p>",
        "id": 214348496,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603477273
    }
]