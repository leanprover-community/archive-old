[
    {
        "content": "<p>I want to prove <code>p or q</code>, is there any tactic that changes the stage to having <code>not p</code> in the context and <code>q</code> as the goal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246202312,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626427922
    },
    {
        "content": "<p>I can use <code>by_cases p</code>. Is there any one step tactic?</p>",
        "id": 246202513,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626428094
    },
    {
        "content": "<p>there's always a one step tactic if the step is <code>refine</code></p>",
        "id": 246202557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626428131
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">or_iff_not_imp_left.2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246202663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626428199
    },
    {
        "content": "<p>Suppose I have four goals in the info view, does Lean have any feature that allows me to use some tactic, say <code>rw [h]</code>, to only certain goals, say goals 2 and 3 only.</p>",
        "id": 247023295,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627069583
    },
    {
        "content": "<p>One way (if the rewrite only applies to those goals) is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#any_goals\">tactic#any_goals</a> as <code>any_goals { rw h }</code> (or do <code>all_goals { try { rw [h] }}</code>) otherwise there have been some discussions, and example tactics doing this <a href=\"#narrow/stream/113488-general/topic/work_on_goals.3F/near/193204723\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/work_on_goals.3F/near/193204723</a> and  <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/work_on_goals/near/220310832\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/work_on_goals/near/220310832</a>. I'm not sure if either of them were ever PRed <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ?</p>",
        "id": 247024615,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1627070382
    },
    {
        "content": "<p>Something I use a lot is the or else combiner,  &lt;|&gt;. This does left tactic unless it fails, then it does right tactic</p>",
        "id": 247025628,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627070997
    },
    {
        "content": "<p>So all_goals { rw h orelse simp} usually works well for this sort of thing (sorry for formatting, on mobile)</p>",
        "id": 247025703,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627071040
    },
    {
        "content": "<p>If the other goals actually don't have <code>h</code>, will <code>all_goals { try { rw [h] }}</code> fail?</p>",
        "id": 247025927,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627071166
    },
    {
        "content": "<p>I ended up PRing improvements to <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#case\">tactic#case</a> instead of any of the tactics in that thread.</p>",
        "id": 247028239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627072439
    },
    {
        "content": "<p>No, it will not fail. You should use any_goals instead for that purpose, without the try.</p>",
        "id": 247030950,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627073977
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">C</span> <span class=\"n\">P</span> <span class=\"n\">q</span> <span class=\"n\">A</span> <span class=\"n\">V₀</span> <span class=\"n\">Vads</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">θ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">θ</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hVads</span> <span class=\"o\">:</span> <span class=\"n\">Vads</span> <span class=\"bp\">=</span> <span class=\"n\">V₀</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">Vads</span> <span class=\"bp\">/</span> <span class=\"n\">A</span><span class=\"o\">):</span>\n  <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">P</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hA</span> <span class=\"o\">{</span><span class=\"n\">single_pass</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hA</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span> <span class=\"o\">{</span><span class=\"n\">single_pass</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hVads</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I want to taking out  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub><mi mathvariant=\"normal\">&amp;</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\"> \\theta_{0} \\&amp; C  </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">&amp;</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> from inside the summation in hq and cancel them, which tactic works here?</p>",
        "id": 272868079,
        "sender_full_name": "Parivash",
        "timestamp": 1645564651
    },
    {
        "content": "<p>That's not a tactic you're looking for, you need a lemma. You are going to come unstuck soon because you have no hypotheses about anything converging and Lean defines any divergent sum to be 0. The lemmas you'll need are <code>tsum_mul_right</code> and <code>tsum_mul_left</code>.</p>",
        "id": 272874428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645568317
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 272875494,
        "sender_full_name": "Parivash",
        "timestamp": 1645568795
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">C</span> <span class=\"n\">P</span> <span class=\"n\">q</span> <span class=\"n\">A</span> <span class=\"n\">V₀</span> <span class=\"n\">Vads</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">θ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">θ</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hVads</span> <span class=\"o\">:</span> <span class=\"n\">Vads</span> <span class=\"bp\">=</span> <span class=\"n\">V₀</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">Vads</span> <span class=\"bp\">/</span> <span class=\"n\">A</span><span class=\"o\">):</span>\n  <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">P</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hA</span> <span class=\"o\">{</span><span class=\"n\">single_pass</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hA</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span> <span class=\"o\">{</span><span class=\"n\">single_pass</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hVads</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> rw tsum_mul_left at hVads,-/</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span>  <span class=\"n\">V₀</span> <span class=\"bp\">*</span>  <span class=\"bp\">∑'</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">V₀</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span>  <span class=\"bp\">*∑'</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h4</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span>  <span class=\"bp\">∑'</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,(</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span>  <span class=\"bp\">*∑'</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> rw tsum_mul_left at hA,-/</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h5</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> rw int.mul_div_mul_of_pos,-/</span>  <span class=\"c\">/-</span><span class=\"cm\"> to cancel θ 0 and C at hq -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Why tsum_mul_left &amp; rw int.mul_div_mul_of_ops doesn't work here!</p>",
        "id": 273409144,
        "sender_full_name": "Parivash",
        "timestamp": 1645975759
    },
    {
        "content": "<p>What do the error messages say?</p>",
        "id": 273427953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645999618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nrewrite tactic failed, did not find instance of the pattern in the target expression<br>\n  ∑' (x : ?m_1), ?m_2 * ?m_3 x</p>",
        "id": 273518728,
        "sender_full_name": "Parivash",
        "timestamp": 1646066937
    },
    {
        "content": "<p>What does the _full_ error message say?</p>",
        "id": 273518961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646067025
    },
    {
        "content": "<p>(including the goal state)</p>",
        "id": 273518971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646067029
    },
    {
        "content": "<p>rewrite tactic failed, did not find instance of the pattern in the target expression<br>\n  ∑' (x : ?m_1), ?m_2 * ?m_3 x<br>\nstate:<br>\nθ : ℕ → ℝ≥0,<br>\na b C P q A V₀ Vads x : ℝ≥0,<br>\nh1 : ∀ (k : ℕ), θ k = C * x ^ k * θ 0,<br>\nhA : A = ∑' (k : ℕ), C * x ^ k * θ 0,<br>\nhVads : Vads = V₀ * ∑' (k : ℕ), ↑k * (C * x ^ k * θ 0),<br>\nhq : q = (V₀ * ∑' (k : ℕ), ↑k * (C * x ^ k * θ 0)) / ∑' (k : ℕ), C * x ^ k * θ 0<br>\n⊢ Vads = V₀ * C * θ 0 * ∑' (k : ℕ), ↑k * x ^ k</p>",
        "id": 273523364,
        "sender_full_name": "Parivash",
        "timestamp": 1646068818
    },
    {
        "content": "<p>I can't find the instance either. In <code> ∑' (k : ℕ), ↑k * x ^ k</code>, both sides of the <code>*</code> depend on <code>k</code>.</p>",
        "id": 273523960,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646069096
    },
    {
        "content": "<p>Actually, I want to take out <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi><mn>0</mn><mi>a</mi><mi>n</mi><mi>d</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\"> \\theta 0 and C </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mord\">0</span><span class=\"mord mathnormal\">an</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> which are constants from summation at hq and the cancel them. I want to change hq to this format: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>C</mi><mo>∗</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow></msubsup><mi>i</mi><mo>∗</mo><msup><mi>x</mi><mi>i</mi></msup></mrow><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>C</mi><mo>∗</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow></msubsup><msup><mi>x</mi><mi>i</mi></msup><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\"> \\frac{C*\\sum_{i=1}^{+\\infty}i*x^{i}}{(1+C*\\sum_{i=1}^{+\\infty}x^{i})} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.7768em;vertical-align:-0.6103em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1665em;\"><span style=\"top:-2.6153em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span><span class=\"mbin mtight\">∗</span><span class=\"mop mtight\"><span class=\"mop op-symbol small-op mtight\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.821em;\"><span style=\"top:-2.1777em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-2.9043em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3223em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7571em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.535em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span><span class=\"mbin mtight\">∗</span><span class=\"mop mtight\"><span class=\"mop op-symbol small-op mtight\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8477em;\"><span style=\"top:-2.1786em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3214em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">∗</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9021em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6103em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p>",
        "id": 273525019,
        "sender_full_name": "Parivash",
        "timestamp": 1646069526
    },
    {
        "content": "<p>Click on the inside of the sum in the tactic state. You'll see that <code>C * x ^ k * θ 0</code> means <code>(C * x ^ k) * θ 0</code>, not <code>C * (x ^ k * θ 0)</code>. You can turn one into the other using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_assoc\">docs#mul_assoc</a>.</p>",
        "id": 273526451,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646070121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <br>\nI cannot find what you mentioned inside the sum in tactic state!</p>",
        "id": 273531155,
        "sender_full_name": "Parivash",
        "timestamp": 1646071957
    }
]