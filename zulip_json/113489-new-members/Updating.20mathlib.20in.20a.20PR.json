[
    {
        "content": "<p>I'm working on a PR, and I want to make use of a recent change to mathlib (the change took place after I created the PR). When I run <code>leanproject up</code> in the project of the PR, it doesn't seem to bring in the change I'm trying to use. Can anyone explain why this is happening and what I can do about it?</p>",
        "id": 272511541,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1645269046
    },
    {
        "content": "<p><code>leanproject up</code> updates mathlib if it is a dependency of the current project, so it doesn't work in mathlib itself. <code>git merge master</code> is what you're after - assuming <code>master</code> is up to date</p>",
        "id": 272512884,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1645270664
    },
    {
        "content": "<p><code>git fetch; git merge origin/master</code> is a safer bet.</p>",
        "id": 272513041,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645270811
    },
    {
        "content": "<p>And don't forget to run <code>leanproject get-mathlib-cache</code>!</p>",
        "id": 272513396,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645271286
    },
    {
        "content": "<p><code>leanproject get-cache</code> rather, assuming it's on a branch of the <code>mathlib</code> repo</p>",
        "id": 272513504,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645271432
    },
    {
        "content": "<p>Yeah but there won't be a cache</p>",
        "id": 272514091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645272066
    },
    {
        "content": "<p>So you should always push after a merge so that github can start building a cache!</p>",
        "id": 272514424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645272451
    },
    {
        "content": "<p><code>get-cache --fallback=download-first</code> will try to pick a \"close\" cache</p>",
        "id": 272514436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645272466
    },
    {
        "content": "<p>What I usually do, if I want to quickly be able to work after merging master is the following:</p>\n<ul>\n<li><code>git checkout master</code> and <code>git pull</code>.</li>\n<li><code>leanproject get-mathlib cache</code>, so I have master's olean.</li>\n<li><code>git checkout mybranch</code> and <code>git merge master</code>.<br>\nNow I don't have the oleans for my branch, but usually the changes are small and I can immediately work.</li>\n</ul>",
        "id": 272514794,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645272847
    },
    {
        "content": "<p>I usually type <code>get-m</code> rather than <code>get-mathlib-cache</code>; this works. Note that this now works even if you're working on mathlib itself (which Sebastian is, I believe), because <code>get-m</code> defaults to <code>get-c</code> if in mathlib itself (assuming your <code>leanproject</code> is relatively new).</p>",
        "id": 272515241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645273388
    },
    {
        "content": "<p>Note that <code>get-m</code> doesn't support --rev or --fallback because that doesn't make sense for the intended use of get-mathlib-cache</p>",
        "id": 272516363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645274734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, there's no need to do that - either <code>get-cache --rev origin/master</code> or <code>get-cache --fallback=download-first</code> will have the same effect</p>",
        "id": 272516431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645274794
    },
    {
        "content": "<p>And that approach avoids you risking losing your work when you checkout, as unlike your approach it doesn't touch any of your files.</p>",
        "id": 272516449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645274826
    },
    {
        "content": "<p>Ah, nice! Thanks</p>",
        "id": 272516459,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645274843
    },
    {
        "content": "<p>(I guess you still need <code>git fetch origin; git merge master</code> before that - but you get to skip the checkout step)</p>",
        "id": 272516511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645274884
    }
]