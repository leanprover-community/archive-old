[
    {
        "content": "<p>Shouldn't <code>[topological_space (subtype p)]</code> be required by this definition?<br>\n<a href=\"/user_uploads/3121/fRWqIdR-cPYePI6paWREhrsc/tmp.png\">tmp.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/fRWqIdR-cPYePI6paWREhrsc/tmp.png\" title=\"tmp.png\"><img src=\"/user_uploads/3121/fRWqIdR-cPYePI6paWREhrsc/tmp.png\"></a></div>",
        "id": 212295928,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601903207
    },
    {
        "content": "<p>I am not with Lean right now, but I feel like it should be in the context, otherwise how would is be able to make sense of <code>is_closed</code> for <code>subtype p</code>?</p>",
        "id": 212295987,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601903242
    },
    {
        "content": "<p>I believe it's inferred automatically, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.topological_space\">docs#subtype.topological_space</a></p>",
        "id": 212296061,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601903278
    },
    {
        "content": "<p>Definition is <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/separation.html#subtype.t1_space\">here</a>. It may also be just that the docs aren't showing the instance.</p>",
        "id": 212296137,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601903299
    },
    {
        "content": "<p>Yes, it should be inferred automatically. Therefore it should be included in the type full type signature as a hidden argument, right?</p>",
        "id": 212296215,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601903345
    },
    {
        "content": "<p>Rather, I believe the classes that appear in the full type signature are those that are <em>not</em> inferred automatically.</p>",
        "id": 212296372,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601903423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> Luckily not... otherwise everything that uses a little bit of ring theory would show an insane amount of type class arguments.</p>",
        "id": 212296497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601903497
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 212296643,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601903557
    },
    {
        "content": "<p>It makes sense. That had never occurred to me.</p>",
        "id": 212296722,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601903600
    },
    {
        "content": "<p>This lemma doesn't take an instance of <code>[topological_space (subtype p)]</code> with some unknown properties. Instead, there is <code>subtype.topological_space</code> hidden in the implicit arguments of <code>t1_space (subtype p)</code>. Actually, it is something like <code>@t1_space (subtype p) (@subtype.topological_space α p t)</code>, where <code>[t : topological_space α]</code>.</p>",
        "id": 212298739,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601904579
    }
]