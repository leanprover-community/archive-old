[
    {
        "content": "<p>I'm attempting to write what amounts to the same recursive functions on a variety of set-like types. The one I wrote for lists was pretty straightfoward:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">transform_func</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Prop</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n <span class=\"bp\">|</span> <span class=\"o\">[]</span>  <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">or</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">transform_func</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, I want to write a similar function but on finsets instead, i.e. <code>transform_func : finset Prop -&gt; Prop</code>. The trouble I have is in casing on whether the set is inhabited or not (or, if I claim the set is inhabited, that the set has one versus many elements). I've tried writing <code>cases h with hp, hnp</code> where <code>h</code> is an exlcuded middle hypothesis that states that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">exists</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">\\</span><span class=\"k\">in</span> <span class=\"n\">s</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">neg</span> <span class=\"bp\">\\</span><span class=\"n\">exists</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">\\</span><span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but every time I try to uses <code>cases</code>, the compiler complains about breaking down <code>h</code> into component parts. Is there an easier or more canonical way of casing on the cardinality of sets? Or am I going about this the wrong way? Thanks!</p>",
        "id": 245874670,
        "sender_full_name": "Cayden Codel",
        "timestamp": 1626204319
    },
    {
        "content": "<p>What's your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? Have you tried using <code>list.foldr</code>? You should use <code>if h : ... then ... else ...</code> if you're defining a function that cases on things; <code>cases</code> is a tactic.</p>",
        "id": 245875225,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626204552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> once pointed out that for this you can make use of the <code>has_mem</code> instance.  He might write it a different way, but this would be equivalent to your definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">transform_func'</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span>\n<span class=\"kd\">def</span> <span class=\"n\">transform_func''</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 245877673,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626205797
    },
    {
        "content": "<p>It's probably more useful in this form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finset.any</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>You can write stuff like <code>s.any (λ x, x &gt; 2)</code></p>",
        "id": 245877918,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626205914
    },
    {
        "content": "<p>(but at this point you might just write the existential directly without making a new definition)</p>",
        "id": 245878061,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626205985
    },
    {
        "content": "<p>I can't find the previous thread about this, but they too were working on formalizing SAT, which I'm assuming is what you're up to <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 245879181,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626206502
    }
]