[
    {
        "content": "<p>Are there any tactics in Lean, or algorithms in general, that take a proof term and find a more optimal version of it? That is, for example, something shorter or more general? To what extent is this theoretically possible?</p>",
        "id": 288895714,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1657254104
    },
    {
        "content": "<p>It's been mentioned that metamath has something like this (<a href=\"#narrow/stream/113489-new-members/topic/tactic.20preference/near/213691346\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/tactic.20preference/near/213691346</a>), and I think the idea of finding shorter proofs was also part of the GPT-f paper.</p>",
        "id": 288904595,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1657263448
    },
    {
        "content": "<p>Oh he mentioned gpt-f in the very next message, oops.</p>",
        "id": 288904662,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1657263507
    },
    {
        "content": "<p>A few of the linters do things like this, removing unneeded parts of proofs. I wrote a few that I can post links to later that aren't in mathlib, but I have used on mathlib. They do things like find unnecessary uses of by_cases, cases, hypotheses that can be removed.</p>",
        "id": 288925328,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1657278058
    },
    {
        "content": "<p>That would be great, thank you.</p>",
        "id": 288954847,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1657293854
    }
]