[
    {
        "content": "<p>For each  integer  <code>k</code> I've defined a mul_action of some group <code>G</code> on some set <code>S</code> (with <code>G</code> and <code>S</code> indep. of <code>k</code>). Now I wanted to use some notation for this like the usual <code>smul</code> notation <code>•</code> but perhaps something like <code>•ₖ</code>. Is this possible? I tried playing around with <code>infixr</code>'s but it didnt like the dependence on <code>k</code>.</p>",
        "id": 253435621,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631720497
    },
    {
        "content": "<p>Small <code>ₖ</code> and <code>k</code> aren't related at all as unicode characters, so you won't be able to do that. What you can do is not making it small.</p>",
        "id": 253436815,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631720918
    },
    {
        "content": "<p>To avoid any confusion, I would advise <code>•[k]</code></p>",
        "id": 253436876,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631720944
    },
    {
        "content": "<p>One option would be to use a type alias:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">with_k</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">with_k</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 253436929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631720961
    },
    {
        "content": "<p>Can you give a precise definition of what you want <code>has_scalar</code> to mean for your action?</p>",
        "id": 253437084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631721002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20for.20a.20family.20of.20mul_actions/near/253436815\">said</a>:</p>\n<blockquote>\n<p>Small <code>ₖ</code> and <code>k</code> aren't related at all as unicode characters, so you won't be able to do that. What you can do is no making it small.</p>\n</blockquote>\n<p>Ah interesting I didnt know this!</p>",
        "id": 253437399,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631721079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20for.20a.20family.20of.20mul_actions/near/253437084\">said</a>:</p>\n<blockquote>\n<p>Can you give a precise definition of what you want <code>has_scalar</code> to mean for your action?</p>\n</blockquote>\n<p>So I wanted the notation, for each <code>k</code> to behave just the the usual <code>smul</code> notation.  I dont think I want some <code>has_scalar</code> to be <code>ℤ → G → S → S</code>. Is that what you are asking? Sorry, maybe I'm misunderstanding your question.</p>",
        "id": 253438607,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631721493
    },
    {
        "content": "<p>I'm asking for you to give an example of the kind of action you have in mind; that is, fill in the blanks in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- I assume you meant `S` was a `Type` not a set</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_smul</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 253439049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631721622
    },
    {
        "content": "<p>The reason I ask is you might be able to express the k-indexed family of actions in terms of  stuff we already have</p>",
        "id": 253439235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631721687
    },
    {
        "content": "<p>Ah sorry I see what you mean. The thing I have is something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_smul</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">):=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>    <span class=\"o\">)</span>\n</code></pre></div>\n<p>(also technically I'd like this to behave like a right action, but it seems most of the things are for left actions, so I'm using inverses to make it a left action).</p>",
        "id": 253441138,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631722314
    },
    {
        "content": "<p>Hmm, I guess I can only reuse one existing action there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_smul</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 253442119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631722606
    },
    {
        "content": "<p>I would probably still recommend the type alias approach that I suggested with <code>with_k</code> above, and then maybe add some special notation for that</p>",
        "id": 253442300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631722668
    },
    {
        "content": "<p>Which is roughly how I recommended doing right actions</p>",
        "id": 253442340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631722679
    },
    {
        "content": "<p>So, let me see if I understand how this works. With the type alias, I'm storing the information of <code>G</code> and <code>k</code> both under the name <code>G</code>? and when I want to change the <code>k</code> in some specific instance I use the <code>with_k</code> parameter?</p>",
        "id": 253442896,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631722827
    },
    {
        "content": "<p>Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[derive group]</span>\n<span class=\"kd\">def</span> <span class=\"n\">with_k</span>  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">with_k.mk</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">with_k</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">monoid_hom.id</span> <span class=\"n\">_</span>\n<span class=\"kd\">def</span> <span class=\"n\">with_k.out</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">with_k</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">monoid_hom.id</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">with_k.has_scalar</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">with_k</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g.out</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g.out</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">g</span> <span class=\"bp\">`•ₖ</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"n\">k</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"o\">:=</span> <span class=\"n\">with_k.mk</span> <span class=\"n\">k</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">f</span>\n\n<span class=\"c1\">-- I panicked, `unit.star` is the only group I could think of</span>\n<span class=\"k\">#check</span> <span class=\"n\">unit.star</span> <span class=\"bp\">•ₖ</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 253443788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631723103
    },
    {
        "content": "<p>You're storing the <code>k</code> in a copy of the type <code>G</code></p>",
        "id": 253443860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631723123
    },
    {
        "content": "<p>Ah I see that looks like it'll work as  I want it to. Thank you!</p>",
        "id": 253444508,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631723334
    },
    {
        "content": "<p>Your other option is not to make it an action at all, and just make it a <code>mul_equiv</code></p>",
        "id": 253444640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631723387
    },
    {
        "content": "<p>Ah interesting, I hadn't thought about that. I'll have a think about which will work best. Thanks.</p>",
        "id": 253445442,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631723637
    },
    {
        "content": "<p>Your action isn't actually a <code>mul_equiv</code> unless <code>comm_group G</code>, right?</p>",
        "id": 253445926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631723780
    },
    {
        "content": "<p>I'm a bit worried that the <code>with_k</code> will create a new barrier that many things cannot see through.</p>",
        "id": 253445995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631723799
    },
    {
        "content": "<p>Yes, it might become as arduous as having all the instances for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite\">docs#opposite</a> is</p>",
        "id": 253446133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631723844
    },
    {
        "content": "<p>Wouldn't it be better to just make <code>•[k]</code> a local notation for <code>λ g f, g ^ k • λ x, f (g⁻¹ • x)</code>?</p>",
        "id": 253446149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631723849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> this is for modular forms, isn't it?</p>",
        "id": 253446183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631723864
    },
    {
        "content": "<p>If you do that you can't use  any existing smul lemmas</p>",
        "id": 253446199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631723870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20for.20a.20family.20of.20mul_actions/near/253445926\">said</a>:</p>\n<blockquote>\n<p>Your action isn't actually a <code>mul_equiv</code> unless <code>comm_group G</code>, right?</p>\n</blockquote>\n<p>maybe, I just made this up quickly as an example.</p>",
        "id": 253446296,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631723893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20for.20a.20family.20of.20mul_actions/near/253446199\">said</a>:</p>\n<blockquote>\n<p>If you do that you can't use  any existing smul lemmas</p>\n</blockquote>\n<p>can they not see through the notation?</p>",
        "id": 253446321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631723902
    },
    {
        "content": "<p>You can have both, so that the type synonym <code>with_k</code> gets only used when needed for smul lemmas.</p>",
        "id": 253446345,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631723911
    },
    {
        "content": "<p>Well they won't apply to the action as a whole</p>",
        "id": 253446358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631723914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20for.20a.20family.20of.20mul_actions/near/253446183\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> this is for modular forms, isn't it?</p>\n</blockquote>\n<p>Yeah its for the  <code>∣ₖ</code> action on modular forms</p>",
        "id": 253446398,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631723928
    },
    {
        "content": "<p>What about defining <code>has_ssmul.ssmul := (ssmul : α → β → γ → δ)</code>? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 253446567,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631723990
    },
    {
        "content": "<p>I think we'll need a bunch of API lemmas anyway. The question is whether the <code>def with_k</code> will be a net help.</p>",
        "id": 253446776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631724057
    },
    {
        "content": "<p>If it's not a net help, I'd recommend going with a mul_equiv instead.</p>",
        "id": 253446852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631724082
    },
    {
        "content": "<p>Probably defining a new notation, and proving a bunch of lemmas for it is easier.</p>",
        "id": 253446860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631724085
    },
    {
        "content": "<p>Something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.to_perm_hom\">docs#mul_action.to_perm_hom</a></p>",
        "id": 253446881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631724092
    },
    {
        "content": "<p>Yael's suggestion might also work</p>",
        "id": 253446942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631724116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20for.20a.20family.20of.20mul_actions/near/253446345\">said</a>:</p>\n<blockquote>\n<p>You can have both, so that the type synonym <code>with_k</code> gets only used when needed for smul lemmas.</p>\n</blockquote>\n<p>This one, you mean?</p>",
        "id": 253447090,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631724156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20for.20a.20family.20of.20mul_actions/near/253446567\">said</a>:</p>\n<blockquote>\n<p>What about defining <code>has_ssmul.ssmul := (ssmul : α → β → γ → δ)</code>? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>No, I was thinking of this one... <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 253447300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631724229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20for.20a.20family.20of.20mul_actions/near/253446860\">said</a>:</p>\n<blockquote>\n<p>Probably defining a new notation, and proving a bunch of lemmas for it is easier.</p>\n</blockquote>\n<p>This is what I was originally going to do. I just thought it would maybe be good to make it link the existing mul_action framework. But perhaps this is the best thing to do.</p>",
        "id": 253447320,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631724234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20for.20a.20family.20of.20mul_actions/near/253446567\">said</a>:</p>\n<blockquote>\n<p>What about defining <code>has_ssmul.ssmul := (ssmul : α → β → γ → δ)</code>? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>where does it end though?  how long until we have <code>has_sssssssssssmul</code>?? <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 253447594,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631724321
    },
    {
        "content": "<p>The group in your application will not be commutative, right?</p>",
        "id": 253447617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631724333
    },
    {
        "content": "<p>Oh</p>",
        "id": 253447633,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631724337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20for.20a.20family.20of.20mul_actions/near/253447617\">said</a>:</p>\n<blockquote>\n<p>The group in your application will not be commutative, right?</p>\n</blockquote>\n<p>Yeah its some matrix group.</p>",
        "id": 253447699,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631724361
    },
    {
        "content": "<p>I'll stop joking because one day you'll actually implement my stupid ideas <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 253447750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631724366
    },
    {
        "content": "<p>That's not a good reason not to joke (-;</p>",
        "id": 253447828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631724395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20for.20a.20family.20of.20mul_actions/near/253436929\">said</a>:</p>\n<blockquote>\n<p>One option would be to use a type alias:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">with_k</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">with_k</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>In this case (modular forms) it might be mathematically natural to do it the other way, i.e., make separate copies of <code>S</code> for each <code>k</code> (= sections of some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>ω</mi><mrow><mo>⊗</mo><mi>k</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\omega^{\\otimes k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊗</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span>).</p>",
        "id": 253448939,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631724798
    }
]