[
    {
        "content": "<p>Hello, I've been doing some stuff relating to computing things with polynomials. For this I defined a class <code>poly</code> and algorithms for adding, multiplying, dividing, gcd, etc. Now I want to do some stuff with <code>zmop p</code> (where <code>p</code> is prime), and I'm getting the error,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">poly_gcd</span> <span class=\"n\">f</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">poly</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">poly</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"s2\">\"</span>\n</code></pre></div>\n\n<p>when I try to do division or gcd. I think the problem might be that division and gcd want <code>zmod p</code> to be a field. All the operations which want <code>zmod p</code> to be a ring work. Unfortunately, I don't know how to get Lean to figure out that <code>zmod p</code> is a field. When I try,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Poly</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">zmod</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">zmod.field</span>\n<span class=\"kd\">instance</span> <span class=\"n\">xxx</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">instance</span> <span class=\"n\">ttt</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n\n<p>I get the error \"failed to synthesize type class instance for ⊢ field (zmod 7)\". How can I get this to work?</p>",
        "id": 212256868,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601871877
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/zmod/basic.lean#L787\">https://github.com/leanprover-community/mathlib/blob/master/src/data/zmod/basic.lean#L787</a></p>",
        "id": 212260424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601875961
    },
    {
        "content": "<p>I have no idea why this is failing for you....</p>",
        "id": 212260426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601875984
    },
    {
        "content": "<p>It says right there - you need an instance of <code>fact (prime 7)</code> to satisfy the instance</p>",
        "id": 212260715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601876430
    },
    {
        "content": "<p>Ok, <code>instance ttt [fact (prime 7)] : field (zmod 7) := infer_instance</code> works, but why doesn't <code>instance xxx (p : ℕ) [fact (prime p)] : field (zmod p) := infer_instance</code> work?</p>",
        "id": 212260999,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601876942
    },
    {
        "content": "<p><code>prime</code> is not the same as <code>nat.prime</code></p>",
        "id": 212261075,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1601877057
    },
    {
        "content": "<p>Also, I still get the error, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">poly_div_quot_rem</span> <span class=\"n\">p</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">poly</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">poly</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"s2\">\"</span>\n</code></pre></div>\n\n<p>when attempting division or gcd.</p>",
        "id": 212261083,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601877070
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 212261091,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601877086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/113489-new-members/topic/error.20with.20(zmod.20p)/near/212261075\">said</a>:</p>\n<blockquote>\n<p><code>prime</code> is not the same as <code>nat.prime</code></p>\n</blockquote>\n<p>oh.</p>",
        "id": 212261098,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601877109
    },
    {
        "content": "<p><code>instance xxx (p : ℕ) [fact (nat.prime p)] : field (zmod p) := infer_instance</code> works. But I still get the error.</p>",
        "id": 212261214,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601877253
    },
    {
        "content": "<p>Would you mind posting the code that generates the error?</p>",
        "id": 212261288,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1601877450
    },
    {
        "content": "<p>So <code>#eval poly_gcd p q</code> gives the error, and <code>poly_gcd</code> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">poly_gcd_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">poly</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">P</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">P</span> <span class=\"k\">else</span> <span class=\"n\">poly_gcd_aux</span> <span class=\"n\">n</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">%ₚ</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">poly_gcd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">poly_gcd_aux</span> <span class=\"o\">(</span><span class=\"n\">deg</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n</code></pre></div>\n\n<p>I'm not sure where to stop posting code. Should I just post the whole file?</p>",
        "id": 212261487,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601877735
    },
    {
        "content": "<p>And</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]⟩</span>\n</code></pre></div>\n\n<p>Also, poly_gcd isn't finished yet, the higher degree poly goes first, so don't judge me too harshly.</p>",
        "id": 212261505,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601877794
    },
    {
        "content": "<p>Does <code>#eval poly_gcd p q</code> give you the error about <code>poly_div_quot_rem</code> you posted earlier or a different error?</p>",
        "id": 212261805,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1601878272
    },
    {
        "content": "<p>Yeah, same thing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">poly_gcd</span> <span class=\"n\">p</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">poly</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">poly</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 212261940,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601878449
    },
    {
        "content": "<p>I thought it was something to do with defining <code>poly_div_quot_rem</code> and <code>poly_gcd</code> using <code>[field \\a]</code> instead of [ring \\a], since the operations with <code>[ring \\a]</code> work and the operations with <code>[field \\a]</code> don't.</p>",
        "id": 212262023,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601878554
    },
    {
        "content": "<p>I'll just post all the code...</p>",
        "id": 212262115,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601878584
    },
    {
        "content": "<p>Here's the Poly file</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Let's make polynomials lists!</span>\n<span class=\"sd\">so [1,2,3] represents the polynomial</span>\n<span class=\"sd\">1 + 2x + 3x²</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">poly</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cofs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">poly_eq_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span> <span class=\"bp\">↔</span> <span class=\"n\">P.cofs</span> <span class=\"bp\">=</span> <span class=\"n\">Q.cofs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">poly.mk</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">poly_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">P.cofs</span> <span class=\"bp\">=</span> <span class=\"n\">Q.cofs</span>\n<span class=\"kd\">def</span> <span class=\"n\">poly_eq_bool</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">P.cofs</span> <span class=\"bp\">=</span> <span class=\"n\">Q.cofs</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_equiv</span> <span class=\"o\">(</span><span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">poly_eq</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">poly_eq_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- `X` is the polynomial variable (aka indeterminant). Lifted from polynomial.basic in mathlib-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">poly.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list_remove_leading_zeros</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">list_remove_leading_zeros</span> <span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">remove_leading_zeros</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">poly.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">list_remove_leading_zeros</span> <span class=\"n\">P.cofs.reverse</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">deg</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">list_remove_leading_zeros</span> <span class=\"n\">P.cofs.reverse</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n\n<span class=\"sd\">/--The zero polynomial-/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">has_zero.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">poly.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/--The one polynomial-/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">has_one.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">poly.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- Representation of polynomials -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">list_to_string</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>    <span class=\"o\">:=</span> <span class=\"n\">repr</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">then</span> <span class=\"n\">list_to_string</span> <span class=\"n\">t</span>\n            <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"n\">h</span> <span class=\"bp\">++</span> <span class=\"s2\">\"X^\"</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"n\">t.length</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"s2\">\" + \"</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">list_to_string</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">list_to_string</span> <span class=\"n\">p.cofs.reverse</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/--returns the leading cof-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">list_lead</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a.reverse.head</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lead</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">list_lead</span> <span class=\"n\">P.cofs</span>\n\n<span class=\"sd\">/--return the negative Poly-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">list_poly_neg</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">list_poly_neg</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">poly_neg</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">poly.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">list_poly_neg</span> <span class=\"n\">P.cofs</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"o\">(</span><span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">poly_neg</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/--adds two Polys together-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">list_poly_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"n\">Q</span>      <span class=\"o\">:=</span> <span class=\"n\">Q</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span>      <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"n\">P</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">::</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">list_poly_add</span> <span class=\"n\">t</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">poly_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">remove_leading_zeros</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">poly.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">list_poly_add</span> <span class=\"n\">P.cofs</span> <span class=\"n\">Q.cofs</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">poly_add</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_sub</span> <span class=\"o\">(</span><span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">has_sub.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">Q</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/--Scalar multiplication-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">list_poly_scalar_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">P.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">poly_scalar_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">remove_leading_zeros</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">poly.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">list_poly_scalar_mul</span> <span class=\"n\">t</span> <span class=\"n\">P.cofs</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/--The derivative-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">list_poly_deriv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>    <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">t.length</span><span class=\"o\">))</span> <span class=\"o\">::</span> <span class=\"n\">list_poly_deriv</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">poly_deriv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">poly.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">list_poly_deriv</span> <span class=\"n\">P.cofs.reverse</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/--polynomial modulo some number-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">list_poly_mod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mod</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">list_poly_mod</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">poly_mod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mod</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">remove_leading_zeros</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">poly.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">list_poly_mod</span> <span class=\"n\">n</span> <span class=\"n\">P.cofs</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">•ₚ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">88</span> <span class=\"o\">:=</span> <span class=\"n\">poly_scalar_mul</span>\n<span class=\"kd\">prefix</span> <span class=\"bp\">`</span> <span class=\"n\">dₚ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"n\">poly_deriv</span>\n\n<span class=\"sd\">/--Polynomial multiplication-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">list_poly_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">([]),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">Qxp</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">list_poly_scalar_mul</span> <span class=\"n\">P_hd</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">list_poly_add</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">::</span><span class=\"n\">P_ih</span><span class=\"o\">)</span> <span class=\"n\">Qxp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">poly_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">remove_leading_zeros</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">poly.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">list_poly_mul</span> <span class=\"n\">P.cofs.reverse</span> <span class=\"n\">Q.cofs.reverse</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">poly_mul</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- instance {α : Type} [ring α] : ring (poly α) :=</span>\n<span class=\"c1\">-- begin</span>\n<span class=\"c1\">--   apply ring.mk,</span>\n<span class=\"c1\">--   repeat {sorry},</span>\n<span class=\"c1\">-- end</span>\n\n<span class=\"sd\">/--Polynomial division-/</span>\n<span class=\"c1\">--Note: Polynomial division works only for polynomials over a field.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list_Xn</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">::</span> <span class=\"n\">list_Xn</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Xn</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">poly.mk</span> <span class=\"o\">(</span><span class=\"n\">list_Xn</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list_poly_div</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">poly</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">deg</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">deg</span> <span class=\"n\">Q</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">)</span>\n               <span class=\"k\">else</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">rol</span> <span class=\"o\">:=</span> <span class=\"n\">lead</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"n\">lead</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n                       <span class=\"n\">list_poly_div</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">rol</span> <span class=\"bp\">•ₚ</span> <span class=\"n\">Xn</span> <span class=\"o\">(</span><span class=\"n\">deg</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">deg</span> <span class=\"n\">Q</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">rol</span> <span class=\"bp\">•ₚ</span> <span class=\"n\">Q</span> <span class=\"bp\">*</span> <span class=\"n\">Xn</span> <span class=\"o\">(</span><span class=\"n\">deg</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">deg</span> <span class=\"n\">Q</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">poly_div_quot_rem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">list_poly_div</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">deg</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"n\">deg</span> <span class=\"n\">Q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">P</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">poly_quot</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">poly_div_quot_rem</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">poly_rem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">poly_div_quot_rem</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">/ₚ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">87</span> <span class=\"o\">:=</span> <span class=\"n\">poly_quot</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">%ₚ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">88</span> <span class=\"o\">:=</span> <span class=\"n\">poly_rem</span>\n\n<span class=\"sd\">/--Polynomial GCD-/</span>\n<span class=\"c1\">--Note: this computes the gcd of polynomials over a field.</span>\n<span class=\"kd\">def</span> <span class=\"n\">poly_gcd_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">poly</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">P</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">P</span> <span class=\"k\">else</span> <span class=\"n\">poly_gcd_aux</span> <span class=\"n\">n</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">%ₚ</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">poly_gcd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">poly</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">poly_gcd_aux</span> <span class=\"o\">(</span><span class=\"n\">deg</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n</code></pre></div>\n\n<p>And here's an MWE with the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Poly</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">zmod</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">zmod.field</span>\n<span class=\"kd\">instance</span> <span class=\"n\">xxx</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">instance</span> <span class=\"n\">ttt</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"mi\">7</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">poly_add</span> <span class=\"n\">p</span> <span class=\"n\">q</span>  <span class=\"c1\">--works</span>\n<span class=\"k\">#eval</span> <span class=\"n\">poly_neg</span> <span class=\"n\">p</span>    <span class=\"c1\">--works</span>\n<span class=\"k\">#eval</span> <span class=\"n\">poly_deriv</span> <span class=\"n\">p</span>  <span class=\"c1\">--works</span>\n<span class=\"k\">#eval</span> <span class=\"n\">poly_mul</span> <span class=\"n\">p</span> <span class=\"n\">q</span>  <span class=\"c1\">--works</span>\n<span class=\"k\">#eval</span> <span class=\"n\">poly_div_quot_rem</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"c1\">--FAILS!</span>\n<span class=\"k\">#eval</span> <span class=\"n\">poly_gcd</span> <span class=\"n\">p</span> <span class=\"n\">q</span>  <span class=\"c1\">--FAILS!</span>\n</code></pre></div>",
        "id": 212262204,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601878674
    },
    {
        "content": "<p>Do you need to put <code>fact (nat.prime 7)</code> into the type class inference system? It won't be there automatically</p>",
        "id": 212262349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601878798
    },
    {
        "content": "<p>ie <code>instance : fact (nat.prime 7) := by unfold fact; norm_num</code>?</p>",
        "id": 212262422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601878863
    },
    {
        "content": "<p>Yes! that fixed it. Thanks.</p>",
        "id": 212262515,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1601878945
    }
]