[
    {
        "content": "<p>Hi! I'm completely new to Lean, currently exploring Lean 4.</p>\n<p>I'm trying to define factorial like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fac</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span>\n    <span class=\"k\">then</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">fac</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>fail to show termination for\n  fac\nwith errors\nargument #1 was not used for structural recursion\n  failed to eliminate recursive application\n    fac (n - 1)\n\nstructural recursion cannot be used\n\n'termination_by' modifier missing\n</code></pre></div>\n<p>So I understand that I can change my definition to use structural recursion, but I would like to prove termination using <code>termination_by</code>. I've tried adding <code>termination_by Nat.lt_wfRel</code> at the end, but I don't understand how to discharge the resulting goals:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>unsolved goals\nx : Nat\n‚ä¢ x - 1 &lt; x\n</code></pre></div>\n<p>Does anyone have any pointers?</p>",
        "id": 262646503,
        "sender_full_name": "Hungry Applicative",
        "timestamp": 1637792319
    },
    {
        "content": "<p>Note that the goal as presented is not provable because x can be 0. Try <code>if h : x = 0 then...</code>? That might add the relevant hypothesis to the context</p>",
        "id": 262646799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637792545
    },
    {
        "content": "<p>And I trust you understand that you're making things much more difficult for yourself because you can just do a case spilt with the equation compiler and this problem wouldn't arise (i guess that is structural recursion)</p>",
        "id": 262646882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637792640
    },
    {
        "content": "<p>Thank you! I will give it a go tomorrow.</p>",
        "id": 262647894,
        "sender_full_name": "Hungry Applicative",
        "timestamp": 1637793473
    },
    {
        "content": "<p>I got stuck on this problem. Is the decreasing_by construct mature yet? I haven't been able to find any documentation and it doesn't seem to be behave as nicely as a normal \"tactic block\". Here is what I have so far.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fac</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">then</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">fac</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">Nat.lt_wfRel</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"n\">skip</span>\n</code></pre></div>",
        "id": 262807098,
        "sender_full_name": "Hungry Applicative",
        "timestamp": 1637939335
    }
]