[
    {
        "content": "<p>Is there a \"deep\" version of cases that doesn't look terrible. I find it very unfortunate that the <code>rintro</code> and <code>rcases</code> need four pairs of <code>⟨⟩</code> to fully destruct <code>im</code>. I'd expect <code>example : im → true := by { rintro (⟨⟩ | ⟨⟩); trivial }</code> to suffice.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">im</span>\n<span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">im</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"bp\">⟨⟨⟩⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨⟨⟩⟩</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">im</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"bp\">⟨⟨⟩⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨⟨⟩⟩;</span> <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206514752,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597094399
    },
    {
        "content": "<p>Also, is there a tactic like <code>simp</code> that destructs terms in the environment?</p>",
        "id": 206514995,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597094512
    },
    {
        "content": "<p>There are four values of <code>im</code>, so you should have three <code>|</code>s total. But <code>rcases</code> is very tolerant of the wrong syntax (maybe too tolerant?)</p>",
        "id": 206515351,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597094655
    },
    {
        "content": "<p><code>rcases? a</code> should show the correct pattern</p>",
        "id": 206515378,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597094670
    },
    {
        "content": "<p>Your example is a bit odd, <code>example : im → true := by { rintro (⟨⟩ | ⟨⟩); trivial }</code> will always work because you are just proving true</p>",
        "id": 206516533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597095356
    },
    {
        "content": "<p>I guess you want to case on the elements of bool, producing four cases?</p>",
        "id": 206516623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597095391
    },
    {
        "content": "<p>The correct syntax for that is <code>rintro (⟨_|_⟩ | ⟨_|_⟩)</code>.</p>",
        "id": 206516729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597095455
    },
    {
        "content": "<p>The reason is that matching on an inductive type actually requires the syntax <code>⟨a,b⟩ | ⟨c,d⟩ | ⟨e⟩</code>, involving an alternation of tuples. So if <code>e</code> here was an inductive type with one constructor you would have to write <code>⟨a,b⟩ | ⟨c,d⟩ | ⟨⟨e_inner⟩⟩</code> to destruct it</p>",
        "id": 206516906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597095574
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3730\">#3730</a> is a rewrite of <code>rcases</code>, so if you want to change this behavior now is a good time to interject</p>",
        "id": 206517040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597095648
    },
    {
        "content": "<p>We could make it so that the tuple brackets are not expected for variants with one argument, i.e. the correct way to pattern match on</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n</code></pre></div>\n\n\n<p>is <code>_ | a | ⟨b,c⟩</code>, where the tuple brackets are not expected in the second case, and then <code>_ | ⟨a_inner⟩ | ⟨b,c⟩</code> would do one further destructuring on <code>a</code>. This is a pretty big breaking change though</p>",
        "id": 206517363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597095856
    },
    {
        "content": "<p>The new version of cases will accept <code>rintro ((_|_) | (_|_))</code> for this example, which I think is a bit better, avoiding the need for the tuple brackets</p>",
        "id": 206517840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597096199
    }
]