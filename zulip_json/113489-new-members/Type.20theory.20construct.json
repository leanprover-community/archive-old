[
    {
        "content": "<p>Trying to formalize some notes by Pete Clark on filters I came up with a question mark. The problem is exemplified in the code below, which I tried to keep to a minimum. Basically the <code>principal_filter</code> definition needs a proof that the set is not empty. If I try to use it later in <code>principal_of_finite</code>, I want to obtain that there is such nonempty set,  but then how do I feed that back into the same statement later on? In other words, how to fill the <code>_</code> in the lemma statement?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">peteClark</span>\n\n<span class=\"c1\">-- A filter is a non-empty collection of non-empty subsets of X with the following properties:</span>\n<span class=\"kn\">structure</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">f_sets</span>          <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">)</span>  <span class=\"c1\">-- a collection of subsets of X</span>\n<span class=\"o\">(</span> <span class=\"n\">f_nonempty</span>      <span class=\"o\">:</span> <span class=\"n\">f_sets</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">f_mem_nonempty</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"n\">f_sets</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">f_mem_inter_in</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"n\">f_sets</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"err\">∈</span> <span class=\"n\">f_sets</span> <span class=\"bp\">→</span>  <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"err\">∈</span> <span class=\"n\">f_sets</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">f_container_in</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"n\">f_sets</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"err\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">→</span>  <span class=\"n\">B</span> <span class=\"err\">∈</span> <span class=\"n\">f_sets</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">f_univ_in</span>              <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">f_sets</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- Example: a principal filter</span>\n<span class=\"n\">def</span> <span class=\"n\">principal_filter</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- code not shown</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Xf</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Xf</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">principal_of_finite</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Xf</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Xf</span><span class=\"o\">),</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">∧</span> <span class=\"n\">principal_filter</span> <span class=\"n\">Y</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>   <span class=\"c1\">-- the underscore here??</span>\n<span class=\"k\">begin</span>                                                            <span class=\"c1\">-- should be the Y.nonempty from the first part</span>\n   <span class=\"n\">sorry</span><span class=\"o\">,</span>                                                         <span class=\"c1\">-- of the conjunction</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">end</span> <span class=\"n\">peteClark</span>\n</code></pre></div>\n\n\n<p>This is probably not a desirable situation in type theory. I guess it's better not to ask for <code>Y.nonempty</code> in <code>principal_filter</code>, and that can easily be taken care of. I'm just wondering if there is a way to proceed in this setting. Any help appreciated!</p>",
        "id": 203222119,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594171360
    },
    {
        "content": "<p>Maybe you want:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">principal_of_finite</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Xf</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Xf</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">),</span> <span class=\"n\">principal_filter</span> <span class=\"n\">Y</span> <span class=\"n\">hY</span> <span class=\"bp\">=</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 203222274,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594171597
    },
    {
        "content": "<p>I guess that is what I wanted! Thanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span></p>",
        "id": 203222298,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594171649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"259857\">Dan Stanescu</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20theory.20construct/near/203222119\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span> <span class=\"n\">f_mem_inter_in</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"n\">f_sets</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"err\">∈</span> <span class=\"n\">f_sets</span> <span class=\"bp\">→</span>  <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"err\">∈</span> <span class=\"n\">f_sets</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">f_container_in</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"n\">f_sets</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"err\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">→</span>  <span class=\"n\">B</span> <span class=\"err\">∈</span> <span class=\"n\">f_sets</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>By the way, you can write these as <code>A ∈ f_sets → B ∈ f_sets →  A ∩ B ∈ f_sets</code> and <code>A ∈ f_sets → A ⊆ B →  B ∈ f_sets</code> which is sometimes easier to work with in practice!</p>",
        "id": 203222349,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594171690
    },
    {
        "content": "<p>That one I knew, but I'm writing these to be legible by someone with zero knowledge of type theory.</p>",
        "id": 203222397,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594171776
    },
    {
        "content": "<p>Or functional programming.</p>",
        "id": 203222407,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594171793
    },
    {
        "content": "<p>Thank you both!</p>",
        "id": 203222505,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594171919
    },
    {
        "content": "<p>Having <em>both</em> <code>f_nonempty</code> and <code>f_univ_in</code> in the definition is a bit silly. Those conditions are equivalent using <code>f_container_in</code>. And in pratice <code>f_univ_in</code> is much more convenient both when constructing filters and when using the definition.</p>",
        "id": 203244322,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594198003
    },
    {
        "content": "<p>I'm almost sure you know but just to make sure: mathlib doesn't put <code>f_mem_non_empty</code> in the definition of filters. So your definition is <em>not</em> equivalent to the definition in mathlib. Both choices have pros and cons, but mathlib's version is far superior in the long run (this is probably irrelevant to whatever you are trying to do).</p>",
        "id": 203244487,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594198129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  Thanks and agreed! I eventually default to <code>mathlib</code>'s version in my proofs. This was just me playing around preparing some formalization notes. Actually P. Clark doesn't have <code>f_univ_in</code> in his definition, it just got there after I considered a few variants and I forgot to remove it. Then he only considers proper filters, there you go for <code>f_mem_non_empty</code>.</p>",
        "id": 203245874,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594199327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  As a follow-up question, we don't seem to have nets in <code>mathlib</code>.  Would it make sense to add them?</p>",
        "id": 203246250,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594199605
    },
    {
        "content": "<p>If you plan to eventually use mathlib filters then you probably shouldn't put that properness condition in your main definition.</p>",
        "id": 203247187,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594200443
    },
    {
        "content": "<p>You are right that we don't have nets in mathlib. It seems that, beyond the illusion of familiarity that they provide at first, they are simply inferior to filters in every aspect. There is no harm in adding an isolated file <code>nets.lean</code>, but I don't think we should start duplicating everything in those terms. Our topology library is already pretty big hence difficult to navigate.</p>",
        "id": 203247315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594200574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20theory.20construct/near/203247187\">said</a>:</p>\n<blockquote>\n<p>If you plan to eventually use mathlib filters then you probably shouldn't put that properness condition in your main definition.</p>\n</blockquote>\n<p>Just making sure, proper filters in <code>mathlib</code> are those <code>F</code> such that <code>F ≠ ⊥</code> --- ?</p>",
        "id": 203256889,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594208044
    },
    {
        "content": "<p>Yes, and many theorems assume <code>F ≠ ⊥</code>.</p>",
        "id": 203627469,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1594528489
    },
    {
        "content": "<p>As far as I understand, the main reason to deal with <code>⊥</code> is to have a <code>complete_lattice</code> structure.</p>",
        "id": 203627480,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1594528533
    },
    {
        "content": "<p>It also enables you to do pushforwards and pullbacks (or <code>map</code> and <code>comap</code> as they're called in lean)</p>",
        "id": 203634437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594543362
    }
]