[
    {
        "content": "<p>I am trying to just apply the proof <code>monof</code> to <code>h</code> using the <code>have</code> keyword. However, for some reason it gives me a few goal states that I don't understand. This is my code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">monof</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">monotone_const</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">monof</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This generates three goal states. The first is the one that I actually wanted:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">monof</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n\n\n<p>But it also generates these goal states that I haven't seen before. It wants me to \"derive\" <code>ℝ</code> twice...?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">monof</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">ℝ</span>\n\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">monof</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">````</span>\n</code></pre></div>",
        "id": 205046460,
        "sender_full_name": "Chris M",
        "timestamp": 1595759787
    },
    {
        "content": "<p>Those two are <code>?m_1</code> and <code>?m_2</code> that you can see in the type of <code>h2</code> in the first goal</p>",
        "id": 205046478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595759875
    },
    {
        "content": "<p>You can mostly ignore them because they usually go away when you finish the proof</p>",
        "id": 205046531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595759981
    },
    {
        "content": "<p>In this case, you presumably want to derive <code>1 &lt;= 0</code> using <code>h'</code>, so you should finish the application and write <code>have h2 := h monof h'</code>, and then those side goals will disappear</p>",
        "id": 205046576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595760029
    },
    {
        "content": "<p>Something which I brought up in lftcm - it would be great if <code>m_1</code> could be used as a heading for it's associated goal in the lean goal state window</p>",
        "id": 205067652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595798020
    },
    {
        "content": "<p>I'm not sure that the goal knows it's called ?m_1 in another goal</p>",
        "id": 205067799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595798253
    },
    {
        "content": "<p>Unfortunately it doesn't work because the metavariables are given new names every time they get printed</p>",
        "id": 205084961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595831018
    },
    {
        "content": "<p>I don't know how hard it would be to change the pretty printer so that metavariable numbering can be shared across multiple goals</p>",
        "id": 205085005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595831054
    }
]