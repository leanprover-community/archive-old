[
    {
        "content": "<p>Dear All,</p>\n<p>I have been playing around with <code>mul, smul, nsmul</code> and have been missing the following lemma, with its simple proof.  Am I missing some trick, or should this appear somewhere in mathlib?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">smul_one_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">•</span><span class=\"o\">)]</span>\n<span class=\"c1\">-- squeezing: simp only [has_scalar.smul, mul_one, nsmul_eq_mul]</span>\n</code></pre></div>",
        "id": 233483385,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617800776
    },
    {
        "content": "<p>I guess the generic lemma is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.algebra_map_eq_smul_one\">docs#algebra.algebra_map_eq_smul_one</a>, and then you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.eq_nat_cast\">docs#ring_hom.eq_nat_cast</a> to get this result. But a dedicated lemma sounds fine (make sure to also add one for ℤ and ℚ!)</p>",
        "id": 233493596,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617804429
    },
    {
        "content": "<p>Careful with that lemma, until <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s PR lands, that should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.smul_one_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">nsmul_eq_smul</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 233495368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617805057
    },
    {
        "content": "<p>Otherwise it only applies to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_monoid.nat_semimodule\">docs#add_comm_monoid.nat_semimodule</a>` and not other nat-module structures</p>",
        "id": 233495522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617805098
    },
    {
        "content": "<p>I'm finding <code>algebra.algebra_map_eq_smul_one</code>  particularly obnoxious to use due to its implicit <code>A</code> argument</p>",
        "id": 233496907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617805539
    },
    {
        "content": "<p>Ah, it's worse than that. Here's the proof I think <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>'s was suggesting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.smul_one_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.to_semimodule</span><span class=\"bp\">;</span> <span class=\"n\">exactI</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">algebra.algebra_map_eq_smul_one</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.eq_nat_cast</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Note the awful <code>exactI</code> that's necessary because the priority of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.to_semimodule\">docs#algebra.to_semimodule</a> is lower than the evil <code>nat_semimodule</code></p>",
        "id": 233497986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617805902
    },
    {
        "content": "<p>Ok, from these comments, I deduce that this is a somewhat conflictive result!  I am comforted that it is tricky, since I had some trouble with it!</p>\n<p>Should I PR one of these two versions?  I would not really know which one is best, although I prefer the first one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.smul_one_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">nsmul_eq_smul</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 233499152,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617806309
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7094\">#7094</a></p>",
        "id": 233548745,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617824222
    }
]