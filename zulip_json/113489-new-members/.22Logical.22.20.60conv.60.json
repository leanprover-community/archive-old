[
    {
        "content": "<p>Is it possible to use <code>conv</code> to change propositions? For example, say I want to change <code>h : ∃ g, function.left_inverse g f ∧ function.right_inverse g f</code> to <code>h : ∃ g, function.bijective g</code>. Using <code>congr</code> inside a <code>conv at h</code> block I can get inside the existential binder, however I find myself unable to use <code>congr</code> to navigate around <code>∧</code>.</p>",
        "id": 206646023,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597190460
    },
    {
        "content": "<p>I feel like I may be using this tactic not as intended. But it would be really cool to be able to use it this way.</p>",
        "id": 206646065,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597190491
    },
    {
        "content": "<p>I don't think your example is correct, and I'm not sure what you mean</p>",
        "id": 206648953,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597193164
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">comm</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206649170,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597193427
    },
    {
        "content": "<p>I find myself unable to navigate to the right hand side of <code>∧</code>.</p>",
        "id": 206649202,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597193476
    },
    {
        "content": "<p>congr, skip?</p>",
        "id": 206649211,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597193495
    },
    {
        "content": "<p>Oh, doesn't work.</p>",
        "id": 206649291,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597193557
    },
    {
        "content": "<p>In #conv it is said that <code>congr</code> works with functions. <code>and</code> <em>is</em> function but also a type constructor (I don't recall if that is the correct name, basically something like <code>list</code> and <code>option</code>), so it probably receives some special treatment internally.</p>",
        "id": 206649647,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597193987
    },
    {
        "content": "<p>I find it a bit weird considering <code>∃ x, p x ∧ q x</code> is syntax sugar for <code>Exists (λ (x : α), and (p x) (q x))</code>.</p>",
        "id": 206649799,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597194130
    }
]