[
    {
        "content": "<p>I'm getting a weird error message. The following code does not compile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">modular_constraint</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span> <span class=\"bp\">∧</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">39</span> <span class=\"bp\">=</span> <span class=\"mi\">24</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c\">/-</span><span class=\"cm\"> proof omitted for brevity -/</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">alt_1_digit</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span> <span class=\"bp\">∧</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"mi\">39</span> <span class=\"bp\">=</span> <span class=\"mi\">24</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">modular_constraint</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"n\">h2</span><span class=\"o\">),</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>(The error is on the <code>have h3...</code> line.)</p>\n<p>This surprised me because essentially the same code works when the constant is <code>0</code> instead of <code>1</code>. The error message is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">87</span><span class=\"o\">:</span><span class=\"mi\">43</span><span class=\"o\">:</span> <span class=\"s2\">\"eliminator\"</span> <span class=\"n\">elaborator</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">modular_constraint</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"n\">h2</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"n\">digits</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">%</span> <span class=\"mi\">39</span> <span class=\"bp\">=</span> <span class=\"mi\">24</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"n\">digits</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"n\">digits</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"n\">digits</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">%</span>\n      <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"n\">digits</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">))))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"n\">digits</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n<p>This seems like some mistyping to me - <code>bit0</code> and <code>bit1</code> appear to be library functions that manipulate binary numbers, but everything here is simple operations on naturals. Perhaps it's misinterpreting the <code>^</code> operator, automatically guessing what it is, and <code>0</code> and <code>1</code> are handled differently? Or am I barking up the wrong tree?</p>",
        "id": 212383882,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601958702
    },
    {
        "content": "<p>The <code>bit0</code> and <code>bit1</code> are used for representing numerals</p>",
        "id": 212384002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601958862
    },
    {
        "content": "<p>why does it expect anything to have types involving them</p>",
        "id": 212384018,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601958914
    },
    {
        "content": "<p>When you type <code>24</code>, then Lean sees <code>bit0 12</code>, which is in fact <code>bit0 (bit0 6)</code> which is in fact ...</p>",
        "id": 212384022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601958931
    },
    {
        "content": "<p>So, when you substitute <code>(nat.digits 10 c).length = 1</code> into some formula with numerals... it is trying to replace the <code>1</code> that is nested deeply inside a stack of <code>bit0</code>s and <code>bit1</code> by <code>(nat.digits 10 c).length</code></p>",
        "id": 212384107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601959053
    },
    {
        "content": "<p>Did you by chance mean <code>h1.symm \\t _</code></p>",
        "id": 212384110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601959072
    },
    {
        "content": "<p>no, like if i find and replace 1 with 0 it works</p>",
        "id": 212384153,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601959083
    },
    {
        "content": "<p><code>24</code> is literally the expression <code>bit0 (bit0 (bit0 (bit1 1)))</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.numerals</span> <span class=\"n\">false</span>\n<span class=\"k\">#check</span> <span class=\"mi\">24</span>\n<span class=\"c1\">-- bit0 (bit0 (bit0 (bit1 has_one.one))) : ℕ</span>\n</code></pre></div>",
        "id": 212384294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959300
    },
    {
        "content": "<p>Ok, I see... maybe the best thing to do is <code>rw</code> and use <code>{ occs := occurences.pos [3] }</code> or something like that as rewrite config</p>",
        "id": 212384346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601959333
    },
    {
        "content": "<p>I think you should rewrite in the other direction</p>",
        "id": 212384394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959409
    },
    {
        "content": "<p>what do you mean by that?</p>",
        "id": 212384454,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601959482
    },
    {
        "content": "<p>Also, an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> suggestion: put <code>sorry</code> instead of <code> /- proof omitted for brevity -/</code> so that it is syntactically correct</p>",
        "id": 212384460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959494
    },
    {
        "content": "<p>fixed</p>",
        "id": 212384477,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601959526
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"mi\">39</span> <span class=\"bp\">=</span> <span class=\"mi\">24</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">modular_constraint</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212384532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959573
    },
    {
        "content": "<p>when you use <code>\\t</code> it rewrites in the reverse direction</p>",
        "id": 212384545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959600
    },
    {
        "content": "<p>and it also rewrites the goal instead of the argument on the right of the <code>\\t</code></p>",
        "id": 212384562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959633
    },
    {
        "content": "<p><code>rwa</code>... there just never stop being more tactics that do slightly different things</p>",
        "id": 212384566,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601959640
    },
    {
        "content": "<p>you can use <code>rw h1 at this, assumption</code> if you prefer</p>",
        "id": 212384616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959683
    },
    {
        "content": "<p>that's just a bit shorter</p>",
        "id": 212384618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959688
    },
    {
        "content": "<p>i also didnt know <code>assumption</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 212384634,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601959730
    },
    {
        "content": "<p>okay <code>rw h1 at this, exact this</code></p>",
        "id": 212384643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959744
    },
    {
        "content": "<p>is <code>assumption</code> the same as <code>exact this</code> ?</p>",
        "id": 212384649,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601959764
    },
    {
        "content": "<p>it is <code>exact &lt;one of my assumptions&gt;</code></p>",
        "id": 212384653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959774
    },
    {
        "content": "<p>it searches the context for something matching the goal</p>",
        "id": 212384667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959795
    },
    {
        "content": "<p>hmm, i think iwas using <code>finish</code> for that</p>",
        "id": 212384712,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601959807
    },
    {
        "content": "<p>heh that's a bit overkill</p>",
        "id": 212384714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959815
    },
    {
        "content": "<p>it's fewer characters to type, seems like the simplest thing to do</p>",
        "id": 212384723,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601959828
    },
    {
        "content": "<p>it's a big ol decision procedure</p>",
        "id": 212384736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959846
    },
    {
        "content": "<p>when the actual proof term is just <code>this</code> you should probably use a lighter weight tactic</p>",
        "id": 212384752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959883
    },
    {
        "content": "<p>I feel like it's essentially impossible to know which tactics are lightweight and which are not</p>",
        "id": 212384767,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601959913
    },
    {
        "content": "<p>Not at all</p>",
        "id": 212384769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959919
    },
    {
        "content": "<p>Anything which desugars to the core logic operations is cheap, everything that involves search of some kind is expensive</p>",
        "id": 212384817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959952
    },
    {
        "content": "<p>as a rule of thumb</p>",
        "id": 212384821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959957
    },
    {
        "content": "<p>so <code>intro</code> <code>exact</code> <code>apply</code> <code>refine</code> are cheap, <code>simp</code> <code>cc</code> <code>finish</code> <code>tidy</code> are expensive</p>",
        "id": 212384836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601959997
    },
    {
        "content": "<p><code>rw</code> is relatively cheap although it has a slightly complicated desugaring</p>",
        "id": 212384847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601960022
    },
    {
        "content": "<p><code>assumption</code> is usually cheap, although occasionally you can step on a defeq mine</p>",
        "id": 212384901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601960066
    },
    {
        "content": "<p>you can also write <code>show_term { some_tactic }</code> to investigate the terms that a tactic is producing. It's often enlightening!</p>",
        "id": 212385521,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601960981
    }
]