[
    {
        "content": "<p>OK, I think I'm wrapping my head around it, though I will need a few digestion days. Thanks!</p>",
        "id": 269543671,
        "sender_full_name": "bottine",
        "timestamp": 1643274967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">bottine</span> has marked this topic as resolved.</p>",
        "id": 269544214,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643275335
    },
    {
        "content": "<p>In case you like this sort of explanation, the relationship between sets and subtypes is that the following commutative diagram is a pullback diagram:</p>\n<p><a href=\"/user_uploads/3121/AO3RoIEl1YTVmzA74mLK29Ad/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AO3RoIEl1YTVmzA74mLK29Ad/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/AO3RoIEl1YTVmzA74mLK29Ad/image.png\"></a></div><p>The <code>true -&gt; Prop</code> map send the proof of <code>true</code> to <code>true</code> itself (I could have also done <code>Unit -&gt; Prop</code>; any domain that's a singleton works). This map is a <a href=\"http://nlab-pages.s3.us-east-2.amazonaws.com/nlab/show/subobject+classifier\">subobject classifier</a>.</p>\n<p>The type <code>set α</code> is a synonym for <code>α → Prop</code>, which is the type of the bottom map.  Given an injection <code>f : β → α</code>, there is a unique map <code>β → ↥s</code>, where <code>s : set α</code> is the image of <code>f</code>, and where this map fits in a commuting triangle with <code>f</code> and <code>↥s → α</code>.</p>\n<p><code>subtype</code> gives a universal construction for these <code>↥s</code> types.</p>",
        "id": 269546712,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643276666
    },
    {
        "content": "<p>So, sets on <code>α</code> and isomorphism classes of injective maps to <code>α</code> are \"the same\" (at least conceptually), which justifies the coercion from sets to types via <code>subtype</code>.</p>",
        "id": 269547381,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643277028
    },
    {
        "content": "<p>Yeah, I was just piecing together the fact that a set is just a predicate over the type at hand, and wondering if the subobject classifier concept tied in, here.</p>",
        "id": 269553601,
        "sender_full_name": "bottine",
        "timestamp": 1643280217
    },
    {
        "content": "<p>A subset in Lean is a term, and a subtype is a type. So, for example, you can't have functions from or to subsets (I mean, you can, but you have to promote them to subtypes first)</p>",
        "id": 269568607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643288719
    },
    {
        "content": "<p>Mmh, that's something I hadn't thought of.</p>",
        "id": 269586542,
        "sender_full_name": "bottine",
        "timestamp": 1643296332
    }
]