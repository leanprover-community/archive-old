[
    {
        "content": "<p>What is the most efficient way to prove this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">linear_equiv</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.coe_fn_injective\">docs#equiv.coe_fn_injective</a> but can't figure out how to use it here.</p>",
        "id": 205697937,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596315405
    },
    {
        "content": "<p>Here's a kind of annoying proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">linear_equiv</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The coe_fn_injective thing is just the first <code>ext</code>. Looking at the goal I think one should train <code>norm_cast</code> to do this.</p>",
        "id": 205698088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596315675
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">linear_equiv</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205698146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596315755
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">linear_equiv</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205698160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596315827
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 205698462,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596316325
    },
    {
        "content": "<p>I'm sad that <code>library_search</code> doesn't work on this. <code>library_search!</code> and <code>suggest</code> just time out. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 205698494,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1596316436
    },
    {
        "content": "<p>Is it already in the library? I use two theorems not one.</p>",
        "id": 205698624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596316613
    },
    {
        "content": "<p>oh, <code>library_search</code> finds this proof of the non-linear-algebra version:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"bp\">→</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205698701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596316730
    },
    {
        "content": "<p>Oh, I think you're right. <code>library_search</code> uses <code>solve_by_elim</code> which has <code>congr_fun</code> in its set of lemmas.</p>",
        "id": 205698763,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1596316813
    },
    {
        "content": "<p>So <code>library_search</code> can't usually apply more than one theorem.</p>",
        "id": 205698767,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1596316834
    },
    {
        "content": "<p>I guess that's an argument for adding this to the library.</p>",
        "id": 205699240,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1596317777
    },
    {
        "content": "<p>See also the proofs of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_hom.coe_ring_hom_injective/src\">src#alg_hom.coe_ring_hom_injective</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.coe_monoid_hom_injective/src\">src#ring_hom.coe_monoid_hom_injective</a></p>",
        "id": 205701952,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596323198
    }
]