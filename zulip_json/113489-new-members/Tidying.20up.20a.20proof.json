[
    {
        "content": "<p>Hi all, I've written a proof for a (seemingly) simple statement, but I feel like it could be simplified a lot. Any comments or suggestions appreciated!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">sub_sub_assoc</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">omega</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fact_pred</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span>       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred_eq_sub_one</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pred_eq_of_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n        <span class=\"bp\">...</span>     <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact_succ</span> <span class=\"bp\">_</span>\n        <span class=\"bp\">...</span>     <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>              <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred_eq_sub_one</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pred_eq_of_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">choose_lemma</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred_le</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">‹</span><span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"err\">›</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">eq_of_mul_eq_mul_right</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact_pos</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact_pos</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">))),</span>\n  <span class=\"k\">by</span> <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n        <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact_succ</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sub_sub_assoc</span> <span class=\"n\">hr1</span> <span class=\"n\">hr2</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">n</span>                                                             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_mul_fact_mul_fact</span> <span class=\"err\">‹</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"err\">›</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)</span>                         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_mul_fact_mul_fact</span> <span class=\"err\">‹</span><span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"err\">›</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">fact_pred</span> <span class=\"err\">‹</span><span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"err\">›</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">))</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">main_lemma</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred_le</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">‹</span><span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"err\">›</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_pos</span> <span class=\"err\">‹</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"err\">›</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_pos</span> <span class=\"err\">‹</span><span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"err\">›</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_le_iff&#39;</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">div_mul_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">le_div_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">rotate</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_mul_le_mul_right</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hr1</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"k\">calc</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>                <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_right</span> <span class=\"bp\">_</span> <span class=\"n\">k</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span>                              <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">choose_lemma</span> <span class=\"n\">hr1</span> <span class=\"n\">hr2</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I don't have need for any of the internal lemmas so feel free to rearrange/remove them, as long as <code>main_lemma</code> looks pretty much the same.<br>\nThanks!</p>",
        "id": 181100191,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574160810
    },
    {
        "content": "<p>You can use <code>ac_refl</code> on the first and last steps of the calc in <code>choose_lemma</code></p>",
        "id": 181101935,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1574162203
    },
    {
        "content": "<p>Ooooh nice thanks</p>",
        "id": 181102001,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574162281
    },
    {
        "content": "<p>I managed the following alternate proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">div_le_div_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">div_mul_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">div_le_iff</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_succ_right_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_comm</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_right</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_mul_fact_mul_fact</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_mul_fact_mul_fact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact_succ</span><span class=\"o\">,</span>\n    <span class=\"err\">←</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact_succ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n    <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_right_inj</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact_pos</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_right_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_right_inj</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact_pos</span> <span class=\"bp\">_</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">main_lemma</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_le_div_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">hr1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_le_mul_right</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pos</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_comm</span> <span class=\"n\">hr2</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_succ_right_eq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hr2</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_right_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_right_comm</span> <span class=\"n\">B</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_right</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_pos</span> <span class=\"n\">hr2</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_pos</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">hr2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181102787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574162976
    },
    {
        "content": "<p><code>example (n : ℕ) : n &gt; 0 → ¬ (n = 0) := by ??</code> Which tactic finishes this? Or is it a function? I couldn't find it :-/</p>",
        "id": 181113419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574172378
    },
    {
        "content": "<p><code>example (n : ℕ) : n &gt; 0 → ¬ (n = 0) := by intros; linarith</code> :D</p>",
        "id": 181113431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574172400
    },
    {
        "content": "<p><code>ne_of_lt</code> or <code>ne_of_gt</code></p>",
        "id": 181113433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574172403
    },
    {
        "content": "<p>aah I was foolishly looking for <code>ne_zero_of_pos</code></p>",
        "id": 181113443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574172422
    },
    {
        "content": "<p>I tried multiplying everything out but it was horrible :-(</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"c1\">-- this should be in mathlib, right?</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">div_le_div_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">div_mul_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">div_le_iff</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Should this be in data.rat? It doesn&#39;t easily follow from nat.choose_eq_fact_div_fact</span>\n<span class=\"n\">def</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">choose_eq_fact_div_fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fact</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_div_of_mul_eq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fact_pos</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fact_pos</span><span class=\"o\">]))</span> <span class=\"err\">$</span>\n<span class=\"k\">begin</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">choose_mul_fact_mul_fact</span> <span class=\"n\">h</span> <span class=\"kn\">end</span>\n\n<span class=\"c1\">-- s = r - 1</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">main_lemma</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr2</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">choose_eq_fact_div_fact</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">choose_eq_fact_div_fact</span><span class=\"o\">,</span> <span class=\"n\">div_div_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">div_div_eq_mul_div</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">div_le_div_of_le_of_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_cancel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">fact_succ</span><span class=\"o\">,</span> <span class=\"n\">fact_succ</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">succ_sub</span><span class=\"o\">,</span> <span class=\"n\">succ_sub_one</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_sub</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))),</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))),</span> <span class=\"k\">by</span> <span class=\"n\">ac_refl</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mul_le_mul_right</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_sub_left_of_add_le</span> <span class=\"n\">hr2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_sub_left_of_add_le</span> <span class=\"n\">hr2</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">fact_pos</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181117012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574174588
    },
    {
        "content": "<p>This surprised me along the way:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">--  ac_refl, -- closes goal</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"c1\">-- does not close goal</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> would you have expected <code>ring</code> to work there?</p>",
        "id": 181117247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574174741
    },
    {
        "content": "<p>yes</p>",
        "id": 181117377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574174804
    },
    {
        "content": "<p>Whenever <code>ring</code> fails, try <code>ring1</code>, which reports a useful error instead of doing a fall back thing</p>",
        "id": 181117492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574174876
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f1</span>  <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 181117608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574174927
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>app_builder_exception, more information can be obtained using command `set_option trace.app_builder true`\nstate:\nf1 n s : ℕ\n⊢ f1 * (n - s) = (n - s) * f1\n</pre></div>\n\n\n<p>is the output from <code>ring1</code></p>",
        "id": 181117638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574174953
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[app_builder] failed to create an &#39;has_neg.neg&#39;-application, there are missing implicit arguments\n</pre></div>",
        "id": 181117673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574174989
    },
    {
        "content": "<p>it thinks the subtraction is ring subtraction, and builds a bad term</p>",
        "id": 181117761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574175020
    },
    {
        "content": "<p>I can generalize my way out of this I guess</p>",
        "id": 181117780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574175038
    },
    {
        "content": "<p>\"you don't know this, but n-s is an atom\"</p>",
        "id": 181117803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574175058
    },
    {
        "content": "<p>Why does multiplying it all out hurt so much? That's an algorithmic way to solve this problem [I'm now talking about the original q]</p>",
        "id": 181117862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574175100
    },
    {
        "content": "<p>What would the Isabelle proof of this triviality look like? <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> do you know?</p>",
        "id": 181118189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574175298
    },
    {
        "content": "<p>what do you want to be less painful?</p>",
        "id": 181118217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574175316
    },
    {
        "content": "<p>there are several interacting things here</p>",
        "id": 181118249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574175339
    },
    {
        "content": "<p>I think the real thing is that the lemma I called <code>nat.choose_succ_right_eq</code> was missing</p>",
        "id": 181118401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574175379
    },
    {
        "content": "<p>one of the basic facts about choose is how it changes when you move by one in any direction</p>",
        "id": 181118447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574175411
    },
    {
        "content": "<p><code>div_le_div_iff</code> missing is even more scandalous. I would have expected that in core</p>",
        "id": 181118501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574175447
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Should this be in data.rat? It doesn&#39;t easily follow from nat.choose_eq_fact_div_fact</span>\n<span class=\"n\">def</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">choose_eq_fact_div_fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fact</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>It does easily follow from <code>choose_mul_fact_mul_fact</code> though</p>",
        "id": 181118665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574175531
    },
    {
        "content": "<blockquote>\n<p>What would the Isabelle proof of this triviality look like? <span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> do you know?</p>\n</blockquote>\n<p>Isabelle automation is order of magnitudes better. So, anything will work. I just tried it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">for_kevin</span><span class=\"o\">:</span>\n  <span class=\"n\">fixes</span> <span class=\"n\">f1</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"bp\">::</span><span class=\"n\">nat</span>\n  <span class=\"n\">shows</span> <span class=\"s2\">&quot;f1 * (n-s) = (n-s) * f1&quot;</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>You can replace <code>by simp</code> with <code>by auto</code>, or <code>by algebra</code>, or <code>by fastforce</code>, or <code>by force</code>. In fact, I just typed <code>try0</code> and Isabelle suggested all these solutions right away.</p>",
        "id": 181120144,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574176417
    },
    {
        "content": "<p>I think he's talking about the choose proof</p>",
        "id": 181120242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574176460
    },
    {
        "content": "<p>Which statement?</p>",
        "id": 181120358,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574176530
    },
    {
        "content": "<p>Probably <code>main_lemma</code>?</p>",
        "id": 181120498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574176605
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">main_lemma</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 181120509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574176613
    },
    {
        "content": "<p>I really want this to be easy</p>",
        "id": 181120524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574176625
    },
    {
        "content": "<p>I get the sense that kevin's proof is a tactic bash</p>",
        "id": 181120527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574176630
    },
    {
        "content": "<p>My proof is \"LOOK. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mi>n</mi><mi>r</mi></mfrac><mo fence=\"true\">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><mrow><mi>r</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\binom{n}{r}=\\frac{n!}{r!(n-r)!}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7453919999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.400108em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose mtight\">!</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose mtight\">)</span><span class=\"mclose mtight\">!</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mclose mtight\">!</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> AND THE REST IS TRIVIAL\"</p>",
        "id": 181120589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574176670
    },
    {
        "content": "<p>This sort of proof feels easier in metamath to me</p>",
        "id": 181120667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574176698
    },
    {
        "content": "<p>(assuming <code>fact_succ</code>)</p>",
        "id": 181120675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574176701
    },
    {
        "content": "<p>all this business with saturating subtraction isn't a problem</p>",
        "id": 181120696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574176715
    },
    {
        "content": "<p>It might help if <code>nat.choose</code> was defined over integers</p>",
        "id": 181120853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574176805
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Should this be in data.rat? It doesn&#39;t easily follow from nat.choose_eq_fact_div_fact</span>\n<span class=\"n\">def</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">choose_eq_fact_div_fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fact</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>It does easily follow from <code>choose_mul_fact_mul_fact</code> though</p>\n</blockquote>\n<p>My proof was an attempt to show this and it was still pretty horrible. What am I missing?</p>",
        "id": 181121614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574177213
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"c1\">-- this should be in mathlib, right?</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">div_le_div_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">div_mul_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">div_le_iff</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Should this be in data.rat? It doesn&#39;t easily follow from nat.choose_eq_fact_div_fact</span>\n<span class=\"n\">def</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">choose_eq_fact_div_fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fact</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_div_of_mul_eq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fact_pos</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fact_pos</span><span class=\"o\">]))</span> <span class=\"err\">$</span>\n<span class=\"k\">begin</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">choose_mul_fact_mul_fact</span> <span class=\"n\">h</span> <span class=\"kn\">end</span>\n\n<span class=\"c1\">-- r = s + 1</span>\n<span class=\"c1\">-- n = t + 1 + s</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">main_lemma</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">choose_eq_fact_div_fact</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">choose_eq_fact_div_fact</span><span class=\"o\">,</span> <span class=\"n\">div_div_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">div_div_eq_mul_div</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">div_le_div_of_le_of_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">add_right_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">fact_succ</span><span class=\"o\">,</span> <span class=\"n\">fact_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_right</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">},</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">fact_pos</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Using less painful variables s and t I can get it down to this.</p>",
        "id": 181121708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574177270
    },
    {
        "content": "<p>But if Isabelle can just blast through it then this will give me a better understanding of what we are missing in Lean. This proof should be trivial given some hints -- shouldn't it? <code>by schoolkid using [choose_mul_fact_mul_fact, fact_pos, fact_succ]</code></p>",
        "id": 181122012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574177431
    },
    {
        "content": "<p>I think you got it down pretty well.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">choose_eq_fact_div_fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fact</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">eq_div_iff_mul_eq</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"o\">[</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">choose_mul_fact_mul_fact</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">fact_pos</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fact_pos</span> <span class=\"bp\">_</span><span class=\"o\">))]</span>\n</pre></div>",
        "id": 181122015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574177432
    },
    {
        "content": "<p>If you have a sledgehammer then you can make it through this, I think</p>",
        "id": 181122045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574177461
    },
    {
        "content": "<p>because all schoolkids know <code>div_div_eq_mul_div, div_le_div_of_le_of_pos, div_div_eq_mul_div, nat.add_sub_cancel</code> etc</p>",
        "id": 181122108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574177506
    },
    {
        "content": "<p>they also know a number of false variations on those :P</p>",
        "id": 181122204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574177545
    },
    {
        "content": "<p>Yeah, it's a pretty powerful tactic. You can prove <code>false</code> with it if you're not careful</p>",
        "id": 181122239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574177564
    },
    {
        "content": "<p>I started my lectures this year with a proof that all triangles were equilateral and it was only once I'd finished that people started complaining; I made the error about 10 lines before that.</p>",
        "id": 181122326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574177615
    },
    {
        "content": "<p>They were happy with the method but uncomfortable with the conclusion</p>",
        "id": 181122354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574177637
    },
    {
        "content": "<p>Here is an Isabelle proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">for_kevin2</span><span class=\"o\">:</span>\n  <span class=\"n\">fixes</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"bp\">::</span><span class=\"n\">nat</span>\n  <span class=\"n\">assumes</span> <span class=\"s2\">&quot;1 ≤ r&quot;</span> <span class=\"s2\">&quot;r ≤ n&quot;</span> <span class=\"s2\">&quot;A * r ≤ B * (n-r+1)&quot;</span>\n  <span class=\"n\">shows</span> <span class=\"s2\">&quot;A / (binomial n r) ≤ B / (binomial n (r-1))&quot;</span>\n<span class=\"k\">proof</span> <span class=\"bp\">-</span>\n  <span class=\"k\">have</span> <span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"s2\">&quot;binomial n r = (fact n)/(fact r * fact (n-r))&quot;</span>\n    <span class=\"kn\">using</span> <span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">binomial_fact</span> <span class=\"k\">by</span> <span class=\"n\">blast</span>\n  <span class=\"k\">have</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;binomial n (r-1) = (fact n)/(fact (r-1) * fact (n+1-r))&quot;</span>\n    <span class=\"kn\">using</span> <span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">binomial_fact</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"s2\">&quot;r-1&quot;</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">by</span> <span class=\"n\">force</span>\n  <span class=\"k\">have</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;fact r = of_nat r * fact (r-1)&quot;</span>\n    <span class=\"kn\">using</span> <span class=\"n\">fact_reduce</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">have</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;fact (n+1-r) = of_nat (n+1-r) * fact (n-r)&quot;</span>\n    <span class=\"kn\">using</span> <span class=\"n\">fact_reduce</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"s2\">&quot;n+1-r&quot;</span><span class=\"o\">]</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">show</span> <span class=\"err\">?</span><span class=\"n\">thesis</span> <span class=\"n\">unfolding</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">simp</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">divide_simps</span><span class=\"o\">)</span>\n    <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">metis</span> <span class=\"n\">Suc_diff_le</span> <span class=\"n\">Suc_eq_plus1_left</span> <span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"n\">commute</span> <span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">of_nat_mono</span> <span class=\"n\">of_nat_mult</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</pre></div>\n\n\n<p>I still had to help it a little bit giving the auxiliary statements <code>I</code>, <code>J</code>, <code>K</code>, <code>L</code>. The last line is needed since my assumption is formulated for integer numbers but the conclusion needs it over rationals (in fact here over the reals, as Isabelle coerced everything to reals when I wrote the division). The point is I didn't write this line, it was found by sledgehammer.</p>",
        "id": 181123467,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574178234
    },
    {
        "content": "<p>I should tell you what <code>binomial_fact</code> and <code>fact_reduce</code> are, by the way. They are preexisting facts in the library, as follows.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">fact_reduce</span><span class=\"o\">:</span> <span class=\"s2\">&quot;n &gt; 0 ⟹ fact n = of_nat n * fact (n - 1)&quot;</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">binomial_fact</span><span class=\"o\">:</span>\n  <span class=\"n\">assumes</span> <span class=\"n\">kn</span><span class=\"o\">:</span> <span class=\"s2\">&quot;k ≤ n&quot;</span>\n  <span class=\"n\">shows</span> <span class=\"s2\">&quot;(of_nat (n choose k) :: &#39;a::field_char_0) = fact n / (fact k * fact (n - k))&quot;</span>\n</pre></div>",
        "id": 181123806,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574178393
    },
    {
        "content": "<p>So I, J, K, L are the things we knew we needed, and the proofs are relatively straightforward using automation, and then you have some proof which kind of looks awful, although it also looks much shorter than the Lean proof, but it was also found using automation. Thanks Sebastien.</p>",
        "id": 181123817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574178397
    },
    {
        "content": "<p>In particular the proof still looks a bit clunky but it was probably much easier for the user to write.</p>",
        "id": 181123882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574178444
    },
    {
        "content": "<p>When I write an Isabelle proof I write down enough intermediate statements, and then I ask automation to complete the proof of each intermediate statement, and also to combine them all to prove the main  result. If it doesn't work, I add more intermediate statements. This is really different from the way I write Lean proofs (and I think the Isabelle way is much smoother!)</p>",
        "id": 181124262,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574178613
    },
    {
        "content": "<p>So now we need to turn this into some sort of concrete proposal(s) for improving Lean.</p>",
        "id": 181124340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574178657
    },
    {
        "content": "<p>Occasionally people pop up and say \"I want to write Lean automation, what do you guys need?\" and if they're not mathematicians I feel like I can't say \"Groebner bases\"</p>",
        "id": 181124412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574178695
    },
    {
        "content": "<p>but I can't tell my <code>cc</code> from my <code>simp</code> so I don't feel competent enough to answer a computer scientist. Oh, I know we need a sledgehammer but this seems like a highly non-trivial task. I used to know that we needed <code>norm_cast</code> but now we have that. Imagine how much worse the Lean proof would have been a year ago.</p>",
        "id": 181124663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574178816
    },
    {
        "content": "<p>What we really need is <code>auto</code> (or <code>force</code>). Something that uses the simplifier but also tries some things that have been marked as reasonable in the library, and backtracks if it doesn't work (with some backtracking depth which is not the same for <code>auto</code>, <code>fastforce</code> and <code>force</code>). This is called a tableau prover, I think.</p>",
        "id": 181124748,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574178844
    },
    {
        "content": "<p>Is it like a stronger version of <code>tidy</code>?</p>",
        "id": 181124817,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574178896
    },
    {
        "content": "<p>Out of interest, how long does the automation take to (a) prove I,J,K,L, (b) find the two-line incantation at the end and (c) compile the two-line incantation at the end? Are (a) and (c) super-quick and (b) might take a few minutes?</p>",
        "id": 181124910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574178934
    },
    {
        "content": "<p>What I also dearly miss is simprocs, i.e., simple algorithms that are used by <code>simp</code> to try to simplify things in addition to the lemmas that have been marked as <code>simp</code>. <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> had given a start to this, in <a href=\"https://github.com/johoelzl/lean-simp-loop\" target=\"_blank\" title=\"https://github.com/johoelzl/lean-simp-loop\">https://github.com/johoelzl/lean-simp-loop</a>, but I think it never made it into production. For instance, if you see <code>∃a, a = t ∧ p a</code>, you would like to reduce it to <code>p t</code>.</p>",
        "id": 181125212,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574179076
    },
    {
        "content": "<p>That's not some lemma in logic.basic which you can just rewrite or something?</p>",
        "id": 181125325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574179133
    },
    {
        "content": "<p>Is it  a bad simp lemma?</p>",
        "id": 181125338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574179140
    },
    {
        "content": "<p>(a) and (c) are instantaneous. (b) takes less than 5 seconds.</p>",
        "id": 181125344,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574179143
    },
    {
        "content": "<p>Johannes also wanted as a simproc to have<code>∃a, p a ∧ ∃b, ∃h : a = f b, q a h</code> transform into <code>∃b, p (f b) ∧ q (f b) rfl</code>, and also all the possible variations. So, it's rather infinitely many lemmas (and many of them would not fire as simp lemmas, yes).</p>",
        "id": 181125587,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574179257
    },
    {
        "content": "<p>Yes, it's a stronger version of <code>tidy</code> (note that <code>tidy</code> never backtracks). <code>back</code> is supposed to do something like that, but I don't know if <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> is planning to do it as a tableau prover, i.e., registering what has already been proved and add progressively new facts, to get something efficient.</p>",
        "id": 181125806,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574179368
    },
    {
        "content": "<p>If anyone's interested, I've now got it to this (taking a lot from <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s version) :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_succ_right_eq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">right_distrib</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_succ_succ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_mul_choose_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_of_eq_add</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_sub_left_distrib</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">div_le_div_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">div_mul_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">div_le_iff</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">main_lemma</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_le_div_iff</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_mul_le_mul_right</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hr1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_comm</span> <span class=\"n\">hr2</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_succ_right_eq</span><span class=\"o\">,</span> <span class=\"n\">mul_right_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_right_comm</span> <span class=\"n\">B</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_right</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_pos</span> <span class=\"n\">hr2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_pos</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred_le</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">hr2</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>In particular a somewhat quicker proof of <code>nat.choose_succ_right_eq</code>, which doesn't need the assumption either</p>",
        "id": 181145490,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574191466
    },
    {
        "content": "<p>I don't <em>really</em> like how we do a <code>cases r</code> but it does seem faster</p>",
        "id": 181145555,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574191510
    },
    {
        "content": "<p>Your <code>cases r</code> is just my \"replace r with s=r-1\" right? It's just one less inequality to deal with. If you can start at 0, do.</p>",
        "id": 181145676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574191570
    },
    {
        "content": "<p>It doesn't solve the inequality as far as I can tell - it's just that we state <code>nat.choose_succ_right_eq</code> with lots of <code>+ 1</code>s around, so it's easier to unify when we've <code>succ</code>ed <code>r</code></p>",
        "id": 181146154,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574191856
    },
    {
        "content": "<p>A PR for <code>choose_succ_right_eq</code> and another basic choose fact <code>choose n k = choose n (n-k)</code>: <a href=\"https://github.com/leanprover-community/mathlib/pull/1717\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1717\">https://github.com/leanprover-community/mathlib/pull/1717</a></p>",
        "id": 181167117,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574207586
    },
    {
        "content": "<p>I see the following line (<a href=\"https://github.com/leanprover-community/mathlib/blob/7ae8b1d6821da5f4018c8c885c88d74e21578a83/src/data/nat/basic.lean#L1086\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/7ae8b1d6821da5f4018c8c885c88d74e21578a83/src/data/nat/basic.lean#L1086\">https://github.com/leanprover-community/mathlib/blob/7ae8b1d6821da5f4018c8c885c88d74e21578a83/src/data/nat/basic.lean#L1086</a>)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">succ_mul_choose_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">k</span>\n</pre></div>\n\n\n<p>Shouldn't that be rewritten to use <code>(n+1)</code> everywhere? I thought <code>succ</code> should be exposed as little as possible.</p>",
        "id": 181187387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574237882
    },
    {
        "content": "<blockquote>\n<p><code>div_le_div_iff</code> missing is even more scandalous. I would have expected that in core</p>\n</blockquote>\n<p>PR for this (into algebra/ordered_field): <a href=\"https://github.com/leanprover-community/mathlib/pull/1720\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1720\">https://github.com/leanprover-community/mathlib/pull/1720</a></p>",
        "id": 181290995,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574331475
    },
    {
        "content": "<blockquote>\n<p>I see the following line (<a href=\"https://github.com/leanprover-community/mathlib/blob/7ae8b1d6821da5f4018c8c885c88d74e21578a83/src/data/nat/basic.lean#L1086\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/7ae8b1d6821da5f4018c8c885c88d74e21578a83/src/data/nat/basic.lean#L1086\">https://github.com/leanprover-community/mathlib/blob/7ae8b1d6821da5f4018c8c885c88d74e21578a83/src/data/nat/basic.lean#L1086</a>)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">succ_mul_choose_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">k</span>\n</pre></div>\n\n\n<p>Shouldn't that be rewritten to use <code>(n+1)</code> everywhere? I thought <code>succ</code> should be exposed as little as possible.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Is this a suggestion for the PR, or a general comment?</p>",
        "id": 181292321,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574332525
    },
    {
        "content": "<p>More of a general comment/question</p>",
        "id": 181292532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574332695
    },
    {
        "content": "<p>I'm still confused about whether this is intended, or whether mathlib drifted to a style where <code>succ</code> is deprecated</p>",
        "id": 181292572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574332737
    }
]