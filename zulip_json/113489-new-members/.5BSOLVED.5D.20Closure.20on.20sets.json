[
    {
        "content": "<p>I have a function  on <code>f : set state → set state</code> and know that <code>fintype state</code>. I would like to find the closure or fixed point of this, i.e. <code>s : set state</code> such that <code>f s = s</code>. I have found <code>has_fix</code> in mathlib but I am unsure how to relate this to <code>fintype</code>s.</p>",
        "id": 212292192,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1601901081
    },
    {
        "content": "<p>It doesn't need to have a fix point, right?</p>",
        "id": 212292430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601901207
    },
    {
        "content": "<p>Do you mean that you want the <em>set</em> of all fixpoints? Or do you want to construct one?</p>",
        "id": 212292453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601901227
    },
    {
        "content": "<p>I also can show <code>t ⊂ f t</code> for all <code>t</code></p>",
        "id": 212292457,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1601901231
    },
    {
        "content": "<p>Do you care about decidability? (As in, is this maths or CS?)</p>",
        "id": 212292528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601901255
    },
    {
        "content": "<p>Given an initial <code>s</code> I want to itterate <code>f</code> until I get a fixed point</p>",
        "id": 212292567,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1601901282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267202\">Fox Thomson</span> <a href=\"#narrow/stream/113489-new-members/topic/Closure.20on.20sets/near/212292457\">said</a>:</p>\n<blockquote>\n<p>I also can show <code>t ⊂ f t</code> for all <code>t</code></p>\n</blockquote>\n<p>for all <code>t</code>?? So also for <code>{x}</code>?</p>",
        "id": 212292579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601901294
    },
    {
        "content": "<p>And decidability would be ideal, it's for NFA's</p>",
        "id": 212292611,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1601901317
    },
    {
        "content": "<p>I don't know what NFA is</p>",
        "id": 212292625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601901327
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Nondeterministic_finite_automaton\">https://en.wikipedia.org/wiki/Nondeterministic_finite_automaton</a></p>",
        "id": 212292660,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1601901352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Closure.20on.20sets/near/212292579\">said</a>:<br>\nfor all <code>t</code>?? So also for <code>{x}</code>?</p>\n<p>For instance <code>f(∅) = ∅</code>, <code>f({a}) = {a}</code>, <code>f({b}) = {a, b}</code>, <code>f({a, b}) = {a, b}</code>.</p>",
        "id": 212292955,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1601901523
    },
    {
        "content": "<p>Aha, thx</p>",
        "id": 212293009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601901559
    },
    {
        "content": "<p>But there can be multiple fix points, so this sounds like you'll be doing maths instead of algorithms</p>",
        "id": 212293241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601901693
    },
    {
        "content": "<p>There isn't an algorithmic way to choose one</p>",
        "id": 212293261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601901706
    },
    {
        "content": "<p>Wait, I'm still confused... why is <code>s = finset.univ</code> not what you want?</p>",
        "id": 212293424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601901790
    },
    {
        "content": "<p>The algorithm I had in mind was if <code>S = f(S)</code> then <code>fixpoint S = S</code>, otherwise <code>fixpoint S = fixpoint (f S)</code></p>",
        "id": 212293478,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1601901825
    },
    {
        "content": "<p>There should be a unique least fixpoint. I know because I presented a lecture on how to do this in Lean last year :)</p>",
        "id": 212293480,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601901826
    },
    {
        "content": "<p>Fixpoints given an initial set</p>",
        "id": 212293563,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1601901855
    },
    {
        "content": "<p>I'll shut up... I'm clearly out of my comfort zone.</p>",
        "id": 212293590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601901876
    },
    {
        "content": "<p>Does section 10.3 of <a href=\"https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf\">the Hitchhikers guide</a> help?</p>",
        "id": 212293615,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601901897
    },
    {
        "content": "<p>Ah sorry, you have <code>x ≤ f x</code> instead of monotonicity.</p>",
        "id": 212293682,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601901954
    },
    {
        "content": "<p>Hmm, I think we should be able to do this with inductive types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">nfa</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">least_fixpoint</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">least_fixpoint</span> <span class=\"n\">s</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">least_fixpoint</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">least_fixpoint</span> <span class=\"n\">s</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nfa</span>\n</code></pre></div>",
        "id": 212294069,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601902198
    },
    {
        "content": "<p>I think that will work, thank you!</p>",
        "id": 212294604,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1601902510
    }
]