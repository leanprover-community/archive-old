[
    {
        "content": "<p>I need a proof that a <code>list</code> can't get longer by applying <code>filter_map</code> to it.</p>\n<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">list.filter_map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289651700,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657833877
    },
    {
        "content": "<p>My guess would be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.length_filter_map\">docs#list.length_filter_map</a></p>",
        "id": 289655375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657836027
    },
    {
        "content": "<p>But that doesn't exist!</p>",
        "id": 289655409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657836042
    },
    {
        "content": "<p>I think this is the way to show it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">map_filter_map_some_eq_filter_map_is_some</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l.filter_map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">some</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b.is_some</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">list.filter_map_eq_filter</span><span class=\"o\">,</span> <span class=\"n\">list.filter_map_map</span><span class=\"o\">,</span> <span class=\"n\">list.map_filter_map</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">option.mem_def</span><span class=\"o\">,</span> <span class=\"n\">option.guard_eq_some</span><span class=\"o\">,</span> <span class=\"n\">option.map_eq_some'</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">option.is_some_iff_exists</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.symm</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">length_filter_map_le</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list.filter_map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">list.length_map</span> <span class=\"n\">some</span><span class=\"o\">,</span> <span class=\"n\">map_filter_map_some_eq_filter_map_is_some</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">list.length_le_of_sublist</span> <span class=\"o\">(</span><span class=\"n\">list.filter_sublist</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.length_map</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The first theorem could probably be golfed (it's possible that induction is faster).</p>",
        "id": 289663203,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657840839
    },
    {
        "content": "<p>Refactored and golfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list.map_filter_map_some_eq_filter_map_is_some</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l.filter_map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">some</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b.is_some</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.filter_map_cons</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list.length_filter_le</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.length_le_of_sublist</span> <span class=\"o\">(</span><span class=\"n\">list.filter_sublist</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list.length_filter_map_le</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list.filter_map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">list.length_map</span> <span class=\"n\">some</span><span class=\"o\">,</span> <span class=\"n\">list.map_filter_map_some_eq_filter_map_is_some</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">list.length_map</span> <span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list.length_filter_le</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">list.filter_map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.length_filter_map_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 289666170,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657843264
    },
    {
        "content": "<p>In the meanwhile, I wrote a simple proof by induction. Do you want me to commit my proof, or will you create a PR with your proof?</p>",
        "id": 289666375,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657843463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as unresolved.</p>",
        "id": 289666379,
        "sender_full_name": "Notification Bot",
        "timestamp": 1657843467
    },
    {
        "content": "<p>I like <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> 's refactor and proofs!</p>",
        "id": 289666488,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657843565
    },
    {
        "content": "<p>Do we not have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.length_filter_le\">docs#list.length_filter_le</a>?</p>",
        "id": 289666491,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657843566
    },
    {
        "content": "<p>I would expect it to appear next to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.length_filter_lt_length_iff_exists\">docs#list.length_filter_lt_length_iff_exists</a></p>",
        "id": 289666500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657843580
    },
    {
        "content": "<p>Oh, it follows from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.countp_eq_length_filter\">docs#list.countp_eq_length_filter</a></p>",
        "id": 289666525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657843608
    },
    {
        "content": "<p>It also has the very direct proof <code>list.length_le_of_sublist (list.filter_sublist _)</code> that uses sublists rather than going through arithmetic and <code>countp</code>.</p>",
        "id": 289666686,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657843757
    },
    {
        "content": "<p>(I just fixed the naming in my code snippet.)</p>",
        "id": 289666691,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657843765
    },
    {
        "content": "<p>OK, will you <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> create the PR with your code please?</p>",
        "id": 289666711,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657843794
    },
    {
        "content": "<p>Would <span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> or <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> please do it? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Feel free to add me as a reviewer.</p>",
        "id": 289666809,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657843862
    },
    {
        "content": "<p>I can do it, but I don't know whether it is ethical to commit someone else's code under my name.</p>",
        "id": 289667017,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657844053
    },
    {
        "content": "<p>Free free to open a PR! You may add co-authored-by lines as appropriate.</p>",
        "id": 289667555,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657844585
    },
    {
        "content": "<p>OK.</p>",
        "id": 289667907,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657844885
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15369\">https://github.com/leanprover-community/mathlib/pull/15369</a></p>",
        "id": 289669882,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657846584
    },
    {
        "content": "<p>Is anybody interested in having the lemma in mathlib? Or should I close the PR?</p>",
        "id": 291341378,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1659108706
    },
    {
        "content": "<p>Seems like a useful enough lemma to me, not that I have a use for it in mind.</p>",
        "id": 291342381,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659109182
    },
    {
        "content": "<p>I just re-started the CI as it seems to have not completed for some reason</p>",
        "id": 291342522,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659109249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/list.20can't.20get.20longer.20by.20filter_map/near/291342522\">said</a>:</p>\n<blockquote>\n<p>I just re-started the CI as it seems to have not completed for some reason</p>\n</blockquote>\n<p>Should I rebase the branch (currently more than 2 weeks behind) and try again?</p>",
        "id": 291342975,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1659109461
    },
    {
        "content": "<p>When your PR is ready for review, you can mark the PR using the tag \"awaiting-review\". If not, the PR will not show up on the <a href=\"https://bit.ly/3AZk1Qk\">#queue</a> and decrease the chance of your PR getting reviewed. For more such tips before PRing, checkout the page <a href=\"https://leanprover-community.github.io/contribute/index.html\">How to contribute to mathlib</a>.</p>",
        "id": 291344392,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1659110146
    },
    {
        "content": "<p>Should I use \"awaiting-review\" even if my PR was already reviewed and I need a reply rather than another review?</p>",
        "id": 291346201,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1659110893
    },
    {
        "content": "<p>Yes. See the <a href=\"https://leanprover-community.github.io/contribute/index.html#lifecycle-of-a-pr\">Lifecycle of a PR</a> section of that page. A typical PR will jump between the \"awaiting-review\" tag and the \"awaiting-author\" tag several times before it is merged.</p>",
        "id": 291346933,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1659111281
    },
    {
        "content": "<p>Is anybody interested in a finishing the PR? Or do you want me to close it?</p>",
        "id": 293605323,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660590928
    }
]