[
    {
        "content": "<p>I'm trying to create AVL trees in lean and can't find code to force types to have a total order - this is necessary in order to create a well formed tree. Currently working on this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">avlnode</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ins_val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">avlnode</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>but I need α to have a defined total order for this code to work.<br>\nIf anyone knows how to do this would be very helpful!</p>",
        "id": 268258737,
        "sender_full_name": "Henry Pearson",
        "timestamp": 1642419293
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_ordering_rel\">docs#well_ordering_rel</a> should be what you want</p>",
        "id": 268260489,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642420421
    },
    {
        "content": "<p>Alternatively, if the order is uniquely determined by <code>α</code>, you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">avlnode</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ins_val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">avlnode</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and the <code>&lt;</code> and <code>≤</code> operators will become available on <code>α</code></p>",
        "id": 268260632,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642420511
    },
    {
        "content": "<p>Ah yeah that works - thanks a lot!</p>",
        "id": 268261277,
        "sender_full_name": "Henry Pearson",
        "timestamp": 1642420853
    }
]