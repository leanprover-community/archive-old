[
    {
        "content": "<p>I had</p>\n<p><code>def env : Type := list formula</code></p>\n<p>but I had trouble later using an <code>env</code> as a <code>list</code>; I would get, for example, \"failed to synthesize type class instance for <code>has_mem formula env</code>\".  Switching to this made some things work:</p>\n<p><code>notation `env` := list formula</code></p>\n<p>I also found that I could <code>def as_list (e : env) : list formula := e</code> in namespace <code>env</code> and use that as a hint to Lean whenever it fails to \"see through\" the definition of env.</p>\n<p>Is there a better way to do this?</p>",
        "id": 201027992,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592319639
    },
    {
        "content": "<p>Yes, type class resolution won't see through such aliases (that's a feature, not a bug).</p>",
        "id": 201028149,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592319707
    },
    {
        "content": "<p>You could make the def <code>@[reducible]</code></p>",
        "id": 201028160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592319710
    },
    {
        "content": "<p>but that might not fix the type class problem</p>",
        "id": 201028225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592319728
    },
    {
        "content": "<p>We can teach you how to still get your instances, but that's probably a <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> issue.</p>",
        "id": 201028270,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592319749
    },
    {
        "content": "<p>Could you tell us about your end goal here?</p>",
        "id": 201028300,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592319766
    },
    {
        "content": "<p>Most likely you should just copy the specific instances you're interested in (<code>has_mem</code> I guess).</p>",
        "id": 201034547,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592322293
    },
    {
        "content": "<p>Thanks. My end goal is super dumb, I was just trying stuff</p>",
        "id": 201049101,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592328879
    },
    {
        "content": "<p>You can also copy the instances you care about using <code>derive</code>.</p>",
        "id": 201090470,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592354053
    },
    {
        "content": "<p>e.g. <code>@[derive has_mem]</code> before the <code>def</code>.</p>",
        "id": 201090513,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592354130
    },
    {
        "content": "<p>Given a type such as <code>finmap (λ x:string, string)</code> how can I create a type alias, so I can refer to the type without writing it out every time.</p>\n<p>I tried simply def'ing it <code>def ctxtype := finmap (λ x:string, ttype)</code>, however this then prevents me from using the \\in operator. Ideally I'd like to be able to use this operator with the type alias.</p>",
        "id": 229683221,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615390711
    },
    {
        "content": "<p>What does <code>#check finmap</code> say?</p>",
        "id": 229683431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615390777
    },
    {
        "content": "<p>Aah, I guess you would have to define an instance to re-enable the notation again.</p>",
        "id": 229683657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615390834
    },
    {
        "content": "<p>Does <code>abbreviation ctxtype := ....</code> help here?</p>",
        "id": 229683697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615390849
    },
    {
        "content": "<p>Abbreviation works! Thank you</p>",
        "id": 229684995,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615391194
    }
]