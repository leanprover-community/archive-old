[
    {
        "content": "<p>Is there a way to get <code>linarith</code> to simplify this proof at all? It is just dealing with a lot of inequalities.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">wlog</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_one</span> <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hpos</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_sub_succ_eq_sub</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_zero</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_pred_ge</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">H</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">nat_zero_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_sub</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_sub_succ_eq_sub</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_succ_lt_self</span> <span class=\"n\">hn</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">H</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">H</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_lt</span> <span class=\"n\">H</span><span class=\"o\">)],</span>\n  <span class=\"k\">have</span> <span class=\"n\">H&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_coe_lt_coe</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">posx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">‹</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">›</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_coe_lt_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">},</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"n\">any_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ_fin_succ</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_cast_lt</span><span class=\"o\">,</span>\n               <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_succ</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_cast_succ</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_pred</span><span class=\"o\">,</span>\n               <span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n      <span class=\"n\">le_antisymm</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_pred_of_lt</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">›</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hj</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_one</span> <span class=\"n\">posx</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_lt</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"err\">›</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n      <span class=\"n\">le_antisymm</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_pred_of_lt</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">›</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hj</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_one</span> <span class=\"n\">posx</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n      <span class=\"n\">le_antisymm</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_pred_lt</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"err\">›</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hy</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_pred_ge</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"err\">›</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n      <span class=\"n\">le_antisymm</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"err\">›</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"err\">›</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">convert</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_coe_lt_coe</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hy</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_ge</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"err\">›</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n      <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_of_sub_le_right</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"err\">›</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_ge</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"err\">›</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n      <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_lt_of_lt_sub_right</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"err\">›</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_ge</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"err\">›</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n      <span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"err\">›</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_ge</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"err\">›</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210314848,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600287433
    },
    {
        "content": "<p>For reference, here is a (not fully-golfed) proof that does not use <code>split_ifs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">wlog</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_one</span> <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hpos</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_sub_succ_eq_sub</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_zero</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_pred_ge</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">H</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">nat_zero_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_sub</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_sub_succ_eq_sub</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_succ_lt_self</span> <span class=\"n\">hn</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">H</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">H</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">pred_above</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_lt</span> <span class=\"n\">H</span><span class=\"o\">)],</span>\n  <span class=\"k\">have</span> <span class=\"n\">lessy</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"err\">‹</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">le_last</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">posx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">‹</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">›</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">posx</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_lt_ge</span> <span class=\"n\">y</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"k\">with</span> <span class=\"n\">Hyj</span> <span class=\"n\">Hyj</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hyj</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">cast_lt</span> <span class=\"n\">lessy</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_coe_lt_coe</span> <span class=\"n\">at</span> <span class=\"n\">Hyj</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">lt_trans</span> <span class=\"bp\">_</span> <span class=\"n\">Hyj</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pos&#39;</span><span class=\"o\">,</span> <span class=\"n\">lt_add_iff_pos_right</span><span class=\"o\">,</span>\n                    <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_succ</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_cast_succ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_below</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hyj</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_lt_ge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"n\">hxj</span> <span class=\"n\">hxj</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_below</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hxj</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_below</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_below</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hyj</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_coe_lt_coe</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">lt_trans</span> <span class=\"n\">hxj</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_pred</span><span class=\"o\">],</span>\n        <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred_lt</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">posx</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"n\">hxj</span> <span class=\"k\">with</span> <span class=\"n\">Hxj</span> <span class=\"n\">Hxj</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ_fin_succ</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">Hxj</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_pred</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Hyj</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_lt</span> <span class=\"n\">Hyj</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_above</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hxj</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_above</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_below</span> <span class=\"n\">y</span> <span class=\"bp\">_</span> <span class=\"n\">Hyj</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ_fin_succ</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">le_iff_coe_le_coe</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_cast_succ</span><span class=\"o\">],</span>\n          <span class=\"n\">refine</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_pred_lt</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n          <span class=\"n\">convert</span> <span class=\"n\">Hxj</span><span class=\"o\">,</span>\n          <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_pred</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"n\">Hyj</span> <span class=\"k\">with</span> <span class=\"n\">hyj</span><span class=\"bp\">|</span><span class=\"n\">hyj</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hyj</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_lt_cast_succ</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_below</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ_lt_succ</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_below</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_below</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ_fin_succ</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_below</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ_lt_succ</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_coe_lt_coe</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_cast_succ</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_pred</span><span class=\"o\">],</span>\n        <span class=\"n\">refine</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_pred_of_lt</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">convert</span> <span class=\"err\">‹</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">›</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hyj</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_succ</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_cast_succ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">lt_trans</span> <span class=\"bp\">_</span> <span class=\"err\">‹</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">›</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hyj</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ_fin_succ</span><span class=\"o\">],</span>\n        <span class=\"n\">exact</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ_lt_succ</span> <span class=\"bp\">_</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">replace</span> <span class=\"n\">Hyj</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_coe_lt_coe</span> <span class=\"n\">at</span> <span class=\"n\">hyj</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_cast_succ</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hyj</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hyj</span> <span class=\"o\">},</span>\n      <span class=\"k\">have</span> <span class=\"n\">hyj&#39;</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">cast_lt</span> <span class=\"n\">lessy</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">le_iff_coe_le_coe</span> <span class=\"n\">at</span> <span class=\"n\">Hyj</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n          <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">Hyj</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_cast_succ</span> <span class=\"o\">},</span>\n        <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_above</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hyj&#39;</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_lt_ge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"n\">hxj</span> <span class=\"n\">hxj</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_below</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hxj</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_above</span> <span class=\"n\">y</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_below</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ_fin_succ</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_coe_lt_coe</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_cast_succ</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_succ</span><span class=\"o\">],</span>\n          <span class=\"n\">refine</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_lt_of_lt_sub_right</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n          <span class=\"n\">convert</span> <span class=\"n\">hxj</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_pred</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">le_iff_coe_le_coe</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">hyj&#39;</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_above</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hxj</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_above</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above_above</span> <span class=\"n\">y</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hyj</span><span class=\"o\">),</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">le_iff_coe_le_coe</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_cast_succ</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_succ</span><span class=\"o\">],</span>\n        <span class=\"n\">refine</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_of_sub_le_right</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">convert</span> <span class=\"n\">hxj</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_pred</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210314912,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600287473
    },
    {
        "content": "<p>I guess this is what <code>omega</code> is supposed to be for</p>",
        "id": 210315650,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600287831
    },
    {
        "content": "<p><code>omega</code> didn't work, even for the seemingly simple</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n      <span class=\"n\">le_antisymm</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_pred_of_lt</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"err\">›</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hj</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_one</span> <span class=\"n\">posx</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n      <span class=\"n\">le_antisymm</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_pred_lt</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"err\">›</span><span class=\"o\">),</span>\n    <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"c1\">-- fails here</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hy</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 210316277,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600288132
    }
]