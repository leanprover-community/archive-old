[
    {
        "content": "<p>So for example, I <code>apply mul_lt_mul</code> and I get four goals; 3 of them are easily provable by <code>assumption;</code>, but one isn't. What I want to do is something like <code>apply mul_lt_mul; assumption,</code> and then deal with the last case. However, <code>assumption</code> errors here; is there a way to just ignore that?</p>",
        "id": 227816146,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1614278737
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#try\">tactic#try</a></p>",
        "id": 227816273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614278789
    },
    {
        "content": "<p>thanks!</p>",
        "id": 227816433,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1614278870
    },
    {
        "content": "<p>wait, no, that doesn't work; it solves the first goal and then gives up after the goal that errors</p>",
        "id": 227816595,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1614278931
    },
    {
        "content": "<p>wait no I'm being silly sorry!</p>",
        "id": 227816915,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1614279043
    },
    {
        "content": "<p>Of course, another approach would just be to add <code>have : last_goal, {...}</code> before you <code>apply</code>, and then <code>assumption</code> will succeed :)</p>",
        "id": 227818268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614279548
    },
    {
        "content": "<p>Also, <code>any_goals { [...] },</code> applies <code>[...]</code> to any unsolved goal, failing only if what you feed it makes progress nowhere.</p>",
        "id": 227829010,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614283237
    },
    {
        "content": "<p>For others, an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_lt_mul</span><span class=\"bp\">;</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 227829879,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614283573
    }
]