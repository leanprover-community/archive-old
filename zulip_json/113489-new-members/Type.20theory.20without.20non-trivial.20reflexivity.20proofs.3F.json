[
    {
        "content": "<p>In the Lean tutorial it says that nontrivial identities can be proved by reflexivity. An example is :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">eq.refl</span> <span class=\"n\">_</span>\n</code></pre></div>\n\n<p>My understanding of how the Lean type checker does this is that it kind of \"computes 2 + 5 at compile time, and if it indeed computes to 5, accepts the proof\". </p>\n<p>So in a sense, we ca  think of an equality proof as a kind of \"compile-time computation\" that gives you a token that allows you to \"skip the computation at runtime\" and just grab the precomputed result.</p>\n<p>Are there type systems (other than Lean's) where this is explicit? I.e. where you have to actually do the \"compile time computation\" yourself, and can only use equational reflexivity for the trivial case?</p>",
        "id": 213556175,
        "sender_full_name": "Chris M",
        "timestamp": 1602853175
    },
    {
        "content": "<p>Yes, metamath computations work like this, HOL too</p>",
        "id": 213577791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602863277
    },
    {
        "content": "<p>In fact I think it is a feature unique to DTT</p>",
        "id": 213577873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602863300
    },
    {
        "content": "<p>See for example <a href=\"http://us.metamath.org/mpeuni/2p2e4.html\">http://us.metamath.org/mpeuni/2p2e4.html</a> and note that the proof is not \"by refl\" but rather by a couple of applications of associativity</p>",
        "id": 213578167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602863453
    }
]