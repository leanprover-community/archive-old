[
    {
        "content": "<p>I've seen there are proofs for accessibility and well-founded for lexical order of product<br>\nAnd I also find out there is a definition for lexical order of list, but I can't find any proofs for it's accessibility and well-founded...<br>\nAre them provided in other names or just not yet proved?</p>\n<p>And if I were going to prove the accessibility of lexical order of list, I'm not quite sure what the type of the lemma should be, and when to use functions like acc.rec_on, acc.intro....<br>\n( Is the type of the lemma like... this ?)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ra</span>  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">list_lex_acc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"n\">ra</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">ra</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 148644364,
        "sender_full_name": "AHan",
        "timestamp": 1543331968
    },
    {
        "content": "<p>Nice question! If you write <code> ```lean </code> when quoting code then you get syntax highlighting as well. Here's a version of your question which typechecks straight out the box:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">list_lex_acc</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"n\">ra</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">ra</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 148646910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543334289
    },
    {
        "content": "<p>Off the top of my head, I guess some useful lemmas would be to prove that there are no solutions to <code>x &lt; []</code>, and then you could start proving that all lists of positive size were accessible by induction on first the length of the list, and secondly using well-founded induction on the first element of the list.</p>",
        "id": 148647290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543334565
    },
    {
        "content": "<p>Thanks for the suggestion!<br>\nAnd are there any differences between using <code>def</code> and  <code>theorem</code> here ?<br>\nBecause in mathlib they used <code>def</code> for well_founded and accessibility of lexical order of product</p>",
        "id": 148647442,
        "sender_full_name": "AHan",
        "timestamp": 1543334686
    },
    {
        "content": "<p>\"well-founded induction\" do you mean something like <code>well_founded.rec_on</code>?</p>",
        "id": 148647627,
        "sender_full_name": "AHan",
        "timestamp": 1543334830
    },
    {
        "content": "<p>I think you mean in the Lean core library (<code>def lex_wf (ha : well_founded ra) (hb : well_founded rb) : well_founded (lex ra rb) := ...</code>)?</p>",
        "id": 148647639,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543334847
    },
    {
        "content": "<p>There is a difference. I don't know why they used <code>def</code>, though</p>",
        "id": 148647724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543334898
    },
    {
        "content": "<p>I just used theorem because the thing you want to prove has type Prop.</p>",
        "id": 148647756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543334922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  Yes!</p>",
        "id": 148647839,
        "sender_full_name": "AHan",
        "timestamp": 1543334981
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">not_lt_empty</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">ra</span> <span class=\"n\">a</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">H</span>\n</pre></div>\n\n\n<p>There will be shorter proofs :-) I'm doing induction on <code>list.lex</code> here.</p>",
        "id": 148648088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543335124
    },
    {
        "content": "<p>got it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">not_lt_empty</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">ra</span> <span class=\"n\">a</span> <span class=\"o\">[])</span> <span class=\"bp\">.</span>\n</pre></div>",
        "id": 148648210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543335222
    },
    {
        "content": "<p>oh no wait, lean segfaulted :D</p>",
        "id": 148648277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543335245
    },
    {
        "content": "<p>I can solve this case by</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">list_lex_acc</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"n\">ra</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">ra</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">acc</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>but I'm stuck at the second part, doing well-founded induction on the first element of the list...</p>",
        "id": 148648310,
        "sender_full_name": "AHan",
        "timestamp": 1543335285
    },
    {
        "content": "<p>Yeah it's messy now. I am at work and need to think about other things :-/</p>\n<p>This <code>.</code> proof works for me.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_lt_empty</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">ra</span> <span class=\"n\">a</span> <span class=\"o\">[])</span> <span class=\"bp\">.</span>\n</pre></div>",
        "id": 148648514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543335431
    },
    {
        "content": "<p>Wow.... what's <code>.</code> proof ...</p>",
        "id": 148648760,
        "sender_full_name": "AHan",
        "timestamp": 1543335649
    },
    {
        "content": "<p>But this exact file gives me a segfault:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">list_lex_acc</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"n\">ra</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">ra</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_lt_empty</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">ra</span> <span class=\"n\">a</span> <span class=\"o\">[])</span> <span class=\"bp\">.</span>\n</pre></div>\n\n\n<p>with <code>Lean (version 3.4.1, commit 17fe3decaf8a, Release)</code>.</p>",
        "id": 148648767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543335658
    },
    {
        "content": "<p>The <code>.</code> proof says \"Check all the cases...actually, can't you see that there are no cases to check?\". The equation compiler looks at all the constructors for <code>list.lex</code> and rules out <code>[]</code> appearing on the right hand side.</p>",
        "id": 148648809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543335699
    },
    {
        "content": "<p>Doesn't segfault for me with the same version of lean</p>",
        "id": 148648818,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543335714
    },
    {
        "content": "<p>I have a blank line 9</p>",
        "id": 148648875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543335737
    },
    {
        "content": "<p>I can restart Lean and consistently get it to segfault. On linux.</p>",
        "id": 148648906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543335774
    },
    {
        "content": "<p>No segfault with the same version of lean either... (on windows</p>",
        "id": 148649005,
        "sender_full_name": "AHan",
        "timestamp": 1543335856
    },
    {
        "content": "<p>I restarted VS Code and the problem has gone away <em>shrug</em></p>",
        "id": 148649143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543335978
    },
    {
        "content": "<p>Oh I crashed on</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ra</span>  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">list_lex_acc</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"n\">ra</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">ra</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_lt_empty</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">ra</span> <span class=\"n\">a</span> <span class=\"o\">[])</span> <span class=\"bp\">.</span>\n</pre></div>\n\n\n<p>but it works fine if I swap the lemma and the theorem...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ra</span>  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_lt_empty</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">ra</span> <span class=\"n\">a</span> <span class=\"o\">[])</span> <span class=\"bp\">.</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">list_lex_acc</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"n\">ra</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">ra</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 148649741,
        "sender_full_name": "AHan",
        "timestamp": 1543336527
    },
    {
        "content": "<p>Hmm. I think I found an infinite decreasing sequence! <code>[1] &gt; [0,1] &gt; [0,0,1] &gt; [0,0,0,1] &gt; ...</code>. So that will be why it's not in the library.</p>",
        "id": 148662338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543347659
    },
    {
        "content": "<p>Interesting. I think it's well founded if you reverse the order: <code>[] &lt; x :: xs</code>, and <code>x :: xs &lt; y :: ys</code> if <code>xs &lt; ys</code> or <code>xs = ys</code> and <code>x &lt; y</code></p>",
        "id": 148664949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543350017
    },
    {
        "content": "<p>I don't recall having a \"list\" operation on ordinals...</p>",
        "id": 148664978,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543350056
    },
    {
        "content": "<p>it would be <code>list(x) = 1 + x + x^2 + x^3 + ...</code></p>",
        "id": 148665001,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543350088
    },
    {
        "content": "<p>I do: <code>CNF</code> (although I don't see the relevance)</p>",
        "id": 148665002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543350091
    },
    {
        "content": "<p>but then it would be <code>list(x) = x^omega</code> but power in ordinal doesn't correspond to power in cardinal</p>",
        "id": 148665062,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543350126
    },
    {
        "content": "<p>right, I think the list ordering I gave has order type <code>(type A)^omega</code></p>",
        "id": 148665114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543350202
    },
    {
        "content": "<p>so it wouldn't be correct</p>",
        "id": 148665175,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543350248
    },
    {
        "content": "<p>because there is no <code>x^cardinal.omega</code> in ordinals</p>",
        "id": 148665189,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543350264
    },
    {
        "content": "<p>what are you talking about?</p>",
        "id": 148665327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543350410
    },
    {
        "content": "<p><code>x^omega</code> is perfectly well defined</p>",
        "id": 148665346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543350427
    },
    {
        "content": "<p>it's an ordinal power</p>",
        "id": 148665354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543350437
    },
    {
        "content": "<p>but is it in bijection with <code>x^cardinal.omega</code>?</p>",
        "id": 148665377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543350453
    },
    {
        "content": "<p>no... it's lists not infinite sequences</p>",
        "id": 148665384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543350463
    },
    {
        "content": "<p>ah</p>",
        "id": 148665391,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543350472
    },
    {
        "content": "<blockquote>\n<p>Interesting. I think it's well founded if you reverse the order: <code>[] &lt; x :: xs</code>, and <code>x :: xs &lt; y :: ys</code> if <code>xs &lt; ys</code> or <code>xs = ys</code> and <code>x &lt; y</code></p>\n</blockquote>\n<p>feels like hilbert basis theorem now</p>",
        "id": 148665447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543350492
    },
    {
        "content": "<p>So maybe we'll need a different definition for the lexical order of list in order to prove it's well-founded?</p>",
        "id": 148693519,
        "sender_full_name": "AHan",
        "timestamp": 1543388053
    },
    {
        "content": "<p>I ‘ve modified the lex of list as below</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ra</span>  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">lex</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"bp\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lex</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lex_acc_of_lex</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">lex</span> <span class=\"n\">ra</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"n\">ra</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">[]</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">list_nil_acc</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>  <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>But I don't know how to tell lean that the recursion application will decrease....</p>",
        "id": 148780207,
        "sender_full_name": "AHan",
        "timestamp": 1543490354
    },
    {
        "content": "<p>prove it? lol</p>",
        "id": 148782527,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543493456
    }
]