[
    {
        "content": "<p>I'm currently working through mathematics in lean and have been stuck on a problem for quite a while. Any help would be greatly appreciated. My current impression is that I should be able to use h monof and h' to show 1\\&lt;= 0, from which the goal would follow.</p>\n<p>example :<br>\n  ¬ ∀ {f : ℝ → ℝ}, monotone f → ∀ {a b}, f a ≤ f b → a ≤ b :=<br>\nbegin<br>\n  intro h,<br>\n  let f := λ x : ℝ, (0 : ℝ),<br>\n  have monof : monotone f,<br>\n  {intros a b alab,<br>\n  apply le_refl (f b),},<br>\n  have h' : f 1 ≤ f 0,<br>\n    from le_refl _,<br>\n  end</p>",
        "id": 265966252,
        "sender_full_name": "Harry Pacitti",
        "timestamp": 1640306228
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> ? You can probably finish with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">monof</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>or some such thing (depending on what you're importing etc -- this is why a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would help)</p>",
        "id": 265967076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640307363
    },
    {
        "content": "<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">monof</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 265967108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640307407
    },
    {
        "content": "<p>You can use <code>specialize</code> to specialize hypotheses with other stuff.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n<span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">monof</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">alab</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">),},</span>\n<span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">f</span> <span class=\"n\">monof</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265967195,
        "sender_full_name": "Chris B",
        "timestamp": 1640307547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/113489-new-members/topic/Question.20on.20monotonicity/near/265967195\">said</a>:</p>\n<blockquote>\n<p>You can use <code>specialize</code> to specialize hypotheses with other stuff.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n<span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">monof</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">alab</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">),},</span>\n<span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">f</span> <span class=\"n\">monof</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks for the help!</p>",
        "id": 265994498,
        "sender_full_name": "Harry Pacitti",
        "timestamp": 1640343652
    }
]