[
    {
        "content": "<p>Hi all,<br>\nJust browsed through this file and bumped into this at line 199:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">st_infinite</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">infinite</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">st</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">st</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">((</span><span class=\"n\">infinite_iff_not_exists_st</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>It looks like this is defining the standard part of an infinite hyperreal to be zero. It also is at odds with the stuff just above, like for example <code>infinite_iff_not_exists_st</code>. To the best of my recollection, the standard part of an infinite hyperreal is not defined; it is the infinitesimals that have standard part zero, as per line 121 in the same file: <code>def infinitesimal (x : ℝ*) := is_st x 0</code>. Since I'm pretty new with Lean, is there anything I'm missing here - is this needed to fix some technical issue? Or is this something else, like a typo?</p>",
        "id": 190019562,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1583685559
    },
    {
        "content": "<p>Did you know that Lean thinks that 1/0=0?</p>",
        "id": 190019613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583685607
    },
    {
        "content": "<p>Whereas mathematicians think it's not defined.</p>",
        "id": 190019618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583685624
    },
    {
        "content": "<p>No.</p>",
        "id": 190019622,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1583685631
    },
    {
        "content": "<p>This is some weird computer science thing -- if something isn't defined, they want to define it to be 0.</p>",
        "id": 190019637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583685647
    },
    {
        "content": "<p>This is all over the library -- the sup of a set of reals which isn't bounded above, or is empty, is zero.</p>",
        "id": 190019648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583685676
    },
    {
        "content": "<p>OK, that's along the lines of  what I expected.</p>",
        "id": 190019652,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1583685691
    },
    {
        "content": "<p>You might think this is insanity (I certainly did at first) -- but what's happening is that the definitions are \"liberal\" and then the hypotheses are in all the theorems, e.g. the theorem that a/b*b=a has the hypothesis that b isn't zero.</p>",
        "id": 190019689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583685723
    },
    {
        "content": "<p>So we just need to be careful with how we use these.</p>",
        "id": 190019704,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1583685745
    },
    {
        "content": "<p>Not really!</p>",
        "id": 190019720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583685814
    },
    {
        "content": "<p>In some sense, this idea is better than the mathematician's idea of \"just go ahead and write stuff and let the reader implicitly do the work in checking that it's well-defined\"</p>",
        "id": 190019770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583685870
    },
    {
        "content": "<p>The point is no theorems apply to a/b if b is actually zero, so if you accidentally divide by zero then you're not going to be able to prove anything about your result anyway. In some sense this stops you having to worry about these issues. But if you want to think about it as being careful -- I contend that you have to be no more careful than if you're doing normal mathematics.</p>",
        "id": 190019787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583685946
    },
    {
        "content": "<p>Another way of thinking about it is that when you see <code>/</code> in Lean it's not \"mathematician's /\", it's something which should be called <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">/</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">/^*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">/</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> or something, which agrees with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">/</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span></span></span></span> whenever <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">/</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span></span></span></span> is defined, and returns goodness knows what when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">/</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span></span></span></span> isn't defined.</p>",
        "id": 190019835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583686017
    },
    {
        "content": "<p>The place you have to be careful is in the <em>statements</em> of your theorems. In your proofs you don't have to be careful at all, because you could imagine that the first line of your proof is \"let's define a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">/</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">/^*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">/</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><msup><mi mathvariant=\"normal\">/</mi><mo>∗</mo></msup><mi>b</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a/^*b=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\"><span class=\"mord\">/</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">b=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><msup><mi mathvariant=\"normal\">/</mi><mo>∗</mo></msup><mi>b</mi><mo>=</mo><mi>a</mi><mi mathvariant=\"normal\">/</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a/^*b=a/b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\"><span class=\"mord\">/</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">b</span></span></span></span> otherwise. Then...\"</p>",
        "id": 190019848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583686063
    },
    {
        "content": "<p>So similarly this function <code>st</code> should be interpreted as \"the function which sends a hyperreal with a standard part to its standard part, and which sends a hyperreal with no standard part to 0\"</p>",
        "id": 190019913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583686141
    },
    {
        "content": "<p>I guess another way one can think about it is that from the CS perspective, <code>0</code> is just <code>false</code>. Or the empty set. So yes, it makes sense but I'm still glad I asked. Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 190019917,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1583686153
    },
    {
        "content": "<p>and because a mathematician would never dream of applying this function to a hyperreal which doesn't have a standard part, we should never notice :-)</p>",
        "id": 190019921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583686176
    },
    {
        "content": "<p>Right, except when you browse through the file.</p>",
        "id": 190019962,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1583686207
    },
    {
        "content": "<p>The computer scientists are particularly proud of lemmas like (a+b)/c=a/c+b/c, which they proudly tell us are also true when c=0 (although they wouldn't be true if we defined a/0 to be 37, which was something I pushed for for a while, to no avail)</p>",
        "id": 190019965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583686226
    },
    {
        "content": "<p>There has been some talk recently of adding a/0=0 as an <em>axiom</em> to the definition of a field!!</p>",
        "id": 190019970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583686255
    },
    {
        "content": "<p>The advantage of this is that the corresponding structures would then biject with what mathematicians regard as fields.</p>",
        "id": 190019981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583686299
    },
    {
        "content": "<p>I guess this must have been contemplated: couldn't <code>hyperreal.lean</code> be used to deal more easily with function continuity?</p>",
        "id": 190020145,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1583686611
    },
    {
        "content": "<p>I think this was part of <span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span> 's original plan -- in fact I think he wanted to do differentiability using them -- but I think there are some technical issues involving meta-level reasoning somehow? I've forgotten the details.</p>",
        "id": 190020196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583686687
    },
    {
        "content": "<p>You need the transfer theorem. Although it can probably be accomplished using tactics.</p>",
        "id": 190022590,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1583691203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/hyperreal.2Elean.20in.20math.20lib/near/190019970\" title=\"#narrow/stream/113489-new-members/topic/hyperreal.2Elean.20in.20math.20lib/near/190019970\">said</a>:</p>\n<blockquote>\n<p>There has been some talk recently of adding a/0=0 as an <em>axiom</em> to the definition of a field!!</p>\n</blockquote>\n<p>This has happened</p>",
        "id": 190023744,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1583693472
    },
    {
        "content": "<p>My personal opinion is that this extension by zero stuff is indeed more convenient in a formal theorem prover but mainly because of a lack of automation</p>",
        "id": 190025676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583697116
    }
]