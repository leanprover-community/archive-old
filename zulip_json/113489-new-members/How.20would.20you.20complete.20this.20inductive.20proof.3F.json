[
    {
        "content": "<p>I am trying to do some very simple constructions and proofs using the computability libraries.</p>\n<p>How would you complete this proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">computability.regular_expressions</span>\n<span class=\"kn\">import</span> <span class=\"n\">computability.NFA</span>\n<span class=\"kn\">import</span> <span class=\"n\">computability.epsilon_NFA</span>\n<span class=\"kn\">import</span> <span class=\"n\">computability.language</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">σ'</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">start</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">M.start</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">N.start</span><span class=\"o\">),</span>\n    <span class=\"n\">accept</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">M.accept</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">N.accept</span><span class=\"o\">),</span>\n    <span class=\"n\">step</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n        <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">sum.inl</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">sum.inl</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">M.step</span> <span class=\"n\">s</span> <span class=\"n\">a</span>\n        <span class=\"bp\">|</span> <span class=\"n\">sum.inr</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">sum.inr</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">N.step</span> <span class=\"n\">s</span> <span class=\"n\">a</span>\n        <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">choice_eval</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">M.eval</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">sum.inl</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">choice</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">w</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ε_NFA.subset_ε_closure</span><span class=\"o\">,</span>\n      <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n      <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ε_NFA.ε_closure.step</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"c1\">-- ?? refine (sum.inl h_s),</span>\n\n      <span class=\"o\">}</span>\n\n\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Any hints would be helpful. I am not sure I understand how the ε_NFA.ε_closure inductive proposition can be used.</p>",
        "id": 301318711,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1664396159
    },
    {
        "content": "<p>it'll probably make it easier if you make some API for your definition, such as what the <code>eps_closure</code> of <code>choice</code> is (for specific inl/inr)</p>",
        "id": 301334031,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664401765
    },
    {
        "content": "<p>also, I think people are generally more likely to help if there's no autogenerated names in your code; it makes it hard to read and use</p>",
        "id": 301334076,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664401789
    },
    {
        "content": "<p>thanks, that is probably a good idea.</p>",
        "id": 301347465,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1664409061
    },
    {
        "content": "<p>You can avoid having to supply <code>sum.inl h_s</code> in a separate step by currying it into <code>ε_NFA.ε_closure.step</code> and <code>apply</code>ing that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">ε_NFA.ε_closure.step</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">h_s</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>That way you're just left with two metavariable-free subgoals.</p>\n<p>The <code>constructor</code> family of tactics all seem to do broadly the same thing, which is to try and <code>apply</code> each constructor of the goal type in turn until they find one that works. In this case <code>fconstructor</code> applies <code>or.inl</code>, which happens to be the correct constructor to let you complete the proof – <code>or.inr</code> is also applicable here, though, and if <code>fconstructor</code> had applied that instead then you'd be stuck with an unprovable goal.</p>",
        "id": 301403016,
        "sender_full_name": "Joanna Choules",
        "timestamp": 1664444444
    },
    {
        "content": "<p>So I had a go at finishing this proof myself (very happy to share the code if you'd like) and one of the tricky parts is that the default induction principle for <code>list</code> sends you down the wrong path. <code>ε_NFA.eval</code> works with input strings that accumulate new elements at the end, whereas lists, definitionally speaking, accumulate from the front. The solution is to tell the <code>induction</code> tactic to use a different principle:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">w</span> <span class=\"n\">using</span> <span class=\"n\">list.reverse_rec_on</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n</code></pre></div>\n</div></div>",
        "id": 301542270,
        "sender_full_name": "Joanna Choules",
        "timestamp": 1664490464
    },
    {
        "content": "<p>Thanks, that is interesting to note. I have not looked back at this in a while, but I will try to give it another try soon.</p>\n<p>By the way, how does Lean know that the lemma <code>list.reverse_rec_on</code> can be used as an induction principle?</p>",
        "id": 302138426,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1664827247
    },
    {
        "content": "<p>It does it by inspecting the result type. From <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic_doc.tactic.induction\">docs#tactic_doc.tactic.induction</a>:</p>\n<blockquote>\n<p><code>induction e using r</code> allows the user to specify the principle of induction that should be used. Here <code>r</code> should be a theorem whose result type must be of the form <code>C t</code>, where <code>C</code> is a bound variable and <code>t</code> is a (possibly empty) sequence of bound variables</p>\n</blockquote>",
        "id": 302154854,
        "sender_full_name": "Joanna Choules",
        "timestamp": 1664834014
    }
]