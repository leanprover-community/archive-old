[
    {
        "content": "<p>I found this notation in mathlib just now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_semiring_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_one</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I think I've also seen <code>{}</code> used in inductive types, and am now extrapolating that <code>()</code> is also legal. What does the <code>[]</code> mean?</p>",
        "id": 216748749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605386327
    },
    {
        "content": "<p>This is a deprecated class, right? But I don't know the answer. You can find out yourself with <code>#check @is_semiring_hom.map_zero</code> right?</p>",
        "id": 216748840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605386418
    },
    {
        "content": "<p>it means the opposite of <code>{}</code> more or less: parameters get the same implicitness as the way they are declared in the class</p>",
        "id": 216748853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605386442
    },
    {
        "content": "<p><code>{}</code> means all parameters are implicit</p>",
        "id": 216748896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605386486
    },
    {
        "content": "<p>As in, the projections have that implitness?</p>",
        "id": 216748920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605386523
    },
    {
        "content": "<p>yes</p>",
        "id": 216748963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605386528
    },
    {
        "content": "<p>the stated implicitness is usually only for the class itself, so this notation lets you change the implicitness of the arguments that lean supplies to the fields</p>",
        "id": 216748991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605386574
    },
    {
        "content": "<p>can you use it to change the explicitness of just some arguments?</p>",
        "id": 216749001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605386594
    },
    {
        "content": "<p>it's not that expressive</p>",
        "id": 216749014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605386606
    },
    {
        "content": "<p>(or alternatively - is there any documentation / reference on the extent of this syntax?)</p>",
        "id": 216749015,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605386619
    },
    {
        "content": "<p>you just get the three mentioned settings (and none)</p>",
        "id": 216749019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605386626
    },
    {
        "content": "<p>So <code>()</code> is legal too?</p>",
        "id": 216749026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605386639
    },
    {
        "content": "<p>yes, it means everything is explicit - I've never seen that being useful</p>",
        "id": 216749079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605386656
    },
    {
        "content": "<p>actually it is <code>( )</code> because of parser issues</p>",
        "id": 216749088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605386668
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.implicit_infer_kind\">docs#environment.implicit_infer_kind</a></p>",
        "id": 216749215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605386803
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">unusual</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">square</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">round</span> <span class=\"o\">(</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">curly</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">unusual.square</span>\n<span class=\"c1\">-- unusual.square : Π {A : Type u_1} {B : Type u_2} [C : Type u_3], unusual A → unit</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">unusual.round</span>\n<span class=\"c1\">-- unusual.round : Π (A : Type u_1) (B : Type u_2) [C : Type u_3], unusual A → unit</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">unusual.curly</span>\n<span class=\"c1\">-- unusual.curly : Π {A : Type u_1} {B : Type u_2} [C : Type u_3], unusual A → unit</span>\n</code></pre></div>",
        "id": 216749222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605386813
    },
    {
        "content": "<p>I don't see the difference between<code>{}</code> and <code>[]</code></p>",
        "id": 216749268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605386854
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">unusual</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">square</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">unusual</span>\n<span class=\"bp\">|</span> <span class=\"n\">round</span> <span class=\"o\">(</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unusual</span>\n<span class=\"bp\">|</span> <span class=\"n\">curly</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">unusual</span>\n<span class=\"k\">#print</span> <span class=\"n\">unusual</span>\n\n<span class=\"c1\">-- inductive unusual : Type → Π {B : Type} [C : Type], Type</span>\n<span class=\"c1\">-- constructors:</span>\n<span class=\"c1\">-- unusual.square : Π (A : Type) {B : Type} [C : Type], unusual A</span>\n<span class=\"c1\">-- unusual.round : Π (A : Type) {B : Type} [C : Type], unusual A</span>\n<span class=\"c1\">-- unusual.curly : Π {A B : Type} [C : Type], unusual A</span>\n</code></pre></div>",
        "id": 216749493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605387057
    },
    {
        "content": "<p>With <code>[]</code>, a parameter is only made implicit if there is a later dependent hypothesis (i.e. our usual conventions)</p>",
        "id": 216749575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605387130
    },
    {
        "content": "<p>You can't see the difference with a <code>structure</code> because the <code>unusual A</code> argument is always going to depend on all the parameters</p>",
        "id": 216749611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605387175
    }
]