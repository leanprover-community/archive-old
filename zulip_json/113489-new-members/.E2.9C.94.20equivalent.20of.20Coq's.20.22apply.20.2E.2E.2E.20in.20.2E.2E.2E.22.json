[
    {
        "content": "<p>Hi, I'm wondering if there is an equivalent of Coq's <code>apply ... in ...</code> (applying a theorem in the context instead of the result) in lean? I tried <code>apply ... at ...</code>, but it doesn't seem to work.</p>",
        "id": 265962819,
        "sender_full_name": "Liang Zhang",
        "timestamp": 1640302325
    },
    {
        "content": "<p>What does it mean to apply a theorem? Can you give an example of a before/after tactic state?</p>",
        "id": 265962884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640302428
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for the proof you're trying to accomplish? Maybe <code>rw [...] at ...</code> or <code>simp [...] at ...</code></p>",
        "id": 265962934,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640302462
    },
    {
        "content": "<p>Another guess until more details emerge: <code>replace h with thm h</code> if thm is P-&gt;Q and <code>h : P</code></p>",
        "id": 265962965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640302511
    },
    {
        "content": "<p><a href=\"https://github.com/jldodds/coq-lean-cheatsheet\">https://github.com/jldodds/coq-lean-cheatsheet</a></p>",
        "id": 265963478,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640303064
    },
    {
        "content": "<p>for example, in Coq, if I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">S</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>in the context, and have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Theorem</span> <span class=\"n\">le_S_n</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">S</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">m.</span>\n</code></pre></div>\n<p>previously proved. I can use <code>apply le_S_n in H</code> to turn H into <code>H: S n &lt;= m</code>.</p>",
        "id": 265963721,
        "sender_full_name": "Liang Zhang",
        "timestamp": 1640303372
    },
    {
        "content": "<p>I am trying to see if Lean can be used for software contracts: at a minimum, preconditions, postconditions, and invariants.</p>",
        "id": 265963903,
        "sender_full_name": "Anton Hristozov",
        "timestamp": 1640303540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426285\">Liang Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/equivalent.20of.20Coq's.20.22apply.20.2E.2E.2E.20in.20.2E.2E.2E.22/near/265963721\">said</a>:</p>\n<blockquote>\n<p>for example, in Coq, if I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">S</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>in the context, and have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Theorem</span> <span class=\"n\">le_S_n</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">S</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">m.</span>\n</code></pre></div>\n<p>previously proved. I can use <code>apply le_S_n in H</code> to turn H into <code>H: S n &lt;= m</code>.</p>\n</blockquote>\n<p>Yeah in Lean you can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">le_S_n</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:=</span> <span class=\"n\">le_S_n</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 265963946,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640303640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466140\">Anton Hristozov</span> <a href=\"#narrow/stream/113489-new-members/topic/equivalent.20of.20Coq's.20.22apply.20.2E.2E.2E.20in.20.2E.2E.2E.22/near/265963903\">said</a>:</p>\n<blockquote>\n<p>I am trying to see if Lean can be used for software contracts: at a minimum, preconditions, postconditions, and invariants.</p>\n</blockquote>\n<p>Hi! You probably want to make a new thread to introduce yourself/ ask about what you are working on</p>",
        "id": 265964006,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640303707
    },
    {
        "content": "<p><code>replace</code> works. Thanks for the help!</p>",
        "id": 265964077,
        "sender_full_name": "Liang Zhang",
        "timestamp": 1640303776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426285\">Liang Zhang</span> has marked this topic as resolved.</p>",
        "id": 265964167,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640303884
    }
]