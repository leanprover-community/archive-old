[
    {
        "content": "<p>Is it possible to use an inductive type constructor as prefix in some places and infix in others, using something like backticks to make it infix, as in Haskell?</p>",
        "id": 272732269,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645475363
    },
    {
        "content": "<p>It's notation which is infix, not the constructor itself. With notation you can put it in brackets, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">4</span> <span class=\"c1\">-- 12</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"c1\">-- 12</span>\n</code></pre></div>",
        "id": 272732708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645475690
    },
    {
        "content": "<p>I'm sorry, I'm not sure if I completely follow. For example, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span> <span class=\"kd\">inductive</span> <span class=\"n\">formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">bottom</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">iff</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n</code></pre></div>\n<p>Then in some places I would like to use <code>and</code>, <code>or</code>, <code>imp</code> and <code>iff</code> as infix, but not everywhere.</p>",
        "id": 272732889,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645475848
    },
    {
        "content": "<p>The default being prefix.</p>",
        "id": 272732960,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645475891
    },
    {
        "content": "<p>You could define some notation like <code>notation x ` AND ` y := formula.and x y</code> (add precedence to taste) and so on</p>",
        "id": 272732993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645475930
    },
    {
        "content": "<p>Then I would need to use <code>AND</code> for infix and <code>formula.and</code> for prefix?</p>",
        "id": 272733097,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645476009
    },
    {
        "content": "<p>There have been some experiments in having pseudo-Haskell infix notation here, but the closest Lean has to an infix form of an application is dot notation, like <code>x.and y</code>.</p>\n<p>Here's an example of a Haskell-like notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1023</span> <span class=\"n\">f</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">foo.baz</span><span class=\"o\">]</span> <span class=\"mi\">3</span>\n<span class=\"c1\">-- parses as `foo.baz 2 3`</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- parses as `f 2 3 + 1`</span>\n</code></pre></div>\n<p>(I'm not recommending this, but it's interesting it sort of can be done in a general way. It doesn't pretty print, which is a downside.)</p>",
        "id": 272733329,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645476204
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 272733596,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645476406
    },
    {
        "content": "<p>Example of dot notation: <code>formula.bottom.and (formula.top.imp formula.bottom)</code></p>\n<p>It even pretty prints that way by default. You can turn this off with the <code>pp_nodot</code> attribute on individual constructors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">formula.and</span>\n</code></pre></div>",
        "id": 272733705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645476509
    },
    {
        "content": "<p>Cool. Thank you.</p>",
        "id": 272734698,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645477293
    }
]