[
    {
        "content": "<p>Dear All,</p>\n<p>I am trying to use the command adjoin_root.  Given a polynomial f in one variable over the commutative ring R with 1, I see from the documentation that it is possible to extract lots of data from adjoin_root (f).  For instance, I would like to retrieve</p>\n<ol>\n<li>the hypothesis that R[x]/(f) is a commutative ring with 1,</li>\n<li>the canonical map lf : R --&gt; R[x]/(f),</li>\n<li>the hypothesis that lf is a ring homomorphism,<br>\n...</li>\n</ol>\n<p>I understand that the documentation is saying how to access this information, but I am new to Lean and I do not know how to extract this info.  Could anyone help me, please?</p>\n<p>Thank you very much!</p>",
        "id": 207115991,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597651059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Sure, we can make that work (-;</p>",
        "id": 207116078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597651126
    },
    {
        "content": "<p>Do you already have a bit of code to start with?</p>",
        "id": 207116088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597651138
    },
    {
        "content": "<p>Great!!</p>\n<p>Sure, let me fetch it!</p>",
        "id": 207116134,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597651181
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">adjoin_root</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">classical</span> <span class=\"n\">ring</span> <span class=\"n\">monoid</span>\n\n<span class=\"n\">class</span> <span class=\"n\">univ_loc_f</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">Rf</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ring</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">Rf</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">has1</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">Rf</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">lf</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">Rf</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">lfh</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"n\">lf</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">inve</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">lf</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">vers</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">,</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">,</span>\n        <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">fac</span> <span class=\"o\">:</span> <span class=\"n\">Rf</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">fac</span><span class=\"o\">]</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">fac</span> <span class=\"o\">(</span><span class=\"n\">lf</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">uni</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">,</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">,</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">fac1</span> <span class=\"n\">fac2</span> <span class=\"o\">:</span> <span class=\"n\">Rf</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">fac1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">fac2</span><span class=\"o\">]</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">fac1</span> <span class=\"o\">(</span><span class=\"n\">lf</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">fac2</span> <span class=\"o\">(</span><span class=\"n\">lf</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fac1</span><span class=\"bp\">=</span><span class=\"n\">fac2</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">loc_f</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">univ_loc_f</span> <span class=\"n\">R</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">fx</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">monomial</span> <span class=\"mi\">1</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">fx1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">fx</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">Rf</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin_root</span> <span class=\"n\">fx1</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 207116207,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597651223
    },
    {
        "content": "<p>at this stage in the definition loc_f, I would like to start introducing the hypothesis to check that indeed a localization in the sense above exists.  But I am stuck!</p>",
        "id": 207116280,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597651298
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 207116288,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597651304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/adjoin_root/near/207116288\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>\n</blockquote>\n<p>Thanks!  I did not know how to do this!</p>",
        "id": 207116376,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597651365
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">polynomial</span> <span class=\"c1\">-- jmc added this</span>\n\n<span class=\"n\">def</span> <span class=\"n\">loc_f</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">univ_loc_f</span> <span class=\"n\">R</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">Rf</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">lf</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">Rf</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin_root</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207116513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597651488
    },
    {
        "content": "<p>Because of <code>open polynomial</code> you can simply write <code>X</code> for the polynomial variable</p>",
        "id": 207116536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597651507
    },
    {
        "content": "<p>Ah, this makes it easier to type it!</p>",
        "id": 207116550,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597651528
    },
    {
        "content": "<p><code>lf</code> is the canonical map, and it is already a ring hom</p>",
        "id": 207116552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597651534
    },
    {
        "content": "<p>So you might as well just use <code>adjoin_root.mk</code> directly</p>",
        "id": 207116557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597651545
    },
    {
        "content": "<p>Maybe <code>open adjoin_root</code> to just type <code>mk</code></p>",
        "id": 207116563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597651559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> all <code>comm_ring</code>s have <code>has_one</code>...</p>",
        "id": 207116626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597651591
    },
    {
        "content": "<p>Ok, I am going to try it now and see if I can now finish the proof and figure out all the remaining hypotheses!</p>\n<p>Thank you very much!</p>",
        "id": 207116648,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597651615
    },
    {
        "content": "<p>Ooh, it would be <code>mk f</code> not just <code>mk</code>... you have to remind it about the polynomial of which you are adjoining a root. So maybe the <code>let</code> is not so bad.</p>",
        "id": 207116660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597651628
    },
    {
        "content": "<p>thanks!  I prefer to have the names of all the data that I introduce as hypotheses, so that I can reuse them as I need to.</p>",
        "id": 207116740,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597651688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, Kenny raised an important point. (I hadn't looked at your code closely.)<br>\nIf you write <code>[comm_ring R] [has_one R]</code>, then <code>R</code> will end up having two elements called <code>1</code>. The first comes from <code>comm_ring</code> (because in mathlib all rings are unital) and the other from <code>has_one</code>. And you can't prove that they will be the same or different, because nothing relates the two.</p>",
        "id": 207116773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597651732
    },
    {
        "content": "<p>Ah, I see!  I had added this, since at some other time, after stating that something was a commutative ring, then I had an error saying that 1 was missing in a commutative ring.</p>",
        "id": 207116853,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597651799
    },
    {
        "content": "<p>Ooh, weird</p>",
        "id": 207116902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597651810
    },
    {
        "content": "<p>This might very well have been a mistake on my part, in that I did not know how to use the 1 in the ring, even if it already was there...</p>",
        "id": 207116916,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597651826
    },
    {
        "content": "<p>Also, you are encouraged to use <code>R →+* S</code> for ring homs, instead of <code>[is_ring_hom f]</code>.</p>",
        "id": 207116929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597651835
    },
    {
        "content": "<p>I will remove it and see how far I can go along</p>",
        "id": 207116935,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597651839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/adjoin_root/near/207116929\">said</a>:</p>\n<blockquote>\n<p>Also, you are encouraged to use <code>R →+* S</code> for ring homs, instead of <code>[is_ring_hom f]</code>.</p>\n</blockquote>\n<p>I am glad to use this notation: I had no idea that it existed!</p>",
        "id": 207116952,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597651863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Oops, <code>adjoin_root.mk f</code> is the quotient map from <code>polynomial R</code>, not the \"inclusion\" <code>R →+* Rf</code>.</p>",
        "id": 207117127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597651993
    },
    {
        "content": "<p>Yes, I was going to try to fix this!  Ahahaha</p>",
        "id": 207117142,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597652008
    },
    {
        "content": "<p><code>let lf : R →+* Rf := algebra_map R Rf</code></p>",
        "id": 207117168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597652030
    },
    {
        "content": "<p>it's also called <code>adjoin_root.of f</code></p>",
        "id": 207117228,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597652058
    },
    {
        "content": "<p>Aah, right</p>",
        "id": 207117244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597652080
    },
    {
        "content": "<p>(Also, in my code, <code>f</code> is not the polynomial whose root I was to extract, but rather is the polynomial <code>f*x-1</code>.  Which means that I also do not know how to multiply <code>f</code> in <code>R</code> with <code>X</code> in <code>polynomial R</code>)</p>",
        "id": 207117274,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597652109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I think I would use the following structure definition:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">univ_loc_f</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Rf</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">Rf</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">lf</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">Rf</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inve</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">lf</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">vers</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">],</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">f</span><span class=\"o\">)),</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">fac</span> <span class=\"o\">:</span> <span class=\"n\">Rf</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">fac</span> <span class=\"o\">(</span><span class=\"n\">lf</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">uni</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">],</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">f</span><span class=\"o\">)),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">fac1</span> <span class=\"n\">fac2</span> <span class=\"o\">:</span> <span class=\"n\">Rf</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">fac1</span> <span class=\"o\">(</span><span class=\"n\">lf</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">fac2</span> <span class=\"o\">(</span><span class=\"n\">lf</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fac1</span> <span class=\"bp\">=</span> <span class=\"n\">fac2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207117396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597652223
    },
    {
        "content": "<p>Thank you!  You are much faster than I am: I was exactly going through a similar process!</p>\n<p>I will continue with my own version and in the end, I will check it against your solution: proceeding in this way, I feel that I learn more!</p>",
        "id": 207117489,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597652290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/adjoin_root/near/207117274\">said</a>:</p>\n<blockquote>\n<p>(Also, in my code, <code>f</code> is not the polynomial whose root I was to extract, but rather is the polynomial <code>f*x-1</code>.  Which means that I also do not know how to multiply <code>f</code> in <code>R</code> with <code>X</code> in <code>polynomial R</code>)</p>\n</blockquote>\n<p><code>polynomial.C</code> is the ring hom that maps <code>r : R</code> to the constant polynomial <code>C r</code></p>",
        "id": 207117545,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597652346
    },
    {
        "content": "<p>Also very helpful, thanks!</p>",
        "id": 207117663,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597652427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I've found a mistake on the final line of the structure definition. But I'll keep my mouth shut in case you want to figure it out yourself.</p>",
        "id": 207118573,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597653289
    },
    {
        "content": "<p>I will try to find the mistake.  For the moment, I have a question: why did you change the parenthesis in hypothesis <code>ring</code> from round to square?</p>\n<div class=\"codehilite\"><pre><span></span><code>(Rf : Type)```\nwas\n```(ring : comm_ring Rf)```\nyou changed it to\n```[ring : comm_ring Rf]```\n</code></pre></div>",
        "id": 207118717,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597653389
    },
    {
        "content": "<p>The [] means type class resolution, i.e. Lean will find a <code>comm_ring</code> automatically</p>",
        "id": 207118870,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597653508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294142\">Chris Wong</span> <a href=\"#narrow/stream/113489-new-members/topic/adjoin_root/near/207118870\">said</a>:</p>\n<blockquote>\n<p>The [] means type class resolution, i.e. Lean will find a <code>comm_ring</code> automatically</p>\n</blockquote>\n<p>Ah, how convenient!  Thanks!  One fewer hypothesis to prove!</p>",
        "id": 207118925,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597653544
    },
    {
        "content": "<p><code>comm_ring</code> is a typeclass so we use square brackets to let Lean deal with it -- the square bracket system, a.k.a. the type class inference system, then deals with all the fiddly theorems of the form \"a commutative ring is an abelian group under addition so this lemma proved for abelian groups also holds for rings\"</p>",
        "id": 207118952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597653563
    },
    {
        "content": "<p>Ok, I changed the round brackets to square brackets, but now I can no longer use the <code>fconstructor</code> command to introduce the various bits of the structure...</p>",
        "id": 207119040,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597653619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/adjoin_root/near/207118573\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> I've found a mistake on the final line of the structure definition. But I'll keep my mouth shut in case you want to figure it out yourself.</p>\n</blockquote>\n<p>I could not find the mistake, but I have a bad feeling about the equal sign in <code>fac1=fac2</code>...</p>",
        "id": 207119109,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597653690
    },
    {
        "content": "<p>You should make structures with the</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">field1</span> <span class=\"o\">:=</span> <span class=\"n\">value1</span><span class=\"o\">,</span>\n  <span class=\"n\">field2</span> <span class=\"o\">:=</span> <span class=\"n\">value2</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>syntax</p>",
        "id": 207119123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597653706
    },
    {
        "content": "<p>Ok, so this means that I introduce everything and at the end I type </p>\n<p><code>exact { field1 := value1,...}</code>?</p>",
        "id": 207119278,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597653794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> if you could join the discord server maybe I can livestream how to fix your code</p>",
        "id": 207119393,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597653872
    },
    {
        "content": "<p>I don't know -- post some code?</p>",
        "id": 207119398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597653879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/adjoin_root/near/207119393\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> if you could join the discord server maybe I can livestream how to fix your code</p>\n</blockquote>\n<p>Happy to do this, but what is the discord server?</p>",
        "id": 207119431,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597653912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/adjoin_root/near/207119398\">said</a>:</p>\n<blockquote>\n<p>I don't know -- post some code?</p>\n</blockquote>\n<p>I will give it a shot and I will get back, in case I fail!</p>",
        "id": 207119536,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597653973
    },
    {
        "content": "<p><a href=\"https://discord.gg/sZf3r3\">https://discord.gg/sZf3r3</a></p>",
        "id": 207119585,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597654016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> The mistake is that you are missing parentheses:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">fac1</span> <span class=\"n\">fac2</span> <span class=\"o\">:</span> <span class=\"n\">Rf</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">fac1</span> <span class=\"o\">(</span><span class=\"n\">lf</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">fac2</span> <span class=\"o\">(</span><span class=\"n\">lf</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">fac1</span> <span class=\"bp\">=</span> <span class=\"n\">fac2</span><span class=\"o\">)</span>\n  <span class=\"c1\">--                        ^</span>\n</code></pre></div>",
        "id": 207119888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597654243
    },
    {
        "content": "<p>Without them, you would have to prove the implication for all <code>r</code>, which isn't what you want <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 207119944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597654297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/adjoin_root/near/207119585\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://discord.gg/sZf3r3\">https://discord.gg/sZf3r3</a></p>\n</blockquote>\n<p>My account needs to be 5 mins old to be able to post...</p>",
        "id": 207120014,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597654326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/adjoin_root/near/207119944\">said</a>:</p>\n<blockquote>\n<p>Without them, you would have to prove the implication for all <code>r</code>, which isn't what you want <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>Ah, thanks for catching this!</p>",
        "id": 207120037,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597654353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> let's wait for 5 minutes then</p>",
        "id": 207120052,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597654374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/adjoin_root/near/207119398\">said</a>:</p>\n<blockquote>\n<p>I don't know -- post some code?</p>\n</blockquote>\n<p>Dear Kevin,</p>\n<p>thank you for your offer!  I had a chat with Kenny Lau and he cleared a lot of doubts that I had!  I will try to make some further progress and will get back to the chat, once I have been stuck for a while!</p>\n<p>Thank you all for your help!</p>",
        "id": 207124060,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597657388
    }
]