[
    {
        "content": "<p>I am convinced that the following function must already exist in lean/mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lift_option</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span>   <span class=\"n\">none</span>   <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, I don't know how to find it. Can you please tell me which file it is in, or even better, is there something like Hoogle but for Lean, so I could easily find it on my own?</p>",
        "id": 273504258,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1646061571
    },
    {
        "content": "<p>This is <code>functor.map</code>.</p>",
        "id": 273505214,
        "sender_full_name": "Chris B",
        "timestamp": 1646061915
    },
    {
        "content": "<p><code>def lift_option {α β : Type} (f : α → β) : option α → option β := by library_search</code></p>\n<p>also turns up <code>option.map</code>.</p>",
        "id": 273505320,
        "sender_full_name": "Chris B",
        "timestamp": 1646061958
    },
    {
        "content": "<p>Wow! Thanks a lot! I had no idea that <code>library search</code> works for data, too!</p>",
        "id": 273506600,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1646062377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 273506618,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646062384
    },
    {
        "content": "<p>The syntax <code>library_search using f</code> is especially useful when searching for data and multiple unequal answers are possible</p>",
        "id": 273556487,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1646083643
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.map\">docs#option.map</a> if <code>α</code> and <code>β</code> aren't in the same universe</p>",
        "id": 273575215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646094764
    }
]