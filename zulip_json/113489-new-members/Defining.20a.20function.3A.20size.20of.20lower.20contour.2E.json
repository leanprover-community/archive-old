[
    {
        "content": "<p>I am trying to define a function that for any <code>x</code> in some finite <code>A</code> returns the size of the set of <code>y</code> in <code>A</code> such that <code>R x y</code> for some relation <code>R</code>. I know how to define some basic functions, and how to define some basic sets, but I can't seem to combine my knowledge to define this function.</p>",
        "id": 282149435,
        "sender_full_name": "Greg Leo",
        "timestamp": 1652379153
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A.filter</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n</code></pre></div>",
        "id": 282150800,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1652379758
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.double_counting</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">your_thing</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s.bipartite_above</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n</code></pre></div>",
        "id": 282151071,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652379909
    },
    {
        "content": "<p>I'll need to read about a few things before I understand these. Having two different options should help me figure things out. Thank you!</p>",
        "id": 282151923,
        "sender_full_name": "Greg Leo",
        "timestamp": 1652380292
    },
    {
        "content": "<p>The two options are definitionally equal. The advantage of Patrick's is that it's rather transparent in what it does. The advantage of mine is that it directly plugs onto the theory of double-counting.</p>",
        "id": 282152132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652380383
    },
    {
        "content": "<p>They're not definitionally equal, not only because of the order of arguments, but also because they are actually different functions (your definition fixes the second argument of the relation, while mine fixes the first argument).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"mi\">1</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"c1\">-- 1</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">your_thing</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"mi\">1</span>    <span class=\"c1\">-- 0</span>\n</code></pre></div>\n<p><em>\"Function that for any <code>x</code> in some finite <code>A</code> returns the size of the set of <code>y</code> in <code>A</code> such that <code>R x y</code> for some relation <code>R</code>\"</em> sounds like <code>x</code> should be fixed.</p>",
        "id": 282154159,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1652381384
    },
    {
        "content": "<p>If I was programming it (in some made-up python-like language), I would have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">function</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">){</span>\n  <span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">A</span><span class=\"o\">){</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">){</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">size</span>  <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">return</span><span class=\"o\">(</span><span class=\"n\">size</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 282154534,
        "sender_full_name": "Greg Leo",
        "timestamp": 1652381550
    },
    {
        "content": "<p>So yeah, <code>x</code> is fixed, and I want to count up the <code>y</code> such that <code>R x y</code>. That is, how many <code>y</code> are there in <code>A</code> that are \"worse than\" <code>x</code>?</p>",
        "id": 282154981,
        "sender_full_name": "Greg Leo",
        "timestamp": 1652381764
    },
    {
        "content": "<p>Then my definition of <code>f</code> is what you need.</p>",
        "id": 282155395,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1652381963
    },
    {
        "content": "<p>Ah sorry, I meant <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.bipartite_above\">docs#finset.bipartite_above</a></p>",
        "id": 282156211,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652382320
    }
]