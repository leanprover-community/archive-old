[
    {
        "content": "<p>I'm going through the lean tutorial project, working on the sequence limits chapter.</p>\n<p>so right now I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Assume l &gt; 0. Then u tends to l implies u n ≥ l/2 for large enough n</span>\n<span class=\"c1\">-- 0034</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">l</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">gt_iff_lt</span> <span class=\"n\">at</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">lim</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">lim</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">gt_iff_lt</span> <span class=\"n\">at</span> <span class=\"n\">lim</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">hl</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l</span>\n<span class=\"n\">lim</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">l</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>I want implicate from <code>hl</code> that <code>0 &lt; l / 2</code> so I could apply it at the <code>lim</code> theorem but I couldn't find the right rw/specialize/\\l combination to make it work. what did I miss?</p>",
        "id": 289816622,
        "sender_full_name": "Guy",
        "timestamp": 1657960017
    },
    {
        "content": "<p>There should be a lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_pos\">docs#div_pos</a></p>",
        "id": 289816684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657960091
    },
    {
        "content": "<p>ha. thanks! may I have just a final tip on how to apply it? still working through my tactics :)</p>",
        "id": 289816811,
        "sender_full_name": "Guy",
        "timestamp": 1657960251
    },
    {
        "content": "<p>You could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">hl2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">div_pos</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> proof that 2 is pos -/</span> <span class=\"o\">},</span>\n<span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">lim</span> <span class=\"n\">hl2</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 289816931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657960434
    },
    {
        "content": "<p>Probably the <code>/- proof that 2 is pos -/</code> is just <code>norm_num</code>.</p>",
        "id": 289816980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657960463
    },
    {
        "content": "<p>tried to do something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"n\">gt_iff_lt</span> <span class=\"n\">at</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n  <span class=\"n\">specialize</span> <span class=\"n\">div_pos</span> <span class=\"n\">hl</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>lean seems to worry that 2 is nat and not real?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">div_pos</span> <span class=\"n\">hl</span> <span class=\"n\">h2</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h2</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 289817511,
        "sender_full_name": "Guy",
        "timestamp": 1657961264
    },
    {
        "content": "<p>Did my suggestion work?</p>",
        "id": 289817798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657961663
    },
    {
        "content": "<p>You can fix yours by being explicit about which <code>0 &lt; 2</code> you mean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"c1\">-- etc</span>\n</code></pre></div>",
        "id": 289817808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657961705
    },
    {
        "content": "<p>I guess in my suggestion above, <code>rw div_pos</code> fails, and should be <code>apply div_pos</code>.</p>",
        "id": 289817820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657961758
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"n\">gt_iff_lt</span> <span class=\"n\">at</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hl2</span> <span class=\"o\">:=</span> <span class=\"n\">div_pos</span> <span class=\"n\">hl</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>this worked out</p>",
        "id": 289817962,
        "sender_full_name": "Guy",
        "timestamp": 1657961985
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/two_pos\">docs#two_pos</a> or maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zero_lt_two\">docs#zero_lt_two</a> exist? If so, I guess you can write <code>have hl2 := div_pos hl two_pos</code></p>",
        "id": 289818119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657962142
    },
    {
        "content": "<p>good to know mathlib has the 2,3,4 cases <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 289818221,
        "sender_full_name": "Guy",
        "timestamp": 1657962349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514808\">Guy</span> has marked this topic as resolved.</p>",
        "id": 289818276,
        "sender_full_name": "Notification Bot",
        "timestamp": 1657962386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"514808\">@Guy</span> it is crucial to read the comments in those files. The expected way to deal with this is explained on line 41</p>",
        "id": 289833681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1657985961
    },
    {
        "content": "<p>If you prefer to provide a proof term then you can use lemma half_pos.</p>",
        "id": 289833759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1657986025
    }
]