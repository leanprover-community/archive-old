[
    {
        "content": "<p>Now I'm learning how to declare inductive types. This code works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">List</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"bp\">→</span> <span class=\"n\">List</span>\n</code></pre></div>\n<p>But this code doesn't. Why?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- universe level of type_of(arg #2) of 'List1.cons' is too big for the corresponding inductive datatype</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">List1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">List1</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List1</span> <span class=\"bp\">→</span> <span class=\"n\">List1</span>\n</code></pre></div>\n<p>But when I replace the second <code>Type*</code> with <code>Sort*</code>, it works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">List2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">List2</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List2</span> <span class=\"bp\">→</span> <span class=\"n\">List2</span>\n</code></pre></div>\n<p>In the mathlib repository there is <a href=\"https://github.com/leanprover-community/mathlib/blob/07b5618a3382bd08837863f71b14a6afa90367b7/test/induction.lean#L22\">an example</a> that looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">List3</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">List3</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List3</span>\n</code></pre></div>\n<p>It seems that I can do away with the <code>{}</code>s. Why?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">List4</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">List4</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List4</span>\n</code></pre></div>\n<p>And also I want to make this <code>#eval</code> line print something useful.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- result type does not have an instance of type class 'has_repr', dumping internal representation</span>\n<span class=\"k\">#eval</span> <span class=\"n\">List.cons</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">List.nil</span>\n</code></pre></div>",
        "id": 227930562,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1614347795
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">List</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"bp\">→</span> <span class=\"n\">List</span>\n</code></pre></div>\n<p>I usually let Lean decide what the type of my definitions are, so I can't answer why the <code>Type*</code> version doesn't work and the <code>Sort*</code> version does. Note that the <code>Sort*</code> version still creates <code>List : Type u_1 → Type u_1</code> as you can see with <code>#check List</code>. The <code>{}</code> brackets are just about changing the input binders for the constructors, but at some point the defaults were changed so it would not surprise me if there were now some <code>{}</code>s in inductive types which are no longer necessary.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">List5</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">List5</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List5</span>\n\n<span class=\"c1\">-- note round brackets</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">List5.nil</span> <span class=\"c1\">-- Π (α : Sort u_1), List5 α</span>\n</code></pre></div>\n<p>Finally, to make #eval work you just need to make an instance of <code>has_repr</code> for your type (make it an instance of the has_repr class in Haskell lingo -- and Lean lingo). Look through the source code to find some examples -- I think it's just a matter of attaching a string to each term so Lean knows what to print.</p>",
        "id": 227931470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614348181
    },
    {
        "content": "<p>archive/miu_language/basic.lean in mathlib has got a simple has_repr example.</p>",
        "id": 227931869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614348346
    }
]