[
    {
        "content": "<p>Hi everyone. I'm very new to Lean, so this is a very basic question.  I want to show that the constant function <code>f : i -&gt; R</code> where <code>i</code> is a finite type and <code>f i = 0</code> everywhere integrates to zero. Here is my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span>\n<span class=\"n\">sum_of_zero_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I've been trying to find this lemma in the library for a while and failing, but it has to be there somewhere right? My proof attempts have also been unsuccessful so far. Thanks in advance!</p>",
        "id": 218687940,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1606999555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"367214\">@Javier Prieto</span> It's called <code>sum_eq_zero</code>.</p>",
        "id": 218688619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606999958
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_eq_zero\">docs#finset.sum_eq_zero</a></p>",
        "id": 218688646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606999981
    },
    {
        "content": "<p>Thank you for your answer <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> . I think that's the result I need. However, when I try to use it in (a slightly modified version of) my lemma above like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span>\n<span class=\"n\">sum_of_zero_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sum_eq_zero</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get the following type error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">sum_eq_zero</span> <span class=\"n\">hf</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">hf</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>My guess is that because <code>sum_eq_zero</code> is defined for finite sets but my <code>ι</code> is a finite type with no notion of membership <code>∈</code>, I'd need to either redefine <code>ι</code> as a <code>finset</code> or find a similar result for <code>fintype</code>. Am I too far off the mark?</p>",
        "id": 218802636,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607068932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"367214\">@Javier Prieto</span> Just write <code>apply sum_eq_zero,</code> and prove the resulting goal afterwords.</p>",
        "id": 218803042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607069306
    },
    {
        "content": "<p>(It will be <code>intros, apply hf</code>)</p>",
        "id": 218803049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607069322
    },
    {
        "content": "<p>Yeah, that worked. I still need to wrap my head around the syntax of <code>apply</code>. Thank you so much!</p>",
        "id": 218803498,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607069704
    },
    {
        "content": "<p>Re-using this thread to kindly ask about the converse</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_nonneg_zero</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hf2</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hf2</span> <span class=\"o\">:=</span> <span class=\"n\">le_iff_lt_or_eq.mp</span> <span class=\"n\">hf2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hf2</span> <span class=\"k\">with</span> <span class=\"n\">fi_pos</span> <span class=\"n\">fi_zero</span><span class=\"o\">,</span> <span class=\"c1\">-- split into f i &gt; 0 and f i = 0</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"c1\">-- sum of positive reals cannot be zero</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">fi_zero</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I have no problem showing this for the sum of two positive real numbers, so I was thinking I could use induction, but maybe that's overkill?</p>",
        "id": 219069759,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607341311
    },
    {
        "content": "<p>I think you're looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_eq_zero_iff_of_nonneg\">docs#finset.sum_eq_zero_iff_of_nonneg</a></p>",
        "id": 219070575,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607341940
    },
    {
        "content": "<p>Indeed, thank you. I'm still having trouble applying it though. When I try the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_nonneg_zero</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sum_eq_zero_iff_of_nonneg</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the tactic \"fails to unify\" even though that worked for <code>sum_eq_zero</code> and they look the same to my untrained eye.</p>",
        "id": 219073860,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607344484
    },
    {
        "content": "<p>It's not exactly the same because there is this <code>s</code> in the finset lemma.</p>",
        "id": 219074124,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607344664
    },
    {
        "content": "<p>The sum is defined as the sum over <code>finset.univ</code> but <code>∀ i</code> isn't defined as for all <code>i</code> in <code>finset.univ</code>.</p>",
        "id": 219074213,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607344700
    },
    {
        "content": "<p>Yes, but that <code>s</code> was also present in the <code>sum_eq_zero</code> lemma and this syntax worked in that case (still unsure why to be honest). That's what confuses me.</p>",
        "id": 219074903,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607345129
    },
    {
        "content": "<p><code>apply foo</code> matches the conclusion of <code>foo</code> with the goal. In the example where <code>apply sum_eq_zero</code> worked, you only had <code>∑ i, f i = 0</code> in the goal. Here, the goal also includes these <code>∀ i, 0 ≤ f i</code>, <code>∀ i, f i = 0</code> bits which have the wrong shape.</p>",
        "id": 219076380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607346089
    },
    {
        "content": "<p>Does it work if you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">sum_eq_zero_iff_of_nonneg</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>?</p>",
        "id": 219076907,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1607346386
    },
    {
        "content": "<p>It shouldn't work because there is still <code>∀ i, f i = 0</code> in the conclusion to deal with</p>",
        "id": 219077487,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607346750
    },
    {
        "content": "<p>Oh, right, I misread</p>",
        "id": 219078741,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1607347552
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_nonneg_zero</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sum_eq_zero_iff_of_nonneg</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hf2</span><span class=\"o\">],</span>\n      <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H.1</span> <span class=\"n\">hf1</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219092768,
        "sender_full_name": "Bassem Safieldeen",
        "timestamp": 1607354488
    },
    {
        "content": "<p>Right, but note that the original question was an iff, and you only proved one direction. (Though the other one should be fairly simple.)</p>",
        "id": 219094343,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1607355194
    },
    {
        "content": "<p>Here's the proof with the iff</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_nonneg_zero'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span>\n<span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_eq_zero_iff_of_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Very easy indeed!</p>",
        "id": 219096448,
        "sender_full_name": "Javier Prieto",
        "timestamp": 1607356161
    },
    {
        "content": "<p>Nice!</p>",
        "id": 219096909,
        "sender_full_name": "Bassem Safieldeen",
        "timestamp": 1607356342
    }
]