[
    {
        "content": "<p>I've seen this a lot in the category theory library, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">v‚ÇÇ</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">[]</span>    <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map</span>       <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">((</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">map_id'</span>   <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_comp'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What does <code>. obviously</code> mean?</p>",
        "id": 233066241,
        "sender_full_name": "Justus Springer",
        "timestamp": 1617524972
    },
    {
        "content": "<p>It's explained here:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/obviously.html\">https://leanprover-community.github.io/mathlib_docs/tactic/obviously.html</a></p>",
        "id": 233066352,
        "sender_full_name": "Greg Price",
        "timestamp": 1617525098
    },
    {
        "content": "<p>Rather, the definition of <code>obviously</code> is</p>",
        "id": 233066355,
        "sender_full_name": "Greg Price",
        "timestamp": 1617525121
    },
    {
        "content": "<p>The <code>. foo</code> syntax it's being used in is a way of supplying a tactic that gets used to fill in the field by default, if you don't supply one at the time of constructing a structure</p>",
        "id": 233066408,
        "sender_full_name": "Greg Price",
        "timestamp": 1617525163
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 233066526,
        "sender_full_name": "Justus Springer",
        "timestamp": 1617525258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"397997\">Greg Price</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20does.20.60.20.2E.20obviously.60.20mean.3F/near/233066352\">said</a>:</p>\n<blockquote>\n<p>It's explained here:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/obviously.html\">https://leanprover-community.github.io/mathlib_docs/tactic/obviously.html</a></p>\n</blockquote>\n<p>Somehow I missed that</p>",
        "id": 233066555,
        "sender_full_name": "Justus Springer",
        "timestamp": 1617525269
    },
    {
        "content": "<p>Ah, to be clear, I didn't mean to suggest that you should have found that already!</p>",
        "id": 233066748,
        "sender_full_name": "Greg Price",
        "timestamp": 1617525554
    },
    {
        "content": "<p>The syntax especially is a bit, er, non-obvious until you've seen an explicit discussion of what it means</p>",
        "id": 233066765,
        "sender_full_name": "Greg Price",
        "timestamp": 1617525582
    },
    {
        "content": "<p>The <code>. tactic</code> notation is explained in the lean 3 reference manual <a href=\"https://leanprover.github.io/reference/expressions.html#implicit-arguments\">here</a></p>",
        "id": 233067787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617526989
    }
]