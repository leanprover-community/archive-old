[
    {
        "content": "<p>When slim_check fails to find a counterexample, it says \"goals accomplished\" and when slim_check finds a counterexample, it prints the counterexample. So what does \"gave up after X tries\" mean? How about deterministic timeout?</p>",
        "id": 223531510,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611245881
    },
    {
        "content": "<p>I think \"gave up after X tries\" means that <code>slim_check</code> was not able to find an example satisfying the hypotheses within X tries. <br>\nDeterministic timeout in general means that something exceeded the memory / computation limits in Lean's options. Without seeing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I can't say what it means.</p>\n<p>cc: <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> who wrote <code>slim_check</code>.</p>",
        "id": 223531884,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611246022
    },
    {
        "content": "<p>This code gives deterministic timeout.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.range</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">popcount</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(((</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">$</span> <span class=\"n\">nat.to_digits</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">list.sum</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dp_cardinality</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">the_rest</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">the_rest</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">the_rest</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">the_rest</span> <span class=\"n\">tt</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dp_popcount</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">dp_popcount</span> <span class=\"n\">the_rest</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">dp_popcount</span> <span class=\"n\">the_rest</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dp_popcount</span> <span class=\"n\">the_rest</span> <span class=\"n\">ff</span> <span class=\"bp\">+</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">the_rest</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">the_rest</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">dp_popcount</span> <span class=\"n\">the_rest</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dp_popcount</span> <span class=\"n\">the_rest</span> <span class=\"n\">tt</span> <span class=\"bp\">+</span> <span class=\"n\">dp_cardinality</span> <span class=\"n\">the_rest</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_binary</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list.reverse</span> <span class=\"o\">((</span><span class=\"n\">nat.to_digits</span> <span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">ff</span> <span class=\"k\">else</span> <span class=\"n\">tt</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dp_popcount</span> <span class=\"o\">(</span><span class=\"n\">to_binary</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ff</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">equivalent</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dp</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">popcount</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">slim_check</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223532225,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611246149
    },
    {
        "content": "<p>Most likely, slim_check tried some reasonable sized numbers, but the <code>popcount</code> function takes exponential time so it probably got unlucky and went too far</p>",
        "id": 223533577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611246519
    },
    {
        "content": "<p><code>slim_check {max_size := 50}</code> works but it has visible difficulty; you can play with the maximum below the lean timeout which is around 10 seconds</p>",
        "id": 223534047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611246710
    }
]