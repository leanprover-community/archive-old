[
    {
        "content": "<p>To learn Lean and mathlib, I played through my own sequel to the NNG, and formalized the proof of the Portmanteau theorem on equivalent characterizations of weak convergence.</p>\n<p>I have so far deliberately not asked whether more serious people have already done that; I noticed earlier that knowing it made the game less fun for me (since my progress was slower and the result clumsier). But now that I played through the part that I had set as my goal, I would be very happy to hear expert views on how weak convergence and Portmanteau theorem should have been done and what is their status in mathlib.</p>\n<p>I will have a few specific questions here... For reference, here is my <a href=\"https://github.com/kkytola/lean_portmanteau\">Portmanteau game-play</a>. (It will not be hard to recognize as a stubborn beginner's attempt --- especially with some trivial lemmas stated in a lousy generality and having ridiculously lengthy proofs).</p>\n<p>But more generally, although I am obviously not yet able to write clean Lean of mathlib standards on my own, I feel like with the first exercise out of the way I could soon start slowly contributing somewhere...</p>",
        "id": 244370706,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625019491
    },
    {
        "content": "<p>The main statement of my formalization of the Portmanteau theorem in metric spaces looks like the following (sorry, not self-contained, needs a few imports from other files, but should give a fair picture). You should be able to decide from a comparison of <a href=\"https://en.wikipedia.org/wiki/Convergence_of_measures#Weak_convergence_of_measures\">wikipedia</a> and the code below whether I actually formalized a fair approximation to the right result <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `tfae_weak_conv_seq` :</span>\n<span class=\"sd\">    Equivalent conditions for the weak convergence of a sequence of Borel probability</span>\n<span class=\"sd\">    measures on a metric space. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">tfae_weak_conv_seq</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œºseq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">borel_proba</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">borel_proba</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">tfae</span>  <span class=\"o\">[</span> <span class=\"n\">tendsto</span> <span class=\"n\">Œºseq</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n            <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">bdd_Rval</span> <span class=\"n\">f</span> <span class=\"bp\">‚Üí</span>\n              <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral</span> <span class=\"n\">Œ±</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">borel</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Œºseq</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral</span> <span class=\"n\">Œ±</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">borel</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Œº</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">,</span>\n            <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cont_bdd_ennval</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n              <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"o\">(</span><span class=\"n\">Œºseq</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"n\">Œº</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">,</span>\n            <span class=\"o\">(</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">is_open</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œº</span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">liminf</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Œºseq</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))(</span><span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"o\">,</span>\n            <span class=\"o\">(</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">is_closed</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">limsup</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Œºseq</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))(</span><span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œº</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">,</span>\n            <span class=\"o\">(</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">borel_set</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Œºseq</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))(</span><span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">)))</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 244370733,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625019549
    },
    {
        "content": "<p>I guess one part which I in the end actually felt satisfied about was the very definition of the topology on the \"set\" of Borel probability measures on a topological space. I felt that the definition was relatively succinct (by my standards) and building on existing mathlib. Since I managed to prove (in a clumsy but sorry-free way) its equivalence with the usual conditions, I think it is not absolutely wrong (might be a bad implementation, of course!)... One choice I was happy about was to use <code>ennreal</code>-valued functions and <code>lintegral</code>s instead on real-valued functions and Bochner-integrals in the definition of the topology (the equivalence to usual is anyway proven later). </p>\n<p>But ok... What is the experts' verdict on the following definition?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.integration</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.bochner_integration</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.ennreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.liminf_limsup</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">measurable_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">bdd_ennval</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">M</span>\n\n<span class=\"sd\">/-- Continuous bounded functions on a topological space `Œ±` with values</span>\n<span class=\"sd\">in `ennreal` are used as \"test functions\" in the definition of the topology of</span>\n<span class=\"sd\">the weak convergence of probability measures. They are defined as a subtype</span>\n<span class=\"sd\">of `Œ± ‚Üí ennreal`, so that the type of (positive) functionals is just</span>\n<span class=\"sd\">`(cont_bdd_ennval Œ±) ‚Üí ennreal`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">cont_bdd_ennval</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n  <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ennreal</span> <span class=\"bp\">//</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"bp\">‚àß</span> <span class=\"n\">bdd_ennval</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">functional_cont_bdd_ennval</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cont_bdd_ennval</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">cont_bdd_ennval</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">subtype.val</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">val_eq_coe_testfun</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cont_bdd_ennval</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f.val</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- As a first step towards the definition of the topology of the weak convergence</span>\n<span class=\"sd\">of probability measures, the space of functionals `(cont_bdd_ennval Œ±) ‚Üí ennreal`</span>\n<span class=\"sd\">is equipped with the product topology (the topology of \"testfunctionwise\" convergence,</span>\n<span class=\"sd\">i.e., of pointwise convergence of the functionals defined on the space of continuous</span>\n<span class=\"sd\">bounded test functions). -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">functional_cont_bdd_ennval</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n\n<span class=\"sd\">/-- Borel probability measures on a topological space `Œ±` are defined as a subtype</span>\n<span class=\"sd\">of measures. This subtype `borel_proba Œ±` is equipped with the topology of weak</span>\n<span class=\"sd\">convergence. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">borel_proba</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">measure_theory.measure</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">borel</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"bp\">//</span> <span class=\"bp\">@</span><span class=\"n\">probability_measure</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">borel</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"n\">Œº</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">borel_proba</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory.measure</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">borel</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">subtype.val</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">val_eq_coe_borel_proba</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ŒΩ</span> <span class=\"o\">:</span> <span class=\"n\">borel_proba</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ŒΩ.val</span> <span class=\"bp\">=</span> <span class=\"n\">ŒΩ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">borel_proba</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cont_bdd_ennval</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">lintegral</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">borel</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"n\">Œº</span> <span class=\"n\">f</span>\n\n<span class=\"sd\">/-- The topology of weak convergence on `borel_proba Œ±` is defined as the induced</span>\n<span class=\"sd\">topology of the mapping `(borel_proba Œ±) ‚Üí ((cont_bdd_ennval Œ±) ‚Üí ennreal)` to</span>\n<span class=\"sd\">functionals defined by integration of a test functio against to the measure. In</span>\n<span class=\"sd\">other contexts this could be called the weak-* topology. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">borel_proba</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"n\">topological_space.induced</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">borel_proba</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"sd\">/-- Integration of test functions against borel probability measures depends</span>\n<span class=\"sd\">continuously on the measure. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">integrate_cont_bdd_ennval_cont</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"n\">Œ±</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_induced_dom</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">conv_seq_induced</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">top_Œ≥</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">)))</span>\n      <span class=\"bp\">‚Üí</span> <span class=\"n\">tendsto</span> <span class=\"n\">x</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nhds</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">topological_space.induced</span> <span class=\"n\">f</span> <span class=\"n\">top_Œ≥</span><span class=\"o\">)</span> <span class=\"n\">x‚ÇÄ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_f_lim</span> <span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhds.mpr</span> <span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">U</span> <span class=\"n\">open_U</span> <span class=\"n\">U_ni_x‚ÇÄ</span> <span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">is_open_induced_iff</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≥</span> <span class=\"n\">top_Œ≥</span> <span class=\"n\">U</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">open_U</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span> <span class=\"n\">V</span> <span class=\"o\">,</span> <span class=\"n\">open_V</span> <span class=\"o\">,</span> <span class=\"n\">preim_V_eq_U</span> <span class=\"o\">‚ü©</span> <span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">preim_V_eq_U</span> <span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhds.mp</span> <span class=\"n\">h_f_lim</span> <span class=\"n\">V</span> <span class=\"n\">open_V</span> <span class=\"n\">U_ni_x‚ÇÄ</span> <span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- The usual definition of weak convergence of probability measures is given in</span>\n<span class=\"sd\">terms of sequences of probability measures: it is the requirement that the integrals</span>\n<span class=\"sd\">of all continuous bounded functions against members of the sequence converge.</span>\n<span class=\"sd\">This characterization is shown in `weak_conv_seq_iff'` in the case when the</span>\n<span class=\"sd\">functions are `ennreal`-valued and the integral is `lintegral`. The most common</span>\n<span class=\"sd\">formulation with `‚Ñù`-valued functions and Bochner integrals is `weak_conv_seq_iff`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">weak_conv_seq_iff'</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œºseq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">borel_proba</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">borel_proba</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">tendsto</span> <span class=\"n\">Œºseq</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">Œº</span><span class=\"o\">)</span>\n      <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cont_bdd_ennval</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n        <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"o\">(</span><span class=\"n\">Œºseq</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"n\">Œº</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">weak_conv</span> <span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">tendsto.comp</span> <span class=\"o\">(</span><span class=\"n\">continuous.tendsto</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integrate_cont_bdd_ennval_cont</span> <span class=\"n\">Œ±</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"n\">weak_conv</span> <span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">tendsto_pi.mp</span> <span class=\"n\">key</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h_lim_forall</span> <span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_lim</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"o\">(</span><span class=\"n\">Œºseq</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"n\">Œº</span><span class=\"o\">))</span> <span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">tendsto_pi.mpr</span> <span class=\"n\">h_lim_forall</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">conv_seq_induced</span> <span class=\"n\">_</span> <span class=\"n\">Œºseq</span> <span class=\"n\">Œº</span> <span class=\"n\">h_lim</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244370741,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625019567
    },
    {
        "content": "<p>I have no idea about whether this stuff is already in lean but very well done regardless!</p>",
        "id": 244383520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625035882
    },
    {
        "content": "<p>Very nice! I also notice that you use <code>abbreviation</code>, which I was not aware of. Have you found some sort of \"general\" Lean documentation or have you been looking around <code>mathlib</code> for inspiration?</p>",
        "id": 244385150,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1625037166
    },
    {
        "content": "<p>I think I picked <code>abbreviation</code> up from this Zulip, but I don't remember for sure... It felt convenient, since the statements of the equivalent conditions (as well as some frequently used definitions) were a bit long and often repeated otherwise.</p>\n<p>But in the end I'm not sure <code>abbreviation</code>s are good style: they are probably syntactically different (computer literate people, please correct me if I'm wrong) than the actual thing that is being abbreviated, so they are not directly recognized by Lean when applying results. One needs to unfold somehow or resort to things in which definitional equality suffices (again, please correct me if this is rubbish). For this reason I actually already started to remove some of the ones I had in earlier versions... <strong>[EDIT: This seems to be wrong, see Patrick's answer below.]</strong></p>\n<p>I originally used <code>def</code>s instead. To be honest, I don't know what is the difference <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span>. I think I just tried abbreviation and hoped it would improve some things, and I'm not sure it did in the end...</p>\n<p>Actually I would be very happy to hear about recommendations on the use or avoidance of <code>abbreviation</code>s and/or <code>def</code>s from experienced users!</p>",
        "id": 244391598,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625041607
    },
    {
        "content": "<p>I think abbreviations are purely a parsing and pretty-printing thing, so they don't block anything. Compare:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">nat.add_zero</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat'</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">nat.add_zero</span> <span class=\"n\">x</span>\n<span class=\"c1\">-- failed to synthesize type class instance for has_zero Nat'</span>\n</code></pre></div>",
        "id": 244391924,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625041860
    },
    {
        "content": "<p>Ok, I think I was hoping for something like that, but occasionally felt I needed to do extra steps to somehow unfold (although not with <code>unfold</code>). I think in the end I was just a bit confused...</p>\n<p>Thanks Patrick for the accurate information and example!</p>",
        "id": 244392365,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625042160
    },
    {
        "content": "<p><del>Don't abbreviations block rewrites?</del></p>",
        "id": 244412176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625054798
    },
    {
        "content": "<p>Ah, here's what I'm thinking of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.add_zero</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zero_add</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"c1\">-- dunfold zero_add, -- works with this</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.zero_add</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>abbreviation</code> for types are basically fully transparent, abbreviations for functions are not.</p>",
        "id": 244412932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625055208
    },
    {
        "content": "<p>I see, but my question was more about you having found a comprehensive Lean documentation, rather than this specific issue!</p>",
        "id": 244413863,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1625055657
    },
    {
        "content": "<p>Regarding comprehensive documentation I don't unfortunately have better suggestions than are on the <a href=\"https://leanprover-community.github.io/learn.html\">learning resources page</a>. I just banged my head against the portmanteau until I got the <em>goals accomplished!</em> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>. The most frequent technique was to (recursively) <strong>right-click</strong> on a term of interest and follow the <code>Go to Definition</code> link to the right file in mathlib. This Zulip is obviously also great (although I deliberately did not make use of it for my first exercise).</p>\n<p>Thanks Eric and Patrick for the insight into <code>abbreviation</code> (you answered at least questions I had about it).</p>",
        "id": 244443870,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625067690
    },
    {
        "content": "<p>This is really impressive work, especially for a first project! I think <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> is one of our local measure theory experts.</p>",
        "id": 244445041,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1625068193
    },
    {
        "content": "<p>Do I remember correctly that Fubini's theorem is by <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>? (Apologies if I misattribute, and in any case thanks a lot to whoever did it!)</p>\n<p>Maybe I'd ask if the following application of Fubini had been done before (this is in my <a href=\"https://github.com/kkytola/lean_portmanteau/blob/main/portmanteau_open_imp_cont.lean\">portmanteau_open_imp_cont.lean</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lintegral_eq_lintegral_ccdf</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hŒº</span> <span class=\"o\">:</span> <span class=\"n\">sigma_finite</span> <span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">lintegral</span> <span class=\"n\">Œº</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">lintegral</span> <span class=\"o\">(</span><span class=\"n\">volume.restrict</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"n\">ennreal.of_real</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It is very frequently used in probability theory.</p>",
        "id": 244447635,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625069140
    },
    {
        "content": "<p>Yes, Floris did Fubini!  I wonder if you could get this lemma by combining<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/volume_region_between_eq_lintegral\">docs#volume_region_between_eq_lintegral</a> <br>\n(to get that <code>lintegral Œº g</code> is the volume under the curve <code>g</code> in <code>Œ≤ √ó ‚Ñù</code>) with<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.prod_apply\">docs#measure_theory.measure.prod_apply</a> <br>\n(to get that that volume is equal to the integral on your right-hand side).</p>\n<p>I'm not an expert on the measure theory library, but I don't <em>think</em> we have this lemma directly.</p>",
        "id": 244450341,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625070191
    },
    {
        "content": "<p>In any case, I think it would be a good addition to the library!</p>",
        "id": 244450618,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625070329
    },
    {
        "content": "<p>Thanks Heather! Those results are of course very closely related to the one I asked about.</p>\n<p>I didn't yet try to reduce my proof to the theorems you mention. The first reason is that the pen-and-paper proof of the result is so short (a couple of lines) starting from Fubini itself that it feels nothing else but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lintegral_lintegral_swap\">docs#lintegral_lintegral_swap</a> should be needed. Of course the extra stuff that is needed (yeah, who could have guessed) is mostly measurability questions, and it might be that those could have been simplified by existing results. However, there is a minor difference in the choice of the codomain anyway, as I preferred values in <code>ennreal</code> whereas the results you quote had <code>‚Ñù</code>, so it was unclear to me if measurability proofs would be shortened by applying them... (Moreover, I didn't yet exactly try to optimize my proofs <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>). It is worth noting though that much of the pain in my approach was that while doing measurability things in <code>ennreal</code>s, I had to use a custom <code>&lt;</code> (namely <code>real_lt_ennreal</code>). I think this is likely a dubious design choice responsible of much of the mess.</p>\n<p>(Incidentally, I just realized that in my own course I state the corresponding result for <code>nnreal</code>-valued functions, probably so that there is a slick measurability trick using subtraction. Subtraction in <code>ennreals</code>, by contrast, was one of the most painful details in the portmanteau exercise.)</p>\n<p>Thank you again, I'll think about this some more. If I get a decent version I could try to PR this (or even smaller pieces) to mathlib. <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 244457888,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625073353
    },
    {
        "content": "<p>In case it is helpful, here is the portmanteau theorem in Isabelle: <a href=\"https://isabelle.in.tum.de/dist/library/HOL/HOL-Probability/Weak_Convergence.html\">https://isabelle.in.tum.de/dist/library/HOL/HOL-Probability/Weak_Convergence.html</a>. It's also described here on page 35: <a href=\"https://arxiv.org/pdf/1405.7012.pdf\">https://arxiv.org/pdf/1405.7012.pdf</a>.</p>",
        "id": 244485249,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1625085946
    },
    {
        "content": "<p>Thank you! I didn't know of this. I have never read Isabelle code before, but will take a look.</p>",
        "id": 244485993,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625086275
    },
    {
        "content": "<p>Actually, from the link and paper above (p. 25, it seems) I get the impression that weak convergence in Isabelle was defined for the real line --- I don't find portmanteau for general metric spaces (of course I'm Isabelle-illiterate). Is this accurate or am I missing something? (I didn't do the <code>‚Ñù</code>-specific equivalent conditions at all yet.)</p>\n<p>In any case, if I have the attention of a probability-formalization-pioneer, could you tell me what you think of my <a href=\"https://github.com/kkytola/lean_portmanteau/blob/main/portmanteau_definitions.lean\">definition of the topology of weak convergence</a> as an induced topology? Does this seem like a reasonable implementation? Thanks in advance!</p>",
        "id": 244486987,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625086766
    },
    {
        "content": "<p>Back to <code>lintegral_eq_lintegral_ccdf</code> briefly...</p>\n<p>To make this <code>lintegral_eq_lintegral_ccdf</code> more complementary to the existing theorems pointed out by Heather above (although I'd still believe even the original formulation is useful), I might try to generalize a bit. Specifically, in probability theory, for example to characterize the \"decay rate\" of cumulative distribution functions of non-negative random variables in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mi>p</mi></msup><mo stretchy=\"false\">(</mo><mi>Œº</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L^p(\\mu)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">Œº</span><span class=\"mclose\">)</span></span></span></span>, one uses</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mo>‚à´</mo><mi mathvariant=\"normal\">Œ©</mi></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>œâ</mi><msup><mo stretchy=\"false\">)</mo><mi>p</mi></msup><mtext>‚Äâ</mtext><mi mathvariant=\"normal\">d</mi><mi>Œº</mi><mo stretchy=\"false\">(</mo><mi>œâ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>p</mi><mtext>‚Äâ</mtext><msubsup><mo>‚à´</mo><mn>0</mn><mi mathvariant=\"normal\">‚àû</mi></msubsup><msup><mi>t</mi><mrow><mi>p</mi><mo>‚àí</mo><mn>1</mn></mrow></msup><mtext>‚Äâ</mtext><mi>Œº</mi><mo fence=\"false\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">{</mo><mi>œâ</mi><mo>‚àà</mo><mi mathvariant=\"normal\">Œ©</mi><mtext>‚ÄÖ‚Ää</mtext><mo fence=\"false\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">‚à£</mo><mtext>‚ÄÖ‚Ää</mtext><mi>f</mi><mo stretchy=\"false\">(</mo><mi>œâ</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>t</mi><mo fence=\"false\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">}</mo><mtext>‚Äâ</mtext><mi mathvariant=\"normal\">d</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\int_\\Omega f(\\omega)^p \\, \\mathrm{d} \\mu(\\omega) = p \\, \\int_0^\\infty t^{p-1} \\, \\mu \\big\\{ \\omega \\in \\Omega \\; \\big| \\; f(\\omega) &gt; t \\big\\} \\, \\mathrm{d} t.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.27195em;vertical-align:-0.9119499999999999em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">‚à´</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:-0.433619em;\"><span style=\"top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Œ©</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119499999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œâ</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.714392em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathrm\">d</span><span class=\"mord mathnormal\">Œº</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œâ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.326242em;vertical-align:-0.9119499999999999em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">‚à´</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.414292em;\"><span style=\"top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.8129000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119499999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">‚àí</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">Œº</span><span class=\"mord\"><span class=\"delimsizing size1\">{</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œâ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚àà</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.212em;vertical-align:-0.35000999999999993em;\"></span><span class=\"mord\">Œ©</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.86199em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>‚à£</span></span></span><span style=\"top:-2.85399em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span style=\"height:0.016em;width:0.333em;\"><svg width='0.333em' height='0.016em' style='width:0.333em' viewBox='0 0 333 16' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V16 H145z M145 0 H188 V16 H145z'/></svg></span></span><span style=\"top:-2.86199em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>‚à£</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œâ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord\"><span class=\"delimsizing size1\">}</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathrm\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span></span></span></span></span></p>\n<p>I guess it is no harder to prove that for any increasing differentiable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œï</mi><mo>:</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">‚àû</mi><mo stretchy=\"false\">]</mo><mo>‚Üí</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">‚àû</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\phi : [0,\\infty] \\to [0,\\infty]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">œï</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">‚àû</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">‚àû</span><span class=\"mclose\">]</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œï</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\phi(0)=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">œï</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and a non-negative <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>, we have</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mo>‚à´</mo><mi mathvariant=\"normal\">Œ©</mi></msub><mi>œï</mi><mo fence=\"false\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>œâ</mi><mo stretchy=\"false\">)</mo><mo fence=\"false\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">)</mo><mtext>‚Äâ</mtext><mi mathvariant=\"normal\">d</mi><mi>Œº</mi><mo stretchy=\"false\">(</mo><mi>œâ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>‚à´</mo><mn>0</mn><mi mathvariant=\"normal\">‚àû</mi></msubsup><msup><mi>œï</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">‚Ä≤</mo></msup><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mtext>‚Äâ</mtext><mi>Œº</mi><mo fence=\"false\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">{</mo><mi>œâ</mi><mo>‚àà</mo><mi mathvariant=\"normal\">Œ©</mi><mtext>‚ÄÖ‚Ää</mtext><mo fence=\"false\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">‚à£</mo><mtext>‚ÄÖ‚Ää</mtext><mi>f</mi><mo stretchy=\"false\">(</mo><mi>œâ</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>t</mi><mo fence=\"false\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">}</mo><mtext>‚Äâ</mtext><mi mathvariant=\"normal\">d</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\int_\\Omega \\phi \\big(f(\\omega) \\big) \\, \\mathrm{d} \\mu(\\omega) = \\int_0^\\infty \\phi&#x27;(t) \\, \\mu \\big\\{ \\omega \\in \\Omega \\; \\big| \\; f(\\omega) &gt; t \\big\\} \\, \\mathrm{d} t.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.27195em;vertical-align:-0.9119499999999999em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">‚à´</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:-0.433619em;\"><span style=\"top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Œ©</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119499999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">œï</span><span class=\"mord\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œâ</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"delimsizing size1\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathrm\">d</span><span class=\"mord mathnormal\">Œº</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œâ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.326242em;vertical-align:-0.9119499999999999em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">‚à´</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.414292em;\"><span style=\"top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.8129000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119499999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">œï</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚Ä≤</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">Œº</span><span class=\"mord\"><span class=\"delimsizing size1\">{</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œâ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚àà</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.212em;vertical-align:-0.35000999999999993em;\"></span><span class=\"mord\">Œ©</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.86199em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>‚à£</span></span></span><span style=\"top:-2.85399em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span style=\"height:0.016em;width:0.333em;\"><svg width='0.333em' height='0.016em' style='width:0.333em' viewBox='0 0 333 16' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V16 H145z M145 0 H188 V16 H145z'/></svg></span></span><span style=\"top:-2.86199em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>‚à£</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œâ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord\"><span class=\"delimsizing size1\">}</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathrm\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span></span></span></span></span></p>\n<p>In fact this is what I originally planned in my exercise, but ran into formalization difficulties (forgot what exactly), so eventually settled for whatever pedestrian version was sufficient for portmanteau...</p>\n<p>Of course I'd still like to know if this exists already and is considered mathlib-worthy before taking on the old difficulties...</p>",
        "id": 244487585,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625087041
    },
    {
        "content": "<p>I also think it would be nice to have a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/volume_region_between_eq_lintegral\">docs#volume_region_between_eq_lintegral</a> for <code>nnreal</code> target (perhaps a version without subtraction, doing \"region under\" rather than \"region between\").  And this would unify more nicely with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.prod_apply\">docs#measure_theory.measure.prod_apply</a> to produce your theorem in the form you stated it.</p>",
        "id": 244487867,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625087167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kyt√∂l√§</span> <a href=\"#narrow/stream/113489-new-members/topic/Portmanteau.20theorem/near/244487585\">said</a>:</p>\n<blockquote>\n<p>I guess it is no harder to prove that for any increasing differentiable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œï</mi><mo>:</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">‚àû</mi><mo stretchy=\"false\">]</mo><mo>‚Üí</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">‚àû</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\phi : [0,\\infty] \\to [0,\\infty]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">œï</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">‚àû</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">‚àû</span><span class=\"mclose\">]</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œï</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\phi(0)=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">œï</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and a non-negative <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>, we have</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mo>‚à´</mo><mi mathvariant=\"normal\">Œ©</mi></msub><mi>œï</mi><mo fence=\"false\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>œâ</mi><mo stretchy=\"false\">)</mo><mo fence=\"false\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">)</mo><mtext>‚Äâ</mtext><mi mathvariant=\"normal\">d</mi><mi>Œº</mi><mo stretchy=\"false\">(</mo><mi>œâ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>‚à´</mo><mn>0</mn><mi mathvariant=\"normal\">‚àû</mi></msubsup><msup><mi>œï</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">‚Ä≤</mo></msup><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mtext>‚Äâ</mtext><mi>Œº</mi><mo fence=\"false\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">{</mo><mi>œâ</mi><mo>‚àà</mo><mi mathvariant=\"normal\">Œ©</mi><mtext>‚ÄÖ‚Ää</mtext><mo fence=\"false\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">‚à£</mo><mtext>‚ÄÖ‚Ää</mtext><mi>f</mi><mo stretchy=\"false\">(</mo><mi>œâ</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>t</mi><mo fence=\"false\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">}</mo><mtext>‚Äâ</mtext><mi mathvariant=\"normal\">d</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\int_\\Omega \\phi \\big(f(\\omega) \\big) \\, \\mathrm{d} \\mu(\\omega) = \\int_0^\\infty \\phi&#x27;(t) \\, \\mu \\big\\{ \\omega \\in \\Omega \\; \\big| \\; f(\\omega) &gt; t \\big\\} \\, \\mathrm{d} t.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.27195em;vertical-align:-0.9119499999999999em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">‚à´</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:-0.433619em;\"><span style=\"top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">Œ©</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119499999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">œï</span><span class=\"mord\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œâ</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"delimsizing size1\">)</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathrm\">d</span><span class=\"mord mathnormal\">Œº</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œâ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.326242em;vertical-align:-0.9119499999999999em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">‚à´</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.414292em;\"><span style=\"top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.8129000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119499999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">œï</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚Ä≤</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">Œº</span><span class=\"mord\"><span class=\"delimsizing size1\">{</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œâ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚àà</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.212em;vertical-align:-0.35000999999999993em;\"></span><span class=\"mord\">Œ©</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.86199em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>‚à£</span></span></span><span style=\"top:-2.85399em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span style=\"height:0.016em;width:0.333em;\"><svg width='0.333em' height='0.016em' style='width:0.333em' viewBox='0 0 333 16' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V16 H145z M145 0 H188 V16 H145z'/></svg></span></span><span style=\"top:-2.86199em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>‚à£</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œâ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord\"><span class=\"delimsizing size1\">}</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathrm\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span></span></span></span></span><br>\n</p>\n</blockquote>\n<p>Yes!  This is a very useful fact!  I wonder if there is a standard name for it?</p>",
        "id": 244488148,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625087317
    },
    {
        "content": "<p>The only one I am aware of is <code>that_Fubini_trick_with_complementary_cumulative_distribution_functions</code>. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 244488357,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625087416
    },
    {
        "content": "<p>Ah ... the \"layer cake representation\"</p>",
        "id": 244488754,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625087626
    },
    {
        "content": "<p>(in Lieb-Loss <em>Analysis</em>, at least)</p>",
        "id": 244488854,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625087676
    },
    {
        "content": "<p>Isn't this what is called Cavalieri's principle?</p>",
        "id": 244490029,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625088210
    },
    {
        "content": "<p>It's crucial when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œï</mi><mo>=</mo><mrow><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">d</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\phi = \\mathrm{id}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">œï</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">id</span></span></span></span></span> since it proves that, in Lebesgue theory, integrating functions is equivalent to measuring sets (if you already have the Riemann integral).</p>",
        "id": 244490146,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625088264
    },
    {
        "content": "<p>Random google search to support my claim returns <a href=\"https://math.stackexchange.com/a/158989/207864\">https://math.stackexchange.com/a/158989/207864</a></p>",
        "id": 244490431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625088382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kyt√∂l√§</span> I am far from an expert here. Luke, Johannes, and I  were fixated on the CLT, and we just did what we had to do; we followed Billingsley pretty closely. It would be great to do the portmanteau theorem in full generality. Your definition looks very nice to me.</p>",
        "id": 244491176,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1625088792
    },
    {
        "content": "<p>Btw, I think what I have is more or less the full generality that works in metric/metrizable spaces (and in topological spaces, but that statement is not very strong anyway). I guess in metric spaces one could still add the extra condition that it is enough to use Lipschitz test functions (this is basically done inside the proofs, but not in the current version of the statements).</p>\n<p>For the special case of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>, there are the two additional very useful characterizations that I didn't touch yet:</p>\n<ul>\n<li>by cumulative distribution functions (cdf)</li>\n<li>by characteristic functions.</li>\n</ul>\n<p>The cdf version should be a minor addition. The characteristic function version requires more: both a tightness argument (at least Helly's selection theorem) and some Fourier analysis of measures (say L√©vy's inversion theorem). I don't know what is the status of Fourier analysis and complex analysis for the latter. For the tightness, my own preferred route would be a long winded one (not the shortcut using Helly's theorem): first have Riesz-Markov-Kakutani representation theorem, then Prokhorov's theorem built on it (much more general than Helly's theorem). By my estimate that is a huge amount of work, though... (Unless someone tells me we have Fourier analysis of measures and Riesz-Markov-Kakutani...)</p>\n<p>(Btw, I have kind of also been following Billingsley indirectly, since that was a major source I used for a course I've given since 7 years or so... One of the editions of Billingsley has a proof of Prokhorov's theorem close in spirit to my preferred route, but in other editions he resorts to a common trick that is not my favorite...)</p>",
        "id": 244492832,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625089721
    },
    {
        "content": "<p>Indeed, there is so much to do! :)</p>\n<p>I am just glancing over your code to see what might be good starting points for getting these results into mathlib.  Your definition <code>cont_bdd_Rval</code> -- can you use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bounded_continuous_function\">docs#bounded_continuous_function</a> instead?</p>",
        "id": 244494383,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625090460
    },
    {
        "content": "<p>Then we already have the normed-space instance, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bounded_continuous_function.normed_space\">docs#bounded_continuous_function.normed_space</a>, and can get the dual, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_space.dual\">docs#normed_space.dual</a>, mentioned in your TODO -- I don't know if that helps with anything else</p>",
        "id": 244494607,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625090582
    },
    {
        "content": "<p>Thanks, this is great info! (Sort of to the direction of Riesz-Markov-Kakutani, exactly as I wanted...)</p>\n<p>I'll try it out, but not today unfortunately...</p>",
        "id": 244494671,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625090626
    },
    {
        "content": "<p>It would be wonderful to have Riesz-Markov-Kakutani in mathlib!  If I remember correctly, it might be done in Mizar.</p>",
        "id": 244494830,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625090718
    },
    {
        "content": "<p>Yeah, it would... I will not take it on immediately, though <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>. (Who knows, one day...)</p>",
        "id": 244494896,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625090761
    },
    {
        "content": "<p>Do you have a definition of signed measure?  Or do you have a workaround allowing you to consider only \"standard\" (i.e., nonnegative) measures?</p>",
        "id": 244494970,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625090796
    },
    {
        "content": "<p>Ah, I did not think about the details of the implemetation of that at all... Without thinking I would imagine that one starts by proving that positive functionals correspond to (ordinary) measures. The dual of the normed space would then require building from that. But I haven't actually thought about how I would do it...</p>",
        "id": 244495186,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625090931
    },
    {
        "content": "<p>Ah, here is the Mizar result, but it's only for the dual of continuous functions on intervals in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>.</p>",
        "id": 244495335,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625091018
    },
    {
        "content": "<p><a href=\"https://www.fm.mizar.org/2017-25/pdf25-3/dualsp05.pdf\">https://www.fm.mizar.org/2017-25/pdf25-3/dualsp05.pdf</a></p>",
        "id": 244495340,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625091021
    },
    {
        "content": "<p>Actually for Prokhorov's theorem one only essentially needs the positive functionals anyway, not the dual of the normed space version of Riesz-Markov-Kakutani. (It is btw enough to do in compact spaces, one does not need locally compact to work towards Prokhorov in full generality.)</p>",
        "id": 244495381,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625091060
    },
    {
        "content": "<p>Actually, while we are speculating wildly, isn't it true that Riesz-Markov-Kakutani is a main ingredient in constructing Wiener measure?</p>",
        "id": 244495468,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625091121
    },
    {
        "content": "<p>We have some of the other preliminaries, for example Stone-Weierstrass.</p>",
        "id": 244495526,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625091134
    },
    {
        "content": "<p>I guess there are a few different constructions of the Wiener measure...</p>\n<p>One way is via Kolmogorov's extension theorem (I'd have to think what else it eats, might be the least heavy in any case). Another is to prove that the scaling limit of random walks exists, and this requires a Prokhorov in a good generality (so in particular I'd say Riesz-Markov-Kakutani).</p>",
        "id": 244495664,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625091229
    },
    {
        "content": "<p>Good point, Prokhorov also needs Stone-Weierstrass and a version of Alaoglu in addition to Riesz-Markov-Kakutani in the approach I had in mind...</p>",
        "id": 244495745,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625091286
    },
    {
        "content": "<p>Ok, fun to speculate wildly after just having only <em>defined</em> weak convergence. <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span>  Down this route is a constructive field theory approach to Yang-Mills, I guess <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span>.</p>\n<p>Thanks for the really helpful comments again! I'll work on something some time, almost surely...</p>",
        "id": 244496011,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625091462
    },
    {
        "content": "<p>I hope you will PR this material!  :)</p>",
        "id": 244496097,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625091512
    },
    {
        "content": "<p>It's probably bed-time for you but I was just going to say that I now understand what you were saying about choosing <code>ennreal</code> rather than <code>real</code>.</p>",
        "id": 244496184,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625091588
    },
    {
        "content": "<p>Is the point that, eg, in this docstring</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The topology of weak convergence on `borel_proba Œ±` is defined as the induced</span>\n<span class=\"sd\">topology of the mapping `(borel_proba Œ±) ‚Üí ((cont_bdd_ennval Œ±) ‚Üí ennreal)`</span>\n</code></pre></div>\n<p>you need to consider, not the \"usual\" dual of bounded continuous functions, but a kind of \"semigroup\" dual with only positive-valued functions.</p>",
        "id": 244496276,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625091649
    },
    {
        "content": "<p>Yes, I \"need\" (or rather chose, for good or bad) to do so, because I felt <code>lintegral</code> was simpler than Bochner integral... I'm happy to hear whether that was a good idea <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>.</p>",
        "id": 244496408,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625091760
    },
    {
        "content": "<p>Actually, it seems like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map\">docs#continuous_linear_map</a> is defined for monoid targets, with semirings of scalars.</p>",
        "id": 244496412,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625091767
    },
    {
        "content": "<p>So you could define the dual to consist of the <code>continuous_linear_map</code> from <code>bounded_continuous_function</code> to <code>ennreal</code>, with <code>ennreal</code> scalars, if I understand correctly?</p>",
        "id": 244496569,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625091891
    },
    {
        "content": "<p>Ok, thanks for yet another very interesting observation!. But now I'll have to go to sleep <span aria-label=\"in bed\" class=\"emoji emoji-1f6cc\" role=\"img\" title=\"in bed\">:in_bed:</span>. (I already slept too little yesterday after trying to get the existing sorry-free version in github <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span>)</p>",
        "id": 244496775,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625092049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kyt√∂l√§</span> <a href=\"#narrow/stream/113489-new-members/topic/Portmanteau.20theorem/near/244496775\">said</a>:</p>\n<blockquote>\n<p>Ok, thanks for yet another very interesting observation!. But now I'll have to go to sleep <span aria-label=\"in bed\" class=\"emoji emoji-1f6cc\" role=\"img\" title=\"in bed\">:in_bed:</span>. (I already slept too little yesterday after trying to get the existing sorry-free version in github <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span>)</p>\n</blockquote>\n<p>I would not be surprised if most of us have had similar experiences! (I can certainly remember a few nights where I looked up from VS Code and it was suddenly 3-4 hours later than I thought it was...)</p>",
        "id": 244501889,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1625095886
    },
    {
        "content": "<p>This looks great! It would be really nice to have this in mathlib.</p>\n<p>Here are some comments about the code snippet in OP.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.bochner_integration</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"c1\">-- I would generalize `bdd_ennval` to something like this</span>\n<span class=\"kd\">def</span> <span class=\"n\">bounded_above</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_top</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">‚ä§</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">M</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> I would define the subtype of probability measure in general. (maybe this def should</span>\n<span class=\"cm\">be called `probability_measure` and the class should be called `is_probability_measure`)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">probability_measures</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">Œ±</span> <span class=\"bp\">//</span> <span class=\"n\">probability_measure</span> <span class=\"n\">Œº</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> the usual way to talk about the borel œÉ-algebra is as follows. But as long as you don't need it,</span>\n<span class=\"cm\">don't add the `borel_space` assumption yet. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measurable_set</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.measurable_set</span>\n</code></pre></div>",
        "id": 244535251,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1625129191
    },
    {
        "content": "<p>These suggestions look like clear improvements, thanks Floris!</p>",
        "id": 244541349,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625132673
    },
    {
        "content": "<p>Actually, to do my first exercise of PRing, I could just try to fix the docstring of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_space.comap\">docs#measurable_space.comap</a>. It has the following tiny misprint:</p>\n<blockquote>\n<p>The reverse image of a <del>measure space</del> <em>measurable space</em> under a function. comap f m contains the sets s : set Œ± such that s is the f-preimage of a measurable set in Œ≤.</p>\n</blockquote>\n<p>I'd also soon try to find some first microscopic parts of the portmanteau project and do the suggested improvements and start PRing them.</p>\n<p>Could I get the invite to push to non-master branches of mathlib (or whatever is the appropriate to do this kind of stuff)? Thanks!</p>",
        "id": 244542190,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625133267
    },
    {
        "content": "<p>What is your github userid?</p>",
        "id": 244542439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625133447
    },
    {
        "content": "<p>Oh sorry <span aria-label=\"flushed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"flushed\">:flushed:</span>. I <em>think</em> it is simply <a href=\"https://github.com/kkytola\">kkytola</a>, but I actually could not find it in my github profile.</p>\n<p>Sorry, I'm very new to computer stuff. This is one of the reasons I wanted to start with the first PRs being sufficiently simple... I would not want to break mathlib. <span aria-label=\"speechless\" class=\"emoji emoji-1f636\" role=\"img\" title=\"speechless\">:speechless:</span> <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>\n<p>Thanks in advance!</p>",
        "id": 244551937,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625139143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kyt√∂l√§</span> <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 244552393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625139411
    },
    {
        "content": "<p>Thanks a lot Johan!</p>\n<p>(For the record, I've never in my life done a PR, but I hope I'll learn that by this weekend... I'll look into the learning resources first.)</p>",
        "id": 244552546,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625139496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kyt√∂l√§</span> did you see the video tutorial on making mathlib PRs?</p>",
        "id": 244552752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625139620
    },
    {
        "content": "<p>This <a href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A\">video tutorial</a>? I probably saw it on my binge watch streak of Lean YouTube videos earlier, but I will watch it in slow motion again to learn the moves.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Bnc8w9lxe8A\" href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A\"><img src=\"https://uploads.zulipusercontent.net/ae6a5158c3c3f73f7cadb724ecaee86e98129753/68747470733a2f2f692e7974696d672e636f6d2f76692f426e633877396c786538412f64656661756c742e6a7067\"></a></div>",
        "id": 244670903,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1625212996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kyt√∂l√§</span> exactly, that's the one I had in mind</p>",
        "id": 244671035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625213122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> this video might also be useful for you</p>",
        "id": 244671066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625213155
    },
    {
        "content": "<p>It's about making a PR to mathlib</p>",
        "id": 244671110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625213166
    },
    {
        "content": "<p>Sorry for the long silence... <span aria-label=\"speechless\" class=\"emoji emoji-1f636\" role=\"img\" title=\"speechless\">:speechless:</span> First the progress update: with the help of Heather and Bryan, and after having watched the masterpiece thriller <em>Making a pull request to mathlib</em> by Scott, I managed to make my first PR to a docstring. Big thanks to all of you!</p>\n<p>My goal was to continue with PR's, by splitting my original code in infinitesimal pieces and trying to rewrite the pieces to mathlib-quality one by one. Predictably, this was harder than I predicted <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> (in addition to the equally predictable circumstances of having less time than predicted).</p>",
        "id": 245753712,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626125864
    },
    {
        "content": "<p>I originally thought a cleaned-up version of <code>lintegral_eq_lintegral_ccdf</code> might have been a good first piece of code to PR. But I have so far both failed to simplify my proof in any meaningful way (despite the fact that the lemmas pointed out by Heather seem obviously relevant) and I have even failed to satisfactorily <em>state</em> the generalization I wanted (the one known as either the \"layer cake representation\" or \"Cavalieri's principle\")... <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span></p>\n<p>I would therefore like try to start from something even simpler.</p>\n<p>I of course plan to return to discussing layer cakes in due time...</p>",
        "id": 245753844,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626125943
    },
    {
        "content": "<p>So what I believe I was partially successful with is trying to take into account the comments (by Floris in particular) that I got regarding the definition of weak convergence. The updated code of the definition piece is below. Does it make sense to PR this piece, and address any further issues with it in the PR process? The definition of the topology would seem like a natural starting point.</p>\n<p>The main reason I think it is not a hopeless attempt is that I have the sorry-free (but ugly) proof of Portmanteau theorem from my original definition, which is essentially equivalent. And in fact this definition piece already contains the proof of equivalence with the most obvious one of the conditions.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.bochner_integration</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">bounded_continuous_function</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">bounded_above</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_top</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">‚ä§</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">M</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">portmanteau</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">test_functions_for_weak_convergence</span>\n\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"sd\">/-- Continuous bounded functions on a topological space `Œ±` with values</span>\n<span class=\"sd\">in `ennreal` are used as \"test functions\" in the definition of the topology of</span>\n<span class=\"sd\">the weak convergence of probability measures. They are defined as a subtype</span>\n<span class=\"sd\">of `Œ± ‚Üí ennreal`, so that the type of (positive) functionals is just</span>\n<span class=\"sd\">`(cont_bdd_ennval Œ±) ‚Üí ennreal`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">cont_bdd_ennval</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n  <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ennreal</span> <span class=\"bp\">//</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"bp\">‚àß</span> <span class=\"n\">bounded_above</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">cont_bdd_ennval.coe</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">cont_bdd_ennval</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">subtype.val</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_of_cont_bdd_ennval</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cont_bdd_ennval</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f.prop.1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">borel_measurable_of_cont_bdd_ennval</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cont_bdd_ennval</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span>\n      <span class=\"o\">:=</span> <span class=\"n\">continuous.measurable</span> <span class=\"o\">(</span><span class=\"n\">continuous_of_cont_bdd_ennval</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">val_eq_coe_cont_bdd_ennval</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cont_bdd_ennval</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f.val</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bounded_continuous_function_to_ennreal</span>\n  <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">continuous_map</span> <span class=\"n\">Œ±</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">bounded_above'</span> <span class=\"o\">:</span> <span class=\"n\">bounded_above</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">functional_on_bounded_continuous_function_to_ennreal</span>\n  <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n    <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bounded_continuous_function_to_ennreal</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">bounded_continuous_function_to_ennreal.has_coe_to_fun</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">bounded_continuous_function_to_ennreal</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ennreal</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span> <span class=\"o\">,</span> <span class=\"n\">f.to_fun</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">functional_on_bounded_continuous_function_to_ennreal.has_coe_to_fun</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">functional_on_bounded_continuous_function_to_ennreal</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">bounded_continuous_function_to_ennreal</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ennreal</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">œÜ</span> <span class=\"o\">,</span> <span class=\"n\">œÜ</span><span class=\"o\">‚ü©</span>\n\n<span class=\"sd\">/-- As a first step towards the definition of the topology of the weak convergence</span>\n<span class=\"sd\">of probability measures, the space of functionals `(cont_bdd_ennval Œ±) ‚Üí ennreal`</span>\n<span class=\"sd\">is equipped with the product topology (the topology of \"testfunctionwise\" convergence,</span>\n<span class=\"sd\">i.e., of pointwise convergence of the functionals defined on the space of continuous</span>\n<span class=\"sd\">bounded test functions). -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">functional_on_bounded_continuous_function_to_ennreal</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">test_functions_for_weak_convergence</span>\n\n\n\n<span class=\"kn\">section</span> <span class=\"n\">topology_of_weak_convergence</span>\n\n\n<span class=\"sd\">/-- Borel probability measures on a topological space `Œ±` are defined as a subtype</span>\n<span class=\"sd\">of measures. This subtype `borel_proba Œ±` is equipped with the topology of weak</span>\n<span class=\"sd\">convergence. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">probability_measures</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">Œ±</span> <span class=\"bp\">//</span> <span class=\"n\">probability_measure</span> <span class=\"n\">Œº</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">probability_measures.coe</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">probability_measures</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">measure_theory.measure</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">subtype.val</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">val_eq_coe_probability_measures</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ŒΩ</span> <span class=\"o\">:</span> <span class=\"n\">probability_measures</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ŒΩ.val</span> <span class=\"bp\">=</span> <span class=\"n\">ŒΩ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">probability_measures</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cont_bdd_ennval</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span> <span class=\"n\">lintegral</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure_theory.measure</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n\n<span class=\"sd\">/-- The topology of weak convergence on `borel_proba Œ±` is defined as the induced</span>\n<span class=\"sd\">topology of the mapping `(borel_proba Œ±) ‚Üí ((cont_bdd_ennval Œ±) ‚Üí ennreal)` to</span>\n<span class=\"sd\">functionals defined by integration of a test functio against to the measure. In</span>\n<span class=\"sd\">other contexts this could be called the weak-* topology. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">probability_measures</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"n\">topological_space.induced</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">probability_measures</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"sd\">/-- Integration of test functions against borel probability measures depends</span>\n<span class=\"sd\">continuously on the measure. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">integrate_cont_bdd_ennval_cont</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"n\">Œ±</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_induced_dom</span>\n\n<span class=\"c1\">-- Remark: It felt convenient to isolate the following fact. Does it exist already?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">conv_seq_induced</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">top_Œ≥</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">)))</span>\n      <span class=\"bp\">‚Üí</span> <span class=\"n\">tendsto</span> <span class=\"n\">x</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nhds</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">topological_space.induced</span> <span class=\"n\">f</span> <span class=\"n\">top_Œ≥</span><span class=\"o\">)</span> <span class=\"n\">x‚ÇÄ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_f_lim</span> <span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhds.mpr</span> <span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">U</span> <span class=\"n\">open_U</span> <span class=\"n\">U_ni_x‚ÇÄ</span> <span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">is_open_induced_iff</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≥</span> <span class=\"n\">top_Œ≥</span> <span class=\"n\">U</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">open_U</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span> <span class=\"n\">V</span> <span class=\"o\">,</span> <span class=\"n\">open_V</span> <span class=\"o\">,</span> <span class=\"n\">preim_V_eq_U</span> <span class=\"o\">‚ü©</span> <span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">preim_V_eq_U</span> <span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhds.mp</span> <span class=\"n\">h_f_lim</span> <span class=\"n\">V</span> <span class=\"n\">open_V</span> <span class=\"n\">U_ni_x‚ÇÄ</span> <span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- The usual definition of weak convergence of probability measures is given in</span>\n<span class=\"sd\">terms of sequences of probability measures: it is the requirement that the integrals</span>\n<span class=\"sd\">of all continuous bounded functions against members of the sequence converge.</span>\n<span class=\"sd\">This characterization is shown in `weak_conv_seq_iff'` in the case when the</span>\n<span class=\"sd\">functions are `ennreal`-valued and the integral is `lintegral`. The most common</span>\n<span class=\"sd\">formulation with `‚Ñù`-valued functions and Bochner integrals is `weak_conv_seq_iff`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">weak_conv_seq_iff'</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œºseq</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">probability_measures</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">probability_measures</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">tendsto</span> <span class=\"n\">Œºseq</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">Œº</span><span class=\"o\">)</span>\n      <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cont_bdd_ennval</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n        <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"o\">(</span><span class=\"n\">Œºseq</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">probability_measures</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">probability_measures</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">weak_conv</span> <span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">tendsto.comp</span> <span class=\"o\">(</span><span class=\"n\">continuous.tendsto</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integrate_cont_bdd_ennval_cont</span> <span class=\"n\">Œ±</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"n\">weak_conv</span> <span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">tendsto_pi.mp</span> <span class=\"n\">key</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h_lim_forall</span> <span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_lim</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"o\">(</span><span class=\"n\">Œºseq</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">integrate_cont_bdd_ennval</span> <span class=\"n\">Œº</span><span class=\"o\">))</span> <span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">tendsto_pi.mpr</span> <span class=\"n\">h_lim_forall</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">conv_seq_induced</span> <span class=\"n\">_</span> <span class=\"n\">Œºseq</span> <span class=\"n\">Œº</span> <span class=\"n\">h_lim</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">topology_of_weak_convergence</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">portmanteau</span>\n</code></pre></div>",
        "id": 245753877,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626125966
    },
    {
        "content": "<p>Actually I would now <em>really</em> want to define both <code>probability_measures</code> (as suggested by Floris and done above) and <code>finite_measures</code>, and a coercion from the former to the latter, and equip finite Borel measures on topological spaces with the topology of weak convergence. Some parts of the weak convergence business make good sense for finite measures (and this is occasionally worthwhile, especially in view of Riesz-Markov-Kakutani). With the coercion, probability measures would \"inherit\" a topology from finite measures (I'd even consider defining them as a subtype).</p>\n<p>For now, however, I had some typeclass difficulties showing that this topology is the same as the direct definition (although <code>tidy</code> at least claimed to prove this), so I thought I'd postpone this and go more directly along the proposal of Floris.</p>",
        "id": 245755215,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626126833
    },
    {
        "content": "<p>An alternative even simpler first code PR could be the following. The file <a href=\"https://github.com/kkytola/lean_portmanteau/blob/main/portmanteau_topological_lemmas.lean\">portmanteau_topological_lemmas.lean</a> was very short (6 tiny lemmas, less than 100 lines of actual code) and self-contained. The main question about it is probably whether something sufficiently close to these existed in already (I tried to look for versions in mathlib, of course, but also occasionally ended up including some reformulations that felt conventient for the portmanteau project). And then there will be questions about optimal implementation, golfed proofs, naming conventions, ... but perhaps they could be addressed in the PR?</p>\n<p>So if someone with experience can tell whether (some nonempty subset of) these are PR'able (expecting improvements in the process), I could also make them my first code PR. I am almost sure some version of these lemmas would have to be used in portmanteau anyway (and likely elsewhere as well), so I don't think they would be completely useless.</p>",
        "id": 245761797,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626131597
    },
    {
        "content": "<p>I'll just copy the 6 lemmas here, perhaps that's better practice.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">measurable_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">borel_space</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">portmanteau</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">portmanteau_topological_lemmas</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">meas_eq_various_of_null_bdry</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">measure_theory.measure</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">borel</span> <span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œº</span><span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œº</span><span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hEnullbdry</span> <span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ineq_E_le_Ecl</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">measure_mono</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">borel</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"n\">Œº</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">subset_closure</span> <span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ineq_Eint_le_E</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">measure_mono</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">borel</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">interior_subset</span> <span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">surpr</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">measure_union_le</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">borel</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">closure_eq_interior_union_frontier</span> <span class=\"n\">at</span> <span class=\"n\">surpr</span> <span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hEnullbdry</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">surpr</span> <span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">mono</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">measure_mono</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">borel</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">interior_subset_closure</span> <span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">mono</span> <span class=\"n\">surpr</span> <span class=\"o\">,</span>\n  <span class=\"n\">split</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">key</span> <span class=\"o\">,</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">key</span> <span class=\"o\">,</span>\n      <span class=\"n\">assumption</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">open_imp_borel</span> <span class=\"o\">{</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">top_Œ≥</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≥</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">G</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">borel</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">measurable_set'</span> <span class=\"n\">G</span>\n    <span class=\"o\">:=</span> <span class=\"n\">measurable_set_generate_from</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">closed_imp_borel</span> <span class=\"o\">{</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">top_Œ≥</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≥</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">F</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">borel</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">measurable_set'</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">·∂ú</span> <span class=\"k\">with</span> <span class=\"n\">hG</span> <span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">FeqGc</span> <span class=\"o\">:=</span> <span class=\"n\">compl_compl</span> <span class=\"n\">F</span> <span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">hG</span> <span class=\"n\">at</span> <span class=\"n\">FeqGc</span> <span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hFclosed</span> <span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Gmble</span> <span class=\"o\">:=</span> <span class=\"n\">open_imp_borel</span> <span class=\"o\">(</span><span class=\"n\">is_open_compl_iff.mpr</span> <span class=\"n\">hFclosed</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">FeqGc</span> <span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">borel</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">measurable_set_compl</span> <span class=\"n\">G</span> <span class=\"n\">Gmble</span> <span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">compl_frontier</span> <span class=\"o\">{</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">·∂ú</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">‚à™</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">·∂ú</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">closure_eq_compl_interior_compl</span> <span class=\"n\">Œ≥</span> <span class=\"n\">_</span> <span class=\"n\">A</span><span class=\"bp\">·∂ú</span> <span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">compl_compl</span> <span class=\"n\">at</span> <span class=\"n\">fact</span> <span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">frontier</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">·∂ú</span> <span class=\"bp\">‚à©</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">·∂ú</span><span class=\"o\">))</span><span class=\"bp\">·∂ú</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">compl_inter</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">·∂ú</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">·∂ú</span><span class=\"o\">))</span><span class=\"bp\">·∂ú</span> <span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">compl_compl</span> <span class=\"o\">,}</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">frontier_compl</span> <span class=\"n\">A</span> <span class=\"o\">,</span> <span class=\"bp\">‚Üê</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">diff_eq</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">·∂ú</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">·∂ú</span><span class=\"o\">))</span> <span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interior_preimage</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span><span class=\"bp\">‚Åª¬π'</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">‚Åª¬π'</span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">interior_maximal</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">Gint_ss_G</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">interior_subset</span> <span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">preimage_mono</span> <span class=\"n\">Gint_ss_G</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">interior_open</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_interior</span> <span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">continuous_def.mp</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">interior_open</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">frontier_preimage</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">frontier</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">‚Åª¬π'</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">f</span><span class=\"bp\">‚Åª¬π'</span><span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">compl_subset_compl</span> <span class=\"n\">Œ≤</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">‚Åª¬π'</span><span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">‚Åª¬π'</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">compl_frontier</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"bp\">‚Üê</span><span class=\"n\">preimage_compl</span> <span class=\"o\">,</span> <span class=\"n\">compl_frontier</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">preimage_union</span> <span class=\"o\">]</span> <span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">interior_preimage</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">two</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">interior_preimage</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">·∂ú</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">union_subset_union</span> <span class=\"n\">one</span> <span class=\"n\">two</span> <span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n\n<span class=\"kd\">end</span> <span class=\"n\">portmanteau_topological_lemmas</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">portmanteau</span>\n</code></pre></div>",
        "id": 245762410,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626132114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kyt√∂l√§</span> I think that it's a good exercise to PR the subset of the lemmas that isn't in mathlib yet. Unfortunately I'm not so familiar with this part of mathlib, so I can't see at a glance what that subset would be. The <code>open_imp_borel</code> and <code>closed_imp_borel</code> look like they definitely should already exist in mathlib.<br>\nThe <code>frontier_preimage</code> seems to be missing. On the other hand, we already have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- src/topology/basic.lean (lines 1110-1112)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">preimage_interior_subset_interior_preimage</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">‚Åª¬π'</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">interior_maximal</span> <span class=\"o\">(</span><span class=\"n\">preimage_mono</span> <span class=\"n\">interior_subset</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_open_interior.preimage</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 245779298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626151818
    },
    {
        "content": "<p>Thank you Johan!</p>\n<p>Indeed <code>open_imp_borel</code> and <code>closed_imp_borel</code> should probably be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open.measurable_set\">docs#is_open.measurable_set</a>  and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_closed.measurable_set\">docs#is_closed.measurable_set</a> together with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/borel_space.opens_measurable\">docs#borel_space.opens_measurable</a>. When writing this a few months ago, I strongly suspected they exist, but I guess I wasn't good enough with the typeclasses yet to use them. With Floris' explanation of the proper way to use the typeclass <a href=\"https://leanprover-community.github.io/mathlib_docs/find/borel_space\">docs#borel_space</a> I think I will have more success, and these two lemmas I used are completely redundant.</p>\n<p>Thanks for pointing out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/preimage_interior_subset_interior_preimage\">docs#preimage_interior_subset_interior_preimage</a> --- it is the same as I wanted (and with a golfed proof). Now <code>library_search</code> finds it, but I think a few months ago it didn't, so maybe this is new? Anyways, makes yet another lemma above redundant!</p>",
        "id": 245785333,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626159347
    },
    {
        "content": "<p>That leaves possibly 3 lemmas above. The last two, <code>compl_frontier</code> and <code>frontier_preimage</code>, might be of general interest, so if there is not much harm PR'ing (and being ready to either improve or give up based on the PR review), I think I will do that.</p>\n<p>The lemma  <code>meas_eq_various_of_null_bdry</code> is probably more specific to portmanteau, but I maintain that it will be needed. I will wait a bit with it, and change the statement to use the <code>borel_space</code> typeclass in the way Floris explained.</p>",
        "id": 245785400,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626159381
    },
    {
        "content": "<p>Yes, I would PR those two lemmas. The <code>meas_eq_various_of_null_bdry</code> is something that I can't really comment about. I don't know enough measure theory <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 245785576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626159589
    },
    {
        "content": "<p>Meanwhile, adding the definition of weak convergence might be a bigger thing, so I will still wait for comments to the <a href=\"#narrow/stream/113489-new-members/topic/Portmanteau.20theorem/near/245753877\">proposal above</a>.</p>\n<p>At some point, if I get no drastic comments here, I will probably PR it --- and again be ready to either improve or give up based on the PR review.</p>\n<p>But for now: comments about the proposed definition are very welcome!</p>",
        "id": 245785722,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626159694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kyt√∂l√§</span> I would just make the PR. I think you might get more comments/feedback there. It's good to polish stuff before you PR it, but it doesn't have to be perfect (especially for the first few PRs). There's a review process, so make use of it!</p>",
        "id": 245786476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626160351
    },
    {
        "content": "<p>Give me ten minutes please.</p>",
        "id": 245786500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626160373
    },
    {
        "content": "<p>In the mean time Kalle could read the style guide.</p>",
        "id": 245786522,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626160401
    },
    {
        "content": "<p>Thanks! I was anyway going to do the PR no sooner than tonight, so even more than 10 minutes is fine <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. But I will read the style guide before PR'ing any code.</p>",
        "id": 245787045,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626160879
    },
    {
        "content": "<p>Actually ten minutes were not enough and I need to run, so I'll come back later. In the mean time you can think about why <code>borel</code> appears in <code>meas_eq_various_of_null_bdry</code>. What if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Œº</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Œº</span></span></span></span> was any measure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Œ±</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">Œ±</span></span></span></span>?</p>",
        "id": 245787259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626161053
    },
    {
        "content": "<p>Borel was probably an overkill assumption for the measurability of the interior, the boundary and the closure. The needed monotonicity probably holds without measurability (for the outer measure), so I guess this assumption is logically unnecessary (although in math I would only state it when I have enough measurability).</p>\n<p>I will clean up this and others to the extent I can before PRs.</p>",
        "id": 245787450,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626161244
    },
    {
        "content": "<p>I'm back. Let's go through your lemmas. The first step is to remove all those spaces before commas (do they come from your native language? I know French people, including me, often put spaces before question marks and exclamation marks because that's the rule in French). </p>\n<p>The first lemma was <code>meas_eq_various_of_null_bdry</code>.  I already explained this morning that the <code>borel</code> word is useless, the lemma holds for any measure on a topological space. Let's first do a naive greedy cleanup pass. You get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">meas_eq_various_of_null_bdry'</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">hEnullbdry</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œº</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œº</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">ineq_E_le_Ecl</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span> <span class=\"n\">E</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">measure_mono</span> <span class=\"n\">subset_closure</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ineq_Eint_le_E</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œº</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">measure_mono</span> <span class=\"n\">interior_subset</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">surpr</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span> <span class=\"bp\">‚à™</span> <span class=\"n\">frontier</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">measure_union_le</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">closure_eq_interior_union_frontier</span><span class=\"o\">,</span> <span class=\"n\">hEnullbdry</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">surpr</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">ineq_Eint_le_E.trans</span> <span class=\"n\">ineq_E_le_Ecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"n\">surpr</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">key</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span> <span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>First note how I \"moved <code>hEnullbdry</code> left of colon\". You get the exact same lemma and the proof is one line shorter without loosing any readability. Next note how I announce the inequalities in <code>have</code>, both increasing readability and remove any need for expliciting implicit arguments. By the way, <code>subset_closure</code> and <code>interior_subset</code> should have an explicit set argument. They are currently breaking our rules. If you're looking for a pull-request exercise you could try to fix those and see whether it uglyfies too many existing proofs. The last trick is probably using the \"dot notation\" for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_le.le.trans\">docs#has_le.le.trans</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_le.le.antisymm\">docs#has_le.le.antisymm</a> (please ask question if you don't know this trick).</p>",
        "id": 245870297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626202355
    },
    {
        "content": "<p>Now let's think about our readers. We start with three obvious inequalities with rather readable proofs. And then comes a statement labelled <code>key</code> and <em>that</em> one is obfuscated. That's mean. Let's try again.</p>",
        "id": 245870456,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626202432
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">meas_eq_various_of_null_bdry''</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">hEnullbdry</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œº</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œº</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">E_le_Ecl</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span> <span class=\"n\">E</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">measure_mono</span> <span class=\"n\">subset_closure</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">Eint_le_E</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œº</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">measure_mono</span> <span class=\"n\">interior_subset</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n  <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span> <span class=\"bp\">‚à™</span> <span class=\"n\">frontier</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">closure_eq_interior_union_frontier</span>\n            <span class=\"bp\">...</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measure_union_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n            <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hEnullbdry</span><span class=\"o\">],</span>\n<span class=\"o\">‚ü®</span><span class=\"n\">Eint_le_E.antisymm</span> <span class=\"o\">(</span><span class=\"n\">E_le_Ecl.trans</span> <span class=\"n\">key</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">key.trans</span> <span class=\"n\">Eint_le_E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"n\">E_le_Ecl</span><span class=\"o\">‚ü©</span>\n</code></pre></div>\n<p>Now the key step is a nice readable computation that is indeed the heart of this proof. After those three <code>have</code> you would expect a human reader to be convinced. In Lean there are now three possibility. The really good one is automation should take over. Unfortunately this doesn't happen here because <code>linarith</code> doesn't work with <code>ennreal</code> (ping <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> just in case he is currently bored). The really bad one would be writing 50 lines because for some reason that obvious stuff could be Lean hard. The middle case, displayed above, is going to obfuscation mode, simply compressing the proof because it doesn't deserve space and this clearly tells the reader nothing interesting happen here.</p>",
        "id": 245870980,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626202666
    },
    {
        "content": "<p>A general remark. When I saw this lemma, my first reaction was: \"we don't have lemmas whose conclusion is a conjunction, we split them into two lemmas, one for each conclusion\". But in this case I think it's fair to keep the conjunction. The proof really gives both at the same time, I don't really see an intermediate lemma to split off, and really you want to say \"those three numbers are equal\" and we don't really have a nice way to say that in mathlib.</p>",
        "id": 245871205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626202791
    },
    {
        "content": "<p>Let's golf the next lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">compl_frontier</span> <span class=\"o\">{</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">·∂ú</span> <span class=\"bp\">=</span> <span class=\"n\">interior</span> <span class=\"n\">A</span> <span class=\"bp\">‚à™</span> <span class=\"n\">interior</span> <span class=\"n\">A</span><span class=\"bp\">·∂ú</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Maybe put that in a separate lemma?</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">frontier</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">·∂ú</span> <span class=\"bp\">‚à©</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">·∂ú</span><span class=\"o\">))</span><span class=\"bp\">·∂ú</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">compl_inter</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">frontier_compl</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">closure_compl</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245871485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626202891
    },
    {
        "content": "<p>I know parentheses are cheap, but your statement had way too many of them. It's not that hard to get used to the fact that function application has a really high priority. You could add parentheses around the final <code>A·∂ú</code> since the fact that complement has higher priority is much more specialized knowledge, but in that case the wrong interpretation of the formula really makes no sense at all, so there is little risk of confusion.</p>",
        "id": 245871796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626203017
    },
    {
        "content": "<p>The first proof trick is you missed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure_compl\">docs#closure_compl</a>. The second one is using <code>simp</code> to get rid of complement of complement (if that is not a simp lemma then nothing is). And the last trick is <code>refl</code> at the end. This is a bit debatable since it relies on knowing which definition of interior we choose in mathlib, but I think that's a pretty standard choice.</p>",
        "id": 245872321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626203230
    },
    {
        "content": "<p>For the last lemma, <code>frontier_preimage</code>, I would say your proof on paper is too complicated, but that's debatable. I would add first to mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.continuous.closure_preimage_subset</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≥</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">f</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"o\">(</span><span class=\"n\">is_closed_closure.preimage</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">closure_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">mono</span><span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">subset_closure</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>since it seems to be missing (I included <code>_root_</code> so that you can copy-paste it in your file in the middle of your portmanteau namesapce, but that wouldn't be needed in mathlib). Note how <code>f</code> is implicit since it can be inferred from <code>hf</code>, and note how this is in the <code>continuous</code> namespace to allow dot notation magic as in my proof of your lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.continuous.frontier_preimage_subset</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≥</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frontier</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">f</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">diff_subset_diff</span> <span class=\"o\">(</span><span class=\"n\">hf.closure_preimage_subset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">preimage_interior_subset_interior_preimage</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 245872745,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626203407
    },
    {
        "content": "<p>Note also I think the set argument in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/preimage_interior_subset_interior_preimage\">docs#preimage_interior_subset_interior_preimage</a> should be explicit and that lemma should be in the <code>continuous</code> namespace.</p>",
        "id": 245872875,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626203483
    },
    {
        "content": "<p>I would call it <code>continuous.preimage_interior_subset</code> to avoid the super long name. This is enough for autocompletion to kick off when you're looking for it.</p>",
        "id": 245873002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626203535
    },
    {
        "content": "<p>That's all I have to say, I hope you'll pick up some tricks!</p>",
        "id": 245873059,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626203563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Portmanteau.20theorem/near/245871205\">said</a>:</p>\n<blockquote>\n<p>A general remark. When I saw this lemma, my first reaction was: \"we don't have lemmas whose conclusion is a conjunction, we split them into two lemmas, one for each conclusion\". But in this case I think it's fair to keep the conjunction. The proof really gives both at the same time, I don't really see an intermediate lemma to split off, and really you want to say \"those three numbers are equal\" and we don't really have a nice way to say that in mathlib.</p>\n</blockquote>\n<p>When the proof proves both parts at the same time, you should first prove the conjunction as a lemma and then immediately split off the conjuncts as corollaries. In this case the lemma could instead be <code>key</code> though, your choice</p>",
        "id": 245896515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626214461
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> for thorough explanations!</p>\n<p>Many of the principles above are very clear. I hopefully pick up those and some of the tricks from your explanation. Other parts of your advice will surely require more practice for me to truly internalize (including efficient use of dot notation, term proofs, etc.), but I think I am getting at least steps to the right direction from here.</p>\n<p>Style (including everything from spaces before commas to naming conventions and arguments before colon etc.) is something I had completely disregarded while writing the first sorry-free project. I naturally intend to stick to style guidelines of the mathlib the best I can when actually starting to make PRs (hopefully with the aid of this Zulip and the review process). I will in particular still look at the style guide; so far I only had time to glance through it. Sorry that some style issues created additional work for the helpful reviewers here when transitioning from my experimentation to something PRable! I could (and perhaps should?) have made some more effort in that direction at an earlier stage, but above I really primarily intended to identify the pieces with which I'd start the practice towards useful contributing.</p>\n<p>The situation with the right generality of assumptions (and even statements) was similar. I so far settled for whatever sufficed for this project. Again for any parts I might PR to mathlib, I'd of course strive for the good generality (first by my own best effort, and then hopefully with the help of experienced reviewers). In many cases I actually expect instead to find that the statements I made have an existing better implementation in mathlib (this turned out to be the case e.g. with <code>open_imp_borel</code> and <code>closed_imp_borel</code> above), so in those cases my goal is rather to learn to use mathlib better. Only with actually missing stuff I'd start to optimize the generality and implementation.</p>\n<p>I highly appreciate both your general thoughtful approach and carefully justified specific judgements, e.g., regarding what the reader might want to see in a proof. In the back of my mind I think I expected mathlib-quality with lemmas such as these to mainly mean having the statements readable, general, and well implemented, but proofs golfed to some obfuscated form optimized for length and efficiency only.</p>\n<p>Anyway, with the above comments in mind I hope to get to making some small PRs in the near future!</p>",
        "id": 245898442,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626215807
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 246037841,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626307899
    },
    {
        "content": "<p>Ok, so I'm closer to getting started with some tiny PRs, I hope. I think I will split to even smaller pieces. I'd just like to make sure of a few last things before making the PRs.</p>",
        "id": 246037941,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626307978
    },
    {
        "content": "<p>I like Patrick's suggestion of separating even a substatement (<code>frontier_eq_inter_compl_interior</code> below) to another small lemma, since it essentially doesn't add to the length and it could be useful again (it will used once right away with the original lemma, now <code>compl_frontier_eq_union_interior</code> below). I think these don't belong to <code>portmanteau</code> namespace, though, and I would be happy to avoid creating a new file in this first PR of any code. Does it make sense to PR these to <strong>topology/basic.lean</strong>, towards the end of the segment dealing with frontier (say after <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure_eq_self_union_frontier\">docs#closure_eq_self_union_frontier</a>)?</p>\n<p>My current proposal of the code to PR is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">frontier_eq_inter_compl_interior</span> <span class=\"o\">{</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frontier</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">·∂ú</span> <span class=\"bp\">‚à©</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">·∂ú</span><span class=\"o\">))</span><span class=\"bp\">·∂ú</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">frontier_compl</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span><span class=\"n\">closure_compl</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">compl_frontier_eq_union_interior</span> <span class=\"o\">{</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">·∂ú</span> <span class=\"bp\">=</span> <span class=\"n\">interior</span> <span class=\"n\">A</span> <span class=\"bp\">‚à™</span> <span class=\"n\">interior</span> <span class=\"n\">A</span><span class=\"bp\">·∂ú</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">frontier_eq_inter_compl_interior</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">compl_inter</span><span class=\"o\">,</span> <span class=\"n\">compl_compl</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246037950,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626307986
    },
    {
        "content": "<p>Also another suggestion by Patrick included adding a new lemma, this time to the <code>continuous</code> namespace (via <code>_root_</code> in Patrick's code and below). I again think these wouldn't belong to <code>portmanteau</code>, they are generalities.</p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, if you don't want to PR these two (the code below is from your message above, except for the introductions of the variables), I could also do that. In that case, is <strong>topology/basic.lean</strong> again appropriate, in the segments about closure and frontier? Would I be right to separate this from the PR above? (Are these becoming too microscopic?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.continuous.closure_preimage_subset</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≥</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">f</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"o\">(</span><span class=\"n\">is_closed_closure.preimage</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">closure_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">mono</span><span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">subset_closure</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.continuous.frontier_preimage_subset</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≥</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">frontier</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">f</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"o\">(</span><span class=\"n\">frontier</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">diff_subset_diff</span> <span class=\"o\">(</span><span class=\"n\">hf.closure_preimage_subset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">preimage_interior_subset_interior_preimage</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 246038112,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626308148
    },
    {
        "content": "<p>With <code>meas_eq_various_of_null_bdry</code> I'd perhaps wait a bit until I get to the level of PRing that I dare create new files --- this one might be natural in the <code>portmanteau</code> namespace. (Or is there a natural place for this elsewhere?)</p>",
        "id": 246038398,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626308436
    },
    {
        "content": "<p>Those four lemmas should indeed go into <code>topology.basic</code>, in a single PR. The last one is trickier to locate but I guess could go close to the definition of <code>borel</code>. It doesn't need <code>borel</code> but this is where people would probably expect to see it. I don't mind PRing those lemmas myself, but if you want an exercise in PRing then it should be perfect.</p>",
        "id": 246062596,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626335892
    },
    {
        "content": "<p>Ok, then I'd like to take these as an exercise and make the PR.</p>\n<p>Thank you very much for the help, all! As a <del>punishment</del> \"reward\", I will request PR reviews from those who helped me out here. (Really I want to make sure that I didn't in the end go too much against your good advice.) I trust you know how to say no to that, if you don't feel like looking at these any further <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
        "id": 246064419,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626337047
    },
    {
        "content": "<p>If all goes well with these PR exercises, I will probably follow up with some new PRs of the portmanteau content. The reviewers can send me back to the drawing board (and to this Zulip) whenever appropriate! I will of course try to first polish the contents myself, and in particular follow the style guide.</p>",
        "id": 246064544,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1626337107
    }
]