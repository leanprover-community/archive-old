[
    {
        "content": "<p>Suppose I create a new Lean project with the command <code>leanproject</code> following the tutorial online (<a href=\"https://leanprover-community.github.io/install/project.html\">https://leanprover-community.github.io/install/project.html</a>). If I understand correctly, this creates a local Git repository on my computer that is not linked to any online GitHub repo. Suppose further that the files in this repository are meant to be PRed on Mathlib. I am wondering what the correct workflow is. I suppose that, since this repo is not linked to Mathlib at the beginning, a good idea is to upload it on a personal repo online on my GitHub account (that I am not really sure how to do since I always create the GitHub repo first but if this is the case I will figure out by myself). Suppose that to run my code I need to fill up holes in the existing files of Mathlib. Should I edit directly the files in the src folder in this repo? What are then the next step to PR on Mathlib?</p>",
        "id": 202074879,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593168147
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> might help?</p>",
        "id": 202076078,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1593169128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> The best approach would be to do <code>leanproject get mathlib</code>, and then work on a branch inside that</p>",
        "id": 202076972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593169770
    },
    {
        "content": "<p>(I don't know how familiar you are with <code>git</code>)</p>",
        "id": 202076987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593169778
    },
    {
        "content": "<p>If you give us your github username, we can give you push access, so that you can push your branch to github, and create PRs</p>",
        "id": 202077083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593169830
    },
    {
        "content": "<p>Ok thanks a lot! My github username is Nicknamen</p>",
        "id": 202077904,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593170478
    },
    {
        "content": "<p>Nicolò, could you tell us if <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> is hard to understand?</p>",
        "id": 202077933,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593170505
    },
    {
        "content": "<p>You should have received a GitHub invitation.</p>",
        "id": 202078019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593170559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202076987\">said</a>:</p>\n<blockquote>\n<p>(I don't know how familiar you are with <code>git</code>)</p>\n</blockquote>\n<p>I used it in the past but I never used it in shared projects so I am not that familiar</p>",
        "id": 202078168,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593170677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202077933\">said</a>:</p>\n<blockquote>\n<p>Nicolò, could you tell us if <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> is hard to understand?</p>\n</blockquote>\n<p>What I do not understand  is if this process has anything to do with the command <code>leanproject new my_project</code> or if this latter command is meant to create projects that are not meant to be uploaded on Mathlib</p>",
        "id": 202078343,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593170825
    },
    {
        "content": "<p>Making a new project is usually for projects which are not for mathlib but rather use mathlib as a dependency</p>",
        "id": 202078390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593170881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202078390\">said</a>:</p>\n<blockquote>\n<p>Making a new project is usually for projects which are not for mathlib but rather use mathlib as a dependency</p>\n</blockquote>\n<p>Ok thanks, this was precisely my doubt! So I guess that to work on Mathlib I am supposed to use plain git commands and the mathilb tools do not play a major role</p>",
        "id": 202079224,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593171412
    },
    {
        "content": "<p>No, they play a major role.</p>",
        "id": 202079239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593171435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202079239\">said</a>:</p>\n<blockquote>\n<p>No, they play a major role.</p>\n</blockquote>\n<p>To compile right?</p>",
        "id": 202079337,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593171512
    },
    {
        "content": "<p>I mean for example I use pull to update the library and not leanproject up</p>",
        "id": 202079473,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593171648
    },
    {
        "content": "<p>I guess I will have a try and try to understand also with practice</p>",
        "id": 202079507,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593171691
    },
    {
        "content": "<p>Say you want to share a shiny new lemmas about sets. The workflow is:</p>\n<ul>\n<li><code>leanproject get -b project_name:shiny_lemma</code></li>\n<li>edit <code>data/set/basic.lean</code></li>\n<li>If you are anxious, <code>leanproject build</code> to check you didn't break anything. This will be long because you edit a fundamental file, imported by pretty much everything else.</li>\n<li><code>git commit -a</code></li>\n<li><code>git push origin</code> </li>\n<li>Visit <a href=\"https://github.com/leanprover/mathlib\">https://github.com/leanprover/mathlib</a> to see an invitation to open a PR based on what you just did.</li>\n<li>Wait for continuous integration to build your branch if you didn't do it locally</li>\n<li><code>leanproject get-cache</code> will download what was built by CI</li>\n<li>etc.</li>\n</ul>",
        "id": 202079539,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593171720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202079539\">said</a>:</p>\n<blockquote>\n<p>Say you want to share a shiny new lemmas about sets. The workflow is:</p>\n<ul>\n<li><code>leanproject get -b project_name:shiny_lemma</code></li>\n<li>edit <code>data/set/basic.lean</code></li>\n<li>If you are anxious, <code>leanproject build</code> to check you didn't break anything. This will be long because you edit a fundamental file, imported by pretty much everything else.</li>\n<li><code>git commit -a</code></li>\n<li><code>git push origin</code> </li>\n<li>Visit <a href=\"https://github.com/leanprover/mathlib\">https://github.com/leanprover/mathlib</a> to see an invitation to open a PR based on what you just did.</li>\n<li>Wait for continuous integration to build your branch if you didn't do it locally</li>\n<li><code>leanproject get-cache</code> will download what was built by CI</li>\n<li>etc.</li>\n</ul>\n</blockquote>\n<p>Ok thanks this is very useful!!</p>",
        "id": 202079593,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593171753
    },
    {
        "content": "<p>Oops, I failed to replace \"project_name\" by \"mathlib\".</p>",
        "id": 202079747,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593171909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> Yes, I use <code>leanproject up</code> and <code>leanproject get-cache</code> all the time when working on mathlib.</p>",
        "id": 202080712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593172750
    },
    {
        "content": "<p>How does all of this change if I'm working off a forked mathlib? In particular, how do I update my fork from the upstream changes? I merged the remote-tracking branch 'upstream/master' into my forked branch and pushed it. How do I update my local folder now? I tried <code>leanproject up</code> but it says \"Couldn't pull from a relevant git remote\". My toml says 'leanprover-community/lean:3.16.5' though. Shouldn't that be pointing to my forked repo? If I wait for the oleans to be built on GitHub can I then do <code>leanproject get-cache</code>?</p>",
        "id": 202087783,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1593177376
    },
    {
        "content": "<p>To be honest, we don't really thought carefully about that case. Basically every mathlib contributor is given write access to non-master branch of the community repo, and nobody works on forks of mathlib.</p>",
        "id": 202089834,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593178399
    },
    {
        "content": "<p>So you only need to tell us you want to contribute and give us you GitHub login.</p>",
        "id": 202089954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593178446
    },
    {
        "content": "<p>Then we should DEFINITELY remove the \"Mathlib principally uses the fork-and-branch workflow.\" comment at the top of <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a>!</p>",
        "id": 202091358,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1593179032
    },
    {
        "content": "<p>My GitHub login is paulvanwamelen. Thanks!</p>",
        "id": 202091479,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1593179072
    },
    {
        "content": "<p>True, this is outdated.</p>",
        "id": 202091485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593179075
    },
    {
        "content": "<p>You can now use your invitation to open a PR fixing that page.</p>",
        "id": 202091665,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593179150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255743\">Paul van Wamelen</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202091358\">said</a>:</p>\n<blockquote>\n<p>Then we should DEFINITELY remove the \"Mathlib principally uses the fork-and-branch workflow.\" comment at the top of <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a>!</p>\n</blockquote>\n<p>I admit I was also a bit confused by this sentence as the workflow seems to be slightly different from what I have always been doing with Git in the past, but since I have never used it in shared projects there was also the option that I have not been using it the whole time as it is supposed to be used without no one ever noticing</p>",
        "id": 202095371,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593180727
    },
    {
        "content": "<p>I am trying to follow the workflow delineated by Patrick, but I am having problems to update Mathlib.<br>\nI branched Mathlib with <code>leanproject get -b mathlib:whatever</code> and then I edited a couple of files. Before trying to compile I ran <code>leanproject up</code> but I get</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Couldn&#39;t</span> <span class=\"n\">pull</span> <span class=\"k\">from</span> <span class=\"n\">a</span> <span class=\"n\">relevant</span> <span class=\"n\">git</span> <span class=\"n\">remote</span><span class=\"bp\">.</span> <span class=\"n\">You</span> <span class=\"n\">may</span> <span class=\"n\">try</span> <span class=\"n\">to</span> <span class=\"n\">git</span> <span class=\"n\">pull</span> <span class=\"n\">manually</span> <span class=\"n\">and</span> <span class=\"k\">then</span> <span class=\"n\">run</span> <span class=\"bp\">`</span><span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span><span class=\"bp\">`</span>\n</code></pre></div>\n\n\n<p>If I run <code>git pull origin master</code> and then <code>leanproject get-cache</code> I get</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">local</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">remote</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">download</span>\n<span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">oleanstorage</span><span class=\"bp\">.</span><span class=\"n\">azureedge</span><span class=\"bp\">.</span><span class=\"n\">net</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">c5313d5ede5d33bc6ece62ecff1aa7d84691f692</span><span class=\"bp\">.</span><span class=\"n\">tar</span><span class=\"bp\">.</span><span class=\"n\">xz</span> <span class=\"n\">to</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">nicoc</span><span class=\"err\">\\</span><span class=\"bp\">.</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"n\">c5313d5ede5d33bc6ece62ecff1aa7d84691f692</span><span class=\"bp\">.</span><span class=\"n\">tar</span><span class=\"bp\">.</span><span class=\"n\">xz</span>\n<span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">oleanstorage</span><span class=\"bp\">.</span><span class=\"n\">azureedge</span><span class=\"bp\">.</span><span class=\"n\">net</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">c5313d5ede5d33bc6ece62ecff1aa7d84691f692</span><span class=\"bp\">.</span><span class=\"n\">tar</span><span class=\"bp\">.</span><span class=\"n\">gz</span> <span class=\"n\">to</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">nicoc</span><span class=\"err\">\\</span><span class=\"bp\">.</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"n\">c5313d5ede5d33bc6ece62ecff1aa7d84691f692</span><span class=\"bp\">.</span><span class=\"n\">tar</span><span class=\"bp\">.</span><span class=\"n\">gz</span>\n<span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">oleanstorage</span><span class=\"bp\">.</span><span class=\"n\">azureedge</span><span class=\"bp\">.</span><span class=\"n\">net</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">c5313d5ede5d33bc6ece62ecff1aa7d84691f692</span><span class=\"bp\">.</span><span class=\"n\">tar</span><span class=\"bp\">.</span><span class=\"n\">bz2</span> <span class=\"n\">to</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">nicoc</span><span class=\"err\">\\</span><span class=\"bp\">.</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"n\">c5313d5ede5d33bc6ece62ecff1aa7d84691f692</span><span class=\"bp\">.</span><span class=\"n\">tar</span><span class=\"bp\">.</span><span class=\"n\">bz2</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">GitHub</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Info</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">github</span> <span class=\"kn\">section</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"err\">&#39;</span><span class=\"n\">git</span> <span class=\"n\">config&#39;</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"n\">will</span> <span class=\"n\">use</span> <span class=\"n\">GitHub</span> <span class=\"k\">with</span> <span class=\"n\">no</span> <span class=\"n\">authentication</span>\n<span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">fetch</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n</code></pre></div>\n\n\n<p>I am nor really sure what the GitHub section is. I do have my GitHub username in git config and I have no problem pulling and pushing to personal repos on my account.</p>",
        "id": 202341272,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593450997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> Did you commit your changes?</p>",
        "id": 202341416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451071
    },
    {
        "content": "<p>If so, then github will not have olean files for your repo</p>",
        "id": 202341482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451088
    },
    {
        "content": "<p>Yes I did!</p>",
        "id": 202341497,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593451097
    },
    {
        "content": "<p>Ok, that explains why it's failing</p>",
        "id": 202341520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451107
    },
    {
        "content": "<p>I suggest</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">master</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">your</span><span class=\"bp\">-</span><span class=\"n\">branch</span>\n</code></pre></div>",
        "id": 202341569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451129
    },
    {
        "content": "<p><code>leanproject get-cache</code> attempts to download olean files that have been built \"in the cloud\". It won't be able to download olean files reflecting changes that have only been made on your computer.</p>",
        "id": 202341618,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593451158
    },
    {
        "content": "<p>If you push your branch, then CI will start creating oleans for you. You can fetch them later with <code>leanproject</code>, but it will take some time. (2 hours? approx.)</p>",
        "id": 202341672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451188
    },
    {
        "content": "<p>But <code>leanproject</code> wanted me to do it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n<span class=\"n\">The</span> <span class=\"n\">repository</span> <span class=\"n\">is</span> <span class=\"n\">dirty</span><span class=\"o\">,</span> <span class=\"n\">please</span> <span class=\"n\">commit</span> <span class=\"n\">changes</span> <span class=\"n\">before</span> <span class=\"n\">fetching</span> <span class=\"n\">cache</span><span class=\"o\">,</span> <span class=\"n\">or</span> <span class=\"n\">run</span> <span class=\"n\">this</span> <span class=\"n\">command</span> <span class=\"k\">with</span> <span class=\"n\">option</span> <span class=\"c1\">--force.</span>\n</code></pre></div>",
        "id": 202341683,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593451197
    },
    {
        "content": "<p>Sure... I guess this is confusing.</p>",
        "id": 202341743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451218
    },
    {
        "content": "<p>Am I supposed to run it with <code>--force</code> then?</p>",
        "id": 202341787,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593451248
    },
    {
        "content": "<p>If you run <code>git log</code> you will see a bunch of long hexadecimal numbers. Those are git commit hashes.</p>",
        "id": 202341798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451251
    },
    {
        "content": "<p>leanproject looks at the git commit hash of the current commit, and tries to fetch oleans from the cloud for that commit.</p>",
        "id": 202341826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451273
    },
    {
        "content": "<p>But it the commit doesn't exist upstairs... it can't help.</p>",
        "id": 202341846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451284
    },
    {
        "content": "<p>Oh ok that makes sense!</p>",
        "id": 202341863,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593451292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> No, I think just commiting is fine. And then move to a commit (e.g. <code>master</code>) that does have oleans. Fetch the oleans, and go back to your branch.</p>",
        "id": 202341940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451324
    },
    {
        "content": "<p>Then you will have oleans that are quite close to what you want, but you still have to compile because of your local changes.</p>",
        "id": 202341978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202341978\">said</a>:</p>\n<blockquote>\n<p>Then you will have oleans that are quite close to what you want, but you still have to compile because of your local changes.</p>\n</blockquote>\n<p>You mean with <code>leanproject buid?</code></p>",
        "id": 202342019,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593451377
    },
    {
        "content": "<p>If you already pushed your branch (say yesterday) then you can do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">origin</span><span class=\"bp\">/</span><span class=\"n\">your</span><span class=\"bp\">-</span><span class=\"n\">branch</span>\n</code></pre></div>\n\n\n<p>and fetch oleans there. Those might be better than the oleans from master.</p>",
        "id": 202342032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451383
    },
    {
        "content": "<p>Depends on when you last merged master into your branch</p>",
        "id": 202342058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202342058\">said</a>:</p>\n<blockquote>\n<p>Depends on when you last merged master into your branch</p>\n</blockquote>\n<p>I never merged anything yet! I did all of this like 2 hours ago</p>",
        "id": 202342112,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593451435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202341569\">said</a>:</p>\n<blockquote>\n<p>I suggest</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">master</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">your</span><span class=\"bp\">-</span><span class=\"n\">branch</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Then do this sequence <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 202342274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451501
    },
    {
        "content": "<p>Well switching to the master branch it worked to do <code>leanproject up</code>... Am I supposed to do it only from the master branch?</p>",
        "id": 202342451,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593451567
    },
    {
        "content": "<p>No, like I said, you can also do it from <code>origin/your-branch</code></p>",
        "id": 202342597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451598
    },
    {
        "content": "<p>From any commit that also exists on github (for more than 2hrs, otherwise it might still be busy creating your oleans)</p>",
        "id": 202342648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202342597\">said</a>:</p>\n<blockquote>\n<p>No, like I said, you can also do it from <code>origin/your-branch</code></p>\n</blockquote>\n<p>I thought you meant <code>leanpoject get-cache</code> becasue <code>leanproject up</code> did not work from my branch even before I committed anything</p>",
        "id": 202342724,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593451663
    },
    {
        "content": "<p>That's the power. If you push to github, and share your branchname. We can pull, <em>and</em> get the oleans.</p>",
        "id": 202342726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451664
    },
    {
        "content": "<blockquote>\n<p>becasue <code>leanproject up</code> did not work from my branch even before I committed anything</p>\n</blockquote>\n<p>but your branch only existed on your computer, not on github, right?</p>",
        "id": 202342840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202342840\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>becasue <code>leanproject up</code> did not work from my branch even before I committed anything</p>\n</blockquote>\n<p>but your branch only existed on your computer, not on github, right?</p>\n</blockquote>\n<p>Oh right sorry I was thinking only about the commits existing only on my computer, not my branch</p>",
        "id": 202342919,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593451746
    },
    {
        "content": "<p>If you do <code>git checkout -b new-branch</code> then after that <code>leanproject get-cache</code> still works. But as soon as you make changes, it will probably complain that your directory is dirty.</p>",
        "id": 202342970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593451757
    },
    {
        "content": "<p>Ok thanks it worked I will try to build now with <code>leanproject build</code></p>",
        "id": 202343148,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593451824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202077933\">said</a>:</p>\n<blockquote>\n<p>Nicolò, could you tell us if <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> is hard to understand?</p>\n</blockquote>\n<p>I am curious to understand the chosen model - why everyone (apart from committers to the master branch and the like) would need write access to the main repo (I do know much more than I ever wanted to know about Git workflows)?</p>",
        "id": 202352532,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1593456551
    },
    {
        "content": "<p>The main reason is that we use Github actions to compile the \".olean\" files and upload them to Azure (so that any reviewers don't have to compile mathlib themselves), and we only want that to happen for workflows run from the main repository.</p>",
        "id": 202352998,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593456820
    },
    {
        "content": "<p>Right... compiling mathlib takes ~1 hour on a decent machine. This way, people can jump right in, after downloading precompiled binaries from a branch.</p>",
        "id": 202353318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593456983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202352998\">said</a>:</p>\n<blockquote>\n<p>The main reason is that we use Github actions to compile the \".olean\" files and upload them to Azure (so that any reviewers don't have to compile mathlib themselves), and we only want that to happen for workflows run from the main repository.</p>\n</blockquote>\n<p>I guess you have a priority access to GH Actions queue (we do use a free tier GH Actions in SageMath work, and they tend to take a lot of time), right?</p>",
        "id": 202353611,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1593457135
    },
    {
        "content": "<p>We're also using the free tier for GH actions as far as I know. It's more of a security thing, I think. Other forks can run most of our workflow to build and check their commits under their own GH Actions plans, but they can't upload the results to Azure since we store the credentials as \"secrets\" on github, and those only work for workflows run from our own repo.</p>",
        "id": 202354000,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593457278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316505\">@Dima Pasechnik</span> We're using incremental builds, so not every build takes 1hr, most take 5-15 minutes. Nevertheless, the \"<code>leanproject get-cache</code>, wait 5 seconds\" is hard to beat.</p>",
        "id": 202354247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593457398
    },
    {
        "content": "<p>Of course, if we're giving out write access willy-nilly then the security benefits become negligible. So we'll most likely have to revisit this (if we're lucky enough to keep growing).</p>",
        "id": 202354277,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593457412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Correct.20workflow.20to.20work.20with.20Mathlib/near/202353318\">said</a>:</p>\n<blockquote>\n<p>Right... compiling mathlib takes ~1 hour on a decent machine. This way, people can jump right in, after downloading precompiled binaries from a branch.</p>\n</blockquote>\n<p>precompiled binaries packed in some kind of container (we use Docker?), otherwise I don't see how this can work.</p>",
        "id": 202354315,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1593457429
    },
    {
        "content": "<p><code>Trying to download https://oleanstorage.azureedge.net/mathlib/4e2c7e36308b6349c5a794237ebfef91e309ac2f.tar.xz to /home/buzzard/.mathlib/4e2c7e36308b6349c5a794237ebfef91e309ac2f.tar.xz\n</code></p>",
        "id": 202354426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593457474
    },
    {
        "content": "<p>A python script downloads the tarball, and then unpacks it and puts it all in the right place.</p>",
        "id": 202354488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593457506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316505\">@Dima Pasechnik</span> what do you mean? <code>lean</code> compiles <code>.lean</code> files into <code>.olean</code> files. And <code>leanproject</code> will download those olean files (in a tarball) for whatever branch you are currently interested in.</p>",
        "id": 202354601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593457555
    },
    {
        "content": "<p>So there is no Docker involved.</p>",
        "id": 202354674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593457570
    },
    {
        "content": "<p>\"binaries\" is not the right word. Rather, from a proof script in which there is a lot of work to do, Lean can extract the compiled version of the proofs, which is much faster to read and check and use, but this is not a binary in the sense of executable, it is still a file that will be used by the Lean executable.</p>",
        "id": 202354685,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593457579
    },
    {
        "content": "<p>Also, we are not talking about compiling <code>lean</code> itself. That's a different story (-;</p>",
        "id": 202354697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593457586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> It is a \"binary\" file, in the sense that it isn't plaintext human readable. (Unless you are Mario, I guess.)</p>",
        "id": 202354747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593457621
    },
    {
        "content": "<p>It is a binary file, but it is not \"binaries\" in the executable sense.</p>",
        "id": 202354831,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593457666
    },
    {
        "content": "<p>The \"binaries\" are leans <code>.olean</code> files,  which is a custom format that happens to be platform independent, maybe its more like  <code>.py-&gt;.pyc</code> than <code>.c-&gt;.o</code></p>",
        "id": 202354902,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593457686
    },
    {
        "content": "<p>I see, thanks for explaining.</p>",
        "id": 202355506,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1593458018
    },
    {
        "content": "<p>basically, GH Actions is a mainframe for doing some heavy lifting.</p>",
        "id": 202355743,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1593458135
    }
]