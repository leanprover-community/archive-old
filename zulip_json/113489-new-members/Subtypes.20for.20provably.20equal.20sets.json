[
    {
        "content": "<p>I would like to identify the subtypes coming from two sets which I can prove are equal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">at_top_bot</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Ioo</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">dual_Ioo</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">at_bot</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I get the following error: \"type mismatch at application <code>at_bot = at_top</code>, term <code>at_top</code> has type <code>filter ↥(Ioo b a)</code> but is expected to have type <code>filter ↥(Ioo a b)</code>\".</p>\n<p>This makes sense, but how do I fix it?  (Is this similar to the questions <span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span>  was <a href=\"#narrow/stream/113488-general/topic/finset.20coercion.20strangeness\">asking</a> the other day?)</p>",
        "id": 209114555,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599237034
    },
    {
        "content": "<p>You can prove the sets are equal, but equality of types is an unpleasant notion. One way of \"fixing\" it would be to give a name to the \"identity\" map between the types, and then compare one filter with the pullback of the other.</p>",
        "id": 209115237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599237508
    },
    {
        "content": "<p>Thanks!  This typechecks, is it what you had in mind?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">at_top_bot</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span>\n\n<span class=\"n\">def</span> <span class=\"n\">order_id</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">Ioo</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Ioo</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">dual_Ioo</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">order_id</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">at_bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ioo</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 209115805,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599237900
    },
    {
        "content": "<p>Yes! Here's my definition of order_id:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Ioo</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">def</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_dual</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">order_dual</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"c1\">-- do we have this map?</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">to_dual</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 209115867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599237946
    },
    {
        "content": "<p>Looks great.  Have to go teach now, but I look forward to filling in my sorry using this trick.</p>",
        "id": 209115984,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599238020
    },
    {
        "content": "<p>In Lean we have groups and add_groups, and sometimes this is great and sometimes it's not great. There is this <code>to_additive</code> story, which moves from one situation to the other: if <code>(G : Type) [group G]</code> then <code>additive G</code> is the <code>add_group</code> with group law <code>+</code> which is defined to be <code>G</code>'s <code>*</code>. But the definition of <code>additive G</code> is just <code>additive G := G</code>. Similarly if <code>A</code> is an add_group then <code>multiplicative A</code> is the group. There are named maps called things like <code>additive.of_multiplicative</code> or something, which move you between these two structures -- this is why I defined <code>to_dual</code>. However some proofs in mathlib completely abuse the fact that these maps from <code>G</code> to <code>additive G</code> are just the identity function. This might work fine for groups, but you're doing the dual order and here what is a bit scary is that you will now have &lt; on alpha and a different &lt; on <code>order_dual alpha</code> and if you are not principled about these things then it will be easy to get confused. It is not hard to get Lean to accept \"theoretically ill-defined\" terms, e.g. of the form \"x &lt; y\" where <code>x : alpha</code> and <code>y : order_dual alpha</code>, and then you can't guess what <code>&lt; </code> will mean (and in the days before widgets this was a royal pain). So I guess I would recommend the principled approach, using <code>to_dual</code> rather than \"abusing\" the fact that <code>order_dual α := α</code>.</p>",
        "id": 209116617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599238435
    },
    {
        "content": "<p>I should say however that this idea of defining <code>to_dual</code> is my own crazy notion and it's not already in mathlib which might mean that it's for some reason a bad idea.</p>",
        "id": 209117973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599239087
    },
    {
        "content": "<p>For opposite categories (which are basically the same thing) we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite\">docs#opposite</a> which is an even more locked down version of this. Your <code>to_dual</code> is called <code>op</code></p>",
        "id": 209118251,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599239235
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">irreducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">opposite</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">α</span>\n</code></pre></div>\n\n\n<p>Because it's irreducible, it's much easier to be principled about these things. I made <code>with_zero</code> and <code>with_one</code> irreducible recently because it stopped the simplifier simplifying <code>x : with_zero X</code> to <code>x : option X</code>, something which is sometimes a great idea but sometimes not so great (it's not the correct path to go down if you want to actually use properties of zero which <code>none</code> doesn't have).</p>",
        "id": 209118523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599239389
    },
    {
        "content": "<p>Reid, was your comment intended as something that is ready-to-go on current mathlib, or something that would be nice to add?  I just tried taking it literally, by trying to write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">at_top_bot</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">unop</span> <span class=\"n\">α</span>\n</code></pre></div>\n\n\n<p>but it seems that <code>αᵒᵖ</code> and <code>order_dual α</code> are not the same thing on current mathlib (I get \"type mismatch, term <code>unop</code> has type <code>αᵒᵖ → α</code> but is expected to have type <code>order_dual α → α</code>\", unsurprisingly)</p>",
        "id": 209130137,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599246306
    },
    {
        "content": "<p>Right, <code>opposite</code> and <code>order_dual</code> are not the same (though perhaps the <code>opposite</code> for categories should unmerge somehow with the <code>opposite</code> for <code>*</code>, and merge with <code>order_dual</code> instead).</p>",
        "id": 209130732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599246621
    },
    {
        "content": "<p>Do you happen to know if there is an analogue of the map <code>op</code> in the <code>order_dual</code> situation?  I checked the library but didn't see it.</p>",
        "id": 209131527,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599247085
    },
    {
        "content": "<p>I don't know--my guess is if you didn't find it then it doesn't exist.</p>",
        "id": 209133925,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599248689
    }
]