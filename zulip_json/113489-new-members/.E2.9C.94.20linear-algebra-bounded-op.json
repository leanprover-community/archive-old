[
    {
        "content": "<p>Ah, I get it! Thanks!</p>",
        "id": 284241898,
        "sender_full_name": "Monica Omar",
        "timestamp": 1653762156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477483\">Monica Omar</span> has marked this topic as resolved.</p>",
        "id": 284241913,
        "sender_full_name": "Notification Bot",
        "timestamp": 1653762176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"477483\">@Monica Omar</span> I'm sick of marking so I golfed your proof a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bounded_op_eq_one_if_norm_is_one</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">inner_map_self_eq_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hψ</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">ψ</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">φ</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- does both `use`s and the `split` in one line</span>\n    <span class=\"c1\">-- anything but `finish`, I haven't got all day; all found using `squeeze_simp`</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_smul</span><span class=\"o\">,</span> <span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">norm_inv</span><span class=\"o\">,</span> <span class=\"n\">norm_norm</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">norm_ne_zero_iff.mpr</span> <span class=\"n\">hψ</span><span class=\"o\">)],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">(</span><span class=\"n\">norm_ne_zero_iff.mpr</span> <span class=\"n\">hψ</span><span class=\"o\">),</span> <span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">complex.coe_smul</span><span class=\"o\">,</span>\n        <span class=\"n\">one_smul</span><span class=\"o\">],</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inner_smul_right</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_smul</span><span class=\"o\">,</span> <span class=\"n\">inner_smul_left</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- mathematicians always want to make the intermediate `have` statements. You don't</span>\n    <span class=\"c1\">-- need them -- just work on the goal directly.</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inner_sub_left</span><span class=\"o\">,</span> <span class=\"n\">linear_map.sub_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.one_apply</span><span class=\"o\">],</span> <span class=\"c1\">-- non-terminal simps considered harmful</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inner_self_eq_norm_sq_to_K</span><span class=\"o\">,</span> <span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">inner_conj_sym</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">φ</span> <span class=\"n\">hφ</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284242698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653763430
    },
    {
        "content": "<p>This was mine, which seems pretty close :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bounded_op_eq_one_if_norm_is_one'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">inner_map_self_eq_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hψ</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">ψ</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">inner_zero_right</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">φ</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">norm_smul</span><span class=\"o\">,</span> <span class=\"n\">norm_ne_zero_iff.mpr</span> <span class=\"n\">hψ</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">hψ</span><span class=\"o\">],</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.map_smul_of_tower</span><span class=\"o\">,</span> <span class=\"n\">inner_smul_real_left</span><span class=\"o\">,</span> <span class=\"n\">inner_smul_real_right</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"n\">φ</span><span class=\"o\">,</span><span class=\"n\">φ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inner_self_eq_norm_sq_to_K</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">complex.of_real_one</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hφ'</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">φ</span> <span class=\"n\">hφ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.sub_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.one_apply</span><span class=\"o\">,</span> <span class=\"n\">inner_sub_left</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">inner_conj_sym</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">hφ'</span><span class=\"o\">,</span> <span class=\"n\">map_one</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284243229,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653764164
    },
    {
        "content": "<p>Now, the big question: do you feel like you've learned something?</p>",
        "id": 284243255,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653764227
    },
    {
        "content": "<p>Yeah, definitely. I learned to make sure the statement is correct before anything.</p>",
        "id": 284243575,
        "sender_full_name": "Monica Omar",
        "timestamp": 1653764637
    }
]