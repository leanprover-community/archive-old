[
    {
        "content": "<p>I saw this discussion on #general: <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197327879\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Undergraduate.20math.20list/near/197327879</a> and got me inspired to ask about the best practices to search for content in mathlib.  </p>\n<p>When searching for a given fact, I usually struggle, and specially when I don't know the the level of abstractions with which it was formalized in Lean. </p>\n<p>In my dream world statements would be tagged with a set of keywords, and a page could be automatically constructed to query for those keywords. Has there been any discussions to build a kind of ontological system on as a meta-system on top of mathlib?  Other than asking about how that, I'd love to hear any advice on efficient searching of mathlib.</p>",
        "id": 197344978,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1589320512
    },
    {
        "content": "<p>Here's an example.<br>\nIf you know that you're looking for facts about groups, you either type the word group or look through mathlib for files called group</p>",
        "id": 197345228,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320655
    },
    {
        "content": "<p>if you look through mathlib, you'll end up in either src/group_theory or in something like src/algebra/group/basic.lean</p>",
        "id": 197345312,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320687
    },
    {
        "content": "<p>either way, you'll have a file that gives you one nontrivial statement about groups</p>",
        "id": 197345364,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320716
    },
    {
        "content": "<p>then that is probably enough to teach you how to type the theorem you want and then apply <code>library_search</code></p>",
        "id": 197345395,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320740
    },
    {
        "content": "<p>There are lots of different ways to search, and some work better than others in different situations. <span class=\"user-mention\" data-user-id=\"269975\">@Walter Moreira</span> do you have an explicit example of something you might want to search for?</p>",
        "id": 197345468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589320786
    },
    {
        "content": "<p>We have space for tags in the \"module documentation\" that's supposed to be at the top of every file in mathlib, but we haven't done too much with those yet.</p>",
        "id": 197345489,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589320801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> No, I don't have a concrete example at the moment (documentation has been good, and <code>library_search</code> is a magical thing).  I just like to think about organization and thought to ask.</p>",
        "id": 197345691,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1589320897
    },
    {
        "content": "<p>I think this is a good problem to think about, but you should remember that this is also a problem in normal software engineering</p>",
        "id": 197345774,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320945
    },
    {
        "content": "<p>On the other hand, how does <code>library_search</code> works? Does it search for the conclusion of any proposition that matches the one you goal you have?</p>",
        "id": 197345798,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1589320959
    },
    {
        "content": "<p>So if there are any easy ways to make a lot of progress, they are either specific to theorem provers or already known</p>",
        "id": 197345835,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> I agree. That being common in the engineering world is what was triggering my thinking here.</p>",
        "id": 197345908,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1589321022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269975\">Walter Moreira</span> <a href=\"#narrow/stream/113489-new-members/topic/Searching.20in.20mathlib/near/197345798\">said</a>:</p>\n<blockquote>\n<p>On the other hand, how does <code>library_search</code> works? Does it search for the conclusion of any proposition that matches the one you goal you have?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  is the expert, I think. In my experience the best way to use it is to try to guess exactly the type signature of the lemma you're looking for, even the order of implications may matter</p>",
        "id": 197345986,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589321053
    },
    {
        "content": "<p>I usually have a better time with library search if I extract the lemma from my local context and make it its own <code>example</code></p>",
        "id": 197346037,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589321080
    },
    {
        "content": "<p>As a beginner, my issue so far has been to identify the correct abstraction that's being used in <code>mathlib</code>. For example, if I'm looking for a topological statement, I do need to know that Lean is likely to have it expressed as filters and not as the undergrad-like expression. In that way, I feel a higher level search would be useful.</p>",
        "id": 197346214,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1589321170
    },
    {
        "content": "<p>One big task is to get all of mathlib up to date with the <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/doc.md\">documentation requirements</a>. Then at least google (which is the search currently built-in to the doc pages) can index math written in English rather than just code.</p>",
        "id": 197346583,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589321412
    },
    {
        "content": "<p>Walter, you are totally right this is currently pretty hard. And Bryan is right to point out the documentation task. Note that beginners can help with documentation <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 197346854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589321589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Is there something beginners can help with, while learning?</p>",
        "id": 197346864,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1589321596
    },
    {
        "content": "<p>See the answer above your message</p>",
        "id": 197346881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589321610
    },
    {
        "content": "<p>Ha! I was just writing that and you beat me :-)</p>",
        "id": 197346905,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1589321626
    },
    {
        "content": "<p>Is the process for helping with documentation described somewhere?</p>",
        "id": 197346991,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1589321663
    },
    {
        "content": "<p>I guess by \"the process\" you mean making PRs to mathlib?</p>",
        "id": 197347068,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589321719
    },
    {
        "content": "<p><a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests\">https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests</a> ?</p>",
        "id": 197347078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589321732
    },
    {
        "content": "<p>There is also the thread you linked to.</p>",
        "id": 197347173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589321770
    },
    {
        "content": "<p>As well as commenting about and PRing to all our documentation sources (see <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a>)</p>",
        "id": 197347382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589321904
    },
    {
        "content": "<p>The process might be something like this:</p>\n<ol>\n<li>read a mathlib file and notice that the documentation is missing</li>\n<li>checkout mathlib to your computer</li>\n<li>make a new branch and make edits to the file</li>\n<li>push the branch to github and then open a PR</li>\n</ol>\n<p>We have this file for new contributors: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/index.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/index.md</a> (which should probably be updated to remove the nursery).</p>",
        "id": 197347575,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589322006
    },
    {
        "content": "<p>Cool, thanks! I wanted to confirm PRs where the proper approach. Thanks for the details <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span></p>",
        "id": 197347884,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1589322215
    }
]