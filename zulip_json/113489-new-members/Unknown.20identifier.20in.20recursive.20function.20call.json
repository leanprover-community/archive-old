[
    {
        "content": "<p>I'm trying to write a recursive function and Lean is telling me it doesn't know the name of the function. The function deals with a structure <code>exec</code> that is a finite partial order (among other things), and the recursive call should replace one item in that structure with another that is strictly below it. I would have expected to have to convince Lean that this is an ok well-founded recursion, but it doesn't even give me the chance. It complains <code>unknown identifier 'cs'</code> at the site of the recursive call.</p>\n<p>Can anybody help me figure out how to restructure such a function so Lean will accept it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">exec</span><span class=\"o\">),</span> <span class=\"n\">E.evt</span> <span class=\"bp\">→</span> <span class=\"n\">component</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">cstate</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">E.l</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">cor</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">corrupt</span>\n<span class=\"bp\">|</span> <span class=\"n\">rep</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">regular</span>\n<span class=\"bp\">|</span> <span class=\"n\">msp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">relevant</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">relevant</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n      <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">e'</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ard</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">e''</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ard</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">e''</span> <span class=\"bp\">≤</span> <span class=\"n\">e'</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">e'</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ard</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">e''</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ard</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">e''</span> <span class=\"bp\">≤</span> <span class=\"n\">e'</span><span class=\"o\">),</span>\n        <span class=\"n\">cs</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">max_adv</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">e'</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ard</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">e''</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ard</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">e''</span> <span class=\"bp\">≤</span> <span class=\"n\">e'</span><span class=\"o\">),</span> <span class=\"n\">none</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">relevant</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262608645,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1637770439
    },
    {
        "content": "<p>Helping you would be <em>much</em> easier with a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 262609311,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637770727
    },
    {
        "content": "<p>Sorry. What's the norm around here? I could paste ~250 lines of code. Otherwise, I would have to work to extract something more minimal.</p>",
        "id": 262609962,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1637771021
    },
    {
        "content": "<p>In that case, maybe paste it into a github gist.</p>",
        "id": 262610760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637771350
    },
    {
        "content": "<p>The point is, to help we need to know preceding definitions, and whatever you import, etc</p>",
        "id": 262610800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637771372
    },
    {
        "content": "<p>You need to write it using the equation compiler if you want to write a recursive function by calling <code>cs</code> inside the body</p>",
        "id": 262611172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637771526
    },
    {
        "content": "<p>so something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">exec</span><span class=\"o\">),</span> <span class=\"n\">E.evt</span> <span class=\"bp\">→</span> <span class=\"n\">component</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">cstate</span>\n<span class=\"bp\">|</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">E.l</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cor</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">corrupt</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rep</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">regular</span>\n  <span class=\"bp\">|</span> <span class=\"n\">msp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">relevant</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">relevant</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n        <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">e'</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ard</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">e''</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ard</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">e''</span> <span class=\"bp\">≤</span> <span class=\"n\">e'</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">e'</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ard</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">e''</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ard</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">e''</span> <span class=\"bp\">≤</span> <span class=\"n\">e'</span><span class=\"o\">),</span>\n          <span class=\"n\">cs</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">max_adv</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">e'</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ard</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">e''</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">ard</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">e''</span> <span class=\"bp\">≤</span> <span class=\"n\">e'</span><span class=\"o\">),</span> <span class=\"n\">none</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">relevant</span> <span class=\"n\">E</span> <span class=\"n\">e</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"kd\">end</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.assumption</span><span class=\"o\">}</span> <span class=\"c1\">-- or something</span>\n</code></pre></div>",
        "id": 262611453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637771656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thanks! That does the trick. It now is asking me to prove well-founded induction will work.</p>",
        "id": 262611752,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1637771787
    },
    {
        "content": "<p>Which is, of course, what I was expecting to find in the first place.</p>",
        "id": 262612170,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1637771967
    }
]