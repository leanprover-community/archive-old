[
    {
        "content": "<p>I have the following goal state and don't know how to continue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">value</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">¬</span><span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">v</span>\n</code></pre></div>\n<p>If I understand this correctly, I'm supposed to prove <code>¬ none = some v</code>. I thought <code>simp</code> would handle that, but it doesn't.<br>\nHow can I resolve this?</p>",
        "id": 222546725,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610525210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> there should be a lemma <code>option.some_ne_none</code>. Alternatively, you can close this with <code>option.no_confusion</code>.</p>",
        "id": 222548091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610526048
    },
    {
        "content": "<p>Have you tried <code>library_search</code>?</p>",
        "id": 222548123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610526069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/none.20.E2.89.A0.20some/near/222548123\">said</a>:</p>\n<blockquote>\n<p>Have you tried <code>library_search</code>?</p>\n</blockquote>\n<p>Yeah, it couldn't come up with anything, which seems odd.</p>",
        "id": 222548541,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610526349
    },
    {
        "content": "<p>What if you change the goal to be expressed using <code>some</code> instead of a coercion?</p>",
        "id": 222548720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610526457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/none.20.E2.89.A0.20some/near/222548720\">said</a>:</p>\n<blockquote>\n<p>What if you change the goal to be expressed using <code>some</code> instead of a coercion?</p>\n</blockquote>\n<p>The coercion was introduced by Lean itself. The proposition where <code>v</code> comes from explicitly uses <code>some v</code>.</p>",
        "id": 222549366,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610526922
    },
    {
        "content": "<p>You can use <code>change</code> to change it to <code>some</code>.</p>",
        "id": 222549654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610527138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/none.20.E2.89.A0.20some/near/222549654\">said</a>:</p>\n<blockquote>\n<p>You can use <code>change</code> to change it to <code>some</code>.</p>\n</blockquote>\n<p>Like this <code>change ↑v with (some v)</code>? Because that just introduces two subgoals for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">value</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">v</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">change</span> <span class=\"bp\">↑</span><span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n    <span class=\"c1\">-- 1: ⊢ ¬none = ↑v</span>\n    <span class=\"c1\">-- 2: ⊢ has_lift_t value (option value)</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222550465,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610527722
    },
    {
        "content": "<p><code>change \\not none = some v</code></p>",
        "id": 222550543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610527795
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">value</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">option.no_confusion</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222550701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610527888
    },
    {
        "content": "<p>Perhaps 'coe_eq_some' should be a simp lemma</p>",
        "id": 222590615,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610549533
    },
    {
        "content": "<p>Hmm, shouldn't the other direction be a simp-lemma?</p>",
        "id": 222591593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610549893
    },
    {
        "content": "<p>I think we have a lot of simp lemmas that the linter will complain about if <code>some</code> stopped being simp-normal</p>",
        "id": 222597955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610551958
    }
]