[
    {
        "content": "<p>I'm looking for a lifeline here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">expand_dvd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span>  <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">iff.rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dvd_mul_a_b_then_a_or_b</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">exists_eq_mul_right_of_dvd</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">or.inr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">expand_dvd</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The tactic state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">abx</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span>\n<span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>It seems like an obvious fact but I'm blanking out and I don't see it already in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dvd\">docs#dvd</a></p>",
        "id": 222247978,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610321567
    },
    {
        "content": "<p>Do you know the maths proof? I'm particularly interested in your answer this time, because in this case you're wasting your time -- what you're trying to prove here is false. You have to know the maths proof.</p>",
        "id": 222248017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610321641
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/slim_check.html\"><code>slim_check</code></a> can find lots of counterexamples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dvd_mul_a_b_then_a_or_b</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">slim_check</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">===================</span>\n<span class=\"cm\">Found problems!</span>\n\n<span class=\"cm\">a := 1198</span>\n<span class=\"cm\">b := 18</span>\n<span class=\"cm\">x := 4</span>\n<span class=\"cm\">(0 shrinks)</span>\n<span class=\"cm\">-------------------</span>\n\n<span class=\"cm\">state:</span>\n<span class=\"cm\">a b x : ℕ,</span>\n<span class=\"cm\">h : x ∣ a * b</span>\n<span class=\"cm\">⊢ x ∣ a ∨ x ∣ b</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 222248300,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610322118
    },
    {
        "content": "<p>Oh nice! It's about time I stopped forgetting that <code>slim_check</code> exists.</p>",
        "id": 222248345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610322157
    },
    {
        "content": "<p>I wonder... Can slim check work in \"reverse\" trying to find additional hypotheses that will \"fix\" a statement?</p>",
        "id": 222248594,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610322581
    },
    {
        "content": "<p><code>h : false</code> will fix this one</p>",
        "id": 222248639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610322606
    },
    {
        "content": "<p>Yeah, it needs to be a bit more clever than that <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 222248641,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610322632
    },
    {
        "content": "<p>Lars -- if x is 0 or 1 or prime you're OK. But I'm not sure if a computer could spot that!</p>",
        "id": 222248651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610322668
    },
    {
        "content": "<p>The smartest thing to do on this occasion would be to try values of x sequentially, figure out which ones seem to work, and then to query <a href=\"http://oeis.org\">oeis.org</a> to try and find out what's going on. But even here there's a subtlety -- you have to know that it's a condition on x which gives you the interesting theorem, as opposed to a condition on a or b.</p>",
        "id": 222248719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610322801
    },
    {
        "content": "<p>lol <a href=\"https://oeis.org/A158611\">https://oeis.org/A158611</a></p>",
        "id": 222248768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610322846
    },
    {
        "content": "<p>Oooh searching oeis is a very interesting idea!</p>",
        "id": 222248780,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610322885
    },
    {
        "content": "<p>In the old days you had to search Don Zagier, which was much more inconvenient.</p>",
        "id": 222248792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610322908
    },
    {
        "content": "<p>I remember when people started uploading pari code to OEIS which produced the sequences -- I thought it was a neat idea. Now I'm thinking that if enough people started uploading Lean code to produce the functions, you really could get something neat :-) Can we port the pari code to Lean?</p>",
        "id": 222248859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610323047
    },
    {
        "content": "<p>is there a tactic that knows how to instead look at the type of the goal and suggest hypotheses based on things in mathlib already with that goal type?</p>",
        "id": 222249170,
        "sender_full_name": "Julian Berman",
        "timestamp": 1610323530
    },
    {
        "content": "<p>There's the <code>#find</code> command</p>",
        "id": 222249228,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610323600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  you're right, I didn't consider the possibility that <code>x</code> could be a product of a factor in <code>a</code> and a factor in <code>b</code>.</p>\n<p>I was actually trying to prove this lemma which is also false by <code>slim_check</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">neg_dvd_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">slim_check</span>\n</code></pre></div>\n<p>The counterexample is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">34</span>\n<span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span>\n<span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span>\n</code></pre></div>",
        "id": 222249367,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610323810
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  for <code>slim_check</code>.</p>",
        "id": 222249379,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610323841
    },
    {
        "content": "<p>or x=4, a=b=2.</p>",
        "id": 222249390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610323871
    }
]