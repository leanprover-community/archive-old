[
    {
        "content": "<p>I could not find the instances below: am I missing some import?  Does it make sense to PR it?  Or should the solution be to have only a single <code>cancel_comm_monoid</code> class, instead of <code>cancel_left_comm_monoid</code>,<code>cancel_right_comm_monoid</code> and <code>cancel_comm_monoid</code>, with crossed instances relating them?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">right_of_left</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">left_cancel_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">right_cancel_comm_monoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_right_cancel</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">ac</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">ac</span><span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_left_cancel</span> <span class=\"n\">ac</span><span class=\"o\">,</span>\n <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">left_cancel_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">left_of_right</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">right_cancel_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">left_cancel_comm_monoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 233817352,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617973718
    },
    {
        "content": "<p>Here are a bunch of (missing?/unneeded) instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">right_of_left</span> <span class=\"o\">[</span><span class=\"n\">left_cancel_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">right_cancel_comm_monoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_right_cancel</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">ac</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">ac</span><span class=\"o\">},</span> <span class=\"n\">exact</span> <span class=\"n\">mul_left_cancel</span> <span class=\"n\">ac</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">left_cancel_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">left_of_right</span> <span class=\"o\">[</span><span class=\"n\">right_cancel_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">left_cancel_comm_monoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">bc</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">bc</span><span class=\"o\">},</span> <span class=\"n\">exact</span> <span class=\"n\">mul_right_cancel</span> <span class=\"n\">bc</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">right_cancel_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">cancel_of_left</span> <span class=\"o\">[</span><span class=\"n\">left_cancel_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cancel_comm_monoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">left_cancel_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">right_cancel_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">cancel_of_right</span> <span class=\"o\">[</span><span class=\"n\">right_cancel_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cancel_comm_monoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">left_cancel_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">right_cancel_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 233818907,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617974307
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/left_cancel_comm_monoid\">docs#left_cancel_comm_monoid</a>, for the lazy like me</p>",
        "id": 233819350,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617974469
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/left_cancel_comm_monoid\">docs#left_cancel_comm_monoid</a>  ← Sorry, simply my attempt at seeing how to generate the link!</p>",
        "id": 233819496,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617974523
    },
    {
        "content": "<p>Unless there is a reason for preferring these typeclasses, I would opt for having a single <code>cancel_comm_monoid</code> typeclass, with \"asymmetric\" fields, choosing, say, <code>mul_left_cancel</code>.</p>",
        "id": 233819936,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617974686
    },
    {
        "content": "<p>And, if such a thing exist, also <code>cancel_semigroup</code>...</p>",
        "id": 233819985,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617974705
    },
    {
        "content": "<p>Looks like they were added in <a href=\"https://github.com/leanprover-community/mathlib/issues/3688\">#3688</a> and we didn't realize <code>left</code> + <code>comm</code> is exactly the same as <code>right</code> + <code>comm</code>.</p>",
        "id": 233819992,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617974710
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/left_cancel_comm_semigroup\">docs#left_cancel_comm_semigroup</a> may not exist...</p>",
        "id": 233820045,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617974730
    },
    {
        "content": "<p>So yes, defining <code>cancel_comm_monoid extends left_cancel_monoid, comm_monoid</code> and then proving <code>right_cancel</code> as well, looks like the best option.</p>",
        "id": 233820105,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617974761
    },
    {
        "content": "<p>(i.e. provide instances <code>cancel_comm_monoid.to_right_cancel_monoid</code> and <code>cancel_comm_monoid.to_cancel_monoid</code>.)</p>",
        "id": 233820218,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617974805
    },
    {
        "content": "<p>Actually, judging from the number of instances, let's promote <code>right_cancel_comm_monoid</code> to be the one true typeclass.</p>",
        "id": 233820324,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617974857
    },
    {
        "content": "<p>...and there are the <code>add</code> versions as well.</p>",
        "id": 233820339,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617974862
    },
    {
        "content": "<p>Unfortunately <code>@[to_additive]</code> can't autogenerate structures (like typeclasses), so we have to write out the class twice :(</p>",
        "id": 233820598,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617974955
    },
    {
        "content": "<p>for the left version, there is this comment in the code:<br>\n-- TODO: I found 1 (one) lemma assuming <code>[add_left_cancel_monoid]</code>.<br>\n-- Should we port more lemmas to this typeclass?<br>\nI guess that I am going to be the one taking, at least in part, this to completion!</p>",
        "id": 233820606,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617974957
    },
    {
        "content": "<p>Anne, or rather, in this case, remove them twice!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 233820650,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617974983
    },
    {
        "content": "<p>Ok, so I am going to keep the <code>right_comm</code> code, except that I remove the word <code>right</code> from it.  Then, I change the <code>left_comm</code> classes to instance, correct?</p>",
        "id": 233820941,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617975096
    },
    {
        "content": "<p>Finally, I remove what is now <code>comm</code> with no indication of <code>left/right</code>.</p>\n<p>From a procedural point of view, I would begin with removing the <code>comm</code> [no left/right], then promote <code>right_comm</code> to <code>comm</code> only and finally instance the <code>left</code>.</p>",
        "id": 233821127,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617975174
    },
    {
        "content": "<p>Sounds good. Don't we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cancel_comm_monoid\">docs#cancel_comm_monoid</a> already?</p>",
        "id": 233821137,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617975177
    },
    {
        "content": "<p>Yes, but it extends both.  Ah, I could make it extend only right, erase right and instance left.  This is simpler, you are right!</p>",
        "id": 233821239,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617975222
    },
    {
        "content": "<p>So make sure that the \"new\" <code>cancel_comm_monoid</code> has the same lemmas and instances as the \"old\" <code>cancel_comm_monoid</code>.</p>",
        "id": 233821247,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617975226
    },
    {
        "content": "<p>I will get down to it!  I am sure that lean will let me know if I mess something up...</p>",
        "id": 233821358,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617975257
    },
    {
        "content": "<p>What does <code>ancestor</code> mean below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[protect_proj, ancestor add_left_cancel_comm_monoid add_right_cancel_comm_monoid]</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_cancel_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">add_left_cancel_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">add_right_cancel_comm_monoid</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>Should this become </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[protect_proj, ancestor add_right_cancel_comm_monoid]</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_cancel_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">add_right_cancel_comm_monoid</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 233821568,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617975354
    },
    {
        "content": "<p>I am not exactly sure to be honest! I think <code>protect_proj</code> will give the <code>protected</code> attribute to the fields of the structure (so that <code>cancel_comm_monoid.mul</code> doesn't become <code>mul</code> when the <code>cancel_comm_monoid</code> namespace is open).</p>",
        "id": 233821981,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617975493
    },
    {
        "content": "<p>And <code>ancestor</code> is used by the <code>subtype_instance</code> tactic to copy over fields, it looks like. So just copy over what comes after the <code>extends</code>.</p>",
        "id": 233822201,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617975599
    },
    {
        "content": "<p>So <code>add_cancel_comm_monoid</code> would look something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[protect_proj, ancestor add_comm_monoid add_right_cancel_monoid]</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_cancel_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">add_right_cancel_monoid</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 233822333,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617975643
    },
    {
        "content": "<p>Hence, the <code>ancestor</code> thing will be \"forgotten\" in the <code>instance</code> from <code>cancel_comm</code> to <code>cancel_left</code>, right?</p>",
        "id": 233823359,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617976021
    },
    {
        "content": "<p>Yes, it is just to keep track of which fields to copy and which ones to add when declaring a new instance via tactics.</p>",
        "id": 233823641,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617976124
    },
    {
        "content": "<p>Why not extend both but fill out the redundant axiom with opt_param?</p>",
        "id": 233824288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617976365
    },
    {
        "content": "<p>What does opt_param mean?</p>",
        "id": 233824987,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617976614
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/preorder/src\">src#preorder</a> has an example</p>",
        "id": 233825221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617976700
    },
    {
        "content": "<p>The <code>(lt := ...)</code> parameter fills that field automatically</p>",
        "id": 233825350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617976763
    },
    {
        "content": "<p>I had seen this and I remember having been happy that it \"just worked\".  I guess that now is my time to make it \"just work\", right?  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 233825391,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617976786
    },
    {
        "content": "<p>also, when I do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Commutative version of cancel_monoid. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor right_cancel_monoid left_cancel_monoid comm_monoid, to_additive add_cancel_comm_monoid]</span>\n<span class=\"kd\">class</span> <span class=\"n\">cancel_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">left_cancel_monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">right_cancel_monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p><code>class</code> complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">map</span> <span class=\"n\">fields</span> <span class=\"n\">of</span> <span class=\"n\">cancel_comm_monoid</span>\n</code></pre></div>",
        "id": 233825676,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617976865
    },
    {
        "content": "<p>This disappears, though, if I remove the line with <code>@</code></p>",
        "id": 233825953,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617976958
    },
    {
        "content": "<p>In fact, simply erasing <code>to_additive add_cancel_comm_monoid</code> is enough to make the error go away.</p>",
        "id": 233827535,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617977531
    },
    {
        "content": "<p>Since the class just above <code>cancel_comm_monoid</code> is <code>add_cancel_comm_monoid</code>, maybe the <code>to_additive</code> is not needed?  I would have guessed that <code>to_additive</code> would have created exactly the class that is defined above, right?</p>",
        "id": 233827735,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617977602
    },
    {
        "content": "<p>Ah, Anne said that <code>to_additive</code> does not work with classes...</p>",
        "id": 233827816,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617977634
    },
    {
        "content": "<p>So, I probably need it, but I am not able to make it work.</p>",
        "id": 233827871,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617977646
    },
    {
        "content": "<p>Sorry about the noise: I think that I am making progress!  Ignore the previous comments, for the moment!</p>",
        "id": 233828548,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617977904
    },
    {
        "content": "<p>You need to add the <code>to_additive</code> after the class</p>",
        "id": 233830391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617978599
    },
    {
        "content": "<p>If the proof of an <code>instance</code> is <code>by apply_instance</code>, then that <code>instance</code> is not needed, correct?</p>\n<p>This means that I will want to prove instances <code>[left_cancel] + [comm] =&gt; [cancel] + [comm]</code> and similarly for <code>right</code> and then same again for <code>add</code>.</p>",
        "id": 233830422,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617978603
    },
    {
        "content": "<p>Those don't sound like they should be instances</p>",
        "id": 233830579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617978650
    },
    {
        "content": "<p>they will loop</p>",
        "id": 233830591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617978655
    },
    {
        "content": "<p>Mario, right now, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Commutative version of add_cancel_monoid. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor add_right_cancel_monoid add_left_cancel_monoid add_comm_monoid]</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_cancel_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">add_right_cancel_monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">add_left_cancel_monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span>\n\n<span class=\"sd\">/-- Commutative version of cancel_monoid. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor right_cancel_monoid left_cancel_monoid comm_monoid,</span>\n<span class=\"kd\">  to_additive add_cancel_comm_monoid]</span>\n<span class=\"kd\">class</span> <span class=\"n\">cancel_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">right_cancel_monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">left_cancel_monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">M</span>\n\n<span class=\"sd\">/-- An add_cancel_comm_monoid. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">add_left_cancel_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_cancel_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_left_cancel_monoid</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>I imagine that the last instance can be removed.  Is the rest looking good?</p>",
        "id": 233830683,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617978685
    },
    {
        "content": "<p>Don't put <code>to_additive</code> on the class definition</p>",
        "id": 233830814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617978729
    },
    {
        "content": "<p>Why not on the class definition?</p>",
        "id": 233830842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617978738
    },
    {
        "content": "<p>Ok, no <code>instances [left_cancel] + [comm] =&gt; [cancel] + [comm]</code>.  Should there be defs instead?  Or simply not there at all?</p>",
        "id": 233830852,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617978743
    },
    {
        "content": "<p>Don't we do that everywhere?</p>",
        "id": 233830855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617978744
    },
    {
        "content": "<p>It has to be done after the definition of the class</p>",
        "id": 233830901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617978756
    },
    {
        "content": "<p>I copied the <code>to_additive</code> adapting what was already there.  Still, I am happy to keep it or remove it, as needed-</p>",
        "id": 233830997,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617978777
    },
    {
        "content": "<p>although maybe my info is out of date, it used to be a lot more annoying</p>",
        "id": 233831054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617978789
    },
    {
        "content": "<p>Are you sure? I thought that's just because you can't put <code>to_additive</code> on the <code>mul</code> version until the add version is defined</p>",
        "id": 233831085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617978802
    },
    {
        "content": "<p>And for some reason lots of files define the add version after the mul version</p>",
        "id": 233831116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617978815
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A `group` is a `monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.</span>\n\n<span class=\"sd\">There is also a division operation `/` such that `a / b = a * b⁻¹`,</span>\n<span class=\"sd\">with a default so that `a / b = a * b⁻¹` holds by definition.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[protect_proj, ancestor div_inv_monoid]</span>\n<span class=\"kd\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">div_inv_monoid</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- An `add_group` is an `add_monoid` with a unary `-` satisfying `-a + a = 0`.</span>\n\n<span class=\"sd\">There is also a binary operation `-` such that `a - b = a + -b`,</span>\n<span class=\"sd\">with a default so that `a - b = a + -b` holds by definition.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[protect_proj, ancestor sub_neg_monoid]</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">sub_neg_monoid</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_left_neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">group</span>\n</code></pre></div>",
        "id": 233831151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617978830
    },
    {
        "content": "<p>like this</p>",
        "id": 233831156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617978833
    },
    {
        "content": "<p>Yes, exactly - the attribute is only separate because the definitions are in the wrong order</p>",
        "id": 233831219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617978848
    },
    {
        "content": "<p>My guess would be that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[foo, bar]</span>\n<span class=\"kd\">class</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[foo]</span>\n<span class=\"kd\">class</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"o\">]</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>are indistinguishable to lean</p>",
        "id": 233831351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617978887
    },
    {
        "content": "<p>No, they have different effects, because in the first one <code>bar</code> can act while <code>X</code> is still being constructed, so it can influence the constructors and such</p>",
        "id": 233831681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617978971
    },
    {
        "content": "<p>for example <code>@[class] structure foo := (a : nat)</code> vs <code>structure foo := (a : nat)  attribute [class] foo</code> have different types for <code>foo.a</code></p>",
        "id": 233831827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617979009
    },
    {
        "content": "<p>Ok, I feel like the dog playing cards of the memes... the conclusion is that I should put the to additive <em>after</em> the definition as an attribute, right?</p>",
        "id": 233832418,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617979214
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/BxiFu8N9Fz3ajlpxAfIrQlDS/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BxiFu8N9Fz3ajlpxAfIrQlDS/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/BxiFu8N9Fz3ajlpxAfIrQlDS/image.png\"></a></div>",
        "id": 233832493,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617979241
    },
    {
        "content": "<p>I think so: define <code>class add_cancel_comm_monoid</code>, then <code>class cancel_comm_monoid</code>, then <code>attribute [to_additive] cancel_comm_monoid</code>.</p>",
        "id": 233832714,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617979323
    },
    {
        "content": "<p>While I am at it, should the second be the preferred form, then?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[protect_proj, ancestor left_cancel_semigroup monoid, to_additive add_left_cancel_monoid]</span>\n<span class=\"kd\">class</span> <span class=\"n\">left_cancel_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">left_cancel_semigroup</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">monoid</span> <span class=\"n\">M</span>\n\n\n<span class=\"c1\">--better as follows than above?</span>\n<span class=\"kd\">@[protect_proj, ancestor left_cancel_semigroup monoid]</span>\n<span class=\"kd\">class</span> <span class=\"n\">left_cancel_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">left_cancel_semigroup</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">monoid</span> <span class=\"n\">M</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">add_left_cancel_monoid</span>\n</code></pre></div>",
        "id": 233832956,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617979406
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7134\">#7134</a></p>",
        "id": 233835945,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617980429
    },
    {
        "content": "<p>It already has an error.  I will try to fix it, but may need further assistance.  Sorry for opening this can of worms and not being able to clean up my own mess...</p>",
        "id": 233836158,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617980460
    },
    {
        "content": "<p>Given my very superficial understanding of the discussion above, what is below seem to be in the wrong order: should the two definitions be swapped around?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A commutative monoid is a monoid with commutative `(*)`. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor monoid comm_semigroup]</span>\n<span class=\"kd\">class</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">comm_semigroup</span> <span class=\"n\">M</span>\n\n<span class=\"sd\">/-- An additive commutative monoid is an additive monoid with commutative `(+)`. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor add_monoid add_comm_semigroup]</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">add_comm_semigroup</span> <span class=\"n\">M</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">comm_monoid</span>\n</code></pre></div>",
        "id": 233839471,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617981107
    },
    {
        "content": "<p>(This is the order in which they appear in the file <code>algebra/group/defs</code>.)</p>",
        "id": 233839607,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617981134
    },
    {
        "content": "<p><code>attribute [to_additive] add_left_cancel_monoid</code> means \"<code>add_left_cancel_monoid</code> is the multiplicative version of some additive lemma\"</p>",
        "id": 233839903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617981214
    },
    {
        "content": "<p>Which is obviously not what you meant!</p>",
        "id": 233839939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617981225
    },
    {
        "content": "<p>That attribute is only supposed to go on multiplicative things</p>",
        "id": 233839957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617981232
    },
    {
        "content": "<p>I think you probably meant <code>attribute [to_additive add_left_cancel_monoid] left_cancel_monoid</code></p>",
        "id": 233840107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617981263
    },
    {
        "content": "<p>Ok, but I think that I did not change this: this is what already was in the file <em>before</em> I touched it!<br>\n(Let me check that this is really true!)</p>",
        "id": 233840128,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617981268
    },
    {
        "content": "<p>(your claim is not really true!)</p>",
        "id": 233840167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617981279
    },
    {
        "content": "<p><code>@[to_additive x] def y</code> means \"x is the additive version of y\"</p>",
        "id": 233840419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617981316
    },
    {
        "content": "<p>Usually you can omit <code>x</code> and lean works it out from the name</p>",
        "id": 233840500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617981328
    },
    {
        "content": "<p>Ok, I will change this, but looking at the file in git, I do not think that I wrote this.  Still, I am happy to change it!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 233841011,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617981422
    },
    {
        "content": "<p>Is this the correct form, then?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An additive commutative monoid is an additive monoid with commutative `(+)`. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor add_monoid add_comm_semigroup]</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">add_comm_semigroup</span> <span class=\"n\">M</span>\n\n<span class=\"sd\">/-- A commutative monoid is a monoid with commutative `(*)`. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor monoid comm_semigroup]</span>\n<span class=\"kd\">class</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">comm_semigroup</span> <span class=\"n\">M</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">add_comm_monoid</span>\n</code></pre></div>",
        "id": 233841862,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617981626
    },
    {
        "content": "<p>No!</p>",
        "id": 233842532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617981891
    },
    {
        "content": "<p>You've told lean that <code>add_comm_monoid</code> is the multiplicative version</p>",
        "id": 233842616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617981921
    },
    {
        "content": "<p>I'm sorry, I am trying to understand and keep everything straight, but I am clearly failing.  I will try to produce a better version!</p>",
        "id": 233843103,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617982110
    },
    {
        "content": "<p>That example above isn't copied from group/basic, is assume?</p>",
        "id": 233843221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617982184
    },
    {
        "content": "<p>This works in this case, right?  Or am I still confused?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An additive commutative monoid is an additive monoid with commutative `(+)`. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor add_monoid add_comm_semigroup]</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">add_comm_semigroup</span> <span class=\"n\">M</span>\n\n<span class=\"sd\">/-- A commutative monoid is a monoid with commutative `(*)`. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor monoid comm_semigroup]</span>\n<span class=\"kd\">class</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">comm_semigroup</span> <span class=\"n\">M</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">comm_monoid</span>\n</code></pre></div>",
        "id": 233843230,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617982188
    },
    {
        "content": "<p>Your last line is different between that snippet and the previous one</p>",
        "id": 233843324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617982210
    },
    {
        "content": "<p>The most recent one is correct</p>",
        "id": 233843350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617982222
    },
    {
        "content": "<p>The very first one was, the one with the comm_monoid <em>before</em> the `add_comm_monoid*.</p>",
        "id": 233843354,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617982224
    },
    {
        "content": "<p>Yes, I changed the last line, since I imagine that that would fix the issue...</p>",
        "id": 233843441,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617982253
    },
    {
        "content": "<p>That most recent one looks fine, and it doesn't care what order the two classes go in as long as the attribute is after both</p>",
        "id": 233843522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617982286
    },
    {
        "content": "<p>Finally I did something right!</p>",
        "id": 233843793,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617982373
    },
    {
        "content": "<p>So, as a \"generic rule\", the name not inside the square brackets should <em>not</em> had <code>add</code>, correct?</p>",
        "id": 233843988,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617982433
    },
    {
        "content": "<p>To be honest, I had completely missed the distinction between inside and outside the square brackets.  I hope that I have it straight now.</p>",
        "id": 233844295,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617982528
    },
    {
        "content": "<p><code>@[to_additive x] def y</code> attaches the attribute to <code>y</code>. <code>attribute [to_additive] x</code> attaches the attribute to <code>x</code>.</p>",
        "id": 233845716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617983046
    },
    {
        "content": "<p>You either attach the tag when you're making the definition (e.g. <code>@[simp] theorem blah...</code>) or you attach the tag afterwards (e.g. <code>theorem blah...</code> and then later <code>attribute [simp] blah</code>).</p>",
        "id": 233845941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617983158
    },
    {
        "content": "<p>Ah, Kevin, one more \"subtlety\" that I had missed!  Anyway, the PR has been building for over 5s now, so it must all be correct... <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 233846063,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617983192
    },
    {
        "content": "<p>You can use <code>#print blah</code> to see all the tags attached to the definition/theorem called <code>blah</code> -- they appear at the very top of the output.</p>",
        "id": 233846194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617983258
    },
    {
        "content": "<p>Also, from the discussion above, I gathered that <code>@[to_additive]</code> and <code>attribute [to_additive]</code> are not equivalent and the latter seems to be preferred.</p>",
        "id": 233846298,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617983296
    },
    {
        "content": "<p>I think they are equivalent. I think you're confused because the <code>to_additive</code> attribute can take other inputs.</p>",
        "id": 233846446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617983373
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/aa1fa0b2ba0739deaec3fe65f42640998120bc80/src/algebra/free_monoid.lean#L24-L26\">here</a> is an example in mathlib where the to_additive attribute is actually taking an input -- a string, which is the docstring for the additive version. <code>to_additive</code> is a very flexible attribute and I completely agree that there is right now no good place to read about how it works.</p>",
        "id": 233846637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617983438
    },
    {
        "content": "<p>Kevin, this is what made me say what I did: honestly, I do not understand what the difference is/might be/isn't!<br>\n<a href=\"#narrow/stream/113489-new-members/topic/mul_right_comm_monoid/near/233831681\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/mul_right_comm_monoid/near/233831681</a></p>",
        "id": 233846670,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617983452
    },
    {
        "content": "<p>The things you wrote above are equivalent, because you didn't give <code>to_additive</code> any inputs. The fun starts when you add other attributes at the same time, or add attributes which do funky stuff.</p>",
        "id": 233846755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617983492
    },
    {
        "content": "<p>I am confused on so many levels that I do not even make sense to myself...</p>",
        "id": 233847061,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617983620
    },
    {
        "content": "<p>For example <code>@[simp, to_additive] def x...</code> is different to <code>@[to_additive, simp] def x...</code> because in the first one the additivised version of x will also get the simp attribute.</p>",
        "id": 233847198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617983659
    },
    {
        "content": "<p>some attributes are quite powerful and subtle things, and <code>to_additive</code> is one of them. The way I learnt how it worked was just by looking at files like <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/submonoid/basic.lean\">submonoid.basic</a> and making sure I understood what was going on and why things were done the way they were done. But I guess what really taught me was writing some code like this myself, and being forced to learn it (like you are now).</p>",
        "id": 233847652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617983838
    },
    {
        "content": "<p>I think that when I was at your stage (a competent Lean programmer and a mathematician) I started to ask myself whether I could actually <em>completely</em> understand random Lean files in mathlib, as opposed to just \"basically understanding what was going on\". I still ignore pretty much all <code>meta</code> and <code>do</code> code, but everything else I decided that I should probably be able to get to the bottom of it (and of course there are mathematicians who decide to understand <code>meta</code> code too...)</p>",
        "id": 233848035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617983998
    },
    {
        "content": "<p>Ok, thanks for the encouragement!  I think that the PR is building now, so I must have learned <em>something</em>! <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 233848162,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617984022
    },
    {
        "content": "<p>Custom attributes like <code>to_additive</code> and <code>simps</code> (but not <code>simp</code>, I think) are basically metaprograms like tactics that run as Lean processes a declaration. We should expand the documentation if the way to use one isn't completely clear.</p>",
        "id": 233848304,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617984072
    },
    {
        "content": "<p>You should write some <code>to_additive</code> doc before you forget everything. The basic things are: (1) basic usage (it makes an additive version of a multiplicative lemma) (2) add the attribute after <code>simp</code> if you want the <code>simp</code> to apply to the additive version (3) for structures (rather than theorems) you have to make the structure yourself and then tag it later (your confusion about adding the attribute at the same time or afterwards) (4) link to the \"dictionary\" which auto-generates things like theorem names (5) how to override docstrings e.g. with <code>add_decl_doc</code> (see for example line 279 of submonoid.basic, I linked to the file above) (6) the gotcha with g^n vs n smul g and how it breaks everything.</p>",
        "id": 233848632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617984185
    },
    {
        "content": "<p>Well, at the moment, I am having difficulty even keeping track of whether something is inside or outside some brackets, so my issues are probably at a more fundamental level than what the documentation might say.</p>\n<p>That and having to keep track of whether there was an <code>add</code> or not, a <code>right + comm</code> or not really crossed my eyes!</p>",
        "id": 233848713,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617984209
    },
    {
        "content": "<p>Ok, I might give this a shot!  Actually, your summary is already clearer than what is in my mind...</p>",
        "id": 233848891,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617984280
    },
    {
        "content": "<p>oh also the docstring trick</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- multiplicative docstring -/</span>\n<span class=\"kd\">@[to_additive \"additive docstring\"]</span> <span class=\"kd\">def</span> <span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion...</span>\n</code></pre></div>\n<p>and the \"choose another name rather than the auto-generated one\" trick e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive ordered_add_comm_group.add_lt_add_left]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ordered_comm_group.mul_lt_mul_left'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>(remove the prime, because there will be some ring version which doesn't have an additive counterpart)</p>",
        "id": 233849214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617984420
    },
    {
        "content": "<p>The final aspect is tagging something with <code>to_additive</code> \"out of band\", that is, via an <code>attribute ...</code> line like at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">order_of_one</span> <span class=\"o\">:</span> <span class=\"n\">order_of</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">order_of_le_of_pow_eq_one</span> <span class=\"o\">(</span><span class=\"n\">nat.one_pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pow_one</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.succ_le_of_lt</span> <span class=\"o\">(</span> <span class=\"n\">order_of_pos'</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">nat.one_pos</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span> <span class=\"mi\">1</span><span class=\"o\">⟩⟩)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">add_order_of_zero</span> <span class=\"o\">:</span> <span class=\"n\">add_order_of</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">order_of_of_add_eq_add_order_of</span><span class=\"o\">]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_order_of_zero</span><span class=\"o\">]</span> <span class=\"n\">order_of_one</span>\n</code></pre></div>",
        "id": 233849553,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617984547
    },
    {
        "content": "<p>Is there a way to get Lean to list the attributes of a given lemma?  Say that I want to discover whether an autogenerated lemma is or isn't <code>simp</code>: chan I <code>#check</code> or <code>#print</code> or something like this to find out?</p>",
        "id": 233854455,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617986495
    },
    {
        "content": "<p><code>#print</code> and look at the very top of the output.</p>",
        "id": 233855636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617986997
    },
    {
        "content": "<p>Thanks, Kevin!</p>",
        "id": 233856664,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617987449
    },
    {
        "content": "<p>To my surprise, once I fixed the silly errors that I introduced, PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7134\">#7134</a> \"just worked\"!  The 4 typeclasses <code>(add_)left_cancel_comm_monoid, (add_)right_cancel_comm_monoid</code> can leave mathlib and no one would notice...</p>",
        "id": 233880515,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617997675
    },
    {
        "content": "<p>I also just noticed that this might be the first time that a PR of mine actually has a net <em>negative</em> effect on the number of lines of code in mathlib.</p>",
        "id": 233884954,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617999754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/mul_right_comm_monoid/near/233884954\">said</a>:</p>\n<blockquote>\n<p>I also just noticed that this might be the first time that a PR of mine actually has a net <em>negative</em> effect on the number of lines of code in mathlib.</p>\n</blockquote>\n<p>\"Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it.\" Congratulations, you are now a genius :)</p>",
        "id": 233893652,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618003160
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> to <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/mul_right_comm_monoid\">#Is there code for X? &gt; mul_right_comm_monoid</a></p>",
        "id": 233909193,
        "sender_full_name": "Notification Bot",
        "timestamp": 1618013146
    }
]