[
    {
        "content": "<p>I have a goal of form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"mi\">9</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)}</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">zsqrtd.to_real</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What tactics or theorems are there in mathlib to rewrite this set equality into something I can operate on?</p>",
        "id": 221855319,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1609993103
    },
    {
        "content": "<p><code>ext</code> and then <code>rw</code> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of_eq\">docs#set.mem_set_of_eq</a> might be a good start?</p>",
        "id": 221859875,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609998942
    },
    {
        "content": "<p>Thanks, that rewrites the above to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"mi\">9</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">zsqrtd.to_real</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which seems helpful because now I can work with the existential quantifier directly and it's contents.</p>",
        "id": 221974954,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610041415
    }
]