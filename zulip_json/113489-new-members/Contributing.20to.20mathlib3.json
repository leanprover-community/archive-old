[
    {
        "content": "<p>I want to try contributing an undergraduate topic into mathlib. So far I have been learning with Lean 4 and I've found that I prefer it a lot more than Lean 3. Is it still worth contributing to mathlib3 if everything is getting moved over into mathlib4?</p>",
        "id": 253328014,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631655366
    },
    {
        "content": "<p>mathlib3 a.k.a. mathlib is being moved over into lean 4, so sure it's worth contributing to that. mathlib4 is just some fun experimentation and the current plan is that this is not going to be Lean4 maths library.</p>",
        "id": 253331391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631657238
    },
    {
        "content": "<p>Ok, thanks. I noticed everything in mathlib is proved in the highest level of abstraction possible. Can I still contribute if I don't know enough abstract math to do that? Areas I was thinking of are matrices and complex analysis</p>",
        "id": 253332231,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631657673
    },
    {
        "content": "<p>Unfortunately complex analysis is being formalised in mathlib in quite a complicated way; there is a plan which is slowly being executed, and it involves a lot of abstract maths. Matrices on the other hand are in mathlib already.</p>",
        "id": 253334336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631658861
    },
    {
        "content": "<p>I've looked at the matrix files just a little bit. What about any of these topics that are listed on the undergrad todo page?<br>\n change of basis, rank of a matrix, elementary row operations, elementary column operations, Gaussian elimination, row-reduced matrices.</p>",
        "id": 253335165,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631659344
    },
    {
        "content": "<p>Out of curiosity, how is complex analysis being formalized? Which math does it involve?</p>",
        "id": 253335247,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631659403
    },
    {
        "content": "<p>Matrices: Oh if these are not done then they're definitely fair game! But I would definitely discuss any specific plans you have for this with experts before you launch into anything.</p>",
        "id": 253335260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631659413
    },
    {
        "content": "<p>complex analysis: the theory of integration and Cauchy's integral formula are being deduced from more general results involving  some n-dimensional version of Stokes' theorem in real analysis.</p>",
        "id": 253335367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631659457
    },
    {
        "content": "<p>Elementary operations and a form of Gaussian elimination were recently added in <a href=\"https://github.com/leanprover-community/mathlib/issues/8898\">#8898</a></p>",
        "id": 253342371,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631663993
    },
    {
        "content": "<p>Hi, I'd like to contribute some things to mathlib here's what I'd like to add:</p>\n<ul>\n<li>\n<p>Generalized binomial coefficients: <br>\n<a href=\"/user_uploads/3121/s3R4fQrqIiIkErDnHF_jhpMO/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/s3R4fQrqIiIkErDnHF_jhpMO/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/s3R4fQrqIiIkErDnHF_jhpMO/image.png\"></a></div></li>\n<li>\n<p>Multinomial coefficients<br>\n<a href=\"/user_uploads/3121/UCgLQfqqVmBWGA-tlE32j5Mp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/UCgLQfqqVmBWGA-tlE32j5Mp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/UCgLQfqqVmBWGA-tlE32j5Mp/image.png\"></a></div></li>\n</ul>\n<p>Based on this conversation I have a good idea of what arguments the multinomial coefficient could take in:</p>\n<p><a href=\"/user_uploads/3121/jiwJH1otEL7FQLV9j8j2nQZb/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/jiwJH1otEL7FQLV9j8j2nQZb/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/jiwJH1otEL7FQLV9j8j2nQZb/image.png\"></a></div><p>Once we have these new types of coefficients I could possibly extend this to add in the multinomial theorem  as well as newtons binomial theorem which extends the usual binomial theorem to work for real numbers as well.</p>\n<p>I have a few questions:</p>\n<p>I'm aware that we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.choose\">docs#nat.choose</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_pow\">docs#add_pow</a>. Where would these new definitions go?</p>\n<p>I was trying to get an idea of how to define the new coefficients, so I took a look at the current definition we have for <code>nat.choose</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">choose</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>             <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Am I right that this is trying to pattern match in the following way?</p>\n<p>Anything choose 0 is 1, <br>\n0 choose some number is 0<br>\nfinally (n + 1 ) choose (k + 1) = n choose k + n choose (k + 1)  (recursive definition)</p>",
        "id": 272075792,
        "sender_full_name": "ccn",
        "timestamp": 1644990012
    },
    {
        "content": "<p>What's your goal? Are you wanting to prove Newton's binomial series expansion or something like that?</p>",
        "id": 272076202,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644990577
    },
    {
        "content": "<p>That’s the right way to read the definition, yes</p>",
        "id": 272077023,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644991530
    },
    {
        "content": "<p>Here's a branch containing the multinomial coefficient, using a <code>list</code> for <code>[k1, k2, ..., kn]</code>. <a href=\"https://github.com/leanprover-community/mathlib/blob/binomial/src/data/nat/choose/multinomial.lean#L12\">https://github.com/leanprover-community/mathlib/blob/binomial/src/data/nat/choose/multinomial.lean#L12</a></p>",
        "id": 272077278,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644991843
    },
    {
        "content": "<p>Well right now I have questions I'm working with that use multinomial coefficients and the generalized binomial coefficients, once we have them then I could try to prove newtons expansion yes.</p>",
        "id": 272077305,
        "sender_full_name": "ccn",
        "timestamp": 1644991876
    },
    {
        "content": "<p>Ideally the generalized binomial coefficient could take as input anything that has multiplication, subtraction by naturals, and division by naturals. That way you could both plug in real numbers directly or get a polynomial out of it.</p>\n<p>I'm not sure how to go about setting that up in that generality. Maybe it's not necessary, but I was trying to get it so that it could still take in natural numbers.</p>",
        "id": 272078379,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644993320
    },
    {
        "content": "<p>One thing I was experimenting with (but it doesn't help with division by naturals) is add-cancellative commutative semirings. They have a unique subtraction operation -- but giving a default instance for this seems problematic diamond-wise...</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">@[protect_proj, ancestor comm_semiring add_left_cancel_monoid]</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_cancel_comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">add_left_cancel_monoid</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[priority 0]</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"n\">comm_semiring.has_sub</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_cancel_comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sub</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exactI</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">h.some</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comm_semiring.sub_unique</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_cancel_comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">has_sub.sub</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:=</span> <span class=\"n\">h'.some_spec</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_left_cancel</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_cancel_comm_semiring</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_left_cancel</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_left_cancel</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n</div></div>",
        "id": 272078585,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644993591
    },
    {
        "content": "<p>Oh right, to avoid problems the subtraction can be required as additional data.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">@[protect_proj, ancestor comm_semiring add_left_cancel_monoid]</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_cancel_comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">add_left_cancel_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_sub</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">sub_eq_of_eq_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_cancel_comm_semiring</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sub_eq_of_eq_add</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.add_sub_cancel</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_cancel</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">add_left_cancel</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_sub</span> <span class=\"n\">ℕ</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">comm_semiring.has_sub</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sub</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exactI</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">h.some</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comm_semiring.sub_unique</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">has_sub.sub</span> <span class=\"n\">_</span> <span class=\"n\">comm_semiring.has_sub</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">dite</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:=</span> <span class=\"n\">h'.some_spec</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 272079191,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644994336
    },
    {
        "content": "<p>Why not just stick to ℚ-algebras? All the important examples like the reals and complexes and p-adics (hypergeometric functions etc) are ℚ-algebras.</p>",
        "id": 272086093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645000329
    },
    {
        "content": "<p>Is \"Q-algebra\" and \"char-zero division_ring\" synonymous?</p>",
        "id": 272261400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645105906
    },
    {
        "content": "<p>No reasons for a <code>Q</code>-algebra to be a division ring.</p>",
        "id": 272263970,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645106928
    },
    {
        "content": "<p>If anyone wants to work on this, here's a possible definition of the generalized binomial coefficient for ℚ-algebras. There's part of a proof that it coincides with <code>nat.choose</code> for natural numbers, though maybe it can be generalized to ℚ-algebras in general.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">binomial</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">binomial</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">binomial_eq</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">binomial</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat.choose</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binomial</span><span class=\"o\">],</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binomial</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- (↑n + 1)⁻¹ • 0 = 0</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binomial</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_mul_choose_eq</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- (↑(n + 1))⁻¹ • ↑(m.succ.choose n.succ * n.succ) = ↑(m.succ.choose n.succ)</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- maybe?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">binomial_eq'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">binomial</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat.choose</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 272284212,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645115102
    },
    {
        "content": "<p>Ok,  I think that definition looks good,  ( I can start with that) and then try to complete those lemmas. Since I'm still pretty new to contributing to mathlib, could you outline how I would get it in there?</p>\n<p>So far what I know is that I would fork the project make a branch, but then would this content go into it's own file?</p>",
        "id": 272555572,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645319864
    },
    {
        "content": "<p>What would I call that file?</p>",
        "id": 272555648,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645319933
    },
    {
        "content": "<p>What about <code>data.nat.choose.multi</code>, <code>data.nat.choose.multinomial</code>?</p>",
        "id": 272555743,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645320057
    },
    {
        "content": "<p>And for the generalized coefficients?</p>",
        "id": 272555770,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645320109
    },
    {
        "content": "<p>And for the q-analog, I guess <code>data.nat.choose.q_analog</code> or <code>data.nat.choose.q_binomial</code> (to avoid confusion with other q-analogs) is fair.</p>",
        "id": 272555831,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645320159
    },
    {
        "content": "<p>Ok, as for the different ways of approaching the multinomial which do you think is better, passing in a list or passing in a function?</p>",
        "id": 272555847,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645320186
    },
    {
        "content": "<p>If we pass in a list we can do <code>(m.map nat.factorial).prod</code> to dividie it</p>",
        "id": 272555855,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645320206
    },
    {
        "content": "<p>and if we pass in a function we can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod\">docs#finset.prod</a></p>",
        "id": 272555910,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645320260
    },
    {
        "content": "<p>Ok, so they both seem good</p>",
        "id": 272555921,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645320282
    },
    {
        "content": "<p>It looks like some work was already done on it: <a href=\"https://github.com/leanprover-community/mathlib/blob/binomial/src/data/nat/choose/multinomial.lean\">https://github.com/leanprover-community/mathlib/blob/binomial/src/data/nat/choose/multinomial.lean</a></p>",
        "id": 272555929,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645320295
    },
    {
        "content": "<p>In this situation is there a way to \"revive\" the branch and then I can get it to work? I don't even know what's wrong with that branch anyways...</p>",
        "id": 272555952,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645320324
    },
    {
        "content": "<p>I personally prefer the function version, because it emphasizes that there is no preferred order. And also it seems pretty convenient to prove the multinomial formula.</p>",
        "id": 272555957,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645320342
    },
    {
        "content": "<p>Ok, so in this case should I just make a new branch and work on it from there?</p>",
        "id": 272555968,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645320360
    },
    {
        "content": "<p>Yes of course, just ask Kyle and merge master.</p>",
        "id": 272555970,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645320361
    },
    {
        "content": "<p>(to your previous question)</p>",
        "id": 272556018,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645320373
    },
    {
        "content": "<p>Do you think it would be worth it to convert it to be working for the function version?</p>",
        "id": 272556030,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645320395
    },
    {
        "content": "<p>I'm open to trying that</p>",
        "id": 272556034,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645320401
    },
    {
        "content": "<p>I think you could try both.</p>",
        "id": 272556048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645320424
    },
    {
        "content": "<p>Arguably, Kyle already did half the job.</p>",
        "id": 272556060,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645320439
    },
    {
        "content": "<p>When you make new branches like this, do you try and get the definition in and then prove basic facts about it all at once? Or first get the definition, wait till it merges in and then add them?</p>",
        "id": 272556122,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645320488
    },
    {
        "content": "<p>I guess I only wonder because in the latter then people can start using the definition before you're done proving everything else...</p>",
        "id": 272556154,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645320544
    },
    {
        "content": "<p>Well, you should prove at least enough to demonstrate that your definition is reasonable.</p>",
        "id": 272556262,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645320652
    },
    {
        "content": "<p>Ok thanks for the tips</p>",
        "id": 272556412,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645320837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib3/near/272555957\">said</a>:</p>\n<blockquote>\n<p>I personally prefer the function version, because it emphasizes that there is no preferred order. And also it seems pretty convenient to prove the multinomial formula.</p>\n</blockquote>\n<p>I suspect it's easiest to prove things initially with the list version (precisely because it has an order) then bolt the function version on top.</p>\n<p>There are identities involving adding and removing elements of this list, which is harder with functions, but lists are designed for this.</p>",
        "id": 272605489,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645378317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">Callum Cassidy-Nolan</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib3/near/272555968\">said</a>:</p>\n<blockquote>\n<p>Ok, so in this case should I just make a new branch and work on it from there?</p>\n</blockquote>\n<p>I suggest making a new branch, <code>ccm_multinomial</code> or something. The current branch is old and has some stuff written by myself and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> mixed together, and once analogues of everything in the old branch end up in mathlib, it can be deleted.</p>",
        "id": 272605569,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645378416
    },
    {
        "content": "<p>One workflow I do: have a primary branch for development, then for each PR create a new branch with some small chunk (smaller is better). If anyone wonders where your PRs are going, you can point to the primary branch to help justify your design.</p>",
        "id": 272605664,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645378551
    },
    {
        "content": "<p>And then as those PRs are merged, you can keep merging master into your primary branch.</p>",
        "id": 272605727,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645378607
    },
    {
        "content": "<p>I should say what the reason was for using lists with the multinomial coefficient: it gives you reasonably good notation without any additional work. <code>multinomial [a, b]</code> is perfect for applications like <code>∑ p in nat.antidiagonal n, multinomial [p.1, p.2] * x^p.1 * y^p.2</code>, while being able to generalize to larger numbers of terms. (Like, if we had higher antidiagonals, <code>∑ p in nat.antidiagonal₃ n, multinomial [p.1, p.2, p.3] * x^p.1 * y^p.1 * z^p.3</code>)</p>\n<p>Indexed families aren't so easily constructed.</p>",
        "id": 272605934,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645378826
    },
    {
        "content": "<p>Thanks for the tips about that. I managed to get my branch going and I'll try to rebuild using the list version first, Also I see stuff like this at the top of the files:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Copyright</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"mi\">2021</span> <span class=\"n\">Ya</span><span class=\"bp\">ë</span><span class=\"n\">l</span> <span class=\"n\">Dillies.</span> <span class=\"n\">All</span> <span class=\"n\">rights</span> <span class=\"n\">reserved.</span>\n<span class=\"n\">Released</span> <span class=\"n\">under</span> <span class=\"n\">Apache</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">license</span> <span class=\"n\">as</span> <span class=\"n\">described</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">file</span> <span class=\"n\">LICENSE.</span>\n<span class=\"n\">Authors</span><span class=\"o\">:</span> <span class=\"n\">Ya</span><span class=\"bp\">ë</span><span class=\"n\">l</span> <span class=\"n\">Dillies</span>\n</code></pre></div>\n<p>How does this work?</p>",
        "id": 272709337,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645460687
    },
    {
        "content": "<p>Have you read the <a href=\"https://leanprover-community.github.io/contribute/index.html\">contribution guidelines</a>? It links to a <a href=\"https://leanprover-community.github.io/contribute/style.html\">style guide</a> which describes what should go in the header, etc.</p>",
        "id": 272709731,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1645460905
    },
    {
        "content": "<p>Thanks, I just read it</p>",
        "id": 272710372,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645461251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib3/near/272605569\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"367659\">Callum Cassidy-Nolan</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib3/near/272555968\">said</a>:</p>\n<blockquote>\n<p>Ok, so in this case should I just make a new branch and work on it from there?</p>\n</blockquote>\n<p>I suggest making a new branch, <code>ccm_multinomial</code> or something. The current branch is old and has some stuff written by myself and <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> mixed together, and once analogues of everything in the old branch end up in mathlib, it can be deleted.</p>\n</blockquote>\n<p>I put all that code in the old merge in and fix all the errors in it (not that many), should I put your and Kevin's names at the top of the file using apache lisence?</p>",
        "id": 272711525,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645461816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Contributing.20to.20mathlib3/near/272284212\">said</a>:</p>\n<blockquote>\n<p>If anyone wants to work on this, here's a possible definition of the generalized binomial coefficient for ℚ-algebras. There's part of a proof that it coincides with <code>nat.choose</code> for natural numbers, though maybe it can be generalized to ℚ-algebras in general.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">binomial</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">binomial</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">binomial_eq</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">binomial</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat.choose</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binomial</span><span class=\"o\">],</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binomial</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- (↑n + 1)⁻¹ • 0 = 0</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binomial</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_mul_choose_eq</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- (↑(n + 1))⁻¹ • ↑(m.succ.choose n.succ * n.succ) = ↑(m.succ.choose n.succ)</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- maybe?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">binomial_eq'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">binomial</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat.choose</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>What does the <code>•</code> symbol do?</p>",
        "id": 272711723,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645461918
    },
    {
        "content": "<p>This is multiplication by scalars. In Lean 3, multiplication is homogeneous: in <code>a*b</code>  you need <code>a</code> and <code>b</code> to have the same type. So if you want to multiply, say a vector <code>v</code> with some real number <code>a</code> then  you write <code>a • v</code></p>",
        "id": 272713631,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645462888
    }
]