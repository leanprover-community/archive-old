[
    {
        "content": "<p>If I try to define nat.succ_add as it is in core for some arbitrary type with the same shape as nat (or using anything with the <code>congr_arg succ _</code> pattern), Lean isn't able to unify the successor case as it is with nat. Is there any way to get Lean to say what it's using behind the scenes to solve the unification problem? None of the definitions in core or init that are tagged with attributes jumped out as an obvious culprit.</p>",
        "id": 172175070,
        "sender_full_name": "Chris B",
        "timestamp": 1564614907
    },
    {
        "content": "<p>I think this attribute is the culprit: <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/core.lean#L417\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/core.lean#L417\">https://github.com/leanprover-community/lean/blob/master/library/init/core.lean#L417</a></p>",
        "id": 172175389,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564615287
    },
    {
        "content": "<p>This works for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">zero</span>     <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pattern</span><span class=\"o\">]</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">._</span><span class=\"n\">main</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ_add</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n</pre></div>",
        "id": 172175401,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564615301
    },
    {
        "content": "<p>Oh, actually, when I remove the <code>[pattern]</code> attribute this example still works...</p>",
        "id": 172175566,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564615468
    },
    {
        "content": "<p>Thank you, you're a hundred percent right and I am every bad adjective in the book.I made a completely stupid mistake and defined add as <code>add ((succ a) b)</code> and proceeded to totally ignore it while putting everything else under the microscope. My apologies.</p>",
        "id": 172177543,
        "sender_full_name": "Chris B",
        "timestamp": 1564617467
    },
    {
        "content": "<p>No problem! If you make a mistake it is very hard to figure out where exactly the mistake is.</p>",
        "id": 172179838,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564619881
    }
]