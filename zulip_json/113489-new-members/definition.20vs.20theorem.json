[
    {
        "content": "<p>hi! i was wondering what the difference between <code>definition</code> and <code>theorem</code> is, and when to use one over the other? i'm reading about the pragmatic differences in the documentation but i'm still not understanding it.</p>",
        "id": 242814903,
        "sender_full_name": "Holly Liu",
        "timestamp": 1623801688
    },
    {
        "content": "<p>The rule used in mathlib is: if it's a proof (something whose type has type <code>Prop</code>), then use <code>theorem</code> or <code>lemma</code>, otherwise use <code>def</code></p>",
        "id": 242815158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623801895
    },
    {
        "content": "<p>thanks!</p>",
        "id": 242815227,
        "sender_full_name": "Holly Liu",
        "timestamp": 1623801948
    },
    {
        "content": "<p>as for the technical differences:</p>\n<ul>\n<li><code>def</code>s are elaborated synchronously, and can add additional local definitions to the environment</li>\n<li><code>theorem</code> is opaque by default and you have to use some heavyweight tactics to get at the definition of the theorem after the fact</li>\n<li>The type of a <code>def</code> can depend on / be inferred from the term, while <code>theorem</code> requires that the type typecheck without looking at the term. So in particular <code>def foo := bar</code> works but <code>theorem foo := bar</code> doesn't, it always has to be <code>theorem foo : type := bar</code></li>\n</ul>",
        "id": 242815341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623802021
    },
    {
        "content": "<p>what is the definition of the theorem?</p>",
        "id": 242815618,
        "sender_full_name": "Holly Liu",
        "timestamp": 1623802280
    },
    {
        "content": "<p>it checks the type of <code>bar</code> and that becomes the type of <code>foo</code> too</p>",
        "id": 242815632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623802301
    },
    {
        "content": "<p>for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"c1\">-- foo : nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">-- bar : nat</span>\n</code></pre></div>",
        "id": 242815678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623802323
    },
    {
        "content": "<p>Actually maybe that's not your question. <code>def</code> and <code>theorem</code> are both lean built-ins</p>",
        "id": 242815744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623802402
    },
    {
        "content": "<p><del>so is the definition of the theorem something you use to check the type of <code>bar</code>, something like using <code>#check</code>?</del> sorry nevermind i think i understand. thanks</p>",
        "id": 242815888,
        "sender_full_name": "Holly Liu",
        "timestamp": 1623802542
    },
    {
        "content": "<p>I don't know what you mean by the definition of the theorem. The theorem is defined by the <code>theorem foo : type := bar</code> line</p>",
        "id": 242816197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623802911
    },
    {
        "content": "<p>you can see a definition after the fact (even for autogenerated definitions) using <code>#print foo</code></p>",
        "id": 242816254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623802955
    },
    {
        "content": "<p>that will show you what lean inferred for all the missing bits</p>",
        "id": 242816262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623802974
    },
    {
        "content": "<p>yes i was getting confused about the semantics. that clears it up a lot.</p>",
        "id": 242816454,
        "sender_full_name": "Holly Liu",
        "timestamp": 1623803196
    }
]