[
    {
        "content": "<p>I'm trying to get rid of the sorry in this proof: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_map_le</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_findim</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_map_le</span> <span class=\"o\">:</span> <span class=\"n\">E.map</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">E.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_finrank_eq</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional.finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">E.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">finite_dimensional.finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_submod_le</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_subalgebra.to_submodule</span> <span class=\"bp\">≤</span> <span class=\"n\">E.to_subalgebra.to_submodule</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h_map_le</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">hE_submod_fin</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E.to_subalgebra.to_submodule</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h_findim</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">intermediate_field.to_subalgebra_eq_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">subalgebra.to_submodule_injective</span>\n  <span class=\"o\">(</span><span class=\"n\">finite_dimensional.eq_of_le_of_finrank_eq</span> <span class=\"n\">h_map_le</span> <span class=\"n\">h_finrank_eq</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The maths argument is that <code>f</code> is bijective and <code>K</code>-linear, so it's a <code>K</code>-isomorphism. Can anyone see a good way to do this? It feels like it must be straightforward, but I haven't been able to find anything useful in mathlib.</p>",
        "id": 267306124,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1641662922
    },
    {
        "content": "<p>You're not assuming f is bijective and in this generality it need not be. Why not prove that <code>E.map f</code> and E are isomorphic? This only needs injectivity.</p>",
        "id": 267306867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641664005
    },
    {
        "content": "<p>Sorry, I mean that <code>f</code> is injective as a map <code>E \\to E.map f</code>. Yeah I guess I'm wondering if the isomorphism between <code>E</code> and <code>E.map f</code> is in mathlib</p>",
        "id": 267308109,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1641665630
    },
    {
        "content": "<p>Something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.equiv_map_of_injective\">docs#submonoid.equiv_map_of_injective</a>?</p>",
        "id": 267345023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641716778
    },
    {
        "content": "<p>Ideally it would be stated as <code>equiv_of_left_inverse</code></p>",
        "id": 267345367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641717149
    },
    {
        "content": "<p>As then we could implement <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv.map_submonoid\">docs#mul_equiv.map_submonoid</a> in terms of it</p>",
        "id": 267345431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641717207
    },
    {
        "content": "<p>Do you think I can use <code>submonoid.equiv_map_of_injective</code> directly, or should I prove an analogue for subalgebras/vector spaces?</p>",
        "id": 267356908,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1641732969
    },
    {
        "content": "<p>I think you need an analogue. Just because some map is an isomorphism of add_monoids underlying vector spaces doesn't mean that the dimensions are equal.</p>",
        "id": 267357727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641734145
    },
    {
        "content": "<p>Most likely we have something analogous for submodule already (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.equiv_map_of_injective\">docs#submodule.equiv_map_of_injective</a>?)</p>",
        "id": 267358712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641735684
    }
]