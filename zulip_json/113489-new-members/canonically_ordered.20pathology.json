[
    {
        "content": "<p>Dear All,</p>\n<p>the doc-strings for <code>canonically_ordered_comm_semiring</code> says:</p>\n<blockquote>\n<p>A canonically ordered commutative semiring is an ordered, commutative semiring in which <code>a ≤ b</code> iff there exists <code>c</code> with <code>b = a + c</code>. This is satisfied by the natural numbers, for example, but not the integers or other ordered groups.</p>\n</blockquote>\n<p>However, it does not seem like a <code>canonically_ordered_comm_semiring</code> is actually an <code>ordered_semiring</code>.  At least, Lean could not generate the instance in this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">cosr</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">canonically_ordered_comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>Playing with it a bit, it seems that the left/right cancellative properties of addition cause problems.  I do not know enough pathological examples of <code>ordered_semiring</code>s or <code>canonically_ordered_comm_semiring</code> to form an opinion on whether the instance above can be proven.</p>\n<p>Any ideas?</p>\n<p>Thank you very much!</p>",
        "id": 225129909,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612426483
    },
    {
        "content": "<p>(In case people are curious, this is an offspring of trying to prove </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_le_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">canonically_ordered_comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>While I only care about the case in which <code>α = ℕ</code>, a case that I <em>can</em> prove, I was trying to port this to mathlib in greater generality.)</p>",
        "id": 225130083,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612426639
    },
    {
        "content": "<p>you don't need <code>nontrivial</code> for that, right?</p>",
        "id": 225130236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612426799
    },
    {
        "content": "<p>I think your lemma should be true in any <code>ordered_semiring</code>, you don't need the <code>canonical</code> either, do you?</p>",
        "id": 225130433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612426948
    },
    {
        "content": "<p>I may not need either one of these assumptions, but I did assume <code>nontrivial</code> in the lemma that I intend to use to prove my application.</p>\n<p>In my actual proof, I wanted to use the implication \"<code>a \\leq b</code> means that there exists a <code>c</code> such that <code>b = a + c</code>\", hence the <code>canonical</code>!</p>",
        "id": 225130568,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612427067
    },
    {
        "content": "<p>To fully disclose my arguments, see the code below!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_le_mul_two_add</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">add_le_add_left</span> <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"n\">a2</span> <span class=\"o\">(</span><span class=\"n\">le_mul_of_one_le_left</span> <span class=\"n\">b0</span> <span class=\"o\">(</span><span class=\"n\">one_le_two.trans</span> <span class=\"n\">a2</span><span class=\"o\">)))</span> <span class=\"n\">a</span>\n             <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">rfl.ge</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_right</span>\n      <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">mul_two</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">mul_add</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- the lemma that I really care about, that works</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_le_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">le_iff_exists_add.mp</span> <span class=\"n\">b2</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_le_mul_two_add</span> <span class=\"n\">a2</span> <span class=\"n\">k.zero_le</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- how I would like to port it to mathlib, possibly with different assumptions, since now the exact line fails</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_le_mul_canonical</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">canonically_ordered_comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">le_iff_exists_add.mp</span> <span class=\"n\">b2</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_le_mul_two_add</span> <span class=\"n\">a2</span> <span class=\"n\">k.zero_le</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225130837,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612427297
    },
    {
        "content": "<p>There's been quite some discussion about this lemma on the Discord. Without subtraction it's not clear how to prove it but conversely we don't know enough weird ordered semirings to know if there's a counterexample. It's true if 2a&lt;=2b implies a&lt;=b but we think we know canonically ordered semirings where this fails, except that these semirings do not satisfy additive cancellation. The trick is to start with a ring like the naturals and then if S is a random subset of the naturals to add extra \"ghost\" elements to the ring, one for each element of S, such that addition of non-ghost 0 and multiplication by non-ghost 1 are the identity maps but the answer to everything else is the non-ghost number, so for example 2+2=non-ghost 4 whether the original 2s are ghosts or not</p>",
        "id": 225130857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612427318
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib/issues/6034\">#6034</a> resolves the nontrivial comment.</p>",
        "id": 225131154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612427535
    },
    {
        "content": "<p>I was wondering about something like <code>N+N/2</code>, where you have <code>(1,0)+(1,0)=(1,1)+(1,1)</code>.</p>\n<p>I am not sure though whether you need a total order, or not... I do not know enough about these canonically_[stuff].</p>",
        "id": 225131174,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612427553
    },
    {
        "content": "<p>For canonically ordered comm semirings can't you just write a=2+x and b=2+y and deduce it from the fact that a+b+(x+y+xy)=ab?</p>",
        "id": 225131269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612427613
    },
    {
        "content": "<p>Canonically ordered stuff us easy because it just means that the order is determined by the addition</p>",
        "id": 225131370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612427665
    },
    {
        "content": "<p>Ok, I will try with your version!</p>",
        "id": 225131391,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612427682
    },
    {
        "content": "<p>The problem with canonically ordered things is that essentially nothing is canonically ordered, eg the integers aren't canonically ordered</p>",
        "id": 225131437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612427724
    },
    {
        "content": "<p>(Note that I added the canonically_ordered <em>after</em> I tried to use the previous lemma, so I have actually not really thought about canonically_ordered things...)</p>",
        "id": 225131438,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612427725
    },
    {
        "content": "<p>If you have a multiplication, you could try to use squares to make canonically_ordered things more applicable?  I am thinking along the lines of sums of squares are non-negative...  Anyway, this is a separate issue!</p>",
        "id": 225131565,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612427826
    },
    {
        "content": "<p>The moment there's a nontrivial solution to a+b=0 you're not canonically ordered. However things like 2&lt;=a and 2&lt;=b implies a+b&lt;=ab are true for any totally ordered semiring because then wlog a&lt;=b and so a+b&lt;=2b&lt;=ab</p>",
        "id": 225131590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612427848
    },
    {
        "content": "<p>I don't think I know a single example of an ordered semiring which isn't canonically ordered or totally ordered though</p>",
        "id": 225131695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612427904
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_le_mul₁</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">zero_lt_two</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">a2</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">ab</span> <span class=\"n\">b</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">two_mul</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">a2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_le_mul₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ba</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">zero_lt_two</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">b2</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ba</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">ba</span> <span class=\"n\">a</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mul_two</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">b2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_le_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_le_mul₁</span> <span class=\"n\">a2</span> <span class=\"n\">hab</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_le_mul₂</span> <span class=\"n\">b2</span> <span class=\"n\">hab.le</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225131770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612427974
    },
    {
        "content": "<p>This assumes linearity...</p>",
        "id": 225131784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612427983
    },
    {
        "content": "<p>But not commutativity</p>",
        "id": 225131792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612427988
    },
    {
        "content": "<p>Does <code>ℕ ⊕ (ℤ / 2)</code> with the partial order induced by projection onto the first component fail to be an ordered semiring?</p>",
        "id": 225131796,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612427990
    },
    {
        "content": "<p>Maybe the complexes with a&lt;=b iff b-a is a non-negative real? No idea</p>",
        "id": 225131803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612427991
    },
    {
        "content": "<p>Johan you should just use wlog for add_le_mul to save code duplication</p>",
        "id": 225131929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428082
    },
    {
        "content": "<p>Can <code>wlog</code> do that without assume <code>comm</code>?</p>",
        "id": 225132011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612428132
    },
    {
        "content": "<p>Oh! No! I'd not spotted that you didn't assume commutativity. Sorry</p>",
        "id": 225132018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428146
    },
    {
        "content": "<p>Dunno...</p>",
        "id": 225132021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612428154
    },
    {
        "content": "<p>I guess I can remove the <code>\\_2</code> version by using the opposite ring</p>",
        "id": 225132054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612428181
    },
    {
        "content": "<p>What the heck is Z/2? How do you do multiplication on that?</p>",
        "id": 225132094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428231
    },
    {
        "content": "<p>I meant the commutative ring with exactly two elements.  I may be missing something very basic, though...</p>",
        "id": 225132184,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612428284
    },
    {
        "content": "<p>I guess he means <code>zmod 2</code>?</p>",
        "id": 225132185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612428285
    },
    {
        "content": "<p>And what is the partial order induced by the first component? Does it really satisfy the partial order axiom a&lt;=b and b&lt;=a implies a=b?</p>",
        "id": 225132217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428302
    },
    {
        "content": "<p>Aah, Z mod 2 :-) But what is the order?</p>",
        "id": 225132256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428331
    },
    {
        "content": "<p>It's not canonically ordered because there are nontrivial solutions to a+b=0</p>",
        "id": 225132290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428359
    },
    {
        "content": "<p>Maybe it does not work, but I had in mind (x,y) \\leq (x',y') iff<br>\nx &lt; x'<br>\nor<br>\nx = x' and they are actually equal</p>",
        "id": 225132335,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612428368
    },
    {
        "content": "<p>I believe it might be the lex order</p>",
        "id": 225132345,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612428375
    },
    {
        "content": "<p>No, lex is a total order</p>",
        "id": 225132407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428421
    },
    {
        "content": "<p>Ok, so this example is not canonically ordered!  I have tried to unfold all the properties of canonically_ordered, but I am constantly missing some...</p>",
        "id": 225132425,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612428431
    },
    {
        "content": "<p>And here you're saying (X,0) and (X,1) are incomparable</p>",
        "id": 225132442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428446
    },
    {
        "content": "<p>Ah, you are right about lex!  I want to make incomparable the two different elements with the same first component.  Anyway, this does not work!</p>",
        "id": 225132455,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612428464
    },
    {
        "content": "<p><code>(0,0) &lt; (0,1)</code>? But <code>(0,1) + (0,1) = (0,0)</code>, right?</p>",
        "id": 225132456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612428465
    },
    {
        "content": "<p>I think 00 and 01 are incomparable?</p>",
        "id": 225132508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428484
    },
    {
        "content": "<p>aha, ok</p>",
        "id": 225132513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612428494
    },
    {
        "content": "<p>This might be an ordered semiring</p>",
        "id": 225132531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428512
    },
    {
        "content": "<p>Yes, (0,0) incomp with (0,1), but still (0,1)+(0,1)=(0,0)...</p>",
        "id": 225132539,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612428518
    },
    {
        "content": "<p>Which isn't canonically or totally ordered</p>",
        "id": 225132541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428522
    },
    {
        "content": "<p>Is that a problem?</p>",
        "id": 225132556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428541
    },
    {
        "content": "<p>No, I am floating on the surface of definitions and I remember you saying that a non-trivial sol to a+b=0 was a problem... ahahha</p>",
        "id": 225132597,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612428569
    },
    {
        "content": "<p>Rather irritatingly it seems to satisfy 2&lt;=a and 2&lt;=b implies a+b&lt;=ab though</p>",
        "id": 225132619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428594
    },
    {
        "content": "<p>This is somewhat frustrating.  I may have to write all the definitions down on a piece of paper, since chasing them around with <code>extends</code> makes it very hard for me to remember what we are assuming and what not!</p>",
        "id": 225132743,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612428678
    },
    {
        "content": "<p>Canonical order is easy Damiano. From the ring axioms you can easily check that a&lt;=b iff exists c such that b=a+c is reflexive and transitive, but you don't get antisymmetry usually</p>",
        "id": 225132756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428687
    },
    {
        "content": "<p>And any questions about &lt;= just immediately translate into questions about algebra with no &lt;=</p>",
        "id": 225132851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428748
    },
    {
        "content": "<p>Eg 2&lt;=a and 2&lt;=b implies a+b&lt;=ab is easy</p>",
        "id": 225132888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428781
    },
    {
        "content": "<p>The problem is that it's basically never antisymmetric</p>",
        "id": 225132915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428807
    },
    {
        "content": "<p>Ok, canonically ordered implies that you cannot keep adding non-zero elements to an element and get back to a place you already visited.  I am on board with this!</p>",
        "id": 225132934,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612428825
    },
    {
        "content": "<p>Canonically ordered means that the order is not there</p>",
        "id": 225133006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428851
    },
    {
        "content": "<p>(I am going to have to meet with a student in 5 mins, but I am finding this discussion strangely interesting!)</p>",
        "id": 225133143,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612428944
    },
    {
        "content": "<p>I think we still have the question as to whether add_le_mul is true in a general commutative ordered semiring</p>",
        "id": 225133238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612428999
    },
    {
        "content": "<p>Or maybe even not commutative... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 225133263,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612429028
    },
    {
        "content": "<p>I suspect not but I don't have enough good examples</p>",
        "id": 225133272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612429038
    },
    {
        "content": "<p>What about Z+Z/3 and (2,1)+(2,1) not le (4,1)?</p>",
        "id": 225133450,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612429171
    },
    {
        "content": "<p>I need to go now!</p>",
        "id": 225133455,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612429177
    },
    {
        "content": "<p>But independent of that, the question of whether a canonically ordered comm semiring is an ordered semiring should be resolved because either there's a missing instance or there's an argument that we have our axioms wrong.</p>",
        "id": 225133457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612429178
    },
    {
        "content": "<p>But (2,1) isn't &gt;= 2</p>",
        "id": 225133530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612429208
    },
    {
        "content": "<p>Aaargh!!</p>",
        "id": 225133544,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612429219
    },
    {
        "content": "<p>At least in the order we were discussing</p>",
        "id": 225133552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612429224
    },
    {
        "content": "<p>Just make it &gt;= 2 maybe?</p>",
        "id": 225133593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612429250
    },
    {
        "content": "<p>Yes, that was the order I had in mind...  My example does not work... again!</p>",
        "id": 225133613,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612429262
    },
    {
        "content": "<p>The problem is that this might also cause problems at 4</p>",
        "id": 225133619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612429266
    },
    {
        "content": "<p>Maybe R=nat x nat with (a,b)&lt;=(c,d) iff either a&lt;c or (a=c and b=0) is an ordered semiring. If so then we're good because a=b=(2,1) would be a counterexample</p>",
        "id": 225134005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612429508
    },
    {
        "content": "<p>Hmm it doesn't work because a&lt;=b implies a+c&lt;=b+c fails. I'm assuming that's an axiom!</p>",
        "id": 225134165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612429594
    },
    {
        "content": "<p>Maybe drop random stuff like (0,0)&lt;(0,1) too?</p>",
        "id": 225134246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612429662
    },
    {
        "content": "<p>If anyone can actually extract all the axioms and make <span class=\"user-mention\" data-user-id=\"345260\">@Andrej Bauer</span>s alg work on this that might shed some light, <a href=\"https://github.com/andrejbauer/alg\">https://github.com/andrejbauer/alg</a> as we're only working with semirings there may exist finite examples?</p>",
        "id": 225135315,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612430325
    },
    {
        "content": "<p>I want to say the following: define a relation on nat x nat^2 (with the obvious ring structure) by demanding (a,b)&lt;=(c,d) if a&lt;=c and b=d, and also (2,00)&lt;=(2,01) and (2,00)&lt;=(2,10). Now take the smallest preorder structure which extends this and makes N x N^2 into a preordered semiring. Three things can happen. Either it's not an ordered semiring, in which case the argument that it isn't can be turned into a proof of add_le_mul for ordered semirings. Or it is an ordered semiring and (4,11)&lt;=(4,00) (this to me is unlikely) and then this will also turn into a proof for ordered semirings. Or, finally, it is an ordered semiring and (4,11) is not &lt;= (4,00), which gives us our counterexample.</p>",
        "id": 225135316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612430327
    },
    {
        "content": "<p>Something still looks wrong with what I've said</p>",
        "id": 225135398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612430390
    },
    {
        "content": "<p>what does <code>gpt</code> say?</p>",
        "id": 225135556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612430481
    },
    {
        "content": "<p>Lol</p>",
        "id": 225136043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612430765
    },
    {
        "content": "<p>I want to say the following: define a relation on nat x nat^2 (with the obvious ring structure) by demanding (a,b)&lt;=(c,d) if a&lt;=c and b=d, and also (2,00)&lt;=(2,01) and (2,00)&lt;=(2,10). Now take the smallest preorder structure which extends this and makes N x N^2 into a preordered semiring. Three things can happen. Either it's not an ordered semiring, in which case the argument that it isn't can be turned into a proof of add_le_mul for ordered semirings. Or it is an ordered semiring and (4,11)&lt;=(4,00) (this to me is unlikely) and then this will also turn into a proof for ordered semirings. Or, finally, it is an ordered semiring and (4,11) is not &lt;= (4,00), which gives us our counterexample.</p>",
        "id": 225136241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612430888
    },
    {
        "content": "<p>Oh my mistake is that (2,0) is not 2 in nat X nat with the obvious ring structure</p>",
        "id": 225136293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612430927
    },
    {
        "content": "<p>But I think that one can still make this strategy work. Consider the polynomial ring N[a,b] with the usual ring structure. Now define f&lt;=g if  g in f+nat, and also say 2&lt;=a and 2&lt;=b. Now take the smallest pre-order extending this and making it into a preordered semiring, and then take the smallest quotient making it an ordered semiring. Either this is a counterexample or there is no counterexample</p>",
        "id": 225136856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612431260
    },
    {
        "content": "<p>I like the idea of using Bauer's tool. Is antisymmetry ok? It's an implication</p>",
        "id": 225137147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612431436
    },
    {
        "content": "<p>My meeting is over.</p>\n<p>Kevin, I like your approach!<br>\nAbout finite examples: I need to look whether ordered semirings must have some form of assumption saying that 1+1+... never repeats.</p>",
        "id": 225137264,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612431496
    },
    {
        "content": "<p>Yeah I just played with it a bit and you can specify <code>not  (..)</code>, <code>a -&gt; b</code>, <code>a &lt;-&gt; b</code>, and <code>exists z, y = x + z</code> all fine, I'm just not sure what the complete list of axioms we need is!</p>",
        "id": 225137364,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612431577
    },
    {
        "content": "<p><code>#print ordered_semiring</code> should give you a full list, right?</p>",
        "id": 225137659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612431776
    },
    {
        "content": "<p>indeed!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">ordered_semiring</span>\n\n<span class=\"kd\">@[class, protect_proj list.nil.{0} name]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ordered_semiring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"n\">ordered_semiring.add</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">ordered_semiring.add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c_1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c_1</span><span class=\"o\">)</span>\n<span class=\"n\">ordered_semiring.zero</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span>\n<span class=\"n\">ordered_semiring.zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">ordered_semiring.add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">ordered_semiring.add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n<span class=\"n\">ordered_semiring.mul</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">ordered_semiring.mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span><span class=\"o\">)</span>\n<span class=\"n\">ordered_semiring.one</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span>\n<span class=\"n\">ordered_semiring.one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">ordered_semiring.mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">ordered_semiring.zero_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">ordered_semiring.mul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">ordered_semiring.left_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span>\n<span class=\"n\">ordered_semiring.right_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span>\n<span class=\"n\">ordered_semiring.add_left_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c_1</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c_1</span>\n<span class=\"n\">ordered_semiring.add_right_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c_1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c_1</span>\n<span class=\"n\">ordered_semiring.le</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">ordered_semiring.lt</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">ordered_semiring.le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"n\">ordered_semiring.le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c_1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c_1</span>\n<span class=\"n\">ordered_semiring.lt_iff_le_not_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"order_laws_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)</span>\n<span class=\"n\">ordered_semiring.le_antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">ordered_semiring.add_le_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c_1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c_1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n<span class=\"n\">ordered_semiring.le_of_add_le_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c_1</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c_1</span>\n<span class=\"n\">ordered_semiring.zero_le_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"n\">ordered_semiring.mul_lt_mul_of_pos_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c_1</span> <span class=\"bp\">→</span> <span class=\"n\">c_1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"n\">ordered_semiring.mul_lt_mul_of_pos_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c_1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span>\n</code></pre></div>",
        "id": 225137747,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612431828
    },
    {
        "content": "<p>Ok, but most of these are easy: the ones with 0 and 1 we know!</p>",
        "id": 225137865,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612431901
    },
    {
        "content": "<p>Ok I can't do this alg thing now but if nobody else does I'll try tomorrow (who knows maybe someone will have a non brute force genuine math proof by then <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> )</p>",
        "id": 225138041,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612432001
    },
    {
        "content": "<p>Removing the axioms having to do with <code>ring</code> (associative, distributive,...), the ones with <code>0</code> and <code>1</code> and order relation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">ordered_semiring</span>\n\n<span class=\"kd\">@[class, protect_proj list.nil.{0} name]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ordered_semiring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"n\">ordered_semiring.add_left_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c_1</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c_1</span>\n<span class=\"n\">ordered_semiring.add_le_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c_1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c_1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n<span class=\"n\">ordered_semiring.le_of_add_le_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c_1</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c_1</span>\n<span class=\"n\">ordered_semiring.zero_le_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"n\">ordered_semiring.mul_lt_mul_of_pos_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c_1</span> <span class=\"bp\">→</span> <span class=\"n\">c_1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"n\">ordered_semiring.mul_lt_mul_of_pos_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c_1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span>\n</code></pre></div>",
        "id": 225138107,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612432042
    },
    {
        "content": "<p>In particular, such rings have characteristic zero: if <code>n, m</code> are natural numbers, then <code>n+m=m</code>implies <code>n = 0</code> by writing <code>n+m=n+0</code> and using one of the <code>add_cancel</code>.</p>",
        "id": 225138927,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612432520
    },
    {
        "content": "<p>So a non-trivial ordered ring is necessarily infinite.</p>",
        "id": 225138971,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612432558
    },
    {
        "content": "<p>Can Lean find the <code>char_zero</code> instance?</p>",
        "id": 225139025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612432570
    },
    {
        "content": "<p>hmmm, I am not sure what <code>char_zero</code> in lean means...</p>",
        "id": 225139043,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612432588
    },
    {
        "content": "<p>let me try</p>",
        "id": 225139046,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612432591
    },
    {
        "content": "<p>I cannot find <code>char_zero</code>...  should I import something?</p>",
        "id": 225139155,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612432669
    },
    {
        "content": "<p>(I'll make some tea in the meanwhile!)</p>",
        "id": 225139206,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612432684
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ rg -l char_zero\ntest/norm_num.lean\nscripts/style-exceptions.txt\ndocs/undergrad.yaml\ndocs/overview.yaml\ntest/ring.lean\nsrc/field_theory/separable.lean\nsrc/field_theory/polynomial_galois_group.lean\nsrc/algebra/char_zero.lean\nsrc/algebra/field_power.lean\nsrc/algebra/invertible.lean\nsrc/tactic/norm_num.lean\narchive/imo/imo1962_q4.lean\nsrc/data/quaternion.lean\nsrc/ring_theory/roots_of_unity.lean\nsrc/algebra/char_p/basic.lean\nsrc/algebra/algebra/basic.lean\nsrc/algebra/module/basic.lean\nsrc/algebra/algebra/tower.lean\nsrc/ring_theory/polynomial/cyclotomic.lean\nsrc/analysis/normed_space/basic.lean\nsrc/data/polynomial/derivative.lean\nsrc/data/num/lemmas.lean\nsrc/data/int/char_zero.lean\nsrc/ring_theory/witt_vector/witt_polynomial.lean\nsrc/linear_algebra/affine_space/independent.lean\nsrc/linear_algebra/affine_space/midpoint.lean\nsrc/linear_algebra/affine_space/combination.lean\nsrc/data/complex/basic.lean\nsrc/data/complex/is_R_or_C.lean\nsrc/data/padics/padic_numbers.lean\nsrc/data/padics/padic_integers.lean\nsrc/data/rat/cast.lean\nsrc/data/real/ennreal.lean\nsrc/data/zsqrtd/basic.lean\n</code></pre></div>",
        "id": 225139255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612432713
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- src/algebra/char_zero.lean</span>\n<span class=\"kd\">@[priority 100]</span> <span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">linear_ordered_semiring.to_char_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">char_zero</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">nat.strict_mono_cast.injective</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 225139346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612432772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology/near/225139155\">said</a>:</p>\n<blockquote>\n<p>I cannot find <code>char_zero</code>...  should I import something?</p>\n</blockquote>\n<p>Search in VS Code for <code>char_zero</code>, find any file which uses it, open that file, wait for the orange bars to go away, and then right click on it to find where it's defined.</p>",
        "id": 225139354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612432776
    },
    {
        "content": "<p>So Lean knows it for linear ordered semirings...</p>",
        "id": 225139399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612432800
    },
    {
        "content": "<p>If you don't like waiting for orange bars... just use <code>grep</code> (-;</p>",
        "id": 225139545,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612432865
    },
    {
        "content": "<p>Just guess that it's defined as a <code>class</code>, and grep for <code>class char_zero</code>.</p>",
        "id": 225139617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612432904
    },
    {
        "content": "<p>But <code>grep</code> won't find where the definition is, it will just print a gazillion times when it's used. Then you have to start guessing about whether it's a structure or class or a def.</p>",
        "id": 225139635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612432914
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">rg</span> <span class=\"s2\">\"class char_zero\"</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">char_zero.lean</span>\n<span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"kd\">class</span> <span class=\"n\">char_zero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 225139728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612432940
    },
    {
        "content": "<p>Aah right, if you can guess it's a class then you might be fine. Except that things like topological_space are a class but are defined as a structure</p>",
        "id": 225139743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612432946
    },
    {
        "content": "<p>If you use the <code>-l</code> flag, then the gazillion times it's used will be reduced to the dozen filenames where it's used. Often I can guess which filename is the most \"elementary\" and likely contains the def'n.</p>",
        "id": 225139882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612433009
    },
    {
        "content": "<p>I like the -l trick!</p>",
        "id": 225139970,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612433048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology/near/225138927\">said</a>:</p>\n<blockquote>\n<p>In particular, such rings have characteristic zero: if <code>n, m</code> are natural numbers, then <code>n+m=m</code>implies <code>n = 0</code> by writing <code>n+m=n+0</code> and using one of the <code>add_cancel</code>.<br>\nSo a non-trivial ordered ring is necessarily infinite.</p>\n</blockquote>\n<p>Does char_zero imply infinite in this setting? It needn't in general right, adding 1 can just be absorbative into itself (<code>1+1=1</code>)?</p>",
        "id": 225140011,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612433075
    },
    {
        "content": "<p>Is <code>fin n</code> an ordered semiring?</p>",
        "id": 225140077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612433115
    },
    {
        "content": "<p>I think that I can prove that n+m=n implies m=0, though...</p>",
        "id": 225140090,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612433126
    },
    {
        "content": "<p>because that isn't true in <code>fin n</code></p>",
        "id": 225140236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612433209
    },
    {
        "content": "<p>(this is not Z/n, this is the stupid addition where big+big=n-1)</p>",
        "id": 225140273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612433228
    },
    {
        "content": "<p>I think that the proof above shows that fin n is not an ordered semiring</p>",
        "id": 225140297,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612433244
    },
    {
        "content": "<p>It's the quotient of nat by the relation n-1=n=n+1=n+2=.... Why is this not an ordered semiring?</p>",
        "id": 225140317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612433259
    },
    {
        "content": "<p>n+1=n implies n+1=n+0 and you cancel n</p>",
        "id": 225140430,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612433313
    },
    {
        "content": "<p>Yeah this cancellative property is way stronger than my internal model of what an ordered semiring is!</p>",
        "id": 225140439,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612433320
    },
    {
        "content": "<p>Cancellation is an axiom for ordered semiring? :-/</p>",
        "id": 225140470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612433343
    },
    {
        "content": "<p>Yes, the axioms are further up in the thread</p>",
        "id": 225140497,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612433363
    },
    {
        "content": "<p>Is ordered semiring just something which some mathlib dev just made up? It's not like there's a Wikipedia page on it.</p>",
        "id": 225140507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612433370
    },
    {
        "content": "<p>I do not know the source of the concept: I did not know it before yesterday evening!</p>",
        "id": 225140596,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612433421
    },
    {
        "content": "<p>And I only looked at all the axioms on the same place after Johan's suggestion of <code>print</code>ing them!</p>",
        "id": 225140678,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612433472
    },
    {
        "content": "<p>In mathlib it extends <code>ordered_cancel_add_comm_monoid</code>. In the few references I can find on the internet, this is not mentioned. The definition in mathlib does not really seem to match the docstring.</p>",
        "id": 225140726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612433509
    },
    {
        "content": "<p>sounds like we are in for a giant refactor <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 225140807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612433567
    },
    {
        "content": "<p>I do not see the point of the class at all</p>",
        "id": 225140838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612433597
    },
    {
        "content": "<p>And just to prove that the sum is less than the product...</p>",
        "id": 225140857,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612433614
    },
    {
        "content": "<p>But for this <code>add_mul</code> thing, this cancellation axiom presents a big problem for my strategy.</p>",
        "id": 225140915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612433643
    },
    {
        "content": "<p>The idea is this. Construct the \"universal commutative ordered semiring with 2&lt;=a and 2&lt;=b\" and check it there.</p>",
        "id": 225140960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612433689
    },
    {
        "content": "<p>Now I had imagined that this would not be too hard. Here's a sketch of what I had in mind. First start with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\N[a,b]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> and assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0&lt;1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>≤</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">2\\leq a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">2\\leq b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>. Certainly there are orders making this into an ordered semiring, for example you can map into the reals sending a to [random transcendental number bigger than 2] and b to [random independent transcendental bigger than 2] and then pull the order back.</p>",
        "id": 225141094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612433800
    },
    {
        "content": "<p>From this perspective, the cancellation axioms appear very strange.  However, I am perfectly happy to assume existence of opposites and it seems a weak condition to assume</p>",
        "id": 225141125,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612433835
    },
    {
        "content": "<p>Now I suspect that the order structures on a fixed semiring making it into an ordered semiring will form a lattice with arbitrary infs (just intersect the relations). So we can look at the intersection of all the orders satisfying 0&lt;1 and 2&lt;=a and 2&lt;=b.</p>",
        "id": 225141223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612433893
    },
    {
        "content": "<p>The intersection is an \"abstract\" way of constructing the minimal ordering, but as we all know there is also a \"constructive\" way of constructing this minimal order, by defining an inductive prop &lt;=, throwing in 0&lt;1 and 2&lt;=a and 2&lt;=b as constructors, and also one constructor for each axiom.</p>",
        "id": 225141309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612433966
    },
    {
        "content": "<p>Now the idea was that each constructor \"makes stuff bigger\", and in particular any proof of a+b&lt;=ab will have to only use facts about things smaller than ab in some appropriate order, where the axiom constructors all say (small &lt;='s implies big &lt;=)</p>",
        "id": 225141457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612434062
    },
    {
        "content": "<p>However <code>le_of_add_le_add_left</code> does not satisfy this \"well-foundedness\" property, meaning that I cannot eliminate proving a+b&lt;=ab from a+b+a^100+37b^100 &lt;= ab+a^100+37b^100 :-(</p>",
        "id": 225141574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612434159
    },
    {
        "content": "<p>Anyway, this seems to answer the original question in this thread. As far as I can see, <code>fin 2</code> is (or more precisely can be made into) a perfectly good <code>canonically_ordered_comm_semiring</code> which isn't an <code>ordered_semiring</code> as far as mathlib is concerned. Do people agree?</p>",
        "id": 225142020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612434524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology/near/225140273\">said</a>:</p>\n<blockquote>\n<p>(this is not Z/n, this is the stupid addition where big+big=n-1)</p>\n</blockquote>\n<p>I thought addition on fin was defeq to addition on zmod, even though we discussed changing it</p>",
        "id": 225142057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612434557
    },
    {
        "content": "<p>sure, maybe, but right now I'm talking about the stupid addition</p>",
        "id": 225142067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612434578
    },
    {
        "content": "<p>(my view on this is that <code>fin n</code> shouldn't really even have an addition, if you're adding things in fin n then you're not thinking about fin n correctly and should be using another type)</p>",
        "id": 225142172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612434643
    },
    {
        "content": "<p>Yakov is working on a refactor that will give <code>fin n</code> the absorbing addition.</p>",
        "id": 225142202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612434668
    },
    {
        "content": "<p>absorbing means max?</p>",
        "id": 225142220,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612434683
    },
    {
        "content": "<p>I think it makes sense to have that structure in mathlib. I don't care how it's called.</p>",
        "id": 225142227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612434691
    },
    {
        "content": "<p>no it means \"add, but if it's bigger than n-1 then just let it be n-1\"</p>",
        "id": 225142236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612434698
    },
    {
        "content": "<p>ah, <del>max</del> min (a+b) (n-1), then?</p>",
        "id": 225142311,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612434727
    },
    {
        "content": "<p><code>min</code>?</p>",
        "id": 225142328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612434739
    },
    {
        "content": "<p>same for mul. It's the quotient of the semiring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> by the relation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo>=</mo><mi>n</mi><mo>=</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">n-1=n=n+1+...</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.10556em;vertical-align:0em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span></p>",
        "id": 225142329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612434741
    },
    {
        "content": "<p>This relation preserves + and * but does not come from an ideal.</p>",
        "id": 225142358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612434769
    },
    {
        "content": "<p>Ok, so the consensus seems to be to avoid <code>ordered_semiring</code>, right?  If so, then I might go with Johan's proof for <code>linear_ordered_semiring</code>.  Does this seem like a good choice?</p>",
        "id": 225142582,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612434919
    },
    {
        "content": "<p>The relevant PR is <a href=\"https://github.com/leanprover-community/mathlib/issues/6031\">#6031</a>: I should have mentioned this earlier...</p>",
        "id": 225142604,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612434947
    },
    {
        "content": "<p>(Johan, since this is your proof, feel free to make your own PR, if you prefer!)</p>",
        "id": 225142760,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612435066
    },
    {
        "content": "<p>It seems to me that the current status of the questions on this thread are: (1) I am claiming that <code>fin n</code> with this absorbing structure will be a canonically ordered comm_semiring which isn't an ordered_semiring in mathlib's sense, answering the original question. (2) The definition of ordered semiring in mathlib seems to have no reference, and contains <code>le_of_add_le_add_left</code>. In the literature I cannot find any examples of where <code>le_of_add_le_add_left</code> is an axiom for ordered semirings (indeed it's hard to find many mentions of ordered semirings in the literature; note that <code>le_of_add_le_add_left</code> is not unreasonable for ordered rings because we have additive inverses so it's implied by a&lt;=b-&gt;a+c&lt;=b+c, which is a reasonable axiom). (3) Mathlib's ordered semirings are hence arguably pathological objects so it's perhaps not worth wasting time asking questions about them right now until (2) is resolved, thus both the original question in this thread, and asking whether <code>add_le_mul</code> is true for mathlib's ordered semirings, are pathological questions right now (and don't deserve attention until we have some evidence that <code>le_of_add_le_add_left</code> is a relevant axiom), and (4) we still don't know the answer to whether <code>add_le_mul</code> is true in what people on the internet think an ordered_semiring is but I have sketched what I think is an approach which will lead to a counterexample above. On the other hand add_le_mul is true for canonically ordered semirings and totally ordered semirings, and given that mathlib's ordered semirings are pathological right now, this resolves all the non-pathological questions that can be asked about mathlib's structures right now.</p>",
        "id": 225143069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612435271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> If you are making other PRs in this area, please include it. I'm too busy with teaching <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 225144219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612436058
    },
    {
        "content": "<p>The literature on ordered semirings is sparse and, in stark contrast to the usual conventions, no two definitions of an ordered semiring in the literature coincide. Gan and Jiang (Journal of Math Research and Exposition, in 2011 -- I've never heard of this journal BTW) define it but have as one of their axioms 0&lt;=c for all c. Faible and Peis (2006, random preprint on internet so approach with caution) define it but demand that ab&lt;=a (they're thinking about lattices). Ayutthaya and Pibaljommee give the definition which I expect in an article in 2015 in International Journal of Maths and Maths Sciences (another journal I don't think I've heard of) , i.e. a&lt;=b implies a+x&lt;=b+x, ax&lt;=bx and xa&lt;=xb (oh -- they don't demand x&gt;=0 for the latter so probably they have 0 as their minimal element again) , but don't demand a 1 (or this cancellation axiom). Rao, Kumar, Venkateswarlu and Kumar (Mathematica Maravica 2018, never heard of it either) give a related definition of ordered Gamma-semiring with three axioms, two of which are identical, and none of which involve cancellation. Tentative conclusions are that the mathematical community doesn't have a standard convention for what an ordered semiring is, but nowhere in the literature (such as it is) can I find any mention of cancellation for + and &lt;=.</p>",
        "id": 225147018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612437989
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/commit/362f972edab4bc4fdb5e3085c2f1f4f32abee096\">https://github.com/leanprover/lean/commit/362f972edab4bc4fdb5e3085c2f1f4f32abee096</a></p>\n<p>So Leo added them in 2016, extending ordered_mul_cancel_comm_monoid and then renaming mul to add (so the assumption was there right from the start).</p>",
        "id": 225148202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612438743
    },
    {
        "content": "<p>Thanks for this, Kevin!</p>\n<p>In the meanwhile, I proved that <code>ordered_semiring</code> has <code>char_zero</code>: turns out, it was almost already there!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">char_zero_ordered_semiring</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">char_zero</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cast_injective</span> <span class=\"o\">:=</span> <span class=\"n\">injective_of_increasing</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">coe</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_lt.mpr</span> <span class=\"n\">xy</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 225149434,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612439678
    },
    {
        "content": "<p>The <code>nontrivial</code> PR just got merged, so now we can start removing assumptions still!  <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 225149526,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612439753
    },
    {
        "content": "<p>I think that instance might be bad, because there might be a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_zero.nontrivial\">docs#char_zero.nontrivial</a> instance that forms a loop?</p>",
        "id": 225149750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612439912
    },
    {
        "content": "<p>I was not planning of making a PR with this instance, but I would like to understand what would be the issue with <code>nontrivial</code>.  What is it that would form a loop?</p>\n<p>The link you sent does not work for me.</p>",
        "id": 225150712,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612440577
    },
    {
        "content": "<p>Char 0 implies non-trivial, and if this is also an instance then you might end up with the type class inference system (the thing which looks at the instances) finding an ordered semiring and then going into a loop constantly proving non-trivial -&gt; char_zero -&gt; non-trivial -&gt; char_zero -&gt; ... when trying to do something else. But my understanding of the actual computer program which runs the type class inference system (it's a C++ program in core Lean) is very poor, so I don't know whether this kind of thing is likely to happen or not.</p>",
        "id": 225150894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612440722
    },
    {
        "content": "<p>Ah, I see!  I understand now what the potential issue could be.</p>\n<p>Do you think that this might explain why the instance is not there?</p>",
        "id": 225151040,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612440825
    },
    {
        "content": "<p>I think you could certainly add it as a lemma</p>",
        "id": 225151496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612441177
    },
    {
        "content": "<p>There's no harm in making it a lemma (you could try <code>library_search</code> to see if it's already there) but Eric is pointing out that there might be a problem with it being an instance (which is nothing more than a def or lemma plus an <code>@[instance]</code> tag).</p>",
        "id": 225151530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612441202
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/injective_of_increasing\">docs#injective_of_increasing</a> <code>(λ (a b : ℕ), a &lt; b)  (λ (a b : R), a &lt; b) coe (λ x y xy, nat.cast_lt.mpr xy</code> looks like it might be a <code>strict_monotone</code> statement that already exists somewhere</p>",
        "id": 225151655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612441277
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">char_zero_ordered_semiring</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">char_zero</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cast_injective</span> <span class=\"o\">:=</span> <span class=\"n\">nat.strict_mono_cast.injective</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 225152002,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612441520
    },
    {
        "content": "<p><code>nat.strict_mono_cast.injective</code></p>",
        "id": 225152117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612441604
    },
    {
        "content": "<p>Updated!</p>",
        "id": 225152368,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612441776
    },
    {
        "content": "<p>However, I am not sure whether to PR this, partly since I would not know where to put it: the ordered_semiring file does not import char_zero and in char_zero there are no examples...</p>",
        "id": 225152464,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612441829
    },
    {
        "content": "<p>Right next to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_semiring.to_char_zero\">docs#linear_ordered_semiring.to_char_zero</a>  would make sense</p>",
        "id": 225152568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612441911
    },
    {
        "content": "<p>Indeed, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_semiring.to_char_zero/src\">src#linear_ordered_semiring.to_char_zero</a> has exactly your proof, so probably it makes senes to add <code>lemma ordered_semiring.to_char_zero</code>, and redefine <code>instance linear_ordered_semiring.to_char_zero  := semiring.to_char_zero</code></p>",
        "id": 225152682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612441977
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6038\">#6038</a>!</p>",
        "id": 225157251,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612444673
    },
    {
        "content": "<p>Regarding refactoring fin, first we have to rip out the fin ops definitions in core. They're used to define unsigned, which is what makes all of expr naming work. When <a href=\"https://github.com/leanprover-community/lean/issues/527\">lean#527</a> is merged, the actual mathlib refactor of fin can start.</p>",
        "id": 225164082,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612448083
    },
    {
        "content": "<p>I think I've got a construction of a <code>ordered_semiring</code> in which <code>2a &lt;= 2b -&gt; a &lt;= b</code> fails, I'm trying to check it in Lean at the moment</p>",
        "id": 225167778,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612449810
    },
    {
        "content": "<p>In the meanwhile, I also pushed Johan's proof: PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6043\">#6043</a>.</p>",
        "id": 225177718,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612453835
    },
    {
        "content": "<p>Yeah, I've got a <code>ordered_comm_semiring</code> in which <code>2a &lt;= 2b -&gt; a &lt;= b</code> fails</p>",
        "id": 225199762,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612462495
    },
    {
        "content": "<p>I <em>think</em> I can make it into a canonically ordered one too</p>",
        "id": 225199800,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612462514
    },
    {
        "content": "<p>Is it <code>fin n</code> as suggested above?</p>",
        "id": 225199944,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612462574
    },
    {
        "content": "<p>No</p>",
        "id": 225200102,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612462669
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [comm_semiring]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">subsemiring.closure</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">K</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">xy</span> <span class=\"n\">yz</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">xy</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">yz</span> <span class=\"o\">},</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">yz</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">xy</span> <span class=\"o\">},</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 225200109,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612462673
    },
    {
        "content": "<p>I can post a full gist if that's convenient, but it's not particularly interesting; that's the semiring structure and the partial order structure, the counterexample is a = 1, b = 1.5</p>",
        "id": 225200240,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612462724
    },
    {
        "content": "<p>In particular this is cancellative</p>",
        "id": 225200298,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612462755
    },
    {
        "content": "<p>I've upgraded it to a <code>canonically_ordered_comm_semiring</code> now, (thanks Kevin!)</p>",
        "id": 225205386,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612465039
    },
    {
        "content": "<p>I wonder whether mathlib should at some point also start collecting such counterexamples.</p>",
        "id": 225205810,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1612465214
    },
    {
        "content": "<p>The example I like best right now is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><mi>x</mi><mo>=</mo><mn>0</mn><mo>∨</mo><mi>x</mi><mo>≥</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">A=\\{x\\in\\mathbb{R}\\,|\\,x=0\\lor x\\geq1\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> with the rather bizarre <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\leq</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span> defined by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\leq b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a=b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mn>1</mn><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a+1\\leq b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>.</p>",
        "id": 225206114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612465340
    },
    {
        "content": "<p>So again <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mn>1.5</mn></mrow><annotation encoding=\"application/x-tex\">1\\leq 1.5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">5</span></span></span></span> is false, but doubling it it's true</p>",
        "id": 225206195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612465374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology/near/225206114\">said</a>:</p>\n<blockquote>\n<p>The example I like best right now is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><mi>x</mi><mo>=</mo><mn>0</mn><mo>∨</mo><mi>x</mi><mo>≥</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">A=\\{x\\in\\mathbb{R}\\,|\\,x=0\\lor x\\geq1\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> with the rather bizarre <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\leq</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span> defined by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\leq b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a=b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mn>1</mn><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a+1\\leq b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>.</p>\n</blockquote>\n<p>Yeah, this was my upgraded example</p>",
        "id": 225206451,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612465462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"317890\">Julian Külshammer</span> <a href=\"#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology/near/225205810\">said</a>:</p>\n<blockquote>\n<p>I wonder whether mathlib should at some point also start collecting such counterexamples.</p>\n</blockquote>\n<p>I think it should. But I don't yet know what the best way is to organize this. They shouldn't be scattered all over the place, I guess.</p>",
        "id": 225206667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612465562
    },
    {
        "content": "<p>And ideally they would be tagged in some way, so that automation such as <code>slim_check</code> (or similar stuff, I don't know) can take advantage of them.</p>",
        "id": 225206769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612465598
    },
    {
        "content": "<p>These remarks deserve definitely to be mentioned at least in the doc string... especially for not so well known notions</p>",
        "id": 225207560,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612465938
    },
    {
        "content": "<p>Yes, I think mathlib should contain counter-examples. They also act as sanity checks for the definitions.</p>",
        "id": 225207570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612465946
    },
    {
        "content": "<p>For me this naively sounds like a version of <code>inhabited</code> where instead of supplying one example one should supply a non-example which is an example of the things it extends.</p>",
        "id": 225208942,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1612466592
    },
    {
        "content": "<p>I meant something more general, not only when extending structures.</p>",
        "id": 225210810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612467320
    },
    {
        "content": "<p>Late to the party, but my general sense is that a typeclass like <code>ordered_semiring</code> shouldn't have anything \"cancellative\" about it. <code>ordered_cancel_add_comm_monoid</code> seems named well enough, but it shouldn't be an ancestor of <code>ordered_semiring</code>, which should admit <code>fin n</code> with saturating add as an example</p>",
        "id": 225212104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612467933
    },
    {
        "content": "<p>I don't think the counter examples need to be formally stated or proved, though</p>",
        "id": 225212361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612468054
    },
    {
        "content": "<p>For me the main thing I learn from counterexamples is to not attempt a certain theorem, and for that formality in the counterexample is not needed</p>",
        "id": 225212472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612468099
    },
    {
        "content": "<p>They could be in the docstrings, though of what exactly I'm not sure</p>",
        "id": 225212534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612468133
    },
    {
        "content": "<p>Slim_check seems like a particularly good motivation for this type of pathological typeclass instance to be in mathlib somewhere</p>",
        "id": 225215054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612469201
    },
    {
        "content": "<p>Having a collection of examples that satisfy a typeclass A but not a derived typeclass B would allow a slim-check-like tactic to say \"this is false for A but if you strengthen your requirement to B it might not be</p>",
        "id": 225215259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612469291
    },
    {
        "content": "<p>I really like these examples: thank you all who contributed them!</p>\n<p>I also think that counterexamples are fundamental to maths and therefore should find their way into mathlib.  However, I am not sure what the best approach is.</p>",
        "id": 225218462,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612470814
    },
    {
        "content": "<p>By the way, I think it is safe to assume that class A implies class B iff there is an instance that says so; if there is no instance then most likely it's false, because mathlib tries to be complete about such things</p>",
        "id": 225219768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612471480
    },
    {
        "content": "<p>Just to make sure that I understand correctly: <code>\\N + zmod 2</code> <em>without</em> (0,1) and comparing elements just based on their <code>\\N</code> coordinate, provided they are at least 1 away is another version of the same example as above, right?  It is canonically ordered and an ordered semiring, where (1,0) and (1,1) are not comparable, but their doubles are actually equal.</p>\n<p>Am I missing some further assumption?</p>",
        "id": 225223308,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612473206
    },
    {
        "content": "<p>This looks like it should work to me, but it's always safest to formalise the argument ;-)</p>",
        "id": 225223671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612473386
    },
    {
        "content": "<p>In case people find it useful, I pushed a <code>counterexamples</code> branch to mathlib.  I am trying to formalize the example that I mentioned above, but if someone wants to add other (counter)examples, feel free to do so!</p>",
        "id": 225333528,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612547916
    },
    {
        "content": "<p>Note that I think we don't have a counterexample to the original 2 &lt;= a -&gt; 2 &lt;= b -&gt; a + b &lt;= a * b question (I think) for ordered-semirings. As far as I can tell, amongst the semirings we've found which fail 2a &lt;= 2b -&gt; a &lt;= b, I don't think any of them contradict the original problem</p>",
        "id": 225428368,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612642618
    },
    {
        "content": "<p>I agree with you: so far, I do not know if <code>2 ≤ a v 2 ≤ b</code> implies <code>a + b ≤ a * b</code> in an ordered (commutative) semiring.</p>",
        "id": 225431577,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612647754
    },
    {
        "content": "<p>I thought that we didn't know if 2&lt;=a  and 2 &lt;=b implied a+b&lt;=a*b in the pathological structure which is an <code>ordered_semiring</code>, but we did know it wasn't true in what the literature calls an ordered semiring.</p>",
        "id": 225431594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612647808
    },
    {
        "content": "<p>oh maybe we never finished the proof</p>",
        "id": 225431626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612647843
    },
    {
        "content": "<p>Today's idea: let the semiring be {0,1,2,3,4,a,b,a+b,ab,a+1,a+2,b+1,b+2,2a, 2b, a^2, b^2, BIG}</p>",
        "id": 225431670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612647953
    },
    {
        "content": "<p>where I'm thinking of a=2+epsilon and b=2+delta and BIG means \"5 or more\" (so e.g 3+a=BIG etc)</p>",
        "id": 225431733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612648011
    },
    {
        "content": "<p>Now look at the ordering generated by 0&lt;1&lt;2&lt;3&lt;4, everything &lt;= BIG and 2&lt;=a, 2&lt;=b</p>",
        "id": 225431752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612648066
    },
    {
        "content": "<p>close under ordered semiring axioms and it will either turn into a counterexample or a proof</p>",
        "id": 225431794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612648088
    },
    {
        "content": "<p>but I am not talking about mathlib ordered semirings here, note that 3+4&lt;=2+4 is true but 3&lt;=2 is false.</p>",
        "id": 225431816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612648180
    },
    {
        "content": "<p>I think that I agree with you, but, to be honest, the axioms of ordered semirings are so strange that I really need to write them down to understand what the implications of \"close under the axioms\" are.</p>",
        "id": 225431820,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612648198
    },
    {
        "content": "<p>I'm talking about literature ordered semirings. I think the axiom should be removed. I suspect Leo just added it randomly</p>",
        "id": 225431859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612648204
    },
    {
        "content": "<p>Damiano I think the definition of ordered semiring in Lean 3 is <em>wrong</em> and there is no point investing any time investigating it. It's like deleting additive associativity from the axioms of a ring and then asking questions about the resulting pathological structure -- it's not worth investing time in it.</p>",
        "id": 225431876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612648271
    },
    {
        "content": "<p>Ok, fair enough!</p>",
        "id": 225431885,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612648297
    },
    {
        "content": "<p>Nowhere in the literature is this cancellation axiom, it is an embarrassment that our definition of ordered semiring has this axiom in.</p>",
        "id": 225431887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612648309
    },
    {
        "content": "<p>With the axiom removed I think my sketch above will get to the bottom of it and I strongly suspect that the boring answer will be that the ring above is a counterexample.</p>",
        "id": 225431930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612648350
    },
    {
        "content": "<p>A more interesting question would be to see what happens if the lemma is removed from the definition of ordered semiring. I doubt anything will break, and furthermore you'll be able to prove that a canonically ordered comm semiring is an ordered semiring</p>",
        "id": 225431945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612648438
    },
    {
        "content": "<p>This could be a fun experiment, I agree!</p>",
        "id": 225431998,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612648495
    },
    {
        "content": "<p>Somehow, I suspect that <em>something</em> will break down, but maybe not much.</p>",
        "id": 225432015,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612648560
    },
    {
        "content": "<p>Note that for linear_ordered semirings the axiom can be proved</p>",
        "id": 225432052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612648564
    },
    {
        "content": "<p>And in that case, Johan proved add_le_mul.  Maybe that one is the important axiom?  Ahaha</p>",
        "id": 225432063,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612648617
    },
    {
        "content": "<p>It would be funny to mix add and mul like that...</p>",
        "id": 225432070,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612648648
    },
    {
        "content": "<p>Anyway, if I get a chance, I will try to remove the axiom and see what happens.. but not tonight!</p>",
        "id": 225432125,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612648728
    },
    {
        "content": "<p>Kevin, I think that your idea does indeed construct a counterexample.  Here is an attempt at an explanation: actually formalizing it seems very long for me!</p>\n<p>Make <code>zmod 2 × zmod 2</code> intro an ordered ring by defining the three non-zero elements to be all incomparable and all greater than <code>(0, 0)</code>.  Intuitively, we have three rays, all starting at zero, but incomparable with one another.</p>\n<p>The actual ring is <code>ℕ × zmod 2 × zmod 2</code> with its normal (component-wise) addition and multiplication.  For the order, let <code>m, n : ℕ</code> and <code>a, b : zmod 2 × zmod 2</code>.  We set <code>(m, a) ≤ (n, b)</code> if and only if</p>\n<ul>\n<li><code>m &lt; n</code>, or</li>\n<li><code>m = n</code> and <code>a ≤ b</code>.</li>\n</ul>\n<p>This is the \"lexicographic preorder\".  From each natural number, sprout out 3 incomparable directions.</p>\n<p>Now, <code>(2, (1, 0))</code> and <code>(2, (0, 1))</code> are both at least <code>2 * (1, (1, 1)) = (2, (0, 0))</code>.  However,</p>\n<ul>\n<li>their sum <code>(2, (1, 0)) + (2, (0, 1)) = (4, (1, 1)) </code> and</li>\n<li>their product <code>(2, (1, 0)) * (2, (0, 1)) = (4, (0, 0)) </code></li>\n</ul>\n<p><em>are</em> comparable, but the inequality is the wrong one!</p>",
        "id": 225445398,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612673932
    },
    {
        "content": "<p>I don't think that's an ordered ring. <code>(0, 0) &lt;= (0, 1)</code> but if you add <code>(1, 0)</code> on both sides you get <code>(1, 0) &lt;= (1, 1)</code> which fails</p>",
        "id": 225445688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612674512
    },
    {
        "content": "<p>Ah, your example is taking place in <code>zmod 2 × zmod 2</code>, right?  Hmm, I need to think more about this!</p>",
        "id": 225445945,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612675126
    },
    {
        "content": "<p>If a=2+e and b=2+f with e,f&gt;=0 then a+b+(e+f+ef)=ab so you have to avoid this</p>",
        "id": 225450468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612683159
    },
    {
        "content": "<p>My impression with Bhavik's {0} union {x&gt;=1} example where a&lt;=b in the ring if a=b or a+1&lt;=b in the reals is that you can, if you're lucky, drop various &lt;=s and preserve ordered ring axioms, this is why maybe building up a weird finite counterexample might work</p>",
        "id": 225450620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612683392
    },
    {
        "content": "<p>I've been playing with the semiring</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [comm_semiring]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">bool</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">K_le</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero_le_one</span> <span class=\"o\">:</span> <span class=\"n\">K_le</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K_le</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K_le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">K_le</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">K_le</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K_le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">K_le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_le_mul_left</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K_le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">K_le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">le_of_add_le_add_left</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K_le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">K_le</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">two_le_tt</span> <span class=\"o\">:</span> <span class=\"n\">K_le</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">two_le_ff</span> <span class=\"o\">:</span> <span class=\"n\">K_le</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>based off your finite example (though I'm trying to make it into a mathlib ordered semiring mostly because I think it's a fun puzzle), I think the difficulty here is in showing that the ordering generated by the ordered semiring axioms isn't obviously antisymmetric - curiously enough including <code>le_of_add_le_add_left</code> in there makes it a little easier - but I still can't complete the antisymmetry proof. Perhaps in the finite case you mention it's easier though, since you could probably just case bash.</p>",
        "id": 225471937,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612715609
    },
    {
        "content": "<p>I was thinking that it might just be easier to do the finite example with Andrej Bauer's tool.</p>",
        "id": 225472140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612715967
    },
    {
        "content": "<p>I tried this now and it doesn't seem any finite models exist for the canonically ordered comm semiring. I could be encoding it incorrectly still, I can't quite get alg to recognize the canonically ordered property well, I don't see the reason why it should be infinite from the axioms.</p>",
        "id": 225481024,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612728269
    },
    {
        "content": "<p>well that's false</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">canonically_ordered_comm_semiring</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(),</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(),</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"o\">(),</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(),</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">(),</span>\n  <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 225481570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612729158
    },
    {
        "content": "<p>Well <em>obviously</em> the trivial ring works, Alex is a mathematician so he is <em>obviously</em> excluding all trivial counterexamples to any statement he makes.</p>",
        "id": 225483880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612732101
    },
    {
        "content": "<p>Is this not in <code>punit_instances</code> btw?</p>",
        "id": 225483909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612732179
    },
    {
        "content": "<p>Is 0&lt;=1 an axiom in these wretched things? If not then any ring with &lt;= := = works right (finite or not). If so then either 0=1 giving the example too trivial for us mathematicians to care about, or 0&lt;1&lt;2&lt;3&lt;...</p>",
        "id": 225484317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612732704
    },
    {
        "content": "<p>I don't think you can set <code>&lt;=</code> to <code>=</code> in a canonically ordered whatever because the canonical order thing characterizes exactly what <code>&lt;=</code> is</p>",
        "id": 225489274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612739263
    },
    {
        "content": "<p>(unless it's the trivial ring, of course)</p>",
        "id": 225489343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612739345
    },
    {
        "content": "<p><code>0 &lt;= x</code> is a theorem in canonically ordered monoids</p>",
        "id": 225489400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612739417
    },
    {
        "content": "<p>You don't know that <code>x |-&gt; a + x</code> is injective, so you can't deduce <code>x &lt; y -&gt; a + x &lt; a + y</code> so the infinite chain <code>0&lt;1&lt;2&lt;...</code> doesn't work</p>",
        "id": 225489442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612739521
    },
    {
        "content": "<p>it seems like fin n should be an instance</p>",
        "id": 225489483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612739529
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">canonically_ordered_comm_semiring</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">bor</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">band</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 225489568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612739694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology/near/225481024\">said</a>:</p>\n<blockquote>\n<p>I tried this now and it doesn't seem any finite models exist for the canonically ordered comm semiring. I could be encoding it incorrectly still, I can't quite get alg to recognize the canonically ordered property well, I don't see the reason why it should be infinite from the axioms.</p>\n</blockquote>\n<p>I might be missing something, but I thought a+b &lt;= a*b always holds in canonically ordered comm semirings for 2 &lt;= a and 2 &lt;= b - don't we always have 0 &lt;= x, and then Damiano's original proof basically works</p>",
        "id": 225494039,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612745919
    },
    {
        "content": "<p>I haven't been following this thread at all, but isn't <code>nnreal</code> such an object?</p>",
        "id": 225494211,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612746126
    },
    {
        "content": "<p>Oh, nevermind, I missed the inequalities with <code>2</code></p>",
        "id": 225494222,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612746155
    },
    {
        "content": "<p>Cool, there must be a problem with the translation to alg then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Constant</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">_.</span>\n<span class=\"n\">Binary</span> <span class=\"bp\">+</span> <span class=\"bp\">*.</span>\n<span class=\"n\">Relation</span> <span class=\"bp\">&lt;=.</span>\n<span class=\"n\">Relation</span> <span class=\"bp\">&lt;.</span>\n\n<span class=\"n\">Axiom</span> <span class=\"n\">plus_commutative</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">plus_associative</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">zero_neutral_left</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">mult_associative</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">mult_comm</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">one_unit_left</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">one_unit_right</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">distrutivity_right</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">distributivity_left</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z.</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">Consequences</span> <span class=\"n\">of</span> <span class=\"kd\">axioms</span> <span class=\"n\">that</span> <span class=\"n\">make</span> <span class=\"n\">alg</span> <span class=\"n\">run</span> <span class=\"n\">faster</span><span class=\"o\">:</span>\n\n<span class=\"n\">Axiom</span> <span class=\"n\">zero_neutral_right</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">mult_zero_left</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">mult_zero_right</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span>\n\n\n<span class=\"bp\">#</span> <span class=\"n\">order</span> <span class=\"kd\">axioms</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">reflexivity</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">x.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">transitivity</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span> <span class=\"bp\">/\\</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">z.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">antisymmetry</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span> <span class=\"bp\">/\\</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">canon</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">exists</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">canon</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">exists</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">totality</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span> <span class=\"bp\">\\/</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">x.</span>\n\n<span class=\"n\">Axiom</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">\\/</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span> <span class=\"bp\">/\\</span> <span class=\"n\">not</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">x.</span>\n<span class=\"n\">Axiom</span> <span class=\"n\">bot_le</span><span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">x.</span>\n</code></pre></div>",
        "id": 225496765,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612750128
    },
    {
        "content": "<p>I think the issue must be what the exists is quantifying over in the <code>canon</code> axioms</p>",
        "id": 225496777,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612750173
    },
    {
        "content": "<p>But if I try to bracket it I get an error message when parsing.</p>",
        "id": 225496783,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612750195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology/near/225483880\">said</a>:</p>\n<blockquote>\n<p>Well <em>obviously</em> the trivial ring works, Alex is a mathematician so he is <em>obviously</em> excluding all trivial counterexamples to any statement he makes.</p>\n</blockquote>\n<p>I wish this was what happened <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>, once again my mental model has 0, 1 separate so I didn't even consider  a 1-element example</p>",
        "id": 225496848,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612750274
    },
    {
        "content": "<p>\"Axiom canon: forall x y, x &lt;= y -&gt; exists z, y = x + g.\" looks dubious to me - surely you want <code>y = x + z</code> on the rhs</p>",
        "id": 225497211,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612750796
    },
    {
        "content": "<p>oops thats a copy paste error!</p>",
        "id": 225497277,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612750872
    },
    {
        "content": "<p>Oh also you have totality - you don't want to assume totality for these, an ordered semiring only needs a partial order structure</p>",
        "id": 225497442,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612751044
    },
    {
        "content": "<p>I also wonder if it runs faster if you don't include <code>&lt;</code> in the definition, since it can be inferred just from the definition of <code>&lt;=</code></p>",
        "id": 225497582,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612751275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology/near/225152002\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">char_zero_ordered_semiring</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">char_zero</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cast_injective</span> <span class=\"o\">:=</span> <span class=\"n\">nat.strict_mono_cast.injective</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Alex, I am not sure whether this will answer your question, but <code>nontrivial</code> <code>ordered_semiring</code>s have characteristic zero, so they are never finite.</p>",
        "id": 225502740,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612758565
    },
    {
        "content": "<p>Yeah I got that (slowly during the discussion the other day) I'm thinking of the canonical ordered version now, and wondering why I can't convince alg to find finite ones (which as mario observed certainly exist).</p>",
        "id": 225503288,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612759396
    },
    {
        "content": "<p>Or maybe I don't get it, Mario's one is trivial after all!</p>",
        "id": 225503299,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612759434
    },
    {
        "content": "<p>Nevertheless my alg code is wrong as it doesn't even find the trivial one</p>",
        "id": 225503344,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612759457
    },
    {
        "content": "<p>Ah, ok!  I thought that the question was about <code>ordered_semiring</code>s that were <em>also</em> canonically ordered!  I find the names really confusing!  I never remember whether a <code>canonically_ordered_semiring</code> is also an <code>ordered_semiring</code>...</p>",
        "id": 225503700,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612760108
    },
    {
        "content": "<p>I need to think more about Mario's <code>bool</code> example of a canonically ordered semiring of non-zero characteristic.</p>",
        "id": 225503759,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612760188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology/near/225431670\">said</a>:</p>\n<blockquote>\n<p>Today's idea: let the semiring be {0,1,2,3,4,a,b,a+b,ab,a+1,a+2,b+1,b+2,2a, 2b, a^2, b^2, BIG}</p>\n</blockquote>\n<p>I've shown that this semiring is a semiring, and that it has a partial order structure satisfying x &lt;= y -&gt; x+z &lt;= y+z and x &lt;= y -&gt; x<em>z &lt;= y</em>z, is there anything else left to check for this to be an example of the literature definition of an ordered semiring which doesn't have a+b &lt;= a*b?</p>",
        "id": 225633956,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612833598
    },
    {
        "content": "<p>I guess commutativity of * (or else you're missing x&lt;= y implies zx&lt;=zy) but this looks good to me. Does the cancellation axiom fall?</p>",
        "id": 225654191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612856932
    },
    {
        "content": "<p>Oops yeah I should have said comm semiring. Cancellation fails for exactly the reason you suggested it should, 3+2 &gt;= 4+2 but 3 &lt; 4</p>",
        "id": 225688770,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612877298
    }
]