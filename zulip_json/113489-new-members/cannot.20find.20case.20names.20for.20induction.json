[
    {
        "content": "<p>Why do I get the error \"could not find open goal of given case\" with the following code?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">}</span>\n\n<span class=\"n\">include</span> <span class=\"n\">size</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">{</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">{</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">done</span>\n    <span class=\"kn\">end</span>\n</pre></div>",
        "id": 182021033,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574863250
    },
    {
        "content": "<p>The error message is weird, but it's clearly Lean's answer to you trying to do something weird. Could you give more context? What are you actually trying to do?</p>",
        "id": 182021441,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574863521
    },
    {
        "content": "<p>changing <code>let</code> to <code>have</code> works, but i am not sure what is going on either</p>",
        "id": 182021998,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1574863920
    },
    {
        "content": "<p>I want to prove a property about some relation on elements of an inductive type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>, but it doesn't hold by structural induction because the definition of the relation uses an operation that changes the elements, but which does preserve the size, so my induction must be on the size of the elements.</p>",
        "id": 182022952,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574864578
    },
    {
        "content": "<blockquote>\n<p>trying to do something weird</p>\n</blockquote>\n<p>Why is this weird?</p>",
        "id": 182022997,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574864612
    },
    {
        "content": "<p>It will be very difficult to help you without a clearer explanation, or some code actually illustrating your use case. In the mean time, maybe reading <a href=\"#narrow/stream/113489-new-members/topic/Induction.20on.20minimum.20.22length.22\" title=\"#narrow/stream/113489-new-members/topic/Induction.20on.20minimum.20.22length.22\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Induction.20on.20minimum.20.22length.22</a> could help (what you wrote sounds vaguely similar to that old thread).</p>",
        "id": 182023728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574865056
    },
    {
        "content": "<p>At the beginning of your proof, you have chosen an element <code>a</code>. Now, it is fixed forever, so you can not do an induction on its size. The naive way to do this would be to prove a statement of the form : \"for all <code>n</code>, for all elements <code>a</code> of size<code>n</code>, then something holds\", by induction over <code>n</code>. The non-naive way would be to <code>generalize</code> something.</p>",
        "id": 182023767,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574865069
    },
    {
        "content": "<p>Ah yes, of course. I see - thanks! Sorry for all the stupid questions ;-)</p>",
        "id": 182024771,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1574865673
    },
    {
        "content": "<p>Don't worry about asking \"stupid\" questions.</p>",
        "id": 182024842,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574865718
    },
    {
        "content": "<p>especially not with error messages like these. i still find it strange that it only fails when <code>case</code> is used wheras you just can't prove it if you don't use <code>case</code>.</p>",
        "id": 182025103,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1574865857
    },
    {
        "content": "<p>Error messages are not Lean's strong point. After a while you get used to them although I've not seen this one before</p>",
        "id": 182032305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574870649
    }
]