[
    {
        "content": "<p>It seems like <code>attribute</code> is the body of this class definition.  Is that correct?  If so, what does it do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An additive commutative monoid is an additive monoid with commutative `(+)`. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor add_monoid add_comm_semigroup]</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">add_comm_semigroup</span> <span class=\"n\">M</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">comm_monoid</span>\n</code></pre></div>",
        "id": 219558976,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607653374
    },
    {
        "content": "<p>No, that's not correct. <code>add_comm_monoid</code>  is simply a class that includes all the fields of <code>add_monoid</code> and <code>add_comm_semigroup</code> and nothing else.</p>",
        "id": 219559661,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607654162
    },
    {
        "content": "<p><code>attribute</code> is a built-in command telling Lean to apply a certain attribute, in this case <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#to_additive\">attr#to_additive</a>, to a certain declaration, in this case <code>comm_monoid</code>. See the <a href=\"https://leanprover.github.io/reference/other_commands.html#attributes\">reference manual</a>.</p>",
        "id": 219559764,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607654280
    },
    {
        "content": "<p>Thanks, it was just the formatting was confusing in <a href=\"https://github.com/leanprover-community/mathlib/blob/c9793b5273140df2d0d0c35f16e63d640ba87193/src/algebra/group/defs.lean#L94\">this file</a>.  The use of white space gives a visual cue of relatedness to the prior declaration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A commutative additive semigroup is a type with an associative commutative `(+)`. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor add_semigroup]</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_comm_semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">add_semigroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">comm_semigroup</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">comm_semigroup</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semigroup</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 219560034,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607654637
    }
]