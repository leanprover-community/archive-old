[
    {
        "content": "<p>I have defined a notion of a separable degree of a polynomial like so (F is a field):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">separable_degree</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HF</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">polynomial.degree</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n  <span class=\"k\">else</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n    <span class=\"n\">polynomial.degree</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">g.separable</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">polynomial.expand</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Now, in the middle of some proof, given assumptions <code>h : separable_degree F f p n,</code>, <code>p = 0</code> and <code>char_p F 0</code>, I would like to unwind it to get <code>polynomial.degree f = n</code>. How do I do this? Attempting a <code>rw</code> command does not seem to work. Thanks!</p>\n<p>Maybe related question: I noticed that the definition of <code>char_p</code> is a class (not a def). Is there a (practical) difference between these two approaches?</p>",
        "id": 228133776,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614522491
    },
    {
        "content": "<p>P.S. if there are somehow more efficient ways of encoding the same definition, I'd be happy to learn about this as well.</p>",
        "id": 228133806,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614522536
    },
    {
        "content": "<p>For the specific case of <code>p = 0</code> you might do better to split into zero and succ using pattern matching</p>",
        "id": 228136491,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614525537
    },
    {
        "content": "<p>For ite (if-then-else) expressions you can always use <code>split_ifs</code>. Though I think pattern matching is a better way to define this.</p>",
        "id": 228137945,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1614527132
    },
    {
        "content": "<p>To each their own, and ite is a perfectly valid way of doing things.</p>",
        "id": 228138004,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1614527173
    },
    {
        "content": "<p>For this definition, maybe it would be better to define the exponential characteristic of a field, and when making the definition above, use that so you no longer have an <code>if_then_else</code>.</p>",
        "id": 228138682,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614527906
    },
    {
        "content": "<p>I feel like having this exponential characteristic and some small API around it would be useful anyway</p>",
        "id": 228138702,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614527935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> After making such a definition (no matter whether you use the equation compiler, or <code>if .. then .. else ..</code> I would write two lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">separable_degree_of_char_zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">separable_degree</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">\\</span><span class=\"n\">iff</span> <span class=\"n\">polynomial.degree</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">separable_degree_of_char_pos</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span>  <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">separable_degree</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">\\</span><span class=\"n\">iff</span> <span class=\"bp\">\\</span><span class=\"n\">exists</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">etc</span> <span class=\"n\">etc</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span><span class=\"o\">],</span> <span class=\"c1\">-- 2 goals</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c\">/-</span><span class=\"cm\"> prove that p \\ne 0 if 0 &lt; p, which should be nat.pos_iff_ne_zero, or so -/</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228188709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614581874
    },
    {
        "content": "<p>On the other hand... I think that Adam's idea is also a good one.</p>",
        "id": 228188761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614581895
    },
    {
        "content": "<p>Another thing to consider is whether you want a definition of <code>separable_degree</code> that spits out <code>n</code>, instead of taking <code>f</code> and <code>n</code> as inputs, and spitting out true/false</p>",
        "id": 228188772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614581932
    },
    {
        "content": "<p>Presumably using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> for the else branch?</p>",
        "id": 228188901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614582060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Unwinding.20definitions.20involving.20if.20else/near/228188772\">said</a>:</p>\n<blockquote>\n<p>Another thing to consider is whether you want a definition of <code>separable_degree</code> that spits out <code>n</code>, instead of taking <code>f</code> and <code>n</code> as inputs, and spitting out true/false</p>\n</blockquote>\n<p>Yes, in my mind it would be more natural / more easy to use later on, if there is a function roughly like <code>def separable_degree (f : polynomial F) : \\N</code>. I oriented myself with the setup of the characteristic of a field in <code>algebra.char_p.basic</code> which \"only\" spits out a proposition. I personally find it somewhat cumbersome to use that approach, but I was not sure why it had been implemented there in this indirect way and if something prevents me from coming up with a definition that somehow in the middle uses the existence-and-unicity of a number with a certain property. Do you have some advice on that?</p>",
        "id": 228193182,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614585962
    },
    {
        "content": "<p>char_p is the way it is because it used a typeclass, and is a property of a type, not a particular value within that type. We could have gone for <code>[fact (char_p R = 0)]</code> instead, but that's less desirable for a number of reasons</p>",
        "id": 228193692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614586317
    },
    {
        "content": "<p>Hm, still being very new to all this I'm not sure I really understand what you are alluding to. Do you mind elaborating a bit? -- what are the downsides of directly having a function that assigns some <code>n : \\N</code> to a field? Which of these downsides apply / don't apply to the situation with the separable degree?</p>",
        "id": 228194287,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614586713
    },
    {
        "content": "<p>Another benefit is that you can reuse literally the same <code>p</code> for many rings. Otherwise you might have to rewrite quite often to show that <code>ring_char (zmod p) = ring_char (polynomial (zmod p)) = ring_char (algebraic_closure (zmod p)) = ...</code></p>",
        "id": 228194518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614586872
    },
    {
        "content": "<p>And sometimes those rewrites will be in places where Lean doesn't like to rewrite.</p>",
        "id": 228194544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614586887
    },
    {
        "content": "<p>So it's quite useful down the road to just have the same <code>p</code> everywhere, it saves contentless effort</p>",
        "id": 228194647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614586934
    },
    {
        "content": "<p>On the other hand, the degree of a polynomial is of a different nature, you don't typically consider many constructions that preserve the degree</p>",
        "id": 228194686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614586968
    },
    {
        "content": "<p>Oh, I embarassingly didn't know that there is the function <code>ring_char</code>, so my complaint was somehow not quite to the point! That said, is there some tutorial etc. with some minimal working examples describing the ramifications of the way such things are set up? As a rule of thumb, what I am taking from your answers, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , is that using the output of a function is less advisable when the result of the function will be be used \"a lot\" because I would need to reverse-compile the definition of the function whenever I really want to use the output, and in this case it is more efficient to make it a property of a type?</p>",
        "id": 228195838,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614587708
    },
    {
        "content": "<p>It's somehow similar to constructions like <code>fraction_field</code>. You need a construction, because otherwise you don't know it exists. But you also want to be able to be able to treat <code>Q</code> as the fraction field of <code>Z</code>. But it isn't equal to <code>fraction_field Z</code>, only isomorphic.</p>",
        "id": 228196118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614587893
    },
    {
        "content": "<p>So you prove everything using two rings and a predicate that one is the fraction field of the other.</p>",
        "id": 228196134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614587919
    },
    {
        "content": "<p>Which often makes the proofs easier (but you need an mathematically-artificial <code>variables</code> line at the top of your file) and it also makes it easier to apply this.</p>",
        "id": 228196179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614587957
    },
    {
        "content": "<p><code>ring_char</code> exists, but I don't think it is used a lot in mathlib</p>",
        "id": 228196203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614587978
    },
    {
        "content": "<p>@the analogy between fraction fields and characteristic: it the datum of an isomorphism Q \\cong Frac(Z) akin to the datum of providing a proof of an equation such as <code>ring_char (zmod p) = ring_char (polynomial (zmod p))</code>?</p>",
        "id": 228196868,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614588368
    },
    {
        "content": "<p>(metaphorically speaking, of course)</p>",
        "id": 228196943,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614588413
    },
    {
        "content": "<p>yes, but it will be even harder to use, because it is not an equality but an isom</p>",
        "id": 228197377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614588664
    },
    {
        "content": "<p>OK, thanks. That was a useful lesson!</p>",
        "id": 228197937,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614588985
    }
]