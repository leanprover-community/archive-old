[
    {
        "content": "<p>How can I finish this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">p_or_q_implies_r_implies_p_implies_r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 184436513,
        "sender_full_name": "Iocta",
        "timestamp": 1577654009
    },
    {
        "content": "<p><code>h (or.inl hp)</code></p>",
        "id": 184436563,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1577654099
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 184436800,
        "sender_full_name": "Iocta",
        "timestamp": 1577654600
    },
    {
        "content": "<p>Proofs like these can be done \"automatically\" by chasing through Lean's error messages. (Well, not as automatic as using a tactic like <code>cc</code> or <code>finish</code>, of course). In case it helps, here's an edited transcript of my thoughts as I work through this one:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- Step 0:</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">p_or_q_implies_r_implies_p_implies_r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n<span class=\"c1\">-- don&#39;t know how to synthesize placeholder</span>\n<span class=\"c1\">-- context:</span>\n<span class=\"c1\">-- p q r : Prop,</span>\n<span class=\"c1\">-- h : p ∨ q → r,</span>\n<span class=\"c1\">-- hp : p</span>\n<span class=\"c1\">-- ⊢ r</span>\n</pre></div>\n\n\n<p>Hmm, Lean wants something of type <code>r</code>. I don't see anything of that type in the context, but I do see that <code>h : p ∨ q → r</code>. So I bet we can make progress if we replace the <code>_</code> with <code>h _</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Step 1:</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">p_or_q_implies_r_implies_p_implies_r&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n<span class=\"c1\">-- don&#39;t know how to synthesize placeholder</span>\n<span class=\"c1\">-- context:</span>\n<span class=\"c1\">-- p q r : Prop,</span>\n<span class=\"c1\">-- h : p ∨ q → r,</span>\n<span class=\"c1\">-- hp : p</span>\n<span class=\"c1\">-- ⊢ p ∨ q</span>\n</pre></div>\n\n\n<p>Now Lean wants something of type <code>p ∨ q</code>. I recall that <code>or</code> has two constructors, <code>or.inl</code> and <code>or.inr</code>. (In ordinary language, I know I can prove an \"or\" statement by proving either the thing on the left or the thing on the right).</p>\n<p>Let's try each one in turn. First, let's replace the <code>_</code> with <code>(or.inl _)</code> (parentheses are needed because otherwise <code>or.inl</code> and <code>_</code> will be read as two distinct arguments to <code>h</code>):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Step 2L:</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">p_or_q_implies_r_implies_p_implies_r&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n<span class=\"c1\">-- don&#39;t know how to synthesize placeholder</span>\n<span class=\"c1\">-- context:</span>\n<span class=\"c1\">-- p q r : Prop,</span>\n<span class=\"c1\">-- h : p ∨ q → r,</span>\n<span class=\"c1\">-- hp : p</span>\n<span class=\"c1\">-- ⊢ p</span>\n</pre></div>\n\n\n<p>Hey, <code>hp : p</code> so <code>hp</code> should fit perfectly in the hole!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Step 3L:</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">p_or_q_implies_r_implies_p_implies_r&#39;&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">)))</span>\n<span class=\"c1\">-- * Tada!</span>\n</pre></div>\n\n\n<p>Just for fun, let's see what happens if we tried using <code>(or.inr _)</code> back at Step 2 instead:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Step 2R:</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">p_or_q_implies_r_implies_p_implies_r&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n<span class=\"c1\">-- don&#39;t know how to synthesize placeholder</span>\n<span class=\"c1\">-- context:</span>\n<span class=\"c1\">-- p q r : Prop,</span>\n<span class=\"c1\">-- h : p ∨ q → r,</span>\n<span class=\"c1\">-- hp : p</span>\n<span class=\"c1\">-- ⊢ q</span>\n</pre></div>\n\n\n<p>Well darn, I don't see anything in the context with type <code>q</code>, nor anything that can give me something of type <code>q</code>. So this was a dead end after all.</p>",
        "id": 184439048,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1577658794
    },
    {
        "content": "<p>That does help, thanks!</p>",
        "id": 184439647,
        "sender_full_name": "Iocta",
        "timestamp": 1577659930
    }
]