[
    {
        "content": "<p>I have the following goal state:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">fg</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">hfa</span><span class=\"o\">:</span> <span class=\"n\">fn_lb</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"n\">hgb</span><span class=\"o\">:</span> <span class=\"n\">fn_lb</span> <span class=\"n\">g</span> <span class=\"n\">b</span>\n<span class=\"err\">⊢</span> <span class=\"n\">fn_lb</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Is there a tactic for unfolding the definition  of<code>fn_lb</code> in this goal state?</p>",
        "id": 204628653,
        "sender_full_name": "Chris M",
        "timestamp": 1595390790
    },
    {
        "content": "<p>Neither <code>simp</code> nor <code>dsimp</code> work.</p>",
        "id": 204628712,
        "sender_full_name": "Chris M",
        "timestamp": 1595390890
    },
    {
        "content": "<p><code>unfold</code> or <code>dunfold</code> or <code>delta</code>?</p>",
        "id": 204628822,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595391095
    },
    {
        "content": "<p>None of those do anything</p>",
        "id": 204628860,
        "sender_full_name": "Chris M",
        "timestamp": 1595391123
    },
    {
        "content": "<p>can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 204628967,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595391324
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">fn_lb</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hgb</span> <span class=\"o\">:</span> <span class=\"n\">fn_lb</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fn_lb</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dunfold</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204629015,
        "sender_full_name": "Chris M",
        "timestamp": 1595391379
    },
    {
        "content": "<p><code>dunfold fn_lb</code></p>",
        "id": 204629017,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595391397
    },
    {
        "content": "<p>you wouldn't want a tactic that says \"unfold every definition you see and then show me the result\"</p>",
        "id": 204629028,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595391435
    },
    {
        "content": "<p>right</p>",
        "id": 204629029,
        "sender_full_name": "Chris M",
        "timestamp": 1595391445
    },
    {
        "content": "<p>So this unfolds the definition in the conclusion, but not in the assumptions. how do I unfold the assumptinos?</p>",
        "id": 204629037,
        "sender_full_name": "Chris M",
        "timestamp": 1595391479
    },
    {
        "content": "<p><code>dunfold fn_lb at hfa</code> or <code>dunfold fn_lb at *</code></p>",
        "id": 204629079,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595391497
    },
    {
        "content": "<p>great :)</p>",
        "id": 204629082,
        "sender_full_name": "Chris M",
        "timestamp": 1595391507
    },
    {
        "content": "<p>all of this should be in the docs, see e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold\">tactic#unfold</a></p>",
        "id": 204629086,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595391525
    },
    {
        "content": "<p>Ok thanks, I'll look there next time</p>",
        "id": 204629124,
        "sender_full_name": "Chris M",
        "timestamp": 1595391592
    }
]