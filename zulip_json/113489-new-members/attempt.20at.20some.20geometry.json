[
    {
        "content": "<p>as an exercise I wanted to try proving some theorems from Artin's <em>Geometric Algebra</em>, but I quickly hit a wall -- maybe due to being weak on the basics, maybe due to infelicitous transcription of the axioms. here is what I have so far, but as you can see I did not make much progress on the first lemma, just unsure how to proceed! apologies for the very vague 'question' but any tips or pointers would be appreciated.</p>\n<div class=\"codehilite\"><pre><span></span>-- constants of types subsume the usual statement of a theory&#39;s signature and axioms\nconstants Pt Ln : Sort\nconstant belongs : Pt → Ln → Prop\nconstant parallel : Ln → Ln → Prop\n\n-- Artin def 2.1: can and ought we to formulate this as a term of type parallel l₁ l₂? this should be a definition not an axiom - is &#39;constant&#39; appropriate?\nconstant eq_or_no_common_pt_implies_parallel (l₁ l₂ : Ln) : (l₁ = l₂ ∨ ¬∃ p : Pt, belongs p l₁ ∧ belongs p l₂) → parallel l₁ l₂\n\n-- Artin axiom 1: distinct points determine unique line\nconstant unique_ln_bw_two_pts (p₁ p₂ : Pt) : (p₁ ≠ p₂) → ∃ p₁p₂ : Ln, belongs p₁ p₁p₂ ∧ belongs p₂ p₁p₂ ∧ (∀ l : Ln, belongs p₁ l ∧ belongs p₂ l → p₁p₂ = l)\n-- Artin axiom 2: exists unique parallel\nconstant exists_parallel (p : Pt) (l : Ln) : (∃ l₁ : Ln, parallel l l₁ ∧ belongs p l₁)\nconstant unique_parallel (p : Pt) (l l₁ l₂ : Ln) : (parallel l l₁ ∧ parallel l l₂ ∧ belongs p l₁ ∧ belongs p l₁) → l₁ = l₂\n\nlemma line_parallel_to_itself (l : Ln) : reflexive parallel :=\nbegin\n  have h₁ := eq_or_no_common_pt_implies_parallel l l,\n  have h₂ := eq.refl l,\n  sorry\nend\n\ntheorem parallel_is_equivalence : equivalence parallel :=\nbegin\n  -- split,\n  -- exact line_parallel_to_itself,\nend\n</pre></div>",
        "id": 185127850,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1578499689
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">line_parallel_to_itself</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">parallel</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_or_no_common_pt_implies_parallel</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 185128089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578499821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247064\">@Matt Earnshaw</span> In general people tend to avoid <code>constant</code> completely, except for little demo purposes.</p>",
        "id": 185128158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578499868
    },
    {
        "content": "<p>[note that I have proved it like a computer scientist -- I wrote the proof backwards]</p>",
        "id": 185128171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578499876
    },
    {
        "content": "<p>But for testing things out, it's fine. And in that cases your \"axioms\" should also be encoded as <code>constant</code>s</p>",
        "id": 185128333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578499973
    },
    {
        "content": "<p>A different option would be to turn all your <code>constant</code>s into <code>variable</code>s, and maybe make some of them <em>implicit</em> (using <code>{}</code>)</p>",
        "id": 185128416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578500041
    },
    {
        "content": "<p>In the end, if you move away from <code>constant</code>, your best bet would be to bundle all your data and axioms into a <code>structure</code></p>",
        "id": 185128520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578500091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247064\">@Matt Earnshaw</span> You have a typo in the <code>unique_parallel</code> axiom. You ask that <code>l1</code> is parallel to <code>l</code> twice.</p>",
        "id": 185128684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578500178
    },
    {
        "content": "<p>Also, can't you just ask that <code>l1</code> is parallel to <code>l2</code>, and leave <code>l</code> completely out of the picture?</p>",
        "id": 185128712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578500197
    },
    {
        "content": "<p>Another remark: usually it's better to not use <code>\\and</code> in assumptions, but to just state the clauses as separate assumptions. That makes it easier to use the lemma/axiom</p>",
        "id": 185128876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578500299
    },
    {
        "content": "<p>thanks both, this is very helpful already. now I am trying to make headway on the symmetry part of the equivalence relation proof.  It seem necessary to introduce the converse <code>constant parallel_implies_eq_or_no_common_pt (l₁ l₂ : Ln) : parallel l₁ l₂ → (l₁ = l₂ ∨ ¬∃ p : Pt, belongs p l₁ ∧ belongs p l₂)</code> (which finally <em>defines</em> parallel). then</p>\n<div class=\"codehilite\"><pre><span></span>lemma symmetric_parallel : symmetric parallel :=\nbegin\n  intros l₁ l₂ h,\n  have x := (parallel_implies_eq_or_no_common_pt l₁ l₂) h,\n  cases x,\n  rw x,\n  apply line_parallel_to_itself,\nend\n</pre></div>\n\n\n<p>with context</p>\n<div class=\"codehilite\"><pre><span></span>l₁ l₂ : Ln,\nh : parallel l₁ l₂,\nx : ¬∃ (p : Pt), belongs p l₁ ∧ belongs p l₂\n⊢ parallel l₂ l₁\n</pre></div>\n\n\n<p>now what I <em>want</em> to do is use <code>and.symm</code> to swap the terms in <code>x</code>, but am stuck there.</p>",
        "id": 185135377,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1578504127
    },
    {
        "content": "<p>I'm sure this can be golfed (note that I imported <code>logic.basic</code> (for <code>not_exists</code>) and <code>tactic.basic</code> (for <code>rintro</code>) from mathlib):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">parallel_implies_eq_or_no_common_pt</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parallel</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">,</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">symmetric_parallel</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">parallel</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">parallel_implies_eq_or_no_common_pt</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">line_parallel_to_itself</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">eq_or_no_common_pt_implies_parallel</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span><span class=\"n\">h₁</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 185143048,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578508890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247064\">@Matt Earnshaw</span> Shouldn't <code>parallel</code> actually be a definition, as in:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">parallel</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">,</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 185145475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578510257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> thanks that's helpful. think I have the transitivity proof down now</p>",
        "id": 185147046,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1578511187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> yes, it should be, thanks. makes things neater</p>",
        "id": 185147126,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1578511226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247064\">@Matt Earnshaw</span> This is what I have atm:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"c1\">-- constants of types subsume the usual statement of a theory&#39;s signature and axioms</span>\n<span class=\"kn\">constants</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span>\n<span class=\"kn\">constant</span> <span class=\"n\">belongs</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span> <span class=\"bp\">→</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">def</span> <span class=\"n\">parallel</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">,</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Artin axiom 1: distinct points determine unique line</span>\n<span class=\"kn\">constant</span> <span class=\"n\">unique_ln_bw_two_pts</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">p₁p₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">belongs</span> <span class=\"n\">p₁</span> <span class=\"n\">p₁p₂</span> <span class=\"bp\">∧</span> <span class=\"n\">belongs</span> <span class=\"n\">p₂</span> <span class=\"n\">p₁p₂</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">belongs</span> <span class=\"n\">p₁</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">belongs</span> <span class=\"n\">p₂</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">p₁p₂</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Artin axiom 2: exists unique parallel</span>\n<span class=\"kn\">constant</span> <span class=\"n\">exists_parallel</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">parallel</span> <span class=\"n\">l</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">unique_parallel</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">parallel</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp₁</span> <span class=\"o\">:</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp₂</span> <span class=\"o\">:</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">parallel_refl</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">parallel</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">parallel_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">parallel</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">parallel_refl</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists_imp_exists</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">parallel_trans</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">parallel</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h₁₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h₂₃</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">parallel_refl</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">parallel_is_equivalence</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">parallel</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">parallel_refl</span><span class=\"o\">,</span> <span class=\"n\">parallel_symm</span><span class=\"o\">,</span> <span class=\"n\">parallel_trans</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 185148312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578511973
    },
    {
        "content": "<p>I'm using some tactics that aren't in core. But I think the help cutting through boilerplate.</p>",
        "id": 185148373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578512007
    },
    {
        "content": "<p>that gives me <code>contrapose only applies to nondependent arrows between decidable props</code>, though I am satisfied with the following (but still good to see alternatives)</p>\n<div class=\"codehilite\"><pre><span></span>lemma parallel_symmetric : symmetric parallel :=\nbegin\n  intros l₁ l₂ h,\n  cases h,\n  { rw h,\n    left,\n    refl },\n  { right,\n    exact h },\nend\n</pre></div>",
        "id": 185148787,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1578512278
    },
    {
        "content": "<p>Look at the other lines I added to the top</p>",
        "id": 185149058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578512455
    },
    {
        "content": "<p><code>noncomputable theory</code> and <code>open_locale classical</code></p>",
        "id": 185149078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578512466
    },
    {
        "content": "<p>How can <code>right, exact h</code> close that goal? You need to apply symmetry somewhere.</p>",
        "id": 185149205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578512550
    },
    {
        "content": "<p>ah I see</p>",
        "id": 185149309,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1578512637
    },
    {
        "content": "<p>hm, I suppose it's only working due to tactic magic - in which case I prefer yours</p>",
        "id": 185149437,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1578512705
    },
    {
        "content": "<p>But you are only using basic tactics, so there shouldn't be any magic at all.</p>",
        "id": 185149727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578512897
    },
    {
        "content": "<p>But I agree that lean seems to be happy with it</p>",
        "id": 185149770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578512935
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>doesn't work. So I really don't get why your version does work. Maybe something with the existential, but it's still weird</p>",
        "id": 185150120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578513201
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">parallel_trans</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">parallel</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h₁₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h₂₃</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">parallel_refl</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">h₁₃</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₃</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h₁₃</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">parallel_refl</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h₁₃</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">h₁₃</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp₁</span><span class=\"o\">,</span> <span class=\"n\">hp₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">unique_parallel</span> <span class=\"n\">p</span> <span class=\"n\">l₂</span><span class=\"o\">,</span>\n      <span class=\"n\">all_goals</span>\n      <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">right</span><span class=\"o\">},</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The last line of the proof abuses the weird behaviour that I don't understand</p>",
        "id": 185150966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578513698
    },
    {
        "content": "<blockquote>\n<p>that gives me <code>contrapose only applies to nondependent arrows between decidable props</code>, though I am satisfied with the following (but still good to see alternatives)</p>\n</blockquote>\n<p>lemma parallel_symmetric : symmetric parallel :=<br>\nbegin<br>\n  intros l₁ l₂ h,<br>\n  cases h,<br>\n  { rw h,<br>\n    left,<br>\n    refl },<br>\n  { right,<br>\n    exact h },<br>\nend</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you understand what's going on?</p>",
        "id": 185152739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578514910
    },
    {
        "content": "<p>oh wow, that was a real wtf</p>",
        "id": 185153554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578515470
    },
    {
        "content": "<p>the problem is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constants</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span>\n</pre></div>",
        "id": 185153582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578515490
    },
    {
        "content": "<p><code>Sort = Prop</code></p>",
        "id": 185153595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578515498
    },
    {
        "content": "<p>therefore <code>l₁</code> and <code>l₂</code> are two proofs of the proposition <code>Ln</code> and are hence equal by proof irrelevance</p>",
        "id": 185153674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578515546
    },
    {
        "content": "<p>Wow, indeed <code>#check Pt</code> gives <code>Pt : Prop</code>.</p>",
        "id": 185153876,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578515678
    },
    {
        "content": "<p>Aha, that's sneaky</p>",
        "id": 185154571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578516159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247064\">@Matt Earnshaw</span> The solution is to change <code>Sort</code> into <code>Type</code></p>",
        "id": 185154767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578516317
    },
    {
        "content": "<p>Or presumably a change to <code>Sort u</code> would also solve this.</p>",
        "id": 185155905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578517063
    },
    {
        "content": "<p>I would suggest <code>Type u</code> instead</p>",
        "id": 185156128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578517198
    },
    {
        "content": "<blockquote>\n<p>Or presumably a change to <code>Sort u</code> would also solve this.</p>\n</blockquote>\n<p>That would still allow <code>Prop</code> if <code>u = 0</code></p>",
        "id": 185156448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578517422
    },
    {
        "content": "<p>Yes, but presumably the invalid proof still stops working...</p>",
        "id": 185156629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578517534
    },
    {
        "content": "<p>It will, but if you try to do any constructions they won't be able to live in the same universe <code>Sort u</code> in all likelihood, they will have to live in <code>Sort (max 1 u)</code> or similar and that will be inconvenient. (This is why most type constructors like <code>list</code> work on <code>Type u</code> instead of <code>Sort u</code>.)</p>",
        "id": 185157299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578517870
    },
    {
        "content": "<p>aha</p>",
        "id": 185160627,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1578520134
    },
    {
        "content": "<p>Aside from the typo that Johan already pointed out, there's actually another issue with the type of <code>unique_parallel</code>: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">unique_parallel</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">parallel</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp₁</span> <span class=\"o\">:</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp₂</span> <span class=\"o\">:</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span>\n</pre></div>\n\n\n<p>This says that given a point <code>p</code>, two parallel lines <code>l₁</code> and <code>l₂</code> passing through <code>p</code> must be equal to each other. However, Artin phrased axiom 2 this way: \"Given a point <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> and a line <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span></span></span></span>, there exists one and only one line <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> lies on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> and such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>∥</mo><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">m\\parallel l</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span></span></span></span>.\" In particular, note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> does not have to belong to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span></span></span></span>. Here's a minimal fix:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">unique_parallel</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">parallel</span> <span class=\"n\">l</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">parallel</span> <span class=\"n\">l</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp₁</span> <span class=\"o\">:</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp₂</span> <span class=\"o\">:</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span>\n</pre></div>\n\n\n<p>Here's Johan's snippet updated with the <code>Type*</code> fix and the fix above, as well as a proof of <code>parallel_trans</code>. I also made a few parameters implicit with curly braces:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"c1\">-- constants of types subsume the usual statement of a theory&#39;s signature and axioms</span>\n<span class=\"kn\">constants</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kn\">constant</span> <span class=\"n\">belongs</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span> <span class=\"bp\">→</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">def</span> <span class=\"n\">parallel</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">,</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Artin axiom 1: distinct points determine unique line</span>\n<span class=\"kn\">constant</span> <span class=\"n\">unique_ln_bw_two_pts</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">p₁p₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">belongs</span> <span class=\"n\">p₁</span> <span class=\"n\">p₁p₂</span> <span class=\"bp\">∧</span> <span class=\"n\">belongs</span> <span class=\"n\">p₂</span> <span class=\"n\">p₁p₂</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">belongs</span> <span class=\"n\">p₁</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">belongs</span> <span class=\"n\">p₂</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">p₁p₂</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Artin axiom 2: exists unique parallel</span>\n<span class=\"kn\">constant</span> <span class=\"n\">exists_parallel</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">parallel</span> <span class=\"n\">l</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">unique_parallel</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">parallel</span> <span class=\"n\">l</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">parallel</span> <span class=\"n\">l</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp₁</span> <span class=\"o\">:</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp₂</span> <span class=\"o\">:</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">parallel_refl</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">parallel</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">parallel_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">parallel</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">parallel_refl</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists_imp_exists</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">parallel_trans</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">parallel</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"n\">h₁₂</span> <span class=\"n\">h₂₃</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₃</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₃</span> <span class=\"o\">:=</span> <span class=\"n\">unique_parallel</span> <span class=\"o\">(</span><span class=\"n\">parallel_symm</span> <span class=\"n\">h₁₂</span><span class=\"o\">)</span> <span class=\"n\">h₂₃</span> <span class=\"n\">h₁</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">parallel_refl</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">parallel_is_equivalence</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">parallel</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">parallel_refl</span><span class=\"o\">,</span> <span class=\"n\">parallel_symm</span><span class=\"o\">,</span> <span class=\"n\">parallel_trans</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 185182091,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578543023
    },
    {
        "content": "<p>also I think all of these should be structure / class instead of constants</p>",
        "id": 185182238,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578543303
    },
    {
        "content": "<p>How would you set it up?</p>",
        "id": 185182310,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578543455
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_parallel</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">parallel</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∥</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">has_parallel</span><span class=\"bp\">.</span><span class=\"n\">parallel</span>\n\n<span class=\"n\">class</span> <span class=\"n\">pre_geometry</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mem</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">pre_geometry</span><span class=\"bp\">.</span><span class=\"n\">has_parallel</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">pre_geometry</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_parallel</span> <span class=\"n\">Ln</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">,</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₂</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₂</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">class</span> <span class=\"n\">geometry</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">pre_geometry</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_ln_bw_two_pts</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">},</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p₁</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_parallel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L&#39;</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">pre_geometry</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">Pt</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₁</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">∘</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp1</span><span class=\"o\">,</span> <span class=\"n\">hp2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp2</span><span class=\"o\">,</span> <span class=\"n\">hp1</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 185188035,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578553189
    },
    {
        "content": "<p>Nice (-;</p>",
        "id": 185188262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578553553
    },
    {
        "content": "<p>Kenny, I'm not sure if one can prove transitivity now</p>",
        "id": 185188603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578554061
    },
    {
        "content": "<p>It seems one needs the crazy version of unique parallel for that</p>",
        "id": 185188608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578554074
    },
    {
        "content": "<p>I haven't been following this discussion</p>",
        "id": 185188686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578554192
    },
    {
        "content": "<p>what are the axioms now?</p>",
        "id": 185188687,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578554197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">unique_parallel</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">parallel</span> <span class=\"n\">l</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">parallel</span> <span class=\"n\">l</span> <span class=\"n\">l₂</span> <span class=\"bp\">∧</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">belongs</span> <span class=\"n\">p</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span>\n</pre></div>",
        "id": 185188827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578554414
    },
    {
        "content": "<p>I thought you could kick out the line <code>l</code>. But only once you know transivity...</p>",
        "id": 185188830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578554438
    },
    {
        "content": "<p>isn't that covered by my <code>exists_unique_parallel</code>?</p>",
        "id": 185188886,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578554530
    },
    {
        "content": "<p>I didn't try too hard, but I couldn't write down a proof immediately</p>",
        "id": 185188894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578554562
    },
    {
        "content": "<p>isn't that what it says?</p>",
        "id": 185188997,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578554685
    },
    {
        "content": "<p>I don't see how</p>",
        "id": 185189069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578554797
    },
    {
        "content": "<p>Sorry, I'm confused. I think I understand now</p>",
        "id": 185189079,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578554829
    },
    {
        "content": "<p>/me should learn what <code>exists_unique</code> means</p>",
        "id": 185189379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578555303
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">geometry</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">Pt</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂₃</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h₁₃</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₃</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h₁₂</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h₁₂</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h₂₃</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h₂₃</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h₁₃</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">unique_of_exists_unique</span> <span class=\"o\">(</span><span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_parallel</span> <span class=\"n\">p</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">H₂</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 185189391,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578555310
    },
    {
        "content": "<p>yay</p>",
        "id": 185189694,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578555815
    },
    {
        "content": "<p>Alternatively:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">geometry</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">Pt</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₁</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">∘</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp1</span><span class=\"o\">,</span> <span class=\"n\">hp2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp2</span><span class=\"o\">,</span> <span class=\"n\">hp1</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂₃</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₃</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_parallel</span> <span class=\"n\">p</span> <span class=\"n\">L₂</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hL</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"err\">ᵤ</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hL₁₂</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"err\">ᵤ</span> <span class=\"n\">L₁</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span> <span class=\"n\">h₁₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hL₁₃</span> <span class=\"o\">:</span> <span class=\"n\">L₃</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"err\">ᵤ</span> <span class=\"n\">L₃</span> <span class=\"bp\">⟨</span><span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">h₂₃</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hL₁₂</span><span class=\"o\">,</span> <span class=\"n\">hL₁₃</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 185189741,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578555846
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂₃</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">or_iff_not_imp_right</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">not_not</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">unique_of_exists_unique</span> <span class=\"o\">(</span><span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_parallel</span> <span class=\"n\">p</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">H₂</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 185190025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578556282
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂₃</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₃</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">or_iff_not_imp_right</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">unique_of_exists_unique</span> <span class=\"o\">(</span><span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_parallel</span> <span class=\"n\">p</span> <span class=\"n\">L₂</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I wish there was a hammer that would kill the second line.</p>",
        "id": 185191352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578557840
    },
    {
        "content": "<p>The following script really captures the essentials of the proof, I think:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">jmc_wishes</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂₃</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₃</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_parallel</span> <span class=\"n\">p</span> <span class=\"n\">L₂</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The <code>sorry</code>s should be filled in with a 1-word hammer tactic.</p>",
        "id": 185191530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578558077
    },
    {
        "content": "<p>In honor of Kenny's term proofs of <code>refl</code> and <code>symm</code>, I present this monstrosity:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">trans_t</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂₃</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₃</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span>\n      <span class=\"n\">unique_of_exists_unique</span> <span class=\"o\">(</span><span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_parallel</span> <span class=\"n\">p</span> <span class=\"n\">L₂</span><span class=\"o\">)</span>\n        <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span> <span class=\"n\">h₁₂</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">h₂₃</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span>\n</pre></div>",
        "id": 185191898,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578558495
    },
    {
        "content": "<p>I changed the definition of parallel:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_parallel</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">parallel</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∥</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">has_parallel</span><span class=\"bp\">.</span><span class=\"n\">parallel</span>\n\n<span class=\"n\">class</span> <span class=\"n\">pre_geometry</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mem</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">pre_geometry</span><span class=\"bp\">.</span><span class=\"n\">has_parallel</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">pre_geometry</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_parallel</span> <span class=\"n\">Ln</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₂</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">class</span> <span class=\"n\">geometry</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">pre_geometry</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_ln_bw_two_pts</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">},</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p₁</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_parallel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L&#39;</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">pre_geometry</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">Pt</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₁</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">geometry</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">Pt</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂₃</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">unique_of_exists_unique</span> <span class=\"o\">(</span><span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_parallel</span> <span class=\"n\">p</span> <span class=\"n\">L₂</span><span class=\"o\">),</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">symmetry</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 185192158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578558748
    },
    {
        "content": "<p>That lets you remove the <code>noncomputable theory</code> and <code>open_locale classical</code>.</p>",
        "id": 185192311,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578558899
    },
    {
        "content": "<p>Ooh, maybe I should revert my change...</p>",
        "id": 185192344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578558926
    },
    {
        "content": "<p>Using namespaces:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_parallel</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">parallel</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∥</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">has_parallel</span><span class=\"bp\">.</span><span class=\"n\">parallel</span>\n\n<span class=\"n\">class</span> <span class=\"n\">pre_geometry</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mem</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">pre_geometry</span><span class=\"bp\">.</span><span class=\"n\">has_parallel</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">pre_geometry</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_parallel</span> <span class=\"n\">Ln</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₂</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">class</span> <span class=\"n\">geometry</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">pre_geometry</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_ln_bw_two_pts</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">},</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p₁</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_parallel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L&#39;</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">has_parallel</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">pre_geometry</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">Pt</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₁</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">has_parallel</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">has_parallel</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">geometry</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">Pt</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂₃</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"n\">unique_of_exists_unique</span> <span class=\"o\">(</span><span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_parallel</span> <span class=\"n\">p</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">h₁₂</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">H₂</span><span class=\"o\">,</span> <span class=\"n\">h₂₃</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">has_parallel</span>\n</pre></div>",
        "id": 185192881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578559410
    },
    {
        "content": "<p>mario the linter says <code>pre_geometry.has_parallel</code> is bad</p>",
        "id": 185193026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578559505
    },
    {
        "content": "<p>Did I goof up?</p>",
        "id": 185193062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578559555
    },
    {
        "content": "<p>it's a bit tricky; you can't infer that instance because <code>Pt</code> is dangling</p>",
        "id": 185193159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578559605
    },
    {
        "content": "<p>I think you should bundle a geometry and extract <code>Pt</code> and <code>Ln</code> components</p>",
        "id": 185193197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578559641
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 185193209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578559654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Something like?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">pre_geometry</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 185194139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578560434
    },
    {
        "content": "<blockquote>\n<p>it's a bit tricky; you can't infer that instance because <code>Pt</code> is dangling</p>\n</blockquote>\n<p>I was thinking of using <code>out_param</code></p>",
        "id": 185194260,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578560552
    },
    {
        "content": "<p>I guess that for potential \"applications\" that might be better.</p>",
        "id": 185194741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578561117
    },
    {
        "content": "<p>I currently have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_parallel</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">parallel</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∥</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">has_parallel</span><span class=\"bp\">.</span><span class=\"n\">parallel</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">pre_geometry</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">pre_geometry</span><span class=\"bp\">.</span><span class=\"n\">has_mem</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">pre_geometry</span><span class=\"bp\">.</span><span class=\"n\">has_parallel</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">pre_geometry</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_parallel</span> <span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">Ln</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">Pt</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₂</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">class</span> <span class=\"n\">geometry</span> <span class=\"kn\">extends</span> <span class=\"n\">pre_geometry</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_ln_bw_two_pts</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">},</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p₁</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_parallel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L&#39;</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">has_parallel</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">pre_geometry</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₁</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">has_parallel</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">has_parallel</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">geometry</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂₃</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"n\">unique_of_exists_unique</span> <span class=\"o\">(</span><span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_parallel</span> <span class=\"n\">p</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">h₁₂</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">H₂</span><span class=\"o\">,</span> <span class=\"n\">h₂₃</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">has_parallel</span>\n</pre></div>\n\n\n<p>I don't really like the <code>Ω.Ln</code> etc...</p>",
        "id": 185194796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578561148
    },
    {
        "content": "<p>would <code>Ln Ω</code> make you feel better?</p>",
        "id": 185195161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578561518
    },
    {
        "content": "<p>Not that much ...</p>",
        "id": 185195214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578561597
    },
    {
        "content": "<p>Maybe <code>Ω</code> should be a parameter?</p>",
        "id": 185195297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578561635
    },
    {
        "content": "<p>maybe we should build an example</p>",
        "id": 185195632,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578561944
    },
    {
        "content": "<p>it's helpful to see experienced folk grappling with this. need to learn typeclasses and structures properly to totally get it but this is neat. -- <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> in your most recent version above is it possible to write down equivalence as a term of  type <code>equivalence ...</code>? (I tried like <code>equivalence parallel</code> in the has_parallel namespace but it seems not quite right)</p>",
        "id": 185215812,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1578579882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247064\">@Matt Earnshaw</span> Voila:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">has_parallel</span>\n<span class=\"kn\">open</span> <span class=\"n\">parallel</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">geometry</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">equivalence</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_parallel</span> <span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">Ln</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">parallel</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">has_parallel</span>\n</pre></div>",
        "id": 185218688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578581686
    },
    {
        "content": "<p>Because I <code>open parallel</code>, I can just write <code>refl</code> instead of <code>parallel.refl</code> in the proof.</p>",
        "id": 185218793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578581737
    },
    {
        "content": "<p>thanks. that starts to look a bit inelegant but i won't worry about it at this stage. trying to push on with Theorem 2.2 concerning pencils of parallel lines. as a test I tried the following:</p>\n<div class=\"codehilite\"><pre><span></span>def pencil (l : Ω.Ln) := {m : Ω.Ln | l ∥ m}\n\nlemma pencil_of_line_contains_line (l : Ω.Ln) : l ∈ pencil l := parallel.refl\n</pre></div>\n\n\n<p>which works, but I don't really understand how lean figures out that <code>parallel.refl</code> is a term of <code>l ∈ pencil l</code> ?</p>",
        "id": 185226097,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1578585953
    },
    {
        "content": "<p><code>set Ln</code> is the type of predicates on <code>Ln</code>, i.e. functions from <code>Ln</code> to <code>Prop</code>. In particular <code>x ∈ { y | P }</code> means the same thing as <code>P x</code>. Thus <code>l ∈ pencil l</code> translates to <code>l ∥ l</code>.</p>\n<p>(edit: I thought there was some discussion of this in TPiL or Logic &amp; Proof but I didn't see any. However, the start of <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/data/set.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/data/set.lean\">init.logic</a> is fairly readable.)</p>",
        "id": 185226841,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578586368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247064\">@Matt Earnshaw</span> I should note that <code>equivalence</code> isn't used that much in mathlib. On the other hand, the three lemmas tagged with <code>@[refl]</code>, <code>@[symm]</code> and <code>@[trans]</code> are very useful.</p>",
        "id": 185227288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578586601
    },
    {
        "content": "<p>For quotients by equivalence relations, we use <code>setoid</code>, but you don't want that here</p>",
        "id": 185227363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578586637
    },
    {
        "content": "<p>didn't complete Thm 2.2 yet but for the next part it looks like it would be useful to have notation for the unique line between points. so far:</p>\n<div class=\"codehilite\"><pre><span></span>def plus (p q : Ω.Pt) {neq : p ≠ q} : Ω.Ln := begin\n  have h₁ := Ω.exists_unique_ln_bw_two_pts,\n  have h₂ := h₁ neq,\n  sorry\nend\n</pre></div>\n\n\n<p>this gives me unique existence as an hypothesis but stuck on how to eliminate</p>",
        "id": 185242904,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1578595921
    },
    {
        "content": "<p>Use <code>exists_of_exists_unique</code></p>",
        "id": 185244659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578596982
    },
    {
        "content": "<p>After that use <code>choose</code></p>",
        "id": 185244669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578596991
    },
    {
        "content": "<p>For several reasons, it is usually better to use term-mode for definitions, and use tactic mode only for proofs</p>",
        "id": 185244777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578597047
    },
    {
        "content": "<p>So once you have finished this definition, you can try to use <code>classical.some _</code> for the definition.</p>",
        "id": 185244859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578597114
    },
    {
        "content": "<p>(Btw, do you already know that a point exists? Do you know that more than 1 point exists?)</p>",
        "id": 185244917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578597139
    },
    {
        "content": "<p>Usually such axioms are added, right?</p>",
        "id": 185244927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578597154
    },
    {
        "content": "<p>\"Axiom 3: There exist three distinct points A, B, C such that C does not lie on the line A + B. We also say that there exist three non-collinear points.\"</p>\n<p>(Not sure how legal this link is, but see <a href=\"https://archive.org/details/geometricalgebra033556mbp/page/n63\" target=\"_blank\" title=\"https://archive.org/details/geometricalgebra033556mbp/page/n63\">https://archive.org/details/geometricalgebra033556mbp/page/n63</a>)</p>",
        "id": 185245639,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578597653
    },
    {
        "content": "<p>right, I wrote this as <code>(exists_three_noncollinear : ∀ (L : Ln), ∃ (a b c : Pt), ¬(a ∈ L ∧ b ∈ L ∧ c ∈ L)</code>, but having the plus notation might give a form that is easier to reason with.</p>",
        "id": 185245924,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1578597835
    },
    {
        "content": "<p>in fact what is wrote is wrong because need to specify distinctness</p>",
        "id": 185246001,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1578597867
    },
    {
        "content": "<p>I think the plus notation can work, if you have a statement of the form</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">exists_ln_of_pt_of_pt</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">exists</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">\\</span><span class=\"k\">in</span> <span class=\"n\">L</span> <span class=\"err\">\\</span><span class=\"n\">and</span> <span class=\"n\">y</span> <span class=\"err\">\\</span><span class=\"k\">in</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 185246476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578598163
    },
    {
        "content": "<p>Then you can define</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">exists_ln_of_pt_of_pt</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"err\">\\</span><span class=\"n\">Omega</span><span class=\"bp\">.</span><span class=\"n\">Pt</span> <span class=\"o\">:=</span> <span class=\"err\">\\</span><span class=\"bp\">&lt;</span><span class=\"n\">add</span><span class=\"err\">\\</span><span class=\"bp\">&gt;</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">left_mem_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">\\</span><span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">exists_ln_of_pt_of_pt</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">right_mem_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">\\</span><span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">exists_ln_of_pt_of_pt</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</pre></div>",
        "id": 185246752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578598319
    },
    {
        "content": "<p>Here's how <span class=\"user-mention\" data-user-id=\"120256\">@Ali Sever</span> did it last year: <a href=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Geometry/axioms.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Geometry/axioms.lean\">https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Geometry/axioms.lean</a></p>",
        "id": 185246755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578598321
    },
    {
        "content": "<p>Sadly you'll have to use another symbol since <code>has_add.add</code> has expected type <code>a -&gt; a -&gt; a</code> (and this is built into core), but you want <code>Pt -&gt; Pt -&gt; Ln</code>.</p>",
        "id": 185264245,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578609549
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_parallel</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">parallel</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∥</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">has_parallel</span><span class=\"bp\">.</span><span class=\"n\">parallel</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">pre_geometry</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">pre_geometry</span><span class=\"bp\">.</span><span class=\"n\">has_mem</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">pre_geometry</span><span class=\"bp\">.</span><span class=\"n\">has_parallel</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">pre_geometry</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_parallel</span> <span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">Ln</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">Pt</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₂</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">class</span> <span class=\"n\">geometry</span> <span class=\"kn\">extends</span> <span class=\"n\">pre_geometry</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_ln_bw_two_pts</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">},</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p₁</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_parallel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L&#39;</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">has_parallel</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">pre_geometry</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₁</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">has_parallel</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">has_parallel</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">geometry</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">parallel</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">Ln</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂₃</span> <span class=\"o\">:</span> <span class=\"n\">L₂</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₃</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"n\">unique_of_exists_unique</span> <span class=\"o\">(</span><span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_parallel</span> <span class=\"n\">p</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">h₁₂</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">H₂</span><span class=\"o\">,</span> <span class=\"n\">h₂₃</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">has_parallel</span>\n\n<span class=\"n\">def</span> <span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">pre_geometry</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Pt</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"bp\">×</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">Ln</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">×</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"err\">⊕</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"c1\">-- it is kP^2 - [0:0:1]</span>\n  <span class=\"c1\">-- x+by=c or y=c</span>\n  <span class=\"n\">has_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">p</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">bc</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">bc</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">bc</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_ln_bw_two_pts</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Pt</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p₁</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hL</span> <span class=\"k\">with</span> <span class=\"n\">hpL1</span> <span class=\"n\">hpL2</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">L</span> <span class=\"k\">with</span> <span class=\"n\">bc</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">hpL1</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">hpL2</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hpL1</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">hpL1</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hpL2</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">))</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"n\">hpL1</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">eq_of_sub_eq_zero</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">((</span><span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_mul_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">add_div_eq_mul_add_div</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_mul_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">add_div_eq_mul_add_div</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hL</span> <span class=\"k\">with</span> <span class=\"n\">hpL1</span> <span class=\"n\">hpL2</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">L</span> <span class=\"k\">with</span> <span class=\"n\">bc</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">bc</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"n\">at</span> <span class=\"n\">hpL1</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"n\">at</span> <span class=\"n\">hpL2</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">hpL1</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hpL2</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">eq_sub_iff_add_eq&#39;</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_sub_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">sub_eq_iff_eq_add&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">eq_div_iff_mul_eq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">div_mul_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">add_div_eq_mul_add_div</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hpL1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">hpL1</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">hpL1</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hpL2</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"> p₁.1 + b p₁.2 = c</span>\n<span class=\"cm\">   p₂.1 + b p₂.2 = c</span>\n<span class=\"cm\">   c = p₁.1 + b p₁.2</span>\n<span class=\"cm\">   p₁.1 + b p₁.2 = p₂.1 + b p₂.2</span>\n<span class=\"cm\">   b = (p₂.1 - p₁.1) / (p₁.2 - p₂.2)</span>\n<span class=\"cm\">   c = (p₁.1 * (p₁.2 - p₂.2) + (p₂.1 - p₁.1) * p₁.2) / (p₁.2 - p₂.2)</span>\n<span class=\"cm\">   c = (p₁.1 * p₁.2 - p₁.1 * p₂.2 + p₂.1 * p₁.2 - p₁.1 * p₁.2) / (p₁.2 - p₂.2)</span>\n<span class=\"cm\">   c = (p₂.1 * p₁.2 - p₁.1 * p₂.2) / (p₁.2 - p₂.2)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">pre</span><span class=\"bp\">.</span><span class=\"n\">parallel</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Ln</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">L₁</span> <span class=\"err\">∥</span> <span class=\"n\">L₂</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">c&#39;</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">L₂</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c&#39;</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"n\">c&#39;</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">L₂</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">c&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">hL</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L₂</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">hL</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">L₁</span> <span class=\"k\">with</span> <span class=\"n\">bc</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">bc</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">L₁</span> <span class=\"k\">with</span> <span class=\"n\">bc</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">L₂</span> <span class=\"k\">with</span> <span class=\"n\">bc&#39;</span> <span class=\"n\">c&#39;</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">bc</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">bc&#39;</span> <span class=\"k\">with</span> <span class=\"n\">b&#39;</span> <span class=\"n\">c&#39;</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b&#39;</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">by_contra</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sub_ne_zero_of_ne</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n          <span class=\"n\">apply</span> <span class=\"n\">hL</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">b&#39;</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">c&#39;</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">b&#39;</span><span class=\"o\">)),</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">c&#39;</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">b&#39;</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">add_div</span><span class=\"o\">,</span> <span class=\"n\">div_eq_iff_mul_eq</span> <span class=\"n\">this</span><span class=\"o\">],</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">c&#39;</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">b&#39;</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">c&#39;</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">add_div</span><span class=\"o\">,</span> <span class=\"n\">div_eq_iff_mul_eq</span> <span class=\"n\">this</span><span class=\"o\">],</span> <span class=\"n\">ring</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n        <span class=\"n\">subst</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">bc</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">hL</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c&#39;</span><span class=\"o\">,</span> <span class=\"n\">c&#39;</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c&#39;</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">sub_add_cancel</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">c&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">c&#39;</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">bc&#39;</span> <span class=\"k\">with</span> <span class=\"n\">b&#39;</span> <span class=\"n\">c&#39;</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">hL</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">c&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">c&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c&#39;</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">sub_add_cancel</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c&#39;</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c&#39;</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp1</span><span class=\"o\">,</span> <span class=\"n\">hp2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">hp1</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hp2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">hp1</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hp2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"> x + by = c</span>\n<span class=\"cm\">   x + b&#39;y = c&#39;</span>\n<span class=\"cm\">   y = (c - c&#39;) / (b - b&#39;)</span>\n<span class=\"cm\">   x = c - by = (cb - cb&#39; - bc + bc&#39;) / (b - b&#39;) = (bc&#39; - b&#39;c) / (b - b&#39;)</span>\n\n<span class=\"cm\">   x + by = c</span>\n<span class=\"cm\">   y = c&#39;</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- this is &quot;computable&quot;</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_parallel</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Ln</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">L</span> <span class=\"k\">with</span> <span class=\"n\">bc</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">bc</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">pre</span><span class=\"bp\">.</span><span class=\"n\">parallel</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hL</span> <span class=\"k\">with</span> <span class=\"n\">hpL</span> <span class=\"n\">hL</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">pre</span><span class=\"bp\">.</span><span class=\"n\">parallel</span> <span class=\"n\">at</span> <span class=\"n\">hL</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">hL</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">b&#39;</span><span class=\"o\">,</span> <span class=\"n\">c&#39;</span><span class=\"o\">,</span> <span class=\"n\">c&#39;&#39;</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">c&#39;&#39;</span> <span class=\"n\">at</span> <span class=\"n\">hpL</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hpL</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">pre</span><span class=\"bp\">.</span><span class=\"n\">parallel</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hL</span> <span class=\"k\">with</span> <span class=\"n\">hpL</span> <span class=\"n\">hL</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">pre</span><span class=\"bp\">.</span><span class=\"n\">parallel</span> <span class=\"n\">at</span> <span class=\"n\">hL</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">hL</span> <span class=\"k\">with</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c&#39;</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟩⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">c&#39;</span> <span class=\"n\">at</span> <span class=\"n\">hpL</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hpL</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">affine_plane</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">geometry</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">exists_unique_ln_bw_two_pts</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_ln_bw_two_pts</span> <span class=\"n\">k</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exists_unique_parallel</span> <span class=\"o\">:=</span> <span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">exists_unique_parallel</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"n\">affine_plane</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 185283751,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578634359
    },
    {
        "content": "<p>yay the affine plane is a geometry</p>",
        "id": 185283755,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578634369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254058\">@Marc Masdeu</span> We had a discussion about axiomatic geometry in this thread about a week ago <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 185678159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579077398
    },
    {
        "content": "<p>Might contain some relevant bits. (Now I will start reading your post <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span>.) Oooh, and welcome by the way <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 185678185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579077435
    },
    {
        "content": "<blockquote>\n<p>Might contain some relevant bits. (Now I will start reading your post <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span>.) Oooh, and welcome by the way <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> thank you! I had seen the thread, but couldn't find any <code>\\exists !</code> statement. This will be useful for when I try to make things nice and Lean-ish.</p>",
        "id": 185678365,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1579077611
    },
    {
        "content": "<p>My student <span class=\"user-mention\" data-user-id=\"120256\">@Ali Sever</span> ploughed through loads of this stuff in Lean! A link is somewhere in one of the threads ;-)</p>",
        "id": 185693660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579092291
    },
    {
        "content": "<p>I'll try to make summary of what I did and how my code works.</p>",
        "id": 185702348,
        "sender_full_name": "Ali Sever",
        "timestamp": 1579098693
    },
    {
        "content": "<blockquote>\n<p>I'll try to make summary of what I did and how my code works.</p>\n</blockquote>\n<p>That would be great! Thanks</p>",
        "id": 185704812,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1579100072
    },
    {
        "content": "<p>coming back to this, i need to get back to proofs but for now am playing with the code that was produced above and trying other ways of setting it up, to get a feel for basics. </p>\n<p>Kenny had instead had a <code>structure</code> that was a bit like a \"structure\" in model-theoretic terms and then defined a class extending that it that turned the \"structure\" into a \"theory\". would it be misleading to think along these model-theoretic lines as a rule of thumb for using <code>structure</code> and <code>class</code>?</p>\n<p>My first thought was that defining a <code>class</code> <code>has_parallel</code> seems like overkill because I'm only expecting one type to use it, so I just added <code>parallel</code> to my <code>structure</code>. But then to define it, it seems like I have to introduce a constant, which seems ugly?</p>\n<div class=\"codehilite\"><pre><span></span>structure abstract_affine : Type 1 :=\n(Pt : Type)\n(Ln : Type)\n(parallel : Ln → Ln → Prop) (infix ` ∥ `:50 := parallel)\n[has_mem : has_mem Pt Ln]\n(exists_unique_ln_bw_two_pts : ∀ {p₁ p₂ : Pt}, p₁ ≠ p₂ → ∃! L : Ln, p₁ ∈ L ∧ p₂ ∈ L)\n(exists_unique_parallel : ∀ (p : Pt) (L : Ln), ∃! L&#39; : Ln, p ∈ L&#39; ∧ L ∥ L&#39;)\n(exists_three_noncollinear : ∀ (L : Ln), ∃ (a b c : Pt) (a ≠ b) (b ≠ c), ¬(a ∈ L ∧ b ∈ L ∧ c ∈ L))\n\nconstant Ω : abstract_affine\n\nattribute [instance] abstract_affine.has_mem\n\n-- Artin def 2.1\ndef Ω.parallel (l₁ l₂ : Ω.Ln) := l₁ = l₂ ∨ (¬∃ p : Ω.Pt, p ∈ l₁ ∧ p ∈ l₂)\ninfix ` ∥ `:50 := Ω.parallel\n\n@[refl] theorem parallel.refl {L : Ω.Ln} : L ∥ L := begin\n  left,\n  refl,\nend\n</pre></div>",
        "id": 186188540,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1579617481
    },
    {
        "content": "<p>also, it's a way off but my goal originally was to prove an equivalence of categories of models of abstract affine planes and of skew fields (/ planes-with-pappus and fields). But perhaps it is more apt to prove \"equality of types\"? Is that a done thing?</p>",
        "id": 186188829,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1579617647
    },
    {
        "content": "<p>The only difference between class and structure is to do with how the arguments are inferred. If you define a class, then when you pass an argument of that type to a function, you will expect Lean to infer that argument using Type class inference. So for example, we don't want to have to provide explicitly the ring structure on the reals every time we use it, so <code>ring</code> is a class. The downside of this is that I can't easily talk about multiple elements of the type <code>ring R</code>, which is fine, because there's usually only one ring structure on a given type that I want to consider. </p>\n<p>The model theoretic analogy is a very loose one, you can have Propositions as part of both structures and classes.</p>",
        "id": 186189946,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579618279
    },
    {
        "content": "<p>My suggested setup is the following</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">abstract_affine</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">parallel</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∥</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">parallel</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_ln_bw_two_pts</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">},</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p₁</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_parallel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L&#39;</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">exists_three_noncollinear</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"o\">))</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">Pt</span> <span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">abstract_affine</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 186190088,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579618366
    },
    {
        "content": "<p>You should always use <code>variable</code> instead of constant. With the variable keyword you will be proving things in the generality of all <code>abstract_affine</code> spaces. <code>constant</code> adds an axiom that there is an <code>abstract_affine</code> space, but then all the theorems you prove will only apply to the constant you added, and not to an arbitrary affine space.</p>",
        "id": 186190375,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579618546
    },
    {
        "content": "<blockquote>\n<p>You should always use <code>variable</code> instead of constant. With the variable keyword you will be proving things in the generality of all <code>abstract_affine</code> spaces. <code>constant</code> adds an axiom that there is an <code>abstract_affine</code> space, but then all the theorems you prove will only apply to the constant you added, and not to an arbitrary affine space.</p>\n</blockquote>\n<p>ah yes, should know this by now, good reminder</p>",
        "id": 186190560,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1579618662
    },
    {
        "content": "<blockquote>\n<p>My suggested setup is the following</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">abstract_affine</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">parallel</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"n\">Ln</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∥</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">parallel</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_ln_bw_two_pts</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">},</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p₁</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">exists_unique_parallel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">L&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"n\">L&#39;</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">exists_three_noncollinear</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Ln</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"o\">))</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">Pt</span> <span class=\"n\">Ln</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">abstract_affine</span> <span class=\"n\">Pt</span> <span class=\"n\">Ln</span><span class=\"o\">]</span>\n</pre></div>\n\n\n</blockquote>\n<p>in this setup I cannot figure out how one then defines parallelism</p>",
        "id": 186191993,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1579619521
    },
    {
        "content": "<p>the rest of what you said is also helpful, thanks. I see why it makes more sense to use a class here</p>",
        "id": 186192206,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1579619637
    }
]