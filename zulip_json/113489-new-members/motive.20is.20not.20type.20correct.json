[
    {
        "content": "<p>I have a goal of type <code>l.nth_le (l.length - 2).succ bound = l.nth_le i i_bound</code> and a hypothesis <code>z</code> of type <code>i=0</code>. When I use the tactic <code>rw z</code>, I get the following error <code>rewrite tactic failed, motive is not type correct\n  λ (_a : ℕ),\n    l.nth_le (l.length - 2).succ bound = l.nth_le i i_bound = (l.nth_le (l.length - 2).succ bound = l.nth_le _a i_bound)</code>. </p>\n<p><code>change</code> fails to recognize it too. I also can't get <code>set</code> or <code>congr</code> to work. Any ideas?</p>",
        "id": 215677895,
        "sender_full_name": "Chase Norman",
        "timestamp": 1604561116
    },
    {
        "content": "<p>What about <code>simp_rw [z]</code>?</p>",
        "id": 215678130,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604561457
    },
    {
        "content": "<p>But why do you have a goal that is the equality of equalities? Did you <code>congr</code> too deep? Or as the result of a <code>convert</code>?</p>",
        "id": 215678202,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604561531
    },
    {
        "content": "<p>This worked! Thanks a bunch. I'm not sure what you mean by equality of equalities.</p>",
        "id": 215678224,
        "sender_full_name": "Chase Norman",
        "timestamp": 1604561578
    },
    {
        "content": "<p>I'm trying to show that two elements of a list are equal.</p>",
        "id": 215678232,
        "sender_full_name": "Chase Norman",
        "timestamp": 1604561588
    },
    {
        "content": "<p>Is there something I'm missing as far as how you came up with simp_rw? Is it just a general catch-all for these types of errors?</p>",
        "id": 215678261,
        "sender_full_name": "Chase Norman",
        "timestamp": 1604561633
    },
    {
        "content": "<p>Hmm maybe it's just the error that has the <code>_ = _ = (_ = _)</code> structure</p>",
        "id": 215678369,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604561764
    },
    {
        "content": "<p>I've seen these motive errors a lot when working with lists or vectors with some length constraint. And that experience has taught me  that <code>simp_rw</code> or just <code>simp [...]</code> works. In fact, <code>simp_rw</code> is just a wrapper around <code>simp only [...]</code> iirc.</p>",
        "id": 215678404,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604561811
    },
    {
        "content": "<p><code>simp</code> is able to see through more layers than <code>rw</code>. There is some work going on to have a better, dependent-equality cognization <code>dep_rw</code>, but in the meantime, <code>simp</code> related tools will work.</p>",
        "id": 215678420,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604561849
    },
    {
        "content": "<p>Careful though, you can get some weird loops if you do <code>simp_rw [&lt;- vector.cons_head_tail v]</code> for example.</p>",
        "id": 215678433,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604561877
    },
    {
        "content": "<p>The error _means_ that your goal contains a proof of something involving <code>i</code>, and when you try to change i to 0 with a rewrite it didn't change the proof, so the proof still mentioned i but it was now supposed to be a proof about 0, and Lean gets confused. It \"didn't rewrite enough\", in some sense. <code>simp_rw</code> tries harder to rewrite.</p>",
        "id": 215685443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604567091
    },
    {
        "content": "<p>\"Motive is not type correct\" just means something like \"this thing is supposed to be a pair (i,P) where P is a proof of something involving i, but you just presented me with (0,P) with P a proof of something involving i instead of 0, so (0,P) is not an object with a well-defined type as far as I can see\"</p>",
        "id": 215685644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604567212
    },
    {
        "content": "<p>I'm surprised that the <code>i = 0</code> is not enough for Lean to determine that proofs involving <code>i</code> also work for <code>0</code></p>",
        "id": 215686730,
        "sender_full_name": "Chase Norman",
        "timestamp": 1604567871
    },
    {
        "content": "<p>It is... as you just noticed by using <code>simp_rw</code></p>",
        "id": 215687451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604568355
    },
    {
        "content": "<p>It's just that <code>rw</code> is being \"silly\"</p>",
        "id": 215687503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604568365
    },
    {
        "content": "<p>Every tactic has some (often quite well-understood, and also often quite well-defined) domain where it works effectively, and outside this domain it might fail, and the reason for failure isn't because the tactic is stupid, it's because the tactic was not designed to work here.</p>",
        "id": 215688145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604568745
    },
    {
        "content": "<p>You can see <code>linarith</code> failing on goals where to a mathematician it \"should obviously work\" but it doesn't work because it didn't use the hypothesis \"x &lt; 37\" because it was part of a bigger hypothesis \"x &lt; 37 and y &lt; 42\". So you say \"why didn't linarith just extract the hypothesis x&lt;37 from the \"and\" hypothesis?\" and the answer is \"linarith doesn't do \"and\"\". And you say \"well doesn't that mean \"linarith\" is stupid?\" and they basically reply \"no, it means that splitting up \"and\" clauses is not linarith's job, and if we made it linarith's job then tomorrow you would ask it to start doing some other basic logic too. \"</p>",
        "id": 215688368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604568870
    },
    {
        "content": "<p>I now realize how silly that made me sound.</p>",
        "id": 215688429,
        "sender_full_name": "Chase Norman",
        "timestamp": 1604568907
    },
    {
        "content": "<p>actually I think linarith might do this</p>",
        "id": 215688446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604568917
    },
    {
        "content": "<p>but you can see the point I'm making. The idea is that tactics do one job, and when they fail it's often because they were asked to do a job which they weren't designed to do.</p>",
        "id": 215688498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604568959
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">37</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">38</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215688595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604568997
    },
    {
        "content": "<p>obviously \"the general theory of inequalities\" should solve this goal, but <code>linarith</code> doesn't because it won't do the cases on the \"or\".</p>",
        "id": 215688640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604569032
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">37</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">38</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215688666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604569053
    },
    {
        "content": "<p>There is a more primitive version of rewrite called <code>▸</code> and that fails in even more cases.</p>",
        "id": 215688769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604569099
    },
    {
        "content": "<p>I have another issue that is similar. The case seems simpler, but it's even more resistant to these tactics. My goal is <code>int.of_nat {v : V | P.P v x y}.to_finset.card - int.of_nat {v : V | P.P v y x}.to_finset.card &gt; 0</code> and I have <code>int.of_nat {v : V | P.P v y x}.to_finset.card = 0</code>. I hope to be able to achieve <code>int.of_nat {v : V | P.P v x y}.to_finset.card - 0 &gt; 0</code>. </p>\n<p><code>rw</code>, <code>congr'</code>, <code>simp_rw</code> all failing me.</p>",
        "id": 215760046,
        "sender_full_name": "Chase Norman",
        "timestamp": 1604603491
    },
    {
        "content": "<p>Do you have an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 215775656,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604611170
    },
    {
        "content": "<p>There can be different issues with hidden (implicit and typeclass) arguments.</p>",
        "id": 215775771,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604611213
    },
    {
        "content": "<p>At the last step here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.num.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">rat</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_injective</span>\n        <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span>\n        <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">):</span>\n        <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ha</span> <span class=\"n\">at</span> <span class=\"n\">a_cop</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hb</span> <span class=\"n\">at</span> <span class=\"n\">b_cop</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"c1\">-- error</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the tactic state is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_num</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">a_denom</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a_denom</span><span class=\"o\">,</span>\n<span class=\"n\">a_cop</span> <span class=\"o\">:</span> <span class=\"n\">a_num.nat_abs.coprime</span> <span class=\"n\">a_denom</span><span class=\"o\">,</span>\n<span class=\"n\">b_num</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">b_denom</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">b_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b_denom</span><span class=\"o\">,</span>\n<span class=\"n\">b_cop</span> <span class=\"o\">:</span> <span class=\"n\">b_num.nat_abs.coprime</span> <span class=\"n\">b_denom</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a_denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b_denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">a_cop</span> <span class=\"o\">:</span> <span class=\"n\">a_num.nat_abs.coprime</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"n\">b_cop</span> <span class=\"o\">:</span> <span class=\"n\">b_num.nat_abs.coprime</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">({</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">a_num</span><span class=\"o\">,</span> <span class=\"n\">denom</span> <span class=\"o\">:=</span> <span class=\"n\">a_denom</span><span class=\"o\">,</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">a_pos</span><span class=\"o\">,</span> <span class=\"n\">cop</span> <span class=\"o\">:=</span> <span class=\"n\">a_cop</span><span class=\"o\">}</span> <span class=\"bp\">*</span>\n       <span class=\"o\">{</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">b_num</span><span class=\"o\">,</span> <span class=\"n\">denom</span> <span class=\"o\">:=</span> <span class=\"n\">b_denom</span><span class=\"o\">,</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">b_pos</span><span class=\"o\">,</span> <span class=\"n\">cop</span> <span class=\"o\">:=</span> <span class=\"n\">b_cop</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>\n<p>I want to substitute <code>2^n</code> for <code>a_denom</code> in the goal.  Lean throws error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">({</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">a_num</span><span class=\"o\">,</span> <span class=\"n\">denom</span> <span class=\"o\">:=</span> <span class=\"n\">a_denom</span><span class=\"o\">,</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">a_pos</span><span class=\"o\">,</span> <span class=\"n\">cop</span> <span class=\"o\">:=</span> <span class=\"n\">a_cop</span><span class=\"o\">}</span> <span class=\"bp\">*</span>\n           <span class=\"o\">{</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">b_num</span><span class=\"o\">,</span> <span class=\"n\">denom</span> <span class=\"o\">:=</span> <span class=\"n\">b_denom</span><span class=\"o\">,</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">b_pos</span><span class=\"o\">,</span> <span class=\"n\">cop</span> <span class=\"o\">:=</span> <span class=\"n\">b_cop</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span>\n        <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span>\n      <span class=\"o\">(({</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">a_num</span><span class=\"o\">,</span> <span class=\"n\">denom</span> <span class=\"o\">:=</span> <span class=\"n\">_a</span><span class=\"o\">,</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">a_pos</span><span class=\"o\">,</span> <span class=\"n\">cop</span> <span class=\"o\">:=</span> <span class=\"n\">a_cop</span><span class=\"o\">}</span> <span class=\"bp\">*</span>\n            <span class=\"o\">{</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">b_num</span><span class=\"o\">,</span> <span class=\"n\">denom</span> <span class=\"o\">:=</span> <span class=\"n\">b_denom</span><span class=\"o\">,</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">b_pos</span><span class=\"o\">,</span> <span class=\"n\">cop</span> <span class=\"o\">:=</span> <span class=\"n\">b_cop</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span>\n         <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How do I get this rewrite to work?   </p>\n<p>How do I get the multiplication to be performed/expanded out in the goal so that I get a single <code>{}</code> structure instead of <code>{} * {}</code>?</p>\n<p>Once I have a single <code>{}</code> in the goal, how can I rewrite that into either multiple goals or make an assertion that the resulting structure is a rational?</p>",
        "id": 223067036,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610922398
    },
    {
        "content": "<p>Try <code>simp_rw</code> instead of <code>rw</code>?</p>",
        "id": 223069222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610925838
    },
    {
        "content": "<p>When you want do do a dependent rewrite of a variable (like <code>ha : a_denom = 2 ^ n</code>) something that tends to work is <code>subst a_denom</code></p>",
        "id": 223069813,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610926779
    }
]