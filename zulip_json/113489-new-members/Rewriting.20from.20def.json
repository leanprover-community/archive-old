[
    {
        "content": "<p>Why does the following example not work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">ctxtype</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lookup_list</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">→</span><span class=\"n\">ctxtype</span><span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">head</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lookup_list</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">tail</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aaa</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">lookup_list</span> <span class=\"n\">t</span> <span class=\"bp\">∅</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lookup_list</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"c1\">---here</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks</p>",
        "id": 230668798,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615977333
    },
    {
        "content": "<p>The pattern matching sometimes splits into finer cases than you actually wrote.</p>",
        "id": 230668917,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615977386
    },
    {
        "content": "<p>I suspect that's happened here: it's doing a case split on the <code>nat</code> argument first, so there's no equation lemma for your case yet.</p>",
        "id": 230668973,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615977411
    },
    {
        "content": "<p>Try <code>#print lookup_list</code> to see what it actually produced.</p>",
        "id": 230668997,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615977426
    },
    {
        "content": "<p>It prints out </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lookup_list._main</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ctxtype</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">ctxtype</span><span class=\"o\">),</span>\n  <span class=\"n\">list.brec_on</span> <span class=\"n\">ᾰ_1</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ctxtype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_F</span> <span class=\"o\">:</span> <span class=\"n\">list.below</span> <span class=\"n\">bool</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">ctxtype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_F</span> <span class=\"o\">:</span> <span class=\"n\">list.below</span> <span class=\"n\">bool</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">),</span>\n          <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">list.cases_on</span> <span class=\"n\">ᾰ_1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_F</span> <span class=\"o\">:</span> <span class=\"n\">list.below</span> <span class=\"n\">bool</span> <span class=\"n\">list.nil</span><span class=\"o\">),</span> <span class=\"n\">id_rhs</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_hd</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_tl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_F</span> <span class=\"o\">:</span> <span class=\"n\">list.below</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_hd</span> <span class=\"o\">::</span> <span class=\"n\">ᾰ_tl</span><span class=\"o\">)),</span>\n                  <span class=\"n\">id_rhs</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">ᾰ_hd</span><span class=\"o\">))</span>\n               <span class=\"n\">_F</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">list.cases_on</span> <span class=\"n\">ᾰ_1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_F</span> <span class=\"o\">:</span> <span class=\"n\">list.below</span> <span class=\"n\">bool</span> <span class=\"n\">list.nil</span><span class=\"o\">),</span> <span class=\"n\">id_rhs</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_hd</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_tl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_F</span> <span class=\"o\">:</span> <span class=\"n\">list.below</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_hd</span> <span class=\"o\">::</span> <span class=\"n\">ᾰ_tl</span><span class=\"o\">)),</span>\n                  <span class=\"n\">id_rhs</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_F.fst.fst</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n               <span class=\"n\">_F</span><span class=\"o\">))</span>\n         <span class=\"n\">ᾰ_1</span>\n         <span class=\"n\">ᾰ</span>\n         <span class=\"n\">_F</span><span class=\"o\">)</span>\n    <span class=\"n\">ᾰ</span>\n</code></pre></div>\n<p>I'm not sure how to interpret it.</p>\n<p>How do you suggest I fix it?</p>",
        "id": 230669218,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615977552
    },
    {
        "content": "<p>Write your own <code>simp</code> lemmas first, and don't rely on the behaviour of the pattern matcher? (I know that's pessimistic advice.)</p>",
        "id": 230669286,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615977598
    },
    {
        "content": "<p>Sorry, I guess you need to write <code>#print prefix lookup_list</code></p>",
        "id": 230669400,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615977651
    },
    {
        "content": "<p>to see what equation lemmas it produced automatically. I agree the actual definition is not something a human should try to read. :-)</p>",
        "id": 230669429,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615977670
    },
    {
        "content": "<p>It seems it's handling ∅ as different than list.nil<br>\nhow can I convert between them</p>",
        "id": 230670956,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615978518
    },
    {
        "content": "<p>The empty set is a set, not a list.</p>",
        "id": 230671349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615978729
    },
    {
        "content": "<p>Ah, I see, makes sense.</p>\n<p>Thanks</p>",
        "id": 230671433,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615978799
    }
]