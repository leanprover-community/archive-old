[
    {
        "content": "<p>Hi everyone! I've been wanting to learn Lean for a while and now I finally have the time to do so :) I have a noob question: is there a way to do a <code>rw</code> in only part of something? For instance, in <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=8&amp;level=8\">Advanced Addition world Level 8/13 of the Natural Number Game</a>, I used this proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">zero_add</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">add_left_cancel</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>But I'd like to just write something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw_rhs</span> <span class=\"err\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">add_left_cancel</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>Is there a tactic that I could use for what I'm calling <code>rw_rhs</code> here?</p>",
        "id": 201094294,
        "sender_full_name": "Sam Estep",
        "timestamp": 1592358750
    },
    {
        "content": "<p>There is <code>conv</code>, but I don't know if it works in the NNG: <a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a></p>",
        "id": 201094319,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592358816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Ah thanks! That seems to be exactly what I was looking for; can I use that from my locally-downloaded Lean installation, or do I need to also install something else?</p>",
        "id": 201094389,
        "sender_full_name": "Sam Estep",
        "timestamp": 1592358917
    },
    {
        "content": "<p>It's part of Lean's core library, so it should work out of the box, I think.</p>",
        "id": 201094439,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592358974
    },
    {
        "content": "<p>OK, this works in the level you're looking at:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">{</span> <span class=\"n\">to_rhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"n\">exact</span> <span class=\"n\">add_left_cancel</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 201094562,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592359175
    },
    {
        "content": "<p>Oh awesome, thanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>!</p>",
        "id": 201095090,
        "sender_full_name": "Sam Estep",
        "timestamp": 1592359936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308256\">@Sam Estep</span>  I don't have that level in front of me right now, but something like this may also help: <code>rw [← add_zero a] {occs := occurrences.pos [1]}</code></p>",
        "id": 201095954,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1592361192
    },
    {
        "content": "<p>Wow, I didn't know about <code>occs</code> / <code>occurrences</code>. We should add this info to the docs somewhere...</p>",
        "id": 201096407,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592361772
    },
    {
        "content": "<p>In theory mathlib's <code>nth_rewrite</code> tactic should also help here. But I recently tried it, and got an error. I haven't yet looked into why...</p>",
        "id": 201099406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592366404
    },
    {
        "content": "<p><code>occs</code> has pretty strange behaviour: if a rule can match multiple times, but with different arguments, <code>rw {occs:=...}</code> will not find the alternative matches. <code>nth_rewrite</code> was written to solve this problem.</p>",
        "id": 201106758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592376911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"259857\">Dan Stanescu</span> <a href=\"#narrow/stream/113489-new-members/topic/Sam.20Estep/near/201095954\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"308256\">Sam Estep</span>  I don't have that level in front of me right now, but something like this may also help: <code>rw [← add_zero a] {occs := occurrences.pos [1]}</code></p>\n</blockquote>\n<p>I've tried using your code but it just gives me an error. Could it be that it just doesn't work in NNG? Same goes for the <code>nth_rewrite</code> thing, it doesn't seem to be recognized in NNG (and I wouldn't know how to use it anyways)</p>",
        "id": 201377162,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1592565528
    },
    {
        "content": "<p>rofl I think that code has very little chance of working in NNG; I use a hacked rw. Try using <code>rewrite [← add_zero a] {occs := occurrences.pos [1]}</code> in NNG? I didn't hack that, so NNG rewrite should be the same as Lean rw.</p>",
        "id": 201379306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592567274
    },
    {
        "content": "<p>Lean rw closes goals which can be closed by <code>rfl</code> (i.e. it tries <code>refl</code> after every rewrite, and if it works it just closes the goal). I thought this was confusing for NNG beginners so i turned it off (and probably turned off a bunch of other things too).</p>",
        "id": 201379384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592567340
    },
    {
        "content": "<p>Similarly I doubt I am importing enough in NNG to make <code>nth_rewrite</code> work. If you want to play it \"properly\" you can just download and install the repo -- it would be a much less painful experience!</p>",
        "id": 201379512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592567420
    },
    {
        "content": "<p>Using <code>rewrite</code> worked! Here's then a short solution which works in NNG:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"n\">occurrences</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]},</span>\n<span class=\"n\">exact</span> <span class=\"n\">add_left_cancel</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>I will have to get around to installing the repo, hopefully later this weekend.</p>",
        "id": 201380093,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1592567827
    },
    {
        "content": "<p>One unfortunate consequence of the hacked rw decision in NNG is that we get people here complaining that rw works differently in real Lean than in NNG. I could have hacked <code>rewrite</code> instead, because then users might expect rw to behave differently, but this would have caused so many extra key presses for my users :-/</p>",
        "id": 201380373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592568010
    },
    {
        "content": "<p>My (somewhat clunky) approach if <code>rw</code> isn't cooperating is to use a <code>have</code> statement for the thing I wanted <code>rw</code> to give me, and then prove that. I'm forgetting whether NNG has discussed them at this point. This isn't much more concise, but maybe it feels a little less redundant?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">add_left_cancel</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 201433809,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592596618
    },
    {
        "content": "<p>Can you put the larger <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 201434326,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592596954
    }
]