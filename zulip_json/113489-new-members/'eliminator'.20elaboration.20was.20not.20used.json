[
    {
        "content": "<p>I'm trying to define composition of partial functions as suggested in chapter 7 of <em>Theorem Proving in Lean</em> and I'm curious as to why this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">g</span>\n</pre></div>\n\n\n<p>but this doesn't:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"c1\">-- error: type mismatch at application &#39;option.rec none&#39;</span>\n</pre></div>\n\n\n<p>I'm also getting </p>\n<div class=\"codehilite\"><pre><span></span>term\n  none\nhas type\n  option ?m_1 : Type ?\nbut is expected to have type\n  ?m_1 none : Sort ?\nAdditional information:\ncontext: &#39;eliminator&#39; elaboration was not used for &#39;option.rec&#39; because it is not fully applied, #3 explicit arguments expected\n</pre></div>\n\n\n<p>What is Lean trying to tell me? Why can't I use the partial application here?</p>",
        "id": 177978489,
        "sender_full_name": "mth",
        "timestamp": 1570869889
    },
    {
        "content": "<p>Do you understand what \"fully applied\" means here?</p>",
        "id": 177978554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570869979
    },
    {
        "content": "<p>that I didn't pass all the arguments the function expected?</p>",
        "id": 177978618,
        "sender_full_name": "mth",
        "timestamp": 1570870097
    },
    {
        "content": "<p>Yes, in the first version, <code>option.rec</code> gets as many arguments as it could hope for, but not in the second version.</p>",
        "id": 177978703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570870256
    },
    {
        "content": "<p>Right. From a pure type theory point of view this should be alright, but lean's type inference isn't smart enough for this unless you explicitly give it all the arguments</p>",
        "id": 177978713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570870286
    },
    {
        "content": "<p>Now, the elaboration process (which is the crucial step where Lean tries to fill in everything the user let implicit) is pretty subtle, and the recursor case is special, it needs more hand-holding.</p>",
        "id": 177978718,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570870309
    },
    {
        "content": "<p>But this is clearly not the intended solution to the exercise. Using recursors directly is not something I would recommend doing.</p>",
        "id": 177978759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570870337
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 177978760,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570870342
    },
    {
        "content": "<p>This is the user-friendly solution.</p>",
        "id": 177978762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570870357
    },
    {
        "content": "<p>ah, thank you!</p>",
        "id": 177978816,
        "sender_full_name": "mth",
        "timestamp": 1570870459
    },
    {
        "content": "<p>I hope the exercise comes after introducing <code>match</code></p>",
        "id": 177978835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570870533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>?</p>",
        "id": 177978839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570870538
    },
    {
        "content": "<p>Otherwise I don't know what was the intended solution.</p>",
        "id": 177978893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570870603
    },
    {
        "content": "<p>match is introduced later in 8.8</p>",
        "id": 177978965,
        "sender_full_name": "mth",
        "timestamp": 1570870698
    },
    {
        "content": "<p>maybe the intended solution was to use <code>cases_on</code>? is that any friendlier?</p>",
        "id": 177978970,
        "sender_full_name": "mth",
        "timestamp": 1570870734
    },
    {
        "content": "<p>Yes it is a bit friendlier</p>",
        "id": 177979106,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570870999
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">comp&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">none</span> <span class=\"n\">f</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comp&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">do</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"err\">←</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"n\">c</span>\n</pre></div>\n\n\n<p>I'll let your decide which solution you prefer. I think the <code>match</code> one is by far the easiest to read.</p>",
        "id": 177979156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570871050
    },
    {
        "content": "<p>Quickly reading back that chapter, the <code>cases_on</code> solution is clearly the one Jeremy intended.</p>",
        "id": 177979231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570871181
    },
    {
        "content": "<p>Now I need to go.</p>",
        "id": 177979235,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570871214
    },
    {
        "content": "<p>ok, thanks a lot</p>",
        "id": 177979244,
        "sender_full_name": "mth",
        "timestamp": 1570871234
    },
    {
        "content": "<p>Why does the elaborator complain here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">none</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">none</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<blockquote>\n<p>error: invalid <code>option.cases_on</code> application, elaborator has special support for this kind of application (it is handled as an \"eliminator\"), but expected type must not contain metavariables: <code>option ?m_1</code></p>\n</blockquote>\n<p>(Sorry to annoy you again.)</p>",
        "id": 178276780,
        "sender_full_name": "mth",
        "timestamp": 1571222301
    },
    {
        "content": "<p>The elaborator complains it doesn't know the type expected in the big parenthesis. It is not being smart enough.</p>",
        "id": 178277665,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571223276
    },
    {
        "content": "<p>You can help it using a type ascription</p>",
        "id": 178277674,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571223289
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">none</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">none</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 178277675,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571223294
    },
    {
        "content": "<p>But I'm not sure I understand the point of this statement.</p>",
        "id": 178277703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571223336
    },
    {
        "content": "<p>Yes, its pretty pointless on its own</p>",
        "id": 178277885,
        "sender_full_name": "mth",
        "timestamp": 1571223533
    }
]