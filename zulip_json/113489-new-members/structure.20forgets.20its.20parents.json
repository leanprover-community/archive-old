[
    {
        "content": "<p>Hi, I am writing a structure that indirectly extends from <code>linear_map</code>, and I don't know how to recover this map to impose more conditions on it. Thanks!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">quadratic_form</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Quadratic_form</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">quadratic_form</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">properly_equivalent</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">Q&#39;</span><span class=\"o\">:</span> <span class=\"n\">Quadratic_form</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">quadratic_form</span><span class=\"bp\">.</span><span class=\"n\">isometry</span> <span class=\"n\">Q</span> <span class=\"n\">Q&#39;</span><span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">determinant_is_one</span> <span class=\"o\">:</span>  <span class=\"n\">to_fun</span><span class=\"bp\">.</span><span class=\"n\">to_matrix</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">to_matrix</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">det</span>\n</code></pre></div>",
        "id": 204412193,
        "sender_full_name": "Eloi",
        "timestamp": 1595245428
    },
    {
        "content": "<p>Do you mean that this gives an error?</p>",
        "id": 204412287,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595245487
    },
    {
        "content": "<p>Aah, the <code>to_fun.to_matrix</code> looks a bit suspicious</p>",
        "id": 204412308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595245505
    },
    {
        "content": "<p>Yes I know, because <code>to_fun</code> is only a function and not a <code>linear_map</code>... but at some point this strucure had a <code>linear_map</code> with <code>to_fun</code> as \"its\" <code>to_fun</code>... I don't know how to recover this <code>linear_map</code>.</p>",
        "id": 204412583,
        "sender_full_name": "Eloi",
        "timestamp": 1595245727
    },
    {
        "content": "<p>I see</p>",
        "id": 204412597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595245743
    },
    {
        "content": "<p>Aside, note that we also have: <a href=\"https://github.com/leanprover-community/mathlib/blob/4ec7cc58e126b736de864b91649c0f7f3d6a7d48/src/linear_algebra/quadratic_form.lean#L490\">https://github.com/leanprover-community/mathlib/blob/4ec7cc58e126b736de864b91649c0f7f3d6a7d48/src/linear_algebra/quadratic_form.lean#L490</a></p>",
        "id": 204412611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595245764
    },
    {
        "content": "<p>So you might want to have <code>proper_isometry</code> and <code>properly_equivalent</code> along the same lines</p>",
        "id": 204412636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595245789
    },
    {
        "content": "<p>I think you can talk about <code>linear_map.to_matrix \\&lt; to_fun, map_add', map_smul' \\&gt;</code>. It's a bit ugly, but it works for the definition.<br>\nThen you can restate it afterwards, which you should probably do anyways.</p>",
        "id": 204412745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595245882
    },
    {
        "content": "<p>What is the correct sintax? I can't get it working... This is what I tried</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">quadratic_form</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Quadratic_form</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">quadratic_form</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">proper_isometry</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">Q&#39;</span><span class=\"o\">:</span> <span class=\"n\">Quadratic_form</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">quadratic_form</span><span class=\"bp\">.</span><span class=\"n\">isometry</span> <span class=\"n\">Q</span> <span class=\"n\">Q&#39;</span><span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">determinant_is_one</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">to_matrix</span> <span class=\"bp\">⟨</span><span class=\"n\">to_fun</span><span class=\"o\">,</span> <span class=\"n\">map_add&#39;</span><span class=\"o\">,</span> <span class=\"n\">map_smul&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204413564,
        "sender_full_name": "Eloi",
        "timestamp": 1595246539
    },
    {
        "content": "<p>Hmm, maybe remove the <code>\\&lt;to_fun, .. \\&gt;</code> part, and put a <code>_</code> there.</p>",
        "id": 204413642,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595246602
    },
    {
        "content": "<p>Then click onthe light bulb, and choose the \"skeleton\" option</p>",
        "id": 204413656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595246617
    },
    {
        "content": "<p>Doesn't work either... I get the following error message: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">as</span> <span class=\"kn\">structure</span> <span class=\"kn\">instance</span>\n  <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">to_fun</span><span class=\"o\">,</span> <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">map_add&#39;</span><span class=\"o\">,</span> <span class=\"n\">map_smul&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">map_smul&#39;</span><span class=\"o\">}</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"bp\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">]</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">?</span> <span class=\"err\">?</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>my attempt was:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">proper_isometry</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">Q&#39;</span><span class=\"o\">:</span> <span class=\"n\">Quadratic_form</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">quadratic_form</span><span class=\"bp\">.</span><span class=\"n\">isometry</span> <span class=\"n\">Q</span> <span class=\"n\">Q&#39;</span><span class=\"o\">):=</span>\n  <span class=\"o\">(</span><span class=\"n\">determinant_is_one</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">to_matrix</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">to_fun</span><span class=\"o\">,</span>\n                                                <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">map_add&#39;</span><span class=\"o\">,</span>\n                                                <span class=\"n\">map_smul&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">map_smul&#39;</span>\n                                                <span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204414065,
        "sender_full_name": "Eloi",
        "timestamp": 1595246990
    },
    {
        "content": "<p>Aha, we probably need to tell it a bit more types...</p>",
        "id": 204414274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595247134
    },
    {
        "content": "<p>If you copy <code> : (fin d → ℤ) →ₗ[ℤ] fin d → ℤ</code> and put it after the <code>}</code>, but before <code>).det</code>... does that help?</p>",
        "id": 204414306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595247174
    },
    {
        "content": "<p>(Note the <code>:</code> at the begin of the text-to-be-copied</p>",
        "id": 204414329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595247197
    },
    {
        "content": "<p>It didn't work... I tried two alternatives:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">quadratic_form</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Quadratic_form</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">quadratic_form</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">proper_isometry&#39;</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">Q&#39;</span><span class=\"o\">:</span> <span class=\"n\">Quadratic_form</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">quadratic_form</span><span class=\"bp\">.</span><span class=\"n\">isometry</span> <span class=\"n\">Q</span> <span class=\"n\">Q&#39;</span><span class=\"o\">):=</span>\n  <span class=\"o\">(</span><span class=\"n\">determinant_is_one</span> <span class=\"o\">:</span>\n    <span class=\"o\">({</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">to_fun</span><span class=\"o\">,</span> <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">map_add&#39;</span><span class=\"o\">,</span> <span class=\"n\">map_smul&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">map_smul&#39;</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"bp\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_matrix</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n\n\n<span class=\"kn\">structure</span> <span class=\"n\">proper_isometry</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">Q&#39;</span><span class=\"o\">:</span> <span class=\"n\">Quadratic_form</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">quadratic_form</span><span class=\"bp\">.</span><span class=\"n\">isometry</span> <span class=\"n\">Q</span> <span class=\"n\">Q&#39;</span><span class=\"o\">):=</span>\n  <span class=\"o\">(</span><span class=\"n\">determinant_is_one</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">to_matrix</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">to_fun</span><span class=\"o\">,</span>\n                                                <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">map_add&#39;</span><span class=\"o\">,</span>\n                                                <span class=\"n\">map_smul&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">map_smul&#39;</span>\n                                                <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"bp\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>both give the error message:  </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">to_fun</span><span class=\"o\">,</span> <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">map_add&#39;</span><span class=\"o\">,</span> <span class=\"n\">map_smul&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">map_smul&#39;</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">to_matrix</span>\n<span class=\"n\">term</span>\n  <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">to_fun</span><span class=\"o\">,</span> <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">map_add&#39;</span><span class=\"o\">,</span> <span class=\"n\">map_smul&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">map_smul&#39;</span><span class=\"o\">}</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"bp\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">]</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">?</span> <span class=\"err\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204418775,
        "sender_full_name": "Eloi",
        "timestamp": 1595250099
    },
    {
        "content": "<p>My next step would be to write <code>@linear_map.to_matrix</code> and start filling in the implicit fields to see if something funny happens.</p>",
        "id": 204444680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595262738
    },
    {
        "content": "<p>aaand: bingo!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">quadratic_form</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Quadratic_form</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">quadratic_form</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">proper_isometry</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">Q&#39;</span><span class=\"o\">:</span> <span class=\"n\">Quadratic_form</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">quadratic_form</span><span class=\"bp\">.</span><span class=\"n\">isometry</span> <span class=\"n\">Q</span> <span class=\"n\">Q&#39;</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">determinant_is_one</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">to_matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">to_fun</span><span class=\"o\">,</span> <span class=\"n\">map_add&#39;</span><span class=\"o\">,</span> <span class=\"n\">map_smul&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>gives error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"k\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span>\n</code></pre></div>",
        "id": 204444882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595262871
    },
    {
        "content": "<p>There is some kind of typeclass diamond which is stopping unification from working.</p>",
        "id": 204444930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595262911
    },
    {
        "content": "<p>I'm afraid this is beyond my pay grade but at least we now know the problem.</p>",
        "id": 204445088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595263009
    }
]