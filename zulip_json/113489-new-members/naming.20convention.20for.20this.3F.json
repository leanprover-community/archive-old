[
    {
        "content": "<p>Here is a lemma that I've been asked to add mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">mono</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">exp_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">exp</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">exp_strict_mono</span><span class=\"bp\">.</span><span class=\"n\">monotone</span>\n</code></pre></div>\n\n\n<p>What would be the right name for <code>@[mono] lemma exp_mono : ∀ {x y : ℝ}, exp x ≤ exp y \\to x ≤ y</code>?</p>",
        "id": 203477928,
        "sender_full_name": "Chris M",
        "timestamp": 1594366891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> I think I would go for <code>exp_le_exp</code>.</p>",
        "id": 203478194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367132
    },
    {
        "content": "<p>And its buddy will be <code>exp_lt_exp</code>.</p>",
        "id": 203478246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367164
    },
    {
        "content": "<p>Or are those names already taken by the <code>iff</code> versions?</p>",
        "id": 203478259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367180
    },
    {
        "content": "<p>while keeping <code>exp_mono</code> for <code>x\\leq y \\to exp x \\leq exp y</code>?</p>",
        "id": 203478274,
        "sender_full_name": "Chris M",
        "timestamp": 1594367201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/naming.20convention.20for.20this.3F/near/203478259\">said</a>:</p>\n<blockquote>\n<p>Or are those names already taken by the <code>iff</code> versions?</p>\n</blockquote>\n<p>yes they are</p>",
        "id": 203478286,
        "sender_full_name": "Chris M",
        "timestamp": 1594367216
    },
    {
        "content": "<p>I don't like <code>exp_strict_mono</code> for the <code>lt</code> version.</p>",
        "id": 203478313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367243
    },
    {
        "content": "<p>You mean the existing one? that one does exist: <code>lemma exp_strict_mono : strict_mono exp :=</code></p>",
        "id": 203478392,
        "sender_full_name": "Chris M",
        "timestamp": 1594367294
    },
    {
        "content": "<p>So I suggest that you do a global search-replace:</p>\n<ul>\n<li><code>exp_le_exp</code> → <code>exp_le_exp_iff</code></li>\n<li><code>exp_lt_exp</code> → <code>exp_lt_exp_iff</code></li>\n</ul>\n<p>And then use <code>exp_le_exp</code> and <code>exp_lt_exp</code> for the lemmas you want to add.</p>",
        "id": 203478398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284606\">Chris M</span> <a href=\"#narrow/stream/113489-new-members/topic/naming.20convention.20for.20this.3F/near/203478392\">said</a>:</p>\n<blockquote>\n<p>You mean the existing one? that one does exist: <code>lemma exp_strict_mono : strict_mono exp :=</code></p>\n</blockquote>\n<p>Yes, but the statement is not in a form that the <code>mono</code> tactic understands.</p>",
        "id": 203478417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367326
    },
    {
        "content": "<p>wow ok. So the tutorials will also have to be changed.</p>",
        "id": 203478421,
        "sender_full_name": "Chris M",
        "timestamp": 1594367331
    },
    {
        "content": "<p>ooh</p>",
        "id": 203478428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367339
    },
    {
        "content": "<p>I didn't realise that.</p>",
        "id": 203478433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> Another idea:</p>",
        "id": 203478440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367360
    },
    {
        "content": "<p>State the lemma as <code>@[mono] lemma exp_monotone : monotone exp :=</code></p>",
        "id": 203478467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367383
    },
    {
        "content": "<p>And then someone (<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>) can teach the monotone tactic about <code>strict_monotone</code>, and we can tag the <code>exp_strict_mono</code> lemma afterwards</p>",
        "id": 203478537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367426
    },
    {
        "content": "<p>I don't get it. Why doesn't <code>mono</code> understand <code>lemma exp_strict_mono : strict_mono exp</code>? because <code>strict_mono exp</code> is used instead of its expanded definition <code>∀ ⦃a b⦄, a &lt; b → f a &lt; f b</code>?</p>",
        "id": 203478668,
        "sender_full_name": "Chris M",
        "timestamp": 1594367597
    },
    {
        "content": "<p>Exactly</p>",
        "id": 203478679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367610
    },
    {
        "content": "<p>Then why do you want me to add <code>@[mono] lemma exp_monotone : monotone exp :=</code>?</p>",
        "id": 203478715,
        "sender_full_name": "Chris M",
        "timestamp": 1594367631
    },
    {
        "content": "<p>It recently was taught to unfold <code>monotone</code>. But I don't think it was taught to do the same for <code>strict_mono</code>s</p>",
        "id": 203478720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367633
    },
    {
        "content": "<p>I see.</p>",
        "id": 203478727,
        "sender_full_name": "Chris M",
        "timestamp": 1594367641
    },
    {
        "content": "<p>If you are feeling courageous, you can mimic Patrick's PR, and teach it about <code>strict_mono</code> as well.</p>",
        "id": 203478783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367664
    },
    {
        "content": "<p>Oh by \"teach\" you mean teaching the tactic itself, I thought you meant \"make a tutorial about\" :P</p>",
        "id": 203478786,
        "sender_full_name": "Chris M",
        "timestamp": 1594367667
    },
    {
        "content": "<p>to be clear, \"teach\" doesn't imply anything using machine learning? we're just talking about normal coding  ... ? :P</p>",
        "id": 203478815,
        "sender_full_name": "Chris M",
        "timestamp": 1594367704
    },
    {
        "content": "<p>In particular, once the <code>mono</code> tactic understands <code>strict_mono</code>, it might be enough to tag <code>exp_strict_mono</code></p>",
        "id": 203478821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367711
    },
    {
        "content": "<p>Let me find the commit for you. It was this week, I think.</p>",
        "id": 203478833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367731
    },
    {
        "content": "<p>Ok I'll try this.</p>",
        "id": 203478847,
        "sender_full_name": "Chris M",
        "timestamp": 1594367741
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3310\">https://github.com/leanprover-community/mathlib/pull/3310</a></p>",
        "id": 203478922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367773
    },
    {
        "content": "<p>btw is there a reason you want to change from <code>exp_mono</code> to <code>exp_monotone</code>? Also, what to name the other direction?</p>",
        "id": 203478951,
        "sender_full_name": "Chris M",
        "timestamp": 1594367806
    },
    {
        "content": "<p>I think that this is the relevant line: <a href=\"https://github.com/leanprover-community/mathlib/pull/3310/files#diff-54c5eab6d816f396b485233519d628acR356\">https://github.com/leanprover-community/mathlib/pull/3310/files#diff-54c5eab6d816f396b485233519d628acR356</a></p>",
        "id": 203478959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367811
    },
    {
        "content": "<p>The naming convention is to use <code>f_monotone</code> when you prove <code>monotone f</code></p>",
        "id": 203479004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367848
    },
    {
        "content": "<p>The other direction doesn't deserve a lemma, I think. Because we already have the <code>iff</code> version with <code>exp_le_exp</code>.</p>",
        "id": 203479023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367872
    },
    {
        "content": "<p>And the mono tactic will never use the other direction</p>",
        "id": 203479078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367889
    },
    {
        "content": "<p>I see</p>",
        "id": 203479083,
        "sender_full_name": "Chris M",
        "timestamp": 1594367897
    },
    {
        "content": "<p>Oh, also this line: <a href=\"https://github.com/leanprover-community/mathlib/pull/3310/files#diff-46d8fb7fe470316c30396976c88b30a9R99\">https://github.com/leanprover-community/mathlib/pull/3310/files#diff-46d8fb7fe470316c30396976c88b30a9R99</a></p>",
        "id": 203479336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594368057
    },
    {
        "content": "<p>However, if we want <code>mono</code> to automatically deduce the <code>foo_le_foo</code> version from <code>strict_mono foo</code>, then we need a bit more work.</p>",
        "id": 203479502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594368138
    },
    {
        "content": "<p>I don't have enough tactic writing skills to do that.</p>",
        "id": 203479517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594368148
    },
    {
        "content": "<p>It seems it was only merged with master yesterday, so I have to update first. Is <code>leanproject upgrade-mathlib</code> essentially a wrapper for merging the master with my current (github) branch?</p>",
        "id": 203480973,
        "sender_full_name": "Chris M",
        "timestamp": 1594369146
    },
    {
        "content": "<p>I'm not actually sure. I just use <code>git merge origin/master</code> for this.</p>",
        "id": 203495038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594380005
    },
    {
        "content": "<p><code>leanproject up</code> will get updated oleans automatically. Scott's version won't</p>",
        "id": 203496032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594380868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">commit</span> <span class=\"bp\">-</span><span class=\"n\">am</span> <span class=\"n\">WIP</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">master</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">up</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"bp\">-</span>\n<span class=\"n\">git</span> <span class=\"n\">merge</span> <span class=\"n\">master</span>\n</code></pre></div>",
        "id": 203496199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594381033
    },
    {
        "content": "<p>but what oleans will it get if you're merging with a local branch?</p>",
        "id": 203496359,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594381197
    },
    {
        "content": "<p>what does <code>git checkout -</code> do?</p>",
        "id": 203496415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594381223
    },
    {
        "content": "<p>Switch to previous branch</p>",
        "id": 203496434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594381250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/naming.20convention.20for.20this.3F/near/203496359\">said</a>:</p>\n<blockquote>\n<p>but what oleans will it get if you're merging with a local branch?</p>\n</blockquote>\n<p>You'll get the oleans from master. Which is usually what you want, if your edits aren't too big.</p>",
        "id": 203496450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594381270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> I suggest using <code>exp_le_exp</code> for <code>exp x ≤ exp y &lt;-&gt; x ≤ y</code> and nothing at all for <code>exp x ≤ exp y \\to x ≤ y</code> (use the biconditional instead)</p>",
        "id": 203550069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594410109
    }
]