[
    {
        "content": "<p>I want to extract an arbitrary element of a set that is unequal to a given element.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">def</span> <span class=\"n\">elt_of_set_ne_given</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">points</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">p1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<ol>\n<li>Where can I find the documentation for <code>//</code>? I'm having trouble finding it</li>\n<li>Is there an easy way to tell Lean that my set has at least two elements? I know <code>finset</code> can do this, but my set might be infinite. I know I could just state that there are two unequal elements in the set, but I'd like to be able to generalize this to larger cases, and that approach gets inconvenient. I know <code>set.card</code> is a thing but looking through the documentation I'm not seeing an easy way to do this.</li>\n</ol>",
        "id": 201175985,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592415848
    },
    {
        "content": "<p><code>//</code> is notation for <a href=\"https://leanprover-community.github.io/theories/sets.html#sets-and-subtypes\">subtypes</a>. There's also <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html?highlight=subtype#inductively-defined-propositions\">a very brief discussion in TPiL</a>.</p>\n<p>In general, if you suspect some symbols may be notation, you can tell the pretty-printer to turn off printing notation by using <code>set_option pp.notation false</code>. Then you can <code>#print</code> the declaration and see what the full name is.</p>",
        "id": 201176935,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592416269
    }
]