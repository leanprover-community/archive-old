[
    {
        "content": "<p>Sorry for this stupid question. My goal is to show A -&gt; B. I would like to rewrite this goal to \\neg B -&gt; \\neg A. How do I do that? I know I could prove (A -&gt; B) -&gt; (\\neg B -&gt; \\neg A) and use rewrite, but I was hoping for something built in</p>",
        "id": 216650795,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1605291461
    },
    {
        "content": "<p>This result will be in the library -- is it called something like <code>neg_imp_neg</code> or something?</p>",
        "id": 216650887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605291496
    },
    {
        "content": "<p>What is the best way to search the library?</p>",
        "id": 216650935,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1605291529
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 216650963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605291546
    },
    {
        "content": "<p><code>not_imp_not</code></p>",
        "id": 216650982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605291554
    },
    {
        "content": "<p>That's one way. Another way is to guess what the result is called using <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> and start to type your guess and see what VS Code predicts. <code>import tactic</code> imports a bunch of stuff, making <code>library_search</code> more likely to succeed.</p>",
        "id": 216651148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605291621
    },
    {
        "content": "<p>As you can see, you tripped me up by calling it <code>neg</code>, but <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> tells us it's called <code>not</code></p>",
        "id": 216651241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605291669
    },
    {
        "content": "<p>Thanks, I didn't know about these naming guidelines or library_search ;) not_imp_not works as expected</p>",
        "id": 216651507,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1605291783
    },
    {
        "content": "<p>Yeah, there are a lot of secrets :-) Useful tactics get written much faster than useful documentation of the tactics. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a></p>",
        "id": 216651630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605291837
    },
    {
        "content": "<p>Can I somehow list all tactics that are applicable at the current position?</p>",
        "id": 216651759,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1605291889
    },
    {
        "content": "<p>Or all lemmas l so that <code>rw l</code> succeeds?</p>",
        "id": 216651802,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1605291911
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#hint\">tactic#hint</a> for the former, <code>rw_hint</code> is supposed to do the latter, but the PR <a href=\"https://github.com/leanprover-community/mathlib/issues/2030\">#2030</a> was closed without being merged.</p>",
        "id": 216651843,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605291937
    },
    {
        "content": "<p><code>hint</code> won't give anything like a complete list</p>",
        "id": 216651957,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605291976
    },
    {
        "content": "<p>but maybe it's still useful</p>",
        "id": 216651987,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605291991
    },
    {
        "content": "<p>wow, hint is useful, thanks</p>",
        "id": 216652050,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1605292025
    },
    {
        "content": "<p>PS \"stupid\" questions are welcome in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> , you're doing exactly the right thing</p>",
        "id": 216652151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605292077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"234196\">@Henning Dieterichs</span> see also the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#contrapose\">contrapose</a> tactic.</p>",
        "id": 216661684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1605296073
    },
    {
        "content": "<p>thanks! I tried contrapose/contraposition before, but I couldn't find it in the standard documentation. I didn't import tactic though, but now, after I did, it works</p>",
        "id": 216662002,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1605296198
    }
]