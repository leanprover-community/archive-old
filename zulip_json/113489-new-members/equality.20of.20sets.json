[
    {
        "content": "<p>I feel like it should be trivial to prove (something like) the following equality, but I can't seem to do it with basic tactics and I can't seem to find anything in the library that helps. Any suggestions?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">S₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">S₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin_S</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">S₁</span><span class=\"o\">,</span> <span class=\"n\">S₂</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">S₁</span> <span class=\"err\">∪</span> <span class=\"n\">S₂</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sets_complete</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">fin_S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 210181945,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1600199898
    },
    {
        "content": "<p>Can you post an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> please? Your code doesn't work for me.</p>",
        "id": 210182109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600199987
    },
    {
        "content": "<p>edit: was not expecting that to be matrix.vec_cons</p>\n<p><span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span>  sets are defined as their membership predicate, so basic equality of sets stuff comes from functional and propositional extensionality (see <code>set.ext</code>). You can find some of the definitions and lemmas in the documentation for <code>data.set</code> :<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/basic.html\">https://leanprover-community.github.io/mathlib_docs/data/set/basic.html</a></p>",
        "id": 210184225,
        "sender_full_name": "Chris B",
        "timestamp": 1600200874
    },
    {
        "content": "<p>Thank you Chris, </p>\n<p>Sorry Kevin, forgot my transitive imports,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n<span class=\"n\">def</span> <span class=\"n\">S₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">S₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin_S</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">S₁</span><span class=\"o\">,</span> <span class=\"n\">S₂</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">S₁</span> <span class=\"err\">∪</span> <span class=\"n\">S₂</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sets_complete</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">fin_S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 210184749,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1600201120
    },
    {
        "content": "<p>This boils down to proving that every term of <code>fin 2</code> is either <code>0</code> or <code>1</code> (also for arbitrary S_1, S_2). Is there a one-line proof of this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n<span class=\"n\">def</span> <span class=\"n\">S₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">S₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin_S</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">S₁</span><span class=\"o\">,</span> <span class=\"n\">S₂</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">S₁</span> <span class=\"err\">∪</span> <span class=\"n\">S₂</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fin_2_eq</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sets_complete</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">fin_S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span><span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">fin_2_eq</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"n\">use</span> <span class=\"n\">S₁</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">S₂</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210189135,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600203269
    },
    {
        "content": "<p>Maybe there is a much shorter proof for <code>sets_complete</code> in your specific case where S_1 and S_2 are explicit singletons. I dont know.</p>",
        "id": 210189527,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600203465
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">fin_2_eq</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 210191046,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600204152
    },
    {
        "content": "<p>Ah, <code>fin_cases</code> was the tactic I was missing :)</p>",
        "id": 210191106,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600204185
    },
    {
        "content": "<p>We were all missing it until Scott wrote it a few months ago</p>",
        "id": 210192088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600204781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/equality.20of.20sets/near/210191046\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">fin_2_eq</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I thought this was something the equation compiler could solve, but I guess not.  There needed to be a third case with a proof of impossibility:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">fin_2_eq</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h_a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h_a_a</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 210195897,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600206762
    },
    {
        "content": "<p>if you want good inductions, use <code>fin2</code></p>",
        "id": 210196236,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600206955
    },
    {
        "content": "<p>Does <code>omega</code> do the n+2 case?</p>",
        "id": 210196777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600207272
    },
    {
        "content": "<p>Looks like <code>omega</code> can't do it</p>",
        "id": 210200902,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600209883
    },
    {
        "content": "<p><code>by simp [fin.ext_iff]; omega</code> works, omega just needs a little help from simp.</p>",
        "id": 210204083,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600212046
    },
    {
        "content": "<p>Actually thats a bit of a red herring I guess.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">by</span> <span class=\"n\">exfalso</span><span class=\"bp\">;</span> <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n</code></pre></div>\n\n\n<p>also works.</p>",
        "id": 210204229,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600212170
    }
]