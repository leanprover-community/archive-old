[
    {
        "content": "<p>Do we already have (something like) this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finsupp_summation_apply</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">S.sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.induction_on'</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">T</span> <span class=\"n\">hi</span> <span class=\"n\">hST</span> <span class=\"n\">hiT</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_insert</span> <span class=\"n\">hiT</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I couldn't find it with <code>library_search</code> or from looking through <code>data/finsupp/basic</code>.</p>",
        "id": 267696702,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641977843
    },
    {
        "content": "<p>This has nothing to do with <code>finsupp</code>, right?</p>",
        "id": 267696846,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641977905
    },
    {
        "content": "<p>I mean that it should be an instance of the general fact that some operation is an <code>add_monoid_hom</code>.</p>",
        "id": 267696992,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641978000
    },
    {
        "content": "<p>Ah, I guess so.  When I change <code>f : ι → α →₀ ℕ</code> to <code>f : ι → α → ℕ</code> the proof still works, because it's not using the fact that the <code>f i</code> are finsupps.</p>",
        "id": 267697712,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641978383
    },
    {
        "content": "<p>Oh, but then the place where I'm using this lemma no longer works.  Here the <code>f i</code> really are finsupps — they're <code>n.factorization</code> (for some <code>n</code> depending on <code>i</code>).</p>",
        "id": 267698429,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641978800
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.coe_fn_add_monoid_hom\">docs#finsupp.coe_fn_add_monoid_hom</a> .map_sum?</p>",
        "id": 267700607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641980066
    },
    {
        "content": "<p>Looks like that's missing, we seem to only have it for dfinsupp</p>",
        "id": 267700729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641980155
    },
    {
        "content": "<p>Coming back to this, I've tried to fill in the <code>sorry</code>s here but can't make any progress</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">coe_fn_add_monoid_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>It seems like it should be obvious: <code>map_zero'</code> should be <code>finsupp.coe_zero</code> and <code>map_add'</code> should be <code>finsupp.coe_add</code>, but I can't find anything I can put in for <code>to_fun</code> that makes these work.  Am I just on completely the wrong track?</p>",
        "id": 267709224,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641985425
    },
    {
        "content": "<p><code>coe_fn</code>!</p>",
        "id": 267709339,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641985481
    },
    {
        "content": "<p>I tried that, but then <code>map_zero' := finsupp.coe_zero</code> gives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">map_zero''</span>\n  <span class=\"n\">coe_zero</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_fn</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">finsupp</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp.has_coe_to_fun</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span>\n       <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_fn</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp.has_coe_to_fun</span> <span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n       <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 267709928,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641985825
    },
    {
        "content": "<p>Am I going wrong by saying <code>[add_zero_class (α → M)] [add_zero_class (α →₀ M)]</code>?  Is there some single thing from which both of these can be inferred?</p>",
        "id": 267710261,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641985996
    },
    {
        "content": "<p>I would think <code>add_zero_class M</code> would suffice (mathematically speaking) whether Lean knows this or not I'm not sure</p>",
        "id": 267710601,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641986184
    },
    {
        "content": "<p>From that Lean can infer <code>[add_zero_class (α → M)]</code> but not <code>[add_zero_class (α →₀ M)]</code>.</p>",
        "id": 267710728,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641986281
    },
    {
        "content": "<p>This works for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">coe_fn_add_monoid_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 267710997,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641986443
    },
    {
        "content": "<p>Brilliant, thanks!  So it turns out that my problem was the <code>[has_zero M]</code>.</p>",
        "id": 267712133,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641987279
    },
    {
        "content": "<p>Judging by your error message \"X is supposed to be X\" I suspect that you had more than one zero kicking around (this is just a guess, you could debug if you were interested but now it's working so maybe just move on)</p>",
        "id": 267712352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641987459
    },
    {
        "content": "<p>Yes, I guess the <code>has_zero M</code> and one of the <code>add_zero_class …</code> were conflicting.</p>",
        "id": 267713350,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641988226
    },
    {
        "content": "<p>its at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.finset_sum_apply\">docs#add_monoid_hom.finset_sum_apply</a></p>",
        "id": 267788152,
        "sender_full_name": "Sigma",
        "timestamp": 1642022626
    },
    {
        "content": "<p>at least, a very close approximation of it</p>",
        "id": 267788235,
        "sender_full_name": "Sigma",
        "timestamp": 1642022655
    },
    {
        "content": "<p><code>(finsupp.apply_add_hom p).map_sum S f</code>?</p>",
        "id": 267799499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642028570
    },
    {
        "content": "<p>Indeed, the statement of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.sum_apply\">docs#finsupp.sum_apply</a> is defeq to a special case of the lemma you ask for, and the proof can be used without modification</p>",
        "id": 267799646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642028660
    },
    {
        "content": "<p>I recommend adding your lemma as <code>finsupp.finset_sum_apply</code> before that lemma, and then proving <code>finsupp.sum_apply</code> with <code>finsupp.finset_sum_apply</code></p>",
        "id": 267799752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642028736
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11423\">#11423</a></p>",
        "id": 267858264,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642074844
    },
    {
        "content": "<p>I've PRed <code>finsupp.finset_sum_apply</code> (and also <code>coe_fn_add_monoid_hom</code> with credit to <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>) but I couldn't see how to get a nicer proof of <code>finsupp.sum_apply</code> than the one-liner already present.</p>",
        "id": 267858373,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642074938
    }
]