[
    {
        "content": "<p>From TPIL exercise 7.10.3:</p>\n<blockquote>\n<p>Define an inductive data type consisting of terms built up from the following constructors:</p>\n<ul>\n<li><code>const n</code>, a constant denoting the natural number <code>n</code></li>\n<li><code>var n</code>, a variable, numbered <code>n</code></li>\n<li><code>plus s t</code>, denoting the sum of <code>s</code> and <code>t</code></li>\n<li><code>times s t</code>, denoting the product of <code>s</code> and <code>t</code></li>\n</ul>\n<p>Recursively define a function that evaluates any such term with respect to an assignment of values to the variables.</p>\n</blockquote>\n<p>Handling everything except for the <code>var</code>, here's what I have so far for the inductive data type:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span>  <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n</pre></div>\n\n\n<p>And the function that evaluates these terms:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n\n    <span class=\"n\">Expr</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">e</span>\n\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>This seems to work OK:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"c1\">-- 5</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">3</span><span class=\"o\">))</span>   <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">4</span><span class=\"o\">))</span>  <span class=\"c1\">-- 9</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">3</span><span class=\"o\">))</span>    <span class=\"c1\">-- 6</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">times</span>   <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">3</span><span class=\"o\">))</span>   <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">5</span><span class=\"o\">)))</span>  <span class=\"c1\">-- 45</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">plus</span>   <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">3</span><span class=\"o\">))</span>   <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">5</span><span class=\"o\">)))</span> <span class=\"c1\">-- 26</span>\n</pre></div>\n\n\n<p>It isn't clear what the exercise intends as far is support for <code>var</code> goes, however.</p>\n<p>Can someone give an example of how <code>var</code> would be used as they're intending?</p>\n<p>Thanks!</p>",
        "id": 184841084,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1578215937
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span>  <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n\n<span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">assignment</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">Expr</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- 3</span>\n</pre></div>",
        "id": 184841318,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578216369
    },
    {
        "content": "<p>I think</p>",
        "id": 184841320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578216373
    }
]