[
    {
        "content": "<p>Greetings, I'm Carl -- an <a href=\"https://github.com/CarlKCarlK\">open source developer</a> in the Seattle area. I'd love to learn how to use Lean for simple proofs of algorithm correctness. I see that Northeastern University did just this in <a href=\"https://course.ccs.neu.edu/cs2800f21/\">their CS 2800 class</a>, but only their syllabus is online. If anyone can suggest links to videos, papers, books, etc., about algorithms and Lean, I'd much appreciate it.</p>",
        "id": 290309767,
        "sender_full_name": "Carl Kadie",
        "timestamp": 1658357172
    },
    {
        "content": "<p>\"Logical verification\" is not strictly focused on algorithms and uses Lean 3, but I think it's really good. There's a PDF/book, a repo with the accompanying code, and videos for the lectures: <a href=\"https://lean-forward.github.io/logical-verification/2021/\">https://lean-forward.github.io/logical-verification/2021/</a></p>\n<p>The software foundations series has a book (volume 3) on algorithms. It's in Coq, but the systems have similar foundations. <a href=\"https://softwarefoundations.cis.upenn.edu/\">https://softwarefoundations.cis.upenn.edu/</a></p>\n<p>Mathlib4 is still sort of a fledgling, but there's some early CS stuff in there (heapsort, union find). The implementation of RBMap in the prelude is also pretty interesting. Lean has pretty good editor support, so reading source code and using type hints/go to def stuff is actually pretty productive.</p>",
        "id": 290311710,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1658358479
    },
    {
        "content": "<p>Actually the \"Other Courses\" section of the lecture notes you linked has a lot of good sources. Both of the things I mentioned are in there.</p>",
        "id": 290311963,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1658358624
    },
    {
        "content": "<p>Thanks for the verification links. I especially liked this <a href=\"https://softwarefoundations.cis.upenn.edu/vfa-current/toc.html\">Insertion Sort correctness</a> proof (via Coq). I also found a <a href=\"http://www.aei.tuke.sk/papers/2018/2/06_Silvasi.pdf\">Lean-verified proof for Insertion Sort's stability</a>.</p>\n<p>I'm personally most interested in probability-related algorithms. For example, I love the algorithm below for returning a uniform-random line from a text file in one pass. I'd love to eventually create a verified proof that the returned line is chosen uniformly.</p>\n<p>Until then, I'll keep by eyes open for more progress in verified program correctness.</p>\n<p>-- Carl</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># Return a random line from a text file.</span>\n<span class=\"c1\"># Select the line uniformly.</span>\n<span class=\"c1\"># If the file is empty, return None.</span>\n<span class=\"c1\"># Make only one pass through the file.</span>\n<span class=\"c1\"># Use memory proportional to the longest line.</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">random_line</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"n\">rng</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">RandomState</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">random_line</span> <span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">rng</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.0</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"n\">random_line</span> <span class=\"o\">=</span> <span class=\"n\">line</span>\n        <span class=\"k\">return</span> <span class=\"n\">random_line</span>\n</code></pre></div>",
        "id": 290976291,
        "sender_full_name": "Carl Kadie",
        "timestamp": 1658884887
    }
]