[
    {
        "content": "<p>I notice that the following code works but the following simple replacement breaks it.</p>\n<p>Change this code at the end</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"k\">let</span> <span class=\"n\">mop</span> <span class=\"o\">:=</span> <span class=\"n\">m.op</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">mop</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to this seemingly equivalent code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">m.op</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What am I missing here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"c1\">-- test import</span>\n<span class=\"k\">#check</span> <span class=\"n\">has_mul</span>\n<span class=\"k\">#check</span> <span class=\"n\">semigroup</span>\n<span class=\"k\">#check</span> <span class=\"n\">has_one</span>\n<span class=\"k\">#check</span> <span class=\"n\">monoid</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">alg</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Stack of three typeclasses, each extending from the previous</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">@[class]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">my_has_one</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">has_op</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">@[class]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">has_op</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">ext_has_op extends from has_op</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">@[class]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ext_has_op</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_op</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">ext_ext_has_op: optiplicative semigroup plus optiplicative one</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">@[class]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ext_ext_has_op</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">ext_has_op</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Instances for nat</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">@[instance]</span>\n<span class=\"kd\">def</span> <span class=\"n\">has_one_nat</span> <span class=\"o\">:</span> <span class=\"n\">my_has_one</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"mi\">1</span> <span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">haz_op nat instance</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">@[instance]</span>\n<span class=\"kd\">def</span> <span class=\"n\">has_op_nat</span> <span class=\"o\">:</span> <span class=\"n\">has_op</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">nat.mul</span> <span class=\"o\">⟩</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">ext_has_op nat instance</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">ext_has_op_nat</span> <span class=\"o\">:</span> <span class=\"n\">ext_has_op</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">tt</span> <span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">ext_ext_has_op nat instance</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">ext_ext_has_op_nat</span> <span class=\"o\">:</span> <span class=\"n\">ext_ext_has_op</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"s2\">\"Hello\"</span> <span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">set_option trace.class_instances true</span>\n<span class=\"cm\">set_option class.instance_max_depth 20</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_foldr</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ext_ext_has_op</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">my_has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span>\n  <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">o.one</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">mop</span> <span class=\"o\">:=</span> <span class=\"n\">m.op</span> <span class=\"k\">in</span>\n    <span class=\"n\">mop</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">mul_foldr</span> <span class=\"n\">t</span><span class=\"o\">)</span>                     <span class=\"c1\">-- Change code here</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">mul_foldr</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">alg</span>\n</code></pre></div>",
        "id": 229204467,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1615138960
    }
]