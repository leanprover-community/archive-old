[
    {
        "content": "<p>I have a question about induction over <code>list.perm</code> that extends a <a href=\"#narrow/stream/113489-new-members/topic/Commutativity.20of.20Recursive.20Application\">previous one</a>.</p>\n<p>How can I prove that a specific list-fold is commutative if that only holds for certain lists?<br>\nAs a MWE, consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.perm</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.is_green</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">consume</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">consume_list</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:=</span> <span class=\"n\">list.foldl</span> <span class=\"n\">consume</span> <span class=\"n\">b</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>The <code>consume_list</code> function folds over <code>consume</code> and <code>list.is_green</code> property is <em>some</em> property over lists.<br>\nThe <code>consume</code> function is proven to be commutative given some other condition called <code>its_raining</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">its_raining</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">consume_comm</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">its_raining</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">consume</span> <span class=\"o\">(</span><span class=\"n\">consume</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">consume</span> <span class=\"o\">(</span><span class=\"n\">consume</span> <span class=\"n\">b</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I would like to show the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">consume_list_comm</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_p</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">l.is_green</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">l'.is_green</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">consume_list</span> <span class=\"n\">l</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">consume_list</span> <span class=\"n\">l'</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">h_p</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">list.perm.nil</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span> <span class=\"c1\">-- ok</span>\n  <span class=\"n\">case</span> <span class=\"n\">list.perm.cons</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span> <span class=\"c1\">-- ok</span>\n  <span class=\"n\">case</span> <span class=\"n\">list.perm.swap</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span> <span class=\"c1\">-- ok &amp; uses `consume_comm`</span>\n  <span class=\"n\">case</span> <span class=\"n\">list.perm.trans</span> <span class=\"o\">{</span>\n    <span class=\"c1\">-- missing `h_p_l‚ÇÇ.is_green`</span>\n\n  <span class=\"o\">},</span>\n</code></pre></div>\n<p>That is, given two lists that are green (and permutations of each other), the <code>consume_list</code> function is commutative.<br>\nI started by induction on the permutation, which splits into the four cases shown above. I was able to solve the first three, but I have a problem in <code>list.perm.trans</code>.</p>\n<p>In order to use induction hypotheses in that case, the intermediate list has to be green. But since the intermediate list is \"generated\" by the induction tactic, it isn't green.</p>\n<p>Is the approach I'm trying (by induction over the permutation) not suitable in this case, or is there some way to have the intermediate list also be green?</p>\n<p>Thanks <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>üèª</p>",
        "id": 223820955,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611504519
    },
    {
        "content": "<p>Can you prove the following? Does it make sense for your definitions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">green_trans</span> <span class=\"o\">{</span><span class=\"n\">la</span> <span class=\"n\">lb</span> <span class=\"n\">lc</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">la.is_green</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">lb.is_green</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">la</span> <span class=\"bp\">~</span> <span class=\"n\">lb</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp'</span><span class=\"o\">:</span> <span class=\"n\">lb</span> <span class=\"bp\">~</span> <span class=\"n\">lc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lc.is_green</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 223821427,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611505149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/list.2Eperm.2Etrans/near/223821427\">said</a>:</p>\n<blockquote>\n<p>Can you prove the following? Does it make sense for your definitions?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">green_trans</span> <span class=\"o\">{</span><span class=\"n\">la</span> <span class=\"n\">lb</span> <span class=\"n\">lc</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">la.is_green</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">lb.is_green</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">la</span> <span class=\"bp\">~</span> <span class=\"n\">lb</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp'</span><span class=\"o\">:</span> <span class=\"n\">lb</span> <span class=\"bp\">~</span> <span class=\"n\">lc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lc.is_green</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don't think I can. The <code>is_green</code> property is actually the proposition that a list is topologically sorted.</p>",
        "id": 223821860,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611505692
    },
    {
        "content": "<p>And <code>consume_list_comm</code> should therefore <em>actually</em> be a proof that <code>consume_list</code> behaves the same for all topologically sorted lists.<br>\nSo the <code>its_raining</code> property <em>actually</em> means that for the two elements <code>a</code> and <code>a'</code> neither <code>a ‚â§ a'</code> nor <code>a' ‚â§ a</code>.</p>",
        "id": 223900879,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611583519
    },
    {
        "content": "<p>Have you tried induction on one of the 'l' generalizing the other?</p>",
        "id": 223901871,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611584003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/list.2Eperm.2Etrans/near/223901871\">said</a>:</p>\n<blockquote>\n<p>Have you tried induction on one of the 'l' generalizing the other?</p>\n</blockquote>\n<p>I have now, and it seems to be the better path.<br>\nThanks :)</p>",
        "id": 223935311,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611597334
    },
    {
        "content": "<p>I'll explain how I came to that thought -- you need to somehow show that <code>is_green</code> is the limiting factor in making the commuting work, and that it is some property that is transferred across some permutations. So in your case, you need to abstract out the _other_ <code>l'</code> there, which is a bit more obvious if you had a statement like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">consume_list_comm</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">is_green</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">is_green</span> <span class=\"n\">l'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">consume_list</span> <span class=\"n\">l</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">consume_list</span> <span class=\"n\">l'</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223946003,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611602253
    },
    {
        "content": "<p>Because you don't care about _which_ other <code>l'</code> you're considering. But when you're inducting on the <code>perm</code>, you're making a claim that the way they are related by a permutation is how the theorem is true. Which isn't really the case. The crucial thing to prove here is that <code>is_green (hd :: tl) -&gt; is_green tl</code></p>",
        "id": 223946296,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611602396
    }
]