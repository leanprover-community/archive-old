[
    {
        "content": "<p>Hey! I asked a similar question some time ago, but I don't think I got it right yet. I'm looking for a way to do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constants</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kd\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">constant</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">optional_least</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"k\">then</span>\n  <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">argmin_on</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">optional_least_isleast</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">optional_least</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unwrap</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>That is, I have a function <code>g : Y \\to set X</code> mapping some type <code>Y</code> to subsets in some other type <code>X</code>, and a \"ranking\" function <code>f: X \\to \\N</code> on that latter type. Essentially, I want to extract a minimal witness of non-emptiness, if it exists.<br>\nI understand this is probably non computable, but I cannot find a way to make it typecheck…</p>",
        "id": 271092067,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644307170
    }
]