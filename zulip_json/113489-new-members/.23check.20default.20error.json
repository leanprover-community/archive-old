[
    {
        "content": "<p>If I click on the <code>try it</code> link in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes-and-instances\">TPIL Section 10.1</a> for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">default</span> <span class=\"kt\">Prop</span>  <span class=\"c1\">-- Prop</span>\n<span class=\"k\">#check</span> <span class=\"n\">default</span> <span class=\"n\">nat</span>   <span class=\"c1\">-- â„•</span>\n<span class=\"k\">#check</span> <span class=\"n\">default</span> <span class=\"n\">bool</span>  <span class=\"c1\">-- bool</span>\n<span class=\"k\">#check</span> <span class=\"n\">default</span> <span class=\"n\">unit</span>  <span class=\"c1\">-- unit</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">default</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 288295407,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656804628
    },
    {
        "content": "<p>I also get the same error for <code>#reduce</code>.</p>",
        "id": 288295546,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656804865
    },
    {
        "content": "<p>I guess the type of <code>default</code> has changed in the meantime. Now the argument is implicit, and a way to use it is to let Lean know what the expected type is, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 288296582,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656806642
    },
    {
        "content": "<p>Found it, it was changed 6 months ago in <a href=\"https://github.com/leanprover-community/lean/pull/660\">lean#660</a></p>",
        "id": 288296701,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656806766
    },
    {
        "content": "<p>You can also use the <code>@</code> notation to make everything explicit and do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">default</span> <span class=\"kt\">Prop</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 288296720,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656806831
    },
    {
        "content": "<p>I see. Thank you!</p>",
        "id": 288297053,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656807369
    },
    {
        "content": "<p>Is <code>default</code> a function or just the field of the <code>inhabited</code> structure? I guess I'm not sure I understand what the implicit argument is.</p>",
        "id": 288297796,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656808557
    },
    {
        "content": "<p>It's a field of the structure. The argument in question is the parameter to the <code>inhabited</code> type former. Usually the structure would be an explicit argument for the projection, but since this is a class Lean sets it up as an instance argument.</p>",
        "id": 288297919,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656808742
    },
    {
        "content": "<p>Hmm, I'm referring to the <code>_</code> in your example, is that also what you are referring to?</p>",
        "id": 288297998,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656808829
    },
    {
        "content": "<p>That's where the instance argument actually goes. When you use it in place of an instance argument, Lean will infer it through the usual typeclass search</p>",
        "id": 288298025,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656808905
    },
    {
        "content": "<p>So that would be <code>prop.inhabited</code> in this case?</p>",
        "id": 288298089,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656808979
    },
    {
        "content": "<p>You could try replacing the underscore with that to check, but I believe so</p>",
        "id": 288298107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656809014
    },
    {
        "content": "<p>You might also be able to do <code>prop.inhabited.default</code> to manually use the projection</p>",
        "id": 288298162,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656809075
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 288298189,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656809151
    }
]