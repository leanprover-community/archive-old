[
    {
        "content": "<p>However, even with my <em>ancient</em> Lean I can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">Binary_Relation</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℙ</span>\n</code></pre></div>\n<p>— And it tells the elaborator to unfold the definition, as desired.</p>",
        "id": 256015402,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633331516
    },
    {
        "content": "<p>There is little point using 3.4.2: essentially, you will not get useful help here for it, because no one has been using it for a few years.</p>",
        "id": 256016131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633331997
    },
    {
        "content": "<p><code>@[reducible]</code> is often a code smell; use it sparingly, and until you're an expert perhaps consider it a sign you're not doing things \"the lean way\".</p>",
        "id": 256016300,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633332079
    },
    {
        "content": "<p>Why is it a code smell?</p>",
        "id": 256016361,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633332119
    },
    {
        "content": "<p>I upgraded to <code>version 3.33.0, commit a0fb1e8c7ac8, Release</code>. It complained to my notations, so I added back ticks as suggested above. Everything else is the same — type class inference fails without <code>reducible</code> and gets through with it.</p>",
        "id": 256016919,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633332444
    },
    {
        "content": "<p><code>derive</code> doesn't work in your case because your instances are of the form \"if X has a <code>Same</code> instance, then F(X) does too\", and derive only handles unconditional instances. In this case, <code>reducible</code> is a reasonable approach, or using <code>abbreviation</code> instead of <code>def</code> which amounts to the same thing</p>",
        "id": 256017264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633332658
    },
    {
        "content": "<p><code>abbreviation</code> is the right solution. I do not think it is mentioned in the book.</p>",
        "id": 256018381,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633333386
    },
    {
        "content": "<p><code>abbreviation</code> is the same as <code>@[reducible, inline] def</code></p>",
        "id": 256018673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633333572
    },
    {
        "content": "<p>The reason <code>@[reducible]</code> is a code smell is that you are making more work for the compiler - it needs to unfold this definition any time it's looking for typeclasses, or in many tactics. In that case, the value added by the definition is dubious, and maybe you should just be using a <code>notation</code></p>",
        "id": 256018868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633333738
    },
    {
        "content": "<p>(or not using it at all - certainly mathlib style is to write <code>α → β → Prop</code> instead of <code>Binary_Relation α β</code>.)</p>",
        "id": 256018949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633333801
    },
    {
        "content": "<p>Where is <code>abbreviation</code> documented? I cannot find the right reference.</p>",
        "id": 256019017,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633333821
    },
    {
        "content": "<p>It may not be, it's a new addition</p>",
        "id": 256019033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633333833
    },
    {
        "content": "<p>unfortunately most of the core lean documentation was written years ago and is not under the purview of the leanprover-community org</p>",
        "id": 256019089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633333873
    },
    {
        "content": "<p>It's listed in <a href=\"https://github.com/leanprover/lean/releases\">https://github.com/leanprover/lean/releases</a></p>",
        "id": 256019091,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633333875
    },
    {
        "content": "<p>\"new addition\" he says</p>",
        "id": 256019143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633333911
    },
    {
        "content": "<p>For me, it was here forever.</p>",
        "id": 256019257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633333970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Ignat/near/256018868\">said</a>:</p>\n<blockquote>\n<p>… In that case, the value added by the definition is dubious, and maybe you should just be using a <code>notation</code> …</p>\n</blockquote>\n<p>Yes, I think I should leave it out since it is so simple. But having abbreviations is still a good thing.</p>",
        "id": 256019264,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633333974
    },
    {
        "content": "<p>I think the name <code>abbreviation</code> carries some baggage that might not be a good thing here. Abbreviations are certainly a good thing but <code>abbreviation</code> may not be the way to accomplish it</p>",
        "id": 256019328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633334023
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 256019396,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633334049
    },
    {
        "content": "<p>There are lots of ways to make definitions, depending on to what extent you want to establish an API barrier or a leaky abstraction, or just save a few characters in writing. In rough order of transparency:</p>\n<ul>\n<li><code>notation</code></li>\n<li><code>abbreviation</code></li>\n<li><code>@[reducible] def</code></li>\n<li><code>instance</code></li>\n<li><code>def</code></li>\n<li><code>theorem</code>, <code>lemma</code></li>\n<li><code>@[irreducible] def</code></li>\n<li><code>constant</code> (lean 4)</li>\n<li><code>axiom</code>, <code>constant</code> (lean 3)</li>\n</ul>",
        "id": 256019596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633334170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448347\">Ignat Insarov</span> has marked this topic as resolved.</p>",
        "id": 256020193,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633334506
    },
    {
        "content": "<p>I am glad I made it.</p>",
        "id": 256020289,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633334545
    },
    {
        "content": "<p>To think that yesterday I was about to give up.</p>",
        "id": 256020336,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633334571
    },
    {
        "content": "<p>Thanks everyone!</p>",
        "id": 256020366,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633334589
    }
]