[
    {
        "content": "<p>Is there somewhere in the stdlib <code>range</code> function?</p>\n<p>Right now I make it myself</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_range</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">range</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">}</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`..`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">has_range.range</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n  <span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">range'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">b'</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">range'</span> <span class=\"n\">a</span> <span class=\"n\">b'</span> <span class=\"k\">else</span> <span class=\"o\">[]</span>\n\n  <span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">range'</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_range</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"n\">nat.range</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">char</span>\n  <span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">char</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span> <span class=\"o\">:=</span>\n  <span class=\"n\">char.of_nat</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">a.to_nat</span> <span class=\"bp\">..</span> <span class=\"n\">b.to_nat</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_range</span> <span class=\"n\">char</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"n\">char.range</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span> <span class=\"n\">char</span>\n\n<span class=\"k\">#eval</span> <span class=\"sc\">'a'</span><span class=\"bp\">..</span><span class=\"sc\">'z'</span>\n<span class=\"k\">#eval</span> <span class=\"sc\">'A'</span><span class=\"bp\">..</span><span class=\"sc\">'z'</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">10</span><span class=\"bp\">..</span><span class=\"mi\">20</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">1</span><span class=\"bp\">..</span><span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 226826865,
        "sender_full_name": "Kana",
        "timestamp": 1613661976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> had a branch where they were working on this (edit: <a href=\"https://github.com/leanprover-community/mathlib/tree/fin_range\">branch#fin_range</a>)</p>",
        "id": 226827519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613662225
    },
    {
        "content": "<p>In the meantime, you can use <a href=\"http://list.map\">list.map</a> of list.range or list.range'</p>",
        "id": 226829270,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613662948
    },
    {
        "content": "<p>Thanks. No I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_range</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`..`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">has_range.range</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_range</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">list.range</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_range</span> <span class=\"n\">char</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">char.of_nat</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">a.to_nat</span> <span class=\"bp\">..</span> <span class=\"n\">b.to_nat</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"sc\">'a'</span><span class=\"bp\">..</span><span class=\"sc\">'z'</span>\n<span class=\"k\">#eval</span> <span class=\"sc\">'A'</span><span class=\"bp\">..</span><span class=\"sc\">'z'</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">10</span><span class=\"bp\">..</span><span class=\"mi\">20</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">1</span><span class=\"bp\">..</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 226831042,
        "sender_full_name": "Kana",
        "timestamp": 1613663569
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.range'\">docs#list.range'</a> is a better match for your <code>has_range ℕ</code></p>",
        "id": 226831219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613663635
    },
    {
        "content": "<p>I've updated my comment above with a link to the branch I'm thinking of. <a href=\"https://github.com/leanprover-community/mathlib/blob/2a99682ce7095ccdad56cfcec367c34ac04fa17a/src/data/list/enum.lean#L24-L25\">Here's a definition</a> basically equal to your <code>has_range</code></p>",
        "id": 226831599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613663759
    },
    {
        "content": "<p>Hm, is mathlib something like community stdlib now? I have only default lean lib, with init.data.list without range'.</p>",
        "id": 226832286,
        "sender_full_name": "Kana",
        "timestamp": 1613664003
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_range</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`..`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">has_range.range</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_range.of_equiv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_range</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">list.map</span> <span class=\"n\">e.symm</span> <span class=\"bp\">$</span> <span class=\"n\">list.range'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_range</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">has_range.of_equiv</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_range</span> <span class=\"n\">char</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">char.of_nat</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">a.to_nat</span> <span class=\"bp\">..</span> <span class=\"n\">b.to_nat</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"sc\">'a'</span><span class=\"bp\">..</span><span class=\"sc\">'z'</span>\n<span class=\"k\">#eval</span> <span class=\"sc\">'A'</span><span class=\"bp\">..</span><span class=\"sc\">'z'</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">10</span><span class=\"bp\">..</span><span class=\"mi\">20</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">1</span><span class=\"bp\">..</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 226833223,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613664173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"390421\">@kana</span> Yes, there isn't really anything called stdlib in lean 3, there is the core library in the lean repo and then there is mathlib, and for the most part all of us on zulip are going to assume you have mathlib (it's a monorepo development style)</p>",
        "id": 226880787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613682424
    },
    {
        "content": "<p>the core library is intentionally minimal, so I would recommend you use mathlib for operations on lists and such, like list.range'</p>",
        "id": 226880943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613682484
    },
    {
        "content": "<p>The reason why <code>list.range'</code> takes a start and length instead of start and end is because the latter makes the implicit assumption that the start is less or equal to the end, and this complicates proofs and reasoning about the function</p>",
        "id": 226881143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613682582
    }
]