[
    {
        "content": "<p>Am I trying to do something impossible?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 150728969,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1543769332
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>So the theorem is true, at least :-)</p>",
        "id": 150729021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543769412
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 150729038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543769489
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">result</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">result</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">exists.intro ?m_1 (Exists.dcases_on h (λ (y : α) (hy : p y), ?m_2[h, y, hy]))</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 150729091,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543769550
    },
    {
        "content": "<p>Yes :)  But there is some reason it's in that order. I think...</p>",
        "id": 150729095,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1543769558
    },
    {
        "content": "<p>(<code>result</code> is the proof term constructed at that particular moment)</p>",
        "id": 150729096,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543769567
    },
    {
        "content": "<p>and you can see why this is impossible</p>",
        "id": 150729099,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543769574
    },
    {
        "content": "<p>After your application of <code>exists.intro</code> one of your goals has a metavariable, which is not at all ideal. I would recommend not using <code>apply exists.intro</code> for this sort of reason.</p>",
        "id": 150729154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543769654
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- you now have two goals, and one contains a metavariable.</span>\n  <span class=\"c1\">-- this is not recommended.</span>\n  <span class=\"c1\">-- Your next line only applies to the first goal.</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- your metavariable just got uglier.</span>\n    <span class=\"c1\">-- This is even less recommended.</span>\n    <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">swap</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- we are now working with a sensible goal</span>\n    <span class=\"c1\">-- but now we need to get data from a proposition.</span>\n    <span class=\"n\">exact</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- I just used a noncomputable axiom</span>\n  <span class=\"c1\">-- one goal now</span>\n  <span class=\"n\">exact</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"c1\">-- I just undid your &quot;cases h&quot; line.</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>That's a way to dig yourself out of the hole.</p>",
        "id": 150729224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543769816
    },
    {
        "content": "<p><code>#print axioms mwe -- classical.choice</code></p>",
        "id": 150729230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543769848
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"bp\">_</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">mwe</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">exists.intro (classical.some h) (Exists.dcases_on h (λ (y : α) (hy : p y), classical.some_spec (Exists.intro y hy)))</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 150729285,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543769965
    },
    {
        "content": "<p>Ha!  it turns out there was no good reason for putting it in that order :)<br>\nWhat do you recommend instead of apply exists.intro?</p>",
        "id": 150729286,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1543769967
    },
    {
        "content": "<p><code>use</code></p>",
        "id": 150729289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543769976
    },
    {
        "content": "<p>It would probably be better to do the <code>cases</code> first</p>",
        "id": 150729290,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543769979
    },
    {
        "content": "<p>It's not always bad to <code>apply exists.intro</code> and have a metavar for one goal. Sometimes you want to just show the body of the exists, and let Lean figure out what the witness was by unification. (Like in Kenny's example.)</p>",
        "id": 150729347,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543770026
    },
    {
        "content": "<p>I'm surprised the <code>_</code> worked</p>",
        "id": 150729348,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543770040
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">mwe</span> <span class=\"c1\">-- no axioms</span>\n</pre></div>",
        "id": 150729351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543770044
    },
    {
        "content": "<p>\"use\" is a tactic?</p>",
        "id": 150729362,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1543770080
    },
    {
        "content": "<p>As of about a week ago</p>",
        "id": 150729365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543770089
    },
    {
        "content": "<p><code>existsi</code> is an older one, it's a bit less robust but it would work here</p>",
        "id": 150729375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543770108
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 150729418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543770130
    },
    {
        "content": "<p>no import needed</p>",
        "id": 150729420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543770139
    },
    {
        "content": "<p>Thank you all</p>",
        "id": 150729424,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1543770167
    },
    {
        "content": "<p>Your original one didn't work because you wanted <code>exact hy</code> to also solve the other goal with <code>y</code>, but <code>y</code> was not in scope for the other goal!</p>",
        "id": 150729433,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543770209
    },
    {
        "content": "<p>Yes! And it's hard to get access to it too, because <code>\\exists</code> only eliminates to <code>Prop</code>.</p>",
        "id": 150729480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543770255
    },
    {
        "content": "<p>again, you can see it using this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">result</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">result</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">exists.intro ?m_1 (Exists.dcases_on h (λ (y : α) (hy : p y), ?m_2[h, y, hy]))</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 150729501,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543770324
    },
    {
        "content": "<p>there's no way to unify <code>?m_1</code> with <code>y</code> because <code>y</code> doesn't even exist in the scope of <code>?m_1</code></p>",
        "id": 150729503,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543770346
    },
    {
        "content": "<p>[just to be clear -- Kenny's code doesn't run]</p>",
        "id": 150729543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543770370
    }
]