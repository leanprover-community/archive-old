[
    {
        "content": "<p>I'm trying to formalize some semantics for Computation Tree Logic and I'm running into some trouble making either a mutually recursive or mutually inductive definition. </p>\n<p>I find that if I try to make a recursive definition, I can't determine it's well-founded (at least not automatically, I'm not sure how to use <code>using_well_founded</code>). I assume this is because part of the definition depends on set membership which is undecidable in general.</p>\n<p>On the other hand, if I try to make an inductive predicate I get the problem that I'm trying to index mutually inductive types in terms of one another, which Lean doesn't seem to like. </p>\n<p>Does anyone see a way that I could work around either of these problems? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span> <span class=\"n\">data.set</span> <span class=\"n\">tactic</span> <span class=\"n\">data.stream.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">stream</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CTL</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">AP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">state_formula</span><span class=\"o\">,</span> <span class=\"n\">path_formula</span>\n<span class=\"k\">with</span> <span class=\"n\">state_formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">T</span>             <span class=\"o\">:</span> <span class=\"n\">state_formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">AP</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶‚ÇÅ</span> <span class=\"bp\">Œ¶‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">path_formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">path_formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span>\n<span class=\"k\">with</span> <span class=\"n\">path_formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path_formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">until</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶‚ÇÅ</span> <span class=\"bp\">Œ¶‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path_formula</span>\n<span class=\"kn\">open</span> <span class=\"n\">state_formula</span>\n<span class=\"kn\">open</span> <span class=\"n\">path_formula</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span>  <span class=\"bp\">`‚àº`</span> <span class=\"bp\">Œ¶</span> <span class=\"o\">:=</span> <span class=\"n\">neg</span> <span class=\"bp\">Œ¶</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">Œ¶</span> <span class=\"bp\">`</span><span class=\"n\">and</span><span class=\"bp\">`</span> <span class=\"bp\">Œ®</span> <span class=\"o\">:=</span> <span class=\"n\">conj</span> <span class=\"bp\">Œ¶</span> <span class=\"bp\">Œ®</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">O</span><span class=\"bp\">`</span> <span class=\"bp\">Œ¶</span> <span class=\"o\">:=</span> <span class=\"n\">next</span> <span class=\"bp\">Œ¶</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">Œ¶</span> <span class=\"bp\">`ùí∞`</span> <span class=\"bp\">Œ®</span> <span class=\"o\">:=</span> <span class=\"n\">until</span> <span class=\"bp\">Œ¶</span> <span class=\"bp\">Œ®</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">TS</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Act</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">TR</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">√ó</span> <span class=\"n\">Act</span> <span class=\"bp\">√ó</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">L</span>  <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">AP</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Post_of</span>  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">TS</span> <span class=\"n\">AP</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M.S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">M.Act</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">M.S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s'</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">Œ±</span><span class=\"o\">,</span><span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"n\">M.TR</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Post</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">TS</span> <span class=\"n\">AP</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M.S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">M.S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚ãÉ</span> <span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">M.Act</span><span class=\"o\">,</span> <span class=\"n\">Post_of</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">Œ±</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">path</span>\n<span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">TS</span> <span class=\"n\">AP</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"n\">M.S</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"n\">Post</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">TS</span> <span class=\"n\">AP</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">œÄ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">_</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M.S</span> <span class=\"o\">:=</span> <span class=\"n\">œÄ.val</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">paths</span>\n<span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">TS</span> <span class=\"n\">AP</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M.S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"n\">_</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">œÄ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"n\">_</span> <span class=\"n\">œÄ</span><span class=\"o\">))</span>\n\n<span class=\"c1\">--- recursive definition</span>\n<span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">state_sat</span><span class=\"o\">,</span> <span class=\"n\">path_sat</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">TS</span> <span class=\"n\">AP</span><span class=\"o\">}</span>\n<span class=\"k\">with</span> <span class=\"n\">state_sat</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span> <span class=\"n\">AP</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M.S</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"n\">M.L</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"n\">and</span> <span class=\"bp\">Œ®</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">state_sat</span> <span class=\"bp\">Œ¶</span> <span class=\"n\">s</span> <span class=\"bp\">‚àß</span> <span class=\"n\">state_sat</span> <span class=\"bp\">Œ®</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">‚àº</span> <span class=\"bp\">Œ¶</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">¬¨</span> <span class=\"o\">(</span><span class=\"n\">state_sat</span> <span class=\"bp\">Œ¶</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">œÜ</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">œÄ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">_</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">œÄ</span> <span class=\"bp\">‚àà</span> <span class=\"n\">paths</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">path_sat</span> <span class=\"n\">œÜ</span> <span class=\"n\">œÄ</span> <span class=\"c1\">--not well-founded</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">œÜ</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">œÄ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">_</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">œÄ</span> <span class=\"bp\">‚àà</span> <span class=\"n\">paths</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">path_sat</span> <span class=\"n\">œÜ</span> <span class=\"n\">œÄ</span> <span class=\"c1\">--not well-founded</span>\n<span class=\"k\">with</span> <span class=\"n\">path_sat</span> <span class=\"o\">:</span> <span class=\"n\">path_formula</span> <span class=\"n\">AP</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">path</span> <span class=\"n\">_</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"bp\">Œ¶</span><span class=\"o\">)</span> <span class=\"n\">œÄ</span> <span class=\"o\">:=</span> <span class=\"n\">state_sat</span> <span class=\"bp\">Œ¶</span> <span class=\"o\">(</span><span class=\"n\">œÄ.val</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"bp\">ùí∞</span> <span class=\"bp\">Œ®</span><span class=\"o\">)</span> <span class=\"n\">œÄ</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">--inductive definition</span>\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">state_sat</span><span class=\"o\">,</span> <span class=\"n\">path_sat</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">TS</span> <span class=\"n\">AP</span><span class=\"o\">}</span> <span class=\"c1\">--indexing problem</span>\n<span class=\"k\">with</span> <span class=\"n\">state_sat</span> <span class=\"o\">:</span> <span class=\"n\">M.S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">state_formula</span> <span class=\"n\">AP</span> <span class=\"bp\">‚Üí</span>  <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">TT</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M.S</span><span class=\"o\">,</span> <span class=\"n\">state_sat</span> <span class=\"n\">s</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">atoms</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M.S</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">AP</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"n\">M.L</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">state_sat</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">conj</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M.S</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"bp\">Œ®</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span> <span class=\"n\">AP</span><span class=\"o\">),</span>\n        <span class=\"n\">state_sat</span> <span class=\"n\">s</span> <span class=\"bp\">Œ¶</span> <span class=\"bp\">‚àß</span> <span class=\"n\">state_sat</span> <span class=\"n\">s</span> <span class=\"bp\">Œ®</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">state_sat</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"n\">and</span> <span class=\"bp\">Œ®</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M.S</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span> <span class=\"n\">AP</span><span class=\"o\">),</span>\n        <span class=\"bp\">¬¨</span><span class=\"o\">(</span><span class=\"n\">state_sat</span> <span class=\"n\">s</span> <span class=\"bp\">Œ¶</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">path_formula</span> <span class=\"n\">AP</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M.S</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">œÄ</span> <span class=\"bp\">‚àà</span> <span class=\"n\">paths</span> <span class=\"n\">_</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">path_sat</span> <span class=\"n\">œÄ</span> <span class=\"n\">œÜ</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">path_formula</span> <span class=\"n\">AP</span><span class=\"o\">):</span>\n     <span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M.S</span><span class=\"o\">,</span>\n      <span class=\"bp\">‚àÄ</span> <span class=\"n\">œÄ</span> <span class=\"bp\">‚àà</span> <span class=\"n\">paths</span> <span class=\"n\">_</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">path_sat</span> <span class=\"n\">œÄ</span> <span class=\"n\">œÜ</span>\n<span class=\"k\">with</span> <span class=\"n\">path_sat</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">_</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">path_formula</span> <span class=\"n\">AP</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span> <span class=\"n\">AP</span><span class=\"o\">):</span>\n   <span class=\"bp\">‚àÄ</span> <span class=\"n\">œÄ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">_</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">state_sat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"n\">_</span> <span class=\"n\">œÄ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n                   <span class=\"n\">path_sat</span> <span class=\"n\">œÄ</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"bp\">Œ¶</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">until</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"bp\">Œ®</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span> <span class=\"n\">AP</span><span class=\"o\">):</span>\n   <span class=\"bp\">‚àÄ</span> <span class=\"n\">œÄ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">_</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">state_sat</span> <span class=\"o\">(</span><span class=\"n\">œÄ.val</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">Œ®</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span>\n            <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">state_sat</span> <span class=\"o\">(</span><span class=\"n\">œÄ.val</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">Œ¶</span> <span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">path_sat</span> <span class=\"n\">œÄ</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"bp\">ùí∞</span> <span class=\"bp\">Œ®</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">CTL</span>\n</code></pre></div>\n<p>Also, I <em>think</em> the inductive defintion above does what the recursive definition is supposed to do, but I'm not 100% confident in that.</p>",
        "id": 215263507,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1604266687
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">state_sat</span><span class=\"o\">,</span> <span class=\"n\">path_sat</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">TS</span> <span class=\"n\">AP</span><span class=\"o\">}</span>\n<span class=\"k\">with</span> <span class=\"n\">state_sat</span> <span class=\"o\">:</span> <span class=\"n\">state_formula</span> <span class=\"n\">AP</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M.S</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"n\">M.L</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"n\">and</span> <span class=\"bp\">Œ®</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">state_sat</span> <span class=\"bp\">Œ¶</span> <span class=\"n\">s</span> <span class=\"bp\">‚àß</span> <span class=\"n\">state_sat</span> <span class=\"bp\">Œ®</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">‚àº</span> <span class=\"bp\">Œ¶</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">¬¨</span> <span class=\"o\">(</span><span class=\"n\">state_sat</span> <span class=\"bp\">Œ¶</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">œÜ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">œÄ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">_</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">œÄ</span> <span class=\"bp\">‚àà</span> <span class=\"n\">paths</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">path_sat</span> <span class=\"n\">œÜ</span> <span class=\"n\">œÄ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">œÜ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">œÄ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">_</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">œÄ</span> <span class=\"bp\">‚àà</span> <span class=\"n\">paths</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">path_sat</span> <span class=\"n\">œÜ</span> <span class=\"n\">œÄ</span>\n<span class=\"k\">with</span> <span class=\"n\">path_sat</span> <span class=\"o\">:</span> <span class=\"n\">path_formula</span> <span class=\"n\">AP</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">path</span> <span class=\"n\">_</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"bp\">Œ¶</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">œÄ</span><span class=\"o\">,</span> <span class=\"n\">state_sat</span> <span class=\"bp\">Œ¶</span> <span class=\"o\">(</span><span class=\"n\">œÄ.val</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">Œ¶</span> <span class=\"bp\">ùí∞</span> <span class=\"bp\">Œ®</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">œÄ</span><span class=\"o\">,</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 215263705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604267016
    },
    {
        "content": "<p>Oh, wow. Is there a high-level intuition for why changing the pattern-matching this way affects well-foundedness?</p>",
        "id": 215266789,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1604271325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span> When lean tries to invent a well founded metric for a definition, it tuples up all the arguments left of the <code>:=</code> and uses <code>sizeof</code> for the resulting sigma type. So if you want to do recursion on the first argument only, allowing the second to vary arbitrarily, then you should keep it out of the pattern match</p>",
        "id": 215269450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604275662
    },
    {
        "content": "<p>Right. Thank you!</p>",
        "id": 215269554,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1604275814
    }
]