[
    {
        "content": "<p>Is there a way (in tactic mode) to simplify lambda expressions that are applied to an element? So a way to transform <code>(λ n : ℕ, foo n) x</code> into <code>foo x</code>. So far I have found that <code>simp</code> will do this, but <code>squeeze_simp</code> does not say what lemma is used to simplify this expression (probably because they are definitionally equal). In my code I'd like to use this at this point (irrelevant context removed):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- Found this using squeeze_simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Note that using tactics like <code>rw ne.def at h</code> and <code>rw not_not at h</code> do not work: Lean does \"not find instance of the pattern in the target expression\".<br>\nCan you prove this without using simp? If it is possible, is using simp here preferred over that alternative?</p>",
        "id": 199891439,
        "sender_full_name": "Rick Koenders",
        "timestamp": 1591370242
    },
    {
        "content": "<p>The usual recommendation is <code>dsimp only [] at h</code></p>",
        "id": 199891631,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591370328
    },
    {
        "content": "<p>You can even omit the empty list.</p>",
        "id": 199893356,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591371057
    },
    {
        "content": "<p>Just found out that the reason <code>rw not_not at h</code> doesn't work is because of the ∀, not because of the λ. The following is a valid proof without <code>simp</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">not_not</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Thanks for the suggestions everyone.</p>",
        "id": 199893764,
        "sender_full_name": "Rick Koenders",
        "timestamp": 1591371226
    }
]