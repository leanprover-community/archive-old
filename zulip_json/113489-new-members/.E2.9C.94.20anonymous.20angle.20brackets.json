[
    {
        "content": "<p>That's short for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exists.intro</span> <span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The anonymous constructor brackets are for types with a single constructor. They look at the expected type to figure out what they should be replaced with.</p>\n<p>There's a rule that you can merge angle brackets that are right-nested.  This is being used in your example, where fully bracketed the expression passed to <code>exact</code> would be <code>⟨(y-x)/2, ⟨by linarith, by linarith⟩⟩</code>.</p>",
        "id": 274254763,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646500842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"410678\">Robert Watson</span> <a href=\"#narrow/stream/113489-new-members/topic/anonymous.20angle.20brackets/near/274252546\">said</a>:</p>\n<blockquote>\n<p>But in the example (below) normal parentheses are used for what I think must be a sigma type</p>\n</blockquote>\n<p>What are you referring to here?</p>",
        "id": 274254962,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646501132
    },
    {
        "content": "<p>Great. Thanks Kyle. I didn't find the Tutorial too clear on what is really going on here. What you've written here is exactly what I was asking, and now I get it. Sigma types are like a generalisation of a cartesian product for dependent type theory. The normal parentheses I was referring to are in the example line, that is:  (∀ ε &gt; 0, y ≤ x + ε). You can see the similarity I was finding confusing.  The right associativity was not confusing at all as it is explained in the Tutorial.</p>",
        "id": 274256090,
        "sender_full_name": "Robert Watson",
        "timestamp": 1646502504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"410678\">Robert Watson</span> has marked this topic as resolved.</p>",
        "id": 274256118,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646502550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"410678\">@Robert Watson</span> The parentheses around the forall are different, and this is about precedence. If it had been <code>∀ ε &gt; 0, y ≤ x + ε → y ≤ x</code>, it would parse as <code>∀ ε &gt; 0, (y ≤ x + ε → y ≤ x)</code>, which isn't what you'd want. (By the way, foralls are \"pi types\" rather than \"sigma types\".)</p>",
        "id": 274256517,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646503071
    },
    {
        "content": "<p>If it had been 'exists' would it still be normal brackets? Could angle brackets have been used too?</p>",
        "id": 274256966,
        "sender_full_name": "Robert Watson",
        "timestamp": 1646503562
    },
    {
        "content": "<p>Normal brackets really are just about grouping, not about what's in them(*)</p>",
        "id": 274257126,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1646503749
    },
    {
        "content": "<p>(*)  exception: casts like <code>(expr : type)</code>, but that's not what's happening here</p>",
        "id": 274257202,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1646503817
    },
    {
        "content": "<p>If it had been <code>exists</code>, it'd have the same parentheses considerations. In Lean, anything that has a comma generally means \"the parse the next expression as far as possible\", so you need parentheses to prevent the forall or exists from capturing the stuff from the function/implication arrow onward.</p>\n<p>Angle brackets are only for constructing terms/proofs of a type/prop.  The forall and exists themselves are propositions.</p>",
        "id": 274257203,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646503818
    },
    {
        "content": "<p>Something that takes a little getting used to in Lean is that the comma is not just an element separator. You'll find (and maybe even find yourself writing) code that looks like <code>⟨λ x, x + 1, λ y, 2 * y, 3⟩</code>, but you have to know it means <code>⟨(λ x, x + 1), (λ y, 2 * y), 3⟩</code>.</p>",
        "id": 274257321,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646503984
    },
    {
        "content": "<p>What's the best way to learn this stuff as I find it is really slowing me down with the Tutorials? I tried to use (*) for groupings with rewrite and got into all sorts of a mess in another thread here, so I learnt <em>not</em> to do that! - I had to use square brackets there!</p>",
        "id": 274257567,
        "sender_full_name": "Robert Watson",
        "timestamp": 1646504317
    },
    {
        "content": "<p>Are you in VS Code? You can move your mouse over <code>rw</code> to see a terse description of the syntax. There's also documentation such as <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rw%20/%20rewrite\">https://leanprover-community.github.io/mathlib_docs/tactics.html#rw%20/%20rewrite</a></p>\n<p>You can also take a look at the example proofs in file 00: <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/00_first_proofs.lean\">https://github.com/leanprover-community/tutorials/blob/master/src/exercises/00_first_proofs.lean</a></p>",
        "id": 274257918,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646504767
    },
    {
        "content": "<p>Thanks for the mathlib documentation, I wasn't aware of that.</p>",
        "id": 274257951,
        "sender_full_name": "Robert Watson",
        "timestamp": 1646504859
    },
    {
        "content": "<p>In that other thread, the problem with the parentheses with <code>rw</code> was that the <code>&lt;-</code> is part of the <code>rw</code> syntax.</p>",
        "id": 274257955,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646504862
    },
    {
        "content": "<p>If you put parentheses around it, then you're asking Lean to parse the <code>&lt;-</code> as if it were part of an expression, but there's no interpretation of <code>&lt;-</code> as an expression (at least by default).</p>",
        "id": 274258014,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646504906
    },
    {
        "content": "<p>The square brackets are a way to give <code>rw</code> multiple rewrites. Square brackets are somewhat traditional in functional programming to mean ordered lists.</p>",
        "id": 274258055,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646504980
    }
]