[
    {
        "content": "<p>What are the <code>cases</code> lines doing?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n<span class=\"kn\">import</span> <span class=\"n\">tuto_lib</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">v</span> <span class=\"n\">l&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">l&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hu</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N₁</span> <span class=\"n\">hN₁</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hv</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N₂</span> <span class=\"n\">hN₂</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">max</span> <span class=\"n\">N₁</span> <span class=\"n\">N₂</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ge_max_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">hn₁</span> <span class=\"n\">hn₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact₁</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">hN₁</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>  <span class=\"c1\">-- note the use of `from`.</span>\n                               <span class=\"c1\">-- This is an alias for `exact`,</span>\n                               <span class=\"c1\">-- but reads nicer in this context</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact₂</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l&#39;</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">hN₂</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n  <span class=\"k\">calc</span>\n  <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">l&#39;</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">l&#39;</span><span class=\"o\">)</span><span class=\"bp\">|</span>   <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n                     <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l&#39;</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span> <span class=\"bp\">;</span> <span class=\"n\">ring</span>\n                     <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l&#39;</span><span class=\"bp\">|</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">abs_add</span>\n                     <span class=\"bp\">...</span> <span class=\"bp\">≤</span>  <span class=\"n\">ε</span>                       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202905250,
        "sender_full_name": "Iocta",
        "timestamp": 1593924445
    },
    {
        "content": "<p>I think <code>cases</code> is breaking up the \"and\" that's built into the forall, but then what's <code>(ε/2) (by linarith)</code> about?</p>",
        "id": 202905299,
        "sender_full_name": "Iocta",
        "timestamp": 1593924505
    },
    {
        "content": "<p>I'm guessing because you haven't given a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, but most likely the type of the term <code>hu (ε/2) (by linarith)</code> is something like <code>∃ N, hN</code>. Then <code>cases ... with N hN</code> creates terms <code>N</code> and <code>hN</code> in the context from that term.</p>",
        "id": 202905358,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593924611
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/05_sequence_limits.lean#L106\">https://github.com/leanprover-community/tutorials/blob/master/src/exercises/05_sequence_limits.lean#L106</a></p>",
        "id": 202905364,
        "sender_full_name": "Iocta",
        "timestamp": 1593924637
    },
    {
        "content": "<p>Section 7.3 of TPiL talks about how exists is an inductively defined proposition: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductively-defined-propositions\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductively-defined-propositions</a> Section 7.6 talks about how <code>cases</code> decomposes inductively defined propositions.</p>",
        "id": 202905385,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593924717
    },
    {
        "content": "<p>We had a discussion a while back about how this seems to be kind of hard for new people to figure out: <a href=\"#narrow/stream/113488-general/topic/A.20tutorial.20of.20Lean.20for.20mere.20mortals/near/199571350\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/A.20tutorial.20of.20Lean.20for.20mere.20mortals/near/199571350</a></p>",
        "id": 202905461,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593924840
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/296\">lean#296</a> is still open...</p>",
        "id": 202905510,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593924869
    },
    {
        "content": "<p>I looked at the code and indeed...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span>\n</code></pre></div>\n\n\n<p>And <code>seq_limit u l := ∀ ε &gt; 0, ∃ N, ∀ n ≥ N, |u n - l| ≤ ε</code>, which is short for <code>∀ ε, ∀ ε &gt; 0, ∃ N, ∀ n ≥ N, |u n - l| ≤ ε</code>so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">hu</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Here, Lean infers that <code>by linarith</code> must have the type <code>ε/2 &gt; 0</code>, and indeed, the tactic <code>linarith</code> is able to prove this, so it typechecks.</p>",
        "id": 202905661,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593925200
    },
    {
        "content": "<p>I was parsing it wrong, it's </p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">cases</span> <span class=\"o\">((</span><span class=\"n\">hu</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">N₁</span> <span class=\"n\">hN₁</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 202905708,
        "sender_full_name": "Iocta",
        "timestamp": 1593925242
    },
    {
        "content": "<p><code>cases</code> seems similar to <code>specialize</code> for this?</p>",
        "id": 202906160,
        "sender_full_name": "Iocta",
        "timestamp": 1593926123
    },
    {
        "content": "<p>Not that I can see. What were you thinking, exactly?</p>",
        "id": 202906712,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593927412
    },
    {
        "content": "<p><code>cases</code> can split any inductive type, not only <code>and</code>. In this case it splits <code>∃ N, ...</code> into <code>N</code> and <code>hN : ∀ n ≥ N, ...</code>.</p>",
        "id": 202907250,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593928681
    },
    {
        "content": "<p>This is a good example where using <code>obtain</code> would result in easier-to-read code.</p>",
        "id": 202914504,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593943078
    }
]