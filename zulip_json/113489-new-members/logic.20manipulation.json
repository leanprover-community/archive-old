[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h93</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span>\n<span class=\"n\">h94</span><span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z_1</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">z_1</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">z_1</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span> <span class=\"bp\">∪</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span>\n</code></pre></div>\n\n<p>So what is the \"easy\" way to substitute a new variable, say t, for z_1 and x and get on with it from there?  as I would <br>\ndo with 'cases'  if it were a positive existential;  here it's a negative universal and I do not know the right command.</p>",
        "id": 212381573,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1601955535
    },
    {
        "content": "<p>It's a bit hard to understand your question -- it can be very helpful having a minimal working example (<a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>), for example as an <code>example</code>.  Here's an approximation, since I'm not sure what all your types are, along with some tactics that might be helpful in this context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">FINITE</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h93</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h94</span><span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z_1</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">z_1</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">z_1</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span> <span class=\"bp\">∪</span> <span class=\"n\">b</span> <span class=\"bp\">\\</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h94</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h93</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212382729,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601957080
    },
    {
        "content": "<p>Thank you, Kyle,  \"apply\" was the thing I didn't know.   I've written something like 14000 lines of Lean proofs and never once used \"apply\" because I don't know about it.  Now I'll learn it.  Also,  thanks for demonstrating how I could have made a MWE out of this few lines.   I didn't think it was possible.</p>",
        "id": 212383313,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1601957887
    }
]