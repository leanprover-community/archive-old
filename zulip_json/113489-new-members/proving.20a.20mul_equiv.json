[
    {
        "content": "<p>i'm trying to prove something like <code>def braid_group (σᵢ σₖ : G) : multiplicative ℕ ≃* presented_group (braid_rels σᵢ σₖ) := sorry</code> and am trying to use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive \"Extract the forward direction of an additive equivalence</span>\n<span class=\"kd\">as an addition-preserving function.\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_monoid_hom</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">h.map_one</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>to somehow get a <code>f : multiplicative ℕ →* presented_group (braid_rels σᵢ σₖ)</code> and maybe some proof step saying these are both monoids, then using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A bijective `monoid` homomorphism is an isomorphism -/</span>\n<span class=\"kd\">@[to_additive \"A bijective `add_monoid` homomorphism is an isomorphism\"]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">of_bijective</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">f.map_mul'</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">equiv.of_bijective</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>to finally get the <code>multiplicative ℕ ≃* presented_group (braid_rels σᵢ σₖ)</code>. however i'm not sure if i can introduce this as a function in the first place, since <code>intro</code> doesn't work. the error i get is <code>Pi/let expression expected</code>. i also think there might be some flaw to my approach, but i'm unsure.</p>",
        "id": 248554916,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628210609
    },
    {
        "content": "<p>Can you share a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 248555998,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628211915
    },
    {
        "content": "<p>So are you constructing a <code>(M →* N)</code> and then proving it is bijective, to construct your <code>mul_equiv</code>?</p>",
        "id": 248556023,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628211958
    },
    {
        "content": "<p>sure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.presented_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.free_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.mul_add</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">`σₖ⁻¹ * σᵢ⁻¹ * σₖ⁻¹ * σᵢ * σₖ * σᵢ = 1`, `σᵢ⁻¹ * σₖ⁻¹ * σᵢ * σₖ = 1`-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">braid_rels</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span>\n<span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n<span class=\"o\">(</span><span class=\"n\">free_group.of</span> <span class=\"n\">σₖ</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">braid_group</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃*</span> <span class=\"n\">presented_group</span> <span class=\"o\">(</span><span class=\"n\">braid_rels</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 248558140,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628214497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20mul_equiv/near/248556023\">said</a>:</p>\n<blockquote>\n<p>So are you constructing a <code>(M →* N)</code> and then proving it is bijective, to construct your <code>mul_equiv</code>?</p>\n</blockquote>\n<p>yes i think that is what i'm trying to do</p>",
        "id": 248558188,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628214583
    },
    {
        "content": "<p>When you construct data, you should try to avoid doing it via tactics. So in this case, you need to provide something to fill in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">braid_group</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃*</span> <span class=\"n\">presented_group</span> <span class=\"o\">(</span><span class=\"n\">braid_rels</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 248558771,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628215261
    },
    {
        "content": "<p>I generated that skeleton by writing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">braid_group</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃*</span> <span class=\"n\">presented_group</span> <span class=\"o\">(</span><span class=\"n\">braid_rels</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">_</span>\n</code></pre></div>\n<p>Then pressing <code>Ctrl+.</code> or the lightbulb, and selecting <code>Generate a skeleton for the structure under construction</code></p>",
        "id": 248558831,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628215317
    },
    {
        "content": "<p>If you want to do your proof via a <code>monoid_hom</code> and a bijectivity proof, you can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">braid_group</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃*</span> <span class=\"n\">presented_group</span> <span class=\"o\">(</span><span class=\"n\">braid_rels</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_equiv.of_bijective</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n  <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 248558905,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628215377
    },
    {
        "content": "<p>oh wow ok thank you!</p>",
        "id": 248559463,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628216018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20mul_equiv/near/248558905\">said</a>:</p>\n<blockquote>\n<p>If you want to do your proof via a <code>monoid_hom</code> and a bijectivity proof, you can do:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">braid_group</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃*</span> <span class=\"n\">presented_group</span> <span class=\"o\">(</span><span class=\"n\">braid_rels</span> <span class=\"n\">σ</span><span class=\"bp\">ᵢ</span> <span class=\"n\">σₖ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_equiv.of_bijective</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n  <span class=\"n\">_</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>how did you know we needed to generate a skeleton for the <code>mul_equiv.of_bijective</code>? it seems like a regular definition.</p>",
        "id": 248643652,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628271605
    },
    {
        "content": "<p>You start by writing <code>mul_equiv.of_bijective _ _</code>, and seeing what lean wants you to fill in the <code>_</code>s with. Lean says \"I can't find the <code>monoid_hom</code>\", and you presumably want to build it from first principles, so you tell lean to \"generate a skeleton for the structure\". If you try that where the type isn't a structure, lean won't generate the <code>{}</code> for you.</p>",
        "id": 248644820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628272214
    },
    {
        "content": "<p>but how do we know that we can use <code>_</code> after <code>mul_equiv.of_bijective</code>, like what about this definition says that we can use <code>_</code>? i tried doing something like <code>mul_equiv.to_monoid_hom _</code> just to check if the lightbulb shows up, but it doesn't.</p>",
        "id": 248645673,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628272608
    },
    {
        "content": "<p>The <code>_</code> isn't really special - it just says \"I'll fill this in later\", while allowing lean to figure out the structure of the term that contains the placeholder. This works here as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.mul_add</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→*</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">mul_equiv.to_monoid_hom</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 248652353,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1628275667
    },
    {
        "content": "<p>Important to note that <code>mul_equiv.to_monoid_hom</code> isn't about constructing a <code>mul_equiv</code> (<code>≃*)</code>. It is about constructing a <code>monoid_hom</code> (also written as <code>-&gt;*</code>) from a <code>mul_equiv</code>. A <code>mul_equiv</code> is a strictly stronger definition.</p>",
        "id": 248653509,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628276080
    },
    {
        "content": "<blockquote>\n<p>how did you know we needed to generate a skeleton for the mul_equiv.of_bijective? it seems like a regular definition.</p>\n</blockquote>\n<p>Because I knew that a <code>-&gt;*</code> is a structure too. Could you clarify what you mean by \"regular definition\"? I think clearing up what distinction you're making will help me explain better the pieces involved.</p>",
        "id": 248653611,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628276149
    },
    {
        "content": "<p>well, i don't actually know the difference between different definitions. they are all just a \"definition\" in my mind. how <code>to_monoid_hom</code> is constructed versus <code>of_bijective</code> seems identical to me, except for the fact that <code>to_monoid_hom</code> is constructing a <code>-&gt;*</code> from a <code>mul_equiv</code>, while <code>of_bijective</code> is constructing a <code>mul_equiv</code> from a <code>-&gt;*</code> and bijectivity proof, as you mentioned.</p>",
        "id": 248666445,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628282876
    },
    {
        "content": "<p>i guess i should be focusing on what the definitions are saying rather than their construction.</p>",
        "id": 248666596,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628282942
    },
    {
        "content": "<p>You seem to be confusing functions with types. The question shouldn't be about \"how <code>to_monoid_hom</code> (a function) is constructed\", it should be about \"how the <em>arguments</em> of type <code>monoid_hom</code> are constructed\"</p>",
        "id": 248667115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628283237
    },
    {
        "content": "<p><code>mul_equiv.to_monoid_hom</code> is a definition that gives you a <code>monoid_hom</code> if you provide it a <code>mul_equiv</code>. The important thing to note here is that a <code>monoid_hom</code> is just a decorated (in mathlib lingo \"bundled\") function <code>f : R -&gt; S</code> with the relevant proofs about <code>f 1 = 1</code> and <code>f (x * y) = f x * f y</code>.</p>\n<p><code>mul_equiv</code> on the other hand is a bundled _pair_ of functions <code>f : R -&gt; S</code> and <code>g : S -&gt; R</code> with the relevant proofs that ... etc... . So a <code>mul_equiv</code> has more data encoded in it!</p>",
        "id": 248667237,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628283289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20mul_equiv/near/248667115\">said</a>:</p>\n<blockquote>\n<p>\"how the <em>arguments</em> of type <code>monoid_hom</code> are constructed\"</p>\n</blockquote>\n<p>what does this mean? i'm confused on what these arguments are</p>",
        "id": 248672431,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628286266
    },
    {
        "content": "<p>You can use <code>#check</code> to find out</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">mul_equiv.to_monoid_hom</span>\n<span class=\"c1\">-- mul_equiv.to_monoid_hom :</span>\n<span class=\"c1\">--  Π {M : Type u_1} {N : Type u_2} [_inst_5 : mul_one_class M] [_inst_6 : mul_one_class N],</span>\n<span class=\"c1\">--    M ≃* N → M →* N</span>\n</code></pre></div>\n<p>If you don't know how to read this yet, then this is what you should focus on before trying to formalize anything using parts of mathlib.</p>",
        "id": 248673245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628286952
    },
    {
        "content": "<p>oh, is <code>mul_equiv.to_monoid_hom</code> of type <code>monoid_hom</code>?</p>",
        "id": 248674339,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628287743
    },
    {
        "content": "<p>No. But <code>mul_equiv.to_monoid_hom _</code> is.</p>",
        "id": 248674445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628287845
    },
    {
        "content": "<p>Just like <code>fibonacci 3</code> is of type <code>ℕ</code>, but <code>fibonacci</code> is not.</p>",
        "id": 248674491,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628287893
    },
    {
        "content": "<p>oh ok, so <code>_</code> is implicitly filling in the arguments?</p>",
        "id": 248674691,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628288047
    },
    {
        "content": "<p><code>_</code> means \"work out this argument if you can, error if you can't\"</p>",
        "id": 248675955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628289004
    },
    {
        "content": "<p>The error will tell you what type lean needed in the gap</p>",
        "id": 248675997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628289017
    },
    {
        "content": "<p>If you put your cursor before the <code>_</code> as <code>|_</code>, then the goal view will show the type too</p>",
        "id": 248676019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628289044
    },
    {
        "content": "<p>got it, thanks</p>",
        "id": 248676935,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628289731
    }
]