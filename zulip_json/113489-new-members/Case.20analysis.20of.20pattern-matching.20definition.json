[
    {
        "content": "<p>TPIL exercise 8.6 has me proving a theorem about this function:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">simp_const</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₂</span><span class=\"o\">))</span>  <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span>                             <span class=\"o\">:=</span> <span class=\"n\">e</span>\n</code></pre></div>\n\n\n<p>The obvious way to structure the proof is based on the structure of the definition, a case analysis with 3 cases. How can I do that?</p>\n<p>A match expression doesn't seem to work. <code>intro e, cases e</code> instead splits along the structure of the inductive type <code>aexpr</code>.</p>",
        "id": 199708211,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1591250530
    },
    {
        "content": "<p>This fails at line 41: <a href=\"https://gist.github.com/jorendorff/0b1c492b81687e43ebc749ea1b353080\">https://gist.github.com/jorendorff/0b1c492b81687e43ebc749ea1b353080</a></p>",
        "id": 199709114,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1591251572
    },
    {
        "content": "<p>It's not three cases, the presentation is misleading</p>",
        "id": 199710501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591253178
    },
    {
        "content": "<p>If you <code>#print prefix simp_const</code> you will see that the equation compiler has to split the wildcard case here into many subcases</p>",
        "id": 199710530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591253225
    },
    {
        "content": "<p>You have to split along <code>aexpr</code> (three times, in fact). However you can use tricks like <code>all_goals</code> to provide the same proof for the wildcard cases</p>",
        "id": 199710611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591253298
    },
    {
        "content": "<p>It's not so bad, I guess:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">simp_const_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">simp_const</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"n\">e</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">av</span> <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">av</span> <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Thank you!</p>",
        "id": 199712069,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1591254831
    },
    {
        "content": "<p>You can even collapse all the <code>refl</code> cases into one:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">simp_const_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">simp_const</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"n\">e</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">e_a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">e_a_1</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">e_a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">e_a_1</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>You used to be able to use <code>case</code> for this but it looks like someone snuck a change in to make <code>case</code> act like <code>focus</code>, which means you can't do partial work on a goal anymore.</p>",
        "id": 199714125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591256617
    },
    {
        "content": "<p>Hm, git blame doesn't agree with me, apparently the <a href=\"https://github.com/leanprover-community/lean/blame/ab583b6648e80d50c032d8948e6fcda2657b9217/library/init/meta/interactive.lean#L739\"><code>solve1</code> in <code>case</code></a> has been there since the beginning. It would be nice to have a variation that doesn't do that though for problems like this</p>",
        "id": 199714671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591257052
    },
    {
        "content": "<p>A workaround is to drop the goals and then pick them up later:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">set_goals</span> <span class=\"o\">[]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">simp_const_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">simp_const</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">case</span> <span class=\"n\">const</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">drop</span> <span class=\"o\">},</span>\n    <span class=\"n\">drop</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">case</span> <span class=\"n\">const</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">drop</span> <span class=\"o\">},</span>\n    <span class=\"n\">drop</span> <span class=\"o\">},</span>\n  <span class=\"n\">recover</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199714969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591257306
    },
    {
        "content": "<p>What about “cases e; try {refl},”</p>",
        "id": 199738341,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591273436
    },
    {
        "content": "<p>The followup exercise is stumbling me. Not sure how to tie the knot on the recursive equality. I have that</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">simp_const</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₂</span><span class=\"o\">))</span>  <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span>                             <span class=\"o\">:=</span> <span class=\"n\">e</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fuse</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">simp_const</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">simp_const</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span>           <span class=\"o\">:=</span> <span class=\"n\">e</span>\n</code></pre></div>\n\n\n<p>but proving </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">fuse_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:</span>\n</code></pre></div>\n\n\n<p>gets stuck at the plus and times cases, which descend into proving the parent statement again. The parent poster to this thread has a different definition for <code>fuse</code> at <a href=\"https://gist.github.com/jorendorff/8b862caf53a583857dbacbbee22d76a3#file-expressions-lean-L35\">https://gist.github.com/jorendorff/8b862caf53a583857dbacbbee22d76a3#file-expressions-lean-L35</a> but that does not simplify statements as expected. However, it is provably equal to the evaluated expression.</p>",
        "id": 199933659,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591390867
    },
    {
        "content": "<p>What I mean by recursive proof is indicated here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">fuse_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">const</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">var</span>   <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">{</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">],</span>\n      <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n        <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n          <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">},</span>\n          <span class=\"n\">rw</span> <span class=\"n\">simp_const_eq</span><span class=\"o\">,</span>\n          <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">],</span>\n          <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">aeval</span><span class=\"o\">],</span>\n          <span class=\"n\">rw</span> <span class=\"n\">simp_const_eq</span><span class=\"o\">,</span>\n          <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">aeval</span><span class=\"o\">],</span>\n          <span class=\"c1\">-- a + (aeval v (fuse b_a) + aeval v (fuse b_a_1)) = a + (aeval v b_a + aeval v b_a_1)</span>\n          <span class=\"c1\">-- which is what we basically had at the parent cases split</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">times</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199935069,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591391829
    },
    {
        "content": "<p>So you probably need <code>induction</code> and not <code>cases</code> for this. See the <code>IHf</code> and <code>IHg</code> which are in the <code>plus</code> and <code>times</code> cases which you don't get with <code>cases</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">fuse_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">const</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">var</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">IHf</span> <span class=\"n\">IHg</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">IHf</span> <span class=\"n\">IHg</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199950849,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1591408312
    }
]