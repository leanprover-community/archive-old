[
    {
        "content": "<p>I would have expected the following two inductive definitions to be identical. The only difference is that I assign <code>ohno</code> as a name to the vector length parameter and simply never use it. Or so I thought. Apparently there is a difference and Lean4 forces me to <em>use</em> <code>ohno</code>. Why is this distinction important? I am hoping this will bring me insights into DTT and Lean4's inner workings :D</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ohno</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"mi\">0</span> <span class=\"c1\">-- inductive datatype parameter mismatch 0 expected ohno</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Vect</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">Vect</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Vect</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Vect</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282905965,
        "sender_full_name": "Max Nowak",
        "timestamp": 1652954279
    },
    {
        "content": "<p>Lean automatically fills in parameters left of the colon, if you want to use a variable as an index put it to the right.</p>",
        "id": 282907782,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1652955335
    },
    {
        "content": "<p>Is the answer to this simply that the very syntax for inductive types depends on what's on either side of the colon?</p>",
        "id": 282907795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652955346
    },
    {
        "content": "<p>Thanks for the answers :).<br>\nWhat do you mean with using a variable as an index?</p>",
        "id": 282908190,
        "sender_full_name": "Max Nowak",
        "timestamp": 1652955619
    },
    {
        "content": "<p>I'm not a computer scientist but I think the distinction is that a parameter only says what kinds of stuff live in your type whereas indices control the structure of the type.<br>\nedit: I said this wrong, this should help <a href=\"https://stackoverflow.com/questions/24600256/difference-between-type-parameters-and-indices\">https://stackoverflow.com/questions/24600256/difference-between-type-parameters-and-indices</a></p>",
        "id": 282908444,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1652955828
    },
    {
        "content": "<p>Ahhhhh, yeah that makes so much sense now!<br>\nThe key distinction is then that parameters need to be uniform everywhere, but indices can differ in each constructor, because, well, we can use them to fiddle with which constructors are viable in e.g. pattern matching.</p>",
        "id": 282909413,
        "sender_full_name": "Max Nowak",
        "timestamp": 1652956520
    },
    {
        "content": "<p>Thank you :)</p>",
        "id": 282909501,
        "sender_full_name": "Max Nowak",
        "timestamp": 1652956571
    }
]