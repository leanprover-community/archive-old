[
    {
        "content": "<p>What exactly do \"bundled\" and \"unbundled\" mean in the context of lean? Is there a [Note: ...] or manual pages somewhere that summarizes how to choose between them when designing structure?</p>\n<p>I've seen some posts here suggesting that <code>extends another_type_class</code> is a bundled type class and <code>[another_type_class]</code> is an unbundled one. I've seem some other discussions suggesting that <code>struct</code> is bundled and <code>class</code> is unbundled.</p>\n<p>Is this a mathematics term that I'm unfamiliar with, or a lean concept?</p>",
        "id": 202411164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593508267
    },
    {
        "content": "<p>It's not maths. It's about the amount of things that you package into your structure vs keeping them as arguments.</p>",
        "id": 202411302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593508339
    },
    {
        "content": "<p>The version with more things in the structure is considered the bundled one?</p>",
        "id": 202411385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593508402
    },
    {
        "content": "<p>As for my second point then, is there anything in the lean / mathlib docs about how those choices are made internally? In particular, how there seem to be large swathes of deprecated \"unbundled\" code - it would be nice to learn and apply the same rationale elsewhere</p>",
        "id": 202413840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593510050
    },
    {
        "content": "<p>The <code>deprecated</code> directory primarily contains unbundled homs, which have been discussed on Zulip many times before</p>",
        "id": 202414481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510480
    },
    {
        "content": "<p>We're trying to move away from <code>[is_group_hom (f : G -&gt; H)]</code> to <code>(f : G -&gt;* H)</code></p>",
        "id": 202414560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510512
    },
    {
        "content": "<p>Is there anything I can read to understand the motivation? Perhaps some notable zulip threads?<br>\n(I'm not saying I disagree with it, I just want to avoid making the same mistake in my own code)</p>",
        "id": 202414815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593510669
    },
    {
        "content": "<p>The plan has been around for so long (more than a year) that it's tricky finding a good reference</p>",
        "id": 202414941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510749
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/How.20to.20handle.20transfer.20to.20bundled.20homs\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/How.20to.20handle.20transfer.20to.20bundled.20homs</a></p>",
        "id": 202414942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510750
    },
    {
        "content": "<p>I feel like I gained some clarity on these things by reading <a href=\"https://dl.acm.org/doi/10.1145/3372885.3373824\">the mathlib paper</a></p>",
        "id": 202414985,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593510786
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/bundling.20mul_homs\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/bundling.20mul_homs</a></p>",
        "id": 202415126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510887
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/RVGrQrjtnR2Yzm3ckfl4chco/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RVGrQrjtnR2Yzm3ckfl4chco/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/RVGrQrjtnR2Yzm3ckfl4chco/image.png\"></a></div>",
        "id": 202447725,
        "sender_full_name": "Utensil Song",
        "timestamp": 1593529291
    },
    {
        "content": "<blockquote>\n<p>We primarily use semi-bundled definitions for type classes in mathlib, with all operations being bundled except for the carrier types.</p>\n</blockquote>",
        "id": 202447917,
        "sender_full_name": "Utensil Song",
        "timestamp": 1593529345
    },
    {
        "content": "<p>When entering the bundled world, I wonder if we need to worry about <a href=\"#narrow/stream/113488-general/topic/old_structure_cmd/near/162644647\">the old/new or nested/flat structure thing</a> at this stage? I felt reluctant to enter the bundled world ( and using inheritance ) because I read about these technical issues, and they don't look pretty or natural when reading the code in mathlib. And my goal was to make Lean code look like ordinary math as much as possible.</p>\n<p>Also, I can't tell when to worry about <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#lower%20instance%20priority\">lower instance priority</a> either.</p>",
        "id": 202524366,
        "sender_full_name": "Utensil Song",
        "timestamp": 1593570117
    },
    {
        "content": "<p>The linter will tell you about instance priority issues. And you will have to make a decision about old/new structures, but it's one decision per structure. The general rule of thumb is to make everything an old structure. The changes were made because of a scaling issue which we don't really see in mathematical structures so a lot of mathlib still uses old structures</p>",
        "id": 202535548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593585616
    },
    {
        "content": "<p>It seems a whole lot of algebra stuff in mathlib is using the new structure (nested) and my code heavily relies on algebra part so I might stay new for now. And it frightens me that old structures struggle to extend new structures (<a href=\"#narrow/stream/116395-maths/topic/DVRs/near/200764626\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/DVRs/near/200764626</a>).</p>",
        "id": 202574272,
        "sender_full_name": "Utensil Song",
        "timestamp": 1593613228
    },
    {
        "content": "<p>Kinda related to this conversation - can a type class be fully unbundled (have no fields)?</p>",
        "id": 202582277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593616965
    },
    {
        "content": "<p>There are typeclasses which extend other classes and have no fields.</p>",
        "id": 202582372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593617025
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">comm_semigroup</span> <span class=\"n\">α</span>\n</code></pre></div>\n\n\n<p>(that's it)</p>",
        "id": 202582546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593617093
    },
    {
        "content": "<p>Is <code>class comm_ring (α : Type u) [ring α] [comm_semigroup α]</code> legal?</p>",
        "id": 202582583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593617114
    },
    {
        "content": "<p>I should think so.</p>",
        "id": 202582640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593617134
    },
    {
        "content": "<p>But then if you wanted a commutative ring you'd have to write <code>[ring R] [comm_semigroup R] [comm_ring R]</code></p>",
        "id": 202582864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593617221
    },
    {
        "content": "<p>You've predicted exactly the trouble I was about to run into</p>",
        "id": 202583250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593617417
    },
    {
        "content": "<p>What's the rule for picking between <code>class comm_ring (α : Type u) extends ring α</code> and <code>class comm_ring (α : Type u) := (r : s ring α)</code>?</p>",
        "id": 202583368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593617482
    },
    {
        "content": "<p>This is a computer science question. I don't really understand these issues properly at all.</p>",
        "id": 202583475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593617528
    },
    {
        "content": "<p>Seems in my case that only the latter is legal, so lets try that approach</p>",
        "id": 202583506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593617548
    },
    {
        "content": "<p>Once you've actually got your use case compiling, you might want to run it past the people in <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a> to see what the experts think of it. (<a href=\"#narrow/stream/116395-maths/topic/local.20ring.20refactor/near/201959509\">me doing this last week</a>)</p>",
        "id": 202583673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593617651
    },
    {
        "content": "<p>Good idea, thanks</p>",
        "id": 202584354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593618045
    },
    {
        "content": "<p>On the note of compiling... If there's one type class argument that lean is having trouble inferring, can I specify it explicitly without having to insert a tonne of placeholders to pad all the arguments that lean guesses correctly?</p>",
        "id": 202584439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593618093
    },
    {
        "content": "<p>Not in Lean 3 as far as I know, but there's hope that the syntax for this will be better in Lean 4.</p>",
        "id": 202584539,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593618138
    },
    {
        "content": "<p>You only have to pad the ones to the left of the one that Lean had trouble inferring.</p>",
        "id": 202584564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593618154
    },
    {
        "content": "<p>How do I deal with cases where lean wants a <code>ring R</code> but I have <code>comm_ring R</code>?</p>",
        "id": 202584613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593618190
    },
    {
        "content": "<p>But there are other workarounds. For example <code>haveI</code> or <code>letI</code> in tactic mode.</p>",
        "id": 202584615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593618191
    },
    {
        "content": "<p>If you have a comm_ring, Lean's type class inference system should have no trouble inferring the ring structure.</p>",
        "id": 202584640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593618209
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">G</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">graded_algebra_components</span><span class=\"bp\">.</span><span class=\"n\">zc</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202584654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593618221
    },
    {
        "content": "<p>I've had to pass the type class explicitly because I was attempting to bundle it</p>",
        "id": 202584721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593618244
    },
    {
        "content": "<p>That's not what I interpreted your question as meaning</p>",
        "id": 202584737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593618254
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 202584758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593618265
    },
    {
        "content": "<p>I'm taking about the first question in combination with the second one</p>",
        "id": 202584890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593618321
    },
    {
        "content": "<p>This is xy. You shouldn't be passing explicit proofs that something is a ring. The whole point of the type class inference system is to do this for you.</p>",
        "id": 202584994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593618345
    },
    {
        "content": "<p>This is \"what happens if I try what I asked in <a href=\"#narrow/stream/113489-new-members/topic/Bundled.20and.20unbundled/near/202583368\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Bundled.20and.20unbundled/near/202583368</a>\"</p>",
        "id": 202585186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593618380
    },
    {
        "content": "<p>The answer to the question you asked is to run that example above but instead give it a name and then #print it so you know what the function which eats a comm_ring and spits out a ring is called.</p>",
        "id": 202585187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593618381
    },
    {
        "content": "<p>But the real issue is that nobody should need to know the name of that function, so if you need to know it then there is something more fundamentally wrong</p>",
        "id": 202585254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593618416
    },
    {
        "content": "<p>Type class inference will fill in that field, and if it doesn't, then don't fill it in manually, but instead figure out why it didn't, and fix the actual problem</p>",
        "id": 202585303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593618447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Bundled.20and.20unbundled/near/202585186\">said</a>:</p>\n<blockquote>\n<p>This is \"what happens if I try what I asked in <a href=\"#narrow/stream/113489-new-members/topic/Bundled.20and.20unbundled/near/202583368\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Bundled.20and.20unbundled/near/202583368</a>\"</p>\n</blockquote>\n<p>There is a typo in what you posted (a random s) but assuming it's not supposed to be there then instead of the round brackets you should make them square brackets, and you might have to manually tag the structure projection with <code>@[instance]</code></p>",
        "id": 202585491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593618540
    },
    {
        "content": "<p>What I'm saying is that the infrastructure is there, I believe, to make the set-up work.</p>",
        "id": 202585537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593618562
    },
    {
        "content": "<p>The full repro is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">graded_algebra_components</span>\n  <span class=\"c1\">-- a type for each grade.</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n  <span class=\"c1\">-- (A 0) is the scalar type</span>\n  <span class=\"o\">[</span><span class=\"n\">zc</span><span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">)]</span>\n\n  <span class=\"c1\">-- all the types form commutative vector spaces</span>\n  <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)]</span>\n\n\n<span class=\"n\">class</span> <span class=\"n\">graded_algebra_hom</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">graded_algebra_components</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"k\">begin</span> <span class=\"n\">haveI</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">zc</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"kn\">end</span> <span class=\"bp\">_</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Your <code>apply_instance</code> and <code>haveI</code> tip was enough to get it to compile, thanks</p>",
        "id": 202585762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593618699
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">comm_ring&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">comm_ring&#39;</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">comm_ring&#39;</span><span class=\"bp\">.</span><span class=\"n\">r</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring&#39;</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 202585791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593618712
    },
    {
        "content": "<p>Oh nice</p>",
        "id": 202585847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593618724
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 202585852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593618727
    },
    {
        "content": "<p>Is there an inline syntax for that?</p>",
        "id": 202585933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593618767
    },
    {
        "content": "<p>That solves my problem perfectly</p>",
        "id": 202585969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593618784
    },
    {
        "content": "<p>I don't know an inline syntax -- you mean making <code>zc</code> (and b and c) an instance whilst defining <code>graded_algebra_components</code>? I don't know.</p>",
        "id": 202586742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593619060
    },
    {
        "content": "<p>Yeah, some kind of <code>@[instance]</code> marker</p>",
        "id": 202586768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593619074
    }
]