[
    {
        "content": "<p>Hi, I am a bit stuck proving the following lemma and was wondering if anyone has a clever idea how to solve it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">div_eq_rat_floor</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"err\">⌊</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"err\">⌋</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>I was able to show it in case <code>n</code> and <code>d</code> are coprime, so alternatively, proving the following lemma would also work </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">div_nat_int_eq_rat_num_denom_div</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">/</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 165607438,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1557826790
    },
    {
        "content": "<p>Perhaps this lemma in mathlib might be helpful?  </p>\n<div class=\"codehilite\"><pre><span></span>theorem div_eq_div_of_mul_eq_mul {a b c d : ℤ} (H1 : b ∣ a) (H2 : d ∣ c) (H3 : b ≠ 0)\n    (H4 : d ≠ 0) (H5 : a * d = b * c) :\n  a / b = c / d\n</pre></div>\n\n\n<p>maybe with<code>denom_dvd</code> and <code>num_dvd</code>?</p>",
        "id": 165608951,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1557828125
    },
    {
        "content": "<p>I don't know that <code>q.denom | n</code> for example. I think I sorted it out using <code>rat.num_denom_mk</code> now. I can post the code in a few mins :)</p>",
        "id": 165609125,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1557828341
    },
    {
        "content": "<p>How far are the CS people from being able to prove this sort of thing using an all-purpose tactic?</p>",
        "id": 165609550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557828766
    },
    {
        "content": "<p>this is a lemma not a tactic</p>",
        "id": 165609574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557828795
    },
    {
        "content": "<p>My not so short but I'd say rather comprehensible solution:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">div_nat_int_eq_div_rat_num_denom</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">d_zero</span> <span class=\"n\">d_not_zero</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">d_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">cases</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">n_zero</span> <span class=\"n\">n_not_zero</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">n_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">set</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">q_eq_rat_mk</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">d_not_zero</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">d_not_zero</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">d_not_zero</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_denom_mk</span> <span class=\"n\">n_not_zero</span> <span class=\"n\">this</span> <span class=\"n\">q_eq_rat_mk</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">n_eq_c_mul_num</span><span class=\"o\">,</span> <span class=\"n\">d_eq_c_mul_denom</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mul_div_mul_of_pos</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">‹</span><span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"err\">›</span><span class=\"o\">),</span> <span class=\"n\">n_eq_c_mul_num</span><span class=\"o\">,</span> <span class=\"n\">d_eq_c_mul_denom</span><span class=\"o\">],</span>\n    <span class=\"k\">show</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">zero_lt_q_denom_mul_c</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_iff_ne_zero</span> <span class=\"n\">at</span> <span class=\"n\">d_not_zero</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">d_eq_c_mul_denom</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">this</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">pos_of_mul_pos_left</span> <span class=\"n\">zero_lt_q_denom_mul_c</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">le_of_lt</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">div_eq_rat_floor</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"err\">⌊</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"err\">⌋</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">rat_n_d_eq</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">n&#39;</span> <span class=\"n\">d&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">n&#39;</span> <span class=\"bp\">/</span> <span class=\"n\">d&#39;</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">floor</span> <span class=\"n\">floor_ring</span><span class=\"bp\">.</span><span class=\"n\">floor</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">floor</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">div_nat_int_eq_div_rat_num_denom</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"n\">rat_n_d_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Happy to hear about other ways to do it.</p>",
        "id": 165616519,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1557836119
    }
]