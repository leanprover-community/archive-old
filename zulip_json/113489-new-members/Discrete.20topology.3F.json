[
    {
        "content": "<p>Where is the definition of the discrete topology on a type <code>α</code>? There is a definition of discrete topology predicate <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/order.html#discrete_topology\">here</a>. It defines it as being equal to the bottom element of some order. I am struggling to make sense of this definition and don't seem to find the definition of the bottom element itself (it is implicitly declared somewhere I believe).</p>",
        "id": 207043250,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597531619
    },
    {
        "content": "<p>You could look for <code>#check (by apply_instance : has_bot (topological_space A))</code></p>",
        "id": 207043308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597531700
    },
    {
        "content": "<p>It looks like it's coming from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.complete_lattice/src\">src#topological_space.complete_lattice</a>, in a bit of abstract nonsense</p>",
        "id": 207043385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597531807
    },
    {
        "content": "<p>In short, it reduces to <code>univ</code></p>",
        "id": 207043450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597531975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Discrete.20topology.3F/near/207043450\">said</a>:</p>\n<blockquote>\n<p>In short, it reduces to <code>univ</code></p>\n</blockquote>\n<p>What exactly do you mean it reduces to <code>univ</code>? I know that <code>is_open = univ</code> is this topology, but I don't see how that term can reduce to <code>univ</code>.</p>",
        "id": 207043598,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597532207
    },
    {
        "content": "<p>it's pretty involved. Where are you stuck?</p>",
        "id": 207043619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532273
    },
    {
        "content": "<p>I managed to complete the goal I was working on with a single <code>simp</code> and honestly I am not quite sure how it worked.</p>",
        "id": 207043621,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597532276
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">order</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">cofinite</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">is_open</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">\\</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_open_univ</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_open</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">diff_self</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_empty</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_open_inter</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"err\">∩</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">hs₁</span> <span class=\"bp\">|</span> <span class=\"n\">hs₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs₂</span> <span class=\"bp\">|</span> <span class=\"n\">hs₂</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">is_open</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">diff_inter</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">union</span> <span class=\"n\">hs₁</span> <span class=\"n\">hs₂</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs₁</span><span class=\"o\">,</span> <span class=\"n\">hs₂</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_open_sUnion</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"err\">⋃₀</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">is_open</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht₁</span><span class=\"o\">,</span> <span class=\"n\">ht₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ht₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">\\</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"n\">t</span> <span class=\"n\">ht₁</span> <span class=\"k\">with</span> <span class=\"n\">ht₃</span> <span class=\"n\">ht₃</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ht₃</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ht₂</span> <span class=\"n\">ht₃</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">subset</span> <span class=\"n\">ht₂</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"n\">t</span> <span class=\"n\">ht₁</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">is_open</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_iff_forall_not_mem</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">is_open</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_univ</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_inter</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_sUnion</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">discrete_topology</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- I have no idea what the following `simp` is doing.</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">is_open</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">of_fintype</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">cofinite</span>\n</code></pre></div>",
        "id": 207043660,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597532285
    },
    {
        "content": "<p>A bit long, the goal is the last <code>example</code>.</p>",
        "id": 207043663,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597532294
    },
    {
        "content": "<p>The <code>simp only</code> is smoke and mirrors, the proof is <code>trivial</code></p>",
        "id": 207043695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532397
    },
    {
        "content": "<p>It would be good to have a simp lemma that says <code>\\bot.is_open s</code> though</p>",
        "id": 207043765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597532456
    },
    {
        "content": "<p>Ah, of course!</p>",
        "id": 207043779,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597532476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Discrete.20topology.3F/near/207043765\">said</a>:</p>\n<blockquote>\n<p>It would be good to have a simp lemma that says <code>\\bot.is_open s</code> though</p>\n</blockquote>\n<p>Yes, that would be quite convenient.</p>",
        "id": 207043783,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597532490
    },
    {
        "content": "<p>Isn't it curious that <code>simp</code> doesn't close the trivial goal?</p>",
        "id": 207043838,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597532579
    },
    {
        "content": "<p>It's not an equality</p>",
        "id": 207043900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597532676
    },
    {
        "content": "<p><code>simp</code> doesn't unfold definitions, unless it is told to (by attributes or when you invoke it). So <code>simp</code> doesn't know the goal is trivial.</p>",
        "id": 207045541,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597535707
    },
    {
        "content": "<p>There are plenty of times when <code>simp</code> doesn't close a goal, but <code>refl</code> or <code>exact trivial</code> does (sometimes that means more things should be simp-lemmas)</p>",
        "id": 207045589,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597535779
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open_discrete\">docs#is_open_discrete</a></p>",
        "id": 207045691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597536019
    },
    {
        "content": "<p>The irony is that even though <code>simp</code> proves things by reducing them to <code>true</code>, <code>simp</code> will fail on the goal <code>true</code></p>",
        "id": 207046802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597538146
    }
]