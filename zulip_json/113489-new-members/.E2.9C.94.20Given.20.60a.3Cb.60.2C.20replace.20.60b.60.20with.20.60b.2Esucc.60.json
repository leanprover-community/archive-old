[
    {
        "content": "<p>Is there a tactic which can use a premise of the form <code>a &lt; b</code> to replace all occurrences of <code>b</code> with <code>b.succ</code> in the current proof state? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat.not_lt_zero</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">b</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>A tactic that is equivalent to <code>cases b, exfalso, exact nat.not_lt_zero _ h</code> ?</p>",
        "id": 262895927,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1638051587
    },
    {
        "content": "<p>this is probably the best way to state it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.pred.succ</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">succ_pred_eq_of_pos</span> <span class=\"o\">(</span><span class=\"n\">pos_of_gt</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It would be nice if we had some dot notation like <code>h.pos</code> here.</p>",
        "id": 262896420,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638052355
    },
    {
        "content": "<p>The term you could use for the obtain tactic would be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.exists_eq_add_of_lt\">docs#nat.exists_eq_add_of_lt</a></p>",
        "id": 262896430,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638052386
    },
    {
        "content": "<p>Patrick is asking for a <em>tactic</em> not a proof term. That would be an extremely specialized tactic, but you can use:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">parse</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean.parser</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">get_local</span> <span class=\"n\">infer_type</span> <span class=\"n\">cases</span> <span class=\"n\">exfalso</span> <span class=\"n\">exact</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.pj</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">):</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n   <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat.not_lt_zero</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">pj</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262896434,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638052424
    },
    {
        "content": "<p>Hopefully that could help you create a less specialized version (note this is all very much within reach after reading <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a>).</p>",
        "id": 262896480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638052468
    },
    {
        "content": "<p>That's exactly what I need. Thanks for the fast response!</p>",
        "id": 262896725,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1638052868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> has marked this topic as resolved.</p>",
        "id": 262896726,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638052872
    },
    {
        "content": "<p>A slightly more robust version would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">parse</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean.parser</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive.types</span> <span class=\"o\">(</span><span class=\"n\">texpr</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">get_local</span> <span class=\"n\">infer_type</span> <span class=\"n\">cases</span> <span class=\"n\">exfalso</span> <span class=\"n\">exact</span> <span class=\"n\">i_to_expr</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.pj</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">):</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.i_to_expr</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span> <span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat.not_lt_zero</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which accept any expression proving <code>a &lt; b</code> and not only the name of a local assumption.</p>",
        "id": 262896733,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638052888
    },
    {
        "content": "<p>Note that I used restricted <code>open</code> so that you can see where everything comes from, but there is no obstruction to using <code>open interactive lean.parser interactive.types tactic</code></p>",
        "id": 262896785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638052957
    },
    {
        "content": "<p>Are you asking because you want to know how to write tactics, or because you want to know how to do this concisely? I think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_add_of_lt</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Is the rough answer to the latter, as Yakov alludes to. In general, the \"replace all occurrences\" type operation can be done with <code>obtain</code> and a suitable lemma with an <code> ∃ x, _ = f x</code> conclusion.</p>",
        "id": 262898936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638056373
    },
    {
        "content": "<p>The <code>setup_tactic_parser</code>command is also useful instead of all those <code>open</code> statements.</p>",
        "id": 262913566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638082101
    },
    {
        "content": "<p>Indeed you should be able to use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">setup_tactic_parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>here</p>",
        "id": 262920011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638093325
    }
]