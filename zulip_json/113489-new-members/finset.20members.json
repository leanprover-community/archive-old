[
    {
        "content": "<p>Dear All,</p>\n<p>I am trying to prove either one of the two lemmas below, but Lean is not allowing me to.  I would like to <code>convert set.mem_union_right ↑s</code>, but I am not able to proceed from there.  As usual, I imagine that Lean is obtaining different sources for something and cannot reconcile them, but I am not able to figure out what.</p>\n<p>Thank you!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_in_union</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_union</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_in_union_singleton</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_union</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 210846287,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600766971
    },
    {
        "content": "<p>You shouldn't need <code>has_union</code>... Lean should figure it out by itself.</p>",
        "id": 210846388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600767027
    },
    {
        "content": "<p>That indeed adds a second (unrelated, out-of-the-blue) notion of union for <code>finset \\a</code></p>",
        "id": 210846431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600767057
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_in_union</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 210846541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600767124
    },
    {
        "content": "<p>I added <code>has_union</code> since Lean wanted it, but I will try to remove it again!</p>",
        "id": 210846611,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600767165
    },
    {
        "content": "<p>The <code>decidable_eq</code> enables the union instance. Without it, lean can't find it. (But then, if you <code>open_locale classical</code> everything works again)</p>",
        "id": 210846618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600767167
    },
    {
        "content": "<p>ah, I think that I added first <code>has_union</code>, prompted by Lean, and then added <code>decidable_eq</code> (again prompted by Lean)</p>",
        "id": 210846663,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600767208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> this is the \"eternal(?)\" conflict between proving and computing...</p>",
        "id": 210846669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600767213
    },
    {
        "content": "<p>I think, if you do maths, you should forget about the <code>decidable_eq</code> stuff, and just use <code>open_locale classical</code> at the top of your files.</p>",
        "id": 210846693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600767241
    },
    {
        "content": "<p>But sometimes <code>decidable_*</code> is really powerful.</p>",
        "id": 210846743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600767254
    },
    {
        "content": "<p>ok, I will do that!</p>",
        "id": 210846773,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600767281
    },
    {
        "content": "<p>E.g., if you want to know that squares mod 8 are equal to 0, 1, or 4, then <code>dec_trivial</code> will prove it for you.</p>",
        "id": 210846807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600767309
    },
    {
        "content": "<p>And that 1 line proof is of course a lot more convenient than whatever crazy case-split you would have to do otherwise.</p>",
        "id": 210846835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600767342
    },
    {
        "content": "<p>ok, indeed, with <code>open_locale classical</code> i do not need to add <code>decidable_eq</code>!!  Thank you very much!</p>",
        "id": 210846958,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600767405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> What <code>open_locale classical</code> does, is that it makes every proposition decidable, using LEM. Of course it is \"cheating\" and using an axiom, and Lean knows this. So you can't use it to decide the truth of you favourite conjecture afterwards. But at the same time, Lean also won't get hung up on the fact that it doesn't know how to decide whether <code>x \\in s</code> is true or not.</p>",
        "id": 210849104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600768577
    },
    {
        "content": "<p>I don't understand why you write \"cheating\". This has nothing to do with cheating.</p>",
        "id": 210853057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600771329
    },
    {
        "content": "<p>It is \"cheating\" in the sense that \"decidable\" no longer means what it usually means.</p>",
        "id": 210853148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600771379
    },
    {
        "content": "<p>This command simply gives up hope to get Lean to <em>compute</em> a number of things. That's all. You can still do reasoning, without cheating, but you cannot compute.</p>",
        "id": 210853151,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600771380
    },
    {
        "content": "<p>The command says \"don't try to use decidability\".</p>",
        "id": 210853204,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600771412
    },
    {
        "content": "<p>If someone tells you that the Riemann Hypothesis is decidable, usually that would mean that you can run an algorithm and it will spit out <code>true</code> or <code>false</code> in the end. But if you have <code>open_locale classical</code>, then everything is decidable, and no such algorithms need to exist.</p>",
        "id": 210853368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600771518
    },
    {
        "content": "<p>Well, there is an algorithm that spits out <code>true</code> if the Riemann hypothesis is true and <code>false</code> otherwise.  Just no one seems to know which one it is, at the moment!</p>",
        "id": 210859453,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600776013
    },
    {
        "content": "<p>Anyway, I think that I am getting an idea of what is going on here: thank you!</p>",
        "id": 210859480,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600776044
    }
]