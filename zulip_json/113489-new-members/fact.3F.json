[
    {
        "content": "<p>Dear All,</p>\n<p>I am trying to fix a now broken proof and I am stuck with proving the lemma below: how do I extract the fact from the <code>fact</code>?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">obvious</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231806088,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616681191
    },
    {
        "content": "<p><code>assumption</code> will work here, I suppose</p>",
        "id": 231806559,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616681358
    },
    {
        "content": "<p>I tried it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">assumption</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 231806630,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616681385
    },
    {
        "content": "<p>Or you can name the fact <code>[ h : fact ... ]</code></p>",
        "id": 231806652,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616681392
    },
    {
        "content": "<p>Hmmmm....</p>",
        "id": 231806797,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616681430
    },
    {
        "content": "<p><code>apply fact.out</code> seems to work</p>",
        "id": 231806850,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1616681448
    },
    {
        "content": "<p>This gives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">obvious</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"c1\">-- invalid type ascription, term has type</span>\n<span class=\"c1\">--   fact (nat.prime p)</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   nat.prime p</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231806879,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616681458
    },
    {
        "content": "<p>Oh did fact change?</p>",
        "id": 231806898,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616681465
    },
    {
        "content": "<p>Ruben, thanks!  Your approach works!</p>",
        "id": 231806972,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616681495
    },
    {
        "content": "<p>Also <code>apply fact.elim, assumption</code> or <code>apply fact.elim, apply_instance</code>. Not sure what's the intended approach</p>",
        "id": 231807401,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1616681620
    },
    {
        "content": "<p>For the record, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">obvious</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">fact.out</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and also </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">obvious</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">fact.elim</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Thanks Ruben!</p>",
        "id": 231807542,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616681650
    },
    {
        "content": "<p>Yes, fact changed</p>",
        "id": 231810377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616682500
    },
    {
        "content": "<p>Because <code>@[class] def</code> isn't allowed by one of mathport and lean4</p>",
        "id": 231810453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616682529
    },
    {
        "content": "<p>You can also use <code>h.1</code></p>",
        "id": 231837432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616691386
    },
    {
        "content": "<p>Thanks, Mario!  I was convinced that I had tried to project, but... apparently not!</p>",
        "id": 231841789,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616692920
    },
    {
        "content": "<p>How can I do the opposite? Get a fact from a hypothesis. For example, I have <code>h : nat.prime p</code>.  How do I use that in a theorem like zmod.exists_pow_two_eq_neg_one_iff_mod_four_ne_three?</p>",
        "id": 232841708,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617321397
    },
    {
        "content": "<p>In tactic mode you should be able to do <code>haveI := fact.mk h</code> (untested)</p>",
        "id": 232842102,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1617321684
    },
    {
        "content": "<p>wow, thanks! yeah that works</p>",
        "id": 232842713,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617322120
    },
    {
        "content": "<p>If <code>fact foo</code> is your goal, then you can also write <code>\\&lt;h\\&gt;</code>, where <code>\\&lt;</code> and <code>\\&gt;</code> are the things you type into VScode to get the funny angle brackets.</p>",
        "id": 232859726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617338590
    }
]