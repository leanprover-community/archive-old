[
    {
        "content": "<p>I'm trying to prove that if <code>{v1, v2, v3, v4}</code> spans <code>V</code>, then <code>{v1 - v2, v2 - v3, v3 - v4, v4}</code> also spans <code>V</code>. On pen and paper, this is easy to prove because you can form  <code>{v1, v2, v3, v4}</code> from a simple linear combination of <code>{v1 - v2, v2 - v3, v3 - v4, v4}</code> and vice-versa. I see there's a theorem <code>submodule.span_eq_span</code> which seems like it should be able to prove this if I can prove that each set of vectors is in the span of the other set of vectors. I can't figure out how to express the idea of a linear combination in Lean, or even where to look to figure out how to express this, or what a theorem that deals with this would be called, or really where to begin. I know this is probably really trivial, but any help is greatly appreciated!</p>",
        "id": 290563257,
        "sender_full_name": "David Chanin",
        "timestamp": 1658521751
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span_eq_span\">docs#submodule.span_eq_span</a> for reference)</p>",
        "id": 290563522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658521900
    },
    {
        "content": "<p>So far I just have the following in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hb1</span><span class=\"o\">:</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">hb2</span><span class=\"o\">:</span> <span class=\"n\">b2</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">})</span>\n<span class=\"o\">:</span>\n  <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"n\">b2</span>\n<span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290563644,
        "sender_full_name": "David Chanin",
        "timestamp": 1658521972
    },
    {
        "content": "<p>I would guess that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span_insert\">docs#submodule.span_insert</a> is useful here</p>",
        "id": 290563696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658522025
    },
    {
        "content": "<p>That's saying that the span of adding a vector to a set of vectors is equal to the span of the vector union the span of the set of vectors?</p>",
        "id": 290564012,
        "sender_full_name": "David Chanin",
        "timestamp": 1658522197
    },
    {
        "content": "<p>I'm trying to go through a linear algebra textbook to see if I can do some of the proofs in the book in Lean, and the book has the following definition of span, which I assume must be in mathlib somewhere if I were less incompetent at understanding how this stuff works <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <a href=\"/user_uploads/3121/U2uv906_fpEYzgnVJ8BMU5Co/Screen-Shot-2022-07-22-at-21.39.41.png\">Screen-Shot-2022-07-22-at-21.39.41.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/U2uv906_fpEYzgnVJ8BMU5Co/Screen-Shot-2022-07-22-at-21.39.41.png\" title=\"Screen-Shot-2022-07-22-at-21.39.41.png\"><img src=\"/user_uploads/3121/U2uv906_fpEYzgnVJ8BMU5Co/Screen-Shot-2022-07-22-at-21.39.41.png\"></a></div>",
        "id": 290564424,
        "sender_full_name": "David Chanin",
        "timestamp": 1658522478
    },
    {
        "content": "<p>I think if I could find something like this it would be trivial to do this proof</p>",
        "id": 290564545,
        "sender_full_name": "David Chanin",
        "timestamp": 1658522549
    },
    {
        "content": "<p>I feel like <span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span> asked a very similar question a couple of months ago, which book are you looking at?</p>",
        "id": 290571378,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1658526781
    },
    {
        "content": "<p>A full proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">span_insert_sub</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">v</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">-</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">span_eq_span</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">span_insert</span><span class=\"o\">,</span> <span class=\"n\">set_like.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_sup</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">subset_span</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">subset_span</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">sub_add_cancel</span> <span class=\"n\">x</span> <span class=\"n\">w</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subset_span</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">span_insert</span><span class=\"o\">,</span> <span class=\"n\">set_like.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_sup</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">subset_span</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">neg_mem</span> <span class=\"o\">(</span><span class=\"n\">subset_span</span> <span class=\"n\">hw</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">sub_eq_add_neg</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subset_span</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">{</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">({</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">span_insert_sub</span> <span class=\"n\">_</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">span_insert</span> <span class=\"o\">},</span> <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">span_insert</span> <span class=\"o\">},</span> <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">span_insert_sub</span> <span class=\"n\">_</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">span_insert</span> <span class=\"o\">},</span> <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">span_insert</span> <span class=\"o\">},</span> <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">span_insert_sub</span> <span class=\"n\">_</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290571617,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658526959
    },
    {
        "content": "<p>That looks like it hits the lemmas I had in mind and is probably shorter than what I would have come up with; but it still feels very clumsy</p>",
        "id": 290572214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658527304
    },
    {
        "content": "<p>I'm going through Linear Algebra Done Right. I see his solutions here as well, which is super helpful too! <a href=\"https://github.com/Vilin97/linear-algebra-done-right/blob/master/src/chapter2.lean\">https://github.com/Vilin97/linear-algebra-done-right/blob/master/src/chapter2.lean</a>. It looks like he broke down everything into constituent base definitions and tried to prove things from there, but only did a 2-d version due to how complex that is. But I feel like there must be a way to use the theorems in Mathlib to prove this without</p>",
        "id": 290572437,
        "sender_full_name": "David Chanin",
        "timestamp": 1658527412
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.mem_span_iff_total\">docs#finsupp.mem_span_iff_total</a> help at all?</p>",
        "id": 290572443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658527415
    },
    {
        "content": "<p>Yes, I think <code>ext x, simp_rw [finsupp.mem_span_iff_total]</code> gets it in an almost familiar form</p>",
        "id": 290572698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658527552
    },
    {
        "content": "<p>Or maybe using that lemma after <code>apply span_eq_span; intros x hx</code></p>",
        "id": 290572866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658527640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/struggling.20with.20proving.20span.20of.20linear.20combinations/near/290571617\">said</a>:</p>\n<blockquote>\n<p>A full proof:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">span_insert_sub</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">v</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">-</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">span_eq_span</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">span_insert</span><span class=\"o\">,</span> <span class=\"n\">set_like.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_sup</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">subset_span</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">subset_span</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">sub_add_cancel</span> <span class=\"n\">x</span> <span class=\"n\">w</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subset_span</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">span_insert</span><span class=\"o\">,</span> <span class=\"n\">set_like.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_sup</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">subset_span</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">neg_mem</span> <span class=\"o\">(</span><span class=\"n\">subset_span</span> <span class=\"n\">hw</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">sub_eq_add_neg</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subset_span</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">{</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">({</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">span_insert_sub</span> <span class=\"n\">_</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">span_insert</span> <span class=\"o\">},</span> <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">span_insert</span> <span class=\"o\">},</span> <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">span_insert_sub</span> <span class=\"n\">_</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">span_insert</span> <span class=\"o\">},</span> <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">span_insert</span> <span class=\"o\">},</span> <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">span_insert_sub</span> <span class=\"n\">_</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Wow this is amazing, thank you for writing this out <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> ! This will take me a bit to study to understand fully</p>",
        "id": 290572876,
        "sender_full_name": "David Chanin",
        "timestamp": 1658527645
    },
    {
        "content": "<p>There's a certain amount of defeq (ab)use, but it's mainly that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_insert\">docs#set.has_insert</a> is a disjunction, and <code>{v1, v2, v3, v4} := insert v1 {v2, v3, v4}</code>, and A ⊆ B is definitionally ∀ {x}, x ∈ A → x ∈ B in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.subset_span\">docs#submodule.subset_span</a>.</p>",
        "id": 290573163,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658527816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/struggling.20with.20proving.20span.20of.20linear.20combinations/near/290572443\">said</a>:</p>\n<blockquote>\n<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.mem_span_iff_total\">docs#finsupp.mem_span_iff_total</a> help at all?</p>\n</blockquote>\n<p>This looks like it might be close to what's in the book. So this is saying something about linear combinations spanning things it looks like? There's a bunch of terms in here I'm not familiar with, but I'll see if I can find examples of how to use this theorem on Github projects</p>",
        "id": 290574119,
        "sender_full_name": "David Chanin",
        "timestamp": 1658528459
    },
    {
        "content": "<p>I can make some progress with that approach, but I don't know offhand how to clean up the goals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">{</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">({</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">span_eq_span</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">set_like.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">finsupp.mem_span_iff_total</span><span class=\"o\">,</span>\n      <span class=\"n\">finsupp.total_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp.sum</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"bp\">;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290574619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658528922
    },
    {
        "content": "<p>This gives you 8 goals, one for each vector in each direction</p>",
        "id": 290574642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658528948
    },
    {
        "content": "<p>I was hoping something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">],</span>\n  <span class=\"k\">let</span> <span class=\"n\">U'</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">],</span>\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">],</span>\n    <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">],</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pi.add_apply</span><span class=\"o\">,</span> <span class=\"n\">add_sub_add_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_sub</span><span class=\"o\">],</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">set.range</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.mem_range</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hU'</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">set.range</span> <span class=\"n\">U'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.mem_range</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hUU'</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>would lead to a clear solution, but either some machinery is missing or I need to sleep</p>",
        "id": 290575731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658529925
    },
    {
        "content": "<p>Can you post a link to your repo so far if you do use GitHub? I would be curious to compare</p>",
        "id": 290589248,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1658545914
    },
    {
        "content": "<p>This has depressingly been the first problem I've tried, thinking it should be really easy, and had to ask for help on here immediately <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>. I'll see if I can solve some other problems too, but given I couldn't even get this simple proof to work in Lean I'm not too hopeful I'll have any luck with any others. I did the natural number game, but proving  anything beyond that  in Lean might be too hard for me it seems</p>",
        "id": 290636439,
        "sender_full_name": "David Chanin",
        "timestamp": 1658614606
    },
    {
        "content": "<p>I think problems like this that are example like are generally harder than more abstract / less specific questions. In informal math we are pretty good at seeing what happens when only 4 objects are involved, and they are permuted or something like that intuitively. But actually spelling out the details results in a lot more work. So I'd say don't be discouraged by this problem, it could just be something that we need better tooling to match human intuition.</p>",
        "id": 290636536,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1658614801
    },
    {
        "content": "<p>I mean, for all the lean experts on here you're able to figure this stuff out pretty easily, so that gives me confidence that it's at least possible. I guess I just hit walls and don't really have any idea how to proceed at a pretty immediate level. Even looking at the mathlib docs just makes my head spin. Maybe I need to go through more tutorials or something before this starts to make sense.</p>",
        "id": 290636739,
        "sender_full_name": "David Chanin",
        "timestamp": 1658615109
    },
    {
        "content": "<p>That's true to some extent of course, but I remember trying this problem last time it came up in the chat and finding it really annoying, and way longer in lean than in my head, which naturally means it takes a long time to find the right incantations if you don't know them</p>",
        "id": 290667578,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1658662083
    },
    {
        "content": "<p>But yes the tutorials and other materials on the leanprover-community site are definitely a good idea I think</p>",
        "id": 290667602,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1658662159
    },
    {
        "content": "<p>I tried proving a simpler version of this, just the simple <code> v1 ∈ span k ({v1 - v2, v2 - v3, v3 - v4, v4}: set V)</code>, but even this I can't get to work <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span>. My idea is to use the matrix <code>![![1,1,1,1]]</code>, and turn it into a linear map with <code>matrix.to_lin</code>, so then I can apply <code>finsupp.mem_span_iff_total</code> with this linear map to show that the result is <code>v1</code>. However, I can't get the <code>matrix.to_lin</code> stuff to work. The code below gives the error <code>invalid field notation, type is not of the form (C ...) where C is a constant</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n    <span class=\"n\">v1</span> <span class=\"bp\">∈</span> <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">({</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">matrix_map</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]],</span>\n    <span class=\"k\">let</span> <span class=\"n\">linear_map</span> <span class=\"o\">:=</span> <span class=\"n\">matrix_map.to_lin</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>I tried changing to the following syntax to explicitly state what the matrix type is and it doesn't work either, giving the error <code>invalid field notation, 'to_lin' is not a valid \"field\" because environment does not contain 'matrix.to_lin'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n    <span class=\"n\">v1</span> <span class=\"bp\">∈</span> <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">({</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">matrix_map</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]],</span>\n    <span class=\"k\">let</span> <span class=\"n\">linear_map</span> <span class=\"o\">:=</span> <span class=\"n\">matrix_map.to_lin</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finsupp.mem_span_iff_total</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>What am I overlooking?</p>",
        "id": 290686754,
        "sender_full_name": "David Chanin",
        "timestamp": 1658677727
    },
    {
        "content": "<p>That's essentially the approach I was trying to do <a href=\"#narrow/stream/113489-new-members/topic/struggling.20with.20proving.20span.20of.20linear.20combinations/near/290575731\">above</a>, but I couldn't work out how to use the fact that I had a map between the vectors</p>",
        "id": 290689090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658680792
    },
    {
        "content": "<p>I'll second Alex's point that this is a surprisingly hard problem in lean; suggesting that we're missing either some lemmas, or documentation to create awareness of them</p>",
        "id": 290689143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658680861
    },
    {
        "content": "<p>Here's some general advice: it's sometimes easier to prove things in general than it is to prove specific cases</p>",
        "id": 290690629,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658682976
    },
    {
        "content": "<p>So maybe we could prove that <code>span {v1, v2, ..., vn} = span {v1 - v2, v2 - v3, ..., v(n-1) - vn, vn}</code> for all <code>n</code>? Seems like induction might help.</p>",
        "id": 290690647,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658683008
    },
    {
        "content": "<p>The Lean spelling of this result probably involves <code>finset</code>s and <code>finset.image</code>.</p>",
        "id": 290690664,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658683052
    },
    {
        "content": "<p>Or maybe even <code>list</code>s</p>",
        "id": 290690740,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658683155
    },
    {
        "content": "<p>Do we have any API for turning <code>[a, b, c]</code> into <code>[op a b, op b c]</code> and such?</p>",
        "id": 290690751,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658683178
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/struggling.20with.20proving.20span.20of.20linear.20combinations/near/290571617\">My proof</a> is sort of proof by induction; it uses the same lemma three times.</p>\n<p>But it seems what people want is a proof by providing explicit coefficients + calculation. Maybe this proof will satisfy them?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v1</span> <span class=\"bp\">∈</span> <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">({</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_span_insert</span><span class=\"o\">,</span> <span class=\"n\">mem_sup</span><span class=\"o\">],</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">subset_span</span> <span class=\"n\">rfl</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290691124,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658683689
    },
    {
        "content": "<p>I think the following approach is maybe close to what people had in mind:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.fin</span>\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_span_iff_eq_sum_smul</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v1</span> <span class=\"bp\">∈</span> <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">({</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_span_iff_eq_sum_smul</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v1</span><span class=\"bp\">-</span><span class=\"n\">v2</span><span class=\"o\">,</span><span class=\"n\">v2</span><span class=\"bp\">-</span><span class=\"n\">v3</span><span class=\"o\">,</span><span class=\"n\">v3</span><span class=\"bp\">-</span><span class=\"n\">v4</span><span class=\"o\">,</span><span class=\"n\">v4</span><span class=\"o\">]],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The lemma might follow relatively easily from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.mem_span_image_iff_total\">docs#finsupp.mem_span_image_iff_total</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.equiv_fun_on_fintype\">docs#finsupp.equiv_fun_on_fintype</a>. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.mem_span_iff_total\">docs#finsupp.mem_span_iff_total</a> isn't very applicable because <code>{v1 - v2, v2 - v3, v3 - v4, v4}</code> isn't necessarily pairwise distinct.</p>",
        "id": 290692667,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658686082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/struggling.20with.20proving.20span.20of.20linear.20combinations/near/290691124\">said</a>:</p>\n<blockquote>\n<p><a href=\"#narrow/stream/113489-new-members/topic/struggling.20with.20proving.20span.20of.20linear.20combinations/near/290571617\">My proof</a> is sort of proof by induction; it uses the same lemma three times.</p>\n<p>But it seems what people want is a proof by providing explicit coefficients + calculation. Maybe this proof will satisfy them?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v1</span> <span class=\"bp\">∈</span> <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">({</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_span_insert</span><span class=\"o\">,</span> <span class=\"n\">mem_sup</span><span class=\"o\">],</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">subset_span</span> <span class=\"n\">rfl</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is brilliant! I was able to understand this even with my poor understanding of math and lean, and was able to write a version in dumbed-down syntax too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"n\">v4</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">v1</span> <span class=\"bp\">∈</span> <span class=\"n\">span</span> <span class=\"n\">k</span> <span class=\"o\">({</span><span class=\"n\">v1</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">v3</span> <span class=\"bp\">-</span> <span class=\"n\">v4</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_span_insert</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_span_insert</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v3</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_span_insert</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v4</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mem_span_singleton_self</span> <span class=\"n\">v4</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>This makes me feel like it's maybe possible for me to use Lean to prove things in beginner textbooks. Although there's still no way I would have come up with this on my own</p>",
        "id": 290697192,
        "sender_full_name": "David Chanin",
        "timestamp": 1658692884
    },
    {
        "content": "<p>This is a great discussion! I felt and still feel the same way as you, David! Lean is hard, often in unexpected ways</p>",
        "id": 291218065,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1659025847
    },
    {
        "content": "<p>We have all gone through this. First there's the \"I know exactly what to do in math but have no idea how to do it in Lean\" phase, then there's the \"I know exactly what to do in math and I can do it in Lean but it takes 20 lines to do a trivial thing\" phase, and then there's the \"I know exactly what to do in math and I just explain it to Lean and most of the time it understands me\" phase. In my experience one way of moving through the phases is to keep formalising mathematics you understand and then ask here if you're stuck or if you know that your code is far too long. Beyond some point,  when there's stuff that you still can't do easily, it might turn out that this is an interesting question, maybe an interesting area of research, because you might be trying to do something which the theorem prover community still hasn't manage to make smooth yet.</p>",
        "id": 291227103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659029899
    },
    {
        "content": "<p>A similar question: how can I prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292358591,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1659931489
    },
    {
        "content": "<p><code>rw H</code>, then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum_mem\">docs#sum_mem</a>, then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.subset_span\">docs#submodule.subset_span</a></p>",
        "id": 292366222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659941577
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">submodule.sum_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">i</span> <span class=\"bp\">-</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">submodule.smul_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">submodule.subset_span</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set.mem_range_self</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292366352,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659941732
    },
    {
        "content": "<p>Its an iff too</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">coeff</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">↔</span>\n  <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">set.image_univ</span><span class=\"o\">,</span> <span class=\"n\">finsupp.mem_span_image_iff_total</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finsupp.supported_univ</span><span class=\"o\">,</span> <span class=\"n\">submodule.mem_top</span><span class=\"o\">,</span> <span class=\"n\">exists_true_left</span><span class=\"o\">],</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">finsupp.equiv_fun_on_fintype.exists_congr_left</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp.total_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp.sum_fintype</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finsupp.equiv_fun_on_fintype_symm_apply_to_fun</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">implies_true_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292367958,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659943088
    },
    {
        "content": "<p>I needed a version of this for the span of a set yesterday. Do we have it? Anything of the form \"you're in the <code>submodule.span</code> of a set/indexed family iff you're a finite linear combination of the elements\" would be lovely.</p>",
        "id": 292375257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659948437
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.mem_span_iff_total\">docs#finsupp.mem_span_iff_total</a> is hopefully the right thing</p>",
        "id": 292376653,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659949359
    }
]