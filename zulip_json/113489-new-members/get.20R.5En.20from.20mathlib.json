[
    {
        "content": "<p>Hello Lean-Prover Community,</p>\n<p>I'm very new to Lean. I've completed Kevin Buzzard's Natural Number Game, and the tutorial project exercise files. I'm in the process of reading Theorem Proving in Lean.</p>\n<p>As a hands-on learning exercise, I'd like to try formalizing some theorems from a textbook I have; it covers basic real analysis and linear algebra. I want to work at the same level of generality as the book, taking from mathlib anything that the book assumes.</p>\n<p>I quickly run up against a roadblock. How does one import/construct a definition for R^n from mathlib?</p>\n<p>(side note, are there any beginner resources doing similar formalizations that I might learn from?)</p>",
        "id": 308907343,
        "sender_full_name": "Mitchell  Douglass",
        "timestamp": 1668045999
    },
    {
        "content": "<p>The standard approach is to use <code>fin n \\-&gt; \\R</code> (sorry for the lack of unicode... I'm writing this on mobile). With the right imports (some sufficiently deep file from <code>linear_algebra</code> would suffice), this would obtain a structure of a vector space over the reals</p>",
        "id": 308908424,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668046975
    },
    {
        "content": "<p>Following along b/c I have a similar goal -- would like to do linear algebra done right, and import only the minimum from <code>mathlib</code> -- if there's material for how get the minimums from <code>mathlib</code> without all the proofs that one wants to reconstruct.</p>",
        "id": 308908466,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668047028
    },
    {
        "content": "<p>Another useful thing to look at is mathlib's matrix notation, found here <a href=\"https://tqft.net/mathlib/data/matrix/notation\">file#data/matrix/notation</a></p>",
        "id": 308908477,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668047037
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> for the response!</p>\n<p>My understanding of <code>fin n /to \\R</code> is a function type from <code>fin n</code> to <code>\\R</code>, but I have not seen <code>fin</code>. Is it some kind of index type? Where can I learn more?</p>",
        "id": 308909430,
        "sender_full_name": "Mitchell  Douglass",
        "timestamp": 1668047765
    },
    {
        "content": "<p><code>fin n</code> is a type with <code>n</code> elements. So functions from <code>fin n</code> to <code>R</code> can be thought of as n-tuples of real numbers.</p>",
        "id": 308909559,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668047894
    },
    {
        "content": "<p>I think <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> covers this?</p>",
        "id": 308909615,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668047941
    },
    {
        "content": "<p>Maybe not.</p>",
        "id": 308909662,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668047971
    },
    {
        "content": "<p>I found <a href=\"https://leanprover-community.github.io/mathlib_docs/data/fin/vec_notation.html\">https://leanprover-community.github.io/mathlib_docs/data/fin/vec_notation.html</a> (sorry, no idea what magic embeds doc links)</p>",
        "id": 308910454,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668048550
    },
    {
        "content": "<p>That notation works for concrete numerals like elements of <code>fin 4 -&gt; \\R</code>.</p>",
        "id": 308935694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668067043
    },
    {
        "content": "<p>Mathematicians would write the type <code>fin n -&gt; \\R</code> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">H</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">}</mo><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Hom}(\\{0,1,\\ldots,n-1\\},\\R).</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Hom</span></span><span class=\"mopen\">({</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span><span class=\"mord\">.</span></span></span></span></p>",
        "id": 308935907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668067168
    },
    {
        "content": "<p>That's our \"model\" in mathlib for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\R^n.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\">.</span></span></span></span></p>",
        "id": 308936032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668067224
    },
    {
        "content": "<p>As an observation, there's a trend where one tries to do undergraduate math using <code>mathlib</code> but one ends up doing category theory</p>",
        "id": 309012437,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668093962
    },
    {
        "content": "<p>The arrow is not the category theory arrow, it's the function arrow. So it's not category theory yet.</p>",
        "id": 309026997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668097890
    },
    {
        "content": "<p>This has nothing to do with category theory! This is the usual definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>. People often lie to themselves and pretend <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is an iterated product of individual copies of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> but they don't mean it. An element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\R^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> doesn't look like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">((x, y), z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span>, it looks like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_0, x_1,  x_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> which is exactly description of a map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0, 1, 2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">}</span></span></span></span>, aka <code>fin 3</code>, to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>.</p>",
        "id": 309029122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668098571
    },
    {
        "content": "<p>I only wrote the Hom thing to explain another way of thinking about the function type.</p>",
        "id": 309031776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668099351
    },
    {
        "content": "<p>I was jokingly referring to the homomorphism.</p>\n<p>But it's true, though. The documentation for linear algebra \"basic\" states that \"This file defines the basics of linear algebra. It sets up the \"categorical/lattice structure\" of modules over a ring, submodules, and linear maps\" and the underlying definition of a vector space is in terms of <code>module</code> where the documentation is \"A module is a generalization of vector spaces to a scalar semiring. It consists of a scalar semiring R and an additive monoid of \"vectors\" M, connected by a \"scalar multiplication\" operation r • x : M (where r : R and x : M) with some natural associativity and distributivity axioms similar to those on a ring.\"</p>\n<p>This isn't quite at the \"a monad is a monoid in the category of endofunctors\" level, but it's close.</p>\n<p>A reasonably rigorous undergraduate linear algebra text like Axler starts with an \"ordered list of length n\" (which does conform to <code>fin n</code>) and the basic axioms of a vector space.</p>",
        "id": 309037018,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668100892
    },
    {
        "content": "<p>I wonder whether it's better to discard all that and start with <code>set</code> and define closed addition and scalar multiplication?</p>",
        "id": 309038000,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668101148
    },
    {
        "content": "<p>Linear algebra is not linear algebra without linear maps. I suppose that's what the word \"category\" is referring to in the quote you mentioned.</p>",
        "id": 309040737,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668101930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20R.5En.20from.20mathlib/near/309038000\">said</a>:</p>\n<blockquote>\n<p>I wonder whether it's better to discard all that and start with <code>set</code> and define closed addition and scalar multiplication?</p>\n</blockquote>\n<p>I predict this will be an immense pain.</p>",
        "id": 309043564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668102732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20R.5En.20from.20mathlib/near/309043564\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20R.5En.20from.20mathlib/near/309038000\">said</a>:</p>\n<blockquote>\n<p>I wonder whether it's better to discard all that and start with <code>set</code> and define closed addition and scalar multiplication?</p>\n</blockquote>\n<p>I predict this will be an immense pain.</p>\n</blockquote>\n<p>Probably. I guess I'm asking (from those who have taught or learned theorem proving in undergraduate math) what the the best way to use <code>mathlab</code> without pulling too much in, where the point is to re-derive and prove the same things that <code>mathlib</code> has already proved.</p>",
        "id": 309045879,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668103339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20R.5En.20from.20mathlib/near/309038000\">said</a>:</p>\n<blockquote>\n<p>I wonder whether it's better to discard all that and start with <code>set</code> and define closed addition and scalar multiplication?</p>\n</blockquote>\n<p>Perhaps you already know this, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule\">docs#submodule</a> does exactly that</p>",
        "id": 309065363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668109449
    },
    {
        "content": "<p>But sets aren't the building blocks of Lean, <code>Type</code>s are; so you rarely start with sets, instead starting with <code>Type</code>s and later specializing to <code>set</code>s.</p>",
        "id": 309065493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668109513
    },
    {
        "content": "<p>No, I didn't know that <code>submodule</code> automatizes linear spaces... Mm, so I could start with <a class=\"stream-topic\" data-stream-id=\"288720\" href=\"/#narrow/stream/288720-mathlib-documentation/topic/submodule\">#mathlib documentation &gt; submodule</a>  and then do my own proofs from there &amp; pick up more of <code>mathlib</code> as I've already covered it?</p>\n<p>I love <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s work on NNG (and I've now redone Complex NG in standard Lean3), and want to recreate that for reasonably undergraduately values of abstract linear algebra.</p>",
        "id": 309068699,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668110567
    },
    {
        "content": "<p>Reviving this topic ...</p>\n<p>I have come across a hurdle in my quest to formalize some undergraduate math.</p>\n<p>I am trying to define the standard basis vectors for R^n. Minimally, I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">decidable.em</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"n\">j</span><span class=\"o\">),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">heq</span> <span class=\"n\">hneq</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It's this final <code>cases</code> that gives an error: \"induction tactic failed, recursor 'or.dcases_on' can only eliminate into Prop\". As I understand it, the issue lies in fact of trying to construct a non-Prop value from a Prod inductive type (or). I believe the relevant text is found in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#axiomatic-details\">7.8 Axiomatic Details (TPL)</a>, where it states \"Generally speaking, for an inductive type in Prop, the motive of the elimination rule is required to be in Prop.\" Please correct me if I'm mistaken.</p>\n<p>I guess my question is, what's my alternative? How can I define the standard basis vectors as I've set up above?</p>",
        "id": 312766706,
        "sender_full_name": "Mitchell  Douglass",
        "timestamp": 1669697400
    },
    {
        "content": "<p>In general it might not be a good idea to construct data in tactic mode.<br>\nIn this case you can do <code>refine if (h : i = j) then _ else _</code>.</p>",
        "id": 312766906,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669697525
    },
    {
        "content": "<p>I see, thanks Andrew. Is your suggestion of  <code>refine if (h : i = j) then _ else _</code> for tactic mode or term mode?</p>",
        "id": 312767486,
        "sender_full_name": "Mitchell  Douglass",
        "timestamp": 1669698080
    },
    {
        "content": "<p>That is in tactic mode.  <code>refine</code> is a tactic.</p>",
        "id": 312768180,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669698598
    },
    {
        "content": "<p>To elaborate further, tactic modes are generally designed for proofs, so the terms they produce might not be easy to manipulate. The most basic tactics (<code>intro</code>, <code>refine</code>, <code>apply</code>, <code>exact</code>) might be fine, some might be okay if you know what you are doing (<code>dsimp</code>, <code>change</code>, <code>cases</code>, ...), but other tactics will probably give unreadable and unusable terms.</p>",
        "id": 312768298,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669698651
    },
    {
        "content": "<p>Thanks for the elaboration! Do you mind showing me how you would write this in term mode? Here is my try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">or.rec_on</span> <span class=\"o\">(</span><span class=\"n\">decidable.em</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I get a new error \"\"eliminator\" elaborator failed to compute the motive\", but I suspect it's the same issue.</p>\n<p>Can you explain for me how we are getting around this issue of recursing on \"or\" (inductively defined Prop) and producing data (a real number) ?</p>",
        "id": 312768583,
        "sender_full_name": "Mitchell  Douglass",
        "timestamp": 1669698868
    },
    {
        "content": "<p>Btw, I am trying not to use classical until I need to</p>",
        "id": 312768656,
        "sender_full_name": "Mitchell  Douglass",
        "timestamp": 1669698907
    },
    {
        "content": "<p><code>if i = j then 1 else 0</code>. I believe this doesn't use classical but I might be wrong.</p>",
        "id": 312768833,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669698981
    },
    {
        "content": "<p>Aha! I found <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html?highlight=else#decidable-propositions\">10.4 Decidable Propositions (TPL)</a> which talks exactly about this if-then-else requiring decidable props. Wonderful!</p>",
        "id": 312769074,
        "sender_full_name": "Mitchell  Douglass",
        "timestamp": 1669699153
    },
    {
        "content": "<p>You might also want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.single\">docs#pi.single</a></p>",
        "id": 312786459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669709272
    },
    {
        "content": "<p>Try <code>by_cases i = j,</code> as an alternative to <code>have H: i = j ∨ ¬i = j, from decidable.em (i=j)</code>.</p>",
        "id": 312837442,
        "sender_full_name": "King Crawford",
        "timestamp": 1669727005
    }
]