[
    {
        "content": "<p>I am trying to define a linear isometry from a submodule of euclidean_space, but I run into an error.  How should  I read/debug?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→ₗᵢ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"c1\">-- errors</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">failed to synthesize type class instance for</span>\n<span class=\"sd\">𝕜 : Type u_1,</span>\n<span class=\"sd\">_inst_1 : is_R_or_C 𝕜,</span>\n<span class=\"sd\">n : ℕ,</span>\n<span class=\"sd\">S : submodule 𝕜 (euclidean_space 𝕜 (fin n))</span>\n<span class=\"sd\">⊢ module 𝕜 (euclidean_space 𝕜 (fin n))</span>\n<span class=\"sd\">--/</span>\n</code></pre></div>",
        "id": 269964302,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1643584914
    },
    {
        "content": "<p>I can explicitly include the line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))]</span>\n</code></pre></div>\n<p>before I define the variable <code>S</code>, which resolves the error.  Is this the right fix?  I thought <code>euclidean_space</code> was already understood to be a module, and so I worry that this is messing with how it will be processed later on.</p>",
        "id": 269964662,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1643585389
    },
    {
        "content": "<p>I agree that the \"fix\" you suggest isn't a good idea.</p>",
        "id": 269964975,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643585770
    },
    {
        "content": "<p>The error is very confusing, do you really get this error with <code>ℂ</code> with the code you posted? In the online web editor I get an error about needing <code>module 𝕜 (euclidean_space 𝕜 (fin n))</code>, which makes somewhat more sense.</p>",
        "id": 269964987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643585804
    },
    {
        "content": "<p>I think the instance might really not exist.</p>",
        "id": 269964992,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643585816
    },
    {
        "content": "<p>Sorry, I agree the previous error was confusing and from a different typo.  I've updated the above.</p>",
        "id": 269965081,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1643585983
    },
    {
        "content": "<p>Because it will try to use <code>pi_Lp.normed_space</code>, but this needs a <code>fact (1 ≤ 2)</code> that isn't there.</p>",
        "id": 269965086,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643585990
    },
    {
        "content": "<p>Am I correct that the bad idea \"fix\" I mentioned above replaces the correct module structure with an arbitrary one?</p>",
        "id": 269965137,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1643586030
    },
    {
        "content": "<p>It works if you add <code>local attribute [instance] fact_one_le_two_real </code> somewhere. It should be fixed in mathlib, though.</p>",
        "id": 269965140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643586033
    },
    {
        "content": "<p>Yes that's right</p>",
        "id": 269965143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643586039
    },
    {
        "content": "<p>Well, it doesn't exactly replace anything in the sense that the correct module structure isn't there.</p>",
        "id": 269965161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643586084
    },
    {
        "content": "<p>It says something like \"Suppose we have an arbitrary module structure on <code>euclidean_space 𝕜 (fin n)</code>.\"</p>",
        "id": 269965293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643586262
    },
    {
        "content": "<p>I can confirm that including the local attribute line resolves my error.  How do I help get this fixed this in mathlib?</p>",
        "id": 269965333,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1643586352
    },
    {
        "content": "<p>I'm also curious about your process for finding the fix of <code>fact_one_le_two_real</code></p>",
        "id": 269965722,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1643586843
    },
    {
        "content": "<p>we're \"not allowed\" a global <code>fact</code> instance, I wonder if this marks an exception</p>",
        "id": 269965937,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643587121
    },
    {
        "content": "<p>Maybe best to post an issue, there could be other instances that are missing for the same reason.<br>\nWe can also ping the people listed in the authors line: <span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span></p>",
        "id": 269966092,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643587231
    },
    {
        "content": "<p>Basically I simulated instance search by reading the source: hmm there are no results for <code>module</code>, but there is an instance for <code>finite_dimensional</code> which depends on <code>module</code> so it must nevertheless exist somehow, notice <code>euclidean_space</code> is reducible so look for instances for its definition <code>pi_Lp</code>, see that this one has an instance for <code>normed_group</code> which extends <code>module</code>, but it involves a <code>fact</code> hypothesis so it won't work globally</p>",
        "id": 269966271,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643587408
    },
    {
        "content": "<p>That makes sense, thanks!</p>",
        "id": 269966364,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1643587502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/euclidean_space.20error/near/269966092\">said</a>:</p>\n<blockquote>\n<p>Maybe best to post an issue, there could be other instances that are missing for the same reason.<br>\nWe can also ping the people listed in the authors line: <span class=\"user-mention silent\" data-user-id=\"266253\">Joseph Myers</span> <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span></p>\n</blockquote>\n<p>In practice, for this and similar things (<a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/inner_product_space/l2_space.html\">this file</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/inner_product_space/spectrum.html\">this file</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/fourier.html\">this file</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/function/l2_space.html\">this file</a>, <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/measure_theory/function/conditional_expectation.lean\">this file</a>) we just put the </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">fact_one_le_two_real</span>\n</code></pre></div>\n<p>at the top of every file.  Is this not recommended practice?</p>",
        "id": 269973098,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643596251
    },
    {
        "content": "<p>hmm, I guess <code>euclidean_space</code> is reducible, but it feels like breaking encapsulation to me</p>",
        "id": 269974227,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643597634
    },
    {
        "content": "<p>Why should the user of <code>euclidean_space</code> need to care about the fact that the implementation of the <code>module</code> instance relies on <code>fact_one_le_two_real</code></p>",
        "id": 269974277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643597674
    },
    {
        "content": "<p>I see your point.  I've sometimes wondered why we have the instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.Lp.normed_space_L2\">docs#measure_theory.Lp.normed_space_L2</a> (and similar) recorded given that in the presence of <code>local attribute [instance] fact_one_le_two_ennreal</code> it can be found by typeclass inference.  Maybe for it's for exactly this reason.  But we still seem to need to assume <code>local attribute [instance] fact_one_le_two_ennreal</code> in every file using it.</p>",
        "id": 269974830,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643598312
    },
    {
        "content": "<p>I'd vote for registering <code>fact_one_le_two</code> as a global instance (as well as those for <code>one_le_one</code> and <code>one_le_top</code>): the user of euclidean spaces has absolutely no way to guess that she should include it, and it's important enough that we can make an exception to the <code>no global fact</code> rule.</p>",
        "id": 269991258,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643615561
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 269991762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643615920
    },
    {
        "content": "<p>(And I'd also register the fact that 2 and 3 are prime, by the way :-)</p>",
        "id": 269991974,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643616028
    },
    {
        "content": "<p>It's probably fine to have a small number of global fact instances with no assumptions. I'm not sure how often they come up in failed searches but I guess we have worse problems anyway</p>",
        "id": 269992165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643616167
    },
    {
        "content": "<p>The alternative is to add more lines like the already-existing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>(and ideally, put <code>local attribute [instance] fact_one_le_two_ennreal</code> in a small <code>section</code> with these instances, so that you already notice in the same file if there are more missing instances for <code>euclidean_space</code>)</p>",
        "id": 270004556,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643622695
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11749\">#11749</a></p>",
        "id": 270010004,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643625234
    },
    {
        "content": "<p>Should we time this, to measure the impact?</p>",
        "id": 270010887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643625662
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span></p>",
        "id": 270011157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643625791
    },
    {
        "content": "<p>I'll do a timing in the evening (when I'm at a PC with enough RAM to compile mathlib).</p>",
        "id": 270032303,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643636539
    },
    {
        "content": "<p>Benchmark says no difference whatsoever.</p>",
        "id": 270164697,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643701898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Thanks for doing this!</p>",
        "id": 270164804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643701967
    },
    {
        "content": "<p>Is it posted somewhere?</p>",
        "id": 270164836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643701992
    },
    {
        "content": "<p>Then we can link to it in the PR page, and kick it on the queue</p>",
        "id": 270164846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643702005
    }
]