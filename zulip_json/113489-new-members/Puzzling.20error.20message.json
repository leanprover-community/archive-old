[
    {
        "content": "<p>This simple example does not compile and it shows a puzzling error message. The error message says that it cannot unify <code>g * h = h * g</code> with <code>g * h = h * g</code>. What am I doing wrong?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">mul_comm</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p><a href=\"/user_uploads/3121/DfOMdAkfqgCqhPH6gULixaPu/Screen-Shot-2020-06-12-at-9.03.50-PM.png\">Screen-Shot-2020-06-12-at-9.03.50-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DfOMdAkfqgCqhPH6gULixaPu/Screen-Shot-2020-06-12-at-9.03.50-PM.png\" title=\"Screen-Shot-2020-06-12-at-9.03.50-PM.png\"><img src=\"/user_uploads/3121/DfOMdAkfqgCqhPH6gULixaPu/Screen-Shot-2020-06-12-at-9.03.50-PM.png\"></a></div>",
        "id": 200743992,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1592013950
    },
    {
        "content": "<p>whenever you see an error like that turn up the printing options</p>",
        "id": 200744038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592013992
    },
    {
        "content": "<p><code>set_option pp.all true</code></p>",
        "id": 200744042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592014004
    },
    {
        "content": "<p>In the error message you will see that it is trying to unify something about the <code>inst_1</code> group to something about the <code>inst_2</code> group</p>",
        "id": 200744099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592014092
    },
    {
        "content": "<p>You have endowed <code>G</code> with two incompatible group structures with your assumptions</p>",
        "id": 200744104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592014124
    },
    {
        "content": "<p>Ah yes! Makes total sense. A bit difficult to read the error message with the full options, but I can see that now.</p>",
        "id": 200744109,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1592014154
    },
    {
        "content": "<p>Following up on this, I'm confused about something that gives me an \"extra\" structure (which was what I was trying to <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> before):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">order_of_element</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_cyclic</span> <span class=\"n\">G</span><span class=\"o\">]:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">is_cyclic</span><span class=\"bp\">.</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>How do I use the <code>mul_comm</code>  property of <code>z</code> to prove the goal? Every attempt seems to produce those two different structures in <code>G</code> that don't unify.</p>",
        "id": 200745179,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1592015912
    },
    {
        "content": "<p>Use <code>letI</code></p>",
        "id": 200745603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592016804
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_cyclic</span> <span class=\"n\">G</span><span class=\"o\">]:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">is_cyclic</span><span class=\"bp\">.</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_comm</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200745604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592016807
    },
    {
        "content": "<p><code>letI</code> does two things: it inserts a <code>let</code> into the context, and it adds that new variable to the typeclass search so that <code>mul_comm</code> picks it up</p>",
        "id": 200745653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592016851
    },
    {
        "content": "<p>it is essential that it be a <code>let</code> and not a <code>have</code> so that lean can verify that the group structure on <code>G</code> here is defeq to the original group structure on <code>G</code></p>",
        "id": 200745666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592016887
    },
    {
        "content": "<p>Oh, I see. I guess these are the docs <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#Instance%20cache%20tactics\">https://leanprover-community.github.io/mathlib_docs/tactics.html#Instance%20cache%20tactics</a>, right? I missed that.</p>\n<p>Thanks so much!</p>",
        "id": 200745800,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1592017095
    }
]