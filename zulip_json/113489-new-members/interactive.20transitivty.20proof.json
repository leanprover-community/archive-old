[
    {
        "content": "<p>Is there a nice way to prove an inequality by transitivity in stages? I know you can do something like <code>exact trans h1 h2</code> but I want to be able to do that interactively by generating goals or something like that?</p>",
        "id": 269057633,
        "sender_full_name": "Callan McGill",
        "timestamp": 1642996701
    },
    {
        "content": "<p>Calc mode could work. You could also use <code>refine</code> in a tactic block, e.g <code>refine trans h1 _</code>, or in term mode put a hole as in <code>trans h1 _</code> to see what the expected type of <code>_</code> is, and fill it in progressively. It would be easier to help if you have an example in mind, and post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 269058032,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642997105
    },
    {
        "content": "<p>You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#transitivity\">tactic#transitivity</a> -- if your goal is <code>A &lt;= C</code> and you use <code>transitivity B</code> then you will have new goals <code>A &lt;= B</code> and <code>B &lt;= C</code></p>",
        "id": 269058111,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642997216
    },
    {
        "content": "<p>Usually <code>calc</code> is nice for readability.</p>",
        "id": 269058116,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642997230
    },
    {
        "content": "<p>cool thanks, I only just started lean so I didn't know about <code>calc</code>. My example was trying to prove the sum rule for sequences and having various points where I want to prove an inequality transitively</p>",
        "id": 269058189,
        "sender_full_name": "Callan McGill",
        "timestamp": 1642997357
    },
    {
        "content": "<p>If I am in a tactic environment how do I switch to <code>calc</code>, do I need to use <code>have</code> or something else?</p>",
        "id": 269058357,
        "sender_full_name": "Callan McGill",
        "timestamp": 1642997580
    },
    {
        "content": "<p>One potential issue with using <code>transitivity B</code> is that it might be tricky/annoying to write down <code>B</code> in the exact form you want, especially if there are coercions involved. If you already have a proof of one of the new goals then Adam's suggestion of using <code>refine trans</code> is convenient because then Lean will work out what <code>B</code> is for you.</p>",
        "id": 269058454,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642997723
    },
    {
        "content": "<p>In tactic mode, <code>calc BLAH</code> is the same as <code>exact calc BLAH</code>.</p>",
        "id": 269058461,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642997733
    },
    {
        "content": "<p>very helpful, thank you both!</p>",
        "id": 269058518,
        "sender_full_name": "Callan McGill",
        "timestamp": 1642997799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/interactive.20transitivty.20proof/near/269058461\">said</a>:</p>\n<blockquote>\n<p>In tactic mode, <code>calc BLAH</code> is the same as <code>exact calc BLAH</code>.</p>\n</blockquote>\n<p>Slight correction: a while ago (in commit <a href=\"https://github.com/leanprover-community/lean/pull/203\">lean#203</a>) we made it expand to <code>refine calc</code> instead, so you can insert holes to be proved later on in the tactic script. Just wanted to make sure you knew of this bonus feature :)</p>",
        "id": 269135726,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643043527
    },
    {
        "content": "<p>Is this mentioned in any documentation? (The <a href=\"https://leanprover-community.github.io/extras/calc.html\">calc page</a> makes it seem like you need to put <code>exact</code> before <code>calc</code> to use it in tactic mode.)</p>",
        "id": 269144562,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643047293
    },
    {
        "content": "<p>Doesn't look like there was any documentation, <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/245\">so I made some</a></p>",
        "id": 269186702,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643066237
    }
]