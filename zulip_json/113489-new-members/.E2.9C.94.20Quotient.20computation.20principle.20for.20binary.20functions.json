[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">case</span> <span class=\"n\">mk.mk</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">RawInt</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Quotient.lift₂</span> <span class=\"n\">MyInt.addRawInts</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MyInt.addRawInts.respects</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">Setoid.r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">Setoid.r</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">Quotient.lift₂</span> <span class=\"n\">MyInt.addRawInts</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MyInt.addRawInts.respects</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">Setoid.r</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">Setoid.r</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I was expecting this to reduce - but it does not. What do I do?</p>",
        "id": 279218975,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650198159
    },
    {
        "content": "<p>Can you give us a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 279219264,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650198554
    },
    {
        "content": "<p><a href=\"https://github.com/Mateiadrielrafael/lean-sandbox/blob/main/LeanSandbox/Integers.lean#L97\">here</a> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 279219365,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650198717
    },
    {
        "content": "<p>Pretty sure you need the nightly build for an earlier theorem to work</p>",
        "id": 279219406,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650198745
    },
    {
        "content": "<p>Sorry, I don't have Lean 4 installed <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 279219785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650199264
    },
    {
        "content": "<p>ah, don't worry</p>",
        "id": 279220017,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650199633
    },
    {
        "content": "<p>Still wish there was a resource documenting quotient usage in practice</p>",
        "id": 279220028,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650199653
    },
    {
        "content": "<p>I can direct to the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/antisymmetrization.partial_order\">docs#antisymmetrization.partial_order</a>, which should pretty instructive regarding the use of quotients to lift relations.</p>",
        "id": 279220352,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650200092
    },
    {
        "content": "<p>You can just simp further:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">add.comm</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">MyInt</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n    <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">HAdd.hAdd</span><span class=\"o\">,</span> <span class=\"n\">add</span><span class=\"o\">]</span>\n    <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">Quot.ind</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"n\">using</span> <span class=\"n\">Quot.ind</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Quotient.liftOn₂</span><span class=\"o\">,</span> <span class=\"n\">Quotient.lift₂</span><span class=\"o\">,</span> <span class=\"n\">Quotient.lift</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and it will reach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mk.mk</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">RawInt</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">MyInt.addRawInts</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">MyInt.addRawInts</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>though I'm not entirely sure whether that is the intended way</p>",
        "id": 279220429,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650200197
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span></p>",
        "id": 279220551,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650200385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"486803\">Matei Adriel</span> has marked this topic as resolved.</p>",
        "id": 279220553,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650200392
    },
    {
        "content": "<p>I expect the reason it didn't reduce automatically is because you're mixing the Quot and Quotient API</p>",
        "id": 279221318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650201568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Quotient.20computation.20principle.20for.20binary.20functions/near/279221318\">said</a>:</p>\n<blockquote>\n<p>I expect the reason it didn't reduce automatically is because you're mixing the Quot and Quotient API</p>\n</blockquote>\n<p>How do I fix that?</p>",
        "id": 279221707,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650202164
    },
    {
        "content": "<p>I can't tell you without seeing how you got to your goal</p>",
        "id": 279221883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650202374
    },
    {
        "content": "<p>Because the answer is \"don't get to that goal in the first place\"</p>",
        "id": 279221889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650202394
    },
    {
        "content": "<p>ok , I think I managed to fix it by getting rid of Quot.ind in favour of Quotient.ind</p>",
        "id": 279221935,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650202449
    },
    {
        "content": "<p>That's the type of thing I was thinking of</p>",
        "id": 279221951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650202499
    },
    {
        "content": "<p>Ah, I wish there existed a Quotient.ind\\3 :D</p>",
        "id": 279222049,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650202623
    }
]