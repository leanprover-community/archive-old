[
    {
        "content": "<p>How can I prove something by \"induction on size\". E.g. suppose size is a function giving the <code>size</code> of some element of type \\alpha and <code>predicate</code> is something provable by induction on size, how would I go about introducing induction in a proof like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">predicate</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">predicate</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"c1\">--induction (size x),</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>In the commented out induction, I get the error <code>generalize tactic failed, failed to find expression in the target</code>.</p>",
        "id": 198008942,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589845897
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">predicate</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">predicate</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">suffices</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">predicate</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">key</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198009229,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589846187
    },
    {
        "content": "<p>Cool, thanks!</p>",
        "id": 198009349,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589846357
    },
    {
        "content": "<p>I think this is a slightly better way to write the type signature</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">example</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">predicate</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">predicate</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">suffices</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">predicate</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">key</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198009364,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589846388
    },
    {
        "content": "<p>There is also</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">size</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 198014695,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589852170
    }
]