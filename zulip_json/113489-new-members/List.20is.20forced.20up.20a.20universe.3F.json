[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">list</span>\n<span class=\"c1\">-- list : Type u_1 → Type u_1</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">list</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">append</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">list</span> <span class=\"n\">A</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">universe level of type_of(arg #1) of &#39;hidden.list.nil&#39; is</span>\n<span class=\"cm\">too big for the corresponding inductive datatype</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</pre></div>\n\n\n<p>Why is the <code>list</code> pre-existing in Lean allowed to go from a universe to itself, <br>\nmeanwhile when I try to define <code>list</code> Lean tells me I need to go up a universe?</p>",
        "id": 194621081,
        "sender_full_name": "Ken Lee",
        "timestamp": 1587335676
    },
    {
        "content": "<p>The short answer is you put the type (<code>a</code> in <code>list a</code>) to the right of the colon.</p>",
        "id": 194621470,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587336429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194621470\" title=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194621470\">said</a>:</p>\n<blockquote>\n<p>The short answer is you put the type (<code>a</code> in <code>list a</code>) to the right of the colon.</p>\n</blockquote>\n<p>I'm not sure what you mean by \"(<code>a</code> in <code>list a</code>)\" ?</p>",
        "id": 194621599,
        "sender_full_name": "Ken Lee",
        "timestamp": 1587336608
    },
    {
        "content": "<p>I'm just trying to refer to the type that is the argument of <code>list</code>.</p>",
        "id": 194621604,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587336643
    },
    {
        "content": "<p>I don't think it's directly because of that. It's because you have Types as arguments to your constructors, which you were forced to do by putting <code>list : Type -&gt; Type</code> instead of <code>list (A : Type) : Type</code></p>",
        "id": 194621618,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587336691
    },
    {
        "content": "<p>you'd want something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">append</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"o\">,</span> <span class=\"n\">list</span>\n</pre></div>",
        "id": 194621679,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587336760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194621618\" title=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194621618\">said</a>:</p>\n<blockquote>\n<p>I don't think it's directly because of that. It's because you have Types as arguments to your constructors, which you were forced to do by putting <code>list : Type -&gt; Type</code> instead of <code>list (A : Type) : Type</code></p>\n</blockquote>\n<p>but surely <code>list (A : Type) : Type</code> is just syntactic sugar for <code>list : Type -&gt; Type</code>?</p>",
        "id": 194621713,
        "sender_full_name": "Ken Lee",
        "timestamp": 1587336814
    },
    {
        "content": "<p>If there are Type's as arguments to the constructors then it has to go up a universe, because this can be used to make very large Type, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">list</span> <span class=\"n\">unit</span>\n</pre></div>\n\n\n<p>Here, there is a <code>list unit</code> for every <code>Type</code>, and the cardinality of <code>Type</code> is strictly greater than any <code>Type</code>, so if lean allowed this definition there would be a contradiction.</p>",
        "id": 194621715,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587336822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132893\">Ken Lee</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194621713\" title=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194621713\">said</a>:</p>\n<blockquote>\n<p>but surely <code>list (A : Type) : Type</code> is just syntactic sugar for <code>list : Type -&gt; Type</code>?</p>\n</blockquote>\n<p>It isn't</p>",
        "id": 194621773,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587336894
    },
    {
        "content": "<p>I think in the type theory literature the variables before the colon are called parameters and the variables after the colon are called indices.<br>\nThis is relevant even though it's about Coq: <a href=\"https://stackoverflow.com/questions/24600256/difference-between-type-parameters-and-indices\" title=\"https://stackoverflow.com/questions/24600256/difference-between-type-parameters-and-indices\">https://stackoverflow.com/questions/24600256/difference-between-type-parameters-and-indices</a></p>",
        "id": 194621841,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587337009
    },
    {
        "content": "<p>Putting <code>Type</code> right of the colon allows you to define an inductive family, where you are defining many inductive <code>Types</code> at the same time, one for each type and they can all be constructors to each other.</p>",
        "id": 194621850,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587337049
    },
    {
        "content": "<p>You can do stuff like this with inductive families.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">inductive</span><span class=\"w\"> </span><span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"nc\">Type</span><span class=\"w\"></span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"></span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194621915,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587337133
    },
    {
        "content": "<p>So you are defining two types <code>X ff</code> and <code>X tt</code>, and you can make an <code>X ff</code> out of an <code>X tt</code>. Both these types are empty incidentally.</p>",
        "id": 194622022,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587337208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132893\">Ken Lee</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194621713\" title=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194621713\">said</a>:</p>\n<blockquote>\n<p>but surely <code>list (A : Type) : Type</code> is just syntactic sugar for <code>list : Type -&gt; Type</code>?</p>\n</blockquote>\n<p>To be clear, as far as the type of <code>list</code> itself is concerned, this is true, but the location of the colon determines the difference between parameters and indices that is relevant to the axioms that define inductive types in lean, so these generally are not interchangeable.</p>",
        "id": 194622100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587337325
    },
    {
        "content": "<p>One could imagine a desugaring pass that notices if you always use the type argument the same way without varying it, and shifts the argument to be a parameter, but because there are ordering requirements between parameters and indices this may not always trigger, and in any case it gives the user less control (this also affects the statement of the recursion principle for the type)</p>",
        "id": 194622187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587337481
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">biglist</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">biglist</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">biglist</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">biglist</span> <span class=\"n\">A</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">biglist</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n<span class=\"c1\">-- biglist.rec :</span>\n<span class=\"c1\">--   Π {C : Π (a : Type), biglist a → Sort u_1},</span>\n<span class=\"c1\">--     (Π {A : Type}, C A biglist.nil) →</span>\n<span class=\"c1\">--     (Π {A : Type} (a : A) (l : biglist A), C A l → C A (biglist.cons a l)) → Π {a : Type} (n : biglist a), C a n</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n<span class=\"c1\">-- list.rec :</span>\n<span class=\"c1\">--   Π {A : Type} {C : list A → Sort u_1},</span>\n<span class=\"c1\">--     C list.nil → (Π (a : A) (l : list A), C l → C (list.cons a l)) → Π (n : list A), C n</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</pre></div>",
        "id": 194622310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587337721
    },
    {
        "content": "<p>Hmm, so I guess <code>biglist</code> lets you do \"polymorphic recursion\". Is that ever actually useful?</p>",
        "id": 194622382,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587337895
    },
    {
        "content": "<p>note that <code>list.rec</code> is a lot more convenient than <code>biglist.rec</code> if you want to prove a statement about <code>list nat</code> by induction</p>",
        "id": 194622383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587337898
    },
    {
        "content": "<p><code>list.rec</code> easily implies <code>biglist.rec</code> but the reverse is not true (at least not without cast headaches)</p>",
        "id": 194622423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587337924
    },
    {
        "content": "<p>Oh, hmm.</p>",
        "id": 194622425,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587337951
    },
    {
        "content": "<p>Other than that, these types are the same: <code>list</code> and <code>biglist</code> have the same type, as do <code>(big)list.nil</code> and <code>(big)list.cons</code></p>",
        "id": 194622433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587338009
    },
    {
        "content": "<p>I see! In <code>biglist</code> there is a <code>\\Pi {A : Type}</code> at every minor premise(?)</p>\n<p>By the way <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I've been reading your notes on the Type Theory of Lean. Just got to typing judgements for inductive types, which was when I came across this question.</p>",
        "id": 194622498,
        "sender_full_name": "Ken Lee",
        "timestamp": 1587338068
    },
    {
        "content": "<p>Unfortunately, when you write inductive types in Coq style everything is right of the colon, so I notice this comes up in code translated from Coq</p>",
        "id": 194622502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587338093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132893\">@Ken Lee</span> Yes, you can use the rules for inductive types in the paper to determine that this universe bumping is supposed to happen</p>",
        "id": 194622514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587338151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194622514\" title=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194622514\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132893\">Ken Lee</span> Yes, you can use the rules for inductive types in the paper to determine that this universe bumping is supposed to happen</p>\n</blockquote>\n<p>I have, which is why I was confused when Lean said it didn't have to happen</p>",
        "id": 194622611,
        "sender_full_name": "Ken Lee",
        "timestamp": 1587338302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194621841\" title=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194621841\">said</a>:</p>\n<blockquote>\n<p>I think in the type theory literature the variables before the colon are called parameters and the variables after the colon are called indices.<br>\nThis is relevant even though it's about Coq: <a href=\"https://stackoverflow.com/questions/24600256/difference-between-type-parameters-and-indices\" title=\"https://stackoverflow.com/questions/24600256/difference-between-type-parameters-and-indices\">https://stackoverflow.com/questions/24600256/difference-between-type-parameters-and-indices</a></p>\n</blockquote>\n<p>So it looks like this is what I'm looking for. The difference between parameters and indices.</p>",
        "id": 194622698,
        "sender_full_name": "Ken Lee",
        "timestamp": 1587338469
    },
    {
        "content": "<p>In the notation of the paper, <code>list</code> above is</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mi>A</mi><mo>:</mo><msub><mi>U</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>μ</mi><mi>T</mi><mo>:</mo><msub><mi>U</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">l</mi></mrow><mo>:</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">c</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">s</mi></mrow><mo>:</mo><mi>A</mi><mo>→</mo><mi>T</mi><mo>→</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\lambda A:U_1,\\mu T:U_2, (\\mathsf{nil}:T) + (\\mathsf{cons}:A\\to T\\to T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">λ</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">n</span><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\">l</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">c</span><span class=\"mord mathsf\">o</span><span class=\"mord mathsf\">n</span><span class=\"mord mathsf\">s</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>and <code>biglist</code> is</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mi>T</mi><mo>:</mo><msub><mi>U</mi><mn>1</mn></msub><mo>→</mo><msub><mi>U</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">l</mi></mrow><mo>:</mo><mi mathvariant=\"normal\">∀</mi><mi>A</mi><mo>:</mo><msub><mi>U</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><mi>T</mi><mtext>  </mtext><mi>A</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">c</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">s</mi></mrow><mo>:</mo><mi mathvariant=\"normal\">∀</mi><mi>A</mi><mo>:</mo><msub><mi>U</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><mi>A</mi><mo>→</mo><mi>T</mi><mtext>  </mtext><mi>A</mi><mo>→</mo><mi>T</mi><mtext>  </mtext><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mu T:U_1\\to U_2, (\\mathsf{nil}:\\forall A:U_1,\\ T\\;A) + (\\mathsf{cons}:\\forall A:U_1,\\ A\\to T\\;A\\to T\\;A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">n</span><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\">l</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">c</span><span class=\"mord mathsf\">o</span><span class=\"mord mathsf\">n</span><span class=\"mord mathsf\">s</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span></span></span></span></span></p>",
        "id": 194622701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587338479
    },
    {
        "content": "<p>parameters are denoted in the paper by having a free variable in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span>-definition</p>",
        "id": 194622749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587338538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> didn't you once say to me that you wanted to read Mario's type theory notes? Note that Ken is reading them</p>",
        "id": 194622800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587338640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194622701\" title=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194622701\">said</a>:</p>\n<blockquote>\n<p>In the notation of the paper, <code>list</code> is</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mi>A</mi><mo>:</mo><msub><mi>U</mi><mi mathvariant=\"normal\">ℓ</mi></msub><mo separator=\"true\">,</mo><mi>μ</mi><mi>T</mi><mo>:</mo><msub><mi>U</mi><mi mathvariant=\"normal\">ℓ</mi></msub><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">l</mi></mrow><mo>:</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">c</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">s</mi></mrow><mo>:</mo><mi>A</mi><mo>→</mo><mi>T</mi><mo>→</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\lambda A:U_{\\ell},\\mu T:U_{\\ell}, (\\mathsf{nil}:T) + (\\mathsf{cons}:A\\to T\\to T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">λ</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">ℓ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">ℓ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">n</span><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\">l</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">c</span><span class=\"mord mathsf\">o</span><span class=\"mord mathsf\">n</span><span class=\"mord mathsf\">s</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>and <code>biglist</code> is</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mi>T</mi><mo>:</mo><msub><mi>U</mi><mi mathvariant=\"normal\">ℓ</mi></msub><mo>→</mo><msub><mi>U</mi><mrow><mi>S</mi><mi mathvariant=\"normal\">ℓ</mi></mrow></msub><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">l</mi></mrow><mo>:</mo><mi mathvariant=\"normal\">∀</mi><mi>A</mi><mo>:</mo><msub><mi>U</mi><mi mathvariant=\"normal\">ℓ</mi></msub><mo separator=\"true\">,</mo><mi>T</mi><mtext>  </mtext><mi>A</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">c</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">s</mi></mrow><mo>:</mo><mi mathvariant=\"normal\">∀</mi><mi>A</mi><mo>:</mo><msub><mi>U</mi><mi mathvariant=\"normal\">ℓ</mi></msub><mo separator=\"true\">,</mo><mi>A</mi><mo>→</mo><mi>T</mi><mtext>  </mtext><mi>A</mi><mo>→</mo><mi>T</mi><mtext>  </mtext><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mu T:U_{\\ell}\\to U_{S\\ell}, (\\mathsf{nil}:\\forall A:U_{\\ell},T\\;A) + (\\mathsf{cons}:\\forall A:U_{\\ell},A\\to T\\;A\\to T\\;A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">ℓ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mtight\">ℓ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">n</span><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\">l</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">ℓ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\">c</span><span class=\"mord mathsf\">o</span><span class=\"mord mathsf\">n</span><span class=\"mord mathsf\">s</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">ℓ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span></span></span></span></span></p>\n</blockquote>\n<p>Ahhhhhh so <code>list</code> is an inductive definition per <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mtext> </mtext><mo>:</mo><mtext> </mtext><msub><mi>U</mi><mi mathvariant=\"normal\">ℓ</mi></msub></mrow><annotation encoding=\"application/x-tex\">A\\,:\\,U_{\\ell}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">ℓ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, where as <code>biglist</code> is just one inductive definition</p>",
        "id": 194622912,
        "sender_full_name": "Ken Lee",
        "timestamp": 1587338873
    },
    {
        "content": "<p>right</p>",
        "id": 194622957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587338901
    },
    {
        "content": "<p>and since the inductive definitions per <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>:</mo><msub><mi>U</mi><mi>l</mi></msub></mrow><annotation encoding=\"application/x-tex\"> A : U_l </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> has type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><mi>l</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_l</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, <code>list</code> is indeed type <code>Type u_l -&gt; Type u_l</code></p>",
        "id": 194622965,
        "sender_full_name": "Ken Lee",
        "timestamp": 1587338973
    },
    {
        "content": "<p>Last time I tried reading Mario's paper I was completely intimidated by the notation.</p>",
        "id": 194622969,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587338985
    },
    {
        "content": "<p>I think if you stare at the notation for one minute then eventually you will discover that the notation stares back at you</p>",
        "id": 194623017,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587339044
    },
    {
        "content": "<p>I think it is important to make sense of what the <code>inductive</code> command does to have a term that denotes an inductive definition (here the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span> binder). Otherwise, you might think that lean has an infinite and ever growing set of axioms and it would be difficult to understand the whole that way</p>",
        "id": 194623076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587339127
    },
    {
        "content": "<p>other than that, the notation really is lean in latex font</p>",
        "id": 194623093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587339199
    },
    {
        "content": "<p>Would there be a demand for a type theory primer more in the style of <a href=\"https://coq.github.io/doc/master/refman/language/cic.html\" title=\"https://coq.github.io/doc/master/refman/language/cic.html\">https://coq.github.io/doc/master/refman/language/cic.html</a> ? That is a bit less symbol heavy and more tutorialized. I don't know if I could write something like that but I would be happy to collaborate with one of the educators around here</p>",
        "id": 194623277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587339578
    },
    {
        "content": "<p>Even the very first notation is very hard to understand. What does this mean? <a href=\"/user_uploads/3121/25RUQjIpH2OZKmLJWazuTzha/Screenshot-2020-04-20-at-00.39.50.png\" title=\"Screenshot-2020-04-20-at-00.39.50.png\">Screenshot-2020-04-20-at-00.39.50.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/25RUQjIpH2OZKmLJWazuTzha/Screenshot-2020-04-20-at-00.39.50.png\" title=\"Screenshot-2020-04-20-at-00.39.50.png\"><img src=\"/user_uploads/3121/25RUQjIpH2OZKmLJWazuTzha/Screenshot-2020-04-20-at-00.39.50.png\"></a></div>",
        "id": 194623324,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587339658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194623324\" title=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194623324\">said</a>:</p>\n<blockquote>\n<p>Even the very first notation is very hard to understand. What does this mean? <a href=\"/user_uploads/3121/25RUQjIpH2OZKmLJWazuTzha/Screenshot-2020-04-20-at-00.39.50.png\" title=\"Screenshot-2020-04-20-at-00.39.50.png\">Screenshot-2020-04-20-at-00.39.50.png</a></p>\n</blockquote>\n<p>it's just BNF. See : <a href=\"https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form\" title=\"https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form\">https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form</a></p>",
        "id": 194623329,
        "sender_full_name": "Ken Lee",
        "timestamp": 1587339675
    },
    {
        "content": "<p>What's BNF?</p>",
        "id": 194623332,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587339685
    },
    {
        "content": "<p>My main goal with chapter 2 of the thesis especially was to get all the axioms together in one place, as quickly, precisely, and compactly as possible, as a source for future formalization work. As a result it asks a lot from the reader, and in particular familiarity with BNF and \"big fraction\" notation</p>",
        "id": 194623336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587339701
    },
    {
        "content": "<p>Okay. At least I know what it's called now, that should help a lot.</p>",
        "id": 194623377,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587339743
    },
    {
        "content": "<p>It is notation for what we would call an inductive type</p>",
        "id": 194623380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587339760
    },
    {
        "content": "<p>the first line means \"a universe level (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">ℓ</mi></mrow><annotation encoding=\"application/x-tex\">\\ell</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">ℓ</span></span></span></span>) is either a universe level <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">u</span></span></span></span> or (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span></span></span></span>) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> or (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span></span></span></span>) the successor of a universe level <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi mathvariant=\"normal\">ℓ</mi></mrow><annotation encoding=\"application/x-tex\">S \\ell</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">ℓ</span></span></span></span> or etc</p>",
        "id": 194623395,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587339816
    },
    {
        "content": "<p>the first line says that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">ℓ</mi></mrow><annotation encoding=\"application/x-tex\">\\ell</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">ℓ</span></span></span></span> is a variable denoting a syntactic class (that we would call <code>level</code>), which can be a variable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">u</span></span></span></span>, the constant <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> followed by a level expression, or the max or imax of two level expressions</p>",
        "id": 194623440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587339844
    },
    {
        "content": "<p>It exactly matches lean's <code>level</code>, except that lean has an additional <code>mvar</code> constructor that we omit because we aren't formalizing unelaborated terms</p>",
        "id": 194623460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587339878
    },
    {
        "content": "<p>how close are we from building Lean in Lean (without violating Second Incompleteness)?</p>",
        "id": 194623491,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587339954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194623336\" title=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194623336\">said</a>:</p>\n<blockquote>\n<p>My main goal with chapter 2 of the thesis especially was to get all the axioms together in one place, as quickly, precisely, and compactly as possible, as a source for future formalization work. As a result it asks a lot from the reader, and in particular familiarity with BNF and \"big fraction\" notation</p>\n</blockquote>\n<p>I was initially reading from Coq's site. But I got stuck at the triad of positivities Coq needed to define inductive definitions. Then I found your paper. I enjoyed its compactness and felt like I benefited from unpacking it.</p>",
        "id": 194623557,
        "sender_full_name": "Ken Lee",
        "timestamp": 1587340082
    },
    {
        "content": "<p>I had some work on a lean typechecker from maybe 2 years ago, which had some difficulty managing dependence on the environment, as well as the more recent lean in MM0 definition (<a href=\"https://github.com/digama0/mm0/blob/master/examples/lean.mm1\" title=\"https://github.com/digama0/mm0/blob/master/examples/lean.mm1\">https://github.com/digama0/mm0/blob/master/examples/lean.mm1</a>), which can easily be ported to lean</p>",
        "id": 194623599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587340135
    },
    {
        "content": "<p>\"lean in MM0\" is directly based on the thesis description</p>",
        "id": 194623611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587340198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you have plans to publish your thesis eventually?</p>",
        "id": 194647104,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587372170
    },
    {
        "content": "<p>I suppose? I'm not very good at finding journals for this kind of thing, and it's already served its main purpose, which was to get me a masters degree. It will probably live in preprint-like state for a while yet</p>",
        "id": 194647606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587372504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194623277\" title=\"#narrow/stream/113489-new-members/topic/List.20is.20forced.20up.20a.20universe.3F/near/194623277\">said</a>:</p>\n<blockquote>\n<p>Would there be a demand for a type theory primer more in the style of <a href=\"https://coq.github.io/doc/master/refman/language/cic.html\" title=\"https://coq.github.io/doc/master/refman/language/cic.html\">https://coq.github.io/doc/master/refman/language/cic.html</a> ? That is a bit less symbol heavy and more tutorialized. I don't know if I could write something like that but I would be happy to collaborate with one of the educators around here</p>\n</blockquote>\n<p>I think people have already answered this question many time, but internet storage is cheap so let's do it again: YES.</p>",
        "id": 194659495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587380243
    }
]