[
    {
        "content": "<p>I recently used two variants of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.iterate_succ\">docs#function.iterate_succ</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.iterate_succ_supply\">docs#function.iterate_succ_supply</a> in some proofs, and thought they might be useful additions to mathlib.</p>\n<p>The existing theorems are <code>f^[n.succ] = f^[n] ∘ f</code> and <code>f^[n.succ] x = f^[n] (f x)</code><br>\n(which are trivial / their proofs are both <code>rfl</code>)<br>\n…but I needed the swapped versions <code>f^[n.succ] = f ∘ f^[n]</code> and <code>f^[n.succ] x = f (f^[n] x)</code>, which I can imagine other people might also find useful.</p>\n<p>Anyway if these seem like good additions, could someone give my github username <code>hrldcpr</code> branch write access so I can make a pull request?</p>\n<p>(Here's code if it's not clear what I'm talking about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.function.iterate</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">iterate_succ'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n.succ</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_one_add</span><span class=\"o\">,</span> <span class=\"n\">function.iterate_add</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">iterate_succ_apply'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n.succ</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">iterate_succ'</span>\n</code></pre></div>\n<p>)</p>",
        "id": 263387930,
        "sender_full_name": "Harold Cooper",
        "timestamp": 1638414181
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 263402584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638431528
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span></p>",
        "id": 263402646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638431567
    },
    {
        "content": "<p>pretty sure iterate_succ_apply' already exists</p>",
        "id": 263402693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638431606
    },
    {
        "content": "<p>The naming system strikes again. It already exists and has that exact name: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.iterate_succ_apply'\">docs#function.iterate_succ_apply'</a></p>",
        "id": 263402777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638431679
    },
    {
        "content": "<p>In any case for future use I've sent your invitation to the repo.</p>",
        "id": 263402871,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638431772
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.iterate_succ'\">docs#function.iterate_succ'</a> also exists, again with the same name</p>",
        "id": 263402892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638431803
    },
    {
        "content": "<p>Why are those lemmas in the <code>function</code> namespace when the function in question is nat.iterate?</p>",
        "id": 263405760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638434105
    }
]