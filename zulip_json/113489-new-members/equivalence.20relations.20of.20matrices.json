[
    {
        "content": "<p>Hi,<br>\nI'm trying to show the matrix (unitary) similarity is an equivalence relation, but I keep running into the problem that Lean can't infer the size of the matrices I'm declaring the equivalence relation on, and I'm not sure how to tell it to use 'n' and 'F'</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dimension</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unitarily_similar</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span> <span class=\"bp\">⬝</span> <span class=\"n\">U</span><span class=\"bp\">ᴴ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equality</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matrix_equal</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">matrix_equal</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269137837,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1643044384
    },
    {
        "content": "<p>This throws the error: <a href=\"/user_uploads/3121/Sz2AzsiDeE9NlSmg91rnd9Te/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Sz2AzsiDeE9NlSmg91rnd9Te/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Sz2AzsiDeE9NlSmg91rnd9Te/image.png\"></a></div>",
        "id": 269137932,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1643044433
    },
    {
        "content": "<p>(I'm using matrix_equal in case the existential quantifier had something to do with the error)</p>",
        "id": 269138039,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1643044471
    },
    {
        "content": "<p>The error message says it all. How could it know what the type of <code>matrix_equal</code> is? You need to type-ascript.</p>",
        "id": 269139173,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643044945
    },
    {
        "content": "<p>One way to do it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">equivalence</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">matrix_equal</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 269139273,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643044997
    },
    {
        "content": "<p>Ah! Thank you so much. I was trying various versions of that, but I couldn't figure out the right one</p>",
        "id": 269139667,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1643045158
    },
    {
        "content": "<p>You might also consider making <code>F</code> and <code>n</code> be explicit arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dimension</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unitarily_similar</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span> <span class=\"bp\">⬝</span> <span class=\"n\">U</span><span class=\"bp\">ᴴ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equality</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matrix_equal</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"o\">(</span><span class=\"n\">matrix_equal</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269142411,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643046398
    },
    {
        "content": "<p>Note the proof should be one line, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_equivalence\">docs#eq_equivalence</a> or similar</p>",
        "id": 269172656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643058280
    },
    {
        "content": "<p>I assume you mean for the matrix equality one? For unitarily similar, my proof was longer</p>",
        "id": 269174308,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1643059168
    }
]