[
    {
        "content": "<p>Hi, all. I'm trying to write some inane functions in lean so that I can prove theorems about their properties, and I'm having trouble because the introductory material is concentrated on the prover and tactics. Is there a reference on the language syntax, so I can make some progress here? (I'm hoping to do an Advent of Lean, where first I write code to answer the challenge of the day, and then prove as much as I can about the functions written.)</p>",
        "id": 261451164,
        "sender_full_name": "Ocschwar",
        "timestamp": 1636943107
    },
    {
        "content": "<p>Current pitfall: </p>\n<div class=\"codehilite\" data-code-language=\"def\"><pre><span></span><code>  match z with\n  | z &gt; 1 := 0\n  | z = 0 := 1\n  end\n</code></pre></div>",
        "id": 261451175,
        "sender_full_name": "Ocschwar",
        "timestamp": 1636943158
    },
    {
        "content": "",
        "id": 261451217,
        "sender_full_name": "Ocschwar",
        "timestamp": 1636943189
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">trace.eqn_compiler.elim_match</span> <span class=\"n\">true'</span> <span class=\"n\">for</span> <span class=\"n\">additional</span> <span class=\"n\">details</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 261451223,
        "sender_full_name": "Ocschwar",
        "timestamp": 1636943211
    },
    {
        "content": "<p>Answering my own question partially: <br>\nset_option should go after the imports at which point VS Code shows this \"<br>\ninvalid pattern, must be an application, constant, variable, type ascription, aliasing pattern or inaccessible term\"</p>",
        "id": 261451964,
        "sender_full_name": "Ocschwar",
        "timestamp": 1636944548
    },
    {
        "content": "<p><code>match</code> is for pattern matching (deconstructing inductive types by patterns).  You seem to be looking for <code>if ... then ... else ...</code></p>",
        "id": 261451970,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636944574
    },
    {
        "content": "<p>There's also <code>cmp</code>, which you can pattern match:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testf</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">cmp</span> <span class=\"n\">z</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ordering.gt</span> <span class=\"o\">:=</span> <span class=\"s2\">\"greater than 0\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ordering.eq</span> <span class=\"o\">:=</span> <span class=\"s2\">\"equal to 0\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ordering.lt</span> <span class=\"o\">:=</span> <span class=\"s2\">\"less than 0\"</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">testf</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 261452082,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636944731
    },
    {
        "content": "<p>Learning resources: <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a></p>\n<p>Reference manual: <a href=\"https://leanprover.github.io/reference/\">https://leanprover.github.io/reference/</a></p>",
        "id": 261452118,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636944807
    },
    {
        "content": "<p>You might also be interested in <a href=\"https://github.com/digama0/advent-of-code\">https://github.com/digama0/advent-of-code</a> or <a href=\"https://github.com/rwbarton/advent-of-lean-4\">https://github.com/rwbarton/advent-of-lean-4</a>, although neither of these contains proofs</p>",
        "id": 261456763,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636951660
    },
    {
        "content": "<p>There's also theorem proving in lean 4</p>",
        "id": 261464522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636960723
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"220270\">@James King</span> just posted <a href=\"#narrow/stream/270676-lean4/topic/lean.204.20hackers/near/261451747\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/lean.204.20hackers/near/261451747</a> with a link to <a href=\"https://agentultra.github.io/lean-4-hackers/\">https://agentultra.github.io/lean-4-hackers/</a></p>",
        "id": 261466624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636962971
    },
    {
        "content": "<p>Okay, this makes much more sense now. Thanks, everyone!</p>",
        "id": 261494991,
        "sender_full_name": "Ocschwar",
        "timestamp": 1636982168
    },
    {
        "content": "<p>And, from the Hitchiker's guid. an example of a lemma proved for a function in page 90: </p>\n<div class=\"codehilite\" data-code-language=\"def\"><pre><span></span><code>{ red   := rgb.green c,\n  green := rgb.blue c,\n  blue  := rgb.red c }\nThe definition relies on the generated selectors rgb.red, rgb. green, and rgb.blue. Instead of rgb.red c, we could also write c.red, and similarly for the other fields. Sometimes we will see these forms in Lean’s output, even if we do not use them ourselves.\nApplying shuffle three times in a row is the same as not apply- ing it at all:\nlemma shuffle_shuffle_shuffle (c : rgb) :\n  shuffle (shuffle (shuffle c)) = c :=\nbegin\ncases’ c,\nrefl\nend\n</code></pre></div>",
        "id": 262028024,
        "sender_full_name": "Ocschwar",
        "timestamp": 1637298704
    }
]