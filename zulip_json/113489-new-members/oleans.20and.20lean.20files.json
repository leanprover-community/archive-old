[
    {
        "content": "<p>does lean check whether the oleans actually match the lean files? or lean just trusts whatever is in the oleans?</p>",
        "id": 240942885,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622554740
    },
    {
        "content": "<p>I'm not an expert, but it must check, because otherwise you wouldn't get a load of orange bars when you have different mathlib leans and oleans.</p>",
        "id": 240942983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622554783
    },
    {
        "content": "<p>My understanding, which might be wrong is that lean uses the file (out of .lean and .olean) with the newest time stamp.  Hence if you modify and save a file (even if you don’t make any changes), it will invalidate the .olean.</p>",
        "id": 240966891,
        "sender_full_name": "Jason Rute",
        "timestamp": 1622564439
    },
    {
        "content": "<p>Also, if an olean is invalidated, so will be all the olean s which depend on it.</p>",
        "id": 240966961,
        "sender_full_name": "Jason Rute",
        "timestamp": 1622564485
    },
    {
        "content": "<p>Maybe this used to be true but isn't true any more? Nowadays I can edit a file in mathlib to test something, save it, and then delete all the changes and restart Lean and it's fine.</p>",
        "id": 240969353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622565550
    },
    {
        "content": "<p>ok so let me phrase my question in a different way: if i were to download oleans from Hacker X, can Hacker X trick me into thinking that the <code>dec_trivial</code> tactic (or any other tactic) closes a certain goal when it actually doesn't?</p>",
        "id": 240973671,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622567427
    },
    {
        "content": "<p>I'm asking this question purely out of curiosity, I won't be hacking mathlib olean servers to screw people over</p>",
        "id": 240973935,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622567542
    },
    {
        "content": "<p>can the oleans contain entirely different proofs of the same statements?</p>",
        "id": 240974135,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622567640
    },
    {
        "content": "<p>I believe no, a hacker couldn’t do that.  When lean loads oleans, the oleans contain complete (term) proofs that are quickly rechecked every time.  Again (as above), I could be mistaken.</p>",
        "id": 240974893,
        "sender_full_name": "Jason Rute",
        "timestamp": 1622567988
    },
    {
        "content": "<p>See here for the first question:  <a href=\"https://github.com/leanprover-community/lean/issues/112\">https://github.com/leanprover-community/lean/issues/112</a>. I think they now use file hashes instead of time stamps.  (But again, even if the lean and olean disagree but a hacker makes them look like they agree so the olean is used, it will not lead to proof of false I think. Although, I’m sure it could be used to trick the user by subtly changing a definition say.)</p>",
        "id": 240985183,
        "sender_full_name": "Jason Rute",
        "timestamp": 1622572493
    },
    {
        "content": "<p>We've had a situation in the past where a hash collision results in a happy lean but a sad leanchecker</p>",
        "id": 241519252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622804282
    },
    {
        "content": "<p>So yes, I think a hacker can serve you up oleans that let you prove false, but when you export the proof for checking with leanchecker, leanchecker will say \"no this is nonsense\"</p>",
        "id": 241519322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622804321
    },
    {
        "content": "<p>Wow. How did you have a collision in the first place? Aren't collisions like... impossible to happen?</p>",
        "id": 241524252,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622807621
    },
    {
        "content": "<p>32 bits is a small hash</p>",
        "id": 241527249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622809380
    },
    {
        "content": "<p><a href=\"#narrow/stream/144837-PR-reviews/topic/.236572.20crashes.20leanchecker/near/229293401\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.236572.20crashes.20leanchecker/near/229293401</a></p>",
        "id": 241527540,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1622809533
    },
    {
        "content": "<p>I think the odds of this having happened over the lifetime of mathlib are somewhere between 1% and 10%</p>",
        "id": 241527682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622809620
    },
    {
        "content": "<p>Based on <a href=\"https://preshing.com/images/small-probabilities.png\">https://preshing.com/images/small-probabilities.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://preshing.com/images/small-probabilities.png\"><img src=\"https://uploads.zulipusercontent.net/9976e17346d3578fb5d25a24f65fe671aaffcfe5/68747470733a2f2f7072657368696e672e636f6d2f696d616765732f736d616c6c2d70726f626162696c69746965732e706e67\"></a></div>",
        "id": 241527830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622809705
    },
    {
        "content": "<p>I guess the odds are 100%, since we'd have several reports of it happening</p>",
        "id": 241530276,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1622811070
    },
    {
        "content": "<p>Even without hash collisions is there anything preventing a hacker from just constructing a dubious olean file with a hash matching the lean file?</p>",
        "id": 241596527,
        "sender_full_name": "Jason Rute",
        "timestamp": 1622842989
    },
    {
        "content": "<p>(I’m not saying we need to worry about such hacks, but just trying to understand the OPs question.)</p>",
        "id": 241596626,
        "sender_full_name": "Jason Rute",
        "timestamp": 1622843049
    }
]