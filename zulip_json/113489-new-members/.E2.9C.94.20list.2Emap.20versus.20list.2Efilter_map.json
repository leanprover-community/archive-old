[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list_filter_map_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">},</span>\n    <span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">list.map</span> <span class=\"n\">option.some</span> <span class=\"n\">y</span> <span class=\"bp\">→</span>\n      <span class=\"n\">list.filter_map</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.map</span> <span class=\"n\">at</span> <span class=\"n\">hyp</span> <span class=\"o\">},</span> <span class=\"n\">tauto</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.map</span> <span class=\"n\">at</span> <span class=\"n\">hyp</span> <span class=\"o\">},</span> <span class=\"n\">tauto</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ass</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.map</span> <span class=\"n\">at</span> <span class=\"n\">ass</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.cons.inj_eq</span> <span class=\"n\">at</span> <span class=\"n\">ass</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.filter_map_cons_some</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ass.1</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list_filter_map_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ass.2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293587723,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660584150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 293587950,
        "sender_full_name": "Notification Bot",
        "timestamp": 1660584243
    },
    {
        "content": "<p>Nicer version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list_filter_map_eq_of_map_eq_map_some</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">},</span>\n    <span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">list.map</span> <span class=\"n\">option.some</span> <span class=\"n\">y</span> <span class=\"bp\">→</span>\n      <span class=\"n\">list.filter_map</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>       <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>       <span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">::</span><span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">list.cons_ne_nil</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hyp.symm</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">::</span><span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">list.cons_ne_nil</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">::</span><span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">::</span><span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ass</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.map</span> <span class=\"n\">at</span> <span class=\"n\">ass</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.cons.inj_eq</span> <span class=\"n\">at</span> <span class=\"n\">ass</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.filter_map_cons_some</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ass.1</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list_filter_map_eq_of_map_eq_map_some</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ass.2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 293593078,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660586121
    },
    {
        "content": "<p>I think this first lemma is missing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.filter_map_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.filter_map</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">list.filter_map</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hmap</span> <span class=\"o\">:</span> <span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">list.map</span> <span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.filter_map</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.filter_map_eq</span><span class=\"o\">,</span> <span class=\"n\">hmap</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">list.filter_map_eq</span><span class=\"o\">,</span> <span class=\"n\">list.filter_map_some</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 293596508,
        "sender_full_name": "Reid Barton",
        "timestamp": 1660587379
    },
    {
        "content": "<p>oh it's an instance of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.filter_map_map\">docs#list.filter_map_map</a>, but backwards</p>",
        "id": 293596602,
        "sender_full_name": "Reid Barton",
        "timestamp": 1660587417
    },
    {
        "content": "<p>I'd rather add the more specific version because it isn't immediate obvious we should \"decorate\" the expression with id (and <code>library_search</code> does not succeed either).</p>",
        "id": 293598262,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660588077
    },
    {
        "content": "<p>I'll PR it then. Do we want both <code>list.filter_map_eq</code> and <code>list_filter_map_eq_of_map_eq_map_some</code> or only the latter?</p>",
        "id": 293598760,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660588294
    },
    {
        "content": "<p>I think both!</p>",
        "id": 293598992,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660588381
    },
    {
        "content": "<p>Is the name <code>list_filter_map_eq_of_map_eq_map_some</code> too long?</p>",
        "id": 293599525,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660588640
    },
    {
        "content": "<p>The lemma itself feels awkward to me. I am not sure in what kind of situation one would use it. That's sort of why I wanted to show that it was a one-liner in terms of something more general purpose.</p>",
        "id": 293599960,
        "sender_full_name": "Reid Barton",
        "timestamp": 1660588824
    },
    {
        "content": "<p>Which of them do you want to omit? Neither has proof that can be provided by <code>library_search</code> automatically.</p>",
        "id": 293600917,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660589186
    },
    {
        "content": "<p>Do you already have a use for your original lemma?</p>",
        "id": 293602075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1660589679
    },
    {
        "content": "<p>I had one situation where I wanted it. I cannot claim anything about how useful it would be for others.</p>",
        "id": 293602235,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660589740
    }
]