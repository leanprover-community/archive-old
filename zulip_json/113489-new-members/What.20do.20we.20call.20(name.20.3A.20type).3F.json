[
    {
        "content": "<p>What's the name for this syntax, eg <code>(1 : â„¤)</code>? It's not a coercion in this case. Is it a \"type ascription\"? A \"type annotation\"? Something else? Or is there no agreed upon name?</p>",
        "id": 242907197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623861491
    },
    {
        "content": "<p>Type ascription is a common term for it.</p>",
        "id": 242914159,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1623864375
    },
    {
        "content": "<p>It would also be fair in some cases to call it an \"explicit coercion\" if the purpose of the type ascription is to trigger a coercion.</p>",
        "id": 242973785,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623906897
    },
    {
        "content": "<p>Relatedly, I can't find where this syntax is actually defined (in Lean 4), so if anyone knows where that lives, would love to see it. I've looked in the usual places I think (<code>src/Lean/Parser/</code>, <code>src/Init/Notation*.lean</code>)</p>",
        "id": 242986554,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623918265
    },
    {
        "content": "<p>Are you talking about numerals explicitly or about e.g. <code>(a : Y)</code> when <code>a : X</code> and <code>X = Y</code>? These are two different things, right?</p>",
        "id": 242986663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623918334
    },
    {
        "content": "<p>I think I'm talking about the <code>X = Y</code> case, but there <code>X</code> is really full of metavariables so it seems wrong to equate it to <code>Y</code></p>",
        "id": 242987310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623918739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20do.20we.20call.20.28name.20.3A.20type.29.3F/near/242986554\">said</a>:</p>\n<blockquote>\n<p>Relatedly, I can't find where this syntax is actually defined (in Lean 4), so if anyone knows where that lives, would love to see it. I've looked in the usual places I think (<code>src/Lean/Parser/</code>, <code>src/Init/Notation*.lean</code>)</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Parser/Term.lean#L67\">https://github.com/leanprover/lean4/blob/master/src/Lean/Parser/Term.lean#L67</a></p>",
        "id": 242992195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623921806
    },
    {
        "content": "<p><code>def typeAscription := leading_parser \" : \" &gt;&gt; termParser</code></p>",
        "id": 242992220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623921827
    },
    {
        "content": "<p>which should also answer eric's question</p>",
        "id": 242992226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623921832
    },
    {
        "content": "<p>The primary effect of a type ascription is to assert that a term has a type; this has the side effect of unifying metavariables and inserting coercions where necessary, so you will usually see it in those contexts, but you can also use it when it has no effect, just to make something clear to the reader.</p>",
        "id": 242992538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623922012
    }
]