[
    {
        "content": "<p>Is there <a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_mul\">docs#div_mul</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_div\">docs#div_div</a> ?</p>",
        "id": 299028153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663266641
    },
    {
        "content": "<p>The former seems to do what you want.</p>",
        "id": 299028220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663266672
    },
    {
        "content": "<p><code>symmetry, exact div_div a b c</code> closes the goal</p>",
        "id": 299029129,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663266982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.84.9D.20.2E.2E.2E.20dividing.20by.20product/near/299029129\">said</a>:</p>\n<blockquote>\n<p><code>symmetry, exact div_div a b c</code> closes the goal</p>\n</blockquote>\n<p>This leads me back to the error: <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20.E2.84.9D.20as.20comm_group\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20.E2.84.9D.20as.20comm_group</a></p>",
        "id": 299029355,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663267074
    },
    {
        "content": "<p>hmm, I'm not seeing it in the web playground but perhaps that's because it's out of date</p>",
        "id": 299029539,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663267117
    },
    {
        "content": "<p>I'll try a more up-to-date version</p>",
        "id": 299029599,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663267133
    },
    {
        "content": "<p>It seems I need a lemma that operates on different typeclasses (and probably uses <code>hb</code> and <code>hc</code> explicitly).</p>",
        "id": 299029659,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663267146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.84.9D.20.2E.2E.2E.20dividing.20by.20product/near/299029599\">said</a>:</p>\n<blockquote>\n<p>I'll try a more up-to-date version</p>\n</blockquote>\n<p>Maybe it is my version of mathlib that is outdated.</p>",
        "id": 299029771,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663267186
    },
    {
        "content": "<p>yeah, it works on my local version of lean as well, which is pretty up-to-date</p>",
        "id": 299029861,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663267206
    },
    {
        "content": "<p><code>div_div</code> operates via a <code>division_comm_monoid</code>, which works with the reals... perhaps it used to have a different typeclass requirement</p>",
        "id": 299030059,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663267282
    },
    {
        "content": "<p>Oh. The library that Johan referenced uses <code>[division_monoid α]</code> but the library my project references uses <code>[comm_group G]</code>.</p>",
        "id": 299030089,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663267294
    },
    {
        "content": "<p>That will be the problem.</p>",
        "id": 299030112,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663267302
    },
    {
        "content": "<p>oh, are you not using mathlib?</p>",
        "id": 299030136,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663267313
    },
    {
        "content": "<p>or do you just mean your version of it</p>",
        "id": 299030215,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663267332
    },
    {
        "content": "<p>I am, but I didn't update it.</p>",
        "id": 299030224,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663267335
    },
    {
        "content": "<p>gotcha... yeah, updating should solve this</p>",
        "id": 299030276,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663267354
    },
    {
        "content": "<p>I should update mathlib and it will be fine. Thank you!</p>",
        "id": 299030277,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663267354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 299030302,
        "sender_full_name": "Notification Bot",
        "timestamp": 1663267363
    },
    {
        "content": "<p>no problem!</p>",
        "id": 299030304,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663267364
    },
    {
        "content": "<p>No need for lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 299056517,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1663278169
    },
    {
        "content": "<p>I have never seen <code>field_simp</code> being used! Is it often useful? Is it a superset of <code>simp</code> please?</p>",
        "id": 299057499,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663278670
    },
    {
        "content": "<p>Its useful for exactly this sort of goal, not a superset exactly but you can read about it here <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#field_simp\">https://leanprover-community.github.io/mathlib_docs/tactics.html#field_simp</a></p>",
        "id": 299058177,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663278983
    },
    {
        "content": "<p>Nice! You can even do a one-liner like <code>example (a b c : ℝ) : a / (b * c) = (a / b) / c := by field_simp</code>... I guess the nonzero assumptions aren't necessary</p>",
        "id": 299063886,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663282162
    },
    {
        "content": "<p>Correct. If <code>b</code> or <code>c</code> is zero, then we get zero on both sides of the equality.</p>",
        "id": 299066065,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663283428
    },
    {
        "content": "<p>That said, every time you offer me a lemma and a tactic, I will choose the lemma.</p>",
        "id": 299067832,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663284580
    },
    {
        "content": "<p>Why the preference for lemmas?</p>",
        "id": 299071280,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1663287213
    },
    {
        "content": "<p>Calling a lemma is like \"the work has already been done\", using a tactic is more like \"the computer will do the work again\".</p>",
        "id": 299072873,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663288737
    },
    {
        "content": "<p>When I use mathlib, I don't see myself as serving the needs of the computer, trying to help it out to make the computer faster. I want it to be a proof assistant for me, I don't want to think about getting the right lemma, I'd rather think in \"what is the appropriate conceptual approach\". I want the computer to serve my needs. The mathlib naming convention helps for lemma discovery, but I'd rather use powerful tactics that people have written over time that provide higher level usage patterns. field_simp is really just a collection of division related lemmas, not much more.</p>",
        "id": 299083069,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1663294728
    },
    {
        "content": "<p>Usually, I can choose between writing <code>library_search</code> to find the right lemma and writing <code>hint</code> to find the right tactic. I prefer to try the first one first whenever the situation feels like \"one step of something\".</p>",
        "id": 299125533,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663321496
    },
    {
        "content": "<p>Nevertheless, I agree that, in case you want to write it by heart, guessing the right tactic is easier than guessing the right lemma name.</p>",
        "id": 299126659,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663321972
    },
    {
        "content": "<p>The only counterpoint I have is that when proofs get long helping the computer becomes more necessary. The best thing then is nice high level tactics that can replace themselves with low level code. Does <code>squeeze_field_simp</code> exist? Or <code>field_simp?</code>? Maybe we should have one of them</p>",
        "id": 299127595,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663322351
    }
]