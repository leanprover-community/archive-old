[
    {
        "content": "<p>I tried proving the pasting lemma from general topology and I succeeded, but I can't help but think that there should be a shorter way to prove this. This is my attempt at proving it. I also phrased the theorem myself, so it might also be that some of the difficulties can be resolved by phrasing the theorem better.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A_closed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B_closed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">XeqAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">g</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">feqg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">continuous</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">use</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">xA</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">xA</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">xB</span><span class=\"o\">,</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">xA</span> <span class=\"bp\">|</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">feqg</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mem_inter</span> <span class=\"n\">xA</span> <span class=\"n\">xB</span><span class=\"o\">),</span>\n            <span class=\"n\">assumption</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>   <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">assumption</span>  <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">continuous_iff_continuous_on_univ</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">XeqAB</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">continuous_on_iff_is_closed</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">t_closed</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">apply</span> <span class=\"n\">is_closed_union</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">continuous_on</span><span class=\"bp\">.</span><span class=\"n\">preimage_closed_of_closed</span> <span class=\"n\">f_cont</span> <span class=\"n\">A_closed</span> <span class=\"n\">t_closed</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">continuous_on</span><span class=\"bp\">.</span><span class=\"n\">preimage_closed_of_closed</span> <span class=\"n\">g_cont</span> <span class=\"n\">B_closed</span> <span class=\"n\">t_closed</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">rw</span> <span class=\"n\">XeqAB</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inter_univ</span><span class=\"o\">,</span> <span class=\"n\">inter_univ</span><span class=\"o\">],</span>\n            <span class=\"n\">ext</span><span class=\"o\">,</span>\n            <span class=\"n\">split</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">mem_union</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n                <span class=\"n\">rcases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">xA</span> <span class=\"bp\">|</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">xA</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                    <span class=\"n\">left</span><span class=\"o\">,</span>\n                    <span class=\"n\">apply</span> <span class=\"n\">mem_inter</span> <span class=\"n\">xA</span> <span class=\"n\">h</span>\n                <span class=\"o\">},</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span> <span class=\"n\">xnA</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                    <span class=\"n\">right</span><span class=\"o\">,</span>\n                    <span class=\"n\">apply</span> <span class=\"n\">mem_inter</span> <span class=\"o\">(</span><span class=\"n\">exclusionAB</span> <span class=\"n\">XeqAB</span> <span class=\"n\">x</span> <span class=\"n\">xnA</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                    <span class=\"n\">assumption</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">mem_union</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">rcases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">xA</span> <span class=\"bp\">|</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">xA</span><span class=\"o\">,</span>\n                    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">xAft</span> <span class=\"bp\">|</span> <span class=\"n\">xBgt</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>   <span class=\"n\">exact</span> <span class=\"n\">xAft</span><span class=\"bp\">.</span><span class=\"mi\">2</span>    <span class=\"o\">},</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">rw</span> <span class=\"n\">feqg</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mem_inter</span> <span class=\"n\">xA</span> <span class=\"n\">xBgt</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n                        <span class=\"n\">exact</span> <span class=\"n\">xBgt</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">},</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n                    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">xAft</span> <span class=\"bp\">|</span> <span class=\"n\">xBgt</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>   <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xnA</span> <span class=\"n\">xAft</span><span class=\"bp\">.</span><span class=\"mi\">1</span>   <span class=\"o\">},</span>\n                    <span class=\"o\">{</span>   <span class=\"n\">exact</span> <span class=\"n\">xBgt</span><span class=\"bp\">.</span><span class=\"mi\">2</span>    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>ExclusionAB is used somewhere and has this code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">exclusionBA</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">XeqAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">xuniv</span> <span class=\"o\">:=</span> <span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">XeqAB</span> <span class=\"n\">at</span> <span class=\"n\">xuniv</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">xuniv</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>   <span class=\"n\">intro</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span>   <span class=\"n\">intro</span> <span class=\"n\">xnB</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xnB</span> <span class=\"n\">xuniv</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I know this is big chunk of code, but I have no idea how to structure this question better. Suggestions are welcome.</p>",
        "id": 207639291,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598019550
    },
    {
        "content": "<p>You should make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> -- one piece of code which contains all imports, opens, universes, definitions, and which someone can cut and paste and it will work on their machine without any extra stuff or thought. You're nearly there.</p>",
        "id": 207639436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598019614
    },
    {
        "content": "<p>You still need to put your two pieces of code into one and include all imports</p>",
        "id": 207639470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598019634
    },
    {
        "content": "<p>I didn't run your code, but the tactic <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#split_ifs\">tactic#split_ifs</a> is really useful for doing the sort of thing you are doing in the second set of braces.</p>",
        "id": 207639623,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1598019713
    },
    {
        "content": "<p>I believe this is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">bases</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">order</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">continuous_on</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">function</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span> <span class=\"n\">topological_space</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">exclusionAB</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">XeqAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">xuniv</span> <span class=\"o\">:=</span> <span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">XeqAB</span> <span class=\"n\">at</span> <span class=\"n\">xuniv</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">xuniv</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>   <span class=\"n\">intro</span> <span class=\"n\">xnA</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xnA</span> <span class=\"n\">xuniv</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span>   <span class=\"n\">intro</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A_closed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B_closed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">XeqAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">g</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">feqg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">continuous</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">use</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">xA</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">xA</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">xB</span><span class=\"o\">,</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">xA</span> <span class=\"bp\">|</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">feqg</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mem_inter</span> <span class=\"n\">xA</span> <span class=\"n\">xB</span><span class=\"o\">),</span>\n            <span class=\"n\">assumption</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>   <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">assumption</span>  <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">continuous_iff_continuous_on_univ</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">XeqAB</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">continuous_on_iff_is_closed</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">t_closed</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">apply</span> <span class=\"n\">is_closed_union</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">continuous_on</span><span class=\"bp\">.</span><span class=\"n\">preimage_closed_of_closed</span> <span class=\"n\">f_cont</span> <span class=\"n\">A_closed</span> <span class=\"n\">t_closed</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">continuous_on</span><span class=\"bp\">.</span><span class=\"n\">preimage_closed_of_closed</span> <span class=\"n\">g_cont</span> <span class=\"n\">B_closed</span> <span class=\"n\">t_closed</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">rw</span> <span class=\"n\">XeqAB</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inter_univ</span><span class=\"o\">,</span> <span class=\"n\">inter_univ</span><span class=\"o\">],</span>\n            <span class=\"n\">ext</span><span class=\"o\">,</span>\n            <span class=\"n\">split</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">mem_union</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n                <span class=\"n\">rcases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">xA</span> <span class=\"bp\">|</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">xA</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                    <span class=\"n\">left</span><span class=\"o\">,</span>\n                    <span class=\"n\">apply</span> <span class=\"n\">mem_inter</span> <span class=\"n\">xA</span> <span class=\"n\">h</span>\n                <span class=\"o\">},</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span> <span class=\"n\">xnA</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                    <span class=\"n\">right</span><span class=\"o\">,</span>\n                    <span class=\"n\">apply</span> <span class=\"n\">mem_inter</span> <span class=\"o\">(</span><span class=\"n\">exclusionAB</span> <span class=\"n\">XeqAB</span> <span class=\"n\">x</span> <span class=\"n\">xnA</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                    <span class=\"n\">assumption</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">mem_union</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">rcases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">xA</span> <span class=\"bp\">|</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">xA</span><span class=\"o\">,</span>\n                    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">xAft</span> <span class=\"bp\">|</span> <span class=\"n\">xBgt</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>   <span class=\"n\">exact</span> <span class=\"n\">xAft</span><span class=\"bp\">.</span><span class=\"mi\">2</span>    <span class=\"o\">},</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">rw</span> <span class=\"n\">feqg</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mem_inter</span> <span class=\"n\">xA</span> <span class=\"n\">xBgt</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n                        <span class=\"n\">exact</span> <span class=\"n\">xBgt</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">},</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n                    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">xAft</span> <span class=\"bp\">|</span> <span class=\"n\">xBgt</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>   <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xnA</span> <span class=\"n\">xAft</span><span class=\"bp\">.</span><span class=\"mi\">1</span>   <span class=\"o\">},</span>\n                    <span class=\"o\">{</span>   <span class=\"n\">exact</span> <span class=\"n\">xBgt</span><span class=\"bp\">.</span><span class=\"mi\">2</span>    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207640193,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598019997
    },
    {
        "content": "<p>So I think the main issue with this code is that you skipped a step--you wanted to talk about gluing continuous functions before developing a way to talk about gluing ordinary functions.</p>",
        "id": 207640401,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598020104
    },
    {
        "content": "<p>I proved something basically equivalent (but with a whole lot of extra language) <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/inter_union.lean\">here</a>; the file is split in two parts: first gluing in Set and then gluing in Top.</p>",
        "id": 207640552,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598020192
    },
    {
        "content": "<p>So, take pieces of the code and put it in another theorem that tells us there a glued function?</p>",
        "id": 207640637,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598020215
    },
    {
        "content": "<p>So, prove this first?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">XeqAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">feqg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207640918,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598020373
    },
    {
        "content": "<p>First you could construct the glued function. Since it is unique you might as well make it a definition, and not have this <code>∃</code> statement. Then write lemmas saying that it restricts to the original functions.<br>\nThen, you can prove that if the inputs are continuous and the sets are closed, the output is continuous.</p>",
        "id": 207641071,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598020449
    },
    {
        "content": "<p>The last part really only needs that the output restricts to the input functions on the two sets (after all, there's only one such function anyways). So you could first prove it in the form: a function whose restrictions to <code>A</code> and <code>B</code> are continuous is itself continuous. Then apply the lemmas from the Set part.</p>",
        "id": 207641271,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598020547
    },
    {
        "content": "<p>I am having some trouble defining the definition for the glued function, I have this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">glued</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">xA</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>but I don't know how to include <code> ∀ x ∈ A ∩ B, f x = g x</code>.</p>",
        "id": 207642370,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598021075
    },
    {
        "content": "<p>The general principle is that you don't include that in the definition (though you could), as it makes the definition more verbose (for one).<br>\nInstead it should be an assumption for any lemmas you prove about this definition, as really the definition only makes sense when it holds.</p>",
        "id": 207642878,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1598021309
    },
    {
        "content": "<p>Btw its fine to define a function with named arguments like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">glued</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">xA</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>instead</p>",
        "id": 207642986,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1598021360
    },
    {
        "content": "<p>I tried this, but it is not really shorter, it's just cut into pieces.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">bases</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">order</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">continuous_on</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">function</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span> <span class=\"n\">topological_space</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">exclusionAB</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">XeqAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">xuniv</span> <span class=\"o\">:=</span> <span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">XeqAB</span> <span class=\"n\">at</span> <span class=\"n\">xuniv</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">xuniv</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>   <span class=\"n\">intro</span> <span class=\"n\">xnA</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xnA</span> <span class=\"n\">xuniv</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span>   <span class=\"n\">intro</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">glued</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">xA</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">gluedAf</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xA</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">glued</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">glued</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">gluednAf</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xA</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">glued</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">glued</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">gluedABg</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xA</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xB</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">feqg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">glued</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">glued</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">feqg</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mem_inter</span> <span class=\"n\">xA</span> <span class=\"n\">xB</span><span class=\"o\">),</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">gluedBg</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xB</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">feqg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">glued</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">xA</span> <span class=\"bp\">|</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>   <span class=\"n\">exact</span> <span class=\"n\">gluedABg</span> <span class=\"n\">xA</span> <span class=\"n\">xB</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">feqg</span><span class=\"o\">},</span>\n        <span class=\"o\">{</span>   <span class=\"n\">exact</span> <span class=\"n\">gluednAf</span> <span class=\"n\">xnA</span> <span class=\"n\">f</span> <span class=\"n\">g</span>  <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">gluing</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">feqg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">glued</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">glued</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>   <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xA</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">gluedAf</span> <span class=\"n\">xA</span> <span class=\"n\">f</span> <span class=\"n\">g</span>    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>   <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">xB</span><span class=\"o\">,</span> <span class=\"n\">gluedBg</span> <span class=\"n\">xB</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">feqg</span>   <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A_closed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B_closed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">XeqAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">g</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">feqg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">glued</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">glued</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">glued</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">gluing</span> <span class=\"n\">feqg</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">continuous_iff_continuous_on_univ</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">XeqAB</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">continuous_on_iff_is_closed</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">t_closed</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">apply</span> <span class=\"n\">is_closed_union</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">continuous_on</span><span class=\"bp\">.</span><span class=\"n\">preimage_closed_of_closed</span> <span class=\"n\">f_cont</span> <span class=\"n\">A_closed</span> <span class=\"n\">t_closed</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">continuous_on</span><span class=\"bp\">.</span><span class=\"n\">preimage_closed_of_closed</span> <span class=\"n\">g_cont</span> <span class=\"n\">B_closed</span> <span class=\"n\">t_closed</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">rw</span> <span class=\"n\">XeqAB</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inter_univ</span><span class=\"o\">,</span> <span class=\"n\">inter_univ</span><span class=\"o\">],</span>\n            <span class=\"n\">ext</span><span class=\"o\">,</span>\n            <span class=\"n\">split</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">mem_union</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n                <span class=\"n\">rcases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">xA</span> <span class=\"bp\">|</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">gluedAf</span> <span class=\"n\">xA</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                    <span class=\"n\">left</span><span class=\"o\">,</span>\n                    <span class=\"n\">apply</span> <span class=\"n\">mem_inter</span> <span class=\"n\">xA</span> <span class=\"n\">h</span>\n                <span class=\"o\">},</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">gluednAf</span> <span class=\"n\">xnA</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                    <span class=\"n\">right</span><span class=\"o\">,</span>\n                    <span class=\"n\">apply</span> <span class=\"n\">mem_inter</span> <span class=\"o\">(</span><span class=\"n\">exclusionAB</span> <span class=\"n\">XeqAB</span> <span class=\"n\">x</span> <span class=\"n\">xnA</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                    <span class=\"n\">assumption</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">mem_union</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">rcases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">xA</span> <span class=\"bp\">|</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">gluedAf</span> <span class=\"n\">xA</span><span class=\"o\">,</span>\n                    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">xAft</span> <span class=\"bp\">|</span> <span class=\"n\">xBgt</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>   <span class=\"n\">exact</span> <span class=\"n\">xAft</span><span class=\"bp\">.</span><span class=\"mi\">2</span>    <span class=\"o\">},</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">rw</span> <span class=\"n\">feqg</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mem_inter</span> <span class=\"n\">xA</span> <span class=\"n\">xBgt</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n                        <span class=\"n\">exact</span> <span class=\"n\">xBgt</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">},</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">gluednAf</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n                    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">xAft</span> <span class=\"bp\">|</span> <span class=\"n\">xBgt</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>   <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xnA</span> <span class=\"n\">xAft</span><span class=\"bp\">.</span><span class=\"mi\">1</span>   <span class=\"o\">},</span>\n                    <span class=\"o\">{</span>   <span class=\"n\">exact</span> <span class=\"n\">xBgt</span><span class=\"bp\">.</span><span class=\"mi\">2</span>    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207647039,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598023314
    },
    {
        "content": "<p>Cutting things into smaller pieces is definite progress. Take a look at data.finset.basic .</p>",
        "id": 207648267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598023923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Pasting.20lemma/near/207639623\">said</a>:</p>\n<blockquote>\n<p>I didn't run your code, but the tactic <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#split_ifs\">tactic#split_ifs</a> is really useful for doing the sort of thing you are doing in the second set of braces.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"294534\">@Emiel Lanckriet</span> in case you missed it, this tactic will definitely make some of your proofs shorter</p>",
        "id": 207650539,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1598025115
    },
    {
        "content": "<p>I tried the split_ifs, but all the goals are of the form if then else = something, so not of the pure form if then else. Or am I missing something?</p>",
        "id": 207651134,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598025428
    },
    {
        "content": "<p>Oh I see, thats what I get for not running the code!</p>",
        "id": 207652903,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1598026287
    },
    {
        "content": "<p>This is your statement (without the preliminary lemma that I inlined). Please try to use mathlib indentation and line breaks, it makes everything much easier to read, especially on Zulip.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A_closed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B_closed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">XeqAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">g</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">feqg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">continuous</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">x_in</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">feqg</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">x_in</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">continuous_iff_continuous_on_univ</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"n\">A</span><span class=\"err\">ᶜ</span> <span class=\"err\">⊆</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">B_closed</span><span class=\"bp\">.</span><span class=\"n\">closure_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">closure_mono</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x_not_in</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">XeqAB</span><span class=\"o\">])</span> <span class=\"bp\">;</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_on_if</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"bp\">⟨-</span><span class=\"o\">,</span> <span class=\"n\">x_in</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">feqg</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">frontier_eq_closure_inter_closure</span><span class=\"o\">,</span> <span class=\"n\">A_closed</span><span class=\"bp\">.</span><span class=\"n\">closure_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x_in</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x_in</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">A_closed</span><span class=\"bp\">.</span><span class=\"n\">closure_eq</span><span class=\"o\">,</span> <span class=\"n\">f_cont</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">g_cont</span><span class=\"bp\">.</span><span class=\"n\">mono</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">univ_inter</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">key</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207655815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598027891
    },
    {
        "content": "<p>Of course the key trick is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_on_if\">docs#continuous_on_if</a></p>",
        "id": 207655908,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598027964
    },
    {
        "content": "<p>Thanks a lot, I will take look at it and hopefully learn something about writing more elegant code in the future.</p>",
        "id": 207689557,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598047302
    },
    {
        "content": "<p>Again, the main point is I used a stronger theorem.</p>",
        "id": 207689825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598047455
    },
    {
        "content": "<p>We could still have this version in mathlib, so feel free to PR this (but without the existential), with three lemmas stating the three properties of the explicit function.</p>",
        "id": 207689925,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598047555
    },
    {
        "content": "<p>I tried to run the code, but it doesn't recognise continuous_on_if. I have imported topology.continuous_on and opened topology. How do I fix this? I ran <code>leanproject upgrade-mathlib</code>, but that was not the problem.</p>",
        "id": 207722141,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598099128
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 207722447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598099689
    },
    {
        "content": "<p>I just copied your code, so the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is there already with these imports:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">bases</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">order</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">continuous_on</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">function</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span> <span class=\"n\">topological_space</span> <span class=\"n\">function</span>\n</code></pre></div>",
        "id": 207722760,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598100089
    },
    {
        "content": "<p>I'm sorry, I can't reproduce your issue.</p>",
        "id": 207722837,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598100194
    },
    {
        "content": "<p>Are you using current mathlib master branch?</p>",
        "id": 207722847,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598100213
    },
    {
        "content": "<p>That means commit 011a2622a83ba086a7c</p>",
        "id": 207722897,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598100269
    },
    {
        "content": "<p>(but I'm not using anything brand new here).</p>",
        "id": 207722902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598100282
    },
    {
        "content": "<p>I don't know, I tried running <code>leanproject upgrade-mathlib</code> is that sufficient, or do I need something else.</p>",
        "id": 207722906,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598100298
    },
    {
        "content": "<p>Maybe it helps to note that the <code>rintros x (x_not_in : x ∉ A),</code> line also fails with <code>'«)»' expected</code> as error.</p>",
        "id": 207722982,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598100397
    },
    {
        "content": "<p>Upgrading mathlib like this should be enough indeed.</p>",
        "id": 207723159,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598100667
    },
    {
        "content": "<p>Can you gou inside <code>_target/deps/mathlib</code> and run <code>git log</code> there to see what the latest commit?</p>",
        "id": 207723171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598100700
    },
    {
        "content": "<p>I forgot that I used this type ascription in <code>rintros</code>, that's a somewhat new feature.</p>",
        "id": 207723223,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598100736
    },
    {
        "content": "<p>Somewhat new as in: was merged yesterday.</p>",
        "id": 207723244,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598100811
    },
    {
        "content": "<p>The type ascriptions are already a couple of days old right? Yesterday was the <code>-</code> arguments for <code>rintros</code></p>",
        "id": 207723678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598101447
    },
    {
        "content": "<p>Oh yes, you're right. So I was right in the beginning, I used nothing new.</p>",
        "id": 207723805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598101682
    },
    {
        "content": "<p>I restarted everything and it worked.</p>",
        "id": 207769690,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598184111
    },
    {
        "content": "<p>So, I got your example working and changed some stuff in my proof to the more elegant solutions in yours. You said something about PR'ing the solution I had, so two how do you PR  and is this fit to be PR'ed?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">bases</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">order</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">continuous_on</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">function</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span> <span class=\"n\">topological_space</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">glued_is_f_in_A</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">glued_is_g_in_B</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">feqg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">x_in</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">feqg</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">x_in</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pastingLemma</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A_closed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B_closed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">XeqAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">g</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">feqg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">continuous_iff_continuous_on_univ</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">XeqAB</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">continuous_on_iff_is_closed</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">t_closed</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_closed_union</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">continuous_on</span><span class=\"bp\">.</span><span class=\"n\">preimage_closed_of_closed</span> <span class=\"n\">f_cont</span> <span class=\"n\">A_closed</span> <span class=\"n\">t_closed</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">continuous_on</span><span class=\"bp\">.</span><span class=\"n\">preimage_closed_of_closed</span> <span class=\"n\">g_cont</span> <span class=\"n\">B_closed</span> <span class=\"n\">t_closed</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">XeqAB</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inter_univ</span><span class=\"o\">,</span> <span class=\"n\">inter_univ</span><span class=\"o\">],</span>\n          <span class=\"n\">ext</span><span class=\"o\">,</span>\n          <span class=\"n\">split</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">mem_union</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n            <span class=\"n\">rcases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">xA</span> <span class=\"bp\">|</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n              <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">xA</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n              <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n              <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">xnA</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">right</span><span class=\"o\">,</span>\n                <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">XeqAB</span><span class=\"o\">])</span> <span class=\"k\">with</span> <span class=\"n\">xA</span> <span class=\"bp\">|</span> <span class=\"n\">xB</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n                <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">xB</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n          <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">mem_union</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">rcases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">xA</span> <span class=\"bp\">|</span> <span class=\"n\">xnA</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">xA</span><span class=\"o\">],</span>\n              <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">xAft</span> <span class=\"bp\">|</span> <span class=\"n\">xBgt</span><span class=\"o\">,</span>\n              <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">xAft</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n              <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">feqg</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mem_inter</span> <span class=\"n\">xA</span> <span class=\"n\">xBgt</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n                <span class=\"n\">exact</span> <span class=\"n\">xBgt</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">}</span>\n              <span class=\"o\">},</span>\n              <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">xnA</span><span class=\"o\">],</span>\n                <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">xAft</span> <span class=\"bp\">|</span> <span class=\"n\">xBgt</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xnA</span> <span class=\"n\">xAft</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">},</span>\n                <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">xBgt</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">}</span>\n              <span class=\"o\">}</span>\n          <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A_closed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B_closed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">XeqAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">g</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">feqg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n     <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">∧</span>\n     <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">x_in</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">feqg</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">x_in</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">pastingLemma</span> <span class=\"n\">A_closed</span> <span class=\"n\">B_closed</span> <span class=\"n\">XeqAB</span> <span class=\"n\">f_cont</span> <span class=\"n\">g_cont</span> <span class=\"n\">feqg</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207770621,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598185607
    },
    {
        "content": "<p>I don't understand why the proof became more complicated than what I wrote.</p>",
        "id": 207771237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598186532
    },
    {
        "content": "<p><code>glued_is_f_in_A</code>'s proof is so simple it doesn't really need to be stated.  And the last lemma is uselessly repeating stuff, especially since you are not using the first two lemmas.</p>",
        "id": 207771295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598186651
    },
    {
        "content": "<p>In the second lemma, you don't need that lambda, you can state <code>∀ x ∈ B, (if x ∈ A then f x else g x) = g x</code></p>",
        "id": 207771314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598186732
    },
    {
        "content": "<p>And you shouldn't be using non-terminating <code>simp</code>, those make proofs harder to maintain.</p>",
        "id": 207771365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598186771
    },
    {
        "content": "<p>As for the main lemma, you should first do a version where you don't assume <code>A ∪ B = univ</code> but conclude only <code>continuous_on _ (A ∪ B)</code>.</p>",
        "id": 207771379,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598186827
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a></p>",
        "id": 207771383,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598186849
    },
    {
        "content": "<p>Ah, ok, you meant PR'ing your version, I thought PR'ing my my attempt which did not use continuous_on_if, but thanks for the tips. I'll keep them in mind.</p>",
        "id": 207775414,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1598192061
    }
]