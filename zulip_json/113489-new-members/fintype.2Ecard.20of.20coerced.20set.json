[
    {
        "content": "<p>This looks like a fairly trivial statement, but I can't work out how to eliminate the coercion to sort:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ιa</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ιb</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ιa</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ιb</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ιa</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ιb</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">set_of</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">ιa</span> <span class=\"bp\">⊕</span> <span class=\"n\">ιb</span><span class=\"o\">)),</span>\n           <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">sl</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">ιa</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sr</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">ιb</span><span class=\"o\">),</span>\n             <span class=\"n\">σ</span> <span class=\"bp\">=</span> <span class=\"n\">sl.sum_congr</span> <span class=\"n\">sr</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"n\">ιa</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"n\">ιb</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219727008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607805922
    },
    {
        "content": "<p>(I know that I'll need to show that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.sum_congr\">docs#equiv.perm.sum_congr</a> is injective in each argument, but I can't see how to actually apply that here)</p>",
        "id": 219727059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607805979
    },
    {
        "content": "<p>Why not just construct the equiv between your set and perm ia x perm ib?</p>",
        "id": 219727664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607806776
    },
    {
        "content": "<p>The card thing is just noise because we have equiv -&gt; same card</p>",
        "id": 219727726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607806825
    },
    {
        "content": "<p>And card of prod is prod of cards</p>",
        "id": 219727737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607806847
    },
    {
        "content": "<p>Oh I see you're not asking how to prove it</p>",
        "id": 219727759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607806879
    },
    {
        "content": "<p>Why not just make the subtype or the subgroup or whatever. Maybe I don't understand the question</p>",
        "id": 219727820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607806943
    },
    {
        "content": "<p>Put simply, I want to show the cardinality of the range of <code>sum_congr</code> is the product of the cardinality of the domains</p>",
        "id": 219728224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607807499
    },
    {
        "content": "<p>I have the subgroup (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.sum_congr_subgroup\">docs#equiv.perm.sum_congr_subgroup</a>), and getting the card of that is really what I want to prove</p>",
        "id": 219728299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607807573
    },
    {
        "content": "<p>Prove an equiv between the range and the product of the domains</p>",
        "id": 219732520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607813729
    },
    {
        "content": "<p>The range as a subtype, I assume</p>",
        "id": 219732583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607813863
    },
    {
        "content": "<p>Sure</p>",
        "id": 219732636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607813952
    },
    {
        "content": "<p>Defining that obvious equivalence is proving to be frustrating: <a href=\"#narrow/stream/113489-new-members/topic/Getting.20a.20hypothesis.20that.20agrees.20with.20the.20match.20branch/near/219760278\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Getting.20a.20hypothesis.20that.20agrees.20with.20the.20match.20branch/near/219760278</a></p>",
        "id": 219761105,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607865261
    },
    {
        "content": "<p>Do you need to ever introduce this <code>{σ | ∃ (sl : equiv.perm ιa) (sr : equiv.perm ιb), σ = sl.sum_congr sr}</code> at all?</p>",
        "id": 219762065,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607867037
    },
    {
        "content": "<p>No, it just arises from unfolding <code>sum_congr_subgroup</code></p>",
        "id": 219762121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607867106
    },
    {
        "content": "<p>I thought that it might make the problem simpler</p>",
        "id": 219762128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607867121
    },
    {
        "content": "<p>I mean why introduce the subgroup in the first place</p>",
        "id": 219762185,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607867178
    },
    {
        "content": "<p>Working with a subset forces you to throw away data, the <code>sl</code> and <code>sr</code></p>",
        "id": 219762193,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607867215
    },
    {
        "content": "<p>I need the subgroup in order to work with it's quotient group</p>",
        "id": 219762199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607867240
    },
    {
        "content": "<p>Well, if you need it for some reason I would try to replace it by <code>equiv.perm ιa \\x equiv.perm ιb</code> as soon as possible</p>",
        "id": 219762210,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607867276
    },
    {
        "content": "<p>obviously there's no problem in proving that <code>sum_congr</code> is injective as a function on <code>equiv.perm ιa \\x equiv.perm ιb</code>, so this is just as good as the subgroup</p>",
        "id": 219762270,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607867342
    },
    {
        "content": "<p>but you haven't thrown away the information of <code>sl</code> and <code>sr</code> that you're trying to recover in the other thread</p>",
        "id": 219762280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607867360
    },
    {
        "content": "<p>But I can't take the quotient group by that product, without passing through <code>sum_congr</code> first</p>",
        "id": 219762343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607867445
    },
    {
        "content": "<p>well if the answer to \"what do you use X for\" is always literally a single Lean term applied to X then this conversation will be rather inefficient</p>",
        "id": 219762420,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607867611
    },
    {
        "content": "<p>I have a PR pushed showing how I use this subgroup, I think<del> <a href=\"https://github.com/leanprover-community/mathlib/issues/5279\">#5279</a></del> <a href=\"https://github.com/leanprover-community/mathlib/issues/5269\">#5269</a></p>",
        "id": 219762464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607867658
    },
    {
        "content": "<p>but what I'm trying to get across is that an object like <code>{σ | ∃ (sl : equiv.perm ιa) (sr : equiv.perm ιb), σ = sl.sum_congr sr}</code>, while it looks fine for a human because we know that <code>σ</code> determines <code>sl</code> and <code>sr</code>, is actually pretty awkward to deal with in Lean</p>",
        "id": 219762467,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607867670
    },
    {
        "content": "<p>What I want to use in <a href=\"https://github.com/leanprover-community/mathlib/issues/5269\">#5269</a> is the permutations under an equivalence class that ignores internal permutations within a and b</p>",
        "id": 219762573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607867883
    },
    {
        "content": "<p>And the quotient by this awkward-to-deal-with subgroup seemed the easiest way to do that</p>",
        "id": 219762585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607867930
    },
    {
        "content": "<p>So for example the question which started this thread is trivial and doesn't require writing down a formula for the inverse, because <code>sum_congr</code> is injective so it's a bijection onto its image</p>",
        "id": 219762668,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607868098
    },
    {
        "content": "<p>Right, but Kevin's suggestion to construct the cardinality via an equiv suggested I did need the inverse</p>",
        "id": 219762724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607868148
    },
    {
        "content": "<p>And classically you could conjure up an inverse using choice, so logically it's not necessary to have a formula for the inverse at all</p>",
        "id": 219762735,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607868172
    },
    {
        "content": "<p>Well, you're not required to do everything Kevin suggests</p>",
        "id": 219762758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607868200
    },
    {
        "content": "<p>Actually you could conjure up an inverse even without choice, since everything is finite and decidable</p>",
        "id": 219762772,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607868234
    },
    {
        "content": "<p>That's what I'd really like to know how to do</p>",
        "id": 219762822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607868278
    },
    {
        "content": "<p>Clearly it must be possible to implement this <code>inv_sum_congr</code>, but it seems easier to just avoid needing it in the first place.</p>",
        "id": 219763068,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607868621
    },
    {
        "content": "<p>Is there an easy way to convert my subgroup with a fintype instance into the finset that is its carrier? Then I assume I could use some lemmas about finset.card_image or something</p>",
        "id": 219763199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607868823
    }
]