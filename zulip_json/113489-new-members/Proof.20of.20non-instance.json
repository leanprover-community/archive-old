[
    {
        "content": "<p>Can I state that no instance of a type class can exist for a certain type? Say that there is no inhabited instance for <code>empty</code>? (My real example is proving that an empty type is not an additive group but if the answer is yes it's possible to express this I don't want the answer spoiled for how to do that one :)</p>",
        "id": 265639079,
        "sender_full_name": "Julian Berman",
        "timestamp": 1640052029
    },
    {
        "content": "<p>You could prove <code>inhabited empty → false</code></p>",
        "id": 265639210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640052133
    },
    {
        "content": "<p>Or define it if it's a type, I don't know the rules :-)</p>",
        "id": 265639249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640052177
    },
    {
        "content": "<p>Aha, I tried that, but then I tricked myself and rewrote it as <code>\\not inhabited empty</code> thinking that was equivalent (and got an error) -- but that's only the case for prop-valued things of course then?</p>",
        "id": 265639342,
        "sender_full_name": "Julian Berman",
        "timestamp": 1640052250
    },
    {
        "content": "<p>OK indeed that works with the implication, that was silly of me. Thanks.</p>",
        "id": 265639410,
        "sender_full_name": "Julian Berman",
        "timestamp": 1640052348
    },
    {
        "content": "<p>What does <code>\\not</code> do here if it doesn't translate to <code>→ false</code> as we thought?</p>",
        "id": 265662157,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640077570
    },
    {
        "content": "<p><code>\\not p</code> does translate to <code>p -&gt; false</code>, but it is only defined for <code>p : Prop</code></p>",
        "id": 265662483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640077798
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/not/src\">src#not</a></p>",
        "id": 265662530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640077807
    },
    {
        "content": "<p>on the other hand, <code>A -&gt; false</code>, being notation for a function from the type <code>A</code> to the type <code>false</code>, works for any type <code>A : Sort u</code></p>",
        "id": 265662616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640077873
    },
    {
        "content": "<p>If we wanted to, we could generalize <code>not</code> to accept arbitrary types, but this would make it different from the other logical connectives which only work on <code>Prop</code></p>",
        "id": 265662727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640077933
    },
    {
        "content": "<p>I believe there used to be a definition for <code>A -&gt; false</code>, written <code>~A</code>, in lean 2, but it's not so useful since <code>A -&gt; false</code> or <code>not (nonempty A)</code> are simple enough equivalent expressions</p>",
        "id": 265662803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640077995
    },
    {
        "content": "<p>Or simply <code>is_empty A</code>.</p>",
        "id": 265665367,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640079722
    },
    {
        "content": "<p>I just remember that about a year ago we had a discussion about the simp normal form way to say the Prop that a type was empty, and IIRC maps to false won</p>",
        "id": 265668979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640081976
    }
]