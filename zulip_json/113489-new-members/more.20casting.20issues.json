[
    {
        "content": "<p>Can someone please help with this proof? I realize I'm using subtraction within naturals, but nothing I've tried has worked on this...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Thanks!</p>",
        "id": 194874540,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1587512151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span>  I could make this work with some effort. You can probably trim this down to half the size by working on the goal instead of <code>G</code>, and I can bet someone with more experience can prove it in a couple lines or so.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)),</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">G</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"n\">occurrences</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">E</span> <span class=\"n\">at</span> <span class=\"n\">G</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"n\">occurrences</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]},</span>\n  <span class=\"n\">set</span> <span class=\"n\">zn</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">hzn</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">zn</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">zn</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">D</span> <span class=\"n\">at</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">F</span> <span class=\"n\">at</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Without the casts it wouldn't be valid, of course:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>    <span class=\"c1\">--  1</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>    <span class=\"c1\">-- 0</span>\n</pre></div>",
        "id": 194877564,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1587515145
    },
    {
        "content": "<p>Amazing, thank you! (Glad I wasn't missing something trivial...)</p>",
        "id": 194877930,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1587515627
    },
    {
        "content": "<p>These casting problems have a tendency to be tough because they're so counter-intuitive for most of us!</p>",
        "id": 194878098,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1587515780
    },
    {
        "content": "<p>If you're willing to use mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ring</span>\n</pre></div>",
        "id": 194878411,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587516206
    },
    {
        "content": "<p>If you are casting to any add_group this is the lemma <code>add_sub</code> in mathlib</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"err\">↑</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">add_sub</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"err\">↑</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">↑</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and <code>by library_search</code> should find it for you.</p>",
        "id": 194879068,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587516971
    }
]