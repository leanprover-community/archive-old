[
    {
        "content": "<p>hello im new to lean, i want to ask particular question but not sure how too post it here</p>",
        "id": 309360827,
        "sender_full_name": "lini",
        "timestamp": 1668270008
    },
    {
        "content": "<p>so i have this functions </p>\n<p>def excluded_middle : Prop :=<br>\n∀a : Prop, a ∨ ¬ a</p>\n<p>def peirce : Prop :=<br>\n∀a b : Prop, ((a → b) → a) → a</p>\n<p>def double_negation : Prop :=<br>\n∀a : Prop, (¬¬ a) → a</p>\n<p>i need to do forward proof of this <br>\nlemma peirce_of_dn :<br>\n  double_negation → peirce := </p>\n<p>but i got stuck since yesterday</p>",
        "id": 309361226,
        "sender_full_name": "lini",
        "timestamp": 1668270210
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"def\"><pre><span></span><code>∀a : Prop, a ∨ ¬ a ```\n\n```def peirce : Prop :=\n∀a b : Prop, ((a → b) → a) → a ```\n\n```def double_negation : Prop :=\n∀a : Prop, (¬¬ a) → a ```\n\n```lemma peirce_of_dn :\ndouble_negation → peirce :=```\n\nbut i got stuck since yesterday\ni need to do forward proof of this\n</code></pre></div>",
        "id": 309361595,
        "sender_full_name": "lini",
        "timestamp": 1668270422
    },
    {
        "content": "<p>Can you take another look at <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> and edit (with the <span aria-label=\"pencil\" class=\"emoji emoji-270f\" role=\"img\" title=\"pencil\">:pencil:</span> icon) your message accordingly?</p>",
        "id": 309361790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668270563
    },
    {
        "content": "<p>(In particular, the <code> ``` </code>s need to be on their own line)</p>",
        "id": 309361924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668270620
    },
    {
        "content": "<p>You can add several lines to the \"code block\" (the content between backticks):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">peirce</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">double_negation</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">peirce_of_dn</span> <span class=\"o\">:</span>\n<span class=\"n\">double_negation</span> <span class=\"bp\">→</span> <span class=\"n\">peirce</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Sorry, this is not super friendly for people who aren't used to writing markdown content. You can click on the three dots at the top right corner of this message and see what I wrote with \"View message source\"</p>",
        "id": 309362412,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668270916
    },
    {
        "content": "<p>ooooh thank you let me try it again</p>",
        "id": 309363736,
        "sender_full_name": "lini",
        "timestamp": 1668271775
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"def\"><pre><span></span><code>∀a : Prop, a ∨ ¬ a\n\ndef peirce : Prop :=\n∀a b : Prop, ((a → b) → a) → a\n\ndef double_negation : Prop :=\n∀a : Prop, (¬¬ a) → a\n</code></pre></div>\n<p>but i got stuck since yesterday<br>\ni need to do forward proof of this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">peirce_of_dn</span> <span class=\"o\">:</span>\n<span class=\"n\">double_negation</span> <span class=\"bp\">→</span> <span class=\"n\">peirce</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 309363899,
        "sender_full_name": "lini",
        "timestamp": 1668271872
    },
    {
        "content": "<p>There's no need to post it again, you can edit your original post</p>",
        "id": 309364784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668272405
    },
    {
        "content": "<p>You could start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">peirce_of_dn</span> <span class=\"o\">:</span>\n  <span class=\"n\">double_negation</span> <span class=\"bp\">→</span> <span class=\"n\">peirce</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and you only need <code>intro</code>, <code>apply</code>, and <code>exfalso</code> to complete the proof.</p>",
        "id": 309365568,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668272812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/forward.20proof/near/309365568\">said</a>:</p>\n<blockquote>\n<p>You could start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">peirce_of_dn</span> <span class=\"o\">:</span>\n  <span class=\"n\">double_negation</span> <span class=\"bp\">→</span> <span class=\"n\">peirce</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and you only need <code>intro</code>, <code>apply</code>, and <code>exfalso</code> to complete the proof.</p>\n</blockquote>\n<p>but is it not backward proof?</p>",
        "id": 309367085,
        "sender_full_name": "lini",
        "timestamp": 1668273782
    },
    {
        "content": "<p>Oh sorry, I missed the forward requirement. But once you work out a backward proof, you can extract a forward proof from it. (Instead of <code>exfalso</code>, use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/false.elim\">docs#false.elim</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/absurd\">docs#absurd</a>.)</p>",
        "id": 309367315,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668273919
    },
    {
        "content": "<p>So for example the two lines of tactics above translate to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">peirce_of_dn</span> <span class=\"o\">:</span>\n  <span class=\"n\">double_negation</span> <span class=\"bp\">→</span> <span class=\"n\">peirce</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">a</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and your task is just to fill in the underscore.</p>\n<p>I don't think you should restrict yourself to a \"forward thinking mode\" when working out the proof :)</p>",
        "id": 309367504,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668274018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/forward.20proof/near/309367315\">said</a>:</p>\n<blockquote>\n<p>Oh sorry, I missed the forward requirement. But once you work out a backward proof, you can extract a forward proof from it. (Instead of <code>exfalso</code>, use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/false.elim\">docs#false.elim</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/absurd\">docs#absurd</a>.)</p>\n</blockquote>\n<p>I tried it like this but got error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">peirce_of_dn</span> <span class=\"o\">:</span>\n  <span class=\"n\">double_negation</span> <span class=\"bp\">→</span> <span class=\"n\">peirce</span> <span class=\"o\">:=</span>\n<span class=\"n\">fix</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">hda</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">habaa</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hna</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n     <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">hna</span> <span class=\"n\">ha</span><span class=\"o\">)),</span>\n     <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">habaa</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n     <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hna</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 309367701,
        "sender_full_name": "lini",
        "timestamp": 1668274143
    },
    {
        "content": "<p>may i know what is command in forward proof that equal to apply in backward proof?</p>",
        "id": 309368178,
        "sender_full_name": "lini",
        "timestamp": 1668274419
    },
    {
        "content": "<p>The first lines don't make sense, you must intro/assume variables in the order they appear, in this case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">assume</span> <span class=\"n\">hda</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">habaa</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 309368277,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668274462
    },
    {
        "content": "<p>By the way are you using Lean 3 or Lean 4? <code>fix</code> seems not recognized at all by Lean 3.</p>",
        "id": 309368755,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668274689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/forward.20proof/near/309368755\">said</a>:</p>\n<blockquote>\n<p>By the way are you using Lean 3 or Lean 4? <code>fix</code> seems not recognized at all by Lean 3.</p>\n</blockquote>\n<p>hmm im not sure, i think i use lean 3..<br>\nfix works in my side..</p>",
        "id": 309369059,
        "sender_full_name": "lini",
        "timestamp": 1668274862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/forward.20proof/near/309368277\">said</a>:</p>\n<blockquote>\n<p>The first lines don't make sense, you must intro/assume variables in the order they appear, in this case:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">assume</span> <span class=\"n\">hda</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">habaa</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">peirce_of_dn</span> <span class=\"o\">:</span>\n  <span class=\"n\">double_negation</span> <span class=\"bp\">→</span> <span class=\"n\">peirce</span> <span class=\"o\">:=</span>\n<span class=\"c1\">--fix a b : Prop,</span>\n<span class=\"k\">assume</span> <span class=\"n\">hda</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">habaa</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hna</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n     <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">hna</span> <span class=\"n\">ha</span><span class=\"o\">)),</span>\n     <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">habaa</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n     <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hna</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the first assume becomes error</p>",
        "id": 309369393,
        "sender_full_name": "lini",
        "timestamp": 1668275072
    },
    {
        "content": "<p>There's error because the type of the fourth line and below doesn't match, it doesn't happen at the first <code>assume</code>. If you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">peirce_of_dn</span> <span class=\"o\">:</span>\n  <span class=\"n\">double_negation</span> <span class=\"bp\">→</span> <span class=\"n\">peirce</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hda</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">habaa</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and place your cursor at the underscore, you see that <code>hda a b habaa</code> are successfully assumed/introduced, but the goal is <code>a</code> and it's not <code>¬a → something</code>, so it's invalid to <code>assume hna : ¬a</code> there.</p>",
        "id": 309369925,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668275458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/forward.20proof/near/309369925\">said</a>:</p>\n<blockquote>\n<p>There's error because the type of the fourth line and below doesn't match, it doesn't happen at the first <code>assume</code>. If you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">peirce_of_dn</span> <span class=\"o\">:</span>\n  <span class=\"n\">double_negation</span> <span class=\"bp\">→</span> <span class=\"n\">peirce</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hda</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">habaa</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and place your cursor at the underscore, you see that <code>hda a b habaa</code> are successfully assumed/introduced, but the goal is <code>a</code> and it's not <code>¬a → something</code>, so it's invalid to <code>assume hna : ¬a</code> there.</p>\n</blockquote>\n<p>yah, but it means that i have to find a way to get \"a\" this is the case that i failed</p>",
        "id": 309371125,
        "sender_full_name": "lini",
        "timestamp": 1668276202
    },
    {
        "content": "<p>Since you have <code>hda</code> around you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">assume</span> <span class=\"n\">hda</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">habaa</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">nna</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">assume</span> <span class=\"n\">na</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">na</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"n\">hda</span> <span class=\"n\">a</span> <span class=\"n\">nna</span>\n</code></pre></div>",
        "id": 309371999,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668276766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/forward.20proof/near/309371999\">said</a>:</p>\n<blockquote>\n<p>Since you have <code>hda</code> around you can do</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">assume</span> <span class=\"n\">hda</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">habaa</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">nna</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">assume</span> <span class=\"n\">na</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">na</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"n\">hda</span> <span class=\"n\">a</span> <span class=\"n\">nna</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>but what does the <code>from _ </code> means?</p>",
        "id": 309373216,
        "sender_full_name": "alini",
        "timestamp": 1668277518
    },
    {
        "content": "<p>It means you need to fill in the underscore; you see a red squiggle there right? If you put your input cursor there, you see the goal is <code>a</code> again but now you have <code>(a → b) → a</code> and <code>¬a</code> in the context.</p>",
        "id": 309374249,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668278081
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">peirce_of_dn</span> <span class=\"o\">:</span>\n  <span class=\"n\">double_negation</span> <span class=\"bp\">→</span> <span class=\"n\">peirce</span> <span class=\"o\">:=</span>\n<span class=\"n\">fix</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">hda</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">habaa</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">nna</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hna</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n     <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">hna</span> <span class=\"n\">ha</span><span class=\"o\">)),</span>\n     <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">habaa</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n     <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hna</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>i tried this but the <code>lemma</code> becomes yellowa</p>",
        "id": 309374684,
        "sender_full_name": "alini",
        "timestamp": 1668278302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"563257\">lini</span> <a href=\"#narrow/stream/113489-new-members/topic/forward.20proof/near/309374684\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">peirce_of_dn</span> <span class=\"o\">:</span>\n  <span class=\"n\">double_negation</span> <span class=\"bp\">→</span> <span class=\"n\">peirce</span> <span class=\"o\">:=</span>\n<span class=\"n\">fix</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">hda</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">habaa</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">nna</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hna</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n     <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">hna</span> <span class=\"n\">ha</span><span class=\"o\">)),</span>\n     <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">habaa</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n     <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hna</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>i tried this but the <code>lemma</code> becomes yellowa</p>\n</blockquote>\n<p>means that its still error</p>",
        "id": 309374758,
        "sender_full_name": "alini",
        "timestamp": 1668278353
    },
    {
        "content": "<p>You are close! Just remove <code>fix a b</code> from the beginning and show <code>a</code> at the end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">peirce_of_dn</span> <span class=\"o\">:</span>\n  <span class=\"n\">double_negation</span> <span class=\"bp\">→</span> <span class=\"n\">peirce</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hda</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">habaa</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">nna</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hna</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n     <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">hna</span> <span class=\"n\">ha</span><span class=\"o\">)),</span>\n     <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">habaa</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n     <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hna</span> <span class=\"n\">ha</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hda</span> <span class=\"n\">a</span> <span class=\"n\">nna</span>\n</code></pre></div>",
        "id": 309375738,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668278944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/forward.20proof/near/309375738\">said</a>:</p>\n<blockquote>\n<p>You are close! Just remove <code>fix a b</code> from the beginning and show <code>a</code> at the end:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">peirce_of_dn</span> <span class=\"o\">:</span>\n  <span class=\"n\">double_negation</span> <span class=\"bp\">→</span> <span class=\"n\">peirce</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hda</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">habaa</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">nna</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hna</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n     <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">hna</span> <span class=\"n\">ha</span><span class=\"o\">)),</span>\n     <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">habaa</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n     <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hna</span> <span class=\"n\">ha</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hda</span> <span class=\"n\">a</span> <span class=\"n\">nna</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>OH MYY GOD! THANK YOUU!!!</p>",
        "id": 309375893,
        "sender_full_name": "alini",
        "timestamp": 1668279022
    }
]