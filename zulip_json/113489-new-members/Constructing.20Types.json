[
    {
        "content": "<p>I have an existing fintype <code>X</code>. I would like to produce a Type that has all of the elements of <code>X</code> except a given element <code>x</code>. Is such a construction possible? If so, what route could I take to prove that the resulting type is a <code>fintype</code>? Thanks.</p>",
        "id": 220831603,
        "sender_full_name": "Chase Norman",
        "timestamp": 1608761171
    },
    {
        "content": "<p>One simple way would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Try this: exact subtype.fintype (λ (x : α), x ≠ a)</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 220832895,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608762371
    },
    {
        "content": "<p>Without the <code>decidable_eq</code>, you don't have a decidable procedure for knowing whether two elements are the same or not, so you don't know if an element is really in your subtype.</p>",
        "id": 220832922,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608762421
    },
    {
        "content": "<p>But you can always use <code>open_locale classical</code> if you don't care about computably enumerating the values</p>",
        "id": 220836444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608766237
    }
]