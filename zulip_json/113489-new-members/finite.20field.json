[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.gptf</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Is this proved in mathlib? If not, does anyone know how to prove it? <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 246500534,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626722296
    },
    {
        "content": "<p>Instead of constantly working with existentials, you can use the existing ring_homs and ring_isos. Try <code>zmod.cast_hom</code></p>",
        "id": 246501057,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626722572
    },
    {
        "content": "<p>That goes in the other direction, but maybe it is useful</p>",
        "id": 246501123,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626722604
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.cast_hom\">docs#zmod.cast_hom</a></p>",
        "id": 246501625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626722801
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.ring_equiv\">docs#zmod.ring_equiv</a> is stronger, but I don't think you can satisfy the hypothesis</p>",
        "id": 246501888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626722913
    },
    {
        "content": "<p>The statement you want to prove is not true</p>",
        "id": 246502616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626723228
    },
    {
        "content": "<p>Not every finite field is Z/pZ</p>",
        "id": 246502700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626723255
    },
    {
        "content": "<p>Kevin reminded me of the right thing!!</p>",
        "id": 246503049,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626723427
    },
    {
        "content": "<p><code>F</code> is a finite filed of <code>char p</code>, is it true that <code>(∃ (a : F), a ^ 2 = -1) → (∃ (y : zmod p), y ^ 2 = -1)</code>. <br>\nIf so, how to get this?</p>",
        "id": 246733476,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626880189
    },
    {
        "content": "<p>This is not true. If you take a prime <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> is not a square mod <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, you can always adjoin a square-root of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> to get a finite extesion where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>Y</mi><mn>2</mn></msup><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">Y^2 = -1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> has a solution.</p>",
        "id": 246733681,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626880296
    },
    {
        "content": "<p>Is the following lemma proved in mathlib? I only noticed a weaker version for <code>zmod p</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.quadratic_reciprocity</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finite_field.exists_sq_eq_neg_one_iff_mod_four_ne_three</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">fintype.card</span> <span class=\"n\">F</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">≠</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">zmod.exists_sq_eq_neg_one_iff_mod_four_ne_three</span>\n</code></pre></div>\n<p><code>zmod.exists_sq_eq_neg_one_iff_mod_four_ne_three</code> is here<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/number_theory/quadratic_reciprocity.html#zmod.exists_sq_eq_neg_one_iff_mod_four_ne_three\">https://leanprover-community.github.io/mathlib_docs/number_theory/quadratic_reciprocity.html#zmod.exists_sq_eq_neg_one_iff_mod_four_ne_three</a></p>",
        "id": 246737498,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626882113
    },
    {
        "content": "<p>AFAIK everything we have about finite fields in general (i.e. not stuff about just Z/p) will be in <code>src.field_theory.finite.*</code></p>",
        "id": 246738119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626882404
    },
    {
        "content": "<p>and apparently there are also things which aren't about finite fields at all in there too, like Fermat-Euler and <code>mv_polynomial.evalₗ</code> (which seems to be proved under a superfluous <code>fintype K</code> assumption unless I'm missing something)</p>",
        "id": 246738302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626882491
    },
    {
        "content": "<p>The result is pretty straightforward mathematically if you know the multiplicative group is finite, and we have a more general statement that a finite subgroup of the units of any ID is cyclic somewhere in mathlib.</p>",
        "id": 246738446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626882573
    },
    {
        "content": "<p>Yeah, I saw the cyclic lemma somewhere before. If this lemma is not there, I am to do it myself :)</p>",
        "id": 246738835,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626882740
    },
    {
        "content": "<p><code>The result is pretty straightforward mathematically</code>. Indeed, no sure whether it is still straightforward when implementing.</p>",
        "id": 246738951,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626882808
    },
    {
        "content": "<p>I just wanna pre-check here to see if I can save some effort.</p>",
        "id": 246743865,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626885004
    },
    {
        "content": "<p>Is there another quick way to prove that <code>fintype.card F % 4 =1 → ∃ a : F, a ^ 2 = -1</code> for a finite field <code>F</code> without using the fact that the unit group is cyclic? <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 247139135,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627238948
    },
    {
        "content": "<p>We have that the unit group is cyclic in Lean. If all you know about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>F</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">F^\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span> is that it's a group of order 0 mod 4 then this isn't enough because it could be isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mi mathvariant=\"double-struck\">Z</mi><mo>×</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/2\\Z\\times\\Z/n\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/2</span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathbb\">Z</span></span></span></span> with the generator of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/2\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/2</span><span class=\"mord mathbb\">Z</span></span></span></span> being <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 247139767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627239712
    },
    {
        "content": "<p>There's a trick for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/p\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathbb\">Z</span></span></span></span> because then using Wilson's theorem you have the explicit solution <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mfrac><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">a=(\\frac{p-1}{2})!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.242216em;vertical-align:-0.345em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.897216em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.446108em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)!</span></span></span></span> but this doesn't work for general finite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>.</p>",
        "id": 247169920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627283544
    },
    {
        "content": "<p>Generalising this trick, I guess for general finite F you can pick one of {x, -x} for each nonzero such pair and multiply them.</p>",
        "id": 247173539,
        "sender_full_name": "David Wärn",
        "timestamp": 1627286724
    },
    {
        "content": "<p>Right! So the first observation is that the product of all the units is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> (we have this in Lean too, IIRC, indeed I just fixed the proof so that it didn't use <code>is_monoid_hom</code> yesterday), and this is because every unit other than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>±</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\pm1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">±</span><span class=\"mord\">1</span></span></span></span> has an inverse which is distinct from it so it cancels with it. Now you consider the involution <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><mo>−</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x\\mapsto -x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">x</span></span></span></span> on the units; now every orbit has size 2, so sharing them equally into two subsets with products <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>b</mi><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">ab=-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mrow><mo stretchy=\"false\">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">b=(-1)^{(q-1)/2}a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span><span class=\"mord mtight\">/2</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">a</span></span></span></span> which is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> under the hypothesis <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>≡</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">q\\equiv1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65819em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> mod <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span> (here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> is the size of the field). This might be longer to formalise than the cyclic proof though.</p>",
        "id": 247175040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627287912
    },
    {
        "content": "<p>Is the existence of finite fields proved in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finiteness</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">],</span>\n<span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"n\">F</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 248529326,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628194003
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 248532291,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628195455
    },
    {
        "content": "<p>(an unrelated tip: if you replace the <code>,</code> with <code>, by exactI</code> you don't need the <code>@</code>)</p>",
        "id": 248533498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628196121
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/field_theory/finite/basic.html\">https://leanprover-community.github.io/mathlib_docs/field_theory/finite/basic.html</a></p>",
        "id": 248534029,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628196369
    },
    {
        "content": "<p>I couldn't see a proof of existence that looks like Alex's statement there</p>",
        "id": 248534987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628196912
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/zmod/basic.html#zmod.field\">https://leanprover-community.github.io/mathlib_docs/data/zmod/basic.html#zmod.field</a> is a start, at least</p>",
        "id": 248535182,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1628197011
    },
    {
        "content": "<p>I think the <code>finite filed basic</code> file can't have it as the existence requires the use of splitting field in my memory.</p>",
        "id": 248535257,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628197054
    },
    {
        "content": "<p>ah I see the issue! do we have that there exists an irreducible polynomial of any degree? (is that even true in general - I know it's true in ℤ/pℤ but that's in turn due to the finite field construction)</p>",
        "id": 248537257,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628197829
    },
    {
        "content": "<p>because then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/adjoin_root.field\">docs#adjoin_root.field</a> probably gives us thie result instantly</p>",
        "id": 248537289,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628197843
    },
    {
        "content": "<p>that still may not be the best way to do it, though; we'd probably want a primitive polynomial if we could, because that's closer to the \"canonical\" finite field and it's nice that the root generates</p>",
        "id": 248537557,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628197970
    },
    {
        "content": "<p>to construct a field <code>F</code> of order <code>p^n = q</code>, we want it to be the splitting field of <code>x^q - x</code> over GF(p).</p>",
        "id": 248538090,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628198145
    },
    {
        "content": "<p>If the existence hasn't been established or there isn't an instant solution. I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/field_theory/splitting_field.html#polynomial.is_splitting_field\">https://leanprover-community.github.io/mathlib_docs/field_theory/splitting_field.html#polynomial.is_splitting_field</a><br>\nis the file to start with. Some lemmas there can help.</p>",
        "id": 248538386,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628198279
    },
    {
        "content": "<p>yes, that's one way — i think we can also do what I said too though, right? splitting fields seem more tricky, as we then have to toy a little to get the number of elements, whilst my idea gets it for free, I think</p>",
        "id": 248538767,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628198454
    },
    {
        "content": "<p>A long time ago (in mathlib terms) a few people worked on this at <a href=\"https://github.com/leanprover-community/mathlib/tree/finite-fields-exist\">https://github.com/leanprover-community/mathlib/tree/finite-fields-exist</a> but i don't think it made it to mathlib in the end for some reason. Maybe you can find the thread here on Julio somewhere</p>",
        "id": 248540382,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628199398
    },
    {
        "content": "<p>Specifically this line: <a href=\"https://github.com/leanprover-community/mathlib/compare/finite-fields-exist#diff-2a88a230cdd2ba9936dfcce670803cf356cb6ab2ed303ef41aa74b8e9730979fR222\">https://github.com/leanprover-community/mathlib/compare/finite-fields-exist#diff-2a88a230cdd2ba9936dfcce670803cf356cb6ab2ed303ef41aa74b8e9730979fR222</a></p>",
        "id": 248541275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628199916
    },
    {
        "content": "<p>I guess the thing to do is try merging master into that branch and work out which bits are now already merged; maybe with the help of the people who worked on it!</p>",
        "id": 248541497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628200035
    },
    {
        "content": "<p>should this thread be moved to #maths?</p>",
        "id": 248541665,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628200107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/finite.20field/near/248541497\">said</a>:</p>\n<blockquote>\n<p>I guess the thing to do is try merging master into that branch and work out which bits are now already merged; maybe with the help of the people who worked on it!</p>\n</blockquote>\n<p>You nerd-sniped me into PRing this: <a href=\"https://github.com/leanprover-community/mathlib/pull/8692\">https://github.com/leanprover-community/mathlib/pull/8692</a></p>",
        "id": 249527647,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1629056793
    },
    {
        "content": "<p>okay... so the finrank thing isn't true</p>",
        "id": 249535460,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629069879
    },
    {
        "content": "<p>splitting field of <code>n=0</code> is some nonsense, I assume probably just <code>zmod p</code> itself</p>",
        "id": 249535488,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629069946
    },
    {
        "content": "<p>im too tired to figure out whether that's a big deal or not</p>",
        "id": 249535527,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629069966
    },
    {
        "content": "<p>probably not and we'll have to carry around an <code>(n ≠ 0)</code> everywhere</p>",
        "id": 249535534,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629069985
    },
    {
        "content": "<p>it's now merged into master <span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span></p>",
        "id": 250231148,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629571141
    },
    {
        "content": "<p>Thanks for letting me know Eric <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>. Could you point me where the lemma lies?</p>",
        "id": 250231371,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1629571483
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/field_theory/finite/galois_field.html\">https://leanprover-community.github.io/mathlib_docs/field_theory/finite/galois_field.html</a></p>",
        "id": 250231451,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1629571629
    },
    {
        "content": "<p>The actual \\exists isn't there yet, but should be simple to write</p>",
        "id": 250231461,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1629571674
    }
]