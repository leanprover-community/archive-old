[
    {
        "content": "<p>Focusing on style, which of the following proof would be preferred, e.g for a contribution to mathlib ? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">exists_has_deriv_at_eq_zero&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hfb</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">b</span> <span class=\"err\">$</span> <span class=\"n\">Iio</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hff&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">c</span> <span class=\"err\">‚àà</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f&#39;</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">c</span> <span class=\"err\">‚àà</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">is_local_extr</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"n\">exists_local_extr_Ioo</span>\n    <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">hab</span>\n    <span class=\"o\">(</span> <span class=\"n\">continuous_on_Icc_of_extend_continuous_Ioo</span> <span class=\"n\">hab</span>\n      <span class=\"o\">(</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hff&#39;</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at</span><span class=\"bp\">.</span><span class=\"n\">continuous_within_at</span> <span class=\"o\">)</span>\n      <span class=\"n\">hfa</span> <span class=\"n\">hfb</span> <span class=\"o\">)</span>\n    <span class=\"o\">(</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">,</span> <span class=\"n\">if_t_t</span><span class=\"o\">]</span> <span class=\"o\">),</span>\n<span class=\"k\">let</span> <span class=\"bp\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hcextr</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"k\">in</span>\n  <span class=\"k\">have</span> <span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=</span><span class=\"err\">·∂†</span><span class=\"o\">[</span><span class=\"err\">ùìù</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"n\">eventually_eq_iff_exists_mem</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n    <span class=\"bp\">‚ü®</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">Ioo_mem_nhds</span> <span class=\"n\">hc</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hc</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_le_of_lt</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">if_false</span><span class=\"o\">]</span> <span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n  <span class=\"bp\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">hcextr</span><span class=\"bp\">.</span><span class=\"n\">congr</span> <span class=\"n\">heq</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_deriv_at_eq_zero</span> <span class=\"err\">$</span> <span class=\"n\">hff&#39;</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"bp\">‚ü©</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">exists_has_deriv_at_eq_zero&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hfb</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">b</span> <span class=\"err\">$</span> <span class=\"n\">Iio</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hff&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">c</span> <span class=\"err\">‚àà</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f&#39;</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">exists_local_extr_Ioo</span>\n    <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">hab</span>\n    <span class=\"o\">(</span> <span class=\"n\">continuous_on_Icc_of_extend_continuous_Ioo</span> <span class=\"n\">hab</span>\n      <span class=\"o\">(</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hff&#39;</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at</span><span class=\"bp\">.</span><span class=\"n\">continuous_within_at</span> <span class=\"o\">)</span>\n      <span class=\"n\">hfa</span> <span class=\"n\">hfb</span> <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">,</span> <span class=\"n\">if_t_t</span><span class=\"o\">]),</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"bp\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hcextr</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span> <span class=\"n\">hcextr</span><span class=\"bp\">.</span><span class=\"n\">congr</span> <span class=\"bp\">_</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_deriv_at_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">hff&#39;</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eventually_eq_iff_exists_mem</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">Ioo_mem_nhds</span> <span class=\"n\">hc</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hc</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_le_of_lt</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">if_false</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205295463,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595973391
    },
    {
        "content": "<p>I know its a bit off topic, but I prefer the tactic mode proof, as I find it more legible. Looking at mathlib, it seems to have a fair share of both styles, although I have never seen a long tactic mode proof there (there are long term mode proofs, which is a bit unfortunate, again, because of my readability preferences).</p>",
        "id": 205296002,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1595973738
    },
    {
        "content": "<p>I agree that tactic proofs are much easier to read <em>if you have lean turned-on to see the tactic state</em>. But if you have to read them as pure text, I honestly don't know which one is more readable</p>",
        "id": 205296212,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595973902
    },
    {
        "content": "<p>Anatole, you can write tactic proofs that are as readable as pure text as what you can get in term mode. You only need to put more type annotation to <code>have</code> or use <code>obtain</code> instead of <code>rcases</code>.</p>",
        "id": 205297392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595974684
    },
    {
        "content": "<p>For instance you can hopefully start the above proof with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">obtain</span> <span class=\"bp\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hcextr</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÉ</span> <span class=\"n\">c</span> <span class=\"err\">‚àà</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">is_local_extr</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 205297624,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595974860
    },
    {
        "content": "<p>That's way better indeed</p>",
        "id": 205297797,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595974988
    },
    {
        "content": "<p>I prefer the tactic style for readability/maintainability. Even better is a tactic style proof interspersed with comments!</p>",
        "id": 205300173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595976648
    },
    {
        "content": "<p>BTW, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_deriv_at_of_has_deriv_at_of_ne/src\">src#has_deriv_at_of_has_deriv_at_of_ne</a><br>\nPossibly it should be modified to require <code>‚àÄ·∂† y in nhds_within x {y | y ‚â† x}, has_deriv_at f (g y) y</code> instead of <code>‚àÄ...</code>.</p>",
        "id": 205443981,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596087957
    }
]