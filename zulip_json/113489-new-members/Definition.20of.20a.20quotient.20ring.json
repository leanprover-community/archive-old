[
    {
        "content": "<p>How would you declare/define the ring</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_p[x]/(x^2-2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1502em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>where p is a prime, in Lean?</p>",
        "id": 299682229,
        "sender_full_name": "RL",
        "timestamp": 1663648097
    },
    {
        "content": "<p>F_p is <code>zmod p</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod\">docs#zmod</a>), <code>F_p[x]</code> is <code>(zmod p)[X]</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial\">docs#polynomial</a>) and you can quotient a ring by an ideal with the <code>⧸</code> operator, so something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.algebra_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span> <span class=\"c1\">-- enable `R[X]` notation for `polynomial X`</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">ideal.span</span> <span class=\"o\">({</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]))</span>\n</code></pre></div>",
        "id": 299682505,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663648415
    },
    {
        "content": "<p>A shorthand is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/adjoin_root\">docs#adjoin_root</a></p>",
        "id": 299682679,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1663648598
    },
    {
        "content": "<p>Yes, I was just about to say that :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin_root</span> <span class=\"c1\">-- add this to the list of imports</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin_root</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 299682693,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663648613
    },
    {
        "content": "<p>We have custom notation for lists, vectors, matrices etc: how about custom notation <code>[some bracket] a,b,c [some close bracket]</code> for \"ideal generated by a,b,c\"? (or left ideal in the non-commutative case)?</p>",
        "id": 299693522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663657208
    },
    {
        "content": "<p>What makes \"ideal generated by\" more special than \"submodule generated by\" or \"subring generated by\" or \"intermediate field generated by\" or ...?</p>",
        "id": 299708503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663664193
    },
    {
        "content": "<p>Would <code>(gen {x, y, z} : ideal R)</code> be an acceptable spelling, where we introduce some <code>has_gen</code> typeclass that works for all subobjects? (Replace <code>gen</code> with the word or symbol of your choice)</p>",
        "id": 299708769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663664300
    },
    {
        "content": "<p>It's probably more commonly used, especially than \"subring generated by\", but of course there is nothing special about it.</p>",
        "id": 299708792,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663664310
    },
    {
        "content": "<p>It would be nice to have some notation for these things. The fact you have to specify the type of the set in Anne's first message is very annoying</p>",
        "id": 299713129,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663666285
    },
    {
        "content": "<p>I guess the common thing here is that your <code>gen</code> will be a lower adjoint between some <code>set α</code> and some subobjects of <code>α</code>.</p>",
        "id": 299713298,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663666341
    },
    {
        "content": "<p>Would <code>closure</code> be a good enough name in this case? Should it be defined as a canonical <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lower_adjoint\">docs#lower_adjoint</a>?</p>",
        "id": 299833465,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663702222
    },
    {
        "content": "<p>I don't like <code>closure</code>, as that evokes topology. (e.g., what if you want the topological closure of the ideal generated by a single element?)</p>",
        "id": 299837304,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663703662
    },
    {
        "content": "<p>Also that's a name conflict with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure\">docs#closure</a></p>",
        "id": 299837334,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663703673
    },
    {
        "content": "<p>It's already everywhere: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subring.closure\">docs#subring.closure</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.closure\">docs#submonoid.closure</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subfield.closure\">docs#subfield.closure</a> etc. For submodule/ideal it's called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.span\">docs#module.span</a> (without the \"sub\") / ideal.span, and for subalgebra/intermediate_field it's called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.adjoin\">docs#algebra.adjoin</a> (without \"sub\") / intermediate_field.adjoin. I think it would be nice to uniformize the terminologies!</p>\n<p>By the way I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.closure_neg\">docs#submodule.closure_neg</a> should be renamed span_neg and the original <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span_neg\">docs#submodule.span_neg</a> should be removed (it requires <code>ring</code> rather than <code>semiring</code>).</p>",
        "id": 299851338,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663709552
    },
    {
        "content": "<p>We could maybe call it <code>algebra.closure</code> or <code>set_like.closure</code> to disambiguate from topology?</p>",
        "id": 299853813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663710894
    },
    {
        "content": "<p>There's the generic bundled <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure_operator\">docs#closure_operator</a> but apparently not used very often</p>",
        "id": 299854826,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663711426
    },
    {
        "content": "<p>Hmm that's actually from set to set. Seems that lower_adjoint is the thing that takes a set to an algebraic structure? It's indeed intuitive that <code>closure</code> takes something to a bigger thing of the same type.</p>",
        "id": 299855167,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663711610
    },
    {
        "content": "<p>Personally, I've always used \"generate\", or some form of that word, for these constructions. Ultimately I don't care too much though.</p>",
        "id": 299860887,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663715147
    },
    {
        "content": "<p>You can't define <code>closure</code> for an arbitrary <code>set_like</code>, since you need to know that the set-theoretic intersection remains a subobject. But you might be able to have a unified definition <code>subobject_like.closure</code>.</p>",
        "id": 299862875,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1663716534
    },
    {
        "content": "<p>(Small correction, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span\">docs#submodule.span</a>, not <code>module.span</code>)</p>",
        "id": 299886562,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663738188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>, my thinking was to put it in the namespace anyway even if it doesn't hold for all subobjects. That's consistent with what I did with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_like.one_mem_graded\">docs#set_like.one_mem_graded</a></p>",
        "id": 299908855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663749880
    },
    {
        "content": "<p>oh, I just realized, there is another point of naming confusion between the algebraic and topological closures in mathlib: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.closure\">docs#ideal.closure</a> is the topological closure.</p>",
        "id": 300181509,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663859193
    },
    {
        "content": "<p>I haven't really followed the discussion above, but it's worth mentioning that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure_operator\">docs#closure_operator</a></p>",
        "id": 300182057,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663859337
    },
    {
        "content": "<p>(which is satisfied by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure\">docs#closure</a> although I couldn't find that fact in mathlib)</p>",
        "id": 300182198,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663859376
    }
]