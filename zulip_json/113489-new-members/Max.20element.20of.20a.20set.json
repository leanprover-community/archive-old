[
    {
        "content": "<p>I want to define something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I don't know how to say this in Lean. I end up using <code>finset</code>, but it looks really complicated. I don't know if it is the right way. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>  <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span>\n    <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"c1\">-- the set above is nonempty</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 166707208,
        "sender_full_name": "Joe",
        "timestamp": 1559043586
    },
    {
        "content": "<p>What do you want the answer to be if no such m exists? I mean -- if the set is empty?</p>",
        "id": 166707543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559043868
    },
    {
        "content": "<p>I can somehow guarantee it is not empty.</p>",
        "id": 166707750,
        "sender_full_name": "Joe",
        "timestamp": 1559044060
    },
    {
        "content": "<p>But I think let it be 0 will be fine too, because it will not happen anyways.</p>",
        "id": 166707835,
        "sender_full_name": "Joe",
        "timestamp": 1559044101
    },
    {
        "content": "<p>I find this in Isabelle, another theorem prover</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">define</span> <span class=\"n\">m</span> <span class=\"kp\">where</span> <span class=\"o\">[</span><span class=\"n\">abs_def</span><span class=\"o\">]:</span> <span class=\"s\">&quot;m N x = Max {m. m ≤ N ∧ x ∈ (⋃n≤N. B m n)}&quot;</span> <span class=\"kp\">for</span> <span class=\"n\">N</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>So I think if I can do this in lean that will be good</p>",
        "id": 166708024,
        "sender_full_name": "Joe",
        "timestamp": 1559044246
    },
    {
        "content": "<p>Said in another way, <br>\nif <br>\n<code>x ∈ ⋃ (M ≤ N), ⋃ (k ≤ N), A M k</code><br>\nthen <br>\nfind the largest <code>M</code> such that <code>x ∈ ⋃ (k ≤ N), A M k</code><br>\nand then <br>\nfind the largest <code>k</code> such that <code>x ∈ A M k</code></p>",
        "id": 166709045,
        "sender_full_name": "Joe",
        "timestamp": 1559045055
    },
    {
        "content": "<p>The finset approach looks fine to me. One way to fill in the sorry would be <code>if h : (the hypothesis you need) then finset.max' ... h else 37</code></p>",
        "id": 166763588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559080663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127148\">@Joe</span> In the particular case of the isabelle definition, that max is ranging over natural numbers, and there is a function specifically for that in lean: <code>nat.find_greatest P n</code> is <code>Max {m &lt;= n | P m}</code></p>",
        "id": 166763825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559080849
    },
    {
        "content": "<p>Aah, I'd forgotten about that. I remembered <code>nat.find</code> but I think that one finds the smallest one :-)</p>",
        "id": 166764227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559081188
    }
]