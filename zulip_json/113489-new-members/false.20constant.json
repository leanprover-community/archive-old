[
    {
        "content": "<p>why can i write a proof of false when i declare a false constant? can i similarly write a proof of false using a definition that returns <code>false</code> and why?</p>",
        "id": 227908396,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1614335262
    },
    {
        "content": "<p>if you use <code>constant</code> or <code>axiom</code> in Lean 3 you can do anything. That's the point of those keywords.</p>",
        "id": 227908513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614335309
    },
    {
        "content": "<p>You can also prove false using <code>meta</code>, but it's only a meta proof.</p>",
        "id": 227908533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614335322
    },
    {
        "content": "<p>oh, so constant declares a new axiom. kinda counterintuitive but thanks lol</p>",
        "id": 227908585,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1614335358
    },
    {
        "content": "<p>Note that there is not a single instance of <code>constant</code> or <code>axiom</code> in <code>src</code> of mathlib (although for all I know they might exist in the test directory or other places)</p>",
        "id": 227908586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614335360
    },
    {
        "content": "<p>I think <code>constant</code> = \"cheat with a <code>def</code>\" and <code>axiom</code> = \"cheat with a <code>theorem</code>\" in Lean 3.</p>",
        "id": 227908621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614335398
    },
    {
        "content": "<p>Just to muddle things, doc-gen says <a href=\"https://leanprover-community.github.io/mathlib_docs/find/false\">docs#false</a> is a constant</p>",
        "id": 227909945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614336192
    },
    {
        "content": "<p>but it's of type prop not of type false lol</p>",
        "id": 227909985,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1614336224
    },
    {
        "content": "<p>I guess <code>constant</code>s of type <code>Sort</code> aren't cheating?</p>",
        "id": 227910002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614336237
    },
    {
        "content": "<p>Well <code>false</code> isn't the only constant, it comes with <code>false.rec</code></p>",
        "id": 227910263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614336394
    },
    {
        "content": "<p>inductive types are axioms, don't let anyone tell you otherwise</p>",
        "id": 227910318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614336441
    },
    {
        "content": "<p>or rather, the whole collection of inductive types is one (rather complicated) axiom schema</p>",
        "id": 227910354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614336472
    },
    {
        "content": "<p>hmm so where is AC in Lean?</p>",
        "id": 227910428,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1614336499
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.choice\">docs#classical.choice</a></p>",
        "id": 227910438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614336512
    },
    {
        "content": "<p>Heh, yes, the <code>inductive</code> keyword gives you a new way of adding constants and axioms to the system :-) But this is a rather more controlled approach than the <code>constant</code> one! In particular, didn't some kid prove that it was equiconsistent with set theory at some point?</p>",
        "id": 227910443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614336519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> in programming languages you can just add new classes and methods etc. The <code>inductive</code> keyword lets you do the same sort of thing in Lean, however there is also this theorem proving part to Lean so you have to be careful not to let the user just add a random bunch of things and then prove 0 = 1, because that would break stuff. The <code>inductive</code> keyword (and its derivatives <code>structure</code> and <code>class</code>) lets the user add new classes to the system but is not logically strong enough to let them prove <code>false</code>. The <code>constant</code> and <code>axiom</code> keywords are much stronger, and indeed they are too strong if you want the system to remain consistent. But if you're just interested in writing code then consistency might not be something you're worried about.</p>",
        "id": 227910703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614336719
    },
    {
        "content": "<p>if you are just writing code you probably don't want to be using <code>constant</code> or <code>axiom</code> at all because they can't be executed</p>",
        "id": 227910831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614336800
    },
    {
        "content": "<p>(with the exception of <code>meta constant</code>s that lean specifically overrides)</p>",
        "id": 227910849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614336833
    },
    {
        "content": "<p>I'm running out of use cases for <code>constant</code> and <code>axiom</code> then.</p>",
        "id": 227910900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614336845
    },
    {
        "content": "<p>constant and axiom are good when you want to <code>sorry</code> a whole lot of things and don't want to apologize</p>",
        "id": 227910925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614336874
    },
    {
        "content": "<p>Aah -- they are warning-removers. Replace \"warning: you cheated\" with an unseen cheat!</p>",
        "id": 227910995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614336911
    },
    {
        "content": "<p>It's a bit better to use hypotheses, but if you have hundreds of hypotheses that you are carrying around, and especially if you are trying to do a proof in an advanced area and aren't trying to build everything from scratch like mathlib, axioms are a good fit</p>",
        "id": 227911163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614337029
    },
    {
        "content": "<p>a lot of targeted formalization projects fall in this camp</p>",
        "id": 227911190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614337066
    }
]