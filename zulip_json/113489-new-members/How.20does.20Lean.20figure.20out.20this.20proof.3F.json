[
    {
        "content": "<p>In TPIL 8.5, there's this mysterious line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">even</span><span class=\"o\">,</span> <span class=\"n\">odd</span>\n<span class=\"k\">with</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_zero</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">odd_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"kn\">open</span> <span class=\"n\">even</span> <span class=\"n\">odd</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_odd_zero</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">odd</span> <span class=\"mi\">0</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>I've never seen the full stop after a statement before, but somehow it makes Lean come up with the full proof that <code>¬odd 0</code> is true (can even see it with <code>#print not_odd_zero</code>, which is impregnable but uses <code>dcases_on</code>). How does it do this?</p>",
        "id": 232110667,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1616871801
    },
    {
        "content": "<p>The equation compiler can see that the only way to prove odd n only works when n is a successor, so it can see that there can be no constructor for odd 0. It's very good at stuff like this!</p>",
        "id": 232113672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616874596
    },
    {
        "content": "<p>The full stop just means \"this is the end of the proof\" ie \"we did all the cases\"</p>",
        "id": 232113746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616874632
    },
    {
        "content": "<p>Wow, it keeps being more and more powerful. Very cool!</p>",
        "id": 232114032,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1616874883
    },
    {
        "content": "<p>Also Kevin, thanks for the <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">great blog-post </a> on <code>no-confusion</code>, it was really helpful<del> — just wanted to say that the definition by the eqn compiler of <code>mytype_equal'</code> doesn't work anymore with <code>invalid pattern, 'AA' already appeared in this pattern</code>; so may be worth just editing it out</del></p>",
        "id": 232158915,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1616928453
    },
    {
        "content": "<p>You need <code>open mytype</code></p>",
        "id": 232159171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616928791
    },
    {
        "content": "<p>this is mentioned in a later code block</p>",
        "id": 232159183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616928836
    },
    {
        "content": "<p>urgh of course it's something dumb, sorry for the bother</p>",
        "id": 232159195,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1616928842
    },
    {
        "content": "<p>without that, it's interpreting <code>AA</code> as a variable name and the error says you can't have the same variable twice in a pattern</p>",
        "id": 232159244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616928886
    },
    {
        "content": "<p>There's nothing wrong with reporting a bug in a code block in a blog post, perhaps <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> can add the <code>open</code> line there so that people don't get confused in the future</p>",
        "id": 232159386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616929069
    },
    {
        "content": "<p>Fixed -- thanks! </p>\n<p>Some of those early blog posts of mine were written as I was learning the theory myself, and I wrote something when I had understood it and didn't know of a reference which was helpful to me as a mathematician. Now I kind of get what's going on with Lean in general so I tend not to write those \"beginner-type-theory\" posts any more. If you or anyone else has any requests I'd be happy to have a go at writing something...</p>",
        "id": 232161353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616931370
    }
]