[
    {
        "content": "<p>What would be the right syntax to get something like the following to work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.vector2</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.length_cons_tail</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_left_inj</span><span class=\"o\">,</span> <span class=\"n\">list.length</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector.my_map_l</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">β</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"n\">_</span>           <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">vector.nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"o\">(</span><span class=\"n\">vector.my_map_l</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">list.length_cons_tail</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pattern</span><span class=\"o\">]</span> <span class=\"n\">vector.cons</span>\n\n<span class=\"c1\">-- this does not work</span>\n<span class=\"kd\">def</span> <span class=\"n\">vector.my_map_v</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">β</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"n\">_</span>         <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">vector.nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"o\">(</span><span class=\"n\">vector.my_map_v</span> <span class=\"n\">v</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214102506,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603308606
    },
    {
        "content": "<p>I had to give lean a hint that <code>n</code>is smaller than <code>n+1</code>, but here it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.vector2</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.length_cons_tail</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_left_inj</span><span class=\"o\">,</span> <span class=\"n\">list.length</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector.my_map_l</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">β</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"n\">_</span>           <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">vector.nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"o\">(</span><span class=\"n\">vector.my_map_l</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">list.length_cons_tail</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pattern</span><span class=\"o\">]</span> <span class=\"n\">vector.cons</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector.my_map_v</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">β</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">vector.nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">vs</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">vs.head</span><span class=\"o\">)</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">vector.my_map_v</span> <span class=\"n\">vs.tail</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 214106464,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603310349
    },
    {
        "content": "<p>There's probably a better way.</p>",
        "id": 214106492,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603310362
    },
    {
        "content": "<p>Thanks!</p>\n<p>So I can just directly do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vector.my_map_v</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">β</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">vector.nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">v.head</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">vector.my_map_v</span> <span class=\"n\">v.tail</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 214106859,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603310487
    },
    {
        "content": "<p>Oh yeah that works. I don't know why lean was telling at me about well_founded_recursion.</p>",
        "id": 214107003,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603310539
    },
    {
        "content": "<p>Really, I'm defining the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vector.enumerate_from</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"n\">_</span> <span class=\"n\">_</span>           <span class=\"o\">:=</span> <span class=\"n\">vector.nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">lt_add_iff_pos_right</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">nat.succ_pos'</span><span class=\"o\">⟩,</span> <span class=\"n\">v.head</span><span class=\"o\">)</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span>\n                           <span class=\"o\">(</span><span class=\"n\">vector.map</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">fin.succ</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vector.enumerate_from</span> <span class=\"n\">m</span> <span class=\"n\">v.tail</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 214107101,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603310590
    },
    {
        "content": "<p>And it's not clear for me whether things of this nature should be expressed as variations of <code>vector.map_accumr</code> or <code>map_accuml</code> (which doesn't even exist yet), or do bespoke definitions each time</p>",
        "id": 214107251,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603310654
    },
    {
        "content": "<p>Unfortunately, while the <code>m + n</code> order makes this definition easier, it makes it that the following is a little nastier than desired:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vector.enumerate</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">vector.map</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"o\">(</span><span class=\"n\">fin.cast</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">vector.enumerate_from</span> <span class=\"mi\">0</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 214107345,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603310706
    },
    {
        "content": "<p>it's either rely on the defeq of <code>n + 0</code> in the <code>enumerate</code> defn, or in the <code>enumerate_from</code></p>",
        "id": 214107428,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603310747
    },
    {
        "content": "<p>inb4 Mario -- the problem with types like <code>vector α n</code> is that they're dependent types, which should be avoided at all costs in dependent type theory.</p>",
        "id": 214107572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603310805
    },
    {
        "content": "<p>Sorry, what is enumerate from supposed to do?</p>",
        "id": 214107574,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603310805
    },
    {
        "content": "<p>i.e. \"use lists if you possibly can\"</p>",
        "id": 214107643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603310844
    },
    {
        "content": "<p>Yeah, or define an inductive version of <code>vector</code>.</p>",
        "id": 214107674,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603310860
    },
    {
        "content": "<p>E.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">my_vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">my_vector</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">my_vector</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">my_vector</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214107869,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603310936
    },
    {
        "content": "<p>I feel like something like that already exists somewhere in mathlib, no?</p>",
        "id": 214107899,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603310950
    },
    {
        "content": "<p>That's exactly <code>fin n</code></p>",
        "id": 214107926,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603310967
    },
    {
        "content": "<p>I thought <code>fin n := {x : \\N // x &lt; n}</code>.</p>",
        "id": 214107996,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603311002
    },
    {
        "content": "<p>not in my mathlib! fin is just a subtype</p>",
        "id": 214108037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603311004
    },
    {
        "content": "<p>It's very close to <code>fin2 n</code> though...</p>",
        "id": 214108098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603311029
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Adding an element at the beginning of an `n`-tuple, to get an `n+1`-tuple -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">i.succ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">fin.cases</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 214108099,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603311030
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An alternate definition of `fin n` defined as an inductive type</span>\n<span class=\"sd\">  instead of a subtype of `nat`. This is useful for its induction</span>\n<span class=\"sd\">  principle and different definitional equalities. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">fin2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">fz</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin2</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">fs</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin2</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin2</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214108145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603311050
    },
    {
        "content": "<p>Oh right. <code>fin2</code> is the inductive version of <code>fin</code>.</p>",
        "id": 214108201,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603311081
    },
    {
        "content": "<p>Using lists is fine, until you have to provide a proof to <code>list.nth_le</code>, otherwise <code>list.nth</code> returns an <code>option a</code></p>",
        "id": 214108227,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603311095
    },
    {
        "content": "<p>So either you carry around the proof all the time, or invent it at the time of <code>list.nth_le</code></p>",
        "id": 214108252,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603311110
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">vector.nth</span> <span class=\"bp\">$</span> <span class=\"n\">vector.enumerate_from</span> <span class=\"mi\">5</span> <span class=\"bp\">$</span>\n  <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"mi\">10</span><span class=\"o\">]))</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">(5, (some 1)), (6, (some 2)), (7, (some 6)), (8, none), (9, (some 10))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 214108368,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603311156
    },
    {
        "content": "<p>using a small <code>has_repr (fin n)</code> that I wrote</p>",
        "id": 214108392,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603311173
    },
    {
        "content": "<p>I think it would be easier to define this for lists and prove separately that the list version of enumerate_from preserves the length, which would let you extend it to vectors.</p>",
        "id": 214108924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603311413
    },
    {
        "content": "<p>Of course, this requires knowing how vectors are defined, which might upset some people.</p>",
        "id": 214108966,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603311435
    },
    {
        "content": "<p>Totally. I just spent ~300 lines defining <code>vector.filter</code>, and it was that long because I was trying to work with the underlying list as little as possible.</p>",
        "id": 214109250,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603311576
    },
    {
        "content": "<p>Alternatively, it's possible to define a general induction principle for vectors, with a type similar to <code>list.rec</code> and use that as your recursor.</p>",
        "id": 214109367,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603311621
    },
    {
        "content": "<p>What would be the type of <code>vector.filter</code>?</p>",
        "id": 214111997,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603312919
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vector.filter_count</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">v.to_list.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector.filter</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v.filter_count</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">v.to_list.filter</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 214114984,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603314458
    },
    {
        "content": "<p>With a final culmination in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vector.filter_valid</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">v.filter_count</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">v.filter</span> <span class=\"n\">p</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hm'</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">vector.filter_count_nil</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hm.symm</span> <span class=\"o\">},</span>\n    <span class=\"n\">unify_equations</span> <span class=\"n\">hm'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">fin_zero_elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">fin_zero_elim</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">vector.prop_distribute'</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">v.filter</span> <span class=\"n\">p</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">vector.filter_count_imp_head</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">vector.filter_count_filter</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">],</span>\n      <span class=\"n\">apply</span> <span class=\"n\">vector.filter_count_imp_tail</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">vector.filter_count_filter</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214115024,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603314481
    },
    {
        "content": "<p>Of course, it'd be much easier to prove the validity by accessing the underlying list, but where is the fun in that?</p>",
        "id": 214115105,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603314505
    },
    {
        "content": "<p>Oh ok, I was just wondering how you were handling the length.</p>",
        "id": 214115132,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603314521
    },
    {
        "content": "<p>Yeah, passing around a proof of it and using it. So in practical use, it looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">vector.nth</span> <span class=\"bp\">$</span> <span class=\"n\">vector.reduce_some</span> <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"bp\">$</span> <span class=\"n\">matrix.ravel</span>\n      <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"bp\">♞</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">chess.colored_pieces</span><span class=\"o\">)),</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]]))</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">♞, ♞, ♘, ♘</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 214115423,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603314653
    },
    {
        "content": "<p>Where you can fill in the expected \"function\" of unknown functions, in that example.</p>",
        "id": 214115470,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603314687
    },
    {
        "content": "<p>The proof term for the filtering is the magic <code>rfl</code></p>",
        "id": 214115491,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603314698
    },
    {
        "content": "<p>and <code>__</code> is just <code>option.none</code></p>",
        "id": 214115524,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603314710
    }
]