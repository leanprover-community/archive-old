[
    {
        "content": "<p>What's the reason, or the use-case of having distinct Type-valued and general Sort-valued analogous definitions like <code>prod</code>/<code>pprod</code> and the like? I don't understand why one doesn't have just the more general <code>pprod</code> and uses that in all situations, even when only <code>Types</code> are involved; it seems like in principle you could do that. So, what's the reason for this design? Thanks in advance!</p>",
        "id": 234018298,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618119908
    },
    {
        "content": "<p><code>pprod</code> is a straight generalization of <code>prod</code>, so it can be used anywhere <code>prod</code> is, in principle. But the target universe of <code>pprod</code> is <code>Sort (max 1 u v)</code> which can be difficult to unify with other things</p>",
        "id": 234018622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618120313
    },
    {
        "content": "<p>In particular, there is no solution to the equation <code>Sort (max 1 u v) = Type ?</code>, so an arbitrary <code>pprod</code> will not be accepted where a <code>Type ?</code> is required</p>",
        "id": 234018712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618120416
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">pprod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 234018764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618120466
    },
    {
        "content": "<p>I don't know much about how unification works, so I'm just speaking intuitively and I'm probably wrong, but since <code>max 1 u v</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\ge 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, isn't it always a <code>Type</code>, namely <code>Type (max 1 u v) - 1</code>, so to say? Isn't <code>Type u</code> just a notation for <code>Sort (u + 1)</code>?</p>",
        "id": 234019574,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618121369
    },
    {
        "content": "<p>Or is this not the way things work?</p>",
        "id": 234019667,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618121500
    },
    {
        "content": "<p>The problem is that <code>-1</code> isn't a thing</p>",
        "id": 234019823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618121705
    },
    {
        "content": "<p>the syntax of levels contains <code>0</code>, <code>_ + 1</code>, <code>max _ _</code>, <code>imax _ _</code> and variables</p>",
        "id": 234019851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618121738
    },
    {
        "content": "<p>In that language, there is no term representing <code>max 1 u v - 1</code>, even though that is a natural number</p>",
        "id": 234019907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618121789
    },
    {
        "content": "<p>I knew I couldn't write <code>-1</code> there in Lean, but I thought that maybe internally, in the implementation Lean could do other natural number manipulations besides what I'm allowed to write in universe arguments. But I get it now, thanks!</p>",
        "id": 234020016,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618121969
    },
    {
        "content": "<p>The unification algorithm, when faced with the goal <code>max 1 u v = ? + 1</code>, has to find an actual term for <code>?</code> making the two sides equal, and there is no such term (there is if you substitute <code>u+1</code> for <code>u</code> and <code>v+1</code> for <code>v</code>, though)</p>",
        "id": 234020215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618122161
    },
    {
        "content": "<p>that impoverished grammar is actually baked into the kernel (and external typecheckers), so the elaborator isn't allowed to do magic with it</p>",
        "id": 234020235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618122205
    },
    {
        "content": "<p>So universes are represented in the kernel as actual terms in the language you described, not as some generic natural number datatype, right?</p>",
        "id": 234020346,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618122325
    },
    {
        "content": "<p>right</p>",
        "id": 234020356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618122334
    },
    {
        "content": "<p>They can't be generic natural numbers anyway, because they have variables in them, <code>u</code> and <code>v</code></p>",
        "id": 234020362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618122354
    },
    {
        "content": "<p>In fact, if these were numbers there would be no problem: <code>max 1 0 4 = ? + 1</code> has a solution</p>",
        "id": 234020411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618122383
    },
    {
        "content": "<p>They can't be arbitrary terms of type <code>nat</code> either, because that would be inconsistent (which is a fun paradox)</p>",
        "id": 234020467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618122472
    },
    {
        "content": "<p>The paradox, by the way, involves the question of what universe <code>λ n, Type n</code> lives in; it's not hard to go from that to girard's paradox</p>",
        "id": 234020648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618122641
    },
    {
        "content": "<p>Indeed, thank you, I think all is clear now with regards to unification</p>",
        "id": 234020698,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618122703
    },
    {
        "content": "<p>The paradox does seem interesting, I'll try to see how to get to Girard's paradox from there</p>",
        "id": 234020766,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618122783
    }
]