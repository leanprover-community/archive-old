[
    {
        "content": "<p>A pattern that I keep encountering is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n<p>Is there an idiom that does this at once? Thanks, and sorry all for the many questions...</p>",
        "id": 211947352,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1601574262
    },
    {
        "content": "<p>It's not much shorter, but I would suggest <code>subst h</code> instead if possible</p>",
        "id": 211947695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601574440
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 211948189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601574664
    },
    {
        "content": "<p>Not saying that is <em>nice</em> solution</p>",
        "id": 211948216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601574676
    },
    {
        "content": "<p>You can get that down to <code>obtain rfl|h := em (A=B)</code></p>",
        "id": 211948627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601574885
    },
    {
        "content": "<p>Thanks, from all your answers I guess the short answer to my question is NO, and the longer one is what <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> first replied...</p>",
        "id": 211955970,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1601577976
    },
    {
        "content": "<p>The <code>subst</code> doesn't do the cases though, it's just a better way of doing the rewrite. The obtain trick does everything.</p>",
        "id": 211956578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601578227
    },
    {
        "content": "<p>rcases eq_or_lt_of_le (nat.zero_le x) with rfl|H is something I do sometimes.</p>",
        "id": 211958434,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601579011
    },
    {
        "content": "<p>But of course with more complicated les</p>",
        "id": 211958480,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601579037
    }
]