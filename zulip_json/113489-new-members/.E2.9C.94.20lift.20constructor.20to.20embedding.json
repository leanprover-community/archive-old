[
    {
        "content": "<p>Hi! New user coming from Coq here, though this question is unrelated to anything that's easy in Coq.</p>\n<p>Say I have an inductive like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>Is there any way to lift the constructor <code>foo.bar : nat -&gt; foo</code> to the embedding <code>nat \\hookrightarrow foo</code>?</p>",
        "id": 274410195,
        "sender_full_name": "Jessie Grosen",
        "timestamp": 1646668181
    },
    {
        "content": "<p>Right now I'm defining</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo.bar'</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">\\</span><span class=\"n\">hookrightarrow</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">foo.bar</span><span class=\"o\">,</span> <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"n\">foo.bar.inj</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>which isn't <em>that</em> bad honestly, but I wish I could use the syntax <code>\\u foo.bar</code> or something.</p>",
        "id": 274410400,
        "sender_full_name": "Jessie Grosen",
        "timestamp": 1646668268
    },
    {
        "content": "<p>I don't think there is an auto-generated lemma <code>function.injective foo.bar</code>. So you probably need to prove that first, and then bundle it up into an embedding.</p>",
        "id": 274410402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646668269
    },
    {
        "content": "<p>Fair enough!</p>",
        "id": 274410484,
        "sender_full_name": "Jessie Grosen",
        "timestamp": 1646668313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"484038\">Jessie Grosen</span> has marked this topic as resolved.</p>",
        "id": 274410552,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646668327
    },
    {
        "content": "<p>Someone (not me) might be able to write a bit of meta-code so that you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[embedding]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"bp\">....</span>\n</code></pre></div>\n<p>and get the embedding without too many extra symbols.</p>",
        "id": 274410657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646668365
    },
    {
        "content": "<p>Huh, this actually works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.embedding</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`#</span><span class=\"n\">mk_emb</span> <span class=\"bp\">`</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">embedding.mk</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">injection</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo.bar_emb</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"n\">mk_emb</span> <span class=\"n\">foo.bar</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo.bar_emb</span>\n<span class=\"c1\">-- foo.bar_emb : ℕ ↪ foo</span>\n</code></pre></div>",
        "id": 274411321,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646668658
    },
    {
        "content": "<p>It seems that as in Coq, tactics-in-terms allow you to do crazy things!</p>",
        "id": 274411801,
        "sender_full_name": "Jessie Grosen",
        "timestamp": 1646668818
    },
    {
        "content": "<p>If you pair that with the <code>@[simps]</code> attribute, you can get the simp lemma <code>foo.bar_emb_apply : ∀ (ᾰ : ℕ), ⇑foo.bar_emb ᾰ = foo.bar ᾰ</code> for free</p>",
        "id": 274412220,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646668888
    }
]