[
    {
        "content": "<p>Would it make sense to have a command that performs <code>hint</code> and <code>library_search</code> simultaneously?</p>",
        "id": 306460623,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666880559
    },
    {
        "content": "<p>That sounds <em>really</em> expensive.</p>",
        "id": 306463686,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1666881542
    },
    {
        "content": "<p>Neither <code>hint</code> nor <code>library_search</code> uses more than half cores of my processor. What would be so expensive?</p>",
        "id": 306467815,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666882628
    },
    {
        "content": "<p>Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">lhint</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">library_search</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">hint</span> <span class=\"o\">]</span>\n</code></pre></div>\n<p>first tries <code>library_search</code> showing its output if it succeeds.  If <code>library_search</code> fails, then it does <code>hint</code>.</p>\n<p>I do not know how to produce the output of both tactics, when the first one succeeds, though.</p>",
        "id": 306470844,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666883404
    },
    {
        "content": "<p>Can I do it in parallel (two threads) please?</p>",
        "id": 306477987,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666885337
    },
    {
        "content": "<p>As for getting the output of both tactics, I am not interested in <code>hint</code> when <code>library search</code> succeeds.</p>",
        "id": 306478178,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666885395
    },
    {
        "content": "<p>Given that both <code>hint</code> and <code>library_search</code> are liable to cause timeouts, won't running them in parallel just make them even less likely to succeed even when they might both succeed when run separately?</p>",
        "id": 306478634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666885515
    },
    {
        "content": "<p>In any case, I do not know how to run the two tactics in parallel...</p>",
        "id": 306494424,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666889864
    },
    {
        "content": "<p>Maybe I am completely wrong, but I believe that such a thing cannot me implemented inside Lean. We would probably need to run two Lean instances at the same time, which would require an external script / change in the Lean plugin for VSO. In such a case, it would probably not be worth the effort. Please, prove me wrong tho!</p>",
        "id": 306525717,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666900053
    },
    {
        "content": "<p>I believe this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">lhint</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">retrieve</span> <span class=\"o\">(</span><span class=\"n\">async</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">library_search</span><span class=\"o\">]),</span>\n  <span class=\"n\">async</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">hint</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 306542467,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666905671
    },
    {
        "content": "<p>I have no idea whether what kevin says is true, but it doesn't seem clear to me that the different async threads would respect the same timeout limit</p>",
        "id": 306542544,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666905710
    },
    {
        "content": "<p>That looks wrong to me; doesn't it wait for the first task before starting the second?</p>",
        "id": 306550829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666909670
    },
    {
        "content": "<p>Nope, if you do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">lhint</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">retrieve</span> <span class=\"o\">(</span><span class=\"n\">async</span> <span class=\"bp\">$</span> <span class=\"n\">sleep</span> <span class=\"mi\">10000</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">library_search</span><span class=\"o\">]),</span>\n  <span class=\"n\">async</span> <span class=\"o\">(</span><span class=\"n\">sleep</span> <span class=\"mi\">1000</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">hint</span><span class=\"o\">])</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">lhint</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>its quite clear that the output of the second comes first</p>",
        "id": 306555815,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666912237
    },
    {
        "content": "<p>Perhaps <a href=\"https://leanprover-community.github.io/mathlib_docs/find/retrieve\">docs#retrieve</a> isn't what I thought it was</p>",
        "id": 306556215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666912487
    },
    {
        "content": "<p>I'm not at lean, but what does this do?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">lhint</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">X</span> <span class=\"bp\">←</span> <span class=\"n\">retrieve</span> <span class=\"o\">(</span><span class=\"n\">async</span> <span class=\"bp\">$</span> <span class=\"n\">sleep</span> <span class=\"mi\">10000</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"mi\">37</span><span class=\"o\">),</span>\n  <span class=\"n\">async</span> <span class=\"o\">(</span><span class=\"n\">sleep</span> <span class=\"mi\">1000</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tactic.trace</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 306556387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666912584
    },
    {
        "content": "<p>Surely that has to run the first block to completion before the second can run?</p>",
        "id": 306556500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666912668
    },
    {
        "content": "<p>The thing run inside <code>async</code> has to be an <code>itactic</code> (which is <code>tactic unit</code>) so it doesn't compile</p>",
        "id": 306558076,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666913767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Simultaneously.20hint.20and.20library_search/near/306556215\">said</a>:</p>\n<blockquote>\n<p>Perhaps <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.retrieve\">docs#tactic.retrieve</a> isn't what I thought it was (edit: it's the tactic I can never find when I want!)</p>\n</blockquote>\n<p>I also always have difficulty remembering the name of this (and other similar tactics) they're annoyingly hard to find</p>",
        "id": 306558125,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666913846
    },
    {
        "content": "<p>I was expecting it to have a signature like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.run_async\">docs#tactic.run_async</a> I think</p>",
        "id": 306558660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666914249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> sorry, I misinterpreted. I thought you wanted some kind of combination <code>hint</code> + <code>library_search</code> that would somehow link outputs, not just run them in parallel.</p>",
        "id": 306562297,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1666917025
    },
    {
        "content": "<p>I do not think that I had ever seen <code>retrieve</code> or <code>async</code>!</p>\n<p>Why does <code>async</code> report its output on <code>example</code>, rather than on the tactic?</p>",
        "id": 306575092,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666924812
    },
    {
        "content": "<p>That is, when doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">lhint</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">retrieve</span> <span class=\"o\">(</span><span class=\"n\">async</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">library_search</span><span class=\"o\">])</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">hint</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">lhint</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the outcome of <code>library_search</code> is on <code>example</code>, while the outcome of <code>hint</code> is on <code>lhint</code>.  The <code>Try this</code> also replaces the <code>example</code> for <code>library_search</code>.</p>",
        "id": 306575185,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666924936
    }
]