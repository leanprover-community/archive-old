[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">int</span><span class=\"bp\">/</span><span class=\"n\">gcd.lean</span><span class=\"o\">:</span><span class=\"kd\">theorem</span> <span class=\"n\">pow_dvd_pow_iff</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 275564363,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647458294
    },
    {
        "content": "<p>OK, thanks. <code>library_search</code> fails on that...</p>",
        "id": 275564671,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647458473
    },
    {
        "content": "<p>Yeah, I guessed that it wouldn't be stated for squares specifically</p>",
        "id": 275564811,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647458537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> has marked this topic as resolved.</p>",
        "id": 275564953,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647458642
    },
    {
        "content": "<p>Note that <code>int.pow_dvd_pow_iff</code> and <code>pow_dvd_pow_iff</code> are quite different statements...</p>",
        "id": 275655301,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647525209
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.pow_dvd_pow_iff\">docs#int.pow_dvd_pow_iff</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_dvd_pow_iff\">docs#pow_dvd_pow_iff</a></p>",
        "id": 275656776,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647525760
    },
    {
        "content": "<p>I wonder what the consistent naming for this would be...</p>",
        "id": 275656907,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647525816
    },
    {
        "content": "<p><code>iff_le</code>/<code>iff_dvd</code>?</p>",
        "id": 275661381,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647527490
    }
]