[
    {
        "content": "<p><strong>UPDATE:</strong> Nevermind, I think I found my mistake. My <code>fx</code> definition is wrong (mathematically, not \"lean\"-wise).</p>\n<hr>\n<p>Hi, I am still quite new to lean, and I am struggling to finish this proof. Currently I have these primitives, the main one being H:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">x₀ε</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">ε_pos</span><span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">δ</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">fx</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">¬</span><span class=\"n\">seq_limit</span> <span class=\"n\">fx</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>H is a special case of f <em>not</em> being pointwise convergence at x0. The idea is that since I can find x closer and closer to x0 yet is not epsilon-close to f x0, it means it cannot be sequential convergence, since {x} -&gt; x0 yet {f x} does not -&gt; x0. However, I can't seem to finish off the proof. Can someone help? Here is my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 0074</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">x₀</span> <span class=\"bp\">→</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"n\">continuous_at_pt</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">continuous_at_pt</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩,</span>\n\n  <span class=\"c1\">-- \"approaching functions\" definitions</span>\n  <span class=\"k\">let</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">fx</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n\n  <span class=\"c1\">-- auxillary lemma</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">nat.one_div_pos_of_nat</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n\n  <span class=\"c1\">-- convergence lemmas</span>\n  <span class=\"k\">have</span> <span class=\"n\">f_x_conv</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">fx</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x₀</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">limit_const_add_inv_succ</span> <span class=\"n\">x₀</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">f_x_not_conv</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">seq_limit</span> <span class=\"n\">fx</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">clear</span> <span class=\"n\">h</span> <span class=\"n\">f_x_conv</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">seq_limit</span><span class=\"o\">,</span>\n    <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"c1\">-- ???</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 322308337,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674141991
    }
]