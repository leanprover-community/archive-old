[
    {
        "content": "<p>The result of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">borel_space</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">borel_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">ℝ</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>If I do <code>#print instances topological_space</code> there is no instance of <code>topological_space ℝ</code>.  </p>\n<p>On the other hand <code>#print instances measurable_space</code> produces <code>real.measurable_space</code>.</p>\n<p>The definition for <code>real.borel_space</code> doesn't say what instance of <code>topological_space ℝ</code> is chosen, it just says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">real.borel_space</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>How do I tell what<code>topological_space ℝ</code> instance was chosen or constructed for <code>real.borel_space</code>?</p>",
        "id": 219425921,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607567415
    },
    {
        "content": "<p>I believe it's from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.metric_space\">docs#real.metric_space</a></p>",
        "id": 219426312,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607567989
    },
    {
        "content": "<p>You can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>and trace it backwards.</p>",
        "id": 219426438,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607568152
    },
    {
        "content": "<p>I am trying to figure out how to fill out the arguments to <code>@borel_space</code>, which says it wants an <code>[_inst_1 : topological_space ℝ] </code>.  However  the result of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[instance]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">measurable_eq</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"n\">real.measurable_space</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>The sequence of definitions appears to be looping <code>borel_space</code> requires <code>topological_space</code> which reduces to <code>borel_space</code>.   But neither is declared as an alias of the other in <code>mathlib</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">borel_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">measurable_eq</span> <span class=\"o\">:</span> <span class=\"o\">‹</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"bp\">=</span> <span class=\"n\">borel</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[protect_proj]</span> <span class=\"kd\">structure</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_open</span>        <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_open_univ</span>   <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_open_inter</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">is_open_sUnion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">t</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"bp\">⋃₀</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">topological_space</span>\n</code></pre></div>",
        "id": 219426823,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607568752
    },
    {
        "content": "<p>The class <code>borel_space</code> requires <code>topological_space</code> as an input, and it does not extend <code>topological_space</code>. So whatever lean finds for the <code>topological_space</code> is the instance that is used. I assume the whole point of the <code>borel_space</code> class is so that you have have measurable spaces which also happen to be topological spaces without requiring the sigma algebra to be the Borel algebra.</p>",
        "id": 219428204,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607570711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> 's answer is perfect.  I didn't see it to begin with because I ran it in a context where <code>borel_space</code> was imported. </p>\n<p>However if you just do <code>import analysis.normed_space.basic</code> as she does then it works and gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">uniform_space.to_topological_space</span>\n</code></pre></div>\n<p>So the answer is that ℝ can be seen as a <code>uniform_space</code> and then transformed into a <code>topological_space</code>.  ℝ is not a <code>uniform_space</code> out of the box, so we can repeat the exercise:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo1</span>\n</code></pre></div>\n<p>This gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">metric_space.to_uniform_space'</span>\n</code></pre></div>\n<p>and <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/metric_space/basic.html#real.metric_space\">real.metric_space</a> is in <code>mathlib</code>.  </p>\n<p>So that's the chain: <code>metric_space</code> to <code>uniform_space</code> to <code>topological_space</code> to <code>borel_space</code>.  Nice!</p>",
        "id": 219429713,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607572818
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> !!</p>",
        "id": 219429813,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607572930
    },
    {
        "content": "<p>If I understand the comments above, the topology on R comes from the metric_space sructure, which induces a uniform_space structure which then induces a topological_space structure.</p>",
        "id": 219429973,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607573157
    },
    {
        "content": "<p>I think the borel_space is separate.</p>",
        "id": 219430027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607573176
    },
    {
        "content": "<p>There is a borel_space instance declared explicitly in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.borel_space\">docs#real.borel_space</a></p>",
        "id": 219430083,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607573277
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 219430144,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607573332
    },
    {
        "content": "<p>Yes it only got in there because I was looking at @borel_space and what arguments it requires.   You can just say <code>borel_space ℝ</code> and it works.  But I wanted to know how to fill in all the slots without using <code>_</code> in <code>@borel_space</code>.  When you run Heather's technique in a context where <code>borel_space</code> is imported, it is not informative.  When you run it where only <code>import analysis.normed_space.basic</code> is imported, it is informative.</p>",
        "id": 219430197,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607573386
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">borel</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- now it works.</span>\n</code></pre></div>",
        "id": 219430275,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607573421
    },
    {
        "content": "<p>Maybe that example is more helpful in understanding what's happening...</p>",
        "id": 219430281,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607573432
    },
    {
        "content": "<p>I am trying to figure out how to make <code>borel_space</code> of the real interval <code>[0,1]</code>.</p>",
        "id": 219430322,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607573495
    },
    {
        "content": "<p>What's your definition of <code>[0,1]</code>?</p>",
        "id": 219430393,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607573574
    },
    {
        "content": "<p>The set {x : 0 \\leq x \\leq 1}.</p>",
        "id": 219430404,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607573605
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n<span class=\"kd\">instance</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">borel</span> <span class=\"n\">I</span>\n<span class=\"kd\">instance</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- now it works.</span>\n</code></pre></div>",
        "id": 219430471,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607573678
    },
    {
        "content": "<p>I was asking how you defined <code>[0,1]</code> in lean :) I assume it's approximately the subtype I defined above.</p>",
        "id": 219430495,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607573727
    },
    {
        "content": "<p>So I have to make sure in the constructor </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">borel_space</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>that I have a type for <code>[0,1]</code> like <code>set.Icc 0 1</code> and a <code>topological_space</code> instance of [0,1] and a <code>measurable_space</code> instance of [0,1].</p>",
        "id": 219430504,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607573756
    },
    {
        "content": "<p>Note that set.Icc is a set, not a type. But since I declared it to be a type using the type ascription for <code>I</code>, lean automatically made into a type with the <code>subtype</code> construction.</p>",
        "id": 219430564,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607573817
    },
    {
        "content": "<p>That's why I was trying to figure out where the <code>topological_space ℝ</code> was proven so that I could figure out how  to prove <code>topological_space (set.Icc 0 1)</code>.</p>",
        "id": 219430571,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607573832
    },
    {
        "content": "<p>I assume that the topological space instance on a subset of a topological space is the one given by the subspace topology (that's the sensible thing), but I didn't check explicitly.</p>",
        "id": 219430578,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607573849
    },
    {
        "content": "<p>I'm trying to learn all these pieces.</p>",
        "id": 219430587,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607573871
    },
    {
        "content": "<p>Are you using vscode?</p>",
        "id": 219430753,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607574113
    },
    {
        "content": "<p>Yes, I'm just trying your example.  It works, thanks!</p>",
        "id": 219430809,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607574164
    },
    {
        "content": "<p>If so, paste the following code, and click the link that <code>show_term</code> gives.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 219430818,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607574178
    },
    {
        "content": "<p>That's another trick to get the definition of the instance.</p>",
        "id": 219430830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607574195
    },
    {
        "content": "<p>That's great, thank you!</p>",
        "id": 219430876,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607574248
    },
    {
        "content": "<p>If you do that, you can see that the set is given the subspace topology from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.topological_space\">docs#subtype.topological_space</a></p>",
        "id": 219430887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607574269
    },
    {
        "content": "<p>I am trying to make the structure ([0,1], B([0,1]), P) where P is the real volume restricted to [0,1].  So, a probability space.</p>",
        "id": 219431063,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607574590
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.lebesgue_measure</span>\n<span class=\"k\">#check</span> <span class=\"n\">measure_theory.real.measure_space.volume</span> <span class=\"c1\">-- measure_theory.measure_space.volume : measure_theory.measure ℝ</span>\n</code></pre></div>",
        "id": 219431348,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607574934
    },
    {
        "content": "<p>I suspect something like this is somewhere in mathlib already. Hopefully someone with more familiarity of the measure_theory library would help...</p>",
        "id": 219431434,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607575048
    },
    {
        "content": "<p>Almost all there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.lebesgue_measure</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n<span class=\"kd\">instance</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">borel</span> <span class=\"n\">I</span>\n<span class=\"kd\">instance</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">B01</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- now it works.</span>\n<span class=\"k\">#check</span> <span class=\"n\">B01</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">measure_theory.real.measure_space.volume</span>\n<span class=\"k\">#check</span> <span class=\"n\">μ</span> <span class=\"c1\">-- μ : measure_theory.measure ℝ</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">probability_measure</span> <span class=\"n\">μ</span> <span class=\"c1\">-- probability_measure μ : Prop</span>\n</code></pre></div>",
        "id": 219431546,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607575227
    },
    {
        "content": "<p>There is no official structure in <code>mathlib</code> for <code>probability_space</code> but there is <code>probability_measure</code> and <code>measure_space</code> so that's about it.</p>",
        "id": 219431629,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607575342
    },
    {
        "content": "<p>I have to subtype <code>measure_theory.real</code> to [0,1] and the act of subtype should bless the <code>volume</code> as being subtype.</p>",
        "id": 219431755,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607575548
    },
    {
        "content": "<p>The easiest way to check all these things is like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.lebesgue_measure</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"c1\">-- not ok :(</span>\n</code></pre></div>\n<p>So it appears that it has not yet been proven that subtypes induce a measure.</p>",
        "id": 219450579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607593710
    },
    {
        "content": "<p>However, I do see <code>map</code> and <code>comap</code> and <code>restrict</code> among the measure constructions in <code>measure_theory.measure_space</code>, so it should not be hard to build the instance</p>",
        "id": 219450962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607593941
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.lebesgue_measure</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">volume</span> <span class=\"o\">:=</span> <span class=\"n\">measure.comap</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">volume</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"c1\">-- ok :)</span>\n</code></pre></div>",
        "id": 219451421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607594208
    },
    {
        "content": "<p>what's the diff between line -2 and -4?</p>",
        "id": 219451455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607594230
    },
    {
        "content": "<p>are you just making lean recompute instances for the lulz?</p>",
        "id": 219451567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607594287
    },
    {
        "content": "<p>just making double sure</p>",
        "id": 219452750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607594997
    },
    {
        "content": "<p>and here's how we show it is a probability space:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subtype.volume_apply</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">volume</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">volume</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">measure.comap_apply</span> <span class=\"n\">_</span> <span class=\"n\">subtype.coe_injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">is_measurable.subtype_image</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">hs</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">probability_measure</span> <span class=\"o\">(</span><span class=\"n\">volume</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">measure_univ</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">subtype.volume_apply</span> <span class=\"n\">is_measurable_Icc</span> <span class=\"n\">is_measurable.univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simpa</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.volume_Icc</span><span class=\"o\">],</span> <span class=\"n\">simp</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 219453142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607595225
    },
    {
        "content": "<p>GIven that <code>probability_space</code> itself is not currently in <code>mathlib</code>, would this be a reasonable definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">probability_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">measure_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_probability_measure</span><span class=\"o\">:</span>  <span class=\"n\">probability_measure</span> <span class=\"n\">volume</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 219466918,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607604551
    },
    {
        "content": "<p>yes</p>",
        "id": 219469788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607606203
    },
    {
        "content": "<p>Thank you very much <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, the Steinhaus space is born:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.lebesgue_measure</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">volume</span> <span class=\"o\">:=</span> <span class=\"n\">measure.comap</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">volume</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subtype.volume_apply</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">volume</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">volume</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">measure.comap_apply</span> <span class=\"n\">_</span> <span class=\"n\">subtype.coe_injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">is_measurable.subtype_image</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">hs</span>\n\n<span class=\"n\">abbreviation</span> <span class=\"n\">I01</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">P_I01</span> <span class=\"o\">:</span> <span class=\"n\">probability_measure</span> <span class=\"o\">(</span><span class=\"n\">volume</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">I01</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">measure_univ</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">subtype.volume_apply</span> <span class=\"n\">is_measurable_Icc</span> <span class=\"n\">is_measurable.univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">volume</span> <span class=\"n\">I01</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simpa</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.volume_Icc</span><span class=\"o\">],</span> <span class=\"n\">simp</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">probability_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">measure_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_probability_measure</span><span class=\"o\">:</span>  <span class=\"n\">probability_measure</span> <span class=\"n\">volume</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Steinhaus</span> <span class=\"o\">:</span> <span class=\"n\">probability_space</span> <span class=\"n\">I01</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_probability_measure</span> <span class=\"o\">:=</span> <span class=\"n\">P_I01</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Steinhaus</span> <span class=\"c1\">-- PS_I01 : probability_space ↥I01</span>\n</code></pre></div>",
        "id": 219516558,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607626171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> would it make sense to put the above definition of <code>probability_space</code> into <code>mathlib</code>, and if so, how?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">probability_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">measure_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_probability_measure</span><span class=\"o\">:</span>  <span class=\"n\">probability_measure</span> <span class=\"n\">volume</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 219887371,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607972767
    },
    {
        "content": "<p>Yes, but it should come with a bunch of basic theorems about probability spaces</p>",
        "id": 219887483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607972824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> there is a video on how to make a PR to mathlib in the tutorial playlist on youtube: <a href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;list=PLlF-CfQhukNnxF1S22cNGKyfOrd380NUv&amp;index=6\">https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;list=PLlF-CfQhukNnxF1S22cNGKyfOrd380NUv&amp;index=6</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Bnc8w9lxe8A\" href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;list=PLlF-CfQhukNnxF1S22cNGKyfOrd380NUv&amp;index=6\"><img src=\"https://i.ytimg.com/vi/Bnc8w9lxe8A/default.jpg\"></a></div>",
        "id": 219888985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607973537
    },
    {
        "content": "<p>But like Mario said, every definition should come with an API around it.</p>",
        "id": 219889073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607973583
    },
    {
        "content": "<p>Do you have a style guide for what should come with the API?  There are things you can do with probability spaces, like create one from a distribution, but for the idea itself, there is not much more that I know except what is in the definition, i.e. that it is a measure space whose volume is a probability measure.</p>\n<p>So I would put it in the file with <code>probability_measure</code> as a start.  I can do a PR for that.</p>",
        "id": 219892281,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607974895
    },
    {
        "content": "<p>Take a look at any structure at all, preferably one you understand, and then look at all the lemmas proved immediately after the definition. That's the style guide. A thorough treatment of basic lemmas, preferably with very short proofs, all building on each other.</p>",
        "id": 219893020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607975235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> the start should include all the lemmas that are never written down in any other resource. Stuff like: <code>P(A) &lt;= 1</code> for all <code>A</code></p>",
        "id": 219893151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607975285
    },
    {
        "content": "<p>All these stupid basic facts</p>",
        "id": 219893183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607975298
    },
    {
        "content": "<p>probability of <code>A</code>-complement, is <code>1 - P(A)</code></p>",
        "id": 219893240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607975333
    },
    {
        "content": "<p>(Note that I don't know anything about probability theory.)</p>",
        "id": 219893303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607975377
    },
    {
        "content": "<p>As a new user that recently wrote his first definition, with relative API, what guided me is the principle that  if the API is good nobody should ever  have to look at the actual definition (unless for doing advanced things of course).</p>",
        "id": 219894823,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1607976220
    },
    {
        "content": "<p>A couple more things that could be added to the API:</p>\n<ol>\n<li>The existence of binary products / coproducts.</li>\n<li>The obvious instance on <code>pempty</code> and <code>punit</code>.</li>\n</ol>",
        "id": 219895543,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607976647
    },
    {
        "content": "<p>Another suggestion might be to introduce some useful synonyms, similar to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">probability_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">measure_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_probability_measure</span><span class=\"o\">:</span>  <span class=\"n\">probability_measure</span> <span class=\"n\">volume</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bernoulli</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">probability_space</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">probability_space</span> <span class=\"o\">(</span><span class=\"n\">Bernoulli</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">probability_space</span>\n</code></pre></div>",
        "id": 219896902,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607977343
    },
    {
        "content": "<p><code>P(A) &lt;= 1</code> is the essence of the definition of <code>probability_measure</code>.   So it doesn't go in <code>probability_space</code>, it comes as a consequence of the fact that <code>probability_space</code> calls for a <code>measure_space</code> with a <code>measure</code> which is a <code>probability_measure</code>.    So that doesn't seem like a good example of something I would say in the API for <code>probability_space</code>.</p>\n<p>My sense (expressed by somebody here) is that most proper mathematicians consider probability space to be a forgettable and somewhat trivial concept.  You define it once, then never talk about it.  So there wouldn't be a lot of theorems to go in the API.</p>\n<p>One thing you could say is that if </p>\n<ul>\n<li><code>(Ω,𝔸,P)</code> is a probability space, and</li>\n<li><code>(S,Σ)</code> is a measurable space, and </li>\n<li><code>X: (Ω,𝔸)→(S,Σ)</code> is a random variable, and </li>\n<li>\n<p><code>μ(X) : Σ → [0,1]</code> is the distribution of <code>X</code>,<br>\nthen</p>\n</li>\n<li>\n<p><code>(S,Σ,μ(X))</code> is a probability space which we can call the <code>distribution_space</code> of <code>X</code>.  But I don't know if you'd call that a theorem about <code>probability_space</code> or another type class that you'd need to define.</p>\n</li>\n</ul>",
        "id": 219897111,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607977455
    },
    {
        "content": "<p>Of course once you got that far you'd want to define <code>distribution</code> and <code>random_variable</code>, so yet more APIs which I don't see in <code>mathlib</code> at the moment.</p>",
        "id": 219897234,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607977536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20topological_space.20is.20used.20in.20.20B(.E2.84.9D).3F/near/219897111\">said</a>:</p>\n<blockquote>\n<p><code>P(A) &lt;= 1</code> is the essence of the definition of <code>probability_measure</code>.   So it doesn't go in <code>probability_space</code>, it comes as a consequence of the fact that <code>probability_space</code> calls for a <code>measure_space</code> with a <code>measure</code> which is a <code>probability_measure</code>.    So that doesn't seem like a good example of something I would say in the API for <code>probability_space</code>.</p>\n</blockquote>\n<p>It happens quite often that right after a definition, you state a couple of lemmas whose proof is <code>rfl</code>, just to make the definition easier to use.</p>\n<p>The fact that something is \"trivial\" or \"true by definition\" doesn't mean it's not a good idea to include in the basic API.</p>",
        "id": 219897838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607977844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20topological_space.20is.20used.20in.20.20B(.E2.84.9D).3F/near/219895543\">said</a>:</p>\n<blockquote>\n<p>A couple more things that could be added to the API:</p>\n<ol>\n<li>The existence of binary products / coproducts.</li>\n<li>The obvious instance on <code>pempty</code> and <code>punit</code>.</li>\n</ol>\n</blockquote>\n<p>I don't think <code>pempty</code> is a probability space</p>",
        "id": 219903789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607980923
    },
    {
        "content": "<blockquote>\n<p>The fact that something is \"trivial\" or \"true by definition\" doesn't mean it's not a good idea to include in the basic API.</p>\n</blockquote>\n<p>In fact, this is exactly what should be in the first revision of the basic API. Make all the trivial observations</p>",
        "id": 219903962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607980999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> of course, you're right.</p>",
        "id": 219904452,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607981262
    },
    {
        "content": "<p>It's the initial meeasure space.</p>",
        "id": 219904468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607981271
    },
    {
        "content": "<p>(Unfortunately this means the category cannot have finite coproducts, unless you change the definition of a probability measure to assume that <code>P(set.univ) = 1</code> with the additional assumption that the type is nonempty.)</p>",
        "id": 219905229,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607981648
    },
    {
        "content": "<p>Do analysts use this category theory language anyway?</p>",
        "id": 219905836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607982009
    },
    {
        "content": "<p>Maybe not ;)</p>",
        "id": 219905852,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607982018
    },
    {
        "content": "<p>Disjoint Union of two measure 1 things has measure 2 I guess</p>",
        "id": 219905886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607982044
    },
    {
        "content": "<p>You have to average them.</p>",
        "id": 219905905,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607982055
    },
    {
        "content": "<p>So for example the coproduct of <code>punit</code>with itself is a coin flip</p>",
        "id": 219905924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607982065
    },
    {
        "content": "<p>I guess the general form of that is another giry monad</p>",
        "id": 219905962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607982094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> you don't have to change the definition of a probability measure to assume that <code>P(set.univ)=1</code>, because that is literally the exact definition of a probability measure in <code>mathlib</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">probability_measure</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">measure_univ</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 219907391,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607982860
    },
    {
        "content": "<p>Oh, we were talking about the empty set.</p>",
        "id": 219907421,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607982879
    },
    {
        "content": "<p>Well another axiom I would add to <code>probability_space</code> is that the sample space is inhabited, that's standard.</p>",
        "id": 219907467,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607982907
    },
    {
        "content": "<p>The axioms imply that the measure of the empty set is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, so as <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> mentioned the empty set cannot be a probability space with this definition.</p>",
        "id": 219907469,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607982907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20topological_space.20is.20used.20in.20.20B(.E2.84.9D).3F/near/219907467\">said</a>:</p>\n<blockquote>\n<p>Well another axiom I would add to <code>probability_space</code> is that the sample space is inhabited, that's standard.</p>\n</blockquote>\n<p>This would be redundant (at least classically).</p>",
        "id": 219907598,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607982970
    },
    {
        "content": "<p>I'm looking for a reference but my understanding is that <code>inhabited</code> is a required property of the <a href=\"https://en.wikipedia.org/wiki/Sample_space\">sample space</a>.  Wikipedia doesn't really come out and say it except to index the outcomes starting from 1.</p>",
        "id": 219907828,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607983089
    },
    {
        "content": "<p>If it's not inhabited, then the set is empty, and the measure of the whole space would be 0, but the axioms assume that it's 1. Since 0 is not 1 in the reals, it follows that the set must be inhabited. Of course, this is a classical argument.</p>",
        "id": 219907954,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607983171
    },
    {
        "content": "<p>There you go.  In <a href=\"https://ncatlab.org/nlab/show/probability+space\">nlab</a> they say \"a probability space is a measure space (X,μ) whose measure μ is a probability distribution: its integral is ∫Xμ=1\".</p>",
        "id": 219908090,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607983243
    },
    {
        "content": "<p>You could add as a theorem to <code>mathlib</code> that probability spaces are inhabited, by a proof about the integral.</p>",
        "id": 219908194,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607983307
    },
    {
        "content": "<p>That could go in the API.</p>",
        "id": 219908272,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607983334
    },
    {
        "content": "<p>If it's a classical argument, it should probably be a nonempty instance not an inhabited one</p>",
        "id": 219909126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607983715
    },
    {
        "content": "<p>Since nonempty is proof of existence without claiming computability</p>",
        "id": 219909214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607983759
    },
    {
        "content": "<p>Here is a <a href=\"https://math.stackexchange.com/questions/1494356/can-a-sample-space-consist-of-only-the-empty-set\">short proof</a> by Eric Wofsey.  It doesn't involve reasoning about integrals.  He reasons about sigma algebras and derives a contradiction:</p>\n<p>\"There exists no probability space for which  Ω=∅ . A priori, given a set  Ω  and a  𝜎 -algebra  Σ  on  Ω , there can be any number of different measures  ℙ  which make  (Ω,Σ,ℙ)  satisfy the axioms of a probability space--usually there are many different possible probability measures  ℙ , but there might not be any at all! In the case that  Ω=∅ , the only possible  𝜎 -algebra on  Ω  is  Σ={∅} , and there is no function  ℙ:Σ→[0,1]  which satisfies the axioms of a probability measure (since the axioms force  ℙ(∅)  to be both  0  and  1 )\".</p>",
        "id": 219912261,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607985341
    },
    {
        "content": "<p>Here's a short proof: in <code>pempty</code>, <code>univ = empty</code>, so <code>1 = volume univ = volume empty = 0</code>, contradiction</p>",
        "id": 219912640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607985569
    },
    {
        "content": "<p>All our problems would be solved if we just defined probability spaces as measure spaces where the measure of <code>univ</code> is finite (but not necessarily one). (Just to be clear, I'm certainly not suggesting this is a good idea, rather that the category you would obtain in this way would be a bit nicer.)</p>",
        "id": 219913062,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607985806
    },
    {
        "content": "<p>Speaking of which, I found my <a href=\"http://www.math.uchicago.edu/~may/VIGRE/VIGRE2010/REUPapers/Lynn.pdf\">nonempty set definition</a>!</p>\n<p><a href=\"/user_uploads/3121/iZVcKflLOsrq4EITmdkEbOwB/Screenshot-from-2020-12-14-17-49-42.png\">Screenshot-from-2020-12-14-17-49-42.png</a> </p>\n<p>She defines a couple of categories, and is happy that \"at no point in this paper was the requirement that the sample space have measure 1 essential to a result\"....except on line 1 where she says that the sample space is nonempty.  But maybe one of her two categories gets you where you want to be.</p>\n<p>There is more where that comes from.  I'll put Terence Tao on top because he's a superstar:</p>\n<ul>\n<li><a href=\"https://terrytao.wordpress.com/2014/06/28/algebraic-probability-spaces/\">https://terrytao.wordpress.com/2014/06/28/algebraic-probability-spaces/</a></li>\n<li><a href=\"https://golem.ph.utexas.edu/category/2018/09/a_categorical_look_at_random_v.html\">https://golem.ph.utexas.edu/category/2018/09/a_categorical_look_at_random_v.html</a></li>\n<li><a href=\"https://arxiv.org/pdf/1611.03630.pdf\">https://arxiv.org/pdf/1611.03630.pdf</a></li>\n<li><a href=\"https://mathoverflow.net/questions/20740/is-there-an-introduction-to-probability-theory-from-a-structuralist-categorical\">https://mathoverflow.net/questions/20740/is-there-an-introduction-to-probability-theory-from-a-structuralist-categorical</a></li>\n<li><a href=\"https://www.jstor.org/stable/40587190?seq=1\">https://www.jstor.org/stable/40587190?seq=1</a></li>\n<li><a href=\"http://www.denotational.co.uk/drafts/heunen-kammar-staton-yang-staton-spaces.pdf\">http://www.denotational.co.uk/drafts/heunen-kammar-staton-yang-staton-spaces.pdf</a></li>\n</ul>\n<p>I've never ever understood category theory and how it makes life easier.   I have seen category theoretic styling used in Scratchpad II/Axiom as a way of specifying what might otherwise be called interfaces or classes.  Here are some notes:</p>\n<ul>\n<li><a href=\"https://github.com/daly/axiom/blob/master/books/AldorDesign.pdf\">Aldor Design</a></li>\n</ul>\n<p>Axiom was used by <a href=\"https://warwick.ac.uk/fac/sci/statistics/staff/academic-research/kendall/\">Wilfred Kendall</a> at Warwick to implement stochastic differentials and Ito integrals.   So this is also worth a look:  </p>\n<ul>\n<li><a href=\"https://www.researchgate.net/publication/259148976_Symbolic_Ito_calculus_An_introduction/link/0deec52a0ddaf86894000000/download\">Symbolic Itô calculus: An introduction</a></li>\n</ul>",
        "id": 219915277,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607987176
    }
]