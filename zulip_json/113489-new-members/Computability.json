[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">asdf</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨@</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">epsilon</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"err\">∅</span><span class=\"bp\">⟩</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">),</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">ghjk</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">epsilon</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">))</span> <span class=\"bp\">⟨⟨</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Why is the first one computable but not the second one?</p>",
        "id": 167460367,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1559808216
    },
    {
        "content": "<p>\"why\" as in the mechanism behind</p>",
        "id": 167460421,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1559808243
    },
    {
        "content": "<p>Because Sorts are always computable. In the first one you defined a <code>nat - &gt; Prop</code> using choice, and the second one you defined an element of some subtype with choice.</p>",
        "id": 167464613,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559812439
    },
    {
        "content": "<p>I think.</p>",
        "id": 167464657,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559812443
    },
    {
        "content": "<p>I have more questions about the computational interpretation of classical logic in type theory. I am making a new topic to separate from the rest. I am reposting my original question and some replies.</p>\n<p>Original post: <br>\n\"I was reading Kevin Buzzard's recent post \"Proofs are not programs\" &lt; <a href=\"https://xenaproject.wordpress.com/2019/06/15/proofs-are-not-programs/\" title=\"https://xenaproject.wordpress.com/2019/06/15/proofs-are-not-programs/\">https://xenaproject.wordpress.com/2019/06/15/proofs-are-not-programs/</a> &gt; which argues that only in constructive logic is the Curry-Howard correspondence held (proofs are programs) and that in general in ZFC with the axiom of choice and excluded middle etc that Curry-Howard does not apply; which is why is why in lean we label certain things as noncomputable. However, looking at <a href=\"https://en.wikipedia.org/wiki/Lambda-mu_calculus\" title=\"https://en.wikipedia.org/wiki/Lambda-mu_calculus\">https://en.wikipedia.org/wiki/Lambda-mu_calculus</a> it seems to suggest that there are more sophisticated lambda calculi that can model \"classical logic\" with excluded middle etc and still maintain a form of the curry-howard correspondence. Is lean's type system CoC just not rich enough to model classical deductions with computational content?\"</p>",
        "id": 193848039,
        "sender_full_name": "Brandon B",
        "timestamp": 1586836441
    },
    {
        "content": "<p>reply: \"Andrew Ashworth5:05 PM<br>\nurgh, if you really want to go into gory detail, you could try chapter 8 of <a href=\"http://disi.unitn.it/~bernardi/RSISE11/Papers/curry-howard.pdf\" title=\"http://disi.unitn.it/~bernardi/RSISE11/Papers/curry-howard.pdf\">http://disi.unitn.it/~bernardi/RSISE11/Papers/curry-howard.pdf</a> \"</p>",
        "id": 193848083,
        "sender_full_name": "Brandon B",
        "timestamp": 1586836459
    },
    {
        "content": "<p>reply: \"Mario Carneiro6:06 PM<br>\nThe basic idea behind computational semantics for EM (or more simply, double negation elimination) is that you put everything in continuation passing style, the logical equivalent being putting double negations on everything, and then all the classical theorems become intuitionistically provable, and the computational semantics are that of call/cc or exception handling.</p>\n<p>If you wanted to do something similar with full choice, I think you could do it like so: Suppose you want to produce an element of type A satisfying p. Save the current continuation, and then start enumerating well formed terms of type A. Return the first one you find (whether or not it satisfies p). Later, the program may later discover that you lied to it and will prove that the element does not in fact satisfy p, deriving a contradiction. When you call false.elim on this proof of false, the eliminator goes back to the original continuation, \"rewinding the universe\" to the original state, whereupon it tries the next term it finds.</p>\n<p>This should satisfy type correctness, but it is not strongly normalizing as you might be enumerating terms forever looking for one that satisfies p.\"</p>",
        "id": 193848090,
        "sender_full_name": "Brandon B",
        "timestamp": 1586836478
    },
    {
        "content": "<p>My sense so far is that a type theory that models constructive logic yields a programming language where all programs are guaranteed to terminate, which comes at the expense of certain classes programs not being definable at all (namely those that cannot be proven to terminate). Whereas, classical logic with LEM allows non-terminating programs, expanding the universe of definable programs at the expense of not being able to verify if a defined program will ever finish a computation.  Is that on the right track?</p>",
        "id": 193848238,
        "sender_full_name": "Brandon B",
        "timestamp": 1586836747
    },
    {
        "content": "<p>on this note, is it possible to extract / compile Lean code into executable code that can be linked with, say, C/C++? the last i found on this subject was in 2018 and someone mentioned Lean 4 would have this feature. is that still on? is there any sample extraction?</p>",
        "id": 193851223,
        "sender_full_name": "Nam",
        "timestamp": 1586841339
    },
    {
        "content": "<blockquote>\n<p>My sense so far is that a type theory that models constructive logic yields a programming language where all programs are guaranteed to terminate, which comes at the expense of certain classes programs not being definable at all (namely those that cannot be proven to terminate).</p>\n</blockquote>\n<p>Well, any type theory models a constructive logic. The ones that have nonterminating programs just have an inconsistent constructive logic</p>",
        "id": 193852036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586842589
    },
    {
        "content": "<blockquote>\n<p>Whereas, classical logic with LEM allows non-terminating programs, expanding the universe of definable programs at the expense of not being able to verify if a defined program will ever finish a computation.</p>\n</blockquote>\n<p>LEM doesn't give you nonterminating programs. The double negation elimination method mentioned in the books still yields a strongly normalizing system. The one I mentioned for full choice doesn't, but I'm also not 100% sure it even works in the first place, it's more of a sketch.</p>",
        "id": 193852166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586842706
    },
    {
        "content": "<blockquote>\n<p>on this note, is it possible to extract / compile Lean code into executable code that can be linked with, say, C/C++? the last i found on this subject was in 2018 and someone mentioned Lean 4 would have this feature. is that still on? is there any sample extraction?</p>\n</blockquote>\n<p>Lean 3 doesn't have this feature, Lean 4 is basically built around it. Lean 4 itself is being mostly written in lean and compiled to C++</p>",
        "id": 193852204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586842783
    },
    {
        "content": "<p>I think there are some experiments with FFI in lean 3 though</p>",
        "id": 193852269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586842846
    },
    {
        "content": "<p>is there a lean 4 paper or similar where one can learn more?</p>",
        "id": 194525664,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587184652
    },
    {
        "content": "<p>There's not even a Lean 4 release yet. Leo was due to give a talk about it a few weeks ago but it got cancelled</p>",
        "id": 194534358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587200500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> <br>\ni don't think that there's a paper on the FFI.<br>\npapers on lean4 from <a href=\"https://leanprover.github.io/publications/\" title=\"https://leanprover.github.io/publications/\">https://leanprover.github.io/publications/</a>:</p>\n<ul>\n<li>type class resolution: <a href=\"https://arxiv.org/pdf/2001.04301.pdf\" title=\"https://arxiv.org/pdf/2001.04301.pdf\">https://arxiv.org/pdf/2001.04301.pdf</a></li>\n<li>notation: <a href=\"https://arxiv.org/pdf/2001.10490.pdf\" title=\"https://arxiv.org/pdf/2001.10490.pdf\">https://arxiv.org/pdf/2001.10490.pdf</a></li>\n<li>garbage collection and IR: <a href=\"https://arxiv.org/pdf/1908.05647.pdf\" title=\"https://arxiv.org/pdf/1908.05647.pdf\">https://arxiv.org/pdf/1908.05647.pdf</a></li>\n</ul>",
        "id": 194534687,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587201015
    },
    {
        "content": "<p>the more recent slides in the first link might also be of interest to you.</p>",
        "id": 194534703,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587201089
    }
]