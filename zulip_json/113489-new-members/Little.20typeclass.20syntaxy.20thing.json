[
    {
        "content": "<p>You can't use dot notation on classes, because the typeclass argument of the projection (in this case <code>ext_ext_has_op.op</code>) is implicit</p>",
        "id": 229208622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615142698
    },
    {
        "content": "<p>you should write <code>ext_ext_has_op.op Œ±</code> instead</p>",
        "id": 229208862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615142759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Little.20typeclass.20syntaxy.20thing/near/229208862\">said</a>:</p>\n<blockquote>\n<p>you should write <code>ext_ext_has_op.op Œ±</code> instead</p>\n</blockquote>\n<p>The language is a little funny in that it allows dot notation on classes, and it works sometimes but not others (when implicit instances need to be looked up). There are still two things I'm wondering about:</p>\n<p>(1) Why exactly does binding m.op to mop then using mop work when using m.op directly doesn't?</p>\n<p>(2) Where exactly should I write <code>ext_ext_has_op.op Œ±</code> instead? Not seeing it.</p>",
        "id": 229293503,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1615208243
    },
    {
        "content": "<p>Yeah, that's a bug. It's not supposed to work at all</p>",
        "id": 229422380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615265935
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mul_foldr</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ext_ext_has_op</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">my_has_one</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">my_has_one.one</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">has_op.op</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">mul_foldr</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 229422626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615266133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124175\">@Kevin Sullivan</span></p>",
        "id": 229422635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615266145
    },
    {
        "content": "<p>Basically, you don't need to refer to variables in square brackets except in exceptional circumstances (which is why they are usually anonymous)</p>",
        "id": 229422686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615266195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Little.20typeclass.20syntaxy.20thing/near/229422380\">said</a>:</p>\n<blockquote>\n<p>Yeah, that's a bug. It's not supposed to work at all</p>\n</blockquote>\n<p>That's helpful.  Thanks for confirming. I knew that typeclass instances were generally anonymous, but had also seen a few instances where they weren't. It was also clear after a few minutes of thinking that there would be a problem finding implicit instances going up the stack lacking a sufficiently right context for inference. What wasn't clear was why the dot notation was supported at all. As a final question, if you've got a sec to complete this thread, can you characterize situations where it's necessary/helpful to have a non-anonymous (a \"nonymous\") typeclass instance?</p>",
        "id": 229533312,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1615316568
    },
    {
        "content": "<p>If you are using a lemma that takes a typeclass argument in <code>()</code> binders, you will need to specify it. This is sometimes done for typeclasses that are also props and intended to be used as such (i.e. participating in nontrivial logical positions like negations and disjunctions), like <code>nat.prime</code>. It's also necessary to specify typeclasses sometimes when the one that is inferred is not the one you want, which only happens occasionally, mostly when there is a non-defeq diamond in the typeclass hierarchy (which we try to avoid). Plus sometimes it's just the shortest way to write a proof</p>",
        "id": 229540410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615318975
    },
    {
        "content": "<p>Also it comes up when the typeclass itself has some structure on it and is the subject of the theorem, like this one from topology:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">[</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">œÉ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ctop</span> <span class=\"n\">Œ±</span> <span class=\"n\">œÉ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">H‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"n\">a</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"n\">F</span> <span class=\"n\">b</span> <span class=\"bp\">‚àß</span> <span class=\"n\">F</span> <span class=\"n\">b</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.to_topsp</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext'</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">H‚ÇÇ</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"o\">‚ü®</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">h‚ÇÇ</span><span class=\"o\">‚ü©,</span> <span class=\"n\">mem_nhds_sets_iff.2</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">H‚ÇÅ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h‚ÇÅ</span><span class=\"o\">‚ü©‚ü©</span>\n</code></pre></div>",
        "id": 229540688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615319100
    },
    {
        "content": "<p>Here the type <code>topological_space Œ±</code> is a typeclass, useful for providing topological structure on types, but it's also the space of topologies on <code>Œ±</code>, which is a complete lattice with a map operator and interesting lemmas about it</p>",
        "id": 229540945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615319197
    }
]