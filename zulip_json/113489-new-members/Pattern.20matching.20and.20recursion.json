[
    {
        "content": "<p>The mathlib style is to provide the arguments to a theorem as a parameter, like this:<br>\n<code>theorem my_zero_add (n : ℕ) : 0 + n</code><br>\nHowever, this means they're not immediately available to the pattern matcher, i.e. you can't start your proof with <code>|</code>.  You can use a <code>match ... with</code>, but how do I access the inductive hypothesis?  This fails with \"unknown identifier 'my_zero_add'\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">my_zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">my_zero_add</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 294078818,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1660829975
    },
    {
        "content": "<p>If I add <code>n</code> as an explicit argument, instead of a parameter, everything is unicorns and rainbows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">my_zero_add'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">my_zero_add'</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 294079021,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1660830031
    },
    {
        "content": "<p>mathlib style is to use the <code>my_zero_add'</code> form when required/useful.</p>",
        "id": 294083425,
        "sender_full_name": "Reid Barton",
        "timestamp": 1660831427
    },
    {
        "content": "<p>Thanks.  So we let the details of the proof affect the way the theorem is stated &amp; used?</p>",
        "id": 294091117,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1660831871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> <a href=\"#narrow/stream/113489-new-members/topic/Pattern.20matching.20and.20recursion/near/294091117\">said</a>:</p>\n<blockquote>\n<p>So we let the details of the proof affect the way the theorem is stated &amp; used?</p>\n</blockquote>\n<p>The statements of the both theorems are identical, because theorem parameters are translated to universal quantifiers.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">my_zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">my_zero_add'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">my_zero_add</span>  <span class=\"c1\">-- ∀ (n : ℕ), 0 + n = n</span>\n<span class=\"k\">#check</span> <span class=\"n\">my_zero_add'</span> <span class=\"c1\">-- ∀ (n : ℕ), 0 + n = n</span>\n</code></pre></div>",
        "id": 294098881,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1660833157
    }
]