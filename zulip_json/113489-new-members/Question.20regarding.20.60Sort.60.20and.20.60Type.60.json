[
    {
        "content": "<p>I am new to lean and am trying to understand Pi Types.</p>\n<p>In Theorem Proving in Lean, in Section 4.1, following is mentioned.</p>\n<blockquote>\n<p>It is the typing rule for Pi types, and the universal quantifier in particular, that distinguishes Prop from other types. Suppose we have α : Sort i and β : Sort j, where the expression β may depend on a variable x : α. Then Π x : α, β is an element of Sort (imax i j), where imax i j is the maximum of i and j if j is not 0, and 0 otherwise.</p>\n</blockquote>\n<p>Something similar is also mentioned in Lean Reference Manual, Section 3.1 3.2.</p>\n<blockquote>\n<p>an expression imax u v, where u and v are universe levels. The last one denotes the universe level 0 if v is 0, and max u v otherwise.</p>\n</blockquote>\n<blockquote>\n<p>(Π x : α, β) : Sort (imax u v) where α : Sort u, and β : Sort v assuming x : α</p>\n</blockquote>\n<p>When I tried the following example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- α : Sort 1</span>\n<span class=\"kd\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"c1\">-- m_ty : Sort 1 → Sort 1</span>\n<span class=\"kd\">variable</span> <span class=\"n\">m_ty</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"c1\">-- x₀ : Sort 1</span>\n<span class=\"kd\">constant</span> <span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"c1\">-- m_ty x₀ : Sort 1</span>\n<span class=\"k\">#check</span> <span class=\"n\">m_ty</span> <span class=\"n\">x₀</span>\n\n<span class=\"c1\">-- α : Type / Sort 1,</span>\n<span class=\"c1\">-- β = m_ty x₀, β : Sort 1,</span>\n<span class=\"k\">#check</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">m_ty</span> <span class=\"n\">x₀</span>\n\n<span class=\"c1\">-- Sort (imax 1 1) = Sort 1 = Type or Type 0</span>\n</code></pre></div>\n<p>For some reason which I don't understand, <code>#check Π (x : Type), m_ty x₀</code> is giving <code>Type → m_ty x₀ : Type 1</code>.</p>\n<p>Shouldn't the expression <code>Type → m_ty x₀</code> be of type <code>Sort 1</code> or <code>Type 0</code> (that is <code>Sort (imax 1 1)</code>)?</p>\n<p>I was wondering what mistake I might be doing in my thinking?</p>",
        "id": 218212782,
        "sender_full_name": "Rajiv",
        "timestamp": 1606656470
    },
    {
        "content": "<p>To fit <code>Π (x : Type), m_ty x₀</code> into the scheme Π x : α, β, we have <code>α = Type</code>, not <code>α : Type</code>.</p>",
        "id": 218213284,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606657174
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I see my error now. <code>Π (x : α), m_ty x₀</code> expression does the right thing.</p>",
        "id": 218213725,
        "sender_full_name": "Rajiv",
        "timestamp": 1606657902
    }
]