[
    {
        "content": "<p>Since we know modz = 1, then either a or b is 0 in finding modz, i.e, in sqrt(a^2 + b^2). Thus, as a complex number z can be either 1 or i. When z is 1, z.arg is 0 and when z is i z.arg is pi/2. How can Lean understand this?</p>",
        "id": 247528234,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627513580
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.dihedral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.pi</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span> <span class=\"n\">dihedral_group</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`|`</span> <span class=\"n\">x</span> <span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">complex.abs</span> <span class=\"n\">x</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">π</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">real.pi</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">z</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z.arg</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">z.arg</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247528297,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627513618
    },
    {
        "content": "<p>Why can't z be 0.6+0.8i?</p>",
        "id": 247528472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627513792
    },
    {
        "content": "<p>Which as far as I can tell makes your lemma false</p>",
        "id": 247528541,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627513825
    },
    {
        "content": "<p>Even <code>z = -1</code> is a counterexample</p>",
        "id": 247528616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627513919
    },
    {
        "content": "<p>Is there a way to understand z.arg given modulus z?</p>",
        "id": 247528753,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627514043
    },
    {
        "content": "<p>Mathematically, since z can consist of negative or positive real/imaginary parts z.arg cannot be defined in one equation, right?</p>",
        "id": 247528939,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627514181
    },
    {
        "content": "<p>I don't understand your question. Knowing <code>complex.arg z</code> tells you nothing about <code>complex.abs z</code>, and vice versa so long as <code>z ≠ 0</code></p>",
        "id": 247529562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627514840
    },
    {
        "content": "<p>The only conclusion you can make that is remotely like what you're asking for us that <code>complex.abs z = 0 → complex.arg z = 0</code>, but that's not very interesting</p>",
        "id": 247529725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627514989
    },
    {
        "content": "<p>OK, the reason I am asking is because I do not know how to \"assign\" a value to z.arg in this proof with the information that I am given. I know z is on the unit circle from the hypothesis, but it does not tell me anything about z.arg without a particular value z. I will provide an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> but please do not solve the proof.</p>",
        "id": 247833267,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627781087
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.dihedral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.pi</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span> <span class=\"n\">dihedral_group</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`|`</span> <span class=\"n\">x</span> <span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">complex.abs</span> <span class=\"n\">x</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">π</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">real.pi</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">z</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">z.arg</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247833282,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627781111
    },
    {
        "content": "<p>Is there a way to simplify the goal state, specifically simplifying z.arg?</p>",
        "id": 247833438,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627781302
    },
    {
        "content": "<p>Hi everyone, I am very new to Lean,  is there an equivalent of Coq's \"Example\" in Lean?</p>",
        "id": 247841620,
        "sender_full_name": "Vasu",
        "timestamp": 1627795651
    },
    {
        "content": "<p>Could you please ask the question in a new thread (by specifying another topic when posting the message)? You posted it in a thread that's about something else</p>",
        "id": 247843947,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1627799972
    },
    {
        "content": "<p>How can you \"simplify\" <code>z.arg</code>? It just means \"apply the <code>arg</code> function to the variable <code>z</code>which has no definition\"</p>",
        "id": 247852705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627814323
    },
    {
        "content": "<p>A better question would be \"what is the maths proof you are trying to formalise\"? The answer \"this statement is obvious and I just want it to go away\" is not sufficient.</p>",
        "id": 247852719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627814376
    },
    {
        "content": "<p><del>The statement is false, consider <code>z = 1</code></del> (edit: it is too early)</p>",
        "id": 247852723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627814389
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 247852772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627814428
    },
    {
        "content": "<p>In the proof I'm thinking of you would not be simplifying this expression but complifying it a little first</p>",
        "id": 247852794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627814494
    },
    {
        "content": "<p>PS why do you post example after example of questions in complex analysis with all those extraneous imports and opens and notations? As an exercise, why not try and take the code you posted last and actually make the example minimal, with no irrelevant lines of code? This is what <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> means. This will make your questions easier to understand. Delete some random lines of code from your post and if things still compile then your question has got better.</p>",
        "id": 247852869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627814598
    },
    {
        "content": "<p>Removing imports makes your code not only easier to follow, but faster to load in the web editor (I believe)</p>",
        "id": 247852932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627814694
    },
    {
        "content": "<p>The statement is  (unsurprisingly) true after all, I was able to mostly prove it using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.exp_log\">docs#complex.exp_log</a>. You should write down the maths proof, and get lean to go through the intermediate step</p>",
        "id": 247852998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627814785
    },
    {
        "content": "<p>I think that you shouldn't be using random extensions of log to the complex plane here. You should use the theorem that if |z|=r and arg(z)=theta then z=re^{i theta}. This is the mathematically reasonable way to prove the result</p>",
        "id": 247853314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627815314
    },
    {
        "content": "<p>I agree, but couldn't find that result</p>",
        "id": 247853565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627815635
    },
    {
        "content": "<p>These don't <del>seem to</del> succeed for me<del> (although my patience for library_search is low)</del>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">z</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">z.arg</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- fail</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">z</span><span class=\"bp\">|</span> <span class=\"bp\">•</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">z.arg</span> <span class=\"bp\">•</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- fail</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">z</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">z.arg</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fail, makes no progress</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">z</span><span class=\"bp\">|</span> <span class=\"bp\">•</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">z.arg</span> <span class=\"bp\">•</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fail, makes progress only to the above example</span>\n</code></pre></div>",
        "id": 247853732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627815905
    },
    {
        "content": "<p>:-/</p>",
        "id": 247853876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627816089
    },
    {
        "content": "<p>Well then the fault is with our library</p>",
        "id": 247853881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627816102
    },
    {
        "content": "<p>If someone wants to add it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">z.abs</span> <span class=\"bp\">•</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">z.arg</span> <span class=\"bp\">•</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">z</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">exp_re</span><span class=\"o\">,</span> <span class=\"n\">complex.cos_arg</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">abs_ne_zero.mpr</span> <span class=\"n\">H</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">exp_im</span><span class=\"o\">,</span> <span class=\"n\">complex.sin_arg</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">abs_ne_zero.mpr</span> <span class=\"n\">H</span><span class=\"o\">)]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247855428,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1627818459
    },
    {
        "content": "<p>Based on the fact that simp removes smul, it should probably be stated with *</p>",
        "id": 247855855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627819087
    },
    {
        "content": "<p>Either that or we should tell simp to go the other way, but I suspect that breaks a lot of things</p>",
        "id": 247855870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627819114
    }
]