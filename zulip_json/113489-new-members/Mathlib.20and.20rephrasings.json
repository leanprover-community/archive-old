[
    {
        "content": "<p>I get the impression that mathlib is happy to have lots of similar rephrasings of things. The specific example I am looking at now is <code>lemma choose_le_middle {r n : ℕ} : nat.choose n r ≤ nat.choose n (n/2)</code>, in data.nat.choose, which I need in the form <code>nat.choose (2 * n) r ≤ nat.choose (2 * n) n</code>. Is this the kind of mostly-trivial restatement that would be fine appearing in data.nat.choose immediately next to <code>choose_le_middle</code>?</p>",
        "id": 198542640,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590252015
    },
    {
        "content": "<p>It's not absolutely trivial because the division is \"quotient of naturals\", so there is going to be at least one contentful line of proof</p>",
        "id": 198542654,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590252053
    },
    {
        "content": "<p>I think this one is fairly trivial since <code>choose_le_middle r (2 * n) : choose (2 * n) r ≤ choose (2 * n) ((2*n)/2)</code> and I'm fairly sure there's a lemma saying <code>(2*n)/2 = n</code></p>",
        "id": 198542716,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590252165
    },
    {
        "content": "<p>(By the way, I think I should've made the arguments of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/choose_le_middle/src\">src#choose_le_middle</a> explicit...)</p>",
        "id": 198542722,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590252187
    },
    {
        "content": "<p>Yeah, I am definitely going to make them explicit</p>",
        "id": 198542725,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590252235
    },
    {
        "content": "<p>I think my \"contentful\" might have been less contentful than yours :P</p>",
        "id": 198542767,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590252259
    },
    {
        "content": "<p>It is probably delicate to draw a sharp line here, but I think that this is the kind of variation that would be okay. Some part of the statement gets more complicated, another part gets simpler, and the statement now uses <code>*</code> instead of <code>/</code>; all of these can affect ease of application in a proof. The sort of lemma I think goes too far is e.g. <code>a + (b + (c + d)) = a + ((b + c) + d)</code>, which is a rewrite instance of <code>add_assoc</code>. We have to draw lines like this if we want to \"fill out\" the library without generating an infinite number of lemmas</p>",
        "id": 198549398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590263685
    }
]