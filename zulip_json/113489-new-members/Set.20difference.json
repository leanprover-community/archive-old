[
    {
        "content": "<p>Can someone please point me to the simplest way to get <code>false</code> from <code>j ∈ finset.range (n + 1) \\ {j}</code>?</p>",
        "id": 207740464,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598127367
    },
    {
        "content": "<p>This apparently worked:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tidy</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>You can use <code>tidy?</code> to figure out what it saw.</p>",
        "id": 207740570,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598127554
    },
    {
        "content": "<p>Apparently it went through this, which you probably can simplify further:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">forall_prop_of_false</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">not_true</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_sdiff</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">and_false</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 207740584,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598127595
    },
    {
        "content": "<p>Thank you! I didn't have <code>tidy</code> on my radar yet.</p>",
        "id": 207740630,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598127627
    },
    {
        "content": "<p><code>simp</code> would have worked, too.  I just pulled out the big guns first.</p>",
        "id": 207740636,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598127644
    },
    {
        "content": "<p>No, <code>simp</code> didn't work for me.</p>",
        "id": 207740639,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598127661
    },
    {
        "content": "<p>Don't understand why.</p>",
        "id": 207740653,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598127695
    },
    {
        "content": "<p>It worked for me, that's strange.</p>",
        "id": 207740659,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598127698
    },
    {
        "content": "<p>So this doesn't work for you?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">j</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207740684,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598127722
    },
    {
        "content": "<p>Oh wait, I don't have the latest <code>mathlib</code> version, although I'm using 3.18.4. I doubt, but could this be it?</p>",
        "id": 207740723,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598127795
    },
    {
        "content": "<p>A shorter proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">j</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_sdiff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cc</span><span class=\"o\">,</span> <span class=\"c1\">-- this sees ¬j = j and proves false</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207740727,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598127811
    },
    {
        "content": "<p>I'm using <code>3.18.4</code>, too.</p>",
        "id": 207740773,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598127847
    },
    {
        "content": "<p>I assume you have <code>import tactic</code> at the top of your file?</p>",
        "id": 207740777,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598127874
    },
    {
        "content": "<p>Oh, <code>cc</code> was overkill:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">j</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_sdiff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207740839,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598127991
    },
    {
        "content": "<p>I do. Actually it was probably my fault. I had that as a hypothesis <code>H</code> and should have done <code>simp at H</code>. Instead I tried <code>simp</code> directly, thinking that it would produce the <code>false</code> goal.</p>",
        "id": 207740841,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598127998
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> !</p>",
        "id": 207740848,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598128037
    }
]