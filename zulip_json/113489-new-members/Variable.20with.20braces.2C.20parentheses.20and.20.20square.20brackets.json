[
    {
        "content": "<p>The below code works.<br>\nHowever, if I changed the <code>h</code> to <code>pp</code> in function <code>p_mod_range</code>, pp will become unknown identifier....<br>\nNo matter I changed the brackets of variable pp to parentheses or square brackets or braces, neither of them can make variable <code>pp</code> be identified by lean....<br>\nWhy can't lean identifies variable <code>pp</code>, and how can I fix this ?</p>\n<div class=\"codehilite\"><pre><span></span>import data.nat.prime\nimport data.int.basic\nimport data.int.modeq\n\nopen nat\n\nlemma mod_range {b : ℕ} : (b &gt; 0) → ∀ (x : ℤ), 0 ≤ x % b ∧ x % b &lt; b :=\nbegin\n  intros h₁ x,\n  apply and.intro,\n  begin\n    apply int.mod_nonneg, simp,\n    assume h₃,\n    rw h₃ at *,\n    cases h₁\n  end,\n  begin\n    apply int.mod_lt_of_pos,\n    apply int.coe_nat_lt.elim_right,\n    assumption\n  end,\nend\n\nnamespace pf\n\nvariables { p: ℕ }  {pp : prime p}\n\nlemma p_mod_range (h: prime p): ∀ (x : ℤ),  0 ≤ x % p ∧ x % p &lt; p :=\n  begin\n    intro, apply mod_range, apply (prime.pos h),\n  end\n</pre></div>",
        "id": 147280537,
        "sender_full_name": "AHan",
        "timestamp": 1541658203
    },
    {
        "content": "<p><code>variables</code> are not added by default to the context of the current theorem unless they appear in the type</p>",
        "id": 147282373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541661482
    },
    {
        "content": "<p>you should use <code>include pp</code> to explicitly add it to the context</p>",
        "id": 147282417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541661516
    },
    {
        "content": "<p>Oh Yeah!! include works!</p>",
        "id": 147282435,
        "sender_full_name": "AHan",
        "timestamp": 1541661582
    },
    {
        "content": "<p>But why isn't it be added by default to the context?</p>",
        "id": 147282473,
        "sender_full_name": "AHan",
        "timestamp": 1541661605
    },
    {
        "content": "<p>This allows you to introduce a bunch of variables at the top, and selectively use them in the theorems you prove.</p>",
        "id": 147282760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541662102
    },
    {
        "content": "<p>Otherwise a lot of theorems (and definitions) would have unnecessary assumptions.</p>",
        "id": 147282770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541662123
    },
    {
        "content": "<p>Got it!!<br>\nIs the include scope ends until the end of the section or the namespace?<br>\nCan I stop include in the middle point, like only include the variables for one function?</p>",
        "id": 147282946,
        "sender_full_name": "AHan",
        "timestamp": 1541662417
    },
    {
        "content": "<p>Yes: <code>omit pp</code>. Otherwise it stops at <code>end section/namespace</code></p>",
        "id": 147282993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541662462
    },
    {
        "content": "<p>Ok! Thanks a lot for the explanations!</p>",
        "id": 147283011,
        "sender_full_name": "AHan",
        "timestamp": 1541662508
    },
    {
        "content": "<p>Although including variable works, some functions like <code>has_mul</code>, <code>has_one</code> in the following code, will have to explicitly name out the variables <code>p</code>, <code>p_gt_one</code>.<br>\nAnd which seems to make using the symbols <code>*</code>, <code>1</code> failed, like in function <code>pf_is_right_inv</code> below...<br>\nIs there any better way to handle this?</p>\n<div class=\"codehilite\"><pre><span></span>def pf {p : ℕ} := {e : ℤ// 0 ≤ e ∧ e &lt; p}\n\nnamespace pf\n\nvariables { p: ℕ } { p_gt_one : p &gt; 1 } { pp : prime p }\ninclude p_gt_one\n\ndef mul (a b : @pf p) : @pf p :=  ⟨(a.val * b.val) % p,  begin apply mod_range, apply (trans p_gt_one zero_lt_one) end⟩\ninstance : has_mul (@pf p) := ⟨@mul p p_gt_one⟩\nprotected def one  : @pf p := ⟨1, begin apply and.intro, apply zero_le_one, apply (int.coe_nat_le.elim_right p_gt_one), end⟩\ninstance : has_one (@pf p) := ⟨@pf.one p p_gt_one⟩\n\nlemma pf_is_right_inv (a : @pf p) : (a.1 &gt; 0) → a * (@pf.inv p p_gt_one a) = 1 := sorry\nend pf\n</pre></div>",
        "id": 147284728,
        "sender_full_name": "AHan",
        "timestamp": 1541665284
    },
    {
        "content": "<p>I don't think you should have <code>pp</code> and <code>p_gt_one</code>. Because you can deduce <code>p_gt_one</code> from <code>pp</code>.</p>",
        "id": 147284864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541665506
    },
    {
        "content": "<p>Also, you should make the <code>p</code> argument of <code>pf</code> explicit, so that you can remove the <code>@</code> from <code>pf</code> later.</p>",
        "id": 147284880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541665555
    },
    {
        "content": "<p>yeah I know I can deduce <code>p_gt_one</code> from <code>pp</code>, but I'm thinking of if in some cases like <code>add</code>, <code>mul</code>, <code>sub</code>, maybe I can make it a bit general, since <code>pp</code> isn't actually needed</p>",
        "id": 147284948,
        "sender_full_name": "AHan",
        "timestamp": 1541665667
    },
    {
        "content": "<p>Ok, but then I wouldn't make it a <code>variable</code>. Just include it as an assumption on that line.</p>",
        "id": 147285095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541665820
    },
    {
        "content": "<p>And consider renaming <code>p</code> to <code>n</code> to show that you also care about non-primes.</p>",
        "id": 147285106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541665855
    },
    {
        "content": "<p>What do you mean include it as an assumption on that line?</p>",
        "id": 147285194,
        "sender_full_name": "AHan",
        "timestamp": 1541665946
    },
    {
        "content": "<p>OH yes, renaming is a good suggestion!</p>",
        "id": 147285196,
        "sender_full_name": "AHan",
        "timestamp": 1541665964
    },
    {
        "content": "<p><code>def mul {h : p &gt; 1} (a b : @pf p) : @pf p := blah</code></p>",
        "id": 147285207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541665991
    },
    {
        "content": "<p>But it will be annoying to use, because you have to carry that proof around all the time.</p>",
        "id": 147285211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541666025
    },
    {
        "content": "<p>And I think you don't need it.</p>",
        "id": 147285258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541666054
    },
    {
        "content": "<p>You can define it for <code>p = 1</code> just fine.</p>",
        "id": 147285266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541666084
    },
    {
        "content": "<p>Yes.... seems like really annoying...<br>\nMaybe I should give up the idea of taking care of non-primes</p>",
        "id": 147285268,
        "sender_full_name": "AHan",
        "timestamp": 1541666090
    },
    {
        "content": "<p>I guess <code>p = 0</code> is problematic.</p>",
        "id": 147285271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541666097
    },
    {
        "content": "<p>Sure, after all, others have already done that. So if you are just experimenting, I wouldn't try to be as general as possible.</p>",
        "id": 147285280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541666126
    },
    {
        "content": "<p>Yeah I'm just experimenting, but \"others have already done that\", do you mean in the mathlib or is it in some other trustable third party library?</p>",
        "id": 147285399,
        "sender_full_name": "AHan",
        "timestamp": 1541666300
    },
    {
        "content": "<p>No in mathlib.</p>",
        "id": 147285404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541666316
    },
    {
        "content": "<p>Which file does it reside in?<br>\nCause this experiment isn't actually my main goal, I did this mainly because my main goal need this, and I didn't find this in mathlib...</p>",
        "id": 147285486,
        "sender_full_name": "AHan",
        "timestamp": 1541666416
    },
    {
        "content": "<p>What are you doing exactly? I'm not sure if it's in mathlib but I don't know what it is. It looks sort of like <code>zmod</code></p>",
        "id": 147285516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541666513
    },
    {
        "content": "<p>I want to examine some algorithms correctness, and the algorithms need <code>prime field</code><br>\nSo I'm thinking of defining a type of <code>prime field</code> and use as an instance of class <code>field</code></p>",
        "id": 147285657,
        "sender_full_name": "AHan",
        "timestamp": 1541666719
    },
    {
        "content": "<p>If by prime field you mean Z/pZ where <code>p</code> is a prime, that's <code>zmod</code></p>",
        "id": 147285717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541666803
    },
    {
        "content": "<p>Or do you mean the smallest subfield of a given field? I don't think we have that but you can fake it with <code>rat.cast</code></p>",
        "id": 147285740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541666850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  I've done what you suggested, but the problem that I can't use the symbol <code>*</code> and <code>1</code> still exists...</p>\n<div class=\"codehilite\"><pre><span></span>def pf (p : ℕ) := {e : ℤ// 0 ≤ e ∧ e &lt; p}\n\nnamespace pf\n\nvariables ( p: ℕ ) ( pp : prime p )\ninclude pp\n\ndef mul (a b : pf p) : pf p := ⟨(a.val * b.val) % p,     begin apply mod_range, apply prime.pos pp end⟩\ninstance : has_mul (pf p) := ⟨@mul p pp⟩\nprotected def one  : pf p := ⟨1, begin apply and.intro, apply zero_le_one, apply (int.coe_nat_lt.elim_right (prime.gt_one pp)), end⟩\ninstance : has_one (pf p) := ⟨@pf.one p pp⟩\n\nlemma pf_is_right_inv (a : pf p) : (a.1 &gt; 0) → a * (@pf.inv p pp a) = 1 :=\n</pre></div>",
        "id": 147285787,
        "sender_full_name": "AHan",
        "timestamp": 1541666893
    },
    {
        "content": "<p>Ok, what happens if you do not include <code>pp</code>?</p>",
        "id": 147285867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541667011
    },
    {
        "content": "<p>Just don't make any assumptions on <code>p</code>.</p>",
        "id": 147285875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541667029
    },
    {
        "content": "<p>But, like Mario said, you are basically redefining <code>zmod n</code>.</p>",
        "id": 147285889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541667056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Yeah <code>Z/pZ </code> exactly the thing I want<br>\nDo you mean the <code>zmod</code> in <code>modeq</code> ? Isn't is some sort of equivalence class instead of some types like <code>int</code> or <code>nat</code> ?</p>",
        "id": 147285989,
        "sender_full_name": "AHan",
        "timestamp": 1541667203
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/dbb3ff0b5b2e42aa71d8167d7efdb3aa12d6e483/data/zmod/basic.lean#L10\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/dbb3ff0b5b2e42aa71d8167d7efdb3aa12d6e483/data/zmod/basic.lean#L10\">https://github.com/leanprover/mathlib/blob/dbb3ff0b5b2e42aa71d8167d7efdb3aa12d6e483/data/zmod/basic.lean#L10</a></p>",
        "id": 147286042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541667254
    },
    {
        "content": "<p>It is really almost the same as what you did. The set of naturals between <code>0</code> and <code>n</code>.</p>",
        "id": 147286049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541667275
    },
    {
        "content": "<p>If I don't include pp, since I have to prove the result of <code>mul</code> &lt; p, I will have to include something like <code>p_gt_zero</code>in the assumption</p>",
        "id": 147286167,
        "sender_full_name": "AHan",
        "timestamp": 1541667465
    },
    {
        "content": "<p>Oh!! Thank you very much! (Didn't notice this... as I can't find zmod via C-c C-d....)</p>",
        "id": 147286405,
        "sender_full_name": "AHan",
        "timestamp": 1541667735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133545\">@AHan</span> Sure, that's right. You will notice that <code>zmod</code> uses <code>pnat</code>: positive natural numbers.</p>",
        "id": 147287978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541669690
    },
    {
        "content": "<p>Yes, didn't even notice that there were <code>pnat</code>, this really helped a lot! Thank you!</p>",
        "id": 147296994,
        "sender_full_name": "AHan",
        "timestamp": 1541681737
    }
]