[
    {
        "content": "<p>Good to know, but I think it will be another few weeks or month for me to write PR-worthy proofs.</p>",
        "id": 262125051,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1637353557
    },
    {
        "content": "<p>I have another vector simplifying thing now: Given <code>ys : vector W n.succ.succ</code> how can I get <code>ys.last = ys.tail.last</code>?</p>",
        "id": 262125136,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1637353583
    },
    {
        "content": "<p>And similarly,  I have <code>ys : vector W 1</code> and want to show <code>ys.last = ys.head</code>.</p>",
        "id": 262125531,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1637353800
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with these questions as sorried examples? It makes it much easier for others to work on them.</p>",
        "id": 262125630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637353831
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.sub</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.vector</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n.succ.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ys.last</span> <span class=\"bp\">=</span> <span class=\"n\">ys.tail.last</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">vector.last_def</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262125814,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1637353928
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">W</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ys.head</span> <span class=\"bp\">=</span> <span class=\"n\">ys.last</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">W</span> <span class=\"n\">n.succ.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ys.last</span> <span class=\"bp\">=</span> <span class=\"n\">ys.tail.last</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262125925,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1637353998
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ys.last</span> <span class=\"bp\">=</span> <span class=\"n\">ys.head</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">vector.last_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">fin.coe_nat_eq_last</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262125962,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1637354027
    },
    {
        "content": "<p>(a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> has all imports and variables, but Ruben has figured the imports out anyway) (the reason I asked was precisely because I didn't know the imports and was too lazy to search for the definitions to find them out)</p>",
        "id": 262126079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637354079
    },
    {
        "content": "<p>Oh, indeed, sorry for missing those. And many thanks to Ruben!</p>",
        "id": 262126143,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1637354114
    },
    {
        "content": "<p>A way that's perhaps a bit too knowledgeable about the underlying definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">W</span> <span class=\"n\">n.succ.succ</span><span class=\"o\">),</span> <span class=\"n\">ys.last</span> <span class=\"bp\">=</span> <span class=\"n\">ys.tail.last</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">hys</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 262126163,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637354122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422703\">Malvin Gattinger</span> has marked this topic as resolved.</p>",
        "id": 262126822,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637354438
    },
    {
        "content": "<p>I have another similar thing.  How can I find useful lemmas? Currently I search on <a href=\"https://leanprover-community.github.io/mathlib_docs/data/vector.html#vector.head\">https://leanprover-community.github.io/mathlib_docs/data/vector.html#vector.head</a> for anything with \"nth\", \"tail\", \"head\" in the name. Is there a better way? And if there is no applicable lemma, then I should probably read and try to understand the underlying definitions ... The code by Kyle above is still a mystery to me.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.vector</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">W</span> <span class=\"n\">n.succ.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ys.nth</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">ys.tail.head</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262130590,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1637356347
    },
    {
        "content": "<p>I think it's basically doing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">W</span> <span class=\"n\">n.succ.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ys.last</span> <span class=\"bp\">=</span> <span class=\"n\">ys.tail.last</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ys</span> <span class=\"k\">with</span> <span class=\"n\">ys</span> <span class=\"n\">hys</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ys</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ys</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hys</span><span class=\"o\">,</span> <span class=\"c1\">-- hys is a contradiction</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ys</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">ys</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hys</span><span class=\"o\">,</span> <span class=\"c1\">-- hys is a contradiction</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>When you use the match syntax, Lean's able to automatically figure out that, given the length is <code>n.succ.succ</code>, the underlying list for the vector can't be <code>[]</code> or <code>[a]</code>.  Then the point is that for vectors, <code>last</code> and <code>tail</code> are defined in terms of their underlying list counterparts, and then the theorem is obviously true (in the sense that <code>refl</code> works).</p>",
        "id": 262131833,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637356958
    },
    {
        "content": "<p>The same proof basically works for your <code>example</code>, though I needed to work a little harder to get the contradiction.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">W</span> <span class=\"n\">n.succ.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ys.nth</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">ys.tail.head</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ys</span> <span class=\"k\">with</span> <span class=\"n\">ys</span> <span class=\"n\">hys</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ys</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ys</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hys</span><span class=\"o\">,</span> <span class=\"c1\">-- hys is a contradiction</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ys</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">ys</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hys</span><span class=\"o\">,</span> <span class=\"n\">injection</span> <span class=\"n\">hys</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262132474,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637357302
    },
    {
        "content": "<p>This works, too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">W</span> <span class=\"n\">n.succ.succ</span><span class=\"o\">),</span> <span class=\"n\">ys.nth</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">ys.tail.head</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">hys</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 262132660,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637357409
    },
    {
        "content": "<p>Ohh, that makes sense, so there is no need to prove manually that the pattern matching is exhaustive, nice.</p>",
        "id": 262133701,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1637357979
    },
    {
        "content": "<p>Strange, I get <code>invalid field notation, 'last' is not a valid \"field\" because environment does not contain 'vector.last'</code> when I put your code back into my MWE. Also I noticed that you changed <code>(W : Type)</code> to <code>{W : Type*}</code>. What does this difference mean?</p>",
        "id": 262134568,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1637358486
    },
    {
        "content": "<p>That shouldn't make a difference (and that code came from before you gave the mwe).  Do you have <code>data.vector.basic</code> imported? The error message is saying it doesn't know what <code>vector.last</code> is.</p>",
        "id": 262135376,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637358924
    },
    {
        "content": "<p>The difference between <code>Type</code> and <code>Type*</code> a.k.a. <code>Type u</code> is that the latter is universe-polymorphic. <code>Type</code> is not the only universe of types which Lean has, there's also <code>Type 1</code>, <code>Type 2</code> etc.</p>",
        "id": 262135431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637358955
    },
    {
        "content": "<p>Ah, I had <code>import data.vector</code> but now with <code>import data.vector.basic</code> it works!</p>",
        "id": 262136384,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1637359410
    },
    {
        "content": "<p>Yes, the former is core lean, the latter is mathlib</p>",
        "id": 262176735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637405291
    }
]