[
    {
        "content": "<p>Suppose I have (P or Q) and (P -&gt; Q -&gt; R) theorems. I have R as a goal. I have a proof P -&gt; Q and a proof Q -&gt; P (which are similar but not the same). What's the most efficient way of putting these all together?</p>",
        "id": 207587375,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1597967090
    },
    {
        "content": "<p><code>finish</code>?</p>",
        "id": 207587924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597967617
    },
    {
        "content": "<p><code>tauto!</code>?</p>",
        "id": 207587935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597967634
    },
    {
        "content": "<p>You know, you could just state this question completely in lean and sorry the proof and post here in triple back ticks</p>",
        "id": 207587995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597967688
    },
    {
        "content": "<p>Then it's much easier for other people to play along</p>",
        "id": 207588005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597967700
    },
    {
        "content": "<p>I'm on mobile right now but I'll gamble.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">or</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Q</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207588228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597967910
    },
    {
        "content": "<p>I don't have Unicode on my phone. Can someone recommend a better keyboard for Android?</p>",
        "id": 207588257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597967944
    },
    {
        "content": "<p>If you want a term mode proof then <code>h1.elim (λ hp, h2 hp (h3 hp)) (λ hq, h2 (h4 hq) hq)</code> should work.</p>",
        "id": 207588396,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597968042
    },
    {
        "content": "<p>Sorry! I was on my phone too!</p>",
        "id": 207588661,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1597968254
    },
    {
        "content": "<p>To be more precise, then: I'm on the 3rd tutorial sheet.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>It recommends using:<br>\n<code>le_total x y : x ≤ y ∨ y ≤ x</code></p>\n<p>and of course, I have <code>le_antisymm</code>, although I don't know if I will need it.</p>\n<p>Given the hypotheses, it's not hard to show that f(x) ≤ x if and only if x ≤ f(x)! What I want to avoid is splitting the cases wrongly and ending up repeating myself! I had a proof but it felt insufficiently optimised.</p>",
        "id": 207588919,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1597968477
    },
    {
        "content": "<p>This is not an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> because it lacks the definition of <code>non_decreasing</code>.</p>",
        "id": 207589933,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597969553
    },
    {
        "content": "<p>Ah, I'm sorry.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">bw</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n    <span class=\"bp\">...</span>       <span class=\"bp\">=</span> <span class=\"n\">x</span>       <span class=\"o\">:</span> <span class=\"n\">h&#39;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span>    <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>     <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">le_total</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207590144,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1597969778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/Hypotheses.20and.20avoiding.20repetition/near/207589933\">said</a>:</p>\n<blockquote>\n<p>This is not an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> because it lacks the definition of <code>non_decreasing</code>.</p>\n</blockquote>\n<p>That should be ok; this is Massot's tutorial, exercise 0028 in <code>03_forall_or.lean</code> (though it would have been better if <span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span>  mentioned this <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 207590159,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597969799
    },
    {
        "content": "<p>That's what I now have. Which is... OK. But the end feels untidy.</p>",
        "id": 207590206,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1597969807
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_total</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hf₂</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hf</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">hx</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hf₂</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hf</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207590243,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597969859
    },
    {
        "content": "<p>I found my solution to this.   It looks like it's pretty much the same, except things are not annunciated with <code>calc</code> statements, and I used <code>cases</code> rather than proving an iff first:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">hc</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h₁</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h₂</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207590399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597970002
    },
    {
        "content": "<p>Oh, that's quite nice. You avoid the use of le_antisymm (I assume that is cracked by the hammer that is linarith?)</p>",
        "id": 207590503,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1597970084
    },
    {
        "content": "<p>It can be simplified a little:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">hc</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h₁</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h₂</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207590511,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597970090
    },
    {
        "content": "<p>Yes; the unfold doesn't do Lean any benefit?</p>",
        "id": 207590529,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1597970118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/113489-new-members/topic/Hypotheses.20and.20avoiding.20repetition/near/207590503\">said</a>:</p>\n<blockquote>\n<p>You avoid the use of le_antisymm (I assume that is cracked by the hammer that is linarith?)</p>\n</blockquote>\n<p>Yeah, that's what it looks like is happening.</p>",
        "id": 207590540,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597970133
    },
    {
        "content": "<p>In <code>rw h' at h₁ h₂</code>, what is this doing: apply rw h' at each of them in turn?</p>",
        "id": 207590596,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1597970168
    },
    {
        "content": "<p>The unfold must have been there for me to notice I could apply <code>f x</code> and <code>x</code> as arguments to it, but Lean will unfold the definition for you as you do the application.</p>",
        "id": 207590610,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597970185
    },
    {
        "content": "<p>I guess <code>linarith</code> won't work for a <code>linear_order α</code>, it needs <code>real</code></p>",
        "id": 207590624,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597970198
    },
    {
        "content": "<p>And yes, <code>rw</code> can be <code>at</code> multiple hypotheses to do multiple rewrites.  You can explicitly rewrite the goal with <code>at ⊢</code> (entered with <code>\\|-</code>).</p>",
        "id": 207590647,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597970242
    }
]