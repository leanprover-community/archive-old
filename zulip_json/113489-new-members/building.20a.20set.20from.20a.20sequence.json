[
    {
        "content": "<p>Suppose I have a sequence <code>A i</code> indexed by some set <code>I</code>. How would I build the set <code>{A i : i ∈ I}</code> in Lean?</p>",
        "id": 307022616,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1667177820
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image\">docs#set.image</a></p>",
        "id": 307023273,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1667178465
    },
    {
        "content": "<p>maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.range\">docs#set.range</a> instead</p>",
        "id": 307023915,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667179158
    },
    {
        "content": "<p>Alright, that makes sense, but I realized now that I said it was indexed by a set but in fact it is indexed by a type (i.e. I have a function <code>f : ℕ → 'a</code> and would like to construct the set <code>{f n : n ∈ ℕ}</code>. Using <code>set.image</code> doesn't seem to work because <code>ℕ</code> is a type, rather than a set. Any idea how to work with that?</p>",
        "id": 307024468,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1667179804
    },
    {
        "content": "<p>Never mind, <code>set.range</code> got it! Thanks for the help!</p>",
        "id": 307024808,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1667180115
    },
    {
        "content": "<p>By the way, for your original formulation you can write <code>{(A i) : (i ∈ I)}</code>. (This should work, but I didn't test it.)</p>",
        "id": 307025411,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667180708
    },
    {
        "content": "<p>The second would be <code>{(f n) : (n : ℕ)}</code></p>",
        "id": 307025487,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667180768
    },
    {
        "content": "<p>It might be better to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.range\">docs#set.range</a> though to get access to more lemmas.</p>",
        "id": 307025502,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667180803
    },
    {
        "content": "<p>you don't need it in this case as Junyan shows, but <code>set.univ</code> is the set of all elements of a type</p>",
        "id": 307027200,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1667182813
    },
    {
        "content": "<p>Kyle, I can't seem to get that cool-looking notation to work.</p>",
        "id": 307027208,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1667182825
    },
    {
        "content": "<p>These seem to work for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 307027474,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667183121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> your first example had <code>:</code> in the middle instead of <code>|</code>... I think that may have been why it wasn't working for Eric</p>",
        "id": 307029137,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667185068
    }
]