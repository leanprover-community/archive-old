[
    {
        "content": "<p>This is a really stupid question, but I really don't know (I am not trolling).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How do I change <code>(λ x : ℕ, x + 1) 2</code> to <code>2 + 1</code> using <code>rw</code> instead of <code>change</code> please? Using <code>change</code> is really annoying when the term gets longer.</p>",
        "id": 309229736,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668186112
    },
    {
        "content": "<p>Why do you want to use <code>rw</code>? <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#dsimp\">tactic#dsimp</a> can perform beta reduction.</p>",
        "id": 309230321,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668186318
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 309230396,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668186355
    },
    {
        "content": "<p>Can you please give me a <code>rw</code> lemma? I usually want to avoid <code>dsimp</code>s.</p>",
        "id": 309230801,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668186505
    },
    {
        "content": "<p>Using <code>dsimp</code> is the right thing to do, but does <code>refl</code> work without anything else?</p>",
        "id": 309230837,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668186521
    },
    {
        "content": "<p>I think that also something like <code>change _ + _ = _</code> should work, saving some work</p>",
        "id": 309230973,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668186581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Redundant.20lambda/near/309230837\">said</a>:</p>\n<blockquote>\n<p>Using <code>dsimp</code> is the right thing to do, but does <code>refl</code> work without anything else?</p>\n</blockquote>\n<p>Yes <code>refl</code> works. However, my point was not to prove <code>2+1</code> but to provide a MWE. Having stuff like <code>(λ x : ℕ, x + 1) 2</code> inside real proofs sucks.</p>",
        "id": 309231308,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668186708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Redundant.20lambda/near/309230973\">said</a>:</p>\n<blockquote>\n<p>I think that also something like <code>change _ + _ = _</code> should work, saving some work</p>\n</blockquote>\n<p>I know it works but it is sometimes too verbose even with those underscores.</p>",
        "id": 309231460,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668186770
    },
    {
        "content": "<p>Maybe the question is why do you want to avoid <code>dsimp</code>, whose work is exactly this (among other things)</p>",
        "id": 309231719,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668186878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Redundant.20lambda/near/309230801\">said</a>:</p>\n<blockquote>\n<p>Can you please give me a <code>rw</code> lemma? I usually want to avoid <code>dsimp</code>s.</p>\n</blockquote>\n<p>Why do you want to avoid <code>dsimp</code>s in the first place? After you finish the proof, you can delete all redundant dsimps (and most of the time, all of them are redundant).</p>\n<p>If you want a <code>rw</code> lemma, you can make it easily:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">beta</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">beta</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But try not to use it in real proofs, because it's an anti-pattern.</p>",
        "id": 309232082,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668187022
    },
    {
        "content": "<p>People usually don't want <code>dsimp</code> to stay inside the proof after the proof is finished. However, it hinders readability if I have to read stuff like <code>(λ x : ℕ, x + 1) 2</code> later when I refactor my proof. Moreover <code>dsimp</code> sometimes does too much and I don't want to deal with it.</p>",
        "id": 309232158,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668187061
    },
    {
        "content": "<p>Is there no such lemma inside the Lean core?</p>",
        "id": 309232271,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668187088
    },
    {
        "content": "<p><code>dsimp only</code> is perfectly fine in a proof</p>",
        "id": 309232282,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668187093
    },
    {
        "content": "<p>Thanks for clarification. Still <code>dsimp only,</code> sounds wrong. I usually expect something to appear after <code>only</code>.</p>",
        "id": 309232440,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668187164
    },
    {
        "content": "<p>But it does what you want right? I am not in front of a computer</p>",
        "id": 309232648,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668187247
    },
    {
        "content": "<p>Yes, it does. Thanks.</p>",
        "id": 309232680,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668187260
    },
    {
        "content": "<p>If <code>dsimp only</code> is the right thing to write, shouldn't we have an alias for it (which would make it sound idiomatic)?</p>",
        "id": 309233198,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668187429
    },
    {
        "content": "<p>I don't know</p>",
        "id": 309234749,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668188036
    },
    {
        "content": "<p><code>dsimp only</code> is already pretty idiomatic in my opinion</p>",
        "id": 309236596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668188850
    },
    {
        "content": "<p>When I write <code>dsimp only,</code> or <code>clear_except,</code> I feel like saying a transitive verb without an object.</p>",
        "id": 309255196,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668197624
    },
    {
        "content": "<p>maybe you can think of it like \"do you want <code>dsimp with extras</code>?\" \"no, I just want <code>dsimp only</code>\"</p>",
        "id": 309261068,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668201128
    },
    {
        "content": "<p>no idea how to make <code>clear_except</code> sound normal, though</p>",
        "id": 309261162,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668201188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> If you find <code>dsimp only</code> to be too linguistically irksome, you can write <code>dsimp only []</code>, which means the same thing as <code>dsimp only</code>.</p>\n<p>You can see what kinds of reductions <code>dsimp</code> does in the last section of <a href=\"https://leanprover-community.github.io/extras/simp.html\">https://leanprover-community.github.io/extras/simp.html</a> (look for every option for which the <code>dsimp</code> column has a <code>tt</code>).</p>",
        "id": 309341997,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668260902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/Redundant.20lambda/near/309261162\">said</a>:</p>\n<blockquote>\n<p>no idea how to make <code>clear_except</code> sound normal, though</p>\n</blockquote>\n<p>We would have to make an alias like <code>clear_all</code> for <code>clear_except</code> without arguments. However, I don't think it is a good way how to develop a programming language. IMO it falls into the same category as <code>intros</code> and <code>variables</code>.</p>",
        "id": 309343439,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668261597
    },
    {
        "content": "<p>I don't think I've ever used <code>clear_except</code>. What is the sort of scenario where you are finding you need to manage your context like this?</p>",
        "id": 309343799,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668261734
    },
    {
        "content": "<p>Regarding <code>intros</code>, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\">tactic#rintro</a> is a more powerful replacement. <code>variables</code> has been fixed in Lean 4; it's always <code>variable</code> now.</p>",
        "id": 309344143,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668261893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Redundant.20lambda/near/309343799\">said</a>:</p>\n<blockquote>\n<p>I don't think I've ever used <code>clear_except</code>. What is the sort of scenario where you are finding you need to manage your context like this?</p>\n<p>Maybe I don't use it because the style I use is writing lots of small lemmas that take few steps. I've used <code>clear</code> occasionally in conjuction with <code>induction</code> to make sure my induction hypothesis is correct, though.</p>\n</blockquote>\n<p>In past, I had many proofs by cases in my code where some of the cases were tautological, so I closed them by <code>{ clear_except, tauto, },</code> and continued to the next case. That said, most of these use cases disappeared from my code after I learned about <code>no_confusion</code> on inductive types.</p>",
        "id": 309345019,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668262320
    },
    {
        "content": "<p>I don't use that many small lemmas. Probably because I prefer to clutter my proofs rather than to clutter my namespace.</p>",
        "id": 309345263,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668262412
    },
    {
        "content": "<p>Where do you use <code>no_confusion</code>? I think there are usually other approaches than using it directly (like <code>cases h</code> or <code>injection h</code> when <code>h</code> is an equality. There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unify_equations\">tactic#unify_equations</a>, which I occasionally use).</p>",
        "id": 309345346,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668262442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Redundant.20lambda/near/309345263\">said</a>:</p>\n<blockquote>\n<p>I don't use that many small lemmas. Probably because I prefer to clutter my proofs rather than to clutter my namespace.</p>\n</blockquote>\n<p>I suppose this is where the software engineering part of working with proof assistants comes in. If you find the right way to decompose your arguments into more generally useful sub-lemmas, then it's not cluttering your namespace, and you get to reuse sub-arguments.</p>",
        "id": 309345502,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668262516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Redundant.20lambda/near/309345346\">said</a>:</p>\n<blockquote>\n<p>Where do you use <code>no_confusion</code>? I think there are usually other approaches than using it directly (like <code>cases h</code> or <code>injection h</code> when <code>h</code> is an equality. There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unify_equations\">tactic#unify_equations</a>, which I occasionally use).</p>\n</blockquote>\n<p>If you want to see <em>how often</em> I use <code>no_confusion</code>, look at these two commits I made the other day:<br>\n<a href=\"https://github.com/madvorak/grammars/commit/850c2ab314d3602c0c8acb835f272514b9dd8ee1\">https://github.com/madvorak/grammars/commit/850c2ab314d3602c0c8acb835f272514b9dd8ee1</a><br>\n<a href=\"https://github.com/madvorak/grammars/commit/decbbe93874769b8e8bd0230813a77b7787538b9\">https://github.com/madvorak/grammars/commit/decbbe93874769b8e8bd0230813a77b7787538b9</a></p>",
        "id": 309345658,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668262571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Redundant.20lambda/near/309345502\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Redundant.20lambda/near/309345263\">said</a>:</p>\n<blockquote>\n<p>I don't use that many small lemmas. Probably because I prefer to clutter my proofs rather than to clutter my namespace.</p>\n</blockquote>\n<p>I suppose this is where the software engineering part of working with proof assistants comes in. If you find the right way to decompose your arguments into more generally useful sub-lemmas, then it's not cluttering your namespace, and you get to reuse sub-arguments.</p>\n</blockquote>\n<p>I usually try to follow the software-engineering best practices, but I am a dumb bitch.</p>",
        "id": 309345900,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668262682
    },
    {
        "content": "<p>Re your commits, for example you can do <code>exact option.no_confusion zeroth</code> -&gt; <code>cases zeroth</code> or <code>injection zeroth</code></p>",
        "id": 309346254,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668262815
    },
    {
        "content": "<p>I didn't know I could use <code>cases</code> on equalities! It works, but what does <code>cases</code> do with equalities in general?</p>",
        "id": 309346691,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668263021
    },
    {
        "content": "<p>Think about what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq\">docs#eq</a> is, an inductive type with a single constructor <code>rfl</code></p>",
        "id": 309346802,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668263051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Redundant.20lambda/near/309346254\">said</a>:</p>\n<blockquote>\n<p>Re your commits, for example you can do <code>exact option.no_confusion zeroth</code> -&gt; <code>cases zeroth</code> or <code>injection zeroth</code></p>\n</blockquote>\n<p>Still, we probably agree that my old style — discharging these simple situations by <code>tauto</code> — was stupid.</p>",
        "id": 309346848,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668263081
    },
    {
        "content": "<p>What <code>cases</code> does is try to solve for the fact that when you have <code>x = y</code> that <code>x</code> and <code>y</code> need to be definitionally the same for it to be <code>rfl : x = x</code></p>",
        "id": 309346853,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668263083
    },
    {
        "content": "<p>but when <code>cases</code> finds a contradiction, it'll automatically close the goal</p>",
        "id": 309346931,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668263116
    },
    {
        "content": "<p>it's able to do some amount of <code>no_confusion</code> reasoning for you, basically.</p>",
        "id": 309346953,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668263129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Redundant.20lambda/near/309346802\">said</a>:</p>\n<blockquote>\n<p>Think about what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq\">docs#eq</a> is, an inductive type with a single constructor <code>rfl</code></p>\n</blockquote>\n<p>I am shaken. I always thought that <code>=</code> was some kind of primitivum, not an inductive type, not a pi type either.</p>",
        "id": 309347182,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668263268
    },
    {
        "content": "<p>See <a href=\"https://xenaproject.wordpress.com/2021/04/18/induction-on-equality/\">this</a> post for more details.</p>",
        "id": 309347390,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668263371
    },
    {
        "content": "<p>Back to the topic... Is there a consensus that using <code>dsimp,</code> in non-terminal positions is unacceptable but using <code>dsimp only,</code> in non-terminal positions is all right?</p>",
        "id": 309348716,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668263990
    },
    {
        "content": "<p>The consensus is that <code>dsimp</code> is OK everywhere, but that you should check whether you really needed it since sometimes it's removable.</p>",
        "id": 309349069,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668264131
    },
    {
        "content": "<p>It is often removable but doing so makes the proof unreadable for the next time.</p>",
        "id": 309349217,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668264224
    },
    {
        "content": "<p>Then don't remove it <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 309349288,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668264245
    },
    {
        "content": "<p>Is the consensus that <code>dsimp,</code> is OK when removing it breaks the proof and that <code>dsimp only,</code> is OK always?</p>",
        "id": 309349326,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668264271
    },
    {
        "content": "<p><code>dsimp only</code> is surely OK. Usually, even nonterminal <code>dsimp</code> are acceptable, but I personally think <code>dsimp only [...]</code> it's better.</p>",
        "id": 309349608,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668264413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Redundant.20lambda/near/309341997\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> If you find <code>dsimp only</code> to be too linguistically irksome, you can write <code>dsimp only []</code>, which means the same thing as <code>dsimp only</code>.</p>\n<p>You can see what kinds of reductions <code>dsimp</code> does in the last section of <a href=\"https://leanprover-community.github.io/extras/simp.html\">https://leanprover-community.github.io/extras/simp.html</a> (look for every option for which the <code>dsimp</code> column has a <code>tt</code>).</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/D2BzXfXisqvXeCR08kNVew2K/image.png\">image.png</a> <br>\nThis is the thing that shouted at my face.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/D2BzXfXisqvXeCR08kNVew2K/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/D2BzXfXisqvXeCR08kNVew2K/image.png\"></a></div>",
        "id": 309349781,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668264486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Redundant.20lambda/near/309349608\">said</a>:</p>\n<blockquote>\n<p><code>dsimp only</code> is surely OK. Usually, even nonterminal <code>dsimp</code> are acceptable, but I personally think <code>dsimp only [...]</code> it's better.</p>\n</blockquote>\n<p>Then I have 24 <code>dsimp</code>s to refactor. Which is not that bad. Still, I hope I will use <code>dsimp</code> less often in the future.</p>",
        "id": 309349899,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668264553
    },
    {
        "content": "<p>Ar you aware of <code>squeeze_dsimp</code>? It will do this for you.</p>",
        "id": 309350560,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668264848
    },
    {
        "content": "<p>(but not 24 times at once)</p>",
        "id": 309350578,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668264864
    },
    {
        "content": "<p><code>squeeze_dsimp</code> is not robust and is <a href=\"#narrow/stream/113488-general/topic/non-terminal.20.60simp.60s.20in.20mathlib/near/291254910\">prone to return invalid results</a>; you may use <code>squeeze_simp</code> and remove unnecessary lemmas but that's more work.</p>\n<p>Structure projection lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.coe_mk\">docs#subtype.coe_mk</a> are subsumed by <code>dsimp only</code>, but we still include them in mathlib, so I'd argue it's acceptable/desirable to have this lemma <code>lemma beta {α β : Sort*} {f : α → β} {x : α} : (λ (y : α), f y) x = f x := rfl</code> in mathlib as well to gain more fine control. (However, the LHS ⟨a,h⟩ of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.coe_mk\">docs#subtype.coe_mk</a> is prone to \"motive type not correct\" errors when rewriting <code>a</code>, so you do need to simplify it to RHS sometimes, and the same doesn't seem to apply to <code>(λ y, f y) x</code>.)</p>",
        "id": 309361113,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668270144
    },
    {
        "content": "<p>An issue with <code>beta</code> as a rewrite lemma is that it requires higher order unification to apply (you need to solve for a function <code>f</code> -- you might have <code>y</code> appear multiple times in <code>f y</code> in general beta reduction). This version is closer to <code>congr_fun</code> of eta-reduction.</p>",
        "id": 309365511,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668272775
    },
    {
        "content": "<p><code>squeeze_dsimp</code> is buggy though, right?</p>",
        "id": 309377379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668279845
    }
]