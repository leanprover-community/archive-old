[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.measure_space</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variable</span> <span class=\"bp\">Ω</span>   <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_subset</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊂</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span>\n<span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊂</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 229125174,
        "sender_full_name": "Iocta",
        "timestamp": 1615061401
    },
    {
        "content": "<p>I was expecting library_search to work here</p>",
        "id": 229125259,
        "sender_full_name": "Iocta",
        "timestamp": 1615061449
    },
    {
        "content": "<p>It's two steps. First <code>rw ssubset_iff_subset_ne</code> and then you're done by definition.</p>",
        "id": 229125384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615061557
    },
    {
        "content": "<p>I found this by noting that <code>⊂</code> was called <code>ssubset</code> (by hovering over it), then searching for <code>ssubset</code> in <code>data.set.basic</code>. Then you can see all the API for this symbol. You know it's not the same as <code>⊆</code> right?</p>",
        "id": 229125448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615061630
    },
    {
        "content": "<p>I tried changing it to \\subseteq, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_subset</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which says <code>Try this: exact hab x hx</code>, and when I click that it says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">hab</span> <span class=\"n\">x</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span>\n<span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 229126095,
        "sender_full_name": "Iocta",
        "timestamp": 1615062204
    },
    {
        "content": "<p>I guess it means <code>exact @hab x hx</code> which works</p>",
        "id": 229126372,
        "sender_full_name": "Iocta",
        "timestamp": 1615062412
    },
    {
        "content": "<p>Yeah, Lean 3's pretty printer sometimes gives bad suggestions, see also <a href=\"https://github.com/leanprover-community/mathlib/issues/5659\">#5659</a> and <a href=\"https://github.com/leanprover-community/lean/issues/394\">lean#394</a>.</p>",
        "id": 229126480,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615062541
    },
    {
        "content": "<p>It's been a few months since I was in here; am I supposed to be on lean 4 now?</p>",
        "id": 229126651,
        "sender_full_name": "Iocta",
        "timestamp": 1615062655
    },
    {
        "content": "<p>If you're curious, it's not too hard to play around with now (see <a href=\"https://leanprover.github.io/lean4/doc/\">the manual</a>) and <a href=\"https://leanprover-community.github.io/lt2021/schedule.html\">the videos from Lean Together 2021</a>, but it's going to be many months before mathlib is ported to Lean 4.</p>",
        "id": 229126770,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615062770
    },
    {
        "content": "<p>ok I'll stick with 3 then</p>",
        "id": 229126820,
        "sender_full_name": "Iocta",
        "timestamp": 1615062831
    }
]