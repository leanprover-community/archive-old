[
    {
        "content": "<p>Can I get Lean to simplify a polynomial for me without me doing a bunch of comm, distrib etc steps? For example, to prove (n^2 + 2 * m^2 - 2 * n * m) * (n^2 + 2 * m^2 + 2 * n * m) = n^4 + 4 * m ^ 4 which is just standard multiplying out the polynomials and canceling terms</p>",
        "id": 211281689,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601051646
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring\">tactic#ring</a> is probably what you want</p>",
        "id": 211282373,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601051989
    },
    {
        "content": "<p>oh cool - i had imported algebra.ring not tactic.ring</p>",
        "id": 211282589,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601052094
    },
    {
        "content": "<p>similar question maybe - is there any library that corresponds integer arithmetic with natural number arithmetic? like if i know a+b=c with integers, and they're all positive, and i want to conclude a+b=c with natural numbers</p>",
        "id": 211283460,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601052499
    },
    {
        "content": "<p>For that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#lift\">tactic#lift</a> now!</p>",
        "id": 211283981,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601052743
    },
    {
        "content": "<p>nice. is there any example of that in code? the docs say... Usage: 'lift' expr 'to' expr ('using' expr)? ('with' id (id id?)?)?. which, i feel like that is using some sort of non-lean notation</p>",
        "id": 211284199,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601052850
    },
    {
        "content": "<p>I don't know of any examples, but you can check out the test file at <a href=\"https://github.com/leanprover-community/mathlib/blob/680f877108074901a88bcb5b7cf595f2c7951448/test/tactics.lean#L214\">https://github.com/leanprover-community/mathlib/blob/680f877108074901a88bcb5b7cf595f2c7951448/test/tactics.lean#L214</a><br>\nif you delete the lines that don't start with lift that should give you an example</p>",
        "id": 211284573,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601053032
    },
    {
        "content": "<p>thanks</p>",
        "id": 211284589,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601053039
    },
    {
        "content": "<p>Adding examples to the tactic doc entry would make a great PR...</p>",
        "id": 211292122,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601056760
    },
    {
        "content": "<p>i gave up on using this tactic, for what it's worth. maybe I don't really get how to use tactics in general - if I happen to write a large sequence of tactics that works, it's great, but i can't really figure out how to debug or to see the partial state of what's going on when i'm partway through writing some sequence</p>",
        "id": 211294528,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601057956
    },
    {
        "content": "<p>whereas, if i'm not using tactics but just writing a bunch of have h, from blah blah, statements, at least then I can see if each one is valid</p>",
        "id": 211294548,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601057977
    },
    {
        "content": "<p>i feel like if i use a tactic and it works immediately, great, and otherwise i am just stumped</p>",
        "id": 211294649,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601058013
    },
    {
        "content": "<p>Did you give up on the <code>lift</code> tactic?<br>\nHere is a simple example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pos_le_mul_self</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span>\n  <span class=\"n\">lift</span> <span class=\"n\">b</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"n\">using</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat.le_mul_self</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>grepping mathlib should give you plenty more...</p>",
        "id": 211295160,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1601058246
    },
    {
        "content": "<p>i still don't get that example honeslty</p>",
        "id": 211295784,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601058530
    },
    {
        "content": "<p>i have to look up norm_cast. but, i don't see any examples of that in the docs either</p>",
        "id": 211296036,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601058636
    },
    {
        "content": "<p>It changes the the type of <code>b</code> to <code>ℕ</code> (it can, because you tell it that <code>0 ≤ b</code>) and changes all occurrences of <code>b</code> to <code>↑b</code> (meaning the coercion of <code>b</code> from <code>ℕ</code> to <code>ℤ</code>) in your proof state.</p>",
        "id": 211296522,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1601058868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20simplification.3F/near/211283460\">said</a>:</p>\n<blockquote>\n<p>similar question maybe - is there any library that corresponds integer arithmetic with natural number arithmetic? like if i know a+b=c with integers, and they're all positive, and i want to conclude a+b=c with natural numbers</p>\n</blockquote>\n<p>Can you give an (incomplete) lean statement you'd like to prove along these lines, like are you working on some actual proof where this sort of thing is an intermediate step? It might be useful to see this to recommend a course of action.</p>",
        "id": 211296638,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601058919
    },
    {
        "content": "<p>sure. i have (n^2 + 2 * m^2 - 2 * n * m) * (n^2 + 2 * m^2 + 2 * n * m) = n^4 + 4 * m ^ 4 for integers</p>",
        "id": 211296701,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601058953
    },
    {
        "content": "<p>and i want to prove it for natural numbers</p>",
        "id": 211296754,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601058963
    },
    {
        "content": "<p>In the example <code>norm_cast</code> gets rid of the <code>↑</code>s.</p>",
        "id": 211296775,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1601058975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20simplification.3F/near/211294528\">said</a>:</p>\n<blockquote>\n<p>i gave up on using this tactic, for what it's worth. maybe I don't really get how to use tactics in general - if I happen to write a large sequence of tactics that works, it's great, but i can't really figure out how to debug or to see the partial state of what's going on when i'm partway through writing some sequence</p>\n</blockquote>\n<p>You do have the info-view open, right? (thing on the right explaining what the goal and local context is)<br>\n<a href=\"/user_uploads/3121/6cPG5JtoWTmWpPgnyfAz1oNv/infoview.png\">infoview.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/6cPG5JtoWTmWpPgnyfAz1oNv/infoview.png\" title=\"infoview.png\"><img src=\"/user_uploads/3121/6cPG5JtoWTmWpPgnyfAz1oNv/infoview.png\"></a></div>",
        "id": 211296806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601058992
    },
    {
        "content": "<p>the part I don't get is how i can apply one norm cast to a statement and see what it outputs</p>",
        "id": 211296810,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601058994
    },
    {
        "content": "<p>ah this seems key. no, I don't have an info-view, I am just writing code in emacs</p>",
        "id": 211296837,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601059012
    },
    {
        "content": "<p>OMG! You are missing out! :)</p>",
        "id": 211296899,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1601059049
    },
    {
        "content": "<p>is the info view basically just necessary to have this work sanely at all</p>",
        "id": 211297003,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601059089
    },
    {
        "content": "<p>and not existent in the emacs lean mode?</p>",
        "id": 211297028,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601059101
    },
    {
        "content": "<p>sure it exists</p>",
        "id": 211297056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601059115
    },
    {
        "content": "<p>if you've set up Lean in emacs properly; the problem is that barely anyone uses emacs so you'll wait longer for answers</p>",
        "id": 211297089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601059133
    },
    {
        "content": "<p>i don't see \"info view\" referenced in <a href=\"https://github.com/leanprover/lean-mode\">https://github.com/leanprover/lean-mode</a></p>",
        "id": 211297102,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601059140
    },
    {
        "content": "<p>you guys all use vscode?</p>",
        "id": 211297113,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601059146
    },
    {
        "content": "<p>Not really, but it would be a miracle if you could make progress without the infoview!</p>",
        "id": 211297122,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1601059150
    },
    {
        "content": "<p>It's called something else in emacs then, probably</p>",
        "id": 211297136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601059157
    },
    {
        "content": "<p>well, it makes sense why tactics seemed pretty hard to use, to me</p>",
        "id": 211297280,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601059226
    },
    {
        "content": "<p>There's a goal buffer and a lean info buffer I think. (I'm not actually an emacs user myself either).</p>",
        "id": 211297286,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601059231
    },
    {
        "content": "<p>Probably 80%-90% of us use vscode? But there are definitely users of emacs too.</p>",
        "id": 211297370,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601059278
    },
    {
        "content": "<p>I think if you use lean-mode in emacs the key to bring up the goal window is C-c C-g</p>",
        "id": 211297544,
        "sender_full_name": "Jesse Selover",
        "timestamp": 1601059353
    },
    {
        "content": "<p>the \"goal window\" = the \"infoview\" ?</p>",
        "id": 211297585,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601059373
    },
    {
        "content": "<p>It shows the tactic state at least, not sure about the other parts of the infoview (i'm new myself)</p>",
        "id": 211297666,
        "sender_full_name": "Jesse Selover",
        "timestamp": 1601059421
    },
    {
        "content": "<p>Yeah, I think the vscode infoview combines the info in the goal buffer and the Lean info buffer.</p>\n<p>Yury and Anne's videos <a href=\"https://www.youtube.com/playlist?list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N\">in the LFTCM2020</a> playlist show them using Lean in emacs.</p>",
        "id": 211297830,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601059489
    },
    {
        "content": "<p>is there anywhere in the lean docs that describes the \"infoview\" or \"goal buffer\" and what you use it for? like i don't see anythign on <a href=\"https://leanprover.github.io/reference/tactics.html\">https://leanprover.github.io/reference/tactics.html</a></p>",
        "id": 211297943,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601059553
    },
    {
        "content": "<p>Going back to your question, here is a proof using a bunch of tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">int_version</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">zify</span><span class=\"o\">,</span> <span class=\"c1\">-- change to a statement about integers as much as possible</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">int_version</span><span class=\"o\">,</span> <span class=\"c1\">-- use the integer version</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"c1\">-- focus the part of the two expressions that actually differs</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"c1\">-- normalizes the casts, but you could delete this line in fact</span>\n  <span class=\"n\">refine</span> <span class=\"n\">int.of_nat_sub</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- typing \"suggest\" told me this was a good lemma to use</span>\n  <span class=\"n\">nlinarith</span><span class=\"o\">,</span> <span class=\"c1\">-- we have  a problem with non-linear inequalitites</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211298305,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601059700
    },
    {
        "content": "<p>ok. and so if you'll bear with even more noobish questions, zify, norm_cast, and nlinarith are things you use enough to just know what they are off the top of your head? or did some system suggest those</p>",
        "id": 211298531,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601059808
    },
    {
        "content": "<p>The tactics chapter of Theorem proving in Lean has some info: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#tactics\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html#tactics</a></p>",
        "id": 211298543,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601059811
    },
    {
        "content": "<p>They are things I use enough to remember, but these are a good portion of the really common ones.</p>",
        "id": 211298596,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601059849
    },
    {
        "content": "<p>Have you seen the tactic cheat sheet? <a href=\"https://leanprover-community.github.io//img/lean-tactics.pdf\">https://leanprover-community.github.io//img/lean-tactics.pdf</a> it doesn't have all of the ones I mentioned, but it has a lot less than the tactic page I linked to before.</p>",
        "id": 211298907,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601060017
    },
    {
        "content": "<p>But just asking questions like you're doing is really the best way to learn which tactics are useful for the goals you are proving (like zify was really designed for exactly the sort of problems you're dealing with here), so don't worry about asking questions!</p>",
        "id": 211299159,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601060108
    },
    {
        "content": "<p>great. more questions then. \"import tactic.zify\" doesn't work for me, in lean 3.14. am i importing it wrong or might something else be going on?</p>",
        "id": 211299261,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601060158
    },
    {
        "content": "<p>It looks like zify was added when mathlib was using 3.16.2.</p>",
        "id": 211299472,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601060238
    },
    {
        "content": "<p>where do you see that</p>",
        "id": 211299501,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601060253
    },
    {
        "content": "<p>I had to search github a bit.</p>",
        "id": 211299527,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601060262
    },
    {
        "content": "<p>Is there a reason you're using 3.14 instead of a newer version of Lean? <code>leanproject up</code> should update your Lean and mathlib to the latest.</p>",
        "id": 211299668,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601060322
    },
    {
        "content": "<p>You do bring up a good point which is that the docs are only valid for mathlib master. Maybe at some point we should save versions of the docs for the commits of mathlib that correspond to older versions of Lean.</p>",
        "id": 211299836,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601060400
    },
    {
        "content": "<p>i did an elan update, but that apparently does not update the lean version</p>",
        "id": 211300064,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601060477
    },
    {
        "content": "<p><code>leanproject up</code> still leaves me using 2.14</p>",
        "id": 211300127,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601060513
    },
    {
        "content": "<p>3.14</p>",
        "id": 211300130,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601060514
    },
    {
        "content": "<p>That's weird. I thought <code>leanproject up</code> changed the version of Lean by default, since there's a <code>--no-lean-upgrade</code> option. I'd try editing the <code>lean_version</code> field in <code>leanpkg.toml</code> to 3.20.0 and then trying <code>leanproject up</code>.</p>",
        "id": 211300356,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601060622
    },
    {
        "content": "<p>right now it's set to lean_version = \"leanprover-community/lean:3.14.0\", should i just change that last bit to a 3.20.0 ?</p>",
        "id": 211300514,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601060690
    },
    {
        "content": "<p>well, that seems to have worked</p>",
        "id": 211300566,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601060710
    },
    {
        "content": "<p>Either format is fine.</p>",
        "id": 211300596,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601060724
    },
    {
        "content": "<p>unfortunately, after upgrading, lean appears to be constantly failing with too-much-memory-consumption errors</p>",
        "id": 211301112,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601060953
    },
    {
        "content": "<p>Did you restart Lean since you ran <code>leanproject up</code>?</p>",
        "id": 211301176,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601060987
    },
    {
        "content": "<p>yep</p>",
        "id": 211301217,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601061001
    },
    {
        "content": "<p>something seems wrong with this lean installation, it is dying by running out of memory on a file that simply contains \"import tactic\"</p>",
        "id": 211301509,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601061068
    },
    {
        "content": "<p>The memory issue usually happens because Lean is trying to recompile all of mathlib. However, <code>leanproject up</code> is supposed to download a precompiled set of olean files.</p>",
        "id": 211301542,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601061077
    },
    {
        "content": "<p>i guess i should try totally uninstalling and reinstalling</p>",
        "id": 211301568,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601061084
    },
    {
        "content": "<p>What was the output when you ran <code>leanproject up</code>?</p>",
        "id": 211301573,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601061086
    },
    {
        "content": "<p>I don't think you need to completely uninstall and reinstall yet.</p>",
        "id": 211301629,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601061100
    },
    {
        "content": "<p>$ leanproject up<br>\nconfiguring _user_local_packages 1<br>\nWARNING: leanpkg configurations not specifying <code>path = \"src\"</code> are deprecated.<br>\nThis project does not depend on mathlib</p>",
        "id": 211301640,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601061104
    },
    {
        "content": "<p>Hmm... that's very weird. What does your <code>leanpkg.toml</code> look like? And how did you create the Lean project you're working in?</p>",
        "id": 211301806,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601061139
    },
    {
        "content": "<p>I'm assuming you read this page in its entirety? <a href=\"https://leanprover-community.github.io/install/project.html\">https://leanprover-community.github.io/install/project.html</a></p>",
        "id": 211301888,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601061153
    },
    {
        "content": "<p>yeah, i mean it was all working fine til I upgraded lean to 3.20 just now</p>",
        "id": 211301973,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601061178
    },
    {
        "content": "<p>[package]<br>\nname = \"hellolean\"<br>\nversion = \"0.1\"<br>\nlean_version = \"leanprover-community/lean:3.20.0\"<br>\npath = \"src\"</p>\n<p>[dependencies]<br>\nmathlib = {git = \"<a href=\"https://github.com/leanprover-community/mathlib\">https://github.com/leanprover-community/mathlib</a>\", rev = \"ae5b55bdf3f4cab4681fa54de75dfb8772b666fd\"}</p>",
        "id": 211302044,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601061195
    },
    {
        "content": "<p>After running <code>leanproject up</code>, make sure you restart your Lean interpreter that your editor is using.</p>",
        "id": 211302264,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601061248
    },
    {
        "content": "<p>And you ran <code>leanproject up</code> in the <code>hellolean</code> directory?</p>",
        "id": 211302298,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601061257
    },
    {
        "content": "<p>In VSCode, I do this via a Ctrl-Shift-P command</p>",
        "id": 211302303,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601061257
    },
    {
        "content": "<p>yep, i restarted the editor entirely and killed all processes with \"lean\" in the name</p>",
        "id": 211302374,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601061277
    },
    {
        "content": "<p>I think something went wrong with <code>leanproject</code> since <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20simplification.3F/near/211301640\">the output that Kevin linked above</a> doesn't make sense.</p>",
        "id": 211302412,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601061287
    },
    {
        "content": "<p>sounds like i should just delete it all and reinstall</p>",
        "id": 211302617,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601061344
    },
    {
        "content": "<p>Either you ran <code>leanproject</code> in the wrong directory, or <code>leanproject</code> is having trouble determining what directory it's in. Otherwise why would it think that the package is called <code>_user_local_packages 1</code>?</p>",
        "id": 211302863,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601061404
    },
    {
        "content": "<p>well, clearly it did something, because it turned a functional system into a crashing one</p>",
        "id": 211303518,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601061590
    },
    {
        "content": "<p>reinstalling lean hasn't fixed anything, i'll try creating a new project and seeing if that works</p>",
        "id": 211303762,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601061650
    },
    {
        "content": "<p>If you were using the same terminal window that you ran <code>leanproject new hellolean</code> in, did you <code>cd hellolean</code> before running <code>leanproject up</code>? Just making sure...</p>",
        "id": 211304704,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601061890
    },
    {
        "content": "<p>there isn't any directory named hellolean</p>",
        "id": 211304783,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601061912
    },
    {
        "content": "<p>Oh, I thought you created <code>hellolean</code> by running <code>leanproject new hellolean</code> or something like that.</p>",
        "id": 211304898,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601061947
    },
    {
        "content": "<p>How did you create the <code>hellolean</code> project?</p>",
        "id": 211305025,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601061974
    },
    {
        "content": "<p>I don't remember how I created it. it's possible there's some setup thing that I didn't place how a normal leanproject would, and 3.20 relied on that in some way that 3.14 didn't</p>",
        "id": 211305075,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601061988
    },
    {
        "content": "<p>i'll recreate the project structure and see if that fixes things</p>",
        "id": 211305176,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601062016
    },
    {
        "content": "<p>You should only be creating projects with <code>leanproject</code>.</p>",
        "id": 211305186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601062018
    },
    {
        "content": "<p>i notice that it creates a new git repo - i at least had to mess around with the files to make that not happen</p>",
        "id": 211305389,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601062074
    },
    {
        "content": "<p>For now, <code>leanproject</code> requires that Lean projects are in git repos. Is there a strong reason you prefer not to initialize a git repo?</p>",
        "id": 211305686,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601062147
    },
    {
        "content": "<p>yeah because it's already in a larger git repo</p>",
        "id": 211305721,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601062154
    },
    {
        "content": "<p>you can't really have a multi-programming-language project if each programming language's tool insists on setting itself up in a new repo</p>",
        "id": 211306055,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601062238
    },
    {
        "content": "<p>it seems like it's working now though</p>",
        "id": 211306175,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601062268
    },
    {
        "content": "<p>Ah, right. This is a use case that's been <a href=\"https://github.com/leanprover-community/mathlib-tools/issues/42\">brought up before</a>, but we don't have a satisfactory solution yet, mainly because most of us are just working with pure Lean projects.</p>",
        "id": 211306248,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601062287
    },
    {
        "content": "<p>If you can put <code>leanpkg.toml</code> in the root of the larger git repository then things work reasonably well. For instance, this is what we do with <a href=\"https://github.com/leanprover-community/doc-gen\"><code>doc-gen</code></a> which is mainly a python project. However, there are some projects where this makes less sense, <a href=\"https://github.com/leanprover-community/lean\">like Lean itself</a> which has both the core <code>library</code> and <code>leanpkg</code> as separate sub Lean projects.</p>",
        "id": 211307167,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601062529
    },
    {
        "content": "<p>seems easy enough to work around. at any rate, i'm happily on 3.20, thank you for assisting!</p>",
        "id": 211307399,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601062585
    },
    {
        "content": "<p>Regarding using <code>leanproject</code> inside a larger git repository: I do this all the time, using <code>git submodule</code>. Assuming the project already exists somewhere (or if it doesn't first create it in a scratch directory using leanproject, then push to github), I just use <code>git submodule add [URL]</code>, and then enter that directory and use <code>leanproject</code> like ususal.</p>",
        "id": 211335421,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601084972
    }
]