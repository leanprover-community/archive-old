[
    {
        "content": "<p>Can I do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">implication</span> <span class=\"n\">at</span> <span class=\"n\">binding</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>as a shorthand for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">binding</span> <span class=\"o\">:=</span> <span class=\"n\">implication</span><span class=\"o\">(</span><span class=\"n\">binding</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>?</p>",
        "id": 264238151,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1639007470
    },
    {
        "content": "<p>No, but I think that's been suggested before, and people were in favor of it</p>",
        "id": 264238416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639007710
    },
    {
        "content": "<p>Maybe someone not on mobile can find the old thread</p>",
        "id": 264238452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639007739
    },
    {
        "content": "<p>I think this is the one<br>\n<a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/modus.20ponens.20in.20context\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/modus.20ponens.20in.20context</a></p>",
        "id": 264238596,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639007877
    },
    {
        "content": "<p><del>I think this is <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_fun\">tactic#apply_fun</a>?</del></p>",
        "id": 264252942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639021202
    },
    {
        "content": "<p>I was thinking apply_fun as well, but apparently that only works with equality and inequality. Should it be added?</p>",
        "id": 264310420,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639060805
    },
    {
        "content": "<p>I'm also still in favour of adding a <code>coe_fun</code> to <code>iff</code>s, which sort of links in</p>",
        "id": 264313132,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639062060
    },
    {
        "content": "<p>I don't really see the relation to <code>apply imp at h</code>, but <a href=\"#narrow/stream/113488-general/topic/has_coe_to_fun.20on.20iff/near/225458828\">this</a> is a zulip thread regarding the <code>has_coe_to_fun</code> you mention.</p>",
        "id": 264320905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639065282
    },
    {
        "content": "<p>well, it seems to me like the sort of \"things you'd do in text maths that you can't yet do in Lean\"</p>",
        "id": 264324014,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639066362
    }
]