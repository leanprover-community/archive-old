[
    {
        "content": "<p>I can <code>#check ff</code> but can I <em>prove</em> ff : bool or similar facts?</p>\n<p>Let's see:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"c1\">-- breaks</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- breaks</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">ff_is_a_bool</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Oh dear, I am confused again.</p>",
        "id": 156773638,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548338247
    },
    {
        "content": "<p>The typing relation is not something you can prove or really talk about at all internal to the system.</p>",
        "id": 156774268,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548338765
    },
    {
        "content": "<p>In logic terminology it's a <a href=\"https://en.wikipedia.org/wiki/Judgment_(mathematical_logic)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Judgment_(mathematical_logic)\">judgment</a>, not a proposition.</p>",
        "id": 156774301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548338814
    },
    {
        "content": "<p>I guess I can say tautological things like \"every bool is a bool\"...</p>\n<div class=\"codehilite\"><pre><span></span>theorem t (x : bool) : bool := x\n</pre></div>",
        "id": 156774426,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548338930
    },
    {
        "content": "<p>but it's interesting, these type judgments don't live in the hierarchy of types?</p>",
        "id": 156774553,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548339028
    },
    {
        "content": "<blockquote>\n<p>In general, a judgment may be any inductively definable assertion in the metatheory. </p>\n</blockquote>\n<p>So is Lean's metatheory accessible somewhere?</p>",
        "id": 156774707,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548339189
    },
    {
        "content": "<p>Metatheory here means whatever logical framework you are using to define and reason about the formal system (Lean in this case).</p>",
        "id": 156774974,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548339435
    },
    {
        "content": "<p>For example, it can just be ordinary informal mathematics.</p>",
        "id": 156774981,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548339443
    },
    {
        "content": "<p>For example, you could prove a \"unique typing\" theorem like \"if <code>e : t1</code> and <code>e : t2</code> [are derivable judgments], then <code>t1 = t2</code> [is a derivable judgment]\".</p>",
        "id": 156775246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548339666
    },
    {
        "content": "<p>that's a theorem you would prove in an ordinary math paper, probably using induction on the ordinary natural numbers and so on</p>",
        "id": 156775340,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548339738
    },
    {
        "content": "<p>I should add that encoding \"<code>ff</code> is a <code>bool</code>\" as a judgment <code>ff : bool</code> is part of what it means to use type theory as a foundation. In a system based on set theory, for example, <code>ff</code> would be represented by some set and <code>bool</code> would be represented by some other set and <code>ff ∈ bool</code> would be a proposition that you could prove.</p>",
        "id": 156777001,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548341069
    },
    {
        "content": "<p><a href=\"https://github.com/digama0/lean-type-theory/releases\" target=\"_blank\" title=\"https://github.com/digama0/lean-type-theory/releases\">https://github.com/digama0/lean-type-theory/releases</a> is Mario's paper on the theory of Lean in particular, though it doesn't have much in the way of background material</p>",
        "id": 156777257,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548341316
    },
    {
        "content": "<blockquote>\n<p>I guess I can say tautological things like \"every bool is a bool\"...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n</blockquote>\n<p>That's not a theorem. That's a definition of a function t from <code>bool</code> to <code>bool</code>; you can check the type of <code>t</code> to see this. Theorems are terms whose type is <code>Prop</code>.</p>",
        "id": 156779977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548343253
    },
    {
        "content": "<p>PS if you write <code> ```lean </code> rather than just <code> ``` </code> then you get cool syntax highlighting :-)</p>",
        "id": 156780011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548343288
    }
]