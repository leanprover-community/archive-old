[
    {
        "content": "<p>The following MWE is arguably ugly, but I couldn't do better, in the presence of a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.is_partition\">docs#setoid.is_partition</a> of a set which is known to be finite , to say that the cardinality of the ambient set is the sum of the cardinalities of its parts.<br>\nI struggled against coercions between <code>finset (finset α)</code> and <code>set (set α)</code>.<br>\nAny advice or golfing is welcome !</p>\n<p>In particular :</p>\n<ul>\n<li>\n<p>Is there a better way to switch between close types, especially in the presence of <code>finset.sum</code>.</p>\n</li>\n<li>\n<p>On line 29, the <code>suffices…</code> is made to have Lean automatically insert the correct type; can one do better? </p>\n</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.setoid.partition</span>\n<span class=\"c\">/-</span><span class=\"cm\">  {α : Type u_1} (c : set (set α)) :</span>\n<span class=\"cm\">    setoid.is_partition c =</span>\n<span class=\"cm\">      (∅ ∉ c ∧ ∀ (a : α), ∃! (b : set α) (H : b ∈ c), a ∈ b)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.order</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span>\n\n\n<span class=\"sd\">/-- The cardinal of ambient fintype equal the sum of cardinals of the parts of a partition (finset style)-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">card_of_partition'</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">setoid.is_partition</span> <span class=\"o\">({</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s.to_finset</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.sum_card</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.card_eq_one</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hs'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hc.right</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_unique_iff_exists</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_left'</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span> <span class=\"n\">hs'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hs'2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">s.to_finset</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.coe_inj</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span>  <span class=\"n\">hs'</span> <span class=\"n\">z</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_coe.mpr</span> <span class=\"n\">ha</span><span class=\"o\">),</span>\n<span class=\"c1\">-- To get the correct type automatically and perform the rewrite</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">this</span> <span class=\"n\">hz</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">finset.coe_inj</span><span class=\"o\">,</span> <span class=\"n\">set.coe_to_finset</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hu</span> <span class=\"n\">huv</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">huv</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">use</span> <span class=\"n\">s.to_finset</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_filter</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">ht</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hs'2</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">ht</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">and.intro</span> <span class=\"n\">hs.left</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_to_finset</span><span class=\"o\">],</span>  <span class=\"n\">exact</span> <span class=\"n\">hs.right</span><span class=\"o\">,}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- The cardinal of ambient fintype equal the sum of cardinals of the parts of a partition (set style)-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">card_of_partition</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">setoid.is_partition</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">c.to_finset</span><span class=\"o\">,</span> <span class=\"n\">s.to_finset.card</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">let</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hcc'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s.to_finset</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">c'</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_left'</span><span class=\"o\">,</span> <span class=\"n\">set.coe_to_finset</span><span class=\"o\">,</span> <span class=\"n\">set.set_of_mem_eq</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">hcc'</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">card_of_partition'</span>  <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">c.to_finset</span><span class=\"o\">),</span> <span class=\"n\">a.to_finset</span> <span class=\"bp\">∈</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">set.coe_to_finset</span><span class=\"o\">],</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_to_finset</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ha</span><span class=\"o\">,</span>  <span class=\"o\">},</span>\n<span class=\"k\">have</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">c'</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">c.to_finset</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_to_finset</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">finset.sum_bij'</span> <span class=\"n\">_</span> <span class=\"n\">hi</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.coe_to_finset</span><span class=\"o\">],</span>  <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">finset.coe_inj</span><span class=\"o\">,</span> <span class=\"n\">set.coe_to_finset</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 274537985,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646744905
    },
    {
        "content": "<p>I’m not a big user of the finite cardinals API in Lean, but when working on the Burnside formula (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.sum_card_fixed_by_eq_card_orbits_mul_card_group\">docs#mul_action.sum_card_fixed_by_eq_card_orbits_mul_card_group</a>) I found it really convenient to construct an equiv in calc mode and then just deduce the corresponding cardinal result</p>",
        "id": 274546538,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1646749134
    },
    {
        "content": "<p>In particular I would definitely try using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_sigma\">docs#finset.card_sigma</a> in this case.</p>",
        "id": 274547319,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1646749502
    },
    {
        "content": "<p>About the <code>suffices</code> I’m not sure if I understand your problem correctly, but do you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.change\">docs#tactic.interactive.change</a> ?</p>",
        "id": 274547529,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1646749575
    },
    {
        "content": "<p>If you're working with <code>finset.card</code>, it should be much easier to use <code>finpartition</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.partition.finpartition</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"sd\">/-- The cardinal of ambient fintype equal the sum of cardinals of the parts of a partition (set style)-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finpartition</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">p.parts</span><span class=\"o\">,</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">x.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">p.sup_parts</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sup_eq_bUnion</span><span class=\"o\">,</span> <span class=\"n\">finset.card_bUnion</span> <span class=\"n\">p.sup_indep.pairwise_disjoint</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 274549215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646750309
    },
    {
        "content": "<p>… and using the ongoing PR to convert <code>is_partition</code> to <code>finpartition</code>? ;-)</p>",
        "id": 274549558,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646750479
    },
    {
        "content": "<p>Or maximally golfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finpartition</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">p.parts</span><span class=\"o\">,</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">x.card</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset.card_bUnion</span> <span class=\"n\">p.sup_indep.pairwise_disjoint</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">$</span> <span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"bp\">$</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.sup_eq_bUnion</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"n\">p.sup_parts</span>\n</code></pre></div>",
        "id": 274549570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646750484
    },
    {
        "content": "<p>Shouldn't such a function belong to mathlib?</p>",
        "id": 274558441,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646754260
    },
    {
        "content": "<p>I think it should</p>",
        "id": 274562859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646755876
    },
    {
        "content": "<p>Actually, it exists…  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finpartition.sum_card_parts\">docs#finpartition.sum_card_parts</a></p>",
        "id": 274565764,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646756951
    },
    {
        "content": "<p>(I even had forgotten that  PR <a href=\"https://github.com/leanprover-community/mathlib/pull/12459\">#12459</a> was the very reason to be able to use it.)</p>",
        "id": 274565965,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646757014
    },
    {
        "content": "<p>That leaves one of my initial questions still open.  Maybe,  PR <a href=\"https://github.com/leanprover-community/mathlib/pull/12459\">#12459</a> should not only produce a <code>finpartition</code>of <code>set α</code>but also produce one of <code>finset α</code> when possible.</p>",
        "id": 274566341,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646757151
    },
    {
        "content": "<p>Can you post the statement you're thinking of here?</p>",
        "id": 274591976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646767145
    },
    {
        "content": "<p>Sure. And finally, I could prove it myself., but I did not succeed using <code>finpartition</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.setoid.partition</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.order</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">partition</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- TODO : remove the finiteness assumption on α and put it on s</span>\n<span class=\"sd\">/-- Given a partition of the ambient finite type,</span>\n<span class=\"sd\">the cardinal of a set is the sum of the cardinalities of its trace on the parts of the partition -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">setoid.is_partition.card_set_eq_sum_parts</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">setoid.is_partition</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.to_finset.card</span> <span class=\"bp\">=</span>\n    <span class=\"n\">finset.sum</span> <span class=\"n\">P.to_finset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.card_bUnion</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.coe_inj</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.coe_to_finset</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_bUnion</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.bUnion_eq_Union</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">set.inter_Union</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">set.sUnion_eq_Union</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">setoid.is_partition.sUnion_eq_univ</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">set.inter_univ</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">u</span> <span class=\"n\">hu</span> <span class=\"n\">htu</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_to_finset</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.to_finset_disjoint_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set.disjoint_of_subset</span> <span class=\"o\">(</span><span class=\"n\">set.inter_subset_right</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.inter_subset_right</span> <span class=\"n\">s</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">setoid.is_partition.pairwise_disjoint</span> <span class=\"n\">hP</span> <span class=\"n\">ht</span> <span class=\"n\">hu</span> <span class=\"n\">htu</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- The cardinality of a finite type is</span>\n<span class=\"sd\">  the sum of the cardinalities of the parts of any partition -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">setoid.is_partition.card_eq_sum_parts</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">setoid.is_partition</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span>\n    <span class=\"n\">finset.sum</span> <span class=\"n\">P.to_finset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">t.to_finset.card</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">finset.univ.card</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">finset.coe_inj</span><span class=\"o\">,</span> <span class=\"n\">set.to_finset_univ</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">P.to_finset</span><span class=\"o\">),</span> <span class=\"n\">t.to_finset.card</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.to_finset_inj</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">set.univ_inter</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>  <span class=\"o\">},</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">finset.sum_congr</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">setoid.is_partition.card_set_eq_sum_parts</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.to_finset_univ</span><span class=\"o\">,</span> <span class=\"n\">set.to_finset_card</span><span class=\"o\">,</span> <span class=\"n\">fintype.card_of_finset</span><span class=\"o\">]</span>\n    <span class=\"n\">using</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">partition</span>\n</code></pre></div>",
        "id": 275322014,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647310497
    },
    {
        "content": "<p>(By the way, should I PR these two lemmas to somewhere after the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.is_partition\">docs#setoid.is_partition</a> ?)</p>",
        "id": 275342755,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647333461
    }
]