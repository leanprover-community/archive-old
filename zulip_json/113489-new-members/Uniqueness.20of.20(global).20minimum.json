[
    {
        "content": "<p>Hello, I would like to prove the following (written as <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.local_extr</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_ols_coefficient</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"o\">:=</span> <span class=\"n\">is_local_min</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">()</span> <span class=\"o\">())</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">p₁</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X₁tilde</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">β₁tilde</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">β₁caron</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">is_ols_coefficient</span> <span class=\"n\">Y</span> <span class=\"n\">X₁tilde</span> <span class=\"n\">β₁tilde</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">is_ols_coefficient</span> <span class=\"n\">Y</span> <span class=\"n\">X₁tilde</span> <span class=\"n\">β₁caron</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">β₁tilde</span> <span class=\"bp\">=</span> <span class=\"n\">β₁caron</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In words: <code>β₁tilde</code> and <code>β₁caron</code> are both local minima of the function above, and I would like to show they are the same local minimum, as the function is convex.</p>\n<p>How would I go about proving <code>t1</code>? I've tried <code>is_min_on.of_is_local_min_of_convex_univ</code> from <code>analysis.convex.extrema</code>, but matrices don't seem to be instances of <code>topological_add_group</code>, although Pi types are (wouldn't that imply matrices are too?). I would also have to show convexity with this theorem, which I'm also kind of stuck on...</p>\n<p>The context for all this is some work on theorems related to linear regression and ordinary least squares (Is there prior work on these topics? I was not able to find relevant discussions on Zulip).</p>\n<p>Besides the above question, is this canonical Lean? Are hypotheses supposed to go into a <code>variables</code> section?</p>\n<p>Thanks in advance!</p>",
        "id": 282117689,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652367147
    },
    {
        "content": "<p>I'm guessing I could do something with positive semi-definiteness to prove convexity here?</p>",
        "id": 282124788,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652369855
    },
    {
        "content": "<p>Are you following a reference?</p>",
        "id": 282125852,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652370327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Well, not quite, they are very superficial lecture notes from a coworker that don't go into detail. This proof is pretty much only implied in a paragraph... Maybe I misunderstood your question?</p>",
        "id": 282126623,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652370618
    },
    {
        "content": "<p>Nono, that's what I meant. What function exactly are you trying to prove the convexity of?</p>",
        "id": 282127121,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652370810
    },
    {
        "content": "<p>I assume you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_on\">docs#convex_on</a>, already?</p>",
        "id": 282127180,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652370835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Uniqueness.20of.20.28global.29.20minimum/near/282127121\">said</a>:</p>\n<blockquote>\n<p>Nono, that's what I meant. What function exactly are you trying to prove the convexity of?</p>\n</blockquote>\n<p>Ah I see, if I were to somehow get <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_min_on.of_is_local_min_of_convex_univ\">docs#is_min_on.of_is_local_min_of_convex_univ</a> to work, I would have to proof the convexity of <code>(λ (β : matrix (fin v) unit ℝ), ((Y - X ⬝ β)ᵀ ⬝ (Y - X ⬝ β)) () ())</code>, where <code>Y</code> and <code>X</code> are the matrices given in <code>is_ols_coefficient</code>. </p>\n<p>But I'm still stuck at the earlier step, since it's still telling me that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">35</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">include</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">β₁tilde</span> <span class=\"bp\">=</span> <span class=\"n\">β₁caron</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_ols_coefficient</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_ols_coefficient</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">is_min_on.of_is_local_min_of_convex_univ</span> <span class=\"n\">h₁</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282155760,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652382105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Uniqueness.20of.20.28global.29.20minimum/near/282127180\">said</a>:</p>\n<blockquote>\n<p>I assume you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_on\">docs#convex_on</a>, already?</p>\n</blockquote>\n<p>Yes, this is mentioned in one of the hypotheses for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_min_on.of_is_local_min_of_convex_univ\">docs#is_min_on.of_is_local_min_of_convex_univ</a>, so I'm trying to get exactly that</p>",
        "id": 282155918,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652382172
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.topological_ring\">docs#matrix.topological_ring</a>. Does your file import <a href=\"https://tqft.net/mathlib/topology/instances/matrix\">file#topology/instances/matrix</a> ?</p>",
        "id": 282156436,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652382452
    },
    {
        "content": "<p>Yes I'm importing it in the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. Could I somehow project out the additive topological group from the topological ring to get a <code>topological_add_group</code> instance?</p>",
        "id": 282163281,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652385787
    },
    {
        "content": "<p>Ah, I just found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_ring.to_topological_add_group\">docs#topological_ring.to_topological_add_group</a>, that might be it</p>",
        "id": 282163696,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652385939
    },
    {
        "content": "<p>Typeclass instance search should be filling in that sort of gap for you in most cases though</p>",
        "id": 282163817,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652385975
    },
    {
        "content": "<p>I just tried your code and it doesn't compile for me; I have complaints about <code>X ⬝ β</code>, Lean doesn't know what the dot is. Edit: aah, <code>open_locale matrix</code> fixes it</p>",
        "id": 282163981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652386056
    },
    {
        "content": "<p>In your case the indexing type for the rows is not the same as for the columns so it won't be a ring it seems</p>",
        "id": 282163990,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652386062
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">matrix</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>(as the first line of the proof) is a hacky way to get that topological additive group, but it doesn't solve your problems because Lean now complains it doesn't know that the action of R on matrices is continuous.</p>",
        "id": 282165349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652386614
    },
    {
        "content": "<p>But I'm wondering whether really we're missing imports here or something?</p>",
        "id": 282165413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652386646
    },
    {
        "content": "<p>We're missing imports. With <code>import all</code> the below works without the weird instance at the top.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.local_extr</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.convex.extrema</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.mul_action</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n<span class=\"c1\">--import all</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_continuous_smul</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- with `import all` I don't need this</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_ols_coefficient</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"o\">:=</span> <span class=\"n\">is_local_min</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">()</span> <span class=\"o\">())</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">p₁</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X₁tilde</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">β₁tilde</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">β₁caron</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">is_ols_coefficient</span> <span class=\"n\">Y</span> <span class=\"n\">X₁tilde</span> <span class=\"n\">β₁tilde</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">is_ols_coefficient</span> <span class=\"n\">Y</span> <span class=\"n\">X₁tilde</span> <span class=\"n\">β₁caron</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">matrix</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">β₁tilde</span> <span class=\"bp\">=</span> <span class=\"n\">β₁caron</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">topological_add_group</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">matrix</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">has_continuous_smul</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">matrix</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">is_min_on.of_is_local_min_of_convex_univ</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282166776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652387200
    },
    {
        "content": "<p>To make <code>import all</code> work, run <code>./scripts/mk_all.sh</code> in the mathlib root directory (or wait for someone else to come along and tell us what the right import is to make it work). I also suspect I'm doing it wrong and these instances should just work; I don't know much about real matrices in Lean.</p>",
        "id": 282166869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652387237
    },
    {
        "content": "<p>I added all these instances quite recently, I'm a bit surprised you're seeing this weirdness</p>",
        "id": 282167367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652387433
    },
    {
        "content": "<p>Do we not have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.topological_add_group\">docs#matrix.topological_add_group</a>?</p>",
        "id": 282167476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652387490
    },
    {
        "content": "<p>I guess I assumed it would unfold <code>matrix</code> for me, but that was silly</p>",
        "id": 282167526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652387518
    },
    {
        "content": "<p>We should add it next to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.has_continuous_add\">docs#matrix.has_continuous_add</a></p>",
        "id": 282167593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652387532
    },
    {
        "content": "<p>... which we should also add, next to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.has_continuous_smul\">docs#matrix.has_continuous_smul</a></p>",
        "id": 282167651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652387576
    },
    {
        "content": "<p><code>import topology.metric_space.algebra</code> was the import I was missing -- needed for <code>has_bounded_smul.has_continuous_smul</code>.</p>",
        "id": 282172648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652390143
    },
    {
        "content": "<p>It's not obvious to me why you need that instance</p>",
        "id": 282173217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652390502
    },
    {
        "content": "<p>I would expect it to be found via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_continuous_mul.to_has_continuous_smul\">docs#has_continuous_mul.to_has_continuous_smul</a></p>",
        "id": 282173357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652390568
    },
    {
        "content": "<p>Oh come on, do we really have none of these?</p>",
        "id": 282173395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652390595
    },
    {
        "content": "<p>Phew, just a bad name<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_continuous_mul.has_continuous_smul\">docs#has_continuous_mul.has_continuous_smul</a></p>",
        "id": 282173447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652390640
    },
    {
        "content": "<p>I posted the code above with the <code>import all</code> commented out and the instance just below; comment out the instance and the code stops compiling; add the import I suggest and it works again. Type class inference wanted a surprising instance of the form <code>fin p1 -&gt; continuous_smul R R</code> or some such thing</p>",
        "id": 282179918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652394566
    },
    {
        "content": "<p>Thanks for your responses! Sorry for the delayed response on my part.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Uniqueness.20of.20.28global.29.20minimum/near/282163981\">said</a>:</p>\n<blockquote>\n<p>I just tried your code and it doesn't compile for me; I have complaints about <code>X ⬝ β</code>, Lean doesn't know what the dot is. Edit: aah, <code>open_locale matrix</code> fixes it</p>\n</blockquote>\n<p>Yes, sorry, I sometimes have to redefine operators since for some reason some Unicode characters don't work on my Emacs. So for my MWEs, I remove the redefinitions again, but I forgot that people that don't have this problem have to open that module <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> </p>\n<p>And thanks a bunch for your code! So the instances are done by unfolding the <code>matrix</code> into the definition with <code>delta</code> and then the <code>apply_instance</code> tactic finds such an instance in the current scope? (Is this what you meant <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>? )</p>",
        "id": 282605773,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652775206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Uniqueness.20of.20.28global.29.20minimum/near/282173447\">said</a>:</p>\n<blockquote>\n<p>Phew, just a bad name<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_continuous_mul.has_continuous_smul\">docs#has_continuous_mul.has_continuous_smul</a></p>\n</blockquote>\n<p>Can I use this somehow to not have to write out</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_continuous_smul</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">matrix</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>? </p>\n<p>I imported <code>topology.algebra.monoid</code>(and omitted the \"manual\" instance), but it's still telling me </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">42</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_continuous_smul</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282605890,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652775262
    },
    {
        "content": "<p>Now I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">β₁tilde</span> <span class=\"bp\">=</span> <span class=\"n\">β₁caron</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_ols_coefficient</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_ols_coefficient</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">is_min_on.of_is_local_min_of_convex_univ</span> <span class=\"n\">h₁</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">is_min_on.of_is_local_min_of_convex_univ</span> <span class=\"n\">h₂</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n <span class=\"c1\">-- Uncomment to beta-reduce</span>\n  <span class=\"c1\">-- dsimp only [] at a,</span>\n  <span class=\"c1\">-- dsimp only [] at b,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>With the state </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"n\">p₁</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">X₁tilde</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">β₁tilde</span> <span class=\"n\">β₁caron</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_local_min</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X₁tilde</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X₁tilde</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">()</span> <span class=\"o\">())</span>\n    <span class=\"n\">β₁tilde</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_local_min</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X₁tilde</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X₁tilde</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">()</span> <span class=\"o\">())</span>\n    <span class=\"n\">β₁caron</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X₁tilde</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X₁tilde</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">()</span> <span class=\"o\">())</span> <span class=\"n\">β₁tilde</span> <span class=\"bp\">≤</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X₁tilde</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X₁tilde</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">()</span> <span class=\"o\">())</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X₁tilde</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X₁tilde</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">()</span> <span class=\"o\">())</span> <span class=\"n\">β₁caron</span> <span class=\"bp\">≤</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X₁tilde</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">X₁tilde</span> <span class=\"bp\">⬝</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">()</span> <span class=\"o\">())</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">β₁tilde</span> <span class=\"bp\">=</span> <span class=\"n\">β₁caron</span>\n</code></pre></div>\n<p>So I pretty much want to prove (in pseudo-Lean) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">β₁tilde</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">β₁caron</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β₁tilde</span> <span class=\"bp\">=</span> <span class=\"n\">β₁caron</span>\n</code></pre></div>\n<p>How would I go about proving this now? I've found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_of_forall_ge_iff\">docs#eq_of_forall_ge_iff</a>, but that's not quite it...</p>",
        "id": 282625427,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652787065
    },
    {
        "content": "<p>Is <code>f</code> injective?</p>",
        "id": 282627778,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652788358
    },
    {
        "content": "<p>Your assumptions can easily prove <code>f β₁tilde = f β₁caron</code>.</p>",
        "id": 282627834,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652788394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Uniqueness.20of.20.28global.29.20minimum/near/282627778\">said</a>:</p>\n<blockquote>\n<p>Is <code>f</code> injective?</p>\n</blockquote>\n<p>Hmmm, I'm not sure about this.</p>\n<blockquote>\n<p>Your assumptions can easily prove <code>f β₁tilde = f β₁caron</code>.</p>\n</blockquote>\n<p>How would I do that? And assuming it is injective, would I proceed with something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.inj_on.eq_iff\">docs#set.inj_on.eq_iff</a>?</p>",
        "id": 282628794,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652788864
    },
    {
        "content": "<p><code>f β₁tilde ≤ f β₁caron</code> and <code>f β₁caron ≤ f β₁tilde</code> by your assumptions.</p>",
        "id": 282629193,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652789054
    },
    {
        "content": "<p>If <code>hf : injective f</code> and <code>h : f β₁tilde = f β₁caron</code>, then <code>hf h : β₁tilde = β₁caron</code>.</p>",
        "id": 282629269,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652789095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Uniqueness.20of.20.28global.29.20minimum/near/282629193\">said</a>:</p>\n<blockquote>\n<p><code>f β₁tilde ≤ f β₁caron</code> and <code>f β₁caron≤ f β₁tilde</code> by your assumptions.</p>\n</blockquote>\n<p>Oh yea, I was tunnel-visioning pretty hard... <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 282629374,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652789160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Uniqueness.20of.20.28global.29.20minimum/near/282156436\">said</a>:</p>\n<blockquote>\n<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.topological_ring\">docs#matrix.topological_ring</a>. Does your file import <a href=\"https://tqft.net/mathlib/topology/instances/matrix\">file#topology/instances/matrix</a> ?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"460930\">@Aron Erben</span> I was observing that as you have different types for the rows and columns the matrices arent square and so won't form a ring, and the above quoted instance didn't seem to apply in your setting, something more specifically only additive is needed.</p>",
        "id": 282629527,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652789239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Uniqueness.20of.20.28global.29.20minimum/near/282629527\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"460930\">Aron Erben</span> I was observing that as you have different types for the rows and columns the matrices arent square and so won't form a ring, and the above quoted instance didn't seem to apply in your setting, something more specifically only additive is needed.</p>\n</blockquote>\n<p>I was more referring to <br>\n<span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Uniqueness.20of.20.28global.29.20minimum/near/282163817\">said</a>:</p>\n<blockquote>\n<p>Typeclass instance search should be filling in that sort of gap for you in most cases though</p>\n</blockquote>\n<p>Specifically if <code>Typeclass instance search</code> meant the <code>apply_instance</code> tactic.</p>",
        "id": 282630000,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652789500
    },
    {
        "content": "<p>Oh sorry, right, apply instance is explicitly invoking typeclass search, but if you rewrite with or apply lemmas which have typeclass arguments, e.g. <code>[monoid G]</code>  then typeclass search is also run to get an instance of <code>monoid G</code> from <code>ring G</code> or whatever you have in context that \"implies\" the thing being searched for</p>",
        "id": 282630830,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652789977
    },
    {
        "content": "<p>So <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_ring.to_topological_add_group\">docs#topological_ring.to_topological_add_group</a> isn't something that you as a user should have to look up and invoke specifically by name</p>",
        "id": 282630945,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652790025
    },
    {
        "content": "<p>Of course if the instance is missing then you can be a bit stuck, as typeclass search won't find it, so it is good to check things exist if Lean isn't filling in step we would expect it to.</p>",
        "id": 282631029,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652790074
    },
    {
        "content": "<p>Ah I see, and in my case this didn't work because <code>matrix a b c</code> had to be unfolded into <code>a -&gt; b -&gt; c</code> before the lookup could happen (in this case explicitly with the <code>apply_instance</code> tactic)?</p>",
        "id": 282631113,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652790115
    },
    {
        "content": "<p>(As there is a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.topological_add_group\">docs#pi.topological_add_group</a>)</p>",
        "id": 282631448,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652790265
    },
    {
        "content": "<p>Yes exactly. But we should add these instances to mathlib for matrix, as Eric said, so future people don't have to unfold matrix to do stuff. Do you want to make a PR adding those instances?</p>",
        "id": 282633431,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652791334
    },
    {
        "content": "<p>Cool, I get it now, thanks :) I'll gladly try my hand at adding them to mathlib!</p>",
        "id": 282635049,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652792077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Uniqueness.20of.20.28global.29.20minimum/near/282629269\">said</a>:</p>\n<blockquote>\n<p>If <code>hf : injective f</code> and <code>h : f β₁tilde = f β₁caron</code>, then <code>hf h : β₁tilde = β₁caron</code>.</p>\n</blockquote>\n<p>I think I can't assume injectivity here. I think I have to work with global minima here, I'll try a proof by contradiction with convexity, maybe I can get that to work.</p>",
        "id": 282641069,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652794606
    }
]