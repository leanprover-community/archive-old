[
    {
        "content": "<p>I am having trouble proving the lemma in the code in the mwe below</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- import data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">parameter</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n_stmt</span> <span class=\"n\">n_wit</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">vars</span>\n<span class=\"bp\">|</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">vars</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">vars</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X_poly</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">vars</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial.X</span> <span class=\"n\">vars.X</span>\n\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_powers</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.coeff</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">vars.X</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">X_poly</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">vars.X</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp.single</span> <span class=\"n\">vars.X</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">X_poly</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mv_polynomial.X_pow_eq_single</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mv_polynomial.smul_eq_C_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mv_polynomial.coeff_C_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mv_polynomial.coeff_monomial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>With the proof so far, the goal reduces to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">vars.X</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp.single</span> <span class=\"n\">vars.X</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">vars.X</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp.single</span> <span class=\"n\">vars.X</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>In the vs code lean infoview. Yet refl does not work. Even trying by_cases on <code>finsupp.single vars.X ↑x = finsupp.single vars.X j</code> leads to errors when I try to rewrite. What is going on and how do I finish this proof?</p>",
        "id": 221866311,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1610007065
    },
    {
        "content": "<p>Have you tried <code>congr</code>? It's a \"spot the difference\" tactic.</p>",
        "id": 221866431,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610007172
    },
    {
        "content": "<p>my guess is that the <code>decidable</code> instances for the <code>ite</code> are different, in which case <code>split_ifs; refl</code> should work</p>",
        "id": 221866463,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610007215
    },
    {
        "content": "<p>if it's decidable instances then <code>congr</code> alone should kill it</p>",
        "id": 221866531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610007250
    },
    {
        "content": "<p>Yes, the decidable instances may be different somehow - <code>congr</code> closes the proof. Thanks.</p>",
        "id": 221867780,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1610008382
    },
    {
        "content": "<p>The <code>noncomputable theory</code> is probably what is causing the problem</p>",
        "id": 221868189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610008703
    },
    {
        "content": "<p>I think you can just put <code>@[derive decidable_eq]</code> on your inductive type</p>",
        "id": 221917892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610008758
    },
    {
        "content": "<p>Removing <code>noncomputable theory</code> raises  errors</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"c1\">-- noncomputable theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"sd\">/-- An inductive type from which to index the variables of the 3-variable polynomials the proof manages -/</span>\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">vars</span>\n<span class=\"bp\">|</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">vars</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">vars</span>\n\n<span class=\"sd\">/-- The finite field parameter of our SNARK -/</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n\n<span class=\"sd\">/-- Helpers for representing X, Y, Z as 3-variable polynomials -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">X_poly</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">vars</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial.X</span> <span class=\"n\">vars.X</span>\n<span class=\"kd\">def</span> <span class=\"n\">Y_poly</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">vars</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial.X</span> <span class=\"n\">vars.Y</span>\n<span class=\"kd\">def</span> <span class=\"n\">Z_poly</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">vars</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial.X</span> <span class=\"n\">vars.Z</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>complains of definition 'X_poly' is noncomputable, it depends on 'mv_polynomial.X'</p>\n<p>Any work around for this?</p>",
        "id": 221919538,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1610010159
    },
    {
        "content": "<p>Yes, add the word <code>noncomputable</code> before <code>def X_poly</code>. But maybe this doesn't help as much as I'd hoped</p>",
        "id": 221919607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610010229
    },
    {
        "content": "<p>In fact, I think my comment is just wrong, and I'm confusing <code>noncomputable theory</code> with <code>open_locale classical</code></p>",
        "id": 221919684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610010274
    }
]