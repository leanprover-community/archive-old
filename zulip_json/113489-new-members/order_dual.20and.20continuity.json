[
    {
        "content": "<p>I'm trying to show that if the meet operation is continuous then the join operation is continuous. By analogy with this lemma from <code>order/ord_continuous.lean</code> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">left_ord_continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">right_ord_continuous</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span>\n</code></pre></div>\n<p>I was hoping that something like this would work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_continuous_inf</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_inf</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_inf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">×</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">⊓</span> <span class=\"n\">p.2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_continuous_sup</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_sup</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_sup</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">×</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">⊔</span> <span class=\"n\">p.2</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"bp\">..</span><span class=\"n\">h</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_continuous_inf_dual_has_continuous_sup</span>\n<span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_inf</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">has_continuous_inf</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_continuous_sup</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">continuous_sup</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">@</span><span class=\"n\">has_continuous_inf.continuous_inf</span>  <span class=\"n\">L</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>But the proof of <code>continuous_sup</code> fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">continuous_sup'</span>\n  <span class=\"n\">has_continuous_inf.continuous_inf</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">×</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">p.fst</span> <span class=\"bp\">⊓</span> <span class=\"n\">p.snd</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">order_dual</span> <span class=\"n\">L</span> <span class=\"bp\">×</span> <span class=\"n\">order_dual</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">p.fst</span> <span class=\"bp\">⊔</span> <span class=\"n\">p.snd</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Perhaps I need to show that a⊓b = a⊔ b where the right hand side is taken in the order dual, but after staring at this for a couple of evenings, I can't see how to formulate this statement in Lean, let alone prove it.</p>\n<p>Please can someone give me a hint as where to go with this?</p>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 236002508,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1619295817
    },
    {
        "content": "<p>The fix is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>instead of <code>{ ..h}</code>.</p>\n<p>Is this the same thing which <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> was talking about earlier?</p>",
        "id": 236013301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619303447
    },
    {
        "content": "<p>NB the way I debugged this was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">continuous_sup</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">has_continuous_inf.continuous_inf</span>  <span class=\"n\">L</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    _inst_1: topological_space L</span>\n<span class=\"cm\">    ⊢ order_dual.topological_space L = _inst_1</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"c1\">-- so the problem is that the top space instances are not *definitionally* equal</span>\n    <span class=\"c1\">-- let's check they're the same anyway</span>\n    <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">_inst_1</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236013514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619303631
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">h</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236013723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619303771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thanks very much for the help and explaining how you solved it. Seems I was nearly there.</p>\n<p>In fact I subsequently discovered that Mathlib already has an <code>order_dual.topological_space</code> object - if I import <code>topology.algebra.ordered</code> then that includes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>which also seems to work.</p>\n<p>Christopher</p>",
        "id": 236060646,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1619352424
    }
]