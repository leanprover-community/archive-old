[
    {
        "content": "<p><code>mk : ∀ d, list (reactor d) → network d.succ</code><br>\nis probably what you want there</p>",
        "id": 246453799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626701005
    },
    {
        "content": "<p>Your problem is that you're using <code>list</code> inside your definition which is itself inductive, and this isn't well-supported</p>",
        "id": 246453980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626701088
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">network</span><span class=\"o\">,</span> <span class=\"n\">reactor</span>\n<span class=\"k\">with</span> <span class=\"n\">network</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">network</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- copy the list constructors here</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">network</span> <span class=\"n\">d.succ</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">d</span><span class=\"o\">},</span> <span class=\"n\">reactor</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">network</span> <span class=\"n\">d.succ</span> <span class=\"bp\">→</span> <span class=\"n\">network</span> <span class=\"n\">d.succ</span>\n<span class=\"k\">with</span> <span class=\"n\">reactor</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">network</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">reactor</span> <span class=\"n\">d</span>\n\n<span class=\"c1\">-- shorthand to build up the list constructors</span>\n<span class=\"kd\">def</span> <span class=\"n\">network.mk</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">reactor</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">network</span> <span class=\"n\">d.succ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">network.nil</span> <span class=\"n\">d</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">network.cons</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">network.mk</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- or: @list.rec _ (λ _, network d.succ) (network.nil d) (λ x _, network.cons x)</span>\n</code></pre></div>",
        "id": 246454202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626701176
    },
    {
        "content": "<p>Hm, that's too bad.</p>\n<p>Also, how do I solve this universe issue?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">network</span><span class=\"o\">,</span> <span class=\"n\">reactor</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">network</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">network</span> <span class=\"mi\">0</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">reactor</span> <span class=\"n\">d</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">network</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"k\">with</span> <span class=\"n\">reactor</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">network</span> <span class=\"n\">d</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reactor</span> <span class=\"n\">d</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>It's telling me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mutually</span> <span class=\"kd\">inductive</span> <span class=\"n\">types</span> <span class=\"n\">compiled</span> <span class=\"n\">to</span> <span class=\"n\">invalid</span> <span class=\"n\">basic</span> <span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"n\">of</span> <span class=\"n\">type_of</span><span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">network._mut_.mk_1'</span> <span class=\"n\">is</span> <span class=\"n\">too</span> <span class=\"n\">big</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">corresponding</span> <span class=\"kd\">inductive</span> <span class=\"n\">datatype</span>\n</code></pre></div>\n<p>But I don't know what <code>network._mut_.mk_1</code> or <code>arg #4</code> actually refer to.</p>",
        "id": 246486913,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626716359
    },
    {
        "content": "<p>In general it might be unwise to mix <code>Type*</code> and <code>Type u</code>. The latter says \"I know what I'm doing and will name universes myself\", the former says \"I will let Lean figure universes out for me\". Which one are you?</p>",
        "id": 246487703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626716758
    },
    {
        "content": "<p>There are a lot of problems with this definition</p>",
        "id": 246487750,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626716766
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">network</span><span class=\"o\">,</span> <span class=\"n\">reactor</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">network</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">network</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">reactor</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">network</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">reactor</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">network</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reactor</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 246487884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626716856
    },
    {
        "content": "<p>Parameters (stuff before <code>with</code>) shouldn't be repeated later. And <code>d</code> is not a parameter of the inductive families, it varies.</p>",
        "id": 246488164,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626716971
    },
    {
        "content": "<p>Also, I don't know whether these examples are minimized from your real application, and inductive families are nice, but you might consider whether you can use a recursively-defined family of types instead. That works better than you might think.</p>",
        "id": 246491100,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626718207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Mutual.20inductive.20families/near/246487703\">said</a>:</p>\n<blockquote>\n<p>In general it might be unwise to mix <code>Type*</code> and <code>Type u</code>. The latter says \"I know what I'm doing and will name universes myself\", the former says \"I will let Lean figure universes out for me\". Which one are you?</p>\n</blockquote>\n<p>I belong to the \"I will let Lean figure universes out for me\" group. But Lean complained that mutually inductive types must live in the same universe, so declaring them <code>Type*</code> didn't work.</p>",
        "id": 246509489,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626726476
    },
    {
        "content": "<p>I see! I know nothing about mutual inductives, I have always gone by the maxim that they are to be avoided in Lean 3.</p>",
        "id": 246509693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626726590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Mutual.20inductive.20families/near/246509693\">said</a>:</p>\n<blockquote>\n<p>I see! I know nothing about mutual inductives, I have always gone by the maxim that they are to be avoided in Lean 3.</p>\n</blockquote>\n<p>How do you avoid them?<br>\nMy problem is that a <code>reactor</code> is supposed to contain a graph of <code>reactor</code>s (called <code>network</code> here). I felt like the only way to achieve this was to define <code>reactor</code> and <code>network</code> at the same time. But it sounds like this isn't actually the case.</p>",
        "id": 246509943,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626726723
    },
    {
        "content": "<p>My understanding is that Lean internally unravels the mutual inductives into one big inductive, and that in practice it's best that the human does the unravelling themselves. You could define both functions at once by defining a term of the product of the function spaces, for example, but there could well be slicker ways. I am certainly not an expert.</p>",
        "id": 246510257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626726893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Is there some sort of document that explains the syntax for inductive definitions? I find myself winging it most of the time, because <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#other-recursive-data-types\">TPIL</a> Chapter 7 doesn't explain it clearly enough for me.</p>",
        "id": 246511255,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626727421
    },
    {
        "content": "<p>You usually can't omit the universes in inductive types, unless the inductive is not universe polymorphic and everything is in <code>Type</code></p>",
        "id": 246516621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626729374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> I don't have any document to point to, but the syntax of an inductive definition looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">DOC</span><span class=\"bp\">?</span> <span class=\"n\">ATTR</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"kn\">private</span><span class=\"bp\">|</span><span class=\"kn\">protected</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">noncomputable</span><span class=\"bp\">?</span> <span class=\"kd\">meta</span><span class=\"bp\">?</span>\n<span class=\"kd\">class</span><span class=\"bp\">?</span> <span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">UNIV</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"bp\">?</span> <span class=\"n\">NAME</span> <span class=\"n\">BINDER</span><span class=\"bp\">*</span> <span class=\"o\">(:</span> <span class=\"n\">TYPE</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n<span class=\"n\">LOCAL_NOTATION</span><span class=\"bp\">?</span>\n<span class=\"o\">(</span><span class=\"bp\">|</span> <span class=\"n\">CONSTR</span> <span class=\"n\">INFER_KIND</span><span class=\"bp\">?</span> <span class=\"n\">BINDER</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">TYPE</span><span class=\"o\">)</span><span class=\"bp\">*</span>\n</code></pre></div>\n<p>and a mutual inductive looks like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">DOC</span><span class=\"bp\">?</span> <span class=\"n\">ATTR</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"kn\">private</span><span class=\"bp\">|</span><span class=\"kn\">protected</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">noncomputable</span><span class=\"bp\">?</span> <span class=\"kd\">meta</span><span class=\"bp\">?</span>\n<span class=\"kd\">mutual</span> <span class=\"kd\">class</span><span class=\"bp\">?</span> <span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">UNIV</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"bp\">?</span> <span class=\"n\">NAME</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"n\">BINDER</span><span class=\"bp\">*</span>\n<span class=\"n\">LOCAL_NOTATION</span><span class=\"bp\">?</span>\n<span class=\"o\">(</span>\n  <span class=\"k\">with</span> <span class=\"n\">ATTR</span><span class=\"bp\">*</span> <span class=\"n\">NAME</span> <span class=\"o\">:</span> <span class=\"n\">TYPE</span>\n  <span class=\"o\">(</span><span class=\"bp\">|</span> <span class=\"n\">CONSTR</span> <span class=\"n\">INFER_KIND</span><span class=\"bp\">?</span> <span class=\"n\">BINDER</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">TYPE</span><span class=\"o\">)</span><span class=\"bp\">*</span>\n<span class=\"o\">)</span><span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 246517677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626729968
    },
    {
        "content": "<p>Here's an example using a gratuitous number of those slots:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Foo and bar -/</span>\n<span class=\"kd\">@[interesting]</span> <span class=\"kn\">protected</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">meta</span>\n<span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">X</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n<span class=\"k\">with</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">{}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">with</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 246518269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626730306
    },
    {
        "content": "<p>Did you forget <code>mutual</code>?</p>",
        "id": 246519790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626731289
    },
    {
        "content": "<p>fixed</p>",
        "id": 246523558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626733875
    },
    {
        "content": "<p>I was trying to define mu-recursive functions and ran into the same error as Marcus.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.vector.basic</span>\n\n<span class=\"sd\">/-- μ-recursive algorithms for functions from ℕ^k to ℕ -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">μ_recursive</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- nested occurrence 'list.{0} (μ_recursive k)' contains variables that are not parameters</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">μ_recursive</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">μ_recursive</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">proj</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">μ_recursive</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">μ_recursive</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">μ_recursive</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">μ_recursive</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"n\">ρ</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">μ_recursive</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">μ_recursive</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">μ_recursive</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">μ</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">μ_recursive</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">μ_recursive</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>Just to clarify <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's comment about using inductive types inside definitions of other inductive types: Is there just no way to use <code>vector</code> here and I should just define a mutually-inductive <code>μ_rec, μ_rec_vec</code>, or is there a workaround that will let me use <code>vector</code> in the definition?</p>",
        "id": 265979502,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1640325141
    },
    {
        "content": "<p>Are you particularly attached to <code>vector</code>? How about <code>fin m -&gt; μ_recursive k</code>?</p>",
        "id": 265980586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640326636
    },
    {
        "content": "<p><code>fin m -&gt; μ_recursive k</code> works fine, thanks. I guess I didn't expect that to work any better than what I had. Is it that <code>nat</code> is fine and all other inductive types choke? What's so special about <code>nat</code>?</p>",
        "id": 265980860,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1640326986
    },
    {
        "content": "<p>I guess it's a universe issue, as Marcus said above. I just wasn't getting that from the error message, sorry.</p>",
        "id": 265981012,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1640327200
    },
    {
        "content": "<p>With <code>fin m -&gt;</code> it becomes a regular inductive type rather than one which is recursive through <code>vector</code></p>",
        "id": 265981285,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640327599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> <br>\nSide Note: This <a href=\"#narrow/stream/270676-lean4/topic/Inductive.20Bug.20with.20Array.20.2B.20Prop/near/265742236\">thread</a> on (painful) inductives (in Lean 4) might be interesting for you, too.</p>\n<p>And to elaborate on what Reid wrote:<br>\nIn Lean's underlying theory (<a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a>) we can only have constructors for inductive types which are \"positive\" - that is, if a constructor of an inductive type <code>I</code> takes a parameter <code>p</code> whose type also refers to <code>I</code> (thereby making <code>I</code> recursive), then the type of <code>p</code> has to have the form <code>α₁ → α₂ → ... → I</code>. That is, recursive appearances of <code>I</code> are only allowed in the form that <code>I</code> is the final output of some function (if that function has zero input parameters, then <code>p</code> simply has type <code>I</code>).</p>\n<p>So it's not <code>nat</code> being magical that makes the reformulation work, but rather the restructuring of type of your parameter such that <code>mu_recursive</code> appears on the very right.</p>",
        "id": 265987455,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640335323
    }
]