[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 201516567,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592714528
    },
    {
        "content": "<p><code>rfl</code> doesn't work here, and this is causing issues where two terms that are equal except for the <code>decidable_eq</code> terms cannot be unified (<a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>)</p>",
        "id": 201516572,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592714548
    },
    {
        "content": "<p>obviously I can prove it like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">cc</span>\n</code></pre></div>\n\n\n<p>but this doesn't solve the unification issue</p>",
        "id": 201516635,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592714691
    },
    {
        "content": "<p>I guess another solution is to just remove <code>decidable_eq</code> from everything and use <code>open_locale classical</code></p>",
        "id": 201516695,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592714847
    },
    {
        "content": "<p>but the problem is that I'm in a file where this hasn't been used</p>",
        "id": 201516698,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592714856
    },
    {
        "content": "<p>so using classical for new definitions only push the problem back one level at a time</p>",
        "id": 201516742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592714934
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">},</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">congr</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">congr</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 201517095,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592715679
    },
    {
        "content": "<p>I don't understand this</p>",
        "id": 201517097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592715682
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">congr</span> <span class=\"c1\">--fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">congr</span> <span class=\"c1\">--works</span>\n</code></pre></div>",
        "id": 201517173,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592715803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what's going on here?</p>",
        "id": 201517174,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592715807
    },
    {
        "content": "<p>I think <code>decidable_eq A</code> should be a <code>subsingleton</code></p>",
        "id": 201517302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592716047
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">id</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n     <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subsingleton</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">)))</span>\n    <span class=\"n\">h1</span>\n    <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 201517346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592716092
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 201517360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592716127
    },
    {
        "content": "<p>yeah but for my usecase it just times out</p>",
        "id": 201517362,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592716129
    },
    {
        "content": "<p>Apparently <code>congr</code> doesn't think to apply <code>subsingleton.elim</code> immediately, but it does apply it on subgoals</p>",
        "id": 201517371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592716150
    },
    {
        "content": "<p>and <code>convert</code> fails:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"n\">rfl</span> <span class=\"c1\">--fails</span>\n</code></pre></div>",
        "id": 201517372,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592716157
    },
    {
        "content": "<p>hence why <code>id x = id y</code> works</p>",
        "id": 201517374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592716161
    },
    {
        "content": "<p>I'm confused what the goal is here now</p>",
        "id": 201517417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592716209
    },
    {
        "content": "<p>two instances of <code>decidable_eq</code> are indeed equal, and the typeclass system knows this</p>",
        "id": 201517421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592716228
    },
    {
        "content": "<p>so where is the problem?</p>",
        "id": 201517424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592716237
    },
    {
        "content": "<p>I can't produce an MWE yet, but it times out</p>",
        "id": 201517492,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592716369
    },
    {
        "content": "<p>ok I found a workaround</p>",
        "id": 201517663,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592716728
    }
]