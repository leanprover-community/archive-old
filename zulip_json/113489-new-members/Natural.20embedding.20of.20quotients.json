[
    {
        "content": "<p>Given <code>f : α → β</code> and the induced quotient <code>setoid.ker f</code>, how can I extend the map <code>α → quotient (setoid.ker f) ↪ β</code>? I haven't found anything in mathlib yet.</p>",
        "id": 221835559,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609974129
    },
    {
        "content": "<p>Can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 221837257,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609975246
    },
    {
        "content": "<p>I'm not sure what you mean by <code>extend the map</code>.</p>",
        "id": 221837311,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609975301
    },
    {
        "content": "<p>I'm trying to prove Vieta's formulas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">vieta</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">has_coe_poly</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">monomial</span> <span class=\"mi\">0</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_poly_from_roots</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)))</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">A</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">powerset_len</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">prod_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_partition</span> <span class=\"o\">(</span><span class=\"n\">setoid.ker</span> <span class=\"n\">card</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">vieta</span>\n</code></pre></div>",
        "id": 221837447,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609975388
    },
    {
        "content": "<p>At <code>sorry</code> I've managed turn the product into a double sum, first over equivalence classes of <code>powerset (range n)</code> of cardinality <code>0..n</code>, then over all the subsets of cardinality <code>k</code>.</p>",
        "id": 221837659,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609975516
    },
    {
        "content": "<p>Is this true for <code>n = 0</code>?</p>",
        "id": 221837958,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609975690
    },
    {
        "content": "<p>Doesn't seem like it.</p>",
        "id": 221837969,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609975699
    },
    {
        "content": "<p>And if I change it to over <code>n + 1</code>, then for <code>n = 0</code>, one has to prove <code> X - ↑(r 0) = ↑(r 0)</code></p>",
        "id": 221838306,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609975969
    },
    {
        "content": "<p>I think I've stated the problem wrong. The ranges on the sum should be <code>range (n + 1)</code>.</p>",
        "id": 221839104,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609976523
    },
    {
        "content": "<p>That's a minor off by one error though, I'm more stuck on how to translate between the sum indices correctly.</p>",
        "id": 221839162,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609976597
    },
    {
        "content": "<p>You should be able to induct on the sums or on <code>n</code></p>",
        "id": 221839252,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609976651
    },
    {
        "content": "<p>Then there are lemmas that will undo the sums over <code>range (n + 1)</code> like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_range_succ\">docs#finset.sum_range_succ</a></p>",
        "id": 221839410,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609976773
    },
    {
        "content": "<p>Although you might not need to if the lemmas doing the induction already exist</p>",
        "id": 221839431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609976801
    },
    {
        "content": "<p>What's the goal state at the sorry?</p>",
        "id": 221839482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609976838
    },
    {
        "content": "<p>Except here it's the equality of a product with a sum, which I don't think is covered by those lemmas, which usually expect both sides to be sums (or products).</p>",
        "id": 221839517,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609976872
    },
    {
        "content": "<p>It's basically a huge mess:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">xbar</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">setoid.ker</span> <span class=\"n\">card</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"n\">image</span> <span class=\"n\">quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"o\">,</span>\n<span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">⟦</span><span class=\"n\">y</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">xbar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">-↑</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">\\</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span>\n<span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">powerset_len</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 221839569,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609976892
    },
    {
        "content": "<p>I would make sure the statement is in a form that is true for the base case first, and show you can prove that.</p>",
        "id": 221839654,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609976978
    },
    {
        "content": "<p>The correct statement should be provable with something very close to <code>simp [powerset_len]</code></p>",
        "id": 221839681,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609976996
    },
    {
        "content": "<p>I did some stuff with sums over quotients in <a href=\"https://github.com/leanprover-community/mathlib/issues/5269\">#5269</a>, although I think the trick required me to massage both sides to the same summand (and is still a massive mess)</p>",
        "id": 221839815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609977092
    }
]