[
    {
        "content": "<p>I'm working through the tutorials, and one part has me wanting to try to figure out how to apply the squeeze theorem to show that a sequence has a certain limit. See the following example.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">seq_v</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">seq_w</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I have the sequence <code>u</code>, and it is sandwiched between two other convergent sequences. However, I need to define these two other sequences, and the way I'm doing it now doesn't seem to be the right way. In particular, the way I've defined <code>v</code> seems to not be too transparent for Lean, though I've managed to convince it that it has the property that I need. Unfortunately, what I did for <code>v</code> doesn't work for <code>w</code>.</p>\n<p>Can anyone point me in the right direction? Thank you.</p>",
        "id": 197869271,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589750048
    },
    {
        "content": "<p>I guess I should be using <code>choose</code> here? That seems to be how one of the exercises constructed a sequence, but my hypotheses don't seem to have the right form for <code>choose</code>.</p>",
        "id": 197869591,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589750567
    },
    {
        "content": "<p>When you're looking for help here it's best to post a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> so that people can try out your code.</p>",
        "id": 197869749,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589750866
    },
    {
        "content": "<p>But I can see this one: <code>seq_v</code> and <code>seq_w</code> are true by definition. You can prove both of these with <code>intro, refl</code>.</p>",
        "id": 197869790,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589750907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20auxiliary.20sequences.20in.20tutorial/near/197869790\">said</a>:</p>\n<blockquote>\n<p>But I can see this one: <code>seq_v</code> and <code>seq_w</code> are true by definition. You can prove both of these with <code>intro, refl</code>.</p>\n</blockquote>\n<p>I thought that was an <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>! In any case, you're right. It does work. I could swear I tried <code>refl</code> first, because I knew it was true by definition, but it seems I had not. Thanks for taking the time to address my silly question.</p>",
        "id": 197870022,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589751245
    },
    {
        "content": "<p>A mwe will run for me if I just cut and paste what you posted. This doesn't.</p>",
        "id": 197870027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589751271
    },
    {
        "content": "<p>Oh! Maybe <code>set v : ℕ → ℝ := λ n, x with seq_v</code> might do everything for you in one go.</p>",
        "id": 197870049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589751333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20auxiliary.20sequences.20in.20tutorial/near/197870027\">said</a>:</p>\n<blockquote>\n<p>A mwe will run for me if I just cut and paste what you posted. This doesn't.</p>\n</blockquote>\n<p>Yes, it does rely on the definition of <code>seq_limit</code> in the tutorial. Thought that was fine. Sorry about that! I have not yet managed to track down the definition of the limit of a sequence in mathlib.</p>",
        "id": 197870136,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589751460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20auxiliary.20sequences.20in.20tutorial/near/197870049\">said</a>:</p>\n<blockquote>\n<p>Oh! Maybe <code>set v : ℕ → ℝ := λ n, x with seq_v</code> might do everything for you in one go.</p>\n</blockquote>\n<p>Not quite, it will give you the unapplied version <code>v = lambda n, ...</code> instead of <code>forall n, v n = ...</code></p>",
        "id": 197870143,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589751476
    },
    {
        "content": "<p>Edit: Fixed now.</p>\n<p>Here is the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">seq_v</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">seq_w</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I feel like there should be a better way to define the auxiliary sequences I need, but I suppose proceeding with the example as written will work.</p>",
        "id": 197870854,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589752505
    },
    {
        "content": "<p>Why do you need to even define the sequences?</p>",
        "id": 197871017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589752762
    },
    {
        "content": "<p>I would like to use the squeeze theorem (defined earlier in the tutorial) to conclude. I don't need the squeeze theorem to finish the proof; I was just thinking it would be good to know how to use it. (I know I don't state the squeeze theorem in the example, but I don't think that's necessary for the question. I can include the statement if it's needed.)</p>",
        "id": 197871297,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589753050
    },
    {
        "content": "<p>Why not just apply the squeeze theorem and then deal with all the inputs later?</p>",
        "id": 197871386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589753183
    },
    {
        "content": "<p>If a function needs ten inputs and then spits out a proof of theorem X, and your goal is theorem X then you can just <code>apply</code> the function anyway</p>",
        "id": 197871405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589753253
    },
    {
        "content": "<p>You'll just end up with ten goals</p>",
        "id": 197871409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589753277
    },
    {
        "content": "<p>It's this weird backwards way that computer scientists think about proofs</p>",
        "id": 197871465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589753324
    },
    {
        "content": "<p>Good question. Part of the reason is that I don't even understand the tactic state after applying the squeeze theorem. These <code>?m_1</code>s show up in the goals of my tactic state. I think those <code>?m_1</code>s are meant to be the sequences I wanted to define.</p>",
        "id": 197871651,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589753577
    },
    {
        "content": "<p>Maybe you should apply it and just fill in some of the easy inputs</p>",
        "id": 197871671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589753624
    },
    {
        "content": "<p>What is the type of the squeeze theorem?</p>",
        "id": 197871679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589753636
    },
    {
        "content": "<p>Just fill in the first few inputs which have round brackets</p>",
        "id": 197871721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589753660
    },
    {
        "content": "<p>And apply that</p>",
        "id": 197871726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589753667
    },
    {
        "content": "<p>Here is the type, which is what I get when I <code>#check squeeze</code>. (That's what you meant, right?)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">squeeze</span> <span class=\"o\">:</span>\n  <span class=\"n\">seq_limit</span> <span class=\"err\">?</span><span class=\"n\">M_1</span> <span class=\"err\">?</span><span class=\"n\">M_4</span> <span class=\"bp\">→</span>\n  <span class=\"n\">seq_limit</span> <span class=\"err\">?</span><span class=\"n\">M_3</span> <span class=\"err\">?</span><span class=\"n\">M_4</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">M_1</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">M_2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">M_2</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">M_3</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">seq_limit</span> <span class=\"err\">?</span><span class=\"n\">M_2</span> <span class=\"err\">?</span><span class=\"n\">M_4</span>\n</code></pre></div>\n\n\n<p>Sadly the first few inputs seem to require furnishing the sequences I wanted to define.</p>",
        "id": 197871803,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589753772
    },
    {
        "content": "<p>Why not skip the first two inputs by putting underscores and then fill in the next two with h and h'</p>",
        "id": 197871880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589753898
    },
    {
        "content": "<p>And then you can <code>refine</code> it</p>",
        "id": 197871892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589753924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20auxiliary.20sequences.20in.20tutorial/near/197871880\">said</a>:</p>\n<blockquote>\n<p>Why not skip the first two inputs by putting underscores and then fill in the next two with h and h'</p>\n</blockquote>\n<p>Yup, I realised that just after sending my last message. :) That also works. Thank you!</p>",
        "id": 197871902,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589753956
    },
    {
        "content": "<p>You can also <code>#check @squeeze</code> so that it doesn't do the metavariable thing</p>",
        "id": 197871904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589753967
    },
    {
        "content": "<p>and supply the appropriate construction with <code>@squeeze _ _ (my sequence) _ _ _ _ _</code></p>",
        "id": 197871910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589753993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20auxiliary.20sequences.20in.20tutorial/near/197871904\">said</a>:</p>\n<blockquote>\n<p>You can also <code>#check @squeeze</code> so that it doesn't do the metavariable thing</p>\n</blockquote>\n<p>Nice tip, thank you.</p>",
        "id": 197872052,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589754168
    }
]