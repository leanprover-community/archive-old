[
    {
        "content": "<p>Hi, I've been told that the Lean API might help me interface with other theorem provers, is this true? If so, any pointers would be appreciated. I'm having a hard time googling this.</p>\n<p>I looked at this <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a><br>\n...but that'll probably come in later, if at all.</p>",
        "id": 221167095,
        "sender_full_name": "Haskell",
        "timestamp": 1609276052
    },
    {
        "content": "<p>Can you say a bit more about what you're trying to do?</p>",
        "id": 221167183,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609276114
    },
    {
        "content": "<p>The hope is for students to prove various parts in Coq, PVS or z3 and have it come together. Lean was suggested to me as being able to possibly integrate such. </p>\n<p>I did find this (PDF link): <a href=\"https://leanprover.github.io/talks/from_z3_to_lean.pdf\">https://leanprover.github.io/talks/from_z3_to_lean.pdf</a> but that's also a little light on details for me.</p>",
        "id": 221167532,
        "sender_full_name": "Haskell",
        "timestamp": 1609276413
    },
    {
        "content": "<p>I started writing a response about various ways to communicate with Lean 3, but I realized that <span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> wrote a much more detailed one in <a href=\"#narrow/stream/113488-general/topic/Examples.20of.20communicating.20with.20Lean\">this thread</a>. As far as I know not too much has changed since then, but we do now have some <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/widget_server.md\">documentation on the server protocol</a> which might be useful.</p>",
        "id": 221168553,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609277066
    },
    {
        "content": "<p>Thanks Bryan! I looked through your links; they might help for wrappers. But I think this means there aren't standard \"transpilers\" to lean from coq proof objects or pvs prf files that I could use? </p>\n<p>I'm asking because if it's more than a couple of days of work, it might be better to table this idea.</p>",
        "id": 221169011,
        "sender_full_name": "Haskell",
        "timestamp": 1609277423
    },
    {
        "content": "<p>no, the translation story between those provers is currently pretty bad</p>",
        "id": 221169172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609277559
    },
    {
        "content": "<p>Thanks Mario and Bryan, that saves me a lot of digging!</p>",
        "id": 221169180,
        "sender_full_name": "Haskell",
        "timestamp": 1609277581
    },
    {
        "content": "<p>That's right, there isn't anything like that at all as far as I know.</p>\n<p>Note that even if there were such a thing, there are still a lot of obstacles in the way of any kind of useful translation. See <a href=\"#narrow/stream/113489-new-members/topic/Translating.20proofs.20between.20proof.20systems\">this thread</a> for some discussion.</p>",
        "id": 221169200,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609277594
    },
    {
        "content": "<p>It's probably at the \"bachelor's thesis\" level of difficulty, not impossible but at least a few weeks of work</p>",
        "id": 221169212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609277602
    },
    {
        "content": "<p>especially if you want complete faithfulness</p>",
        "id": 221169270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609277648
    }
]