[
    {
        "content": "<p>Hello all! I have extracted the following example from  a proof that I am working on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.fourier</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.integrals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">real.pi</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span>\n      <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n        <span class=\"bp\">-</span><span class=\"n\">real.pi..real.pi</span><span class=\"o\">,</span>\n        <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">complex.I</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">complex.I</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">complex.I</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">complex.I</span><span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">u'</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">v'</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">complex.I</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>My problem is that I want to be able to write the goal in terms of these defined functions, but since they are not iff or eq, then rw does not work for it, how should I approach this? Is there a way to keep these let statements as they are and do this or do I have to turn them into different statements for it to work?</p>",
        "id": 293896715,
        "sender_full_name": "Julia Ramos Alves",
        "timestamp": 1660742941
    },
    {
        "content": "<p><code>change</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#change\">tactic#change</a>) probably works</p>",
        "id": 293897043,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1660743051
    },
    {
        "content": "<p>Use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.set\">docs#tactic.interactive.set</a> instead of <code>let</code>. Then you can specify a name for the hypothesis that <code>u</code>, <code>v</code>, <code>u'</code>, <code>v'</code> are equal to their definition.</p>",
        "id": 293899948,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660744042
    },
    {
        "content": "<p>I have tried both of these suggestions but they haven't worked.</p>",
        "id": 293902509,
        "sender_full_name": "Julia Ramos Alves",
        "timestamp": 1660744886
    },
    {
        "content": "<p>Can you show me what you tried precisely?</p>",
        "id": 293902600,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660744919
    },
    {
        "content": "<p>I wrote</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n<span class=\"n\">set</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">complex.I</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">complex.I</span><span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>instead of the previous first two let statements and also tried a few things like rw v, simp_rw v, rw \\l hv, change hv.<br>\nI don't know exactly how to make it work.</p>",
        "id": 293903295,
        "sender_full_name": "Julia Ramos Alves",
        "timestamp": 1660745146
    },
    {
        "content": "<p>Can you copy-paste the full code block?</p>",
        "id": 293903574,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660745237
    },
    {
        "content": "<p>Have you read the documentation for change that I linked to?</p>",
        "id": 293904305,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1660745492
    },
    {
        "content": "<p>I think we have a <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem here: the real question is how to do integration by parts. The answer to that is that you need a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">complex.I</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">complex.I</span><span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">complex.I</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(I haven't checked that code)<br>\nthe derivative of the coercion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.fderiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_fderiv_at_of_real</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_fderiv_at</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">complex.of_real_clm</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_linear_map.has_fderiv_at</span> <span class=\"n\">complex.of_real_clm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_deriv_at_of_real</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_fderiv_at_of_real.has_deriv_at</span>\n</code></pre></div>\n<p>and with these things you can apply integration by parts without defining the functions by hand</p>",
        "id": 293904701,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660745620
    },
    {
        "content": "<p>btw the last lemma should be in mathlib, right?</p>",
        "id": 293905229,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660745756
    },
    {
        "content": "<p>Returning to the original problem, I usually do <code>dsimp only [u]</code> to expand a definition <code>u</code> via <code>let</code> within a proof. These definitions seem to be <code>abbreviation</code>s or at least <code>reducible</code>, because <code>rw</code> sees through them (but <code>split_ifs</code> doesn't, for example), however no equational lemma is generated (similar to <code>abbreviation</code>) so you can't <code>rw u</code> (and <code>unfold</code> and <code>dunfold</code> also don't work).</p>",
        "id": 293907778,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660746503
    }
]