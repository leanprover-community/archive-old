[
    {
        "content": "<p>Hi all. I wanted to build my own natural number-like number system and prove that 1 + 1 = 2. Why does my rw fail here?</p>\n<div class=\"codehilite\"><pre><span></span>constant mynumber: Type\nconstant zero: mynumber\nconstant one: mynumber\nconstant two: mynumber\nconstant after: mynumber → mynumber\nconstant plus: mynumber → mynumber → mynumber\ndef one_is_after_zero := one = after(zero)\ndef two_is_after_one := two = after(one)\ndef plus_zero (n: mynumber) := plus n zero = n\ndef plus_after (n m: mynumber) :=\n  plus n (after m) = after (plus n m)\n\ntheorem one_plus_one_is_two: plus one one = two :=\nbegin\n  rw one_is_after_zero,  -- FAILED HERE\nend\n</pre></div>\n\n\n<p>The popup in vs code just say \"failed\" without any explanation. Thanks.</p>",
        "id": 184059093,
        "sender_full_name": "agro1986",
        "timestamp": 1577029477
    },
    {
        "content": "<p>You never need to use constants in Lean. But the reason for the failure is that <code>one_is_after_zero</code> is the <em>statement</em> that <code>one = after(zero)</code> -- it has type <code>Prop</code>. The <code>rw</code> tactic eats <em>proofs</em> -- you need to <code>rw h</code> where <code>h</code> has type <code>one_is_after_zero</code>.</p>",
        "id": 184059415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577030104
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">after</span><span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">one_plus_one_is_two</span><span class=\"o\">:</span> <span class=\"n\">plus</span> <span class=\"n\">one</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">two</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 184059469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577030218
    },
    {
        "content": "<p>You could change all your <code>def blah := ...</code> to <code>axiom blah : ...</code> to get the effect you want</p>",
        "id": 184059532,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1577030355
    },
    {
        "content": "<p>Note the change from <code>:=</code> to <code>:</code></p>",
        "id": 184059535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577030390
    },
    {
        "content": "<p>that makes sense. proposition != the proof that the proposition is true</p>",
        "id": 184059582,
        "sender_full_name": "agro1986",
        "timestamp": 1577030424
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>constant one_is_after_zero: one = after(zero)\nconstant two_is_after_one: two = after(one)\nconstant plus_zero (n: mynumber): plus n zero = n\nconstant plus_after (n m: mynumber) :\n  plus n (after m) = after (plus n m)\n\ntheorem one_plus_one_is_two: plus one one = two :=\nbegin\n  rw one_is_after_zero,\n  rw plus_after,\n  rw plus_zero,\n  rw two_is_after_one,\n  rw one_is_after_zero,\nend\n</pre></div>",
        "id": 184059590,
        "sender_full_name": "agro1986",
        "timestamp": 1577030447
    },
    {
        "content": "<p>The constant-free version looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">mynumber</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">:</span> <span class=\"n\">mynumber</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"n\">mynumber</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span><span class=\"o\">:</span> <span class=\"n\">mynumber</span>\n<span class=\"bp\">|</span> <span class=\"n\">after</span><span class=\"o\">:</span> <span class=\"n\">mynumber</span> <span class=\"bp\">→</span> <span class=\"n\">mynumber</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span><span class=\"o\">:</span> <span class=\"n\">mynumber</span> <span class=\"bp\">→</span> <span class=\"n\">mynumber</span> <span class=\"bp\">→</span> <span class=\"n\">mynumber</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynumber</span>\n\n<span class=\"kn\">variables</span>\n  <span class=\"o\">(</span><span class=\"n\">one_is_after_zero</span> <span class=\"o\">:</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">after</span><span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">two_is_after_one</span> <span class=\"o\">:</span> <span class=\"n\">two</span> <span class=\"bp\">=</span> <span class=\"n\">after</span><span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">plus_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">plus</span> <span class=\"n\">n</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">plus_after</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">plus</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">after</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">after</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"n\">include</span> <span class=\"n\">one_is_after_zero</span> <span class=\"n\">two_is_after_one</span> <span class=\"n\">plus_zero</span> <span class=\"n\">plus_after</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">one_plus_one_is_two</span><span class=\"o\">:</span> <span class=\"n\">plus</span> <span class=\"n\">one</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">two</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_is_after_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">plus_after</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">plus_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">two_is_after_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_is_after_zero</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynumber</span>\n</pre></div>",
        "id": 184059647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577030543
    },
    {
        "content": "<p><code>include</code> should be purple. I can't remember the reason this can't be fixed.</p>",
        "id": 184059713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577030665
    },
    {
        "content": "<p>Wow thanks! Other than 'inductive' I've encountered them from TPiL. I hope I can write my code more closer to everyone else's style</p>",
        "id": 184059799,
        "sender_full_name": "agro1986",
        "timestamp": 1577030842
    },
    {
        "content": "<p>The only advantage I can think of for the <code>inductive</code> method over the <code>constant</code> method is that with the <code>inductive</code> method the principle of induction gets generated automatically by Lean. Other than that the two methods are very similar. If you write <code>#print prefix mynumber</code> you can see all the stuff that Lean generates for you, the key one being <code>mynumber.rec</code>. With your method you'd have to make the principle of induction yourself as another constant.</p>",
        "id": 184060218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577031594
    },
    {
        "content": "<p>Umm...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">one_plus_one_is_not_two</span><span class=\"o\">:</span> <span class=\"n\">plus</span> <span class=\"n\">one</span> <span class=\"n\">one</span> <span class=\"bp\">≠</span> <span class=\"n\">two</span><span class=\"bp\">.</span>\n</pre></div>",
        "id": 184061237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577033442
    },
    {
        "content": "<p>the inductive structure is assuming things that you don't necessarily want to assert</p>",
        "id": 184061247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577033501
    },
    {
        "content": "<p>You could just do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span>\n  <span class=\"o\">(</span><span class=\"n\">mynumber</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">:</span> <span class=\"n\">mynumber</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"n\">mynumber</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">two</span><span class=\"o\">:</span> <span class=\"n\">mynumber</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">after</span><span class=\"o\">:</span> <span class=\"n\">mynumber</span> <span class=\"bp\">→</span> <span class=\"n\">mynumber</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">plus</span><span class=\"o\">:</span> <span class=\"n\">mynumber</span> <span class=\"bp\">→</span> <span class=\"n\">mynumber</span> <span class=\"bp\">→</span> <span class=\"n\">mynumber</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">one_is_after_zero</span> <span class=\"o\">:</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">after</span><span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">two_is_after_one</span> <span class=\"o\">:</span> <span class=\"n\">two</span> <span class=\"bp\">=</span> <span class=\"n\">after</span><span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">plus_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">plus</span> <span class=\"n\">n</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">plus_after</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">plus</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">after</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">after</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"n\">include</span> <span class=\"n\">one_is_after_zero</span> <span class=\"n\">two_is_after_one</span> <span class=\"n\">plus_zero</span> <span class=\"n\">plus_after</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">one_plus_one_is_two</span><span class=\"o\">:</span> <span class=\"n\">plus</span> <span class=\"n\">one</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">two</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_is_after_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">plus_after</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">plus_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">two_is_after_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_is_after_zero</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 184061294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577033575
    },
    {
        "content": "<p>That's really annoying. There's no way you can put the relations in the definition of an inductive type?</p>",
        "id": 184062077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577035049
    },
    {
        "content": "<p>They call those HITs (higher inductive types), and the theory is much more subtle</p>",
        "id": 184064637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577039942
    }
]