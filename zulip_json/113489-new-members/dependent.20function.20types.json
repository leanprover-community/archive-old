[
    {
        "content": "<p>Hi,</p>\n<p>I am trying to understand the description of dependent function types as given in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#dependent-types\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#dependent-types\">Section 2.8 of Theorem Proving in Lean</a>. I think I follow up to the end of this paragraph:</p>\n<p>\"It is clear that cons α should have type α → list α → list α. But what type should cons have? A first guess might be Type → α → list α → list α, but, on reflection, this does not make sense: the α in this expression does not refer to anything, whereas it should refer to the argument of type Type. In other words, assuming α : Type is the first argument to the function, the type of the next two elements are α and list α. These types vary depending on the first argument, α.\"</p>\n<p>My next guess for the type of cons might be something like λ α : Type, α → list α → list α. Is this what is being done, but with Π instead of λ? The next paragraph seems to make it more complicated than that:</p>\n<p>\"This is an instance of a Pi type, or dependent function type. Given α : Type and β : α → Type, think of β as a family of types over α, that is, a type β a for each a : α. In that case, the type Π x : α, β x denotes the type of functions f with the property that, for each a : α, f a is an element of β a. In other words, the type of the value returned by f depends on its input.\"</p>\n<p>Can I just set <code>α</code> to <code>Type</code> to get what I expected from this? Is this essentially what has been done in the code block later on:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">list</span>   <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">cons</span>   <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>As an aside, why does list have the type that is given here?</p>\n<p>If I replace Type with ℕ in the quoted paragraph then I get:</p>\n<p>\"Given α : ℕ and β : ℕ → Type, think of β as a family of types over ℕ, that is, a type β a for each a : ℕ. In that case, the type Π x : ℕ, β x denotes the type of functions f with the property that, for each a : ℕ, f a is an element of β a. In other words, the type of the value returned by f depends on its input.\"</p>\n<p>This seems to be hinting at what might be needed for the type of functions operating on lists of arbitrary lengths, if β : ℕ → &lt;a type involving list ℕ&gt;?</p>\n<p>In summary, why is the description of Π types more complicated than I expected? Is it something along the lines of the example of lists of an arbitrary length?</p>",
        "id": 160542502,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552365232
    },
    {
        "content": "<blockquote>\n<p>My next guess for the type of cons might be something like λ α : Type, α → list α → list α. Is this what is being done, but with Π instead of λ? The next paragraph seems to make it more complicated than that:</p>\n</blockquote>\n<p>It's a good guess, but the problem is that <code> λ α : Type, α → list α → list α</code> is not a type. It is a function that takes a type and returns a type. That is, <code>(λ α : Type, α → list α → list α) : Type -&gt; Type</code></p>",
        "id": 160542679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552365487
    },
    {
        "content": "<p>So this function acts something like <code>list</code>, which also has this same type (let's ignore universes for now). You can't write <code>x : list</code> because <code>list</code> is not a type. <code>x : list A</code> makes sense if <code>A</code> is a type</p>",
        "id": 160542700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552365546
    },
    {
        "content": "<blockquote>\n<p>If I replace Type with ℕ in the quoted paragraph then I get:</p>\n<p>\"Given α : ℕ and β : ℕ → Type, think of β as a family of types over ℕ, that is, a type β a for each a : ℕ. In that case, the type Π x : ℕ, β x denotes the type of functions f with the property that, for each a : ℕ, f a is an element of β a. In other words, the type of the value returned by f depends on its input.\"</p>\n</blockquote>\n<p>Your replacement was inconsistent. You replaced α with ℕ  in most places, not Type with ℕ. Generally you can't treat <code>Type</code> and <code>ℕ</code> the same because <code>Type</code> is a universe and <code>ℕ</code> is not. That is, the elements of Type have elements but the elements of nat don't. If <code>A : Type</code> then<code>x : A</code> makes sense, but if <code>3 : ℕ</code> then <code>x : 3</code> doesn't make sense</p>",
        "id": 160542793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552365696
    },
    {
        "content": "<p>Oops. I think I meant:<br>\n\"This is an instance of a Pi type, or dependent function type. Given ℕ : Type and β : ℕ → Type, think of β as a family of types over ℕ, that is, a type β a for each a : ℕ. In that case, the type Π x : ℕ, β x denotes the type of functions f with the property that, for each a : ℕ, f a is an element of β a. In other words, the type of the value returned by f depends on its input.\"</p>",
        "id": 160542922,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552365893
    },
    {
        "content": "<p>I guess my question is then, why is the type of a dependent function not Π x : Type, β x?</p>",
        "id": 160542998,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552366076
    },
    {
        "content": "<p>That is, why is β not a function from types to types.</p>",
        "id": 160543719,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552367109
    },
    {
        "content": "<p>The difference between lambda and Pi is that lambda is used to construct the terms, and Pi is used to construct the types. For example <code>X\\to Y</code> is a type, and <code>\\lam x, f x</code> is a term of that type, if <code>f</code> is a function from <code>X</code> to <code>Y</code>.</p>\n<p>The type of a dependent function is <code>Pi x : X, f x</code> where X can be any type, and f is a function which takes terms of type X and spits out anything. Sure <code>X</code> can be <code>Type</code>. Do you have any questions still?</p>",
        "id": 160559772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552387584
    },
    {
        "content": "<p>I think the key part that I was not sure about was that <code>X</code> can be <code>Type</code>. Thank you.</p>",
        "id": 160583904,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552407154
    },
    {
        "content": "<p>\"In that case, the type Π x : α, β x denotes the type of functions f with the property that, for each a : α, f a is an element of β a\".</p>\n<p>Does \"is an element of\" in this sentence mean \"has the type\"? That is, \"In that case, the type Π x : α, β x denotes the type of functions f with the property that, for each a : α, f a has the type β a\"?</p>",
        "id": 160634679,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552452134
    },
    {
        "content": "<p>yes</p>",
        "id": 160634686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552452180
    },
    {
        "content": "<p>Cool. Thank you.</p>",
        "id": 160634697,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552452201
    },
    {
        "content": "<p>technically, \"having the type\" is not a proposition, it's just a thing that is true when you have this construction. That is, if <code>f : Π x : α, β x</code> and <code>a : α</code> then <code>f a : β a</code>.</p>",
        "id": 160634770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552452328
    },
    {
        "content": "<p>Yes. I think that makes sense.</p>",
        "id": 160634840,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552452430
    },
    {
        "content": "<p>Wait. Maybe I am missing something. Why is \"has the type\" not a proposition, like \"the car is red\"?</p>",
        "id": 160635024,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552452694
    },
    {
        "content": "<p>Isn't it a true or false proposition?</p>",
        "id": 160635068,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552452723
    },
    {
        "content": "<p>Anyway, I think your second sentence makes sense to me.</p>",
        "id": 160635086,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552452782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Patrick Thomas</span> In the metatheory, you can talk about \"having a type\" like a proposition; you can say \"x is not well typed\" the same as \"T is not provable\" and other such assertions. But in the logic itself, the basic judgment <em>is</em> an element having a certain type; you can only prove such assertions by chaining together other judgments. If you formalize <code>is_red my_car : Prop</code>, then you can prove <code>pf : is_red my_car</code> or <code>pf : ¬ is_red my_car</code>, because it's a proposition. If you have <code>my_car : car</code>, then this is not a thing you can negate, it's just the kind of thing that <code>my_car</code> is. You can't really prove facts about this, you just ask lean \"what type is <code>my_car</code>\" and it says \"it's a <code>car</code>\" and that's it. So typing judgements are not \"true or false\", they are \"true or you can't write them down\".</p>",
        "id": 160637138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552456161
    },
    {
        "content": "<p>That makes sense. I was assuming we were talking solely in the metatheory. That is, that the sentence I quoted was a proposition in the metatheory.</p>",
        "id": 160638848,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552458436
    }
]