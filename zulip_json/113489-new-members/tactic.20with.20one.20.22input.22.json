[
    {
        "content": "<p>I watched some of Rob's videos and decided to try to make a baby tactic, which does the same thing as <code>rw</code> but fails if this doesn't close the goal.  I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rw1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">solve1</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"o\">}]</span>\n</code></pre></div>\n<p>and this gave the error \"kernel failed to type check declaration 'rw1' this is usually due to a buggy tactic or a bug in the builtin elaborator\".  What am I doing wrong?</p>",
        "id": 263461342,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638461643
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 263474215,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1638466910
    },
    {
        "content": "<p>albeit not the tactic you're looking for</p>",
        "id": 263479795,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1638469281
    },
    {
        "content": "<p>I'm not sure how to debug that, but another way is to take the definition for <code>tactic.interactive.rw</code> and replace its innards with running <code>tactic.interactive.rw</code> with the parsed arguments and using what <code>tactic.interactive.solve1</code> uses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive.types</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rw1</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">rw_rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.solve1</span> <span class=\"bp\">$</span> <span class=\"n\">tactic.interactive.rw</span> <span class=\"n\">q</span> <span class=\"n\">l</span> <span class=\"n\">cfg</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw1</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> solve1 tactic failed, focused goal has not been solved -/</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw1</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263482188,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638470379
    },
    {
        "content": "<p>Thank you, Kyle!  This is really instructive.</p>",
        "id": 263482438,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638470500
    },
    {
        "content": "<p>The following works, but isn't probably very useful for your purposes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rw1</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">solve1</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"o\">}]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw1</span>\n</code></pre></div>\n<p>The <code>`[]</code> notation effectively wraps up <code>solve1 { rw h }</code> in a <code>begin... end</code> block and treats the whole thing as a <code>tactic unit</code> (see <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">Mario's backtick cheatsheet</a>). So <code>rw1</code> works here by looking for the actual name <code>h</code> in the context it's used in the example.  I haven't personally experimented much with the <code>`[]</code> notation, so I don't know if there is a better way to pass in an arbitrary argument, but my sense is that Kyle's approach is better for this particular application.</p>",
        "id": 263488837,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1638473301
    },
    {
        "content": "<p>I'm honestly not sure how antiquoting (<code>%%a</code>) works in <code> `[...]</code> blocks, so in general I wouldn't try... it'll definitely be less painful to write the tactic directly as Kyle shows</p>",
        "id": 263490043,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638473878
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.rewrite_target\">docs#tactic.rewrite_target</a> and surrounding decls if you need non-interactive versions</p>",
        "id": 263490105,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638473895
    }
]