[
    {
        "content": "<p>The following simple tautology seems like it should have a short proof, but the best I could come up with is quite long.  Is there a shorter or more readable, more direct way to prove it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">hnotpimpliesq</span><span class=\"o\">,</span>\n  <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnotq</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hnotpimpliesq</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">)),</span>\n      <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hnotq</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnotp</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hpimpliesq</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnotp</span><span class=\"o\">),</span>\n      <span class=\"n\">absurd</span> <span class=\"n\">hpimpliesq</span> <span class=\"n\">hnotpimpliesq</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266963881,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1641403372
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 266964495,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641403699
    },
    {
        "content": "<p>͏</p>",
        "id": 266964505,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641403710
    },
    {
        "content": "<p>This is just <code>not_imp.mp</code> I believe. Have you tried with <code>library_search</code>?</p>",
        "id": 266964541,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641403738
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- Filippo is right</span>\n</code></pre></div>",
        "id": 266964712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641403836
    },
    {
        "content": "<p>Just to compare, this is the <code>not_imp.mp</code> proof expanded out to have a similar style (and from replacing some things using classical decidability instances along the way):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hnpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n    <span class=\"n\">and.intro</span>\n      <span class=\"o\">(</span><span class=\"n\">classical.by_contradiction</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n          <span class=\"n\">hnpq</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n        <span class=\"n\">hnpq</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 266968655,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641405768
    },
    {
        "content": "<p>Thanks!  <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  that's interesting.  I didn't think of using and.intro at the root, but that does simplify things.  I have the same proof of ¬q, but didn't notice that it didn't use the assumption of p.  And with and.intro at root, the by_contradiction is cleaner than my or.elim (em p).</p>",
        "id": 266977446,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1641409951
    },
    {
        "content": "<p>Re your question about a shorter or more readable proof -- are you reading <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> but haven't got to chapter 5 yet? Once you know some tactics then things become much more readable and typically shorter too.</p>",
        "id": 266978737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641410536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"348963\">@Martin C. Martin</span> I'm not sure it's actually simpler, once you inline your <code>have</code>s and shorten variable names:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hnpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n  <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n      <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hnpq</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">)⟩)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n      <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span><span class=\"o\">)</span> <span class=\"n\">hnpq</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But comparing these term proofs is more for the fun of it. I've usually only written them after having written a tactic proof and realized somehow the term proof would be shorter/clearer after simplification.</p>",
        "id": 266980181,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641411315
    },
    {
        "content": "<p>Just as an example of a non- <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#tauto\">tactic#tauto</a> proof, there's <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#push_neg\">tactic#push_neg</a>, which knows about standard manipulations involving logically negating propositions, pushing the negation inward (it applies things like double negation elimination for you).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266980910,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641411704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> yes, this is a question from chapter 3.  Thanks for the tip, looking forward to chapter 5.</p>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> good point.  I haven't gotten into tactics yet.  Still, I find it useful to know of other ways of looking at it, even if they become moot after learning tactics.</p>",
        "id": 266988242,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1641415274
    }
]