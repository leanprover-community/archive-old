[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266262\">Reed Mullanix</span> <a href=\"#narrow/stream/113489-new-members/topic/Heterogenous.2FDependent.20Equality/near/200804518\">said</a>:</p>\n<blockquote>\n<p>Also, what is the general take on heterogenous equality?</p>\n</blockquote>\n<p>I think: try to avoid it as much as possible.</p>",
        "id": 200805930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592122365
    },
    {
        "content": "<p>What we typically do in mathlib is to move the carrier type <code>(A : C)</code> out of the structure fields, and into the hypotheses.</p>",
        "id": 200805943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592122437
    },
    {
        "content": "<p>Once you do that, writing <code>ext</code> is no longer a problem.</p>",
        "id": 200805984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592122456
    },
    {
        "content": "<p>Of course, this doesn't work if you are trying to build the underlying type for the category of algebras over a monad...</p>",
        "id": 200806044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592122569
    },
    {
        "content": "<p>But in that case, you should use isomorphisms in the category, instead of equality.</p>",
        "id": 200806049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592122599
    },
    {
        "content": "<blockquote>\n<p>I think: try to avoid it as much as possible.</p>\n</blockquote>\n<p>I've definitely been burned by it in other systems, so this makes sense</p>\n<p>And yeah, I was just going to bring that up. The result I was working on only works for strict equality as far as I know (uniqueness of the comparison functor for Eilenberg-Moore)</p>",
        "id": 200806061,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1592122644
    },
    {
        "content": "<p>Ok, I don't know the details of the maths there</p>",
        "id": 200806120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592122747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Do you know what to do here?</p>",
        "id": 200806127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592122784
    },
    {
        "content": "<p>You might look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/functor.ext/src\">src#functor.ext</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/functor.hext/src\">src#functor.hext</a></p>",
        "id": 200806165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592122803
    },
    {
        "content": "<p>Bah, wrong links.</p>",
        "id": 200806183,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592122832
    },
    {
        "content": "<p>Yeah, I saw something similar done with <a href=\"https://github.com/leanprover-community/mathlib/blob/c8c18697d4019608b756edf7989290303a96071a/src/category_theory/eq_to_hom.lean#L47\">https://github.com/leanprover-community/mathlib/blob/c8c18697d4019608b756edf7989290303a96071a/src/category_theory/eq_to_hom.lean#L47</a></p>",
        "id": 200806261,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1592122998
    },
    {
        "content": "<p>Yes, those two variants were what I was trying to link to!</p>",
        "id": 200806330,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592123120
    },
    {
        "content": "<p><code>eq_to_hom</code> seems like a pretty good solution most of the time.</p>",
        "id": 200806339,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592123154
    },
    {
        "content": "<p>They seem to successfully dissolve out of the way under <code>simp</code> in the actual goals you see.</p>",
        "id": 200806388,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592123186
    },
    {
        "content": "<p>I don't know what it is you're trying to prove, but I'll be surprised if it's intrinsically \"evil\".</p>",
        "id": 200806410,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592123250
    }
]