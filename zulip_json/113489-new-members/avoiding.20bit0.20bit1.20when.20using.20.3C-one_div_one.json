[
    {
        "content": "<p>Hi ! <br>\nI have a question concerning the encoding bit0/bit1, I would like to prove for instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"n\">x1</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">x0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">real.cosh</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x1</span><span class=\"o\">))</span><span class=\"bp\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">x0</span><span class=\"o\">)</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">real.cosh</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I expected <code>rwa [&lt;-one_div_one] at h0,</code><br>\nto do the job,  but the state after using <code>rw [&lt;-one_div_one]</code> becomes<br>\n<code>-(bit0 (bit1 (1 / 1)) + x0) *real.cosh (1 / 1 + x1)&lt; 0</code> instead of the desired <code>-(6 + x0) *(real.cosh (1/1 + x1)) &lt;0 </code>, and thus<br>\nassumption will not work. How could I fix this ? Is there a way to avoid the state to be expressed with bit0 / bit1 ? Of course one option would simply be to use <code>rwa one_div_one,</code> instead but I wonder whether there is a way to do what I originally planned.<br>\nThanks a lot !</p>",
        "id": 267831460,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1642057919
    },
    {
        "content": "<p>You could use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#conv\">tactic#conv</a> to pick the right one, like <code>conv in (1+x1) at h0 {rw \\l one_div_one } </code> (untested, hopefully i got it right)</p>",
        "id": 267832457,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642058791
    },
    {
        "content": "<p>OK thanks a lot I'll try this :)</p>",
        "id": 267833663,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1642059889
    },
    {
        "content": "<p>Hm, Lean does not seem to like the syntax but I am sure conv indeed solves the issue ! More generally, is there a way to transform all pos_num expressed with <code>bit1</code> and  <code>bit0</code> in the tactic state to regular nat (1,2,3,4,etc.) ?</p>",
        "id": 267840667,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1642064744
    },
    {
        "content": "<p><code>6</code> is internally represented in terms of <code>1</code>, so <code>rw</code> doesn't know which <code>1</code> you want to rewrite.<br>\nUsing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.nth_rewrite\">docs#tactic.interactive.nth_rewrite</a> should work: <code>nth_rewrite 1 ←one_div_one at h0</code></p>",
        "id": 267841476,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642065193
    },
    {
        "content": "<p>Ok, thanks ! :) I will need to count more carefully the occurences of <code>1</code> then</p>",
        "id": 267927210,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1642106491
    }
]