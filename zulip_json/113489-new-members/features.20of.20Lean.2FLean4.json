[
    {
        "content": "<p>Hi all, I'd like to know: why use Lean(4?)? My impression is that it is a replacement for Coq. But what are the advantages of Lean over Coq in that case? How does it then also differ from Agda which is also an alternative to Coq?</p>",
        "id": 237961093,
        "sender_full_name": "Robert Watson",
        "timestamp": 1620485224
    },
    {
        "content": "<p>It very much depends on what you want to do. Those software and their libraries have different strength.</p>",
        "id": 237962325,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620486449
    },
    {
        "content": "<p>Are you interested in traditional mathematics, logic, software verification or type theory?</p>",
        "id": 237962346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620486474
    },
    {
        "content": "<p>Yes. All of the above. Plus constructive mathematics. Plus programming in a self-verified language.</p>",
        "id": 237963885,
        "sender_full_name": "Robert Watson",
        "timestamp": 1620487862
    },
    {
        "content": "<p>If you are interested in all of those, you should really try all of the systems.</p>",
        "id": 237964237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620488073
    },
    {
        "content": "<p>Because (currently) none of the systems is good for all of those interests at the same time.</p>",
        "id": 237964267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620488107
    },
    {
        "content": "<p>Which hat should I wear when I start to use Lean?</p>",
        "id": 237966274,
        "sender_full_name": "Robert Watson",
        "timestamp": 1620489825
    },
    {
        "content": "<p>Normal maths for Lean 3.</p>",
        "id": 237966285,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620489841
    },
    {
        "content": "<p>Programming in a self-verified language for Lean 4.</p>",
        "id": 237966348,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620489861
    },
    {
        "content": "<p>Note that Lean 4 will also be great for maths in the future, but it's not yet read for that.</p>",
        "id": 237966439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620489956
    },
    {
        "content": "<p>That's kind of why I'm asking the question, isn't it.  Presumably Lean 4 is expected to catch up with Lean 3 for libraries at some point?</p>",
        "id": 237966480,
        "sender_full_name": "Robert Watson",
        "timestamp": 1620489968
    },
    {
        "content": "<p>You got there before me...</p>",
        "id": 237966500,
        "sender_full_name": "Robert Watson",
        "timestamp": 1620489984
    },
    {
        "content": "<p>I can't find anything on the internet for input/output in Lean 4...IO monads?</p>",
        "id": 237966532,
        "sender_full_name": "Robert Watson",
        "timestamp": 1620490028
    },
    {
        "content": "<p>Documentation of Lean 4 is still very much WIP. You can already have a look at <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/System/IO.lean\">https://github.com/leanprover/lean4/blob/master/src/Init/System/IO.lean</a></p>",
        "id": 237966922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620490337
    },
    {
        "content": "<p>Yes, lean 3's main library is its maths library <code>mathlib</code> and we fully expect the hard job of porting it to lean 4 to occur at some point -- people are actively thinking about it</p>",
        "id": 237967351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620490779
    },
    {
        "content": "<p>Interesting. Really interesting. What about constructive mathematics?</p>",
        "id": 237967827,
        "sender_full_name": "Robert Watson",
        "timestamp": 1620491232
    },
    {
        "content": "<p><code>mathlib</code> is developed as a classical library, most mathematicians here are not constructivists.</p>",
        "id": 237967843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620491268
    },
    {
        "content": "<p>My personal rationale for this is that the constructivists have had a pretty tight hold on computer theorem provers for decades, and the provers didn't catch on in maths departments (where constructivists are vanishingly rare) so it's time to have a go with a classical maths library to see if this generates any more excitement amongst mathematicians.</p>",
        "id": 237967955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620491378
    },
    {
        "content": "<p>Honestly if you are interested in constructive mathematics you'll feel much better in the Coq community. You're still welcome here, but you'll be sad.</p>",
        "id": 237968518,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620491802
    },
    {
        "content": "<p>Does that preference have any engineering consequences for the underlying implementation of the type system/kernel and elaboration?</p>",
        "id": 237968523,
        "sender_full_name": "Robert Watson",
        "timestamp": 1620491808
    },
    {
        "content": "<p>It just makes most of it (the library) noncomputable, but as a classical mathematician I don't care about this because all I want to do is prove more theorems (I realise I'm not answering your question, I think the answer is \"no\")</p>",
        "id": 237968550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620491845
    },
    {
        "content": "<p>This is fascinating. I believe in using both styles btw. But I want tight control over which I am using and when.</p>",
        "id": 237968889,
        "sender_full_name": "Robert Watson",
        "timestamp": 1620492131
    },
    {
        "content": "<p>Is there an issue like the way NuPRL has an undecidable type system?</p>",
        "id": 237968945,
        "sender_full_name": "Robert Watson",
        "timestamp": 1620492195
    },
    {
        "content": "<p>(I've already decided Lean 4 &gt; Lean 3 btw.)</p>",
        "id": 237969043,
        "sender_full_name": "Robert Watson",
        "timestamp": 1620492287
    },
    {
        "content": "<p>This is has almost nothing to do with the kernel. It's mostly the library and the user community (those are mostly equivalent concepts).</p>",
        "id": 237969145,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620492367
    },
    {
        "content": "<p>Yes. In other words, this makes no real difference in the long term. Thanks guys...much as I could go on for hours I'll give you a break. Thanks indeed and see you around.</p>",
        "id": 237969227,
        "sender_full_name": "Robert Watson",
        "timestamp": 1620492456
    },
    {
        "content": "<p>I wrote almost nothing because the tiny variations between Coq's type theory and Lean type theory do have some consequences. Definitional equality is undecidable.</p>",
        "id": 237969288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620492497
    },
    {
        "content": "<p>see Section 3 from <a href=\"https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf\">https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf</a></p>",
        "id": 237969372,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620492579
    },
    {
        "content": "<p>Thanks again.</p>",
        "id": 237969390,
        "sender_full_name": "Robert Watson",
        "timestamp": 1620492595
    },
    {
        "content": "<p>see also <a href=\"https://arxiv.org/abs/1911.08174\">https://arxiv.org/abs/1911.08174</a></p>",
        "id": 237969514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620492675
    },
    {
        "content": "<p>if you care about that sort of things</p>",
        "id": 237969518,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620492683
    },
    {
        "content": "<p>None of this has any impact on mathematics formalization of course.</p>",
        "id": 237969530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620492698
    }
]