[
    {
        "content": "<p>I'm trying to prove 0 ≤ r^2 * pi. Here is my work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">pi_r_sq_pos</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">):</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">r</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">pow_nonneg</span> <span class=\"n\">H</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">pi</span> <span class=\"bp\">&gt;</span>  <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">pi_pos</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_nonneg</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I have to prove that <code>pi  ≥ 0</code> instead of <code>pi &gt; 0</code>, but I still stuck in it. <br>\nWould someone help me with this? Thank you.</p>",
        "id": 159495758,
        "sender_full_name": "Mii Nguyen",
        "timestamp": 1551261455
    },
    {
        "content": "<p><code>apply mul_nonneg ; linarith</code></p>",
        "id": 159495865,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551261579
    },
    {
        "content": "<p>what is the role of  <code>linarith</code> in this case? <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 159495960,
        "sender_full_name": "Mii Nguyen",
        "timestamp": 1551261647
    },
    {
        "content": "<p>The role of <code>linarith</code> is to blast away stupid equality and inequality problems</p>",
        "id": 159495990,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551261683
    },
    {
        "content": "<p>But you can also be explicit of course:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">pi_r_sq_pos</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">):</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">r</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">pow_nonneg</span> <span class=\"n\">H</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">pi</span> <span class=\"bp\">&gt;</span>  <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">pi_pos</span><span class=\"o\">,</span>\n<span class=\"n\">mul_nonneg</span> <span class=\"err\">‹</span><span class=\"n\">r</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"err\">›</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"err\">‹</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">pi</span><span class=\"err\">›</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 159496003,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551261698
    },
    {
        "content": "<p>But in this case, the mathlib style is to be concise (because the result is trivial and wouldn't be even stated on paper): </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">pi_r_sq_pos</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">):</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_nonneg</span> <span class=\"o\">(</span><span class=\"n\">pow_nonneg</span> <span class=\"n\">H</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">pi_pos</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 159496095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551261766
    },
    {
        "content": "<p>Would you explain the different of  <code>‹ ›</code> and <code>( )</code>? The first is for , say,  exact argument and the second is for function? <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 159497113,
        "sender_full_name": "Mii Nguyen",
        "timestamp": 1551262669
    },
    {
        "content": "<p>I can find the informations of it in which chapter of the book?</p>",
        "id": 159497199,
        "sender_full_name": "Mii Nguyen",
        "timestamp": 1551262720
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/logic_and_proof/propositional_logic_in_lean.html#additional-syntax\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/propositional_logic_in_lean.html#additional-syntax\">https://leanprover.github.io/logic_and_proof/propositional_logic_in_lean.html#additional-syntax</a></p>",
        "id": 159497210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551262735
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 159497240,
        "sender_full_name": "Mii Nguyen",
        "timestamp": 1551262779
    },
    {
        "content": "<p>or <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#more-on-the-proof-language\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#more-on-the-proof-language\">https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#more-on-the-proof-language</a></p>",
        "id": 159497241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551262783
    },
    {
        "content": "<p><code>le_of_lt</code> is a proof that if <code>a &lt; b</code> then <code>a &lt;= b</code>; this is the answer to your original question, and it's in Patrick's code.</p>",
        "id": 159517085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551276685
    },
    {
        "content": "<p>You can guess it because you want to prove <code>_ &lt;= _</code> which is called <code>le</code>, and it's the conclusion, so <code>le_of</code>, and then you write <code>le_of</code> and hit things like ctrl-space until VS Code tells you the things it knows which have \"le_of\" in, and then you find it.</p>",
        "id": 159517255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551276753
    }
]