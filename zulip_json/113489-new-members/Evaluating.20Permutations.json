[
    {
        "content": "<p>Hi there, I'm working on the formalization of  <a href=\"/user_uploads/3121/D669EGLElhwAHH8pCIikfN3O/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/D669EGLElhwAHH8pCIikfN3O/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/D669EGLElhwAHH8pCIikfN3O/image.png\"></a></div><p>I'm running into a little bit of trouble with the permutation sigma, </p>\n<p><code>test.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">r_eq</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">finset.Ioo</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.Ioc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.Ioc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.Ioo</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.Ioo</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.Ioo</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.Ioo</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>causing : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">⇑</span><span class=\"n\">σ</span> <span class=\"n\">i</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">i</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">finset.Ioo</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">ccn</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">olympiad</span><span class=\"bp\">-</span><span class=\"n\">formalization</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">int_alg</span><span class=\"bp\">/</span><span class=\"n\">section_18_2.lean</span><span class=\"o\">:</span><span class=\"mi\">36</span><span class=\"o\">:</span><span class=\"mi\">30</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"bp\">⇑</span><span class=\"n\">σ</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">finset.Ioo</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>What would be the simplest way to get the coercions to work without making the statement too ugly?</p>",
        "id": 275579568,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1647466005
    },
    {
        "content": "<p>Can you post a mwe? you can sum over the fintype rather than using <code>in</code></p>",
        "id": 275579779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647466138
    },
    {
        "content": "<p>Your correct - using a sum over <code>i : finset.Ioo 1 n</code> makes it so that all the evaluations work out</p>",
        "id": 275580904,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1647466788
    },
    {
        "content": "<p>What's the difference between using <code>in</code> and <code>:</code> ?</p>",
        "id": 275580918,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1647466798
    },
    {
        "content": "<p>Why are you talking permutations on a subtype? You should rather be taking <code>(σ : equiv.perm ℕ) (hσ : σ.support ⊆ finset.Ioo 1 n)</code></p>",
        "id": 275581331,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647467010
    },
    {
        "content": "<p>(annoyingly, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.support\">docs#equiv.perm.support</a> currently only works over fintypes...)</p>",
        "id": 275581434,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647467055
    },
    {
        "content": "<p>I think <code>x y : fin n → ℝ</code> would be a better start. There should be a nicer way to state that <code>x</code> and <code>y</code> are increasing, for example <code>∀ i j, i &lt; j -&gt; x i &lt; x j</code> or using some mathlib <code>increasing</code> definition.</p>",
        "id": 275582042,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647467390
    },
    {
        "content": "<p>It looks like all your <code>o</code>s and <code>c</code>s in <code>Ixx</code> are backwards--but better to avoid these intervals in the first place</p>",
        "id": 275582193,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647467451
    },
    {
        "content": "<p>(For this theorem statement, I mean.)</p>",
        "id": 275582223,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647467472
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/strict_mono\">docs#strict_mono</a>, as <code>strict_mono x</code> would work. for indicating that the sequence is increasing</p>",
        "id": 275584094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647468670
    },
    {
        "content": "<p>Note we already have <a href=\"https://tqft.net/mathlib/algebra/order/rearrangement\">file#algebra/order/rearrangement</a></p>",
        "id": 275584147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647468716
    },
    {
        "content": "<p>Which isn't to say that this is a bad learning exercise; heck, there's even a \"solution\" to compare against!</p>",
        "id": 275584266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647468795
    },
    {
        "content": "<p>Oh of course, I didn't recognize the rearrangement inequality <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 275585485,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647469692
    },
    {
        "content": "<p>Note that I cooked up <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monovary\">docs#monovary</a> for the occasion. AFAIK our statement of the rearrangement inequality is absolutely nonstandard.</p>",
        "id": 275585534,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647469755
    }
]