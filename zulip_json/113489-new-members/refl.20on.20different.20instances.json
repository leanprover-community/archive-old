[
    {
        "content": "<p>Hello, I defined a typeclass stating that a real number is in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0, 1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>, and used it in the definition of some other class.<br>\nNow I can't prove the equality in the example below, because each term contains a different instance, as shown by <code>set_option pp.all true</code>.<br>\nCan I get around this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"c1\">--set_option pp.all true</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ℝ01</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_one</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">metric_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ℝ01</span> <span class=\"n\">θ</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">space</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">θ₁</span> <span class=\"n\">θ₂</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ℝ01</span> <span class=\"n\">θ₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ℝ01</span> <span class=\"n\">θ₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">θ₁</span> <span class=\"bp\">=</span> <span class=\"n\">θ₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"n\">θ₁</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">θ₂</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"c1\">-- rw h, /-fails, motive is not type correct-/</span>\n    <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"c1\">-- invalid apply tactic, failed to unify</span>\n<span class=\"c1\">--   op θ₁ x = op θ₁ x</span>\n<span class=\"c1\">-- with</span>\n<span class=\"c1\">--   ?m_2 = ?m_2</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228046402,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1614418265
    },
    {
        "content": "<p>First, you probably don't want to use the typeclass system like this. It's not intended as a \"prover\", and often bundling the data in as fields of a structure (perhaps with a coercion back to the base type) works better (or just use <code>subtype</code>).</p>",
        "id": 228047871,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614420207
    },
    {
        "content": "<p>And then just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ℝ01</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_one</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">metric_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ01</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">space</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">θ₁</span> <span class=\"n\">θ₂</span> <span class=\"o\">:</span> <span class=\"n\">ℝ01</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">θ₁</span> <span class=\"bp\">=</span> <span class=\"n\">θ₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"n\">θ₁</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">θ₂</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228048016,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614420371
    },
    {
        "content": "<p>And then the coercion</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">ℝ01</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.x</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>would let you treat terms of <code>ℝ01</code> as if they were just in <code>ℝ</code>.</p>",
        "id": 228048063,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614420472
    },
    {
        "content": "<p>I see, I was hoping to avoid through typeclasses having to repetedly provide proofs for the fact that the interval is closed under some operations, but this seems to work better in the end. Thanks!</p>",
        "id": 228063247,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1614438182
    }
]