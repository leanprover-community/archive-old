[
    {
        "content": "<p>div and mod just don't interact in Lean</p>",
        "id": 133836913,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536778871
    },
    {
        "content": "<p>In this example there is no need for cases, <code>have : p % 4 = 3, rw [nat_eq_sub_of_add_eq (nat.mod_add_div p 4), nat_eq_sub_of_add_eq thing11]</code></p>",
        "id": 133837079,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1536779007
    },
    {
        "content": "<p>I'm talking about the 2|p/2 not giving us useful information regarding p%4</p>",
        "id": 133837367,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536779246
    },
    {
        "content": "<p>right.</p>",
        "id": 133837491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536779376
    },
    {
        "content": "<p><code>  have H : 3 = p % 4 := add_right_cancel (eq.trans thing11 (nat.mod_add_div p 4).symm),</code></p>",
        "id": 133837492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536779381
    },
    {
        "content": "<blockquote>\n<p>I'm talking about the 2|p/2 not giving us useful information regarding p%4</p>\n</blockquote>\n<p>my quadratic reciprocity PR contains this lemma, which can be used to deduce <code>(p % 4) / 2 = 0</code> from <code>nine</code> which is also a way to get a contradiction</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mod_mul_right_div_self</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">c</span>\n</pre></div>",
        "id": 133837582,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536779445
    },
    {
        "content": "<p>my Lean doesn't have your QR PR</p>",
        "id": 133837684,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536779530
    },
    {
        "content": "<p>This looks like it <br>\n<a href=\"https://github.com/leanprover/mathlib/blob/e005c3983be832dba68972519873df3ce0a2a6bb/data/nat/basic.lean#L240-L244\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/e005c3983be832dba68972519873df3ce0a2a6bb/data/nat/basic.lean#L240-L244\">https://github.com/leanprover/mathlib/blob/e005c3983be832dba68972519873df3ce0a2a6bb/data/nat/basic.lean#L240-L244</a></p>",
        "id": 133837720,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1536779586
    },
    {
        "content": "<p>How about <code>a | (b / c) -&gt; b % (a * c) &lt; a</code> modulo edge cases.</p>",
        "id": 133837738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536779621
    },
    {
        "content": "<blockquote>\n<p>How about <code>a | (b / c) -&gt; b % (a * c) &lt; a</code> modulo edge cases.</p>\n</blockquote>\n<p>The trouble with these lemmas is it's still hard to find the proof, because things like this aren't in the list of standard things in my head which I expect to be in the library.</p>",
        "id": 133837885,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536779757
    },
    {
        "content": "<p><code>(b / c) % a = n -&gt; a * n &lt;= b % (a * c)</code></p>",
        "id": 133837931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536779779
    },
    {
        "content": "<p><code>(b / c) % a = n -&gt; b % (a * c) &lt; a * (n + 1)</code></p>",
        "id": 133837944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536779807
    },
    {
        "content": "<p>or something</p>",
        "id": 133837984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536779872
    },
    {
        "content": "<p>A linear arithmetic solver should also be able to solve the original problem with suitable preprocessing</p>",
        "id": 133838073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536779987
    },
    {
        "content": "<p><code>b % (a * c) = b % c + c * ((b / c) % a)</code>or something</p>",
        "id": 133838130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536780018
    },
    {
        "content": "<p>that well-known fact</p>",
        "id": 133838139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536780031
    },
    {
        "content": "<p>Is there some standard name like <code>omega</code> or <code>sledgehammer</code> or something, for a linear arithmetic solver?</p>",
        "id": 133838173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536780087
    },
    {
        "content": "<p>oh wow that well-known fact might even be true in the edge cases</p>",
        "id": 133838233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536780131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Do you know if there are \"standard\" algorithms powerful enough to do that sort of thing?</p>",
        "id": 133838265,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536780191
    },
    {
        "content": "<p>We have Rob's linear arithmetic tactic</p>",
        "id": 133838274,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536780208
    },
    {
        "content": "<p>And maybe Seul will come back at some point</p>",
        "id": 133838294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536780236
    },
    {
        "content": "<p>I don't think that handles mod and integer division</p>",
        "id": 133838345,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536780264
    },
    {
        "content": "<p>My attempt to write some div mod stuff is <code>div_mod_stuff.lean</code> in the cocalc repo</p>",
        "id": 133841102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536783435
    },
    {
        "content": "<p>I have to clean the kitchen. I proved the well-known lemma</p>",
        "id": 133841106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536783443
    },
    {
        "content": "<p><code>lemma well_known (a b c : ℕ) : b % (a * c) = b % c + c * ((b / c) % a) := [done]</code></p>",
        "id": 133841111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536783455
    },
    {
        "content": "<p>I'm wondering if it makes the proof any easier</p>",
        "id": 133841112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536783464
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>nine : 2 ∣ p / 2,\nthing11 : 3 + 4 * (p / 4) = p,  [used]\nH : 3 = p % 2 + 2 * (p / 2 % 2)\n⊢ false\n</pre></div>",
        "id": 133841180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536783519
    },
    {
        "content": "<p>that's after applying the lemma</p>",
        "id": 133841194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536783535
    },
    {
        "content": "<p>Chris the original statement can be expressed in Presburger arithmetic (natural numbers with only addition), which has a decidable theory -- that's what Seul Baek implemented in <code>cooper</code>, I believe.</p>",
        "id": 133843673,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536786173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122318\">@Tobias Grosser</span> Is also working on Presburger arithmetic in Lean. He told me he would like to match up with someone who knows Lean/maths to get implement a version for mathlib.</p>",
        "id": 133860394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536810751
    },
    {
        "content": "<p>An additional question-- something that I have no idea how to fix. I currently have </p>\n<div class=\"codehilite\"><pre><span></span>an9 : 1 + x ^ 2 ≡ 0 [MOD p]\n⊢ 1 + x ^ 2 ≡ 0 [MOD p]\n</pre></div>\n\n\n<p>and <code> exact an9, </code> gives the error message:</p>\n<div class=\"codehilite\"><pre><span></span>invalid type ascription, term has type\n  nat.modeq p (@has_add.add nat nat.has_add 1 (@has_pow.pow nat nat (@monoid.has_pow nat nat.monoid) x 2)) 0\nbut is expected to have type\n  nat.modeq p (@has_add.add nat nat.has_add 1 (@has_pow.pow nat nat nat.has_pow x 2)) 0\n</pre></div>\n\n\n<p>In the middle of a complicated code, so I haven't made an MWE yet. Would this be easily fixable? (Before I try a different approach)</p>",
        "id": 133877436,
        "sender_full_name": "Xita Meyers",
        "timestamp": 1536837983
    },
    {
        "content": "<p>Does <code>simpa</code> or <code>simpa using an9</code> work? I think there's a simp lemma for rewriting pow on <code>nat</code>.</p>",
        "id": 133877609,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1536838213
    },
    {
        "content": "<p><code>simpa using an9,</code> works! Thanks!</p>",
        "id": 133877681,
        "sender_full_name": "Xita Meyers",
        "timestamp": 1536838293
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 133877764,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536838371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , yes I am interested in Presburger arithmetic.Still learning more about lean, but I am certainly interested to chat about this. In case sb is interested in collaborating, I am open to collaborative visits or internships @ETH.</p>",
        "id": 133880162,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1536841250
    },
    {
        "content": "<p>How can I represent square or cube in Lean such as x^2?</p>",
        "id": 135937724,
        "sender_full_name": "JIANXIONG SUN",
        "timestamp": 1539732905
    },
    {
        "content": "<p>what error does lean give you when you write <code>x^2</code>?</p>",
        "id": 135937808,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1539732982
    },
    {
        "content": "<p><code>import algebra.group_power</code></p>",
        "id": 135938425,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539733628
    },
    {
        "content": "<p>Hey guys,<br>\nFirst timer, so please be nice :)<br>\nI'm aiming to prove the example at the bottom of the long code snippet. I made the lemmas \"foo\" and \"bar\" to help. My theorem \"bar\" worked to prove the inductive step, but I don't understand the output that Lean gives me when I try to prove this lemma \"bar\" itself. The base case gives me the output:</p>\n<div class=\"codehilite\"><pre><span></span>2 goals\ncase list.nil\nα : Type u_1,\ns : list α,\na : α\n⊢ length (s ++ [a]) = length (s ++ nil) + 1\n</pre></div>\n\n\n<p>Specifically, I am unsure what the [a] here means and how to work with it. Any insights would be appreciated.</p>\n<div class=\"codehilite\"><pre><span></span>section\nopen list\n\nvariable {α : Type*}\nvariables s t : list α\nvariable a : α\n\ntheorem length_nil : length (@nil α) = 0 := rfl\n\ntheorem foo (t : list α) : t ++ nil = t :=\nbegin\ninduction t with a t ih,\n{refl},\nrw [cons_append, ih],\nend\n\ntheorem bar : length (s ++ a :: t) = length (s ++ t) + 1 :=\nbegin\ninduction t with a t ih,\nsorry\nend\n\n#check foo\n#check nil_append\n#check cons_append\n#check length_cons\n#check length_nil\n\n#eval [1, 2, 3] ++ [4, 5]\n#eval length [1, 2, 3, 4, 5]\n\nend\n\n/-\nProve the following.\n-/\n\nsection\nopen list\n\nvariable {α : Type*}\nvariables s t : list α\nvariable a : α\n\nexample : length (s ++ t) = length s + length t :=\nbegin\ninduction t with a t ih,\n{rw [length_nil, foo], refl},\nrw [length_cons, bar, ih], refl,\nend\n\nend\n</pre></div>",
        "id": 158582769,
        "sender_full_name": "Paula Neeley",
        "timestamp": 1550196032
    },
    {
        "content": "<p><code>[a]</code> is the same as <code>a :: nil</code> (it's a special notation)</p>",
        "id": 158583275,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550196745
    },
    {
        "content": "<p>You should consider doing your induction on <code>s</code> instead of <code>t</code>. The reason is that <code>++</code> is defined by recursion on <code>s</code> : <code>x :: xs ++ ys = x :: (xs ++ ys)</code></p>",
        "id": 158583362,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550196851
    },
    {
        "content": "<p>Also: welcome to Zulip Paula!</p>",
        "id": 158583389,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550196905
    },
    {
        "content": "<blockquote>\n<p>You should consider doing your induction on <code>s</code> instead of <code>t</code>. The reason is that <code>++</code> is defined by recursion on <code>s</code> : <code>x :: xs ++ ys = x :: (xs ++ ys)</code></p>\n</blockquote>\n<p>Oh ok, I will try that! Thank you for your help!</p>",
        "id": 158583402,
        "sender_full_name": "Paula Neeley",
        "timestamp": 1550196949
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"kn\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">length_nil</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nil</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">append_nil&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">((</span><span class=\"bp\">::</span><span class=\"o\">)</span><span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">append_nil</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">length_append&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>       <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">length_cons</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_add</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">length_append&#39;</span> <span class=\"n\">tl</span> <span class=\"n\">t</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">length_append_cons</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">length_append&#39;</span><span class=\"o\">,</span> <span class=\"n\">length_append&#39;</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">append_nil&#39;</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nil_append</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">cons_append</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">length_cons</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">length_nil</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">length</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n</pre></div>",
        "id": 158598928,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550219531
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 160868091,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1552651206
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 160868727,
        "sender_full_name": "Tony Wang",
        "timestamp": 1552651876
    },
    {
        "content": "<p>Hello - I was just wondering for the bit where I have <code>rw succ_a_plus_b_equals_a_plus_succ_b</code> below, surely there's a better way to use the definition of <code>add</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">xnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">xnat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">xnat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">xnat</span> <span class=\"bp\">→</span> <span class=\"n\">xnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">succ_a_plus_b_equals_a_plus_succ_b</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">add</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">succ_is_succ_zero_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">xnat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">add</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">Hk</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">succ_a_plus_b_equals_a_plus_succ_b</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">Hk</span>\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160869044,
        "sender_full_name": "Tony Wang",
        "timestamp": 1552652220
    },
    {
        "content": "<p>Nvm I found it: <code>rw ←add</code> seems to work!</p>",
        "id": 160869148,
        "sender_full_name": "Tony Wang",
        "timestamp": 1552652323
    },
    {
        "content": "<p>I have the following code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">digit</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">floor</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">floor</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">b</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">digit_mul_base</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">digit</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">digit</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">digit</span><span class=\"o\">,</span> <span class=\"n\">digit</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span> <span class=\"n\">conv</span>\n  <span class=\"k\">begin</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_pow</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">pow_succ</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)],</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This gives me an error with following tactic state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">floor_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"err\">⌊</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"err\">⌋</span> <span class=\"bp\">-</span> <span class=\"err\">⌊</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"err\">⌋</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</pre></div>\n\n\n<p>I cant seem to find the error, any help would be appreciated</p>",
        "id": 160869187,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1552652374
    },
    {
        "content": "<p>If I unfold a definition with more than one part, is it possible to specify which part I want to unfold?</p>",
        "id": 160869679,
        "sender_full_name": "Tony Wang",
        "timestamp": 1552652820
    },
    {
        "content": "<p>you can use <code>conv</code> to focus on a subterm</p>",
        "id": 160869914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552653025
    },
    {
        "content": "<p>[changed thread title]. <span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> </p>\n<p>One <code>b * b ^ (n + 1)</code> is</p>\n<div class=\"codehilite\"><pre><span></span>    @has_mul.mul.{0} nat (@semigroup.to_has_mul.{0} nat (@monoid.to_semigroup.{0} nat nat.monoid)) b\n    (@has_pow.pow.{0 0} nat nat (@monoid.has_pow.{0} nat nat.monoid) b\n       (@has_add.add.{0} nat nat.has_add n (@has_one.one.{0} nat nat.has_one)))\n</pre></div>\n\n\n<p>and the other is</p>\n<div class=\"codehilite\"><pre><span></span>     (@has_mul.mul.{0} nat nat.has_mul b\n                   (@has_pow.pow.{0 0} nat nat nat.has_pow b\n                      (@has_add.add.{0} nat nat.has_add n (@has_one.one.{0} nat nat.has_one)))))))\n</pre></div>\n\n\n<p>and these are apparently not defeq.</p>",
        "id": 160904675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552677251
    },
    {
        "content": "<p><code>example : @monoid.has_pow.{0} nat nat.monoid = nat.has_pow := rfl -- fails</code></p>\n<p>There's the problem. You have two different powers.</p>",
        "id": 160904926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552677436
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_pow</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">has_pow</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">monoid</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">Hc</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_pow</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Hc</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"c1\">-- *boggle*</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">digit_mul_base</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">digit</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">digit</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">digit</span><span class=\"o\">,</span> <span class=\"n\">digit</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span> <span class=\"n\">conv</span>\n  <span class=\"k\">begin</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_pow</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">test</span><span class=\"o\">,</span> <span class=\"c1\">-- no visible effect ;-)</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">pow_succ</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"c1\">-- works now ;-)</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 160905588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552677863
    },
    {
        "content": "<p>So there's a crappy fix, but actually someone with some sense should hopefully come along at some point and tell us what we should be doing. <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> ?</p>",
        "id": 160905621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552677894
    },
    {
        "content": "<p>There's a lemma <code>nat.pow_eq_pow</code> I think.</p>",
        "id": 160905675,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1552677940
    },
    {
        "content": "<p>Thanks. <span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> rewrite that instead of <code>test</code>.</p>",
        "id": 160905709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552677961
    },
    {
        "content": "<p>It's also a crappy fix</p>",
        "id": 160905766,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1552677978
    },
    {
        "content": "<p>yes but at least we're going in the right direction. Why did it happen? Something to do with the casts no doubt.</p>",
        "id": 160905793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552678005
    },
    {
        "content": "<p>We can add this one to Rob Lewis' list of cast issues ;-)</p>",
        "id": 160905809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552678019
    },
    {
        "content": "<p>The better solution is actually to use <code>nat.pow_succ</code> on closer inspection.</p>",
        "id": 160906309,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1552678342
    },
    {
        "content": "<p>thanks, that worked</p>",
        "id": 160944954,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1552730507
    },
    {
        "content": "<p>Aah bingo</p>",
        "id": 160945015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552730577
    },
    {
        "content": "<p>Nat has its own suite of pow lemmas because nat.pow is in core so we can't redefine it to be monoid.pow</p>",
        "id": 160945040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552730638
    }
]