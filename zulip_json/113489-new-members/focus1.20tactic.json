[
    {
        "content": "<p>What does the <code>focus1</code> tactic do? It is used reasonably often but I cannot find any docs on it</p>",
        "id": 213348587,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602708507
    },
    {
        "content": "<p>the code is not too complicated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">focus1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">g</span><span class=\"o\">::</span><span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"k\">match</span> <span class=\"n\">gs</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">tac</span>\n   <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">],</span>\n      <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">tac</span><span class=\"o\">,</span>\n      <span class=\"n\">gs'</span> <span class=\"bp\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n      <span class=\"n\">set_goals</span> <span class=\"o\">(</span><span class=\"n\">gs'</span> <span class=\"bp\">++</span> <span class=\"n\">gs</span><span class=\"o\">),</span>\n      <span class=\"n\">return</span> <span class=\"n\">a</span>\n   <span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>but I'm still confused. It repeatedly applies a tactic on just the head goal until there is only one goal left, then it applies the tactic one more time, and then it stops with whatever the goal state happens to be? or am I confusing goal state with return value?</p>",
        "id": 213349562,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602708993
    },
    {
        "content": "<p>or am I confused that there's no repeating here. it applies the tactic once while forbidding the tactic to work on any non-head goal?</p>",
        "id": 213349774,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602709098
    },
    {
        "content": "<p><code>focus1</code> is the noninteractive version of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#focus\">focus</a>.</p>",
        "id": 213349903,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602709175
    },
    {
        "content": "<p>It applies <code>tac</code> to the head goal, and then puts any newly generated goals on top of the previous tail.</p>",
        "id": 213349999,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602709213
    },
    {
        "content": "<p>ok. what's the difference between how interactive and noninteractive tactics work, is that just like a suggestion? it doesn't seem like the code is fundamentally different afaict</p>",
        "id": 213350229,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602709348
    },
    {
        "content": "<p>You can only use interactive tactics in <code>begin ... end</code> or <code>by { ... }</code> blocks. Non-interactive tactics are used to implement interactive tactics or do other Lean metaprogramming.</p>",
        "id": 213351028,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602709844
    },
    {
        "content": "<p>See the <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">tactic-writing tutorial</a> if you haven't already.</p>",
        "id": 213351088,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602709890
    },
    {
        "content": "<p>i mean, what makes <code>focus</code> and <code>focus1</code> available in different contexts? I don't see anything that differs in their signatures</p>",
        "id": 213351221,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602709973
    },
    {
        "content": "<p>Well, <code>focus1</code> has return type <code>tactic \\a</code>, and you can only use things that return <code>tactic unit</code> interactively.</p>",
        "id": 213351294,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602710023
    },
    {
        "content": "<p>ah ok that makes sense</p>",
        "id": 213351364,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602710046
    },
    {
        "content": "<p>The namespaces are also different (<code>tactic.focus1</code> vs <code>tactic.interactive.focus</code>), but that's less of a big deal.</p>",
        "id": 213351394,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602710062
    },
    {
        "content": "<p>why is their implementation totally different, is that just a historical artifact? in theory could one just implement <code>focus</code> by dropping the return value of <code>focus1</code>?</p>",
        "id": 213351466,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602710102
    },
    {
        "content": "<p>That seems to me how <code>focus</code> is implemented? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.focus/src\">src#tactic.interactive.focus</a></p>",
        "id": 213351679,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602710232
    },
    {
        "content": "<p>oh. I was looking at the focus function defined here: <a href=\"https://github.com/leanprover-community/lean/blob/cc72964/library/init/meta/tactic.lean#L1154\">https://github.com/leanprover-community/lean/blob/cc72964/library/init/meta/tactic.lean#L1154</a></p>",
        "id": 213351773,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602710284
    },
    {
        "content": "<p>You linked to the definition of <code>tactic.focus1</code>?</p>",
        "id": 213351825,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602710310
    },
    {
        "content": "<p>yeah right above it is a method called <code>focus</code></p>",
        "id": 213351860,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602710330
    },
    {
        "content": "<p>I guess that one is a totally different <code>focus</code> from the regular <code>focus</code>?</p>",
        "id": 213351883,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602710352
    },
    {
        "content": "<p>Yeah, it is. Whoops, didn't know about that one.</p>",
        "id": 213351919,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602710372
    },
    {
        "content": "<p>okay, that explains my confusion. I guess it is a reasonably common pattern within lean to have <code>tactic.foo</code> and <code>tactic.interactive.foo</code> with different behavior</p>",
        "id": 213352421,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602710678
    },
    {
        "content": "<p>perhaps related to the \"weird things\" described in this chunk of the docs: \"Such functions are either called by other tactics---those are typically in the tactic namespace---or called interactively by users inside tactic blocks---those must be in the tactic.interactive namespace (this is not quite necessary for very simple tactics, but weird things will happen in general when ignoring this rule).\"</p>",
        "id": 213352600,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602710787
    },
    {
        "content": "<p>Well the <code>tactic.foo</code> version will be optimized for use by tactic code, while <code>tactic.interactive.foo</code> will be optimized for begin end blocks</p>",
        "id": 213360163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602715920
    },
    {
        "content": "<p>BTW the \"weird things\" are that non-interactive tactics have a different syntax for composition than interactive tactics, so a non-interactive tactic in the middle of an interactive composition will \"pollute\" it and turn everything to non-interactive compositions, meaning that the interactive tactics will be parsed incorrectly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">skip</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span> <span class=\"c1\">-- fine</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">tactic.skip</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span> <span class=\"c1\">-- aah errors everywhere</span>\n</code></pre></div>",
        "id": 213360425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602716093
    },
    {
        "content": "<p>you can use <code>`[...]</code> to force a return to interactive mode</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">tactic.skip</span><span class=\"bp\">;</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">trivial</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"c1\">-- fine</span>\n</code></pre></div>",
        "id": 213360585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602716199
    }
]