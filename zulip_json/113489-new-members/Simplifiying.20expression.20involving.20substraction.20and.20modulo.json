[
    {
        "content": "<p>Hi,<br>\nAfter simplifying some expression, Lean leaves me with the expression <code>m - (m + (m + 1 - ↑k)) % (m + 1)</code> (where <code>m : ℕ</code> and <code>k : fin (m+1)</code>, so <code>↑k  ≤ m</code>. The simplifier fails to simplify further - I guess it's because everything is in <code>ℕ</code>, so we might have problems if we subtracted something larger from something smaller. In this case in know that <code>↑k  ≤ m</code> prevents such problems, but how can I tell this to Lean so that it can performs the simplification by itself in <code>ℤ</code> ?</p>",
        "id": 260190879,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1635970251
    },
    {
        "content": "<p>Can you just case on k as 0 and above 0?</p>",
        "id": 260191782,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635970717
    },
    {
        "content": "<p>How did you get this simplified expression? There is a lot of fin api to help avoid modulus arithmetic hell</p>",
        "id": 260191853,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635970754
    },
    {
        "content": "<p>I'm not sure how cases on k can help, can you elaborate?</p>",
        "id": 260193385,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1635971427
    },
    {
        "content": "<p>One thing that helps with precise suggestions is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.  (<a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#extract_goal\">tactic#extract_goal</a> can help with that.) <em>Edit: spoke too soon, thanks for the code</em> <span aria-label=\"down\" class=\"emoji emoji-2b07\" role=\"img\" title=\"down\">:down:</span></p>",
        "id": 260193865,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635971649
    },
    {
        "content": "<p>Here is my entire code.  I get this expression after simplifying an inequality between the cardinalities of two finsets at line 42.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.order</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.interval</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rev_rev</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fin.coe_sub</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">imo1994</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">A.card</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hrange</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hadd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">order_emb_of_fin</span> <span class=\"n\">A</span> <span class=\"n\">hm</span><span class=\"o\">,</span>  <span class=\"c1\">-- We sort the elements of A</span>\n  <span class=\"n\">set</span> <span class=\"n\">rev</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.sub_left</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"c1\">-- i ↦ m-i</span>\n\n  <span class=\"c1\">-- The key inequality</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpair</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">k</span> <span class=\"bp\">-</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- We exhibit k+1 elements of A greater than a (rev k)</span>\n    <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↪</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">apply</span> <span class=\"n\">injective_of_le_imp_le</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_le_add_iff_right</span><span class=\"o\">,</span> <span class=\"n\">a.map_rel_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n\n    <span class=\"c1\">-- Proof that the f i are greater than a (rev k)</span>\n    <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">univ</span> <span class=\"bp\">⊆</span> <span class=\"n\">map</span> <span class=\"n\">a.to_embedding</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">ineq</span> <span class=\"o\">:=</span> <span class=\"n\">card_le_of_subset</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_sub</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ineq</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"c1\">-- We reindex the sum by fin (m+1)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">sum_image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">order_embedding.eq_iff_eq</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">coe_inj</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- The rest is a simple calculation by rearranging one of the two sums</span>\n  <span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span>       <span class=\"o\">:</span> <span class=\"n\">two_mul</span> <span class=\"n\">_</span>\n                            <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">equiv.sum_comp</span> <span class=\"n\">rev</span><span class=\"o\">}</span>\n                            <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">i</span><span class=\"o\">))</span>                <span class=\"o\">:</span> <span class=\"n\">sum_add_distrib.symm</span>\n                            <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>                            <span class=\"o\">:</span> <span class=\"n\">sum_le_sum</span> <span class=\"n\">hpair</span>\n                            <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>                                     <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">}</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260193869,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1635971653
    },
    {
        "content": "<p>If k is 0, then the deepest nested subtraction is m-1, which cancels to 0 in the mod op, then the addition cancels, then the subtraction cancels, and you get 0. If 0 &lt; k, that is, for some k', k = k'+1, the subtraction cancels to m - k', which allows us to remove the modulus because that is obviously strictly less the m+1. Then you're left with m - (m - k'), and since we know that k' &lt; m, we can reassociate the subtraction, and you're left over with k'. I hope I don't have an off by one error there.</p>",
        "id": 260193956,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635971706
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#zify\">tactic#zify</a> can help sometimes, and you can give it inequalities to help it zify subtraction, if what you're wanting is to actually make everything be in terms of operations in Z.  I don't know how it interacts with modulo, though.</p>",
        "id": 260194217,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635971850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplifiying.20expression.20involving.20substraction.20and.20modulo/near/260193956\">said</a>:</p>\n<blockquote>\n<p>If k is 0, then the deepest nested subtraction is m-1, which cancels to 0 in the mod op, then the addition cancels, then the subtraction cancels, and you get 0. If 0 &lt; k, that is, for some k', k = k'+1, the subtraction cancels to m - k', which allows us to remove the modulus because that is obviously strictly less the m+1. Then you're left with m - (m - k'), and since we know that k' &lt; m, we can reassociate the subtraction, and you're left over with k'. I hope I don't have an off by one error there.</p>\n</blockquote>\n<p>The expression we take the modulus of is <code>m+(m-k')</code>, not <code>m-k'</code> unfortunately, so I don't think it works.</p>",
        "id": 260198263,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1635973946
    },
    {
        "content": "<p>Add <code>import tactic</code> at the top of your file, and then starting at line 42</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_sub</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ineq</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- you have natural subtraction which is horrible.</span>\n    <span class=\"c1\">-- let's get rid of it.</span>\n    <span class=\"n\">cases</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"c1\">-- turn k into a natural</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ineq</span><span class=\"o\">,</span> <span class=\"c1\">-- get k's in ineq</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.lt_succ_iff</span><span class=\"o\">,</span><span class=\"n\">le_iff_exists_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"c1\">-- turn k &lt; m + 1</span>\n    <span class=\"c1\">-- into ∃ (c : ℕ), m = k + c</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hk</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- nuke m completely and replace with k+c</span>\n    <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_tsub_cancel_left</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">foo</span> <span class=\"n\">at</span> <span class=\"n\">ineq</span><span class=\"o\">,</span> <span class=\"c1\">-- one nat subtraction gone!</span>\n    <span class=\"c1\">-- now compute the mod</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">ineq</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.add_mod_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ineq</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">ineq</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- the simplifier can get rid of the remaining nat.sub</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">ineq</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 260209399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635980597
    },
    {
        "content": "<p>nat subtraction is horrible and it's taken me years to work out the tricks to kill it. I would recommend avoiding it completely.</p>",
        "id": 260209480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635980651
    }
]