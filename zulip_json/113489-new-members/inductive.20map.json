[
    {
        "content": "<p>why is the \"inductive map\" construction the most common way to define a map? inductive map is like... the map is represented by a function from KeyType to ValueType, and the set key operation is implemented by function composition</p>",
        "id": 242021008,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623218413
    },
    {
        "content": "<p>why is it implemented by a function and not a list for example</p>",
        "id": 242021027,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623218440
    },
    {
        "content": "<p>of course a tree wouldn't be practical since that would require the key to support total ordering</p>",
        "id": 242021045,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623218466
    },
    {
        "content": "<p>I'm not sure why you call that inductive, or most common</p>",
        "id": 242021048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623218469
    },
    {
        "content": "<p>it's certainly most general</p>",
        "id": 242021055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623218482
    },
    {
        "content": "<p><a href=\"https://github.com/blanchette/logical_verification_2020/blob/master/lean/lovelib.lean#L193\">https://github.com/blanchette/logical_verification_2020/blob/master/lean/lovelib.lean#L193</a></p>",
        "id": 242021074,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623218520
    },
    {
        "content": "<p>this is what I'm referring to</p>",
        "id": 242021113,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623218528
    },
    {
        "content": "<p>I have seen it several times in functional programming books</p>",
        "id": 242021124,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623218542
    },
    {
        "content": "<p>it's convenient because it is easy to reason about</p>",
        "id": 242021125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623218543
    },
    {
        "content": "<p>it's not efficient at all</p>",
        "id": 242021129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623218549
    },
    {
        "content": "<p>it is basically a linear search built with thunks</p>",
        "id": 242021139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623218560
    },
    {
        "content": "<p>The important property you usually need about the lookup function is that it is equivalent to <code>state.update</code></p>",
        "id": 242021180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623218603
    },
    {
        "content": "<p>so making it true by definition makes things easier</p>",
        "id": 242021185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623218613
    },
    {
        "content": "<p>it is possible to prove such a property for lookup functions implemented in a more efficient way, for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/hash_map.mem_insert/src\">src#hash_map.mem_insert</a>, but it is complicated and also comes with restrictions on the key type</p>",
        "id": 242021295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623218715
    }
]