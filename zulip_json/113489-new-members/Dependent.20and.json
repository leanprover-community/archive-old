[
    {
        "content": "<p>How do I say I want two statements P and Q to be true where I am using properties that depend on P in Q, for example, if I was to define something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_abelian_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_group</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">*</span><span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202791527,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1593774025
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_abelian_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">[</span><span class=\"n\">is_group</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">*</span><span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202791687,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593774146
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 202792225,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1593774548
    },
    {
        "content": "<p>I am now having trouble using this, I want to be able to say</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_abelian_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">*</span><span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">abelian_group_is_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_abelian_group</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">is_abelian_group</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">casesI</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hgroup</span> <span class=\"n\">habelian</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>However, I get the error \"induction tactic failed, recursor 'Exists.dcases_on' can only eliminate into Prop\"</p>",
        "id": 202793743,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1593775756
    },
    {
        "content": "<p>did you want <code>is_group</code> instead of <code>group</code>?</p>",
        "id": 202793910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593775888
    },
    {
        "content": "<p><code>group A</code> is not a <code>Prop</code></p>",
        "id": 202793930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593775912
    },
    {
        "content": "<p>I think you have an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem</p>",
        "id": 202794038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593775986
    },
    {
        "content": "<p>What I was trying to do was to define a class on pgames which inducts on itself and also depended on another class, <code>class</code> does not seem to allow for inductive definitions so I was defining in the form <code>pgame → Prop</code> and using well founded recursion</p>",
        "id": 202794497,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1593776354
    },
    {
        "content": "<p>could you show your code?</p>",
        "id": 202794828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593776685
    },
    {
        "content": "<p>(btw <code>abelian_group</code> in mathlib is called <code>comm_group</code>)</p>",
        "id": 202794872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593776725
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">similar_game</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">similar_moves</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">left_moves</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">right_moves</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">moves</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">similar_game</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">left_moves</span>\n<span class=\"n\">def</span> <span class=\"n\">moves_to_left_moves</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">similar_game</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">moves</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">left_moves</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"n\">def</span> <span class=\"n\">moves_to_right_moves</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">similar_game</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">moves</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">right_moves</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">similar_moves</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">id</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">instance</span> <span class=\"n\">moves_to_left_moves_coe</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">similar_game</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">moves</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">left_moves</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"n\">moves_to_left_moves</span> <span class=\"n\">G</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">moves_to_right_moves_coe</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">similar_game</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">moves</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">right_moves</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"n\">moves_to_right_moves</span> <span class=\"n\">G</span> <span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">impartial</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">[</span><span class=\"n\">similar_game</span> <span class=\"n\">G</span><span class=\"o\">],</span>\n            <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">moves</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span>\n                <span class=\"bp\">∃</span> <span class=\"o\">[</span><span class=\"n\">similar_game</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">i</span><span class=\"o\">)],</span> <span class=\"n\">impartial</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">pgame</span><span class=\"bp\">.</span><span class=\"n\">pgame_wf_tac</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 202794999,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1593776823
    },
    {
        "content": "<p><code>class similar_game (G : pgame) : Prop := ...</code></p>",
        "id": 202795182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593776971
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 202795303,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1593777047
    },
    {
        "content": "<p><code>moves</code> has an unnecessary typeclass argument</p>",
        "id": 202795354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593777093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Dependent.20and/near/202795182\">said</a>:</p>\n<blockquote>\n<p><code>class similar_game (G : pgame) : Prop := ...</code></p>\n</blockquote>\n<p>this is very unfortunate. why can't Lean figure out that it's a Prop?</p>",
        "id": 202795367,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593777107
    },
    {
        "content": "<p>It probably could, but it doesn't try</p>",
        "id": 202795428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593777132
    },
    {
        "content": "<p>If you put <code>#lint</code> at the bottom it will tell you about unnecessary arguments</p>",
        "id": 202795492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593777189
    },
    {
        "content": "<p>Isn't this called <code>impartial_game</code> or something?</p>",
        "id": 202795559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593777232
    },
    {
        "content": "<p>Which would be the better convention, <code>similar</code> and <code>impartial</code> or <code>similar_game</code> and <code>impartial_game</code>?</p>",
        "id": 202795719,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1593777342
    },
    {
        "content": "<p>Probably <code>pgame.similar</code></p>",
        "id": 202799332,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593779925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Dependent.20and/near/202795182\">said</a>:</p>\n<blockquote>\n<p><code>class similar_game (G : pgame) : Prop := ...</code></p>\n</blockquote>\n<p>Whats the relevance of making <code>similar_game</code> a <code>Prop</code>?</p>",
        "id": 202806304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593784742
    },
    {
        "content": "<p>I think its because <code>\"induction tactic failed, recursor 'Exists.dcases_on' can only eliminate into Prop\"</code> wants a Prop. And Lean chooses not to infer a \"Prop class\" for (maybe) performance reason.</p>",
        "id": 202807826,
        "sender_full_name": "Utensil Song",
        "timestamp": 1593785663
    }
]