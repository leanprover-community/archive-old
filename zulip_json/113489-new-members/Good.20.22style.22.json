[
    {
        "content": "<p>So I'm making a small group theory project from scratch (taking some pointers from mathlib when needed), and I have been wondering about what constitutes good style when it comes to writing definitions and lemmas. I often see people saying things in the chat like \"this needs a better API\" , which I assume means giving more definitions and lemmas so that proofs can be shorter. </p>\n<p>Basically, my question is, how should I think about whether or not I'm building enough of an API? (This project is just for fun, I'm not planning on making any PRs based on it or anything)  </p>\n<p>Is there some sort of precept like \"you should never need to do more than X rewrites\" or \"most of your proofs should be in term mode\" that can guide me ?</p>",
        "id": 220927407,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1608913788
    },
    {
        "content": "<p>And merry Christmas everyone :)</p>",
        "id": 220927524,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1608913947
    },
    {
        "content": "<p>there is no restriction on how hard the API theorems should be</p>",
        "id": 220927525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608913951
    },
    {
        "content": "<p>but they are usually one-liners</p>",
        "id": 220927534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608913983
    },
    {
        "content": "<p>the usual principle I use is to make sure that I have theorems that relate the new thing to all the old things</p>",
        "id": 220927563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608914031
    },
    {
        "content": "<p>generally it's only about adding more lemmas to work with the definitions, not adding more definitions (which are the reason for the lemmas)</p>",
        "id": 220927683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608914166
    },
    {
        "content": "<p>Right. My approach to proving nontrivial theorems has basically been</p>\n<ol>\n<li>Write a proof in tactic mode because it's easy  </li>\n<li>Refactor the tactic script into a series of <code>have</code>/<code>obtain</code>'s that are basically just function applications</li>\n<li>Figure out which of those might be useful to have their own lemmas </li>\n</ol>\n<p>This usually lets me turn most 10-20 line tactic proofs into one or two lines, but I'd be interested in hearing what other people use as their guiding principles</p>",
        "id": 220927752,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1608914305
    },
    {
        "content": "<p>I don't know how useful this is, but I try to prove <em>every</em> obvious lemma about the new thing. I just keep going until I can't think of anything off hand</p>",
        "id": 220927756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608914317
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 220927784,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1608914400
    },
    {
        "content": "<p>That \"proof compression\" a useful skill of it's own, but you should be careful that the lemmas you extract from a theorem are suitably general</p>",
        "id": 220927846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608914464
    },
    {
        "content": "<p>I usually like to go in the reverse order--write the proof of a \"real theorem\" the way I want it to go but split out the steps as lemmas, and don't even prove the lemmas until I'm done with the main theorem</p>",
        "id": 220928208,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608915138
    },
    {
        "content": "<p>of course you have to be 100% sure the lemmas are actually true then</p>",
        "id": 220928211,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608915149
    },
    {
        "content": "<p>Sometimes you can even defer actually defining your definitions until after you see how they get used in practice.</p>",
        "id": 220928229,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608915206
    },
    {
        "content": "<p>It's interesting that a couple of times I've seen it, it seems that folks do mean \"good API\" in a very programming-like sense -- i.e. layered theorems/definitions, encapsulation of some layers of abstraction such that you don't have to touch implementation details of layers below them, composability so that you can assemble new theorems by reusing theorems \"one level down\" in abstraction without either needing to reimplement chunks of them...</p>",
        "id": 220930550,
        "sender_full_name": "Julian Berman",
        "timestamp": 1608919636
    },
    {
        "content": "<p>When I made a basic API for group theory in some sense the biggest design decision I felt I made was what the definition of a group should be. I went with just three axioms (associativity, left identity and left inverse) and then it's hard work proving right identity and right inverse, then the trick is to prove the Knuth-Bendix rewrite rules for groups and then check by doing various examples that <code>simp</code> solves the word problem for free groups.</p>",
        "id": 220942704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608943091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span> I will be covering this material in lecture two of my course next term -- and subgroups too</p>",
        "id": 220942710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608943132
    }
]