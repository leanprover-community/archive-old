[
    {
        "content": "<p>I'm very confused by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.nontriviality\">docs#tactic.interactive.nontriviality</a>. One of the examples it gives is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nontriviality</span><span class=\"o\">,</span> <span class=\"c1\">-- There is now a `nontrivial R` hypothesis available.</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But we can easily give <code>unit</code> a <code>comm_ring</code> structure (see below), so why are we allowed to have this assumption? If I change the goal to anything else (e.g. <code>nontrivial R</code>) and then use <code>nontriviality R</code>, it complains that it can't discount <code>subsingleton R</code> (which is very sensible!), and if I try <code>show_term</code> it gives me a term that I cannot get to work. Meanwhile, if I change it just to <code>[comm_ring unit] {r s : unit}</code>, we have a term in the proof state of <code>nontrivial unit</code>, which seems like a contradiction; but I don't know where.  What is going on?!</p>\n<p>All code below the fold:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">unit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unit_comm_ring</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"o\">},</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"o\">},</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n  <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n  <span class=\"n\">sub_eq_add_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"o\">},</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"o\">},</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"o\">},</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"o\">},</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"o\">},</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"o\">},</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"o\">},</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"o\">},</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">this_isnt_ok</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">unit</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">nontriviality</span><span class=\"o\">},</span> <span class=\"c1\">-- There is now a `nontrivial R` hypothesis available.</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">what</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">this_isnt_ok</span> <span class=\"n\">unit_comm_ring</span> <span class=\"n\">star</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"c1\">-- the suggestion from `show_term`:</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Try this: refine (subsingleton_or_nontrivial unit).dcases_on</span>\n<span class=\"cm\">  (λ (_inst : subsingleton unit), (id (propext (eq_iff_true_of_subsingleton (r * s) (s * r)))).mpr trivial)</span>\n<span class=\"cm\">  (λ (_inst : nontrivial unit),</span>\n<span class=\"cm\">     _[subsingleton_or_nontrivial unit, subsingleton_or_nontrivial unit, subsingleton_or_nontrivial unit, _inst]) -/</span>\n</code></pre></div>\n</div></div>",
        "id": 232898953,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617370419
    },
    {
        "content": "<p>The tactic is doing its job in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nontriviality</span><span class=\"o\">,</span> <span class=\"c1\">-- There is now a `nontrivial R` hypothesis available.</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It does a case disjunction: either the ring is trivial and then <code>r*s</code> and <code>s*r</code> are the same because the ring has only one element, or it is not trivial and you get to finish the proof using this nontriviality extra assumption.</p>",
        "id": 232899399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617370697
    },
    {
        "content": "<p>riight so the tactic also solves the goal itself in the case of <code>subsingleton R</code>! that makes a lot of sense, thanks</p>",
        "id": 232899485,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617370764
    },
    {
        "content": "<p>That's the whole point of this tactic.</p>",
        "id": 232899594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617370807
    },
    {
        "content": "<p>I'm exaggerating a bit, it also tries to infer nontrivility from context</p>",
        "id": 232899670,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617370847
    },
    {
        "content": "<p>I only understood it as inferring nontriviality from context; the previous example was that <code>0 &lt; a</code> and so that instantly gives you <code>nontrivial R</code>. This is a lot cleverer</p>",
        "id": 232899788,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617370916
    },
    {
        "content": "<p>The last paragraph in the docstring before the examples describes the behavior here:</p>\n<blockquote>\n<p>Otherwise, it will perform a case split on <code>subsingleton α ∨ nontrivial α</code>, and attempt to discharge the <code>subsingleton</code> goal using ...</p>\n</blockquote>",
        "id": 232899955,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617371004
    }
]