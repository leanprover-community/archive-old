[
    {
        "content": "<p>I hope it's okay that I start a new topic, even though I'm working with the same structure. I'm hoping someone might be able to suggest a possible strategy and that I haven't set myself up for failure.</p>\n<p>So I've got my base structure, one of which's fields is evidence that  a predicate on executions holds for every execution in the structure.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">LTS_Claim</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">LTS</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">execution</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n<span class=\"bp\">...</span>\n<span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">execution</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span>                 <span class=\"c1\">-- C is for Claim</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>I've also built a function which takes an LTS_Claim and turns it into an indexed family of LTS_Claims partitioned according to the pre-images of some evaluation function. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">domain_decomp</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">CM</span> <span class=\"o\">:</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">X</span><span class=\"err\">ᵢ</span> <span class=\"o\">:=</span> <span class=\"n\">preimages</span> <span class=\"n\">CM</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">HX</span><span class=\"err\">ᵢ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">execution</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">preimages</span> <span class=\"n\">CM</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n<span class=\"k\">have</span> <span class=\"n\">C</span><span class=\"err\">ᵢ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"err\">ᵢ</span><span class=\"o\">,</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">exact</span> <span class=\"n\">LTS_Claim</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">M</span> <span class=\"n\">X</span><span class=\"err\">ᵢ</span> <span class=\"n\">E</span><span class=\"err\">ᵢ</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">P</span> <span class=\"n\">C</span><span class=\"err\">ᵢ</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">D</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">sets_D</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">subs_D</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I want to try to express a relation between and LTS_Claim and an indexed family of LTS_Claims which says that the conjunction of every claim C in the indexed family implies the original structure's claim.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Original_CM</span> <span class=\"o\">:</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CMs</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">Original_CM</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- (CM₀.C ∧ CM₂.C ∧ ... ∧ CMₙ.C) → Orgininal_CM.C</span>\n</code></pre></div>\n\n\n<p>I've tried a variety of ways of extracting the \"C\" fields from the indexed family of claims, but I'm worried that I may have painted myself into a corner by defining C as a term of type (∀ x ∈ X, P x) rather than a term of type Prop.  Should I be able to find a way to accomplish this?</p>",
        "id": 204464652,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595273015
    },
    {
        "content": "<p><code>\\forall x \\in X, P x</code> is a proposition too</p>",
        "id": 204465425,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1595273398
    },
    {
        "content": "<p>Right, and so one of my ideas was to do something like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">claim_set</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Original_CM</span> <span class=\"o\">:</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CMs</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">Original_CM</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">Original_CM</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">CMs</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">C</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>but lean complains that (CMs i).C is not of type Prop</p>",
        "id": 204466697,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595274059
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 204471218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595276522
    },
    {
        "content": "<p>What does it think the type is? It might be asking for some random other inputs. Lean is pretty good at telling you the types of things.</p>",
        "id": 204471456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595276634
    },
    {
        "content": "<p>It reads the type as  : ∀ (x : execution M), x ∈ (CMs i).X → (CMs i).P x : Prop . Does this mean I am supposed to provide more arguments?</p>",
        "id": 204471747,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595276781
    },
    {
        "content": "<p>I don't really understand your question. Are you saying \"I want something to have type <code>Prop</code> but it has type <code>∀ (x : execution M), x ∈ (CMs i).X → (CMs i).P x</code>?</p>",
        "id": 204472219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595277017
    },
    {
        "content": "<p>Why don't you post some complete working code?</p>",
        "id": 204472242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595277032
    },
    {
        "content": "<p>I guess the core problem is that I'm struggling with taking an indexed family of structures with fields (C : ∀ x ∈ X, P x), and writing a function which can express the conjunction of the individual C fields. Here's the whole file I'm working with.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Basic Transition System,</span>\n<span class=\"kn\">structure</span> <span class=\"n\">LTS</span>  <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TransRel</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">execution</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">init</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">execution</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span>  <span class=\"o\">:</span>  <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">execution</span> <span class=\"bp\">→</span> <span class=\"n\">execution</span>\n<span class=\"kn\">open</span> <span class=\"n\">execution</span>\n<span class=\"kn\">notation</span> <span class=\"n\">e</span> <span class=\"err\">∘</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span> <span class=\"n\">p</span> <span class=\"n\">e</span>\n\n<span class=\"c1\">-- Given a finite execution in an LTS M, extract its current (latest) state</span>\n<span class=\"n\">def</span> <span class=\"n\">cur_st</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">},</span> <span class=\"n\">execution</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">M</span> <span class=\"n\">eM</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">eM</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"n\">eM&#39;</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n   <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"n\">x</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Predicate on executions that they are valid</span>\n<span class=\"cm\">with respect to the transition relation of the</span>\n<span class=\"cm\">corresponding LTS</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">valid</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">execution</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">p</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">cur_st</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">TransRel</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">valid</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\"> An LTS_Claim consists of an LTS with :</span>\n<span class=\"cm\">- A set X of executions of the LTS about which the claim is made</span>\n<span class=\"cm\">- Evidence E that all executions in the above set are valid in M</span>\n<span class=\"cm\">- Some predicate P of executions in M</span>\n<span class=\"cm\">- A claim C that the above is predicated of all executions in X</span>\n<span class=\"cm\">- some valuation function f from executions of M to values of α</span>\n<span class=\"cm\">- set D of values with the type α,</span>\n<span class=\"cm\">- set of sets of type α ;</span>\n<span class=\"cm\">- Evidence that elements the above set are universally subsets of D</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kn\">structure</span> <span class=\"n\">LTS_Claim</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">LTS</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">execution</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">execution</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">execution</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sets_D</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">subs_D</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">sets_D</span> <span class=\"n\">i</span> <span class=\"err\">⊆</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Given an LTS_Claim for an LTS M, [preimages] returns an indexed family of sets of</span>\n<span class=\"cm\">executions of Xs = {X₁, X₂, ... Xₙ} where  Xᵢ = {x | f(x) ∈ Dᵢ}</span>\n<span class=\"cm\">or at least, that&#39;s what I&#39;m trying to accomplish.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">preimages</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">CM</span> <span class=\"o\">:</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">execution</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">sets_D</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">helper</span>  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">CM</span> <span class=\"o\">:</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">execution</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">preimages</span> <span class=\"n\">CM</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Turns and LTS claim into an indexed family of LTS claims</span>\n<span class=\"cm\">according to how the evaluation function f partitions the</span>\n<span class=\"cm\">original set X.</span>\n<span class=\"cm\">CM read as &quot;claim for system M&quot;</span>\n<span class=\"cm\">(definitely not the most concise proof)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">domain_decomp</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">CM</span> <span class=\"o\">:</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">X</span><span class=\"err\">ᵢ</span> <span class=\"o\">:=</span> <span class=\"n\">preimages</span> <span class=\"n\">CM</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">HX</span><span class=\"err\">ᵢ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">execution</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">preimages</span> <span class=\"n\">CM</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">E</span><span class=\"err\">ᵢ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"err\">ᵢ</span><span class=\"o\">,</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n   <span class=\"k\">begin</span>\n   <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n   <span class=\"n\">intro</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n   <span class=\"n\">apply</span> <span class=\"n\">H₀</span><span class=\"o\">,</span>\n   <span class=\"n\">apply</span> <span class=\"n\">helper</span> <span class=\"n\">CM</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n   <span class=\"n\">apply</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n   <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">C</span><span class=\"err\">ᵢ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"err\">ᵢ</span><span class=\"o\">,</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n   <span class=\"k\">begin</span>\n   <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n   <span class=\"n\">intro</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n   <span class=\"k\">have</span> <span class=\"n\">CMC</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">C</span><span class=\"o\">,</span>\n   <span class=\"n\">apply</span> <span class=\"n\">CMC</span><span class=\"o\">,</span>\n   <span class=\"n\">apply</span> <span class=\"n\">helper</span> <span class=\"n\">CM</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n   <span class=\"n\">apply</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n   <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">LTS_Claim</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">M</span> <span class=\"n\">X</span><span class=\"err\">ᵢ</span> <span class=\"n\">E</span><span class=\"err\">ᵢ</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">P</span> <span class=\"n\">C</span><span class=\"err\">ᵢ</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">D</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">sets_D</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">subs_D</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">   The actual idea I&#39;m trying to formalize now:</span>\n<span class=\"cm\">   Given an LTS_Claim &quot;CM&quot; and an indexed family of LTS_Claims [CM₁, CM₂, ... CMₙ],</span>\n<span class=\"cm\">   the two are said to be in a  special relation if</span>\n<span class=\"cm\">   CM₁.C ∧ CM₂.C ∧ ... ∧ CMₙ.C → CM.C</span>\n<span class=\"cm\">   I.e. the evidence that the property P holds for the sets X_i</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">One strategy:</span>\n\n<span class=\"cm\">Given a family of LTS_Claims, take the set of their &quot;C&quot; fields</span>\n<span class=\"cm\">The idea is that if I can form this set, I can (maybe) take their conjunction.</span>\n\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">set_claims</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">original</span> <span class=\"o\">:</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">subclaims</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">original</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 204495080,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595286149
    },
    {
        "content": "<p>But I  feel like I'm stuck between considering the \"C\" fields as evidence or as propositions, and so I need to clarify that distinction before I will be able to find a solution. Again, sorry for the messy code and confusing questions.</p>",
        "id": 204495592,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595286618
    },
    {
        "content": "<p>And what is the question?</p>",
        "id": 204495650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595286682
    },
    {
        "content": "<p>Given an indexed family of structures, each of whom has a field C proving a proposition, how can you form the set of those fields?</p>",
        "id": 204495818,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595286849
    },
    {
        "content": "<p>And why do you want to make such a set?</p>",
        "id": 204495831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595286866
    },
    {
        "content": "<p>Lean doesn't have sets, it only has subsets of types</p>",
        "id": 204495837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595286877
    },
    {
        "content": "<p>right. I think I need to re-evaluate what exactly I'm trying to show. Thanks for the patience</p>",
        "id": 204495981,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595287027
    },
    {
        "content": "<p><code>CM₁.C ∧ CM₂.C</code> doesn't make sense.</p>",
        "id": 204496076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595287099
    },
    {
        "content": "<p>If <code>P : Prop</code> and <code>Q : Prop</code> then <code>P ∧ Q</code> makes sense.</p>",
        "id": 204496098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595287128
    },
    {
        "content": "<p>If <code>h : P</code> and <code>j : Q</code> then <code>h ∧ j</code> doesn't make sense.</p>",
        "id": 204496120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595287150
    },
    {
        "content": "<p>Yeah that's part of the problem. I want to take the conjunct of the propositions which are the types of CM1.C and CM2.C. So maybe I need to redefine the fields as arbitrary Prop's</p>",
        "id": 204496124,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595287152
    },
    {
        "content": "<p>exactly right</p>",
        "id": 204496135,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595287166
    },
    {
        "content": "<p>So you know the type of <code>a.C</code>, it's <code>∀ x ∈ a.X, a.P x</code></p>",
        "id": 204496285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595287298
    },
    {
        "content": "<p>and <code>∀ x ∈ a.X, a.P x : Prop</code></p>",
        "id": 204496297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595287318
    },
    {
        "content": "<p>You only need to define <code>a.X</code> and <code>a.P</code> to define this type. There's no point defining <code>a.C</code> to equal <code>∀ x ∈ a.X, a.P x</code>, you already have a name for that and it's <code>∀ x ∈ a.X, a.P x</code></p>",
        "id": 204496426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595287414
    },
    {
        "content": "<p>The question is whether to construct <code>a : LTS_Claim M alpha</code> you want to be demanding a <em>proof</em> of <code>∀ x ∈ a.X, a.P x</code> or not.</p>",
        "id": 204496510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595287468
    },
    {
        "content": "<p>I would suggest adjusting language to not refer to proofs by name</p>",
        "id": 204496532,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595287493
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code> An LTS_Claim consists of an LTS with :\n- A set X of executions of the LTS about which the claim is made\n- which are valid in M\n- Some predicate P of executions in M\n- that holds on all executions in X\n- some valuation function f from executions of M to values of α\n- set D of values with the type α,\n- set of sets of type α ;\n- which are subsets of D\n</code></pre></div>",
        "id": 204496581,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595287539
    },
    {
        "content": "<p>Yeah that's a good point. I guess can always just define predicates on the claims which are the atcual propositions I want to reason about.</p>",
        "id": 204496687,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595287637
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 204496763,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595287687
    },
    {
        "content": "<p>also, I don't have a good sense of what you are trying to do, but it seems like your \"claims\" are more like theorems, because you require proofs, and this is why you are having a hard time writing something that makes sense</p>",
        "id": 204497611,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595288425
    },
    {
        "content": "<p>I mean there are a lot of moving parts whose purpose I don't know</p>",
        "id": 204497644,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595288462
    },
    {
        "content": "<p>but certainly given a bunch of propositions <code>P1</code>, <code>P2</code>, ..., <code>Pn</code>, <code>P</code> we can form the proposition <code>P1 /\\ P2 /\\ ... /\\ Pn -&gt; P</code></p>",
        "id": 204497672,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595288485
    },
    {
        "content": "<p>but if we also already have proofs of all the propositions then it's not a very interesting thing to do</p>",
        "id": 204497682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595288502
    },
    {
        "content": "<p>since all the propositions are just equal to <code>true</code> anyways</p>",
        "id": 204497691,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595288512
    },
    {
        "content": "<p>A Proposition is a true/false statement, for example <code>2+2=4</code> or <code>2+2=5</code>. Propositions have type <code>Prop</code>. If <code>P</code> is a proposition then you can think of it as a type with one term if it's true, and with 0 terms if it's false. If <code>h : P</code> then <code>h</code> can be thought of as a proof of <code>P</code>. For example it's possible to make a term of type <code>2 + 2 = 4</code> in Lean, but it's not possible to make a term of type <code>2 + 2 = 5</code>.</p>",
        "id": 204497763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595288574
    },
    {
        "content": "<p>Things like <code>2+2=4 \\or 2+2=5</code> and <code>2+2=4 \\and 2+2=5</code> make sense, and are also Propositions.</p>",
        "id": 204497861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595288669
    },
    {
        "content": "<p>Thanks for the thorough explanation guys. I'm actually just trying to strong-arm a colleague's paper about decomposing Safety Cases/Goal Structuring Notation into Lean <em>post hoc,</em> which is part of why it seems awkward (I'm also just still pretty green with Dep. TT). I'm still really enjoying working with Lean in spite of the learning curve though :)</p>",
        "id": 204502185,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595292491
    }
]