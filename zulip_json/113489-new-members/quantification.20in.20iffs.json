[
    {
        "content": "<p>A question on how to write implications. I have the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.buffer.parser.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">parser</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">parse_result</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">cb</span> <span class=\"o\">:</span> <span class=\"n\">char_buffer</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n'</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a'</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">char</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">buffer.size</span> <span class=\"n\">cb</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">hn</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">any_char_eq_done</span> <span class=\"o\">:</span> <span class=\"n\">any_char</span> <span class=\"n\">cb</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">done</span> <span class=\"n\">n'</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">n'</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">cb.read</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">any_char</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">parser</span>\n</code></pre></div>",
        "id": 225248103,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612486944
    },
    {
        "content": "<p>How can I rephrase it to put the <code>hn : n &lt; buffer.size cb</code> on the right side of the <code>\\iff</code>?  I only need it to construct the <code>cb.read ⟨n, hn⟩</code>. Is that even possible?</p>",
        "id": 225248145,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612486980
    },
    {
        "content": "<p>These proofs would suggest that, yes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">any_char_eq_done_imp_lt</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">any_char</span> <span class=\"n\">cb</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">done</span> <span class=\"n\">n'</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">cb.size</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">any_char</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">any_char_eq_done_imp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">any_char</span> <span class=\"n\">cb</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">done</span> <span class=\"n\">n'</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span> <span class=\"bp\">∧</span> <span class=\"n\">cb.read</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">any_char_eq_done_imp_lt</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">any_char</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">imp_any_char_eq_done</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">cb.size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cb.read</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hle</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">any_char</span> <span class=\"n\">cb</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">done</span> <span class=\"n\">n'</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">any_char</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">hle</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 225248182,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612487003
    },
    {
        "content": "<p>Since the LHS implies the constraint for the RHS</p>",
        "id": 225248191,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612487015
    },
    {
        "content": "<p>You could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">any_char</span> <span class=\"n\">cb</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">done</span> <span class=\"n\">n'</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">buffer.size</span> <span class=\"n\">cb</span><span class=\"o\">),</span> <span class=\"n\">n'</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">cb.read</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 225248513,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612487314
    }
]