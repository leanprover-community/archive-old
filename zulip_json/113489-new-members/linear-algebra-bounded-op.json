[
    {
        "content": "<p>I am trying to formalise that given <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> is a bounded operator in a Hilbert space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">H</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{H}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.00965em;\">H</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">T=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><mi>ψ</mi><mo separator=\"true\">,</mo><mi>T</mi><mi>ψ</mi><mo stretchy=\"false\">⟩</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\langle\\psi,T\\psi\\rangle=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ψ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ψ</span><span class=\"mclose\">⟩</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ψ</mi></mrow><annotation encoding=\"application/x-tex\">\\psi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ψ</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><mi>ψ</mi><mi mathvariant=\"normal\">∥</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\|\\psi\\|=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ψ</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.<br>\nHere is what I have got so far,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">easy_lemma</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥=</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n <span class=\"bp\">λ</span> <span class=\"n\">ψ</span> <span class=\"n\">hψ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inner_self_eq_norm_sq_to_K</span><span class=\"o\">,</span> <span class=\"n\">hψ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bounded_op_eq_one_if_norm_is_one</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥=</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I am not sure where to go from here. Any help would be appreciated :)</p>",
        "id": 283240143,
        "sender_full_name": "Monica Omar",
        "timestamp": 1653236839
    },
    {
        "content": "<p>What's the mathematical proof? Do you know already?</p>",
        "id": 283240354,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653237184
    },
    {
        "content": "<p>Yeah, you use the polarisation identity to first show <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> is self-adjoint. Then you take the orthonormal basis to show <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> is the identity.</p>",
        "id": 283240589,
        "sender_full_name": "Monica Omar",
        "timestamp": 1653237594
    },
    {
        "content": "<p>First, note that your statement only assumes that there's a particular psi that had that property, not that all psi have that property</p>",
        "id": 283244939,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653243702
    },
    {
        "content": "<p>Some versions of the polarization identity are here: <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/inner_product_space/basic.html#re_inner_eq_norm_add_mul_self_sub_norm_mul_self_sub_norm_mul_self_div_two\">https://leanprover-community.github.io/mathlib_docs/analysis/inner_product_space/basic.html#re_inner_eq_norm_add_mul_self_sub_norm_mul_self_sub_norm_mul_self_div_two</a></p>",
        "id": 283245014,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653243830
    },
    {
        "content": "<p>Here's what I got so far. Not sure if this is the right direction or not, though. Any advice? <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span> <span class=\"n\">analysis.complex.basic</span> <span class=\"n\">analysis.normed_space.bounded_linear_maps</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bounded_op_eq_one_if_norm_is_one</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥=</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">ψ</span> <span class=\"o\">:=</span>\n <span class=\"kd\">begin</span>\n   <span class=\"k\">have</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥^</span><span class=\"mi\">2</span>  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n   <span class=\"k\">have</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inner_self_eq_norm_sq_to_K</span> <span class=\"n\">ψ</span><span class=\"o\">],</span><span class=\"n\">finish</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n   <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">-</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">],</span>\n   <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">inner_sub_right</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n   <span class=\"k\">have</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">ψ</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">norm_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span><span class=\"n\">contradiction</span><span class=\"o\">,</span>\n   <span class=\"k\">have</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"n\">ψ</span> <span class=\"bp\">-</span> <span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">T</span> <span class=\"n\">ψ</span> <span class=\"bp\">-</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inner_sub_right</span><span class=\"o\">,</span> <span class=\"n\">inner_sub_left</span><span class=\"o\">,</span> <span class=\"n\">inner_sub_left</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">inner_conj_sym</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n                       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">-</span> <span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">inner_conj_sym</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n                       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">T</span> <span class=\"n\">ψ</span> <span class=\"bp\">-</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">inner_sub_right</span>\n                       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">ψ</span> <span class=\"bp\">-</span> <span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n                       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inner_self_eq_zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"n\">ψ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">sub_eq_zero.mp</span><span class=\"o\">,</span><span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span><span class=\"n\">assumption</span><span class=\"o\">,</span>\n <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 283993696,
        "sender_full_name": "Monica Omar",
        "timestamp": 1653563027
    },
    {
        "content": "<p>Your statement is still wrong. Consider a shear in a direction orthogonal to <code>psi</code>. The correct statement is by quantifying over all <code>psi</code> both in the hypothesis and the conclusion.</p>",
        "id": 283994774,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653563983
    },
    {
        "content": "<p>Regarding your <code>sorry</code>, what I just said is precisely what makes it wrong.</p>",
        "id": 283994775,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653563983
    },
    {
        "content": "<p>Would the statement just be this then?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">lemma</span> <span class=\"n\">bounded_op_eq_one_if_norm_is_one</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥=</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 283995280,
        "sender_full_name": "Monica Omar",
        "timestamp": 1653564426
    },
    {
        "content": "<p>Yeah, this could be a better start:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bounded_op_eq_one_if_norm_is_one</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_map.one_apply</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space.is_self_adjoint</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 283995513,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653564619
    },
    {
        "content": "<p>How do you go about proving that?</p>",
        "id": 283996249,
        "sender_full_name": "Monica Omar",
        "timestamp": 1653565271
    },
    {
        "content": "<p>I don't know, that's what you said the proof was :)</p>",
        "id": 283996494,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653565533
    },
    {
        "content": "<p>I managed a proof starting with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">inner_map_self_eq_zero</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>but perhaps that's cheating</p>",
        "id": 284000243,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653568469
    },
    {
        "content": "<p>Oh, yeah. That does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bounded_op_eq_one_if_norm_is_one</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span><span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥=</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n <span class=\"kd\">begin</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">inner_map_self_eq_zero</span><span class=\"o\">],</span>\n   <span class=\"n\">intro</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n   <span class=\"k\">have</span> <span class=\"n\">t12</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inner_self_eq_norm_sq_to_K</span><span class=\"o\">]</span>\n             <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">ψ</span><span class=\"o\">],</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inner_sub_left</span><span class=\"o\">],</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">inner_conj_sym</span><span class=\"o\">,</span><span class=\"n\">h'</span> <span class=\"n\">ψ</span><span class=\"o\">,</span><span class=\"n\">t12</span><span class=\"o\">],</span>\n   <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284002981,
        "sender_full_name": "Monica Omar",
        "timestamp": 1653570229
    },
    {
        "content": "<p>Nice!</p>",
        "id": 284011519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653574677
    },
    {
        "content": "<p>Wait -- does this say \"assume the false statement that everything in H has norm 1\" though? I have not used this stuff before but it might be good to get the statement straight. I think Ruben's version looks ok but I am a bit suspicious of Monica's.</p>",
        "id": 284011772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653574796
    },
    {
        "content": "<p>Oh, that explains why your version is quite a bit shorter than mine :)</p>",
        "id": 284013207,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653575520
    },
    {
        "content": "<p>Oh, wait. Yeah, I was using my old statement.</p>",
        "id": 284027942,
        "sender_full_name": "Monica Omar",
        "timestamp": 1653582449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/linear-algebra-bounded-op/near/284013207\">said</a>:</p>\n<blockquote>\n<p>Oh, that explains why your version is quite a bit shorter than mine :)</p>\n</blockquote>\n<p>How did you go about proving it with your statement, then?</p>",
        "id": 284027975,
        "sender_full_name": "Monica Omar",
        "timestamp": 1653582467
    },
    {
        "content": "<p>This is the structure I ended up with - you might try to finish it from here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bounded_op_eq_one_if_norm_is_one</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">inner_map_self_eq_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hψ</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">ψ</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">φ</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284047509,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653591993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> I tried with your structure, but I'm stuck here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bounded_op_eq_one_if_norm_is_one</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">ψ</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">⟪</span><span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">ψ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">inner_map_self_eq_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hψ</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">ψ</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">φ</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">use</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">finish</span><span class=\"o\">⟩,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n     <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inner_smul_right</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">conj</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">⟪</span><span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">φ</span><span class=\"o\">,</span><span class=\"n\">φ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"n\">conj</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">inner_smul_left</span> <span class=\"n\">at</span> <span class=\"n\">t2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"bp\">⟪↑</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">φ</span><span class=\"o\">,</span><span class=\"n\">φ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">φ</span><span class=\"o\">),</span><span class=\"n\">φ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">t3</span><span class=\"o\">,</span><span class=\"n\">t2</span><span class=\"o\">],</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n     <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inner_sub_left</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inner_self_eq_norm_sq_to_K</span><span class=\"o\">,</span> <span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">inner_conj_sym</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">φ</span> <span class=\"n\">hφ</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284238460,
        "sender_full_name": "Monica Omar",
        "timestamp": 1653757648
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"bp\">⟪↑</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">φ</span><span class=\"o\">,</span><span class=\"n\">φ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">φ</span><span class=\"o\">),</span><span class=\"n\">φ</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">linear_map.map_smul</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 284241475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653761547
    },
    {
        "content": "<p>The only reason the terms on either side of the <code>=</code> are different is that you are taking a scalar multiplication (<code>smul</code>)  out of an application (<code>map</code>) of a linear map. Now you can guess the name of the lemma which gets you home.</p>",
        "id": 284241499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653761605
    }
]