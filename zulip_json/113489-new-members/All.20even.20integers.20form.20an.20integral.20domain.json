[
    {
        "content": "<p>Am I setting this up right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ℤ_even</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_submonoid</span> <span class=\"n\">ℤ_even</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_add_submonoid</span> <span class=\"n\">ℤ_even</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_add_subgroup</span> <span class=\"n\">ℤ_even</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"n\">ℤ_even</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">ℤ_even</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">subring.domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span> <span class=\"n\">ℤ_even</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 220901300,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608863818
    },
    {
        "content": "<p>Your first sorry is false</p>",
        "id": 220901361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608863999
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> .  It's false in a literal sense that there is no element labelled \"1\" in the set:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">one_mem</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>On the other hand, I know we have 0 because 2 divides 0.  I feel like I should have to prove that there is no unit in <code>ℤ_even</code> by looking at what it means to be a unit.  The unit axioms are </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I feel like I should be proving this theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ℤ_even_is_not_an_integral_monoid</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">ℤ_even</span><span class=\"o\">),</span>    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">ℤ_even</span><span class=\"o\">),</span>\n           <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span>  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>How do I know that, just because there is no element labelled <code>1</code> in <code>ℤ_even</code>, that the above theorem holds?</p>",
        "id": 220908394,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608878991
    },
    {
        "content": "<p>That just like like a level in the natural number game to me, the tools introduced there should do it</p>",
        "id": 220917910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608895982
    },
    {
        "content": "<p>The question is about subsets of the reals.  If I knew that 0 and 1 were unique in the reals, and the construction lost 0 or 1, then I guess I don't need to prove the non-existence of 0 or 1 in the subset, just observe that the unique 0 or 1 is gone.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ℝ_0_is_unique</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n      <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ℝ_1_is_unique</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n      <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">u</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>That makes the first 3 easy (no 1, no 0, no 0), and the next 3 require a little more thought:<br>\n<a href=\"/user_uploads/3121/tZ4eO2uJX96jyEnpb-cSvziv/Screenshot-from-2020-12-25-08-24-15.png\">Screenshot-from-2020-12-25-08-24-15.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tZ4eO2uJX96jyEnpb-cSvziv/Screenshot-from-2020-12-25-08-24-15.png\" title=\"Screenshot-from-2020-12-25-08-24-15.png\"><img src=\"/user_uploads/3121/tZ4eO2uJX96jyEnpb-cSvziv/Screenshot-from-2020-12-25-08-24-15.png\"></a></div>",
        "id": 220921690,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608903049
    },
    {
        "content": "<p>As an exercise in working with structures, it might be interesting to prove <code>\\not is_submonoid \\Z_even</code>, which amounts roughly to what you were already proving, but likely in a more clumsy way.</p>",
        "id": 220922463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608904452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> your first theorem statement doesn't typecheck.</p>",
        "id": 220922527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608904588
    },
    {
        "content": "<p>I added a comma, here is a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ℝ_0_is_unique</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n      <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220922539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608904603
    },
    {
        "content": "<p>it shows that <code>z = 1</code> works</p>",
        "id": 220922543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608904620
    },
    {
        "content": "<p>That basically constitutes a \"proof\" that the theorem statement isn't what was intended, right?</p>",
        "id": 220922744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608904918
    },
    {
        "content": "<p>I think I fixed these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ℝ_1_is_unique</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">u</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ℝ_0_is_unique</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n      <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n    <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>For the structural theorem, I don't know how to prove a structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ℤ_even</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ℤ_even_is_not_a_submonoid</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_submonoid</span> <span class=\"n\">ℤ_even</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>because <code>is_submonoid</code> is defined as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">class</span> <span class=\"n\">is_submonoid</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one_mem</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_mem</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It says it's a <code>Prop</code>, but how do you prove it or disprove it?  I know it as a record of two proofs.  I don't know it as a proposition, and I don't know the syntax or pattern to disprove it as a proposition.  That is, what is the negation of a record of two proofs?</p>\n<p>I also have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ℤ_even_is_not_an_integral_domain_because_missing_1</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">ℤ_even</span><span class=\"o\">),</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">ℤ_even</span><span class=\"o\">),</span>\n    <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220928168,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608915094
    },
    {
        "content": "<p>You know how to prove (or use) <code>P ∧ Q</code>, right? well, it is a structure too: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/and\">docs#and</a></p>",
        "id": 220928281,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608915302
    },
    {
        "content": "<p>you can disprove a structure by disproving any of its fields. Think of it this way: if it <em>was</em> a submonoid (<code>intro h</code>), then <code>h.one_mem</code> asserts that <code>1 \\in Z_even</code>, but that is false because [reasons], thus contradiction. So it's not a submonoid</p>",
        "id": 220928387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608915526
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 220928656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608916011
    },
    {
        "content": "<p>I think I understand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">yadda</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_golem</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">three_mem</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">yadda</span><span class=\"bp\">=</span><span class=\"mi\">3</span> <span class=\"c1\">-- 1 = 3</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">yadda_not_golem</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">is_golem</span> <span class=\"n\">yadda</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h1.three_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So if I complete the proof by disproving any of the component propositions of the structure, which I can extract with <code>.</code>, then I have disproved the structure.</p>\n<p>I'm a little stuck in the toy example because <code>exact h2</code> won't finish the proof even though <code>h2</code> <code>#reduce</code>s to <code>1=3</code>.   <code>1</code> and <code>3</code> are declared to be <code>nat</code>.  Not to sound really dumb, but is there an axiom in <code>nat</code> which says that <code>a=b</code> is a false proposition if <code>a</code> and <code>b</code> are different constant integers?  There's just a bit of mechanics here that is eluding me.</p>",
        "id": 220931226,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608921015
    },
    {
        "content": "<p>What error does the code above give?</p>",
        "id": 220931288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608921130
    },
    {
        "content": "<p>the problem is that \"1=3\" is not equal to \"false\"</p>",
        "id": 220931295,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608921170
    },
    {
        "content": "<p>It might imply false, but it's not definitionally equal</p>",
        "id": 220931296,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608921179
    },
    {
        "content": "<p><code>simp at h2</code> is likely to help</p>",
        "id": 220931316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608921210
    },
    {
        "content": "<p>it doesn't, but h2 is definitionally equal to \"1 = 3\"</p>",
        "id": 220931364,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608921250
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h1.three_mem</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 220931370,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608921273
    },
    {
        "content": "<p>You need to prove that <code>1 ≠ 3</code>. It's not trivial since <code>1 = nat.succ 0</code> and <code>3 = nat.succ (nat.succ (nat.succ 0))</code></p>",
        "id": 220931491,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608921518
    },
    {
        "content": "<p>It doesn't help? I'd expect <del>docs#nat.succ_inj</del> <strong>whatever the lemma is actually called</strong> to kick in, leading to <code>zero = succ x</code>, which is (almost?) false by definition</p>",
        "id": 220931564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608921702
    },
    {
        "content": "<p>Here's a drawn-out proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">yadda_not_golem</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">is_golem</span> <span class=\"n\">yadda</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">h1.three_mem</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ.inj</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ_ne_zero</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h4</span> <span class=\"n\">h3.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220931676,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608921925
    },
    {
        "content": "<p>golfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">yadda_not_golem</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">is_golem</span> <span class=\"n\">yadda</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_ne_zero</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">nat.succ.inj</span> <span class=\"n\">h1.three_mem</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 220931717,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608921974
    },
    {
        "content": "<p>Thank you all for helping me sort this out.  I now have a clear idea of how to disprove structures.</p>",
        "id": 220931786,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608922148
    }
]