[
    {
        "content": "<p>Is there some theorem/lemma that can give me a map from a subtype into the corresponding type?</p>",
        "id": 179535821,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1572531870
    },
    {
        "content": "<p><code>subtype.val</code>?</p>",
        "id": 179535871,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572531902
    },
    {
        "content": "<p>Thanks! I must have been searching for the wrong thing then.. thought its name would be something like 'lift' or 'map'</p>",
        "id": 179535989,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1572531980
    },
    {
        "content": "<p>Despite its simplicity I am having problems using subtype.val<br>\nI have the following code (the only important thing is the last line in tactic mode):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_prod_of_binary_prod</span> <span class=\"o\">[</span><span class=\"n\">has_binary_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">],</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">J</span> <span class=\"n\">fin</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">J</span> <span class=\"k\">then</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">J&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">resetI</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">card_lt</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">J&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_subtype_lt</span> <span class=\"n\">J</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">lim_J&#39;</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">J&#39;</span><span class=\"o\">)</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">finite_prod_of_binary_prod</span> <span class=\"n\">J&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"bp\">‚ü®_‚ü©</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">F&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">discrete</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">J&#39;</span><span class=\"o\">),</span>\n\n<span class=\"kn\">end</span>\n<span class=\"k\">else</span> <span class=\"bp\">_</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">‚ü®_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">‚ü©</span><span class=\"o\">]}</span>\n</pre></div>\n\n\n<p>I get the following error: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">J&#39;</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">J&#39;</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">subtype</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">?</span> <span class=\"err\">?</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_binary_products</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">finite_prod_of_binary_prod</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">],</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">fin</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">J&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n<span class=\"n\">card_lt</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">J&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n<span class=\"n\">lim_J&#39;</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">J&#39;</span><span class=\"o\">)</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">J</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span>\n<span class=\"err\">‚ä¢</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limit</span> <span class=\"n\">F</span>\n</pre></div>\n\n\n<p>How do I supply the fact that J' is a subtype of J to subtype.val? Shouldnt this be inferred?</p>",
        "id": 179537262,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1572532842
    },
    {
        "content": "<p>You can't apply <code>subtype.val</code> to <code>J'</code> only to an element of <code>J'</code></p>",
        "id": 179537574,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572533027
    },
    {
        "content": "<p>I'm not sure what the type of <code>discrete.lift</code> is, but note that <code>subtype.val</code> is a function from <code>J'</code> to <code>J</code>, not a function that can be applied to <code>J'</code> itself.</p>",
        "id": 179537651,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572533057
    },
    {
        "content": "<p>You just want <code>discrete.lift subtype.val</code></p>",
        "id": 179537737,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572533123
    },
    {
        "content": "<p>Or probably <code>discrete.lift (subtype.val : J' -&gt; J)</code></p>",
        "id": 179537823,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572533166
    },
    {
        "content": "<blockquote>\n<p>You just want <code>discrete.lift subtype.val</code></p>\n</blockquote>\n<p>Maybe with some type annotations.</p>",
        "id": 179537827,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1572533168
    },
    {
        "content": "<p>Great! Thank you :)</p>",
        "id": 179538034,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1572533296
    }
]