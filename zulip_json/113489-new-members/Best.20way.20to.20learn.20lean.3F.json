[
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/learn.html\">Learning Lean</a> up to date?  I've read through TPiL and even done most of the exercises, but I feel my knowledge is still pretty shaky and I need more practice.  I'm a software engineer but studied foundations of math as an undergrad 30+ years ago.  I hope to contribute to mathlib, maybe starting with <a href=\"https://github.com/leanprover-community/mathlib/wiki/Undergrad-low-hanging-fruits#single-variable-real-analysis\">single variable real analysis</a> since I'm familiar with that.</p>\n<p>Should I do the tutorials?  I vaguely remember hearing of some Lean challenges on a website, was it leetcode?  Any other suggestions?</p>",
        "id": 300195116,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1663863151
    },
    {
        "content": "<p>one thing that I think everyone here agrees upon is that a great way to learn Lean is to just keep proving stuff and asking questions on Zulip when you get stuck</p>",
        "id": 300203927,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663865819
    },
    {
        "content": "<p>Hi, <span class=\"user-mention\" data-user-id=\"348963\">@Martin C. Martin</span>!  You can indeed try the <a href=\"https://github.com/leanprover-community/tutorials\">#tutorials</a> project, written by <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> for students with one semester of university mathematics, or <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">Mathematics in Lean</a>, aimed slightly higher mathematically (maybe most of a university degree in mathematics).</p>",
        "id": 300204080,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1663865874
    },
    {
        "content": "<p>another thing that I found personally useful was to find interesting lemmas in mathlib and read the source to see how they were proved</p>",
        "id": 300204162,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663865888
    },
    {
        "content": "<p>Single variables real analysis is in my opinion a highly nontrivial topic in Lean due to the fact that we try to do everything as abstractly as possible. On the other hand most of the theorems are there already (some versions of l'Hospital and Taylor's theorem are missing). I wonder whether it would make a first good project to write documentation for how to do single variable calculus in mathlib? <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> what are your thoughts on that?</p>",
        "id": 300208500,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663867258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"348963\">@Martin C. Martin</span> would you be interesting in doing that?</p>",
        "id": 300208923,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663867384
    },
    {
        "content": "<p>I agree, it's a tricky place to contribute.  I'm not sure what to suggest.  More documentation doesn't hurt but there is already <a href=\"https://leanprover-community.github.io/mathematics_in_lean/08_Differential_Calculus.html#elementary-differential-calculus\">Section 8.1</a> of Mathematics in Lean on differential calculus and <a href=\"https://leanprover-community.github.io/mathematics_in_lean/09_Integration_and_Measure_Theory.html#elementary-integration\">Section 9.1</a> on integral calculus.</p>",
        "id": 300209064,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1663867425
    },
    {
        "content": "<p>To engage in a bit of self-promotion, one intermediate-level resource for Lean is my <a href=\"https://hrmacbeth.github.io/computations_in_lean/\">tutorial</a> on doing computations efficiently.</p>",
        "id": 300209927,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1663867690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/Best.20way.20to.20learn.20lean.3F/near/300209927\">said</a>:</p>\n<blockquote>\n<p>To engage in a bit of self-promotion, one intermediate-level resource for Lean is my <a href=\"https://hrmacbeth.github.io/computations_in_lean/\">tutorial</a> on doing computations efficiently.</p>\n</blockquote>\n<p>Haven't looked through the entire tutorial yet but I can say that I am often slowed down in tactic proofs with jumping through the hoops, i.e. massaging, proofs with the algebra steps.  Looking forward to seeing if this will help speed that part up for me.</p>",
        "id": 300211612,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663868213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span> Looking forward to hearing about your experience!</p>",
        "id": 300213028,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1663868674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span>  I agree that proving stuff is the best way to learn, the question is, what do I prove?  I need something that's neither too easy nor too hard.  :)   Also, your tip about reading lemmas reminds me of how I learned programming in the first place, before I even had a computer at home.  From reading the listings in <a href=\"https://www.atariarchives.org/basicgames/showpage.php?page=cover\">BASIC computer games.</a>  Ah the memories.</p>\n<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Starting with tutorials sounds great, and I'll check out Mathematics in Lean, along with your tutorial.</p>",
        "id": 300213878,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1663868973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"348963\">@Martin C. Martin</span>  I have found <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics-2022\">FM2022</a> and his videos on YouTube demonstrating the proofs very helpful.  I tried the exercises myself and then watched the videos to see how he did the proofs.</p>",
        "id": 300214397,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663869149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/Best.20way.20to.20learn.20lean.3F/near/300209064\">said</a>:</p>\n<blockquote>\n<p>I agree, it's a tricky place to contribute.  I'm not sure what to suggest.  More documentation doesn't hurt but there is already <a href=\"https://leanprover-community.github.io/mathematics_in_lean/08_Differential_Calculus.html#elementary-differential-calculus\">Section 8.1</a> of Mathematics in Lean on differential calculus and <a href=\"https://leanprover-community.github.io/mathematics_in_lean/09_Integration_and_Measure_Theory.html#elementary-integration\">Section 9.1</a> on integral calculus.</p>\n</blockquote>\n<p>That is true, but it still misses a lot of stuff. I guess my dream would be a Analysis 1 book where all fancy theorems just refer to the mathlib version and the examples are worked out from that. Part of the problem in my opinion with finding things in mathlib for newcomers is that they cannot possibly know the abstractions we use. Who would guess that \"Cauchy implies convergent\" is in <code>topology/uniform_space</code> - who even knows what a uniform space is.<br>\nOne good project might be to work out some examples of sequences, i.e., take a book on Analysis 1 and try to do the exercises/examples. My guess is that the most annoying things there are the coercions, finding the theorems, and explicit calculations.</p>",
        "id": 300220462,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663871431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/Best.20way.20to.20learn.20lean.3F/near/300209927\">said</a>:</p>\n<blockquote>\n<p>To engage in a bit of self-promotion, one intermediate-level resource for Lean is my <a href=\"https://hrmacbeth.github.io/computations_in_lean/\">tutorial</a> on doing computations efficiently.</p>\n</blockquote>\n<p>(We should add a link to your tutorial to the <a href=\"https://leanprover-community.github.io/learn.html\">Learning Lean</a> page! And possibly the linear_combination / polyrith tactic docs as well!)</p>",
        "id": 300223769,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1663872546
    },
    {
        "content": "<p>Moritz, Mathematics in Lean is meant to answer those questions. But there is still a lot missing.</p>",
        "id": 300237042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663877109
    },
    {
        "content": "<p>If there is an update to the <a href=\"https://leanprover-community.github.io/learn.html\">Learning Lean</a> page, I think <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span>'s <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics-2022\">Formalising Mathematics 2022 course</a> should be added, too. This course is a great resource! One of the things it in my opinion does particularly well is it teaches how to use <em>mathlib</em> in practice (not just <em>Lean</em>).  It has become my current recommendation to anyone entering formalization with a bit of math background.</p>",
        "id": 300238372,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1663877664
    },
    {
        "content": "<blockquote>\n<p>I agree that proving stuff is the best way to learn, the question is, what do I prove? I need something that's neither too easy nor too hard. :)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"348963\">@Martin C. Martin</span> True, there's a sweet spot for good practice proofs that can be hard to figure out. As I've been learning Lean, I've tried to think of mathematical objects / statements that are relatively simple but still capture my interest in some way. For example, I figured out how to define Beth cardinals and proved some stuff about them (this was before they were added to mathlib); I also wrote up a proof that sets in Lean are infinite iff they're Dedekind-infinite. Not exactly difficult stuff, but enough to get me reading through the mathlib docs and trying different things.</p>",
        "id": 300245044,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663880515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Best.20way.20to.20learn.20lean.3F/near/300237042\">said</a>:</p>\n<blockquote>\n<p>Moritz, Mathematics in Lean is meant to answer those questions. But there is still a lot missing.</p>\n</blockquote>\n<p>Ok, then I change my proposal to \"add interesting things to MiL\". I was not sure how much PRs that add new content to MiL are wanted</p>",
        "id": 300255199,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663884305
    },
    {
        "content": "<p>I always like to pinpoint that Lean 4 is an amazing <em>programming language</em> as well, not just a theorem prover. And it can teach you strong functional programming fundamentals with a rich type system.</p>\n<p>Here's a Python environment manager that I built in Lean 4: <a href=\"https://github.com/arthurpaulino/viper\">https://github.com/arthurpaulino/viper</a></p>",
        "id": 300267833,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663890793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/Best.20way.20to.20learn.20lean.3F/near/300213028\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> Looking forward to hearing about your experience!</p>\n</blockquote>\n<p>Was super excited to see Sage being used.  Great tutorial!</p>",
        "id": 300269532,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663891805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/113489-new-members/topic/Best.20way.20to.20learn.20lean.3F/near/300255199\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Best.20way.20to.20learn.20lean.3F/near/300237042\">said</a>:</p>\n<blockquote>\n<p>Moritz, Mathematics in Lean is meant to answer those questions. But there is still a lot missing.</p>\n</blockquote>\n<p>Ok, then I change my proposal to \"add interesting things to MiL\". I was not sure how much PRs that add new content to MiL are wanted</p>\n</blockquote>\n<p>I think MiL is currently written by a small number of people with a lot of Lean experience and a very clear vision of what they want to do with this book/project. So it isn't a large-collaborative-project like mathlib. Which is fine, of course.<br>\nWe just need to lock those people in a room for 2 weeks and fight their universities if they try to put other load on them.</p>",
        "id": 300290712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663910632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/Best.20way.20to.20learn.20lean.3F/near/300204080\">said</a>:</p>\n<blockquote>\n<p>Hi, <span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span>!  You can indeed try the <a href=\"https://github.com/leanprover-community/tutorials\">#tutorials</a> project, written by <span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> for students with one semester of university mathematics, or <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">Mathematics in Lean</a>, aimed slightly higher mathematically (maybe most of a university degree in mathematics).</p>\n</blockquote>\n<p>Hi! I tried to do <code>leanproject mathematics_in_lean</code> and I got the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Cloning</span> <span class=\"k\">from</span> <span class=\"n\">git</span><span class=\"bp\">@</span><span class=\"n\">github.com</span><span class=\"o\">:</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathematics_in_lean.git</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">downloading</span> <span class=\"n\">component</span> <span class=\"bp\">'</span><span class=\"n\">lean'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">binary</span> <span class=\"n\">package</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">provided</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">linux'</span>\n<span class=\"n\">Command</span> <span class=\"sc\">'['</span><span class=\"n\">leanpkg'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">configure'</span><span class=\"o\">]</span><span class=\"bp\">'</span> <span class=\"n\">returned</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">zero</span> <span class=\"n\">exit</span> <span class=\"n\">status</span> <span class=\"mi\">1</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>Just in case, I tried to bring the  <code>tutorials</code> project and that worked just fine. Do you know what might have gone wrong?</p>",
        "id": 301020776,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1664289714
    },
    {
        "content": "<p>Or,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">X.None</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">X.Single</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n2</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">X.Many</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">X.Many</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">n2</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n2</span> <span class=\"o\">(</span><span class=\"n\">X.Many</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>(or however this is spelt in Lean4)</p>",
        "id": 301029769,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664290730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> wrong thread?</p>",
        "id": 301036757,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664292588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327749\">@Pedro Sánchez Terraf</span> presumably you mean <code>leanproject get mathematics_in_lean</code>. What is the output of <code>elan -V</code>? What operating system are you using?</p>",
        "id": 301084014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664302921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Best.20way.20to.20learn.20lean.3F/near/301084014\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"327749\">Pedro Sánchez Terraf</span> presumably you mean <code>leanproject get mathematics_in_lean</code>. What is the output of <code>elan -V</code>? What operating system are you using?</p>\n</blockquote>\n<p>You're right, that's what I originally entered. <code>elan -V</code> outputs <code>elan 1.4.1 (6a7f30d8e 2022-04-15)</code>. I'm running Debian testing.</p>",
        "id": 301092793,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1664303779
    },
    {
        "content": "<p>Try <code>elan self update</code> to see if we can get you up to 1.4.2, and see if that fixes the problem.</p>",
        "id": 301093612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664304025
    },
    {
        "content": "<p>If <code>elan self update</code> does not work, try installing elan from sid: <a href=\"https://packages.debian.org/sid/elan\">https://packages.debian.org/sid/elan</a></p>",
        "id": 301093729,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1664304058
    },
    {
        "content": "<p>It just worked for me on Ubuntu. I think it's only the mac people who have problems with this? but anyway it's great to know that debian sid is up to date!</p>",
        "id": 301093814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664304087
    },
    {
        "content": "<p>Ah, good! I thought it might depend on whether you installed elan with <code>apt install elan</code> or <code>curl ... | sh</code>, but I can see <code>elan self update</code> installing the newer version locally even if it was installed with apt.</p>",
        "id": 301094231,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1664304211
    },
    {
        "content": "<p>It worked smoothly! Thank you very much.<br>\n... So, the bottom line is (?) that different projects might depend on different versions of <code>elan</code>.</p>",
        "id": 301094553,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1664304308
    },
    {
        "content": "<p>No, a single elan is fine for all projects, it's just that all pre-1.4.2 versions of elan are broken (in that they fail to download Lean binaries) due to a GitHub change</p>",
        "id": 301094683,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1664304354
    },
    {
        "content": "<p>Talking about GitHub, I created a project of my own, for learning (through <code>leanproject new</code>). Am I supposed to treat the folder as a regular <code>git</code> directory? Like, can I do <code>git commit</code> and <code>git push</code> as usual? Or should I use another tool to manage version control?</p>",
        "id": 301095367,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1664304599
    },
    {
        "content": "<p>yes, it's a regular git repo</p>",
        "id": 301099029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664305883
    }
]