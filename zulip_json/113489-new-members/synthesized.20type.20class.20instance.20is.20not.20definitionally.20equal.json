[
    {
        "content": "<p>Can somebody please explains to me what is happening with the code below. I get an error when I try to use <code>finite_dimensional.of_finset_basis</code>. </p>\n<p>I don't understand what the error message means:  <code>synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized\n  algebra.to_module\ninferred\n  algebra.to_module</code></p>\n<p>Here is the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.number_field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">ℚ</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">is_root</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">Qx</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin_root</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">ℚ</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℚ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_separable.is_integral</span> <span class=\"n\">ℚ</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">ℚ</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">minpoly.irreducible</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">Qx</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">adjoin_root.field</span> <span class=\"o\">},</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">number_field</span> <span class=\"n\">Qx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_char_zero</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">exact</span> <span class=\"n\">char_zero_of_injective_algebra_map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">Qx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">to_finite_dimensional</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">refine</span> <span class=\"n\">finite_dimensional.of_finset_basis</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284629281,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1654098009
    },
    {
        "content": "<p><code>set_option pp.implicit true</code> will give you a better error message</p>",
        "id": 284631285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654098879
    },
    {
        "content": "<p>Ouch, this looks pretty nasty, you are running into a longstanding problem we have with algebras that while we have plans to fix, we haven't been able to yet.</p>",
        "id": 284631699,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654099059
    },
    {
        "content": "<p>It might be better to rethink the strategy a bit to proceed, is it possible to work with the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subfield\">docs#subfield</a> generated by <code>x</code> instead?</p>",
        "id": 284631860,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654099126
    },
    {
        "content": "<p>One other thing, <code>irreducible (minpoly ℚ x)</code> and <code>number_field Qx</code> should both be <code>haveI</code> rather than <code>letI</code> as they are <code>Props</code> and don't carry any extra data, I don't think it helps fix the problem though</p>",
        "id": 284632124,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654099224
    },
    {
        "content": "<p>Well, I will have to rethink my proof then. Note that I would also be very happy with any other way to prove that <code>Qx</code> is <code>finite_dimensional</code>. It is the only bit missing in the proof...</p>",
        "id": 284632566,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1654099408
    },
    {
        "content": "<p>Okay maybe we can find a workaround if you already have a full proof with only one missing piece then, I'll have another look later this evening</p>",
        "id": 284633103,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654099644
    },
    {
        "content": "<p>Thanks, Alex. That would be great since <code>adjoin_root</code> is very well-suited to work with number field, I found.</p>",
        "id": 284634747,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1654100456
    }
]