[
    {
        "content": "<p>Hi everyone,  I am getting unknown identifier for the function definition. Any idea how to resolve, and may be a better way to write it? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">mod_fn</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n      <span class=\"mi\">0</span>\n     <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">addr</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                <span class=\"n\">addr</span>\n                <span class=\"o\">(</span><span class=\"n\">mod_fn</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">mod_fn</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 201570847,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1592806396
    },
    {
        "content": "<p>You are trying to define a function by recursion. But you can't do that without explaining to lean why this will terminate.</p>",
        "id": 201570906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592806488
    },
    {
        "content": "<p>You might want to take a look at how this is defined in mathlib</p>",
        "id": 201570916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592806515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Thanks for your answer. I could not understand zmod in src/data/zmod/basic.lean. However, I looked at the gcd in data/int/gcd.lean and followed the similar strategy, but the typechecker is still not happy. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">mod_fn</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n       <span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">if</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n          <span class=\"k\">if</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"k\">then</span>\n             <span class=\"n\">addr</span>\n          <span class=\"k\">else</span>\n            <span class=\"k\">have</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">addr</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n            <span class=\"n\">mod_fn</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">have</span> <span class=\"n\">addr</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">addr</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n        <span class=\"n\">mod_fn</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n</code></pre></div>\n\n\n<p>Do you think it's because of sorry ?</p>",
        "id": 201572576,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1592808652
    },
    {
        "content": "<p>Well, why does this terminate?</p>",
        "id": 201572924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592809004
    },
    {
        "content": "<p>If you are working with <code>nat</code>s, then calling a function with an argument that is becoming smaller is sufficient proof that it's terminating.</p>",
        "id": 201572961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592809049
    },
    {
        "content": "<p>So in that case <code>have i &lt; n, from sorry</code> will help.</p>",
        "id": 201572965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592809063
    },
    {
        "content": "<p>But for <code>int</code> this is of course not enough.</p>",
        "id": 201572971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592809076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239476\">@Mukesh Tiwari</span> You might want to try to define the function for <code>nat</code> first.</p>",
        "id": 201573016,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592809111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Now, I see you point. I have written the nat version and typechecker is happy about it. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">mod_nat</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n       <span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">if</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"k\">then</span>\n         <span class=\"n\">addr</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">have</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">addr</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n        <span class=\"n\">mod_nat</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n</code></pre></div>\n\n\n<p>So, the typechecker is not convinced that the integer definition would reach to a value between 0 and p, [0, p). </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">mod_fn</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n       <span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n      <span class=\"k\">if</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n          <span class=\"k\">if</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"k\">then</span>\n             <span class=\"n\">addr</span>\n          <span class=\"k\">else</span>\n            <span class=\"k\">have</span> <span class=\"n\">addr</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">addr</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n            <span class=\"n\">mod_fn</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">addr</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n        <span class=\"n\">mod_fn</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n</code></pre></div>\n\n\n<p>Can you give me some more hint (a concrete input) that why this function would not terminate? Thank you very much for you help.</p>",
        "id": 201575248,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1592811438
    },
    {
        "content": "<p>As you've discovered, \"well founded recursion\" on <code>nat</code> is a lot easier than on <code>int</code>. Because <code>&lt;</code> is not a well founded relation on <code>int</code>.<br>\nTo define the <code>int</code> version, I would define something without recursion, by using the <code>nat</code> version.</p>",
        "id": 201575643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592811777
    },
    {
        "content": "<p>If you really want to use recursion for the <code>int</code> version, you would have to add a complicated proof of termination. (I've never done something like that myself...)</p>",
        "id": 201575681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592811831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Now, I am trying to prove the following lemma for my  mod_nat, but when I am unfold the definition, <br>\nI get this error: deep recursion was detected at 'expression replacer'  (potential solution: increase stack space in your system)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mod_nat_proof</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">mod_nat</span> <span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h₁</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_right</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"kn\">end</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">if</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"k\">then</span>\n        <span class=\"k\">begin</span>\n          <span class=\"n\">intros</span><span class=\"o\">,</span>\n          <span class=\"c\">/-</span><span class=\"cm\"> why I can not unfold the definitnon</span>\n<span class=\"cm\">            deep recursion was detected at &#39;expression replacer&#39;</span>\n<span class=\"cm\">            (potential solution: increase stack space in your system)-/</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">mod_nat</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n        <span class=\"kn\">end</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">begin</span>\n          <span class=\"n\">intros</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span>\n          <span class=\"n\">specialize</span> <span class=\"o\">(</span><span class=\"n\">mod_nat_proof</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">mod_nat</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n        <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201580286,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1592815405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239476\">@Mukesh Tiwari</span> Does <code>rw mod_nat</code> work? If not, you can use <code>show</code> to tell lean what you want the goal to look like.</p>",
        "id": 201582498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592817109
    },
    {
        "content": "<p>I wouldn't advise this (usually best to avoid <code>unfold</code> in favour of <code>rw</code> and <code>simp</code> whenever possible), but <code>unfold</code> does have a <code>{single_pass := tt}</code> configuration option that should at least let you see what is exploding.</p>",
        "id": 201584294,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592818415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Thanks again. Now, given that h₁ : ¬p = 0, I want to evaluate the second branch of ite. How can I do that?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">mod_nat_proof</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">mod_nat</span> <span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">addr</span> <span class=\"o\">(</span><span class=\"n\">mod_nat</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span>\n</code></pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  Thank you very much.</p>",
        "id": 201586161,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1592819204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239476\">@Mukesh Tiwari</span> <code>rw if_neg h\\1</code></p>",
        "id": 201586442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592819376
    },
    {
        "content": "<p><code>rwa [if_neg h₁, if_pos h₂]</code></p>",
        "id": 201586582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592819447
    },
    {
        "content": "<p><code>simp [h₁,  h₂]</code> should help too</p>",
        "id": 201586854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592819602
    },
    {
        "content": "<p>Finally, I have finished the proof according to my definition of mod_nat, but it seems that typechecker is not happy about it. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mod_nat_proof</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">mod_nat</span> <span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h₁</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_right</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"kn\">end</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">if</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"k\">then</span>\n        <span class=\"k\">begin</span>\n          <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mod_nat</span><span class=\"o\">,</span>\n          <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">h₂</span><span class=\"o\">]</span>\n        <span class=\"kn\">end</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">begin</span>\n          <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">H₃</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">addr</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_lt_of_pos_le</span> <span class=\"n\">p</span> <span class=\"n\">addr</span> <span class=\"n\">a</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n          <span class=\"n\">specialize</span> <span class=\"o\">(</span><span class=\"n\">mod_nat_proof</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n          <span class=\"n\">rw</span> <span class=\"n\">mod_nat</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h₂</span><span class=\"o\">],</span>\n        <span class=\"kn\">end</span>\n  <span class=\"bp\">```</span>\n</code></pre></div>\n\n\n<p>failed to prove recursive application is decreasing, well founded relation<br>\n  @has_well_founded.r (Σ' (addr : ℕ), ℕ)<br>\n    (@psigma.has_well_founded ℕ (λ (addr : ℕ), ℕ) (@has_well_founded_of_has_sizeof ℕ nat.has_sizeof)<br>\n       (λ (a : ℕ), @has_well_founded_of_has_sizeof ℕ nat.has_sizeof))<br>\nPossible solutions: </p>\n<p>- Use 'using_well_founded' keyword in the end of your definition to specify tactics for synthesizing well founded relations and decreasing proofs.<br>\n  - The default decreasing tactic uses the 'assumption' tactic, thus hints (aka local proofs) can be provided using 'have'-expressions.<br>\nThe nested exception contains the failure state for the decreasing tactic.<br>\nnested exception message:<br>\nfailed<br>\nstate:<br>\nmod_nat_proof : ∀ (_p : Σ' (addr : ℕ), ℕ), _p.snd &gt; 0 → mod_nat _p.fst _p.snd &lt; _p.snd,<br>\naddr p : ℕ,<br>\nh₁ : ¬p = 0,<br>\nh₂ : ¬addr &lt; p,<br>\na : p &gt; 0<br>\n⊢ addr - p &lt; addr</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>\n\n\n<p>def mod_nat : nat → nat → nat<br>\n| addr p :=<br>\n    if h₁ : p = 0 then <br>\n       0<br>\n    else <br>\n      if h₂ : addr &lt; p then<br>\n         addr<br>\n      else<br>\n        have addr - p &lt; addr, by omega, <br>\n        mod_nat (addr - p) p </p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 201589416,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1592821473
    },
    {
        "content": "<p>The error message says that Lean cannot literally see a proof of <code>addr - p &lt; addr</code> in your list of hypotheses, and suggests that you add it by proving it yourself using the <code>have</code> command. If you're using mathlib you might be able to just insert <code>have h3 : addr - p &lt; addr, by linarith</code> at some appropriate point (or <code>by omega</code>).</p>",
        "id": 201589906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592821837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239476\">@Mukesh Tiwari</span> already has this fact as <code>H₃</code>.</p>",
        "id": 201590034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592821923
    },
    {
        "content": "<p>Unfortunately, he needs to switch to a \"term mode\" have, before Lean can see it.</p>",
        "id": 201590064,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592821953
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">mod_nat_proof</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">mod_nat</span> <span class=\"bp\">_</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">_</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">,</span>\n<span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">addr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">addr</span>\n</code></pre></div>\n\n\n<p>Then it maybe needs to be moved?</p>",
        "id": 201590074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592821963
    },
    {
        "content": "<p>That is, rather than using <code>specialize</code> and a <code>have</code> as a previous tactic, you'll need to write something like:</p>",
        "id": 201590103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592821989
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">H₃</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">addr</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_lt_of_pos_le</span> <span class=\"n\">p</span> <span class=\"n\">addr</span> <span class=\"n\">a</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mod_nat_proof</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 201590213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592822060
    },
    {
        "content": "<p>(there isn't a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, so I can't test this for you)</p>",
        "id": 201590223,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592822070
    },
    {
        "content": "<p>I guess cleaner would be to still construct the value of H3 in tactic mode, just \"make it available again\" in term mode when you do the recursive call.</p>",
        "id": 201590270,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592822114
    },
    {
        "content": "<p>I'm terrible at the syntax for term mode have, so I won't try to get this right. But if you don't understand what I'm saying, or can't make it work, post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and I'll have a go.</p>",
        "id": 201590300,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592822146
    },
    {
        "content": "<p>You're basically just a syntactical change away from having it working now.</p>",
        "id": 201590313,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592822157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/unknown.20identifier.20.20'mod_fn'/near/201590300\">said</a>:</p>\n<blockquote>\n<p>I'm terrible at the syntax for term mode have, so I won't try to get this right. But if you don't understand what I'm saying, or can't make it work, post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and I'll have a go.</p>\n</blockquote>\n<p>I have not tried it yet, but I have posted a gist  <a href=\"https://gist.github.com/mukeshtiwari/4ed2d76a3994a62575865c8d1944b651\">https://gist.github.com/mukeshtiwari/4ed2d76a3994a62575865c8d1944b651</a>, which should be compilable (typecheckable) in Lean.</p>",
        "id": 201595759,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1592826543
    },
    {
        "content": "<p>Replace your final <code>begin ... end</code> block with</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"k\">begin</span>\n          <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">H₃</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">addr</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_lt_of_pos_le</span> <span class=\"n\">p</span> <span class=\"n\">addr</span> <span class=\"n\">a</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">mod_nat_proof</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">mod_nat</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h₂</span><span class=\"o\">],</span>\n        <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201680791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592876695
    },
    {
        "content": "<p>Unfortunately there's a difference between tactic mode <code>have</code> and term mode <code>have</code> here.</p>",
        "id": 201680809,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592876715
    },
    {
        "content": "<p>Lean's automatic reasoning about decreasing recursive calls only sees facts put to it in \"term mode\" have statements.</p>",
        "id": 201680833,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592876753
    },
    {
        "content": "<p>I'm not sure if this would be fixable by a language change. I wish it were.</p>",
        "id": 201680882,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592876773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/unknown.20identifier.20.20'mod_fn'/near/201680809\">said</a>:</p>\n<blockquote>\n<p>Unfortunately there's a difference between tactic mode <code>have</code> and term mode <code>have</code> here.</p>\n</blockquote>\n<p>Thanks for the answer, but how do you differentiate between those two? My understanding is: when you start begin  .... end block, then every thing between begin and end is in tactic mode (am I right?).   Since typechecker can only see the decreasing recursive call in \"term\" mode, I need to escape the tactic mode? Hopefully, enough practice would give insights about these kind of details.</p>",
        "id": 201685357,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1592884122
    },
    {
        "content": "<p>Every time you write <code>:= ...</code>, or <code>exact ...</code> you're back in term mode.</p>",
        "id": 201685660,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592884761
    },
    {
        "content": "<p>So in the example I wrote for you above, in the ugly <code>have := have H3 : ..., from</code> the first <code>have</code> is a tactic-mode have, but the second is a term-mode have!</p>",
        "id": 201685705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592884811
    },
    {
        "content": "<p>I'm sure there are more colloquial ways to write this...</p>",
        "id": 201685715,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592884823
    },
    {
        "content": "<p>I usually do the <code>have</code>'s right at the start of the proof</p>",
        "id": 201685719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592884860
    },
    {
        "content": "<p>You can also use a lambda instead, I think (if you don't want to prove the decrease theorem immediately)</p>",
        "id": 201685774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592884924
    },
    {
        "content": "<p>I would demonstrate but I can't find an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> on the thread</p>",
        "id": 201685833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592885049
    },
    {
        "content": "<p>Oh, here's an MWE with Scott's version:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mod_nat</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n       <span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">if</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"k\">then</span>\n         <span class=\"n\">addr</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">have</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">addr</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n        <span class=\"n\">mod_nat</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mod_nat_proof</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">mod_nat</span> <span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h₁</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_right</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"kn\">end</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">if</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"k\">then</span>\n        <span class=\"k\">begin</span>\n          <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mod_nat</span><span class=\"o\">,</span>\n          <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">h₂</span><span class=\"o\">]</span>\n        <span class=\"kn\">end</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">begin</span>\n          <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">H₃</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">addr</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_lt_of_pos_le</span> <span class=\"n\">p</span> <span class=\"n\">addr</span> <span class=\"n\">a</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">mod_nat_proof</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">mod_nat</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h₂</span><span class=\"o\">],</span>\n        <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201685867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592885159
    },
    {
        "content": "<p>Here is with a lambda:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"k\">begin</span>\n          <span class=\"k\">have</span> <span class=\"n\">IH</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">H₃</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">addr</span><span class=\"o\">,</span> <span class=\"n\">mod_nat_proof</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n          <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">addr</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_lt_of_pos_le</span> <span class=\"n\">p</span> <span class=\"n\">addr</span> <span class=\"n\">a</span> <span class=\"n\">H₁</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">mod_nat</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h₂</span><span class=\"o\">],</span>\n        <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201685999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592885313
    },
    {
        "content": "<p>After compression I get this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mod_nat_proof</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">mod_nat</span> <span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">addr</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p0</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mod_nat</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">H₃</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">addr</span><span class=\"o\">),</span> <span class=\"n\">mod_nat_proof</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">p0</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_lt_self</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">p0</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201686254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592885743
    }
]