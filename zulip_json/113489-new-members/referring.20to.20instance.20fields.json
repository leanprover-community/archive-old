[
    {
        "content": "<p>I'm trying to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">inst_name</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"bp\">.....</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"bp\">.....</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>And I need to repeatedly apply the definition of multiplication (<code>mul</code>) in the proof of <code>mul_comm</code>, of course. The first time, a call to <code>simp</code> does it -- although of course that's not great because it's non-terminal. Subsequent calls aren't doing rewriting even though I need it. How do I manually get it to expand the definition of <code>*</code>?</p>",
        "id": 256804405,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633726500
    },
    {
        "content": "<p>I'm expecting there's some name like <code>(foo bar).mul</code> that I can use with ... <code>rw</code>? With <code>dsimp</code>? I'm not sure</p>",
        "id": 256804461,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633726531
    },
    {
        "content": "<p>The application of <code>*</code> is under a binder, so it might be that I have to go into conv mode or something</p>",
        "id": 256804867,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633726719
    },
    {
        "content": "<p>But I thought <code>simp</code> searched throughout the tree for places to do rewrites</p>",
        "id": 256804892,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633726736
    },
    {
        "content": "<p>does <code>simp only [(*)]</code> help in your situation?</p>",
        "id": 256806537,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633727476
    },
    {
        "content": "<p>sadly no :c that just gives \"simplify tactic failed to simplify\"</p>",
        "id": 256809944,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633729282
    },
    {
        "content": "<p>The goal has the form <code>dite (a * b = a) (xxx a b) (yyy a b) = b</code>. Is there a particular reason it wouldn't be rewriting it inside the <code>dite</code>?</p>",
        "id": 256810435,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633729558
    },
    {
        "content": "<p>Seems like <code>dite h t e := λ t e, decidable.rec_on h e t</code>, so I'm guessing this is some issue with <code>simp</code> not going inside the <code>λ</code>?</p>",
        "id": 256811131,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633729976
    },
    {
        "content": "<p>Huh, a second and separate <code>dsimp</code> seems to do it ... I didn't know that <code>dsimp</code> would simplify anything that <code>simp</code> wouldn't. That's surprising.</p>",
        "id": 256811518,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633730204
    },
    {
        "content": "<p>I think there is a library note about this.</p>",
        "id": 256812442,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633730684
    },
    {
        "content": "<p>See the bottom of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.category.default/src\">src#category_theory.category.default</a> for some explanation of why <code>dsimp, simp</code> is often needed.</p>",
        "id": 256812502,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633730728
    },
    {
        "content": "<p>Although maybe that explanation is too specific to category theory to be helpful here.</p>",
        "id": 256812721,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633730875
    },
    {
        "content": "<p>I'm not sure what you mean to link, but that's a broken link</p>",
        "id": 256813202,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633731193
    },
    {
        "content": "<p>Sorry:</p>",
        "id": 256813323,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633731254
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/category/basic.lean#L254\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/category/basic.lean#L254</a></p>",
        "id": 256813324,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633731255
    },
    {
        "content": "<p>Hmm, okay, that makes some sense...</p>",
        "id": 256814027,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633731717
    },
    {
        "content": "<p>I think I figured out why [(*)] was also causing weird problems for me. The instance of <code>foo</code> that I'm deriving from <code>bar</code> is, specifically, creating a Steiner Triple System on <code>units K</code>, where K is an field of characteristic 2. The (multiplicatively denoted) structure of the STS is built from the additive structure of the units.</p>\n<p>K has its own multiplicative structure, though, which means that when I write <code>a * b</code> it is using the field's multiplication, even though my goal has statements like <code>a * b = a</code> where <code>*</code> is in the STS language.</p>\n<p>Which brings it back to, how do I specify that I want to use the STS's instance of <code>has_mul</code>, and its <code>*</code>, and not the field's?</p>",
        "id": 256814313,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633731903
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? Usually it is a bad idea to have two instances of <code>has_mul</code> on the same type; you will inevitably go insane trying to keep them straight.</p>",
        "id": 256814544,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633732043
    },
    {
        "content": "<p>Usually better is to define a type synonym with the \"new\" instance, and explicit functions (which are just the identity, but type signatures old_type &lt;-&gt; new_type) for translating when needed.</p>",
        "id": 256814652,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633732093
    },
    {
        "content": "<p>e.g. you might want to do something like <code>def steiner (K) := units K</code>, which won't have a multiplicative structure.</p>",
        "id": 256814734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633732164
    },
    {
        "content": "<p>Okay, good point, that makes more sense than an instance. It's not really that every set of units in a field of char 2 _is_ a steiner triple system, it's that it _can_ be given that structure in a canonical way. :)</p>",
        "id": 256850648,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633766421
    },
    {
        "content": "<p>So, I'll re-work it to be that.</p>",
        "id": 256850666,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633766431
    },
    {
        "content": "<p>Still curious though: if I wanted to differentiate between the two, and do it in that awful way, how would I? Just trying to learn the syntax a bit better.</p>",
        "id": 256850695,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633766462
    }
]