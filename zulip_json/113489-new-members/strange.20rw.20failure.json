[
    {
        "content": "<p>Ok so I've been facing a weird problem. Does any of you know why the first proof fragments compile but not the second ? I think I have included all the necessary instances, so I'm a bit lost : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">deriv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_neg_nhds_within_neg</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">has_neg</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Iio</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_map</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_nhds_within_Iio_iff_exists_Ico_subset</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_neg_nhds_within_neg&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">no_bot_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_top_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">densely_ordered</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">has_neg</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Iio</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_map</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_nhds_within_Iio_iff_exists_Ico_subset</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203595773,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594472423
    },
    {
        "content": "<p>This calls for <code>set_option pp.all true</code></p>",
        "id": 203595925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594472761
    },
    {
        "content": "<p><code>ordered_add_comm_group</code> extends <code>add_comm_group</code>, as well as the ordering. You need fewer instances</p>",
        "id": 203596021,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594472900
    },
    {
        "content": "<p>Yes I just noticed it works if I remove ordered_add_comm_group</p>",
        "id": 203596029,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594472928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/strange.20rw.20failure/near/203595925\">said</a>:</p>\n<blockquote>\n<p>This calls for <code>set_option pp.all true</code></p>\n</blockquote>\n<p>I'll keep that in mind, that's useful !</p>",
        "id": 203596038,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594472946
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_neg_nhds_within_neg&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">no_bot_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_top_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">densely_ordered</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">has_neg</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Iio</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_map</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">mem_nhds_within_Iio_iff_exists_Ico_subset</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_8</span>\n    <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  rewrite tactic failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">  @has_mem.mem.{u_1 u_1} (set.{u_1} α) (filter.{u_1} α) (@filter.has_mem.{u_1} α) s</span>\n<span class=\"cm\">    (@nhds_within.{u_1} α _inst_4 a</span>\n<span class=\"cm\">       (@set.Iio.{u_1} α (@partial_order.to_preorder.{u_1} α (@linear_order.to_partial_order.{u_1} α _inst_1)) a))</span>\n\n<span class=\"cm\">    hs :</span>\n<span class=\"cm\">  @has_mem.mem.{u_1 u_1} (set.{u_1} α) (filter.{u_1} α) (@filter.has_mem.{u_1} α) s</span>\n<span class=\"cm\">    (@nhds_within.{u_1} α _inst_4 a</span>\n<span class=\"cm\">       (@set.Iio.{u_1} α</span>\n<span class=\"cm\">          (@partial_order.to_preorder.{u_1} α (@ordered_add_comm_group.to_partial_order.{u_1} α _inst_9))</span>\n<span class=\"cm\">          a))</span>\n<span class=\"cm\">       -/</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203596147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594473155
    },
    {
        "content": "<p>Yep that's what made me feel <code>ordered_add_comm_group</code> was the problem</p>",
        "id": 203596165,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594473214
    },
    {
        "content": "<p>Now the problem is I need <code>ordered_add_comm_group</code> later in the proof...</p>",
        "id": 203596215,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594473298
    },
    {
        "content": "<p>The procedure I use to investigate that kind of issue is the start a line with <code>have := @mem_nhds_within_Iio_iff_exists_Ico_subset α</code> and then progressively add underscores at this end of this line to see what goes wrong.</p>",
        "id": 203596355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594473575
    },
    {
        "content": "<p>Except I just tried on your example and nothing goes wrong until you try to use it.</p>",
        "id": 203596429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594473656
    },
    {
        "content": "<p>But it will be a useful technique anyway. Hold on.</p>",
        "id": 203596454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594473705
    },
    {
        "content": "<p>What I understand is I have two orders on the same type, so there is also two different <code>Iio</code></p>",
        "id": 203596574,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594473877
    },
    {
        "content": "<p>Yes</p>",
        "id": 203596585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594473925
    },
    {
        "content": "<p>I wanted to show you a principled way of understanding this is the issue, but it's not obvious.</p>",
        "id": 203596587,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594473945
    },
    {
        "content": "<p>Once you realize you have two totally unrelated order relations on alpha and remove one then you can use the technique I mentioned above to zoom on the issue.</p>",
        "id": 203596631,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594473979
    },
    {
        "content": "<p>In case, it looks like a severe design flaw in <code>ordered_add_comm_group</code>.</p>",
        "id": 203596652,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594474021
    },
    {
        "content": "<p>It doesn't seem to be able to deduce <code>linear_order \\a</code> from <code>ordered_add_comm_group \\a</code></p>",
        "id": 203596704,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594474083
    },
    {
        "content": "<p>No, because you don't need a total (aka linear) order in ordered_add_comm_group</p>",
        "id": 203596712,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594474120
    },
    {
        "content": "<p>Oh so I removed the wrong one x)</p>",
        "id": 203596717,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594474140
    },
    {
        "content": "<p>I think there is nothing you can do here without changing mathlib.</p>",
        "id": 203596739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594474193
    },
    {
        "content": "<p>Fyi this is the whole proof (I'm aware the end probably won't compile anyway, <code>linarith</code> already didn't like when I did a similar refactor to other proofs) : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_neg_nhds_within_neg&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">no_bot_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_top_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">densely_ordered</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">has_neg</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Iio</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_map</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mem_nhds_within_Iio_iff_exists_Ico_subset</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_nhds_within_Iio_iff_exists_Ico_subset</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_nhds_within_Ioi_iff_exists_Ioc_subset</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_Iio</span> <span class=\"n\">at</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_Ioi</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">neg_lt_neg</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_Ioc</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_Ico</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203596796,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594474280
    },
    {
        "content": "<p>I need <code>ordered_add_comm_group</code> for <code>neg_lt_neg</code></p>",
        "id": 203596802,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594474303
    },
    {
        "content": "<p>I suggest to change <code>ordered_add_comm_group</code> to </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">ordered_add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_le_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and see what breaks</p>",
        "id": 203596807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594474314
    },
    {
        "content": "<p>Well, a lot of things break if I just replace the definition x)</p>",
        "id": 203596998,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594474636
    },
    {
        "content": "<p>I guess so. For instance that will requires adding a lot of <code>[add_comm_group α] [partial_order α]</code> everywhere (hopefully adding them to <code>variables</code> lines would do most of the job)</p>",
        "id": 203597051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594474699
    },
    {
        "content": "<p>And of course you need to do that also to the multiplicative version (<code>to_additive</code> will complain like crazy anyway if you are not consistent here) .</p>",
        "id": 203597066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594474779
    },
    {
        "content": "<p>Maybe it's a better idea to let someone who know that part of the library do this job (although this is a good opportunity to get a tour). And maybe there is a better fix. For this kind of architectural question it's good to pîng <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 203597124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594474859
    },
    {
        "content": "<p>Did you manage to understand why the problem is not there with your real number version? Maybe there is actually a combination of existing type classes that gets the job done.</p>",
        "id": 203597176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594474934
    },
    {
        "content": "<p>You can start investigating this by typing <code>#check (by apply_instance : ordered_add_comm_group ℝ)</code></p>",
        "id": 203597193,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594475026
    },
    {
        "content": "<p>More directly, you can try:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"k\">let</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mem_nhds_within_Iio_iff_exists_Ico_subset</span> <span class=\"n\">ℝ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>and see where Lean gets the relevant instances in the real case.</p>",
        "id": 203597367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594475355
    },
    {
        "content": "<p>But actually you proof in the real case don't go until the point where you want to use <code>ordered_add_comm_group</code> lemmas, so maybe it won't help at all.</p>",
        "id": 203597494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594475526
    },
    {
        "content": "<p>Could it simply be because the <code>order_add_comm_group \\R</code> instance is defined using <code>@linear_order.le \\R real.linear_order</code> ?</p>",
        "id": 203599831,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594479303
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">deriv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">ordered_add_comm_group</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">ordered_ring</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">linear_ordered_ring</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">linear_ordered_comm_ring</span>\n</code></pre></div>",
        "id": 203600042,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594479639
    },
    {
        "content": "<p>Why do we have <code>decidable_linear_ordered_add_comm_group</code> but not <code>linear_ordered_add_comm_group</code> ?</p>",
        "id": 203603520,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594484796
    },
    {
        "content": "<p>With <code>decidable_linear_ordered_add_comm_group</code> everything works just fine, but I don't think I use the <code>decidable</code> part</p>",
        "id": 203603543,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594484874
    },
    {
        "content": "<p>It's just a historical accident because part of the library was written by computer scientists</p>",
        "id": 203603950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594485447
    },
    {
        "content": "<p>I don't understand why <code>ordered_add_comm_group</code> is being blamed here</p>",
        "id": 203620392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594514443
    },
    {
        "content": "<p>rather than removing <code>ordered_add_comm_group</code> from the list you should remove <code>add_comm_group</code></p>",
        "id": 203620401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594514485
    },
    {
        "content": "<p>We might need <code>linear_ordered_add_comm_group</code> for this proof</p>",
        "id": 203620457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594514569
    }
]