[
    {
        "content": "<p>I've formalised a proof of Euler's product formula for the totient function <code>φ</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">prime_divisors</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"bp\">⁻¹</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I've separately defined <code>prime_divisors</code> and proved a few basic lemmas that are used in the above proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prime_divisors</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">divisors</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">prime</span>\n</code></pre></div>\n<p>which I guess best belongs in <code>number_theory/divisors</code>.</p>\n<p>I'm guessing it would be best to submit the latter material as a PR first, and then if that's accepted I'll submit the product formula proof as another PR separately.</p>",
        "id": 261380117,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636837736
    },
    {
        "content": "<p>Is <code>divisors</code> available in <code>data.nat.prime</code>? If so, I would add <code>prime_divisors</code> there.</p>",
        "id": 261380429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636838198
    },
    {
        "content": "<p>Hmm, I'm surprised we don't have anything like <code>prime_divisors</code> yet - I was looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.factors\">docs#nat.factors</a>, but that's with multiplicity</p>",
        "id": 261380440,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1636838224
    },
    {
        "content": "<p>Would it be equal to <code>n.factors.to_finset</code>?</p>",
        "id": 261380504,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1636838304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20of.20Euler's.20product.20formula.20for.20totient/near/261380429\">said</a>:</p>\n<blockquote>\n<p>Is <code>divisors</code> available in <code>data.nat.prime</code>? If so, I would add <code>prime_divisors</code> there.</p>\n</blockquote>\n<p>Looks like <code>divisors</code> isn't available in <code>data.nat.prime</code>.</p>",
        "id": 261380575,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636838446
    },
    {
        "content": "<p>I've seen one or two Zulip threads on the lack of a <code>finset</code>-valued prime divisors function, which no-one seemed to have acted on since the topic came up.</p>",
        "id": 261380652,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636838545
    },
    {
        "content": "<p>I briefly had a go at proving that it's equal to <code>list.to_finset (factors n)</code> but didn't finish it, mostly because I didn't need that for what I was doing.</p>",
        "id": 261380736,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636838667
    },
    {
        "content": "<p>Ok, I've just added the proof that <code>n.prime_divisors = n.factors.to_finset</code>.</p>",
        "id": 261381314,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636839668
    },
    {
        "content": "<p>Would it be better for some reason to define <code>prime_divisors</code> as <code>n.factors.to_finset</code> (and then prove the equality with <code>(divisors n).filter prime</code> as a lemma)?  <br>\n[Of course, one answer to that question is \"Try it and see if it makes anything easier\"!  But I'm hoping the voice of experience can swoop in to save me from having to try that experiment. :) ]</p>",
        "id": 261381555,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636840075
    },
    {
        "content": "<p>Submitted the material on <code>prime_divisors</code> as PR <a href=\"https://github.com/leanprover-community/mathlib/issues/10318\">#10318</a></p>",
        "id": 261382052,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636840749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> the product formula should make the \"classify roots of unity in cyclotomic fields\" question from <a class=\"stream\" data-stream-id=\"304774\" href=\"/#narrow/stream/304774-FLT-regular\">#FLT regular</a> much easier</p>",
        "id": 261384625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636844003
    },
    {
        "content": "<p>Yes, this should hopefully help with one of the totient proofs I've been stuck on :)</p>",
        "id": 261384900,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1636844334
    },
    {
        "content": "<p>Is it easy/reasonable to submit the proof as a PR that depends on the one that's currently under submission (<a href=\"https://github.com/leanprover-community/mathlib/issues/10318\">#10318</a>)?  Or should I wait until that's accepted and merged?</p>",
        "id": 261386419,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636846522
    },
    {
        "content": "<p>While I'm waiting to decide what to do, maybe I can ask for some help in improving the proof.  At one point I end up needing to prove the following equality.  My first draft was quite messy so I took it out as a lemma to work on it separately.  Here's what I ended up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">euler_lemma1</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">nat.cast_sub</span> <span class=\"n\">hp'</span><span class=\"o\">),</span> <span class=\"n\">mul_sub</span><span class=\"o\">],</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hm'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">pow_sub_mul_pow</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"n\">hm'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">hp'</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a nicer way to prove this — some clever tactics for working in <code>ℚ</code> that I've missed?</p>",
        "id": 261386558,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636846796
    },
    {
        "content": "<p>Yes its possible to submit PRs that build on each other, and we have tools to help organise this, see e.g. <a href=\"https://github.com/leanprover-community/mathlib/pull/10255\">https://github.com/leanprover-community/mathlib/pull/10255</a> you just have to put</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">-</span> <span class=\"o\">[</span> <span class=\"o\">]</span> <span class=\"n\">depends</span> <span class=\"n\">on</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"mi\">10318</span>\n</code></pre></div>\n<p>below the </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">---</span>\n</code></pre></div>\n<p>line in the PR message, and the bots will automatically tag it with appropriate labels and let you know when its ready</p>",
        "id": 261387124,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636847690
    },
    {
        "content": "<p>In this case you should make the second branch based off of the branch for the first PR so that it all builds sucessfully in both PRs, then when the first is merged you can do <code>git pull master</code> and <code>git push</code> in the second branch to make the new diff against master now</p>",
        "id": 261387157,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636847762
    },
    {
        "content": "<p>I haven't tried to play with the code, bu I see some casts, so the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_cast\">tactic#norm_cast</a> family (<a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#exact_mod_cast\">tactic#exact_mod_cast</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#push_cast\">tactic#push_cast</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rw_mod_cast\">tactic#rw_mod_cast</a> etc) might be useful to you. Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#field_simps\">tactic#field_simps</a> too, which is good for putting things over a common denominator.</p>",
        "id": 261387223,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636847860
    },
    {
        "content": "<p>Great, thanks very much</p>",
        "id": 261387228,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636847881
    },
    {
        "content": "<p>There is also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#assoc_rw\">tactic#assoc_rw</a>, which might shave a line off your proof, but it becomes very useful when you have to do a lot of manual <code>mul_assoc</code>s</p>",
        "id": 261387280,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636847941
    },
    {
        "content": "<p>I'd try to avoid using finish in a PR to mathlib if I could, it can be quite slow unfortunately</p>",
        "id": 261387286,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636847973
    },
    {
        "content": "<p>Also it looks like you have a <a href=\"https://leanprover-community.github.io/glossary.html#non-terminal-simp\">glossary#non-terminal-simp</a>, which can be quite brittle so we avoid that pattern in mathlib</p>",
        "id": 261387417,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636848076
    },
    {
        "content": "<p>Thanks so much for your help!</p>",
        "id": 261387957,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636848822
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">euler_lemma1</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">],</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">],</span>\n  <span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261388169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636849119
    },
    {
        "content": "<p>Wow, that's so much nicer!  Thanks!</p>",
        "id": 261388562,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636849689
    },
    {
        "content": "<p>It's a lazy proof -- I want to solve this by <code>ring</code> so I just keep trying <code>ring</code> until it works. The first problem is that I need to clear denominators so I do this with <code>field_simp</code> but that tactic isn't smart enough to construct the proof that (p : Q) isn't zero so I have to do it myself (I feed in the proof that it's non-zero as a natural because I knew <code>simp</code> could take it from there). The next issue is that you have used natural subtraction twice. For me, this is unidiomatic, because natural subtraction is not a sensible function; lots of things aren't true for it and it screws up automation. For me, <code>hm : 0 &lt; m</code> and <code>m-1</code> together tell me that you've stated this lemma suboptimally: <code>m</code> should be <code>n+1</code> and there should be no inequality or natural subtraction, if you can possibly help it; that would save the <code>cases m</code> line and the <code>succ_eq_add_one</code> line; I was proving what was put in front of me, not what I would have formalised myself. Having eliminated both nat subtractions with this cases hack I then have to deal with the fact that my hack introduced succs, which I removed and then finally it worked.</p>",
        "id": 261388726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636849930
    },
    {
        "content": "<p>Ok, I'll see what I can do to reformulate it.  I think I can see what I need to change.</p>",
        "id": 261389060,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636850444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> suggested a couple of days ago that my definition of <code>prime_divisors</code> should be equal to <code>factors.to_finset</code>, which it turned out was correct, and I might have saved myself some work if I'd paid more attention to that point.</p>\n<p>With that in mind I'd like to check whether another definition would be worth having: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prime_factorization</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n.factors.to_finset</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">n.factors.count</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">prime_factorization</span> <span class=\"mi\">1200</span><span class=\"o\">)</span>     <span class=\"c1\">-- {(2, 4), (3, 1), (5, 2)}   since 1200 = 2^4 * 3^1 * 5^2</span>\n</code></pre></div>\n<p>Is something like this already defined in mathlib?  Is there a nicer way to express it?</p>",
        "id": 261502464,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636986135
    },
    {
        "content": "<p>just don't <code>to_finset</code> it ;b <code>factors</code> is an ordered list of the prime factors, including multiplicity</p>",
        "id": 261502981,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636986368
    },
    {
        "content": "<p>oh, sorry, I read it wrong. anyways, I'm sure there must be a list/multiset function that counts and places them in a pair like that</p>",
        "id": 261503082,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636986429
    },
    {
        "content": "<p>Is it <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prime_multiset\">docs#prime_multiset</a> or something like that?</p>",
        "id": 261504485,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636987012
    },
    {
        "content": "<p>In <code>data/pnat/factors</code> we have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">factor_multiset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prime_multiset</span>\n</code></pre></div>\n<p>where <code>prime_multiset := multiset nat.primes</code>.  So this gives the multiset of prime factors but not explicitly the counts.  </p>\n<p>Similarly, in <code>data/nat/prime</code> we have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">factors</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>which is the list of all the prime factors but again not the counts.</p>",
        "id": 261505562,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636987505
    },
    {
        "content": "<p>So I suppose whatever purpose might be served by <code>prime_factorization</code> could just as well be served by using <code>factors.to_finset</code> to get the set of prime factors and then extracting the count information by <code>list.count p (factors n)</code>.</p>",
        "id": 261506344,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636987829
    },
    {
        "content": "<p><code>prime_multiset</code> should be burnt to the ground, IMO. and I think if this should exist, this should exist in the form of a function that maps a multiset to a finset of the original thing and its multiplicity</p>",
        "id": 261506385,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636987847
    },
    {
        "content": "<p>Ha!  It certainly seemed a bit unwieldy when I tried using it, and the fact that <code>factor_multiset</code> takes a <code>pnat</code> rather than a <code>nat</code> added an extra little inconvenience.</p>\n<p>Is there not already a function that takes a list <code>L</code> to a list (or finset) of pairs <code>(x, count L x)</code>?  (I don't know how I would go about searching for such a function.)</p>",
        "id": 261507918,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1636988412
    },
    {
        "content": "<p>Yes for multiset you still need to take counts, it just seems a more reasonable data type for a prime factorisation than a list</p>",
        "id": 261509422,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636988986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20of.20Euler's.20product.20formula.20for.20totient/near/261506385\">said</a>:</p>\n<blockquote>\n<p><code>prime_multiset</code> should be burnt to the ground.</p>\n</blockquote>\n<p>Yes please</p>",
        "id": 261515114,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636991058
    },
    {
        "content": "<p>Are you looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.to_finsupp\">docs#multiset.to_finsupp</a>?</p>",
        "id": 261559926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637010801
    },
    {
        "content": "<p>There's no reason it should be noncomputable.</p>",
        "id": 261564639,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637013096
    },
    {
        "content": "<p>Finsupp isn't a particularly computable representation of this data though right?</p>",
        "id": 261565028,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637013291
    },
    {
        "content": "<p>Like if you really wanted to compute something a list of pairs seems much more efficient</p>",
        "id": 261565115,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637013331
    },
    {
        "content": "<p>That said, I agree a better def than <code>finsupp.to_multiset.symm</code> wouldn't go amiss</p>",
        "id": 261565288,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637013393
    },
    {
        "content": "<p>I agree that finsupp isn't a useful computable notion. But going from multiset X to finset (X x pnat), which is isomorphic to a subset of finsupp, is what was originally asked for.</p>",
        "id": 261565522,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637013490
    },
    {
        "content": "<p>So on the one hand we have <code>factors : ℕ → list ℕ</code> with <code>list.count</code> to extract the multiplicities.  And on the other hand we have <code>factor_multiset : nat → prime_multiset</code> with <code>multiset.to_finsupp</code> to extract the multiplicities.  Given the choice, it seems like <code>factors</code> and <code>count</code> is nicer all round.  Are there any advantages to going the <code>multiset</code> route that I'm missing?</p>",
        "id": 261566247,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637013842
    },
    {
        "content": "<p>Did you look at the implementation of multiset.to_finsupp? It also goes through count. What will you be using the counts for? The multiset is more \"basic\" since there's no inherent order to the prime factorization. The list, iirc, is the result of sorting the prime factors.</p>",
        "id": 261567501,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637014427
    },
    {
        "content": "<p>So I think your proposed implementation above via image is the appropriate one.</p>",
        "id": 261567797,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637014552
    },
    {
        "content": "<p>Yeah you gain some API by using multiset is all, like a notion of less than or equal (which corresponds to the original numbers being divisible by each other), or being able to take unions and sums of multisets, whats better depends on your use case</p>",
        "id": 261567906,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637014596
    },
    {
        "content": "<p>Thanks everyone.  I think for now I'll stick with the <code>list</code>-based implementation and see how that goes.</p>",
        "id": 261570234,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637015884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>, its noncomputable because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.has_add\">docs#finsupp.has_add</a> is noncomputable and that's one of the arguments to <code>add_equiv.mk</code></p>",
        "id": 261583855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637024012
    },
    {
        "content": "<p>Yes, that makes sense. I'm just saying the inv_fun of the equiv, which is the forward direction desired here, is computable.</p>",
        "id": 261584723,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637024525
    },
    {
        "content": "<p>After building lots of infrastructure (mostly around <code>prime_factorization</code>) and filling in lots of <code>sorry</code>s I finally have a working <code>sorry</code>-free first draft of the proof.  :D</p>",
        "id": 261904615,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637228243
    },
    {
        "content": "<p>Now I have a bunch of refactoring and tidying up to do, then I'll be ready to submit it as a PR.</p>",
        "id": 261904749,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637228334
    }
]