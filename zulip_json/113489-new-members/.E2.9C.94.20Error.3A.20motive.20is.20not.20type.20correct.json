[
    {
        "content": "<p>This theorem ought to provide a proof directly: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.log_pow_int_eq_self\">docs#submonoid.log_pow_int_eq_self</a> but because the <code>rw</code> above is stuck I'm not able to rewrite <code>⟨b, b', hb⟩</code> as <code>submonoid.pow 2 b'</code>.</p>",
        "id": 264963588,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1639541982
    },
    {
        "content": "<p>try <code>simp only [hb.symm]</code> perhaps?</p>",
        "id": 264964721,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639543054
    },
    {
        "content": "<p>if you see <code>failed</code> or <code>motive is not type correct</code>, just use simp only or simp_rw</p>",
        "id": 264964780,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639543089
    },
    {
        "content": "<p>The \"motive\" is sort of the pattern that <code>rw</code> creates to actually do the rewrite, and sometimes it's not able to create the pattern properly because of dependent types.  If you set <code>set_option pp.proofs true</code>, you can get a clearer picture of the motive it tried to create:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">submonoid.log</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Exists.intro</span> <span class=\"n\">b'</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">b'</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">submonoid.log</span> <span class=\"o\">⟨</span><span class=\"n\">_a</span><span class=\"o\">,</span> <span class=\"n\">Exists.intro</span> <span class=\"n\">b'</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">b'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The <code>_a</code> variable is what's going to be substituted in (the <code>2 ^ b'</code> in this case).  The issue is the definition of <code>powers</code> needs <code>Exists.intro b' hb</code> to have the type <code>∃ (b' : ℕ), 2 ^ b' = _a</code>, but it has type <code>∃ (b' : ℕ), 2 ^ b' = b</code>.  So the motive is not type correct.</p>",
        "id": 264965066,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639543400
    },
    {
        "content": "<p><code>subst hb</code> works in this case.  This does a \"global\" rewrite that avoids this issue that's from trying to do just a single rewrite.</p>",
        "id": 264965076,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639543418
    },
    {
        "content": "<p><code>cases hb</code> works here, too. (It's nice that equality is an inductive type!)</p>",
        "id": 264965149,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639543480
    },
    {
        "content": "<p>Oh wow, this is very interesting. Thanks a lot!</p>",
        "id": 264965790,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1639544165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> has marked this topic as resolved.</p>",
        "id": 264965911,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639544303
    },
    {
        "content": "<p>And like Huỳnh Trần Khanh said, <code>simp</code> and <code>simp_rw</code> are powerful enough to rewrite under the binders as well, which is why they work. <code>rw</code> does not rewrite under binders.</p>",
        "id": 264965927,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639544342
    },
    {
        "content": "<p>There will be situations where <code>subst</code> might not work because your LHS or RHS expression might not be a single term.</p>",
        "id": 264966011,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639544406
    },
    {
        "content": "<p>I see, thanks again! I'll play around with these tactics and see which one works best for my larger problem.</p>",
        "id": 264973235,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1639553116
    }
]