[
    {
        "content": "<p>Hello to all! I'm working with the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.integrals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">real.pi</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span>\n      <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n        <span class=\"bp\">-</span><span class=\"n\">real.pi..real.pi</span><span class=\"o\">,</span>\n        <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">complex.I</span> <span class=\"bp\">*</span> <span class=\"bp\">↑↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">complex.I</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I wanted to be able to apply integration by parts but I have not found such a theorem in the mathlib documentation, can someone help me figure that out?</p>",
        "id": 292612567,
        "sender_full_name": "Julia Ramos Alves",
        "timestamp": 1660062681
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/interval_integral.integral_mul_deriv_eq_deriv_mul\">docs#interval_integral.integral_mul_deriv_eq_deriv_mul</a></p>",
        "id": 292618829,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1660064674
    },
    {
        "content": "<p>I'm still having some trouble in order to set up the necessary conditions to apply integral_mul_deriv_eq_deriv_mul, the current code I have looks like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.fourier</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.integrals</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">fourier_coeff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"bp\">-</span><span class=\"n\">real.pi</span> <span class=\"bp\">..</span> <span class=\"n\">real.pi</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">complex.I</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">calc_cn</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)(</span><span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hg</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">complex.I</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n <span class=\"n\">fourier_coeff</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">complex.I</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fourier_coeff</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n\n\n  <span class=\"c\">/-</span><span class=\"cm\">rw interval_integral.integral_mul_deriv_eq_deriv_mul,-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm trying to set it up in order to avoid the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">?</span><span class=\"n\">m_3..</span><span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>But simp_rw fails and I don't really understand why, can someone give me an insight on that?</p>",
        "id": 292746967,
        "sender_full_name": "Julia Ramos Alves",
        "timestamp": 1660135148
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/interval_integral.integral_mul_deriv_eq_deriv_mul\">docs#interval_integral.integral_mul_deriv_eq_deriv_mul</a> doesn't work because that's for <code>real -&gt; real</code></p>",
        "id": 292748294,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1660135677
    },
    {
        "content": "<p>Do we not have any more general variants?</p>",
        "id": 292802863,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1660153837
    }
]