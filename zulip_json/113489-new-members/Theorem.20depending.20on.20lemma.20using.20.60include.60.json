[
    {
        "content": "<p>Hello, I have this MWE (the proof itself is not important, this is merely a syntax question):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">two_eq_one_plus_one</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">symm</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">three_eq_two_plus_one</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Error is here</span>\n  <span class=\"n\">rw</span> <span class=\"n\">two_eq_one_plus_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The theorem depends on the lemma and the lemma <code>include</code>s two variables. This does not compile and gives the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"kd\">lemma</span> <span class=\"n\">lhs</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">metavariable</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I'm not entirely sure what the error is, I suspect it's because <code>a</code> is converted to an implicit arg and is referenced on the lhs? I found two ways to fix it:</p>\n<ol>\n<li>Either by listing the implicit args:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">three_eq_two_plus_one</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">two_eq_one_plus_one</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Wrapping everything into a section and using <code>parameters</code>:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">parameters</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm not really happy with either, is there something else I could do?<br>\nThanks in advance!</p>",
        "id": 283730472,
        "sender_full_name": "Aron Erben",
        "timestamp": 1653391753
    },
    {
        "content": "<p>Well, it's just that lean can't figure out what <code>a</code> is - it could equally well be <code>2</code> or <code>a + 1</code> or <code>1</code>. I don't think it makes sense for both <code>a</code> and <code>h</code> to be implicit in <code>two_eq_one_plus_one</code></p>",
        "id": 283732078,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653392631
    },
    {
        "content": "<p>Any time you try to rewrite with an equality whose left hand side is a bare variable, you'll hit this error (unless you tell lean what the variable should be)</p>",
        "id": 283732219,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653392702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Theorem.20depending.20on.20lemma.20using.20.60include.60/near/283732078\">said</a>:</p>\n<blockquote>\n<p>Well, it's just that lean can't figure out what <code>a</code> is - it could equally well be <code>2</code> or <code>a + 1</code> or <code>1</code>. I don't think it makes sense for both <code>a</code> and <code>h</code> to be implicit in <code>two_eq_one_plus_one</code></p>\n</blockquote>\n<p>Ah I see, that makes sense. Do you think this is a cleaner, more canonical solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">two_eq_one_plus_one</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">symm</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">three_eq_two_plus_one</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">two_eq_one_plus_one</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 283733473,
        "sender_full_name": "Aron Erben",
        "timestamp": 1653393486
    },
    {
        "content": "<p>I think that makes more sense, yes</p>",
        "id": 283733610,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653393560
    }
]