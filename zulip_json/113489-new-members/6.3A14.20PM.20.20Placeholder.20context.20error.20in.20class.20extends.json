[
    {
        "content": "<p>I am trying to implement <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span></span></span></span>-metric spaces which are like metric spaces but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> replaced by an ordered abelian group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span></span></span></span>. I am running into the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"n\">uLean</span>\n</code></pre></div>\n<p>here is a minimal working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.group</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">algebra.order.group</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_lambda_dist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">lambda_metric_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">has_lambda_dist</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Does anyone know what goes wrong?</p>",
        "id": 286097153,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655223428
    },
    {
        "content": "<p>Lean can't guess Lambda from the information you gave it so it's asking you to supply it</p>",
        "id": 286099367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655224325
    },
    {
        "content": "<p>Aha. And having defined <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span></span></span></span> as a variable does not allow me to use it in all definitions afterwards? Do I have to give <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span></span></span></span> as an input to <code>has_lambda_dist</code> and <code>lambda_metric_space</code>?</p>",
        "id": 286100015,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655224604
    },
    {
        "content": "<p>Why not make <code>Λ</code> explicit? This typechecks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.group</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_lambda_dist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">lambda_metric_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_lambda_dist</span> <span class=\"bp\">Λ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 286100040,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1655224619
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.group</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">algebra.order.group</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_lambda_dist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">lambda_metric_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">has_lambda_dist</span> <span class=\"n\">α</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">algebra.order.group</span>\n</code></pre></div>\n<p>might be a way to do it. <code>variable {Lambda...}</code> doesn't mean \"Let Lambda be a fixed ordered group\", it means \"do nothing, but whenever you see a Lambda later on, add {Lambda : Type u} and all the extra stuff which comes with it to the beginning of the theorem or definition\"</p>",
        "id": 286100133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655224663
    },
    {
        "content": "<p>Aha. My problem was that I took curly brackets {} when I wanted round ones ( ) . But it might also be better to make the definitions depend on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span></span></span></span> explicitly.</p>\n<p>Thanks!</p>",
        "id": 286100913,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655225056
    },
    {
        "content": "<p>I am running into more problems. I try to define an isometry, but Lean forgot what <code>dist</code> means. Specifying <code>Y.dist</code> and <code>X.dist</code>  does not help. Any cues for how to fix it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.group</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_lambda_dist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">lambda_metric_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_lambda_dist</span> <span class=\"bp\">Λ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"c1\">-- more axioms omitted</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">lambda_isometry</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">lambda_metric_space</span> <span class=\"bp\">Λ</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lambda_metric_space</span> <span class=\"bp\">Λ</span> <span class=\"n\">Y</span><span class=\"o\">]</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">isom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 286741748,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655690431
    },
    {
        "content": "<p>Does adding <code>open lambda_metric_space</code> before the last class work?</p>",
        "id": 286748190,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655698453
    },
    {
        "content": "<p>Thank you for the suggestion. It unfortunately does not work. The error I am getting is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">dist'</span>\n</code></pre></div>\n<p>and here is the Lean state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">,</span>\n<span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">lambda_metric_space</span> <span class=\"bp\">Λ</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">lambda_metric_space</span> <span class=\"bp\">Λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 286761845,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655711999
    },
    {
        "content": "<p><code>X.dist</code> can't work, right? It is being resolved to <code>Type.dist X</code> because <code>X : Type*</code>.</p>",
        "id": 286762384,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655712417
    },
    {
        "content": "<p>Yes. I somehow need Lean to see X as a <code>lambda_metric_space</code> instead of as a <code>Type u</code>. <br>\nI would need to be able to access <code>_inst_2</code> in the class statement. Is there a way to do this?</p>",
        "id": 286763000,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655712887
    },
    {
        "content": "<p>The problem is that <code>dist x y</code> could be of type <code>Λ₁</code> or <code>Λ₂</code> if <code>lambda_metric_space Λ₁ X</code> and <code>lambda_metric_space Λ₂ X</code>, so Lean can't decide which one you mean. Instead, you should define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lambda_metric_space</span> <span class=\"bp\">Λ</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span>\n<span class=\"n\">lambda_metric_space.dist</span>\n</code></pre></div>",
        "id": 286763269,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655713081
    },
    {
        "content": "<p>Thanks. But when I write your definition I get the same error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">lambda_metric_space.dist'</span>\n</code></pre></div>\n<p>Now the problem is that <code>lambda_metric_space</code> is not a constant.</p>",
        "id": 286764996,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655714086
    },
    {
        "content": "<p>Add <code>set_option old_structure_cmd true</code> at the top of the file.</p>",
        "id": 286765100,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655714156
    },
    {
        "content": "<p>Thanks. Together with <code>open lambda_metric_space</code>, this fixes the problem with <code>dist</code>. (What does that <code>set_option</code>-incantation do? How could I have found out about it?) However now there is a problem with the equality.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">,</span>\n<span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">lambda_metric_space</span> <span class=\"bp\">Λ</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">lambda_metric_space</span> <span class=\"bp\">Λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>For reference, <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20algebra.order.group%0Aset_option%20old_structure_cmd%20true%0A%0Auniverse%20u%0Avariables%20%28%CE%9B%20%3A%20Type%20u%29%20%5Blinear_ordered_add_comm_group%20%CE%9B%5D%0A%0Aclass%20has_lambda_dist%20%28%CE%B1%20%3A%20Type%20u%29%20%3A%3D%0A%28dist%20%3A%20%CE%B1%20%E2%86%92%20%CE%B1%20%E2%86%92%20%CE%9B%29%0A%0Aclass%20lambda_metric_space%20%28%CE%B1%20%3A%20Type%20u%29%20extends%20has_lambda_dist%20%CE%9B%20%CE%B1%20%3A%3D%0A%28sym%20%3A%20%E2%88%80%20%28p%20q%20%3A%20%CE%B1%29%2C%20dist%20p%20q%20%3D%20dist%20q%20p%29%0A--%20more%20axioms%20omitted%0A%0Aopen%20lambda_metric_space%0A%0Adef%20dist%20%28%CE%9B%20%3A%20Type*%29%20%28X%20%3A%20Type*%29%20%5Blinear_ordered_add_comm_group%20%CE%9B%5D%20%5Blambda_metric_space%20%CE%9B%20X%5D%20%3A%20X%20%E2%86%92%20X%20%E2%86%92%20%CE%9B%20%3A%3D%0Alambda_metric_space.dist%0A%0Aclass%20lambda_isometry%20%28X%20Y%3A%20Type*%20%29%20%5Blambda_metric_space%20%CE%9B%20X%5D%20%5Blambda_metric_space%20%CE%9B%20Y%5D%20%20%3A%3D%0A%28to_fun%20%3A%20X%20%E2%86%92%20Y%29%0A%28isom%20%3A%20%E2%88%80%20x1%20x2%20%3A%20X%20%2C%20dist%20%28to_fun%20x1%29%20%28to_fun%20x2%29%20%3D%20dist%20x1%20x2%29%0A\">here</a> is a mwe.</p>",
        "id": 286766373,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655714953
    },
    {
        "content": "<p>It is because, with new structures, <code>extends has_lambda_dist Λ α</code> means \"create a field <code>to_has_lambda_dist</code>\", not \"copy over the fields from <code>has_lambda_dist</code>\".</p>",
        "id": 286766499,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655715036
    },
    {
        "content": "<p>So what you think is <code>lambda_metric_space.dist</code> is actually <code>has_lambda_dist.dist ∘ lambda_metric_space.to_has_lambda_dist</code>.</p>",
        "id": 286766552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655715099
    }
]