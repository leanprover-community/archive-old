[
    {
        "content": "<p>Below is the code, which makes Lean typechecker unhappy:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n  <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">neg_fn</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₀</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>and the error I am getting is:<br>\nfailed to synthesize  type class instance for has_lt ℚ:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"n\">n₀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₀</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_lt</span> <span class=\"n\">ℚ</span>\n</code></pre></div>\n\n\n<p>By looking at the documentation [1], I see there is no has_lt instance for rationals.  However, the error goes away if I import data.real.basic (but not changing anything else). So my questions are:</p>\n<ol>\n<li>why there is not has_lt typeclass for rationals (is there something I am missing obvious)?</li>\n<li>when I am import data.real.basic, is ℚ is coerced to ℝ? </li>\n</ol>\n<p>[1] <a href=\"https://leanprover-community.github.io/mathlib_docs/data/rat/basic.html\">https://leanprover-community.github.io/mathlib_docs/data/rat/basic.html</a></p>",
        "id": 203625931,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1594525473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239476\">@Mukesh Tiwari</span> <a href=\"https://leanprover-community.github.io/mathlib_docs/data/rat/order.html\">https://leanprover-community.github.io/mathlib_docs/data/rat/order.html</a></p>",
        "id": 203627102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594527725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Thank you very much.</p>",
        "id": 203627266,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1594528083
    },
    {
        "content": "<p>Imports are transitive</p>",
        "id": 203637951,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594550151
    },
    {
        "content": "<p>So you import the file that Johan pointed to when you say <code>import data.real.basic</code></p>",
        "id": 203637991,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594550193
    }
]