[
    {
        "content": "<p>Say I have a goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">some_type</span>\n<span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">η</span> <span class=\"bp\">≈</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">z</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Is it possible to move the <code>let a := b + c in</code> out of the goal, by introducing a new hypothesis for <code>a</code>? So that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">some_type</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int</span>\n<span class=\"n\">h_a</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">η</span> <span class=\"bp\">≈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">z</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Or something along those lines...</p>",
        "id": 222877825,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610726179
    },
    {
        "content": "<p>I guess you could use the <code>let</code> tactic with <code>change</code>. Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 222878254,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610726363
    },
    {
        "content": "<p>Normally we try to avoid using <code>let</code> in definitions</p>",
        "id": 222878767,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610726539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Move.20.60let.20.2E.2E.2E.20in.60.20out.20of.20goal/near/222878254\">said</a>:</p>\n<blockquote>\n<p>I guess you could use the <code>let</code> tactic with <code>change</code>. Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>\n</blockquote>\n<p>Here's an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">some_type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">some_func</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">some_type</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">z</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">some_type</span><span class=\"o\">,</span> <span class=\"n\">η</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">some_func</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">η</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">some_func</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222879936,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610726970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Move.20.60let.20.2E.2E.2E.20in.60.20out.20of.20goal/near/222878767\">said</a>:</p>\n<blockquote>\n<p>Normally we try to avoid using <code>let</code> in definitions</p>\n</blockquote>\n<p>Oh interesting, how do you replace them? E.g. right now I'm trying to prove a lemma about the following function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">propagate_edges</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">network.graph</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">network.graph.edge</span> <span class=\"bp\">→</span> <span class=\"n\">network.graph</span>\n  <span class=\"bp\">|</span> <span class=\"n\">η</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">η</span>\n  <span class=\"bp\">|</span> <span class=\"n\">η</span> <span class=\"o\">(</span><span class=\"n\">eₕ</span> <span class=\"o\">::</span> <span class=\"n\">eₜ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">rtr</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">η.data</span> <span class=\"n\">eₕ.dst.rtr</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">input'</span> <span class=\"o\">:=</span> <span class=\"n\">rtr.input.update_nth</span> <span class=\"n\">eₕ.dst.prt</span> <span class=\"n\">v</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">rtr'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">reactor</span> <span class=\"bp\">.</span> <span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"n\">input'</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">rtr</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">η'</span> <span class=\"o\">:=</span> <span class=\"n\">η.update_data</span> <span class=\"n\">eₕ.dst.rtr</span> <span class=\"n\">rtr'</span> <span class=\"k\">in</span>\n    <span class=\"n\">propagate_edges</span> <span class=\"n\">η'</span> <span class=\"n\">eₜ</span>\n</code></pre></div>\n<p>I know that I technically <em>could</em> remove all of the <code>let in</code> expressions, but that would make it unreadable.</p>",
        "id": 222880188,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610727056
    },
    {
        "content": "<p>Well, for your immediate question, you can do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">some_type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">some_func</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">some_type</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">z</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">some_type</span><span class=\"o\">,</span> <span class=\"n\">η</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">some_func</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">η</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">some_func</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222880905,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610727354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/113489-new-members/topic/Move.20.60let.20.2E.2E.2E.20in.60.20out.20of.20goal/near/222880188\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Move.20.60let.20.2E.2E.2E.20in.60.20out.20of.20goal/near/222878767\">said</a>:</p>\n<blockquote>\n<p>Normally we try to avoid using <code>let</code> in definitions</p>\n</blockquote>\n<p>Oh interesting, how do you replace them?</p>\n</blockquote>\n<p>Some combination of auxiliary top-level definitions and just writing expressions inline; though really in math we tend not to encounter definitions like this in the first place</p>",
        "id": 222883594,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610728247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Ok that makes sense. In this case <code>propagates_edges</code> performs one step of a computation, and splitting that up further would really just be splitting for its own sake.</p>",
        "id": 222884396,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610728505
    }
]