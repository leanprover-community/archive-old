[
    {
        "content": "<p>Hi all,</p>\n<p>I am attempting to define a structure / record that has 1 list, 1 record, and 3 sets. My code so far looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">InputInfo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">outputRef</span>     <span class=\"o\">:</span> <span class=\"n\">TxOutputRef</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">validatorHash</span> <span class=\"o\">:</span> <span class=\"n\">HashId</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">datumHash</span>     <span class=\"o\">:</span> <span class=\"n\">HashId</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">redeemerHash</span>  <span class=\"o\">:</span> <span class=\"n\">HashId</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">value</span>         <span class=\"o\">:</span> <span class=\"n\">Value</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Where HashId and Value are variables defined as :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">HashId</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">Value</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>and TxOutputRef is an additional structure currently defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">TxOutputRef</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hid</span>  <span class=\"o\">:</span> <span class=\"n\">HashId</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>From my understanding of structures in Lean, this seems possible. However, the Lean compiler throws an error where TxOutputRef  is expected to have a type TxOutputRef (what I want) but instead has type of set ℕ. My compiler has a similar with Value,  saying that it expects a Value but is returning a list ℕ  (which makes sense because Value is defined above as a list).</p>\n<p>I am still pretty new to Lean and do not completely understand how to define a structure after looking at the LeanWiki. Is there something I am missing?</p>",
        "id": 247750766,
        "sender_full_name": "Jessa Gegax",
        "timestamp": 1627672890
    },
    {
        "content": "<p>You want to say <code>def HashId : Type := set nat</code> and <code>def Value : Type := list nat -&gt; list nat -&gt; nat</code>. Otherwise, you've structured it that your InputInfo structure is expecting explicit arguments of type <code>set nat</code> and <code>list nat -&gt; list nat -&gt; nat</code>, that you named HashId and Value.</p>",
        "id": 247751150,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627673128
    },
    {
        "content": "<p>You want to be defining type synonyms. <code>variables</code> is instead used when you want to postulate the existence of some terms of a specified type, to be used in downstream definitions or theorems.</p>",
        "id": 247751344,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627673228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417200\">Jessa Gegax</span> has marked this topic as resolved.</p>",
        "id": 247752014,
        "sender_full_name": "Notification Bot",
        "timestamp": 1627673616
    },
    {
        "content": "<p>This makes a lot more sense, thank you!</p>",
        "id": 247752039,
        "sender_full_name": "Jessa Gegax",
        "timestamp": 1627673634
    }
]