[
    {
        "content": "<p>any tips to make this code look less egregious</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.sort</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">adaptor</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">rest</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">then</span> <span class=\"n\">head</span> <span class=\"k\">else</span> <span class=\"n\">min</span> <span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">adaptor</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux3</span> <span class=\"o\">(</span><span class=\"n\">values</span> <span class=\"n\">values'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">values</span> <span class=\"bp\">~</span> <span class=\"n\">values'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adaptor</span> <span class=\"n\">values</span> <span class=\"bp\">=</span> <span class=\"n\">adaptor</span> <span class=\"n\">values'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">he</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span> <span class=\"n\">hh</span> <span class=\"n\">aw</span> <span class=\"n\">ajd</span> <span class=\"n\">jvkd</span> <span class=\"n\">akdls</span> <span class=\"n\">fks</span> <span class=\"n\">ala</span> <span class=\"n\">fvn</span> <span class=\"n\">wow</span> <span class=\"n\">vnd</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">adaptor</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">adaptor</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">list.perm_nil.mp</span> <span class=\"o\">(</span><span class=\"n\">hf.symm</span><span class=\"o\">),</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h_1</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h_1</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">list.perm_nil.mp</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">adaptor</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">adaptor</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">adaptor</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">adaptor</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">hh</span> <span class=\"o\">::</span> <span class=\"n\">ajd</span> <span class=\"bp\">≠</span> <span class=\"n\">list.nil</span> <span class=\"o\">:=</span> <span class=\"n\">list.cons_ne_nil</span> <span class=\"n\">hh</span> <span class=\"n\">ajd</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">hh</span> <span class=\"o\">::</span> <span class=\"n\">ajd</span> <span class=\"bp\">≠</span> <span class=\"n\">list.nil</span> <span class=\"o\">:=</span> <span class=\"n\">list.cons_ne_nil</span> <span class=\"n\">hh</span> <span class=\"n\">ajd</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">min_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">min_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">min_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">min_comm</span> <span class=\"o\">(</span><span class=\"n\">adaptor</span> <span class=\"n\">ajd</span><span class=\"o\">)</span> <span class=\"n\">aw</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">wow</span><span class=\"o\">,</span> <span class=\"n\">vnd</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240893199,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622521165
    },
    {
        "content": "<p>Absolute <a href=\"https://github.com/leanprover-community/mathlib/issues/1\">#1</a> suggestion --- learn to use braces to delimit subgoals!</p>",
        "id": 240893254,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622521204
    },
    {
        "content": "<p>Basically if <em>ever</em> a tactic results in multiple goals, the next line should start with a brace. (Exceptions only if the next line is <code>swap</code> or <code>show</code> to reorder the goals.)</p>",
        "id": 240893284,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622521267
    },
    {
        "content": "<p>After that, read the <a href=\"https://leanprover-community.github.io/contribute/style.html\">#style</a> guide.</p>",
        "id": 240893300,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622521298
    },
    {
        "content": "<p>Put multiple <code>rw</code> on the same line using <code>rw [a, b, c]</code>.</p>",
        "id": 240893343,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622521325
    },
    {
        "content": "<p>If a tactic introduces new hypotheses that you actually use, name them yourself instead of using the auto-generated names.</p>",
        "id": 240893361,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622521357
    },
    {
        "content": "<p>(all those comments are without even attempting to read the statement or proof. :-)</p>",
        "id": 240893381,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622521391
    },
    {
        "content": "<p>You should rarely be using <code>rw adaptor</code> where <code>adaptor</code> is an inductive definition. Instead, make sure you have proved the appropriate <code>@[simp] lemma adaptor_nil : ... := rfl</code> and <code>@[simp] lemma adaptor_cons : ... := rfl</code> lemmas. (Or use the <code>@[simps]</code> attribute to automatically generate them.)</p>",
        "id": 240893503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622521548
    },
    {
        "content": "<p>Writing good <code>@[simp]</code> lemmas is essential for nearly every definition you write.</p>",
        "id": 240893553,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622521566
    },
    {
        "content": "<p>(You should always be hoping that the borings corners of your proof are <code>by { intros, ext, simp, }</code>, and when they are not, you should wonder if they could be.)</p>",
        "id": 240893587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622521613
    },
    {
        "content": "<p>(Okay, maybe that it slightly overstating the case. But good <code>@[ext]</code> and <code>@[simp]</code> lemmas make life easier for everyone who comes afterwards, so are worth thinking about!)</p>",
        "id": 240894009,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622522162
    },
    {
        "content": "<p>From a more mathematical point of view, you might find it easier to leverage the existing lemma <code>list.perm.foldr_eq</code>. Here's my attempt at this approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.sort</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">adaptor</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">rest</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">then</span> <span class=\"n\">head</span> <span class=\"k\">else</span> <span class=\"n\">min</span> <span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">adaptor</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">adaptor_aux</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">with_top</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"n\">coe</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">⊓</span><span class=\"o\">)</span> <span class=\"bp\">⊤</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">adaptor_aux_cons_ne_top</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adaptor_aux</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">with_top.coe_ne_top</span> <span class=\"o\">(</span><span class=\"n\">inf_eq_top_iff.mp</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">adaptor_aux_eq_top</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adaptor_aux</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">list.nil</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">adaptor_aux_cons_ne_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span> <span class=\"n\">congr_arg</span> <span class=\"n\">adaptor_aux</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">adaptor_eq_adaptor_aux</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adaptor</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">option.get_or_else</span> <span class=\"o\">(</span><span class=\"n\">adaptor_aux</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">list.nil</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">with_top.coe_eq_coe</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">⊓</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">option.get_or_else_of_ne_none</span> <span class=\"o\">(</span><span class=\"n\">adaptor_aux_cons_ne_top</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">if_neg</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">with_top.coe_inf</span><span class=\"o\">],</span>\n      <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">⊓</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">option.get_or_else_of_ne_none</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">adaptor_aux_eq_top</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hl</span><span class=\"o\">)],</span>\n      <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux3_aux</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adaptor_aux</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">adaptor_aux</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.perm.foldr_eq</span> <span class=\"n\">inf_left_comm</span> <span class=\"o\">(</span><span class=\"n\">list.perm.map</span> <span class=\"n\">coe</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">⊤</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux3</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adaptor</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">adaptor</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">adaptor_eq_adaptor_aux</span><span class=\"o\">,</span> <span class=\"n\">adaptor_eq_adaptor_aux</span><span class=\"o\">,</span> <span class=\"n\">aux3_aux</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 240902625,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1622531601
    },
    {
        "content": "<p>For an approach closer to your initial version, you can also do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.sort</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">adaptor</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">rest</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">then</span> <span class=\"n\">head</span> <span class=\"k\">else</span> <span class=\"n\">min</span> <span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">adaptor</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">adaptor</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cons_eq_min</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l0</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]),</span> <span class=\"n\">adaptor</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">adaptor</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">l0</span>    <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">l0</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cons_eq</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">l₂</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">adaptor</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">adaptor</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">adaptor</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">adaptor</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cons_eq_min</span> <span class=\"n\">p₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">((</span><span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">cons_eq_min</span> <span class=\"n\">p₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux3</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adaptor</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">adaptor</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">_</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">g</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">wow</span> <span class=\"n\">vnd</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hf.symm.eq_nil</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">cons_eq</span> <span class=\"o\">(</span><span class=\"n\">l.cons_ne_nil</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">l.not_perm_nil_cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hf.trans</span> <span class=\"o\">(</span><span class=\"n\">list.perm_nil.mpr</span> <span class=\"n\">j</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">min_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">min_left_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">wow.trans</span> <span class=\"n\">vnd</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">adaptor</span>\n</code></pre></div>\n<p>Note that with this version you again have to walk around the weirdness of the definition of <code>adaptor</code> for <code>[]</code>, but you do it \"internally\".</p>",
        "id": 240924604,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622545048
    }
]