[
    {
        "content": "<p>I was wondering if I use subtypes (and coercions to their supertype) correctly. For example, let's define a subtype of lists of length, say, at most 5:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">short_list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Now, given some <code>sl : short_list α</code>, I naturally would like to re-use functions from <code>list</code>. For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sl</span> <span class=\"o\">:</span> <span class=\"n\">short_list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> What I would like to have -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">sl</span> <span class=\"c1\">-- error - expected list but got short_list</span>\n<span class=\"c\">/-</span><span class=\"cm\"> What also does not work -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">sl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- error since no coercion to list is known</span>\n<span class=\"c\">/-</span><span class=\"cm\"> What works but is not what I want -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">sl</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</pre></div>\n\n\n<p>So what I ended up doing is this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">short_list_to_list</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">short_list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">sl</span><span class=\"o\">,</span> <span class=\"n\">sl</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">elim_cast</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">coe_short_list</span> <span class=\"o\">(</span><span class=\"n\">sl</span> <span class=\"o\">:</span> <span class=\"n\">short_list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">sl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sl</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Works -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">sl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Does not work -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">sl</span>\n</pre></div>\n\n\n<p>Is this the best I can do? Is it the right thing to do? If so, shouldn't these kind of coercions be created automatically?</p>",
        "id": 167842060,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1560253582
    },
    {
        "content": "<p>I guess that <code>short_list alpha</code> is a wrapper for subtype, so even if there was a coercion from subtype it wouldn't trigger for short_lists.</p>",
        "id": 167846868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560257757
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">subtype</span>\n\n<span class=\"n\">def</span> <span class=\"n\">short_list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">subtype_coe_thing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">has_coe</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sl</span> <span class=\"o\">:</span> <span class=\"n\">short_list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">sl&#39;</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">})</span>\n\n<span class=\"c1\">-- #check list.length (sl : list α) -- fails</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">sl&#39;</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 167847115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560257904
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">--instance short_list_to_list : has_coe (short_list α) (list α) := by apply_instance -- fails</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">short_list_to_list</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">short_list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">short_list</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works</span>\n</pre></div>\n\n\n<p>I could imagine that sometimes people make these wrapper definitions precisely to switch _off_ some automatic coercion!</p>",
        "id": 167847247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560258003
    },
    {
        "content": "<p>Oh great, that's exactly what I was looking for - thanks a lot Kevin :)</p>",
        "id": 167849179,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1560259412
    },
    {
        "content": "<p>I'm not sure it is :-(</p>",
        "id": 167849277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560259470
    },
    {
        "content": "<p>I still had to coerce to <code>list alpha</code>.</p>",
        "id": 167849296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560259488
    },
    {
        "content": "<p>Hah, yeah - let me rephrase: the <code>subtype_coe_thing</code> part was exactly what I was having in my mind, that is a general coercion from subtypes to supertypes. The explicit coercion to <code>list</code> is still not \"perfect\".</p>",
        "id": 167849799,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1560259829
    },
    {
        "content": "<p>Moreover, I'd be very interested why that kind of automatic coercion is not enabled/built in. On a similar note, one cannot cast datatypes if the carrier type has a coercion. For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(([</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">option_to_option</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list</span>  <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">))</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(([</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 167849974,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1560259956
    }
]