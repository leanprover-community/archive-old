[
    {
        "content": "<p>Hello everyone, </p>\n<p>I would like to ask you if there is a way to apply a rewrite tactic on a particular term. For example, if I want to replace only the second term of an expression.</p>\n<p>Thank you.</p>",
        "id": 187718728,
        "sender_full_name": "Hamza Maimoune",
        "timestamp": 1581171763
    },
    {
        "content": "<p>You can perform something like:</p>\n<div class=\"codehilite\"><pre><span></span>conv_rhs {\n  rw [what you want]\n}\n</pre></div>\n\n\n<p>It'll rewrite the right hand only.<br>\nInside of a conv block, you can use <code>congr</code> in order to split parts of your equation, like if you have <code>A * B</code>, <code>congr</code> will give you two goals <code>A</code> then <code>B</code>, you can use <code>skip</code> to through some you don't want.</p>",
        "id": 187718990,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1581172248
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md</a> might help</p>",
        "id": 187719039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581172330
    },
    {
        "content": "<p>Thank you both</p>",
        "id": 187719192,
        "sender_full_name": "Hamza Maimoune",
        "timestamp": 1581172696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263073\">@Hamza MAIMOUNE</span> , please also try:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"n\">occurrences</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The syntax is awfully verbose but it can still be quicker than a complicated conv navigation.</p>",
        "id": 187730281,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581193801
    }
]