[
    {
        "content": "<p>Trying to get the <a href=\"https://leanprover-community.github.io/mathlib_docs/hole_commands.html#Equations%20Stub\">equations stub hole command</a>  similar to what <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  does in the <a href=\"https://youtu.be/Y7zjInL82-Q?t=550\">metaprogramming videos</a>. When I try it I end up with a bunch of metavariables in the stubbed equations... What am I doing wrong?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Y7zjInL82-Q\" href=\"https://youtu.be/Y7zjInL82-Q?t=550\"><img src=\"https://uploads.zulipusercontent.net/c1ec5abbbdef059c234de7396100710d4c6e9158/68747470733a2f2f692e7974696d672e636f6d2f76692f59377a6a496e4c38322d512f64656661756c742e6a7067\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.var</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.sort</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"n\">ᾰ</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.mvar</span> <span class=\"n\">unique</span> <span class=\"n\">pretty</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.local_const</span> <span class=\"n\">unique</span> <span class=\"n\">pretty</span> <span class=\"n\">bi</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">ᾰ</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.lam</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">var_type</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">var_type</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.elet</span> <span class=\"n\">var_name</span> <span class=\"n\">type</span> <span class=\"n\">assignment</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.macro</span> <span class=\"n\">ᾰ</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 259424903,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1635442564
    },
    {
        "content": "<p>Is that code block the result of what the hole command gave back to you? Looks good to me.</p>",
        "id": 259425384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635442795
    },
    {
        "content": "<p>The <code>ᾰ</code>s are ugly. So they should be replaced. Maybe the hole command can be taught to do that.</p>",
        "id": 259425463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635442819
    },
    {
        "content": "<p>Ya, the code block is the result of the hole command. However, in the metaprogramming videos linked to above Rob Lewis somehow manages to use what appears to be the same hole command without getting metavariables. They come out more nicely as <code>(var a)</code> etc.</p>",
        "id": 259426018,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1635443073
    },
    {
        "content": "<p>Oh, ya, just realized in the video they don't have the <code>expr</code> name prepended in dot notation either... So maybe it's something different entirely...?</p>",
        "id": 259426105,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1635443128
    },
    {
        "content": "<p>That's because he used an old version of Lean.</p>",
        "id": 259426127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635443135
    },
    {
        "content": "<p>You're using \"metavariable\" to mean \"a variable with an ugly name\". That's not what it means.</p>",
        "id": 259426152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635443148
    },
    {
        "content": "<p>If you write <code>open expr</code> before your definition, I guess the <code>expr.</code> will go away.</p>",
        "id": 259426170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635443160
    },
    {
        "content": "<p>A metavariable is a thing that appears in the goal view as <code>?m1</code> or similar</p>",
        "id": 259426224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635443171
    },
    {
        "content": "<p>Got it. Yes, that makes sense re: <code>open expr</code>.</p>",
        "id": 259426326,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1635443233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Hole.20commands/near/259426224\">said</a>:</p>\n<blockquote>\n<p>A metavariable is a thing that appears in the goal view as <code>?m1</code> or similar</p>\n</blockquote>\n<p>Thanks, Eric. Yes, I thought I probably wasn't stating that correctly, but I wasn't sure how else to communicate 'variable with an ugly name' succinctly. <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 259426519,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1635443325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"378478\">Ashley Blacquiere</span> has marked this topic as resolved.</p>",
        "id": 259426530,
        "sender_full_name": "Notification Bot",
        "timestamp": 1635443333
    }
]