[
    {
        "content": "<p>I created a repository for my Lean files on GitHub.</p>\n<p>I cloned my repository to a directory on my Ubuntu computer.</p>\n<p>I CD'd to the directory and ran <code>code</code> on a file.  There was no Lean there.</p>\n<p>I then ran <code>leanproject new</code> in the directory.</p>\n<p>Now I can't commit to my original GitHub.  I think it think's it is <code>mathlib</code>.  It is giving me this message after I do a <code>git push</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">current</span> <span class=\"n\">branch</span> <span class=\"n\">master</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">upstream</span> <span class=\"n\">branch.</span>\n<span class=\"n\">To</span> <span class=\"n\">push</span> <span class=\"n\">the</span> <span class=\"n\">current</span> <span class=\"n\">branch</span> <span class=\"n\">and</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">remote</span> <span class=\"n\">as</span> <span class=\"n\">upstream</span><span class=\"o\">,</span> <span class=\"n\">use</span>\n\n    <span class=\"n\">git</span> <span class=\"n\">push</span> <span class=\"c1\">--set-upstream origin master</span>\n</code></pre></div>\n<p>What is the right way to set up my own repository of Lean files and work with it in such a way that commits to it don't try to commit to <code>mathlib</code>?</p>\n<p>Also, look at [the docs](), what is an \"oleans\" file?</p>\n<p>I can relocate my set of .lean files, I just need to know the directory structure that <code>leanproject</code> expects, where to put my files in that structure, so that they can be their own github repository, not intertwined with the Lean distribution.</p>",
        "id": 218958436,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607210043
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/leanproject.html\">https://leanprover-community.github.io/leanproject.html</a></p>",
        "id": 218958450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607210092
    },
    {
        "content": "<p><code>leanproject new my_project</code></p>",
        "id": 218958458,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607210113
    },
    {
        "content": "<p>That has a .git subdirectory.   So it is creating a repository instance.  Where do I clone my Git repository?  Under <code>src</code>?</p>",
        "id": 218958609,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607210392
    },
    {
        "content": "<p>One project, one repository. <code>.git</code> directory is always in the root of a git repo.  I don't understand what you are not following here.</p>",
        "id": 218958668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607210453
    },
    {
        "content": "<p>You can have lots of lean files in one repository.</p>",
        "id": 218958676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607210465
    },
    {
        "content": "<p>I have my own .lean file repository, <a href=\"https://github.com/catskillsresearch/grundbegriffe\">https://github.com/catskillsresearch/grundbegriffe</a>.  It just has lean files.</p>\n<p>When I do leanproject new grundbegriffe, it does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"c1\">--detach d4bd4cdaabcfddfb4215dca26b317aa32030bf79</span>\n</code></pre></div>\n<p>This creates a directory that has a <code>.git</code> repository structure.  I can't do <code>git  clone https://github.com/catskillsresearch/grundbegriffe.git</code> directly into this, because it will have it's own <code>.git</code> file because it is it's own repository.</p>\n<p>I think the answer is that I should do my <code>git clone</code> under <code>src</code>.</p>\n<p>Kevin do you understand what my confusion is?  Two separate repositories can't have .git files in the same subdirectory.</p>",
        "id": 218958802,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607210649
    },
    {
        "content": "<p>I don't understand why you can't just start again, make a project with leanproject, and put all your lean files in that properly-made correctly-formatted project (in <code>src</code>), and now you have a working project which you can push to github at your leisure.</p>",
        "id": 218958818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607210725
    },
    {
        "content": "<p>Because if I push it to github I will be pushing it to your github, which might be considered impolite.</p>",
        "id": 218958875,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607210861
    },
    {
        "content": "<p>you are talking nonsense.</p>",
        "id": 218958879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607210873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> you can set which remote repo you want to push to with git</p>",
        "id": 218958923,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607210915
    },
    {
        "content": "<p>If you make a project with leanproject then it is just a standalone git project, it is not connected to github in any way.</p>",
        "id": 218958939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607210975
    },
    {
        "content": "<p>(see <a href=\"https://git-scm.com/docs/git-remote\">https://git-scm.com/docs/git-remote</a>)</p>",
        "id": 218958998,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607211036
    },
    {
        "content": "<p>OK so I need the <code>git</code> command which causes the resulting leanproject directory to save to <code>https://github.com/catskillsresearch/grundbegriffe.git</code>.</p>",
        "id": 218959000,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607211041
    },
    {
        "content": "<p>so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">remote</span> <span class=\"n\">add</span> <span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">catskillsresearch</span><span class=\"bp\">/</span><span class=\"n\">grundbegriffe.git</span>\n</code></pre></div>\n<p>?</p>",
        "id": 218959011,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607211094
    },
    {
        "content": "<p>you can find pretty much everything you need for using git using google, given that practically every software engineer uses it :)<br>\n<a href=\"https://docs.github.com/en/free-pro-team@latest/github/using-git/adding-a-remote\">https://docs.github.com/en/free-pro-team@latest/github/using-git/adding-a-remote</a></p>",
        "id": 218959066,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607211164
    },
    {
        "content": "<p>I appreciate the advice.  For now I will go with this sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">leanproject</span> <span class=\"n\">new</span> <span class=\"n\">lean</span>\n<span class=\"n\">cd</span> <span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span>\n<span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">catskillsresearch</span><span class=\"bp\">/</span><span class=\"n\">grundbegriffe.git</span>\n<span class=\"n\">cd</span> <span class=\"n\">grundbegriffe</span>\n<span class=\"n\">code</span>\n</code></pre></div>",
        "id": 218959097,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607211230
    },
    {
        "content": "<p>Because at the level of <code>src</code> it still thinks it's in the originally cloned repository.  If I do it that way and cd into src/grundbegriffe, then it thinks it's in my repository and forgets about the parent repository.</p>",
        "id": 218959165,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607211341
    },
    {
        "content": "<p>I would instead recommend that you delete your grundbegriffe repo, which is not a correctly formatted lean repo, and instead create a repo with leanproject and then push that repo to github. Your error was dumping a bunch of lean files on github in an incorrectly formatted way and until you fix this error by deleting the repo you are bound to have problems.</p>",
        "id": 218959184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607211362
    },
    {
        "content": "<p>The code you posted above will create two git projects which is not what you want.</p>",
        "id": 218959213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607211392
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I will follow that advice.</p>",
        "id": 218959218,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607211402
    },
    {
        "content": "<p>The lean files still want to go in <code>src</code>, correct?   As opposed to in the main directory.</p>",
        "id": 218959230,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607211437
    },
    {
        "content": "<p>yes</p>",
        "id": 218959295,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607211572
    },
    {
        "content": "<p>You could clone a repo like the tutorial project, following the instructions on the website I linked to above, if you want to check what a correctly-formatted project looks like.</p>",
        "id": 218960262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607213273
    },
    {
        "content": "<p>Final solution, for an existing set of <code>.lean</code> files in directory <code>oldproject</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">leanproject</span> <span class=\"n\">new</span> <span class=\"n\">grundbegriffe</span>\n<span class=\"n\">mv</span> <span class=\"n\">oldproject</span><span class=\"bp\">/*.</span><span class=\"n\">lean</span> <span class=\"n\">grundbegriffe</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/.</span>\n<span class=\"n\">cd</span> <span class=\"n\">grundbegriffe</span>\n<span class=\"n\">git</span> <span class=\"n\">add</span> <span class=\"bp\">.</span><span class=\"n\">gitignore</span> <span class=\"n\">leanpkg.toml</span> <span class=\"n\">src</span>\n<span class=\"n\">git</span> <span class=\"n\">commit</span> <span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"s2\">\"first commit\"</span>\n<span class=\"n\">git</span> <span class=\"n\">remote</span> <span class=\"n\">add</span> <span class=\"n\">origin</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">catskillsresearch</span><span class=\"bp\">/</span><span class=\"n\">grundbegriffe.git</span>\n<span class=\"n\">git</span> <span class=\"n\">push</span> <span class=\"bp\">-</span><span class=\"n\">u</span> <span class=\"n\">origin</span> <span class=\"n\">master</span>\n</code></pre></div>",
        "id": 218960536,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607213696
    },
    {
        "content": "<p>looks good i think</p>",
        "id": 218960611,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607213824
    }
]