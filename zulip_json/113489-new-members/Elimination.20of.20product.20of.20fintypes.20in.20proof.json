[
    {
        "content": "<p>I'm testing out notation for n-dim \"matrices\" by reworking data.matrix.notation. I had a wrong defn for vec_cons before. Now that I've fixed it, I'm trying to prove the amended lemmas, but I don't know the right tactic invocation to reduce the indexing. mwe with sorry'd lemma below:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_empty</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">fin_zero_elim</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">ni</span><span class=\"o\">,</span> <span class=\"n\">hni</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">mi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">ni</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">mi</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_of_succ_lt_succ</span> <span class=\"n\">hk</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">mi</span><span class=\"o\">)))</span> <span class=\"n\">hni</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`!</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">vec_cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">vec_empty</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_head</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pos&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_tail</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_lt_succ</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">empty_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[]</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">cons_val_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">vec_cons</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201568690,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592802759
    },
    {
        "content": "<p>Doing <code>cases m</code> doesn't seem productive since the defn of <code>vec_cons</code> just relies on passing <code>0</code> to access the <code>h mi</code> case, which is just the element we just <code>vec_cons</code>'d in.</p>",
        "id": 201568905,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592803128
    },
    {
        "content": "<p>not helpful for your <code>sorry</code>, I guess, but starting definitions with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>is unfortunately not a good idea, because a pair <code>p</code> is not defeq to <code>⟨p.1,p.2⟩</code>. (Of course they are provably equal.)<br>\nHence it's better to write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">blabla</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">foobar</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 201569858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592804713
    },
    {
        "content": "<p>Your suggested syntax throws an error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_empty</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- λ ⟨n, i⟩, fin_zero_elim n</span>\n<span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">fin_zero_elim</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"c1\">--type mismatch, term</span>\n<span class=\"c1\">--  λ (p : fin 0 × ι), fin_zero_elim p.fst</span>\n<span class=\"c1\">--has type</span>\n<span class=\"c1\">--  Π (p : fin 0 × ι), ?m_1[p] p.fst : Sort (imax 1 ?)</span>\n<span class=\"c1\">--but is expected to have type</span>\n<span class=\"c1\">--  fin 0 × ι → α : Type u</span>\n</code></pre></div>\n\n\n<p>Is there some <code>pi.instance</code> I should be employing?</p>",
        "id": 201613352,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592836603
    },
    {
        "content": "<p>Does it help to write <code>@fin_zero_elim</code> explicitly?</p>",
        "id": 201613570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592836713
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">fin_zero_elim</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</code></pre></div>",
        "id": 201613686,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592836766
    },
    {
        "content": "<p>That's using <code>@fin_zero_elim</code></p>",
        "id": 201613713,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592836779
    },
    {
        "content": "<p>You will have to write some other stuff too.</p>",
        "id": 201614063,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592836932
    },
    {
        "content": "<p>Right, sorry</p>",
        "id": 201614152,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592836977
    },
    {
        "content": "<p>I think eta expanding is likely better.</p>",
        "id": 201615100,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592837401
    },
    {
        "content": "<p>Something like <code>λ p x, fin_zero_elim p.1 x</code></p>",
        "id": 201615176,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592837416
    },
    {
        "content": "<p>I don't understand what would be the term of <code>fin 0 -&gt; Sort u</code> that would be required for the implicit argument of <code>fin_zero_elim</code>. I have the following working using composition, but earlier posts in the channel suggested staying away from composition.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_empty</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">fin_zero_elim</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_empty&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">fin_zero_elim</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_empty&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">fin_zero_elim</span> <span class=\"err\">∘</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"c1\">--type mismatch, term</span>\n<span class=\"c1\">--  λ (p : fin 0 × ι), fin_zero_elim p.fst</span>\n<span class=\"c1\">--has type</span>\n<span class=\"c1\">--  Π (p : fin 0 × ι), ?m_1[p] p.fst : Sort (imax 1 ?)</span>\n<span class=\"c1\">--but is expected to have type</span>\n<span class=\"c1\">--  fin 0 × ι → α : Type u</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">vec_empty</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">vec_empty&#39;&#39;</span>\n</code></pre></div>",
        "id": 201615851,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592837705
    },
    {
        "content": "<p>It's the motive for the elimination, namely <code>\\lam _, α</code>.</p>",
        "id": 201616881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592838139
    },
    {
        "content": "<p>Thanks for the insight. I didn't think that I could just supply the type <code>\\a</code> as the term, but that makes total sense, since it's asking for a term of type <code>Sort</code>. Still getting in the mindset of dependent type theory.</p>",
        "id": 201617269,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592838313
    },
    {
        "content": "<p>Thanks for the guidance on removing the inductive pair elimination in the defn. Now the proof is easy:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_empty</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">fin_zero_elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_of_succ_lt_succ</span> <span class=\"n\">hk</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">cons_val_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">vec_cons</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 201675841,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592870688
    }
]