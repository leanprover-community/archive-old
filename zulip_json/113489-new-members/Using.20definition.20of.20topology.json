[
    {
        "content": "<p>I don't know how can I tell lean \"use the definition of this topology to prove this is open\". How do I fill up the sorries here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.topological_fiber_bundle</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">weird_prod</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">weird_prod</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.1</span>\n<span class=\"kd\">def</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">weird_prod</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">weird_prod</span> <span class=\"n\">B</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">topological_space.induced</span> <span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"n\">t₁</span> <span class=\"bp\">⊓</span> <span class=\"n\">topological_space.induced</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"n\">t₂</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">canonical_homeo</span> <span class=\"o\">:</span> <span class=\"n\">homeomorph</span> <span class=\"o\">(</span><span class=\"n\">weird_prod</span> <span class=\"n\">B</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x.fst</span><span class=\"o\">,</span> <span class=\"n\">x.snd</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">y.fst</span><span class=\"o\">,</span> <span class=\"n\">y.snd</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sigma.eq</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">prod.ext</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_to_fun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">continuous_inv_fun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 214750786,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1603826603
    },
    {
        "content": "<p>What's the mathematical argument you're hoping to formalise here? If it's \"it's obvious\" then I'd be interested in some more details.</p>",
        "id": 214751137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603826776
    },
    {
        "content": "<p>\"it's obvious\" because <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/constructions.lean#L51\">https://github.com/leanprover-community/mathlib/blob/master/src/topology/constructions.lean#L51</a></p>",
        "id": 214751270,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603826860
    },
    {
        "content": "<p>Well the idea is that the two topologies are defined the same way so once I tell Lean how to translate one type into the other then the open sets are obviously the same</p>",
        "id": 214751366,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1603826898
    },
    {
        "content": "<p><code>intros s hs</code> is a bad start, I think</p>",
        "id": 214751445,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603826948
    },
    {
        "content": "<p>I'd be more tempted to check that some diagrams commuted first</p>",
        "id": 214751489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603826972
    },
    {
        "content": "<p>I'd start here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/order.lean#L8\">https://github.com/leanprover-community/mathlib/blob/master/src/topology/order.lean#L8</a></p>",
        "id": 214751511,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603826992
    },
    {
        "content": "<p><code>induced</code> commutes with <code>⊓</code> and respects composition, so then you're done</p>",
        "id": 214751643,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603827042
    },
    {
        "content": "<p>in particular, your first step in each <code>continuous</code> proof should be to use <code>continuous_iff_le_induced</code></p>",
        "id": 214751755,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603827103
    },
    {
        "content": "<p>I guess the fact that p1 equals prod.fst o to_fun etc is definitional.</p>",
        "id": 214751887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603827145
    },
    {
        "content": "<p>right, the first thing you could try is <code>exact hs</code>!</p>",
        "id": 214751937,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603827170
    },
    {
        "content": "<p>this might work even though it seems like it obviously shouldn't</p>",
        "id": 214751970,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603827189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20definition.20of.20topology/near/214751511\">said</a>:</p>\n<blockquote>\n<p>I'd start here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/order.lean#L8\">https://github.com/leanprover-community/mathlib/blob/master/src/topology/order.lean#L8</a></p>\n</blockquote>\n<p>Ok thanks can you tell me the name of the lemma you mean? Cause I can't manage to interpret #L8 and clicking the link for some reason brings me to the top of the page anyways</p>",
        "id": 214751992,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1603827198
    },
    {
        "content": "<p>I mean you should read the comment at the top of the page!</p>",
        "id": 214752024,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603827223
    },
    {
        "content": "<p>Alternatively you can apply <code>continuous_inf_dom_left</code> and <code>continuous_induced_dom</code> and so on</p>",
        "id": 214752476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603827423
    },
    {
        "content": "<p>#L8 links to line number 8</p>",
        "id": 214753355,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1603827807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20definition.20of.20topology/near/214751643\">said</a>:</p>\n<blockquote>\n<p><code>induced</code> commutes with <code>⊓</code> and respects composition, so then you're done</p>\n</blockquote>\n<p>Doesn't it commute with <code>⊓</code> only if the map is the same for the two induced?</p>",
        "id": 214754914,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1603828450
    }
]