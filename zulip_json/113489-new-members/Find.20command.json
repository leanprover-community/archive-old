[
    {
        "content": "<p>How to search for theorems within Lean? I haven't been able to successfully use the <code>#find</code> command yet, is there something like the <code>Search</code> command in Coq? Also, <code>#print notation x</code> looks promising, how do I specialize the result to a given instance (e.g. instead of <code>has_add.add</code> show the add instance for <code>\\N</code>)?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">notation</span> <span class=\"bp\">+</span> <span class=\"c1\">-- Prints the type class.</span>\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"c1\">-- Prints nothing apparently.</span>\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"n\">add</span> <span class=\"c1\">-- Fails?!</span>\n</code></pre></div>",
        "id": 197979238,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589827551
    },
    {
        "content": "<p>For mathlib specifically, I've had some success with the search bar at <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 197979556,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589827689
    },
    {
        "content": "<p>Find is difficult to use imo, most of the time I use library search (or suggest), I write out the result I want (as a have or a separate example) and use library_search to find the proof. Otherwise just guess the name and grep for something close to it.</p>",
        "id": 197979917,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589827864
    },
    {
        "content": "<p>For something like the nat.add instance I would press cmd + p in vscode (for me) and then type <code>#nat.has_add</code> and hit enter, which takes me to line 429 of /Users/alex/.elan/toolchains/leanprover-community-lean-3.12.0/lib/lean/library/init/core.lean</p>",
        "id": 197980159,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589827989
    },
    {
        "content": "<p>If you want to know about <code>has_add.add</code> just <code>#check has_add.add</code> and then right-click on <code>has_add.add</code> and go to definition.</p>",
        "id": 197984223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589830062
    },
    {
        "content": "<p>I am aware of the mathlib documentation and also had <em>some</em> success with the search bar.</p>\n<p>I didn't find any documentation on <code>#find</code>'s behavior, where can I find it?</p>",
        "id": 197986193,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589831049
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html##find\">https://leanprover-community.github.io/mathlib_docs/commands.html##find</a></p>",
        "id": 197986537,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589831233
    },
    {
        "content": "<p>I'm not sure anyone uses <code>#find</code>. If you want to use it, I suspect that there are other tricks you don't know. Can you give me an example of why you might think you want to use <code>#find</code>?</p>",
        "id": 197986642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589831283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> thank you!</p>",
        "id": 197994938,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589835627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> in Coq using <code>Search add</code>, for example, will list every theorem within scope containing add. This is very useful in the absence of <code>library_search</code> (although, I suspect <code>auto</code> databases are potentially even more useful). I find <code>library_search</code> very slow, and we kind of know what we want, so I thought <code>#find something_with_add_and_le</code> would be a faster way of doing things.</p>",
        "id": 197995759,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589836128
    },
    {
        "content": "<p>Unfortunately, <code>#find</code> seems very slow from running the few examples in the docs. Which is weird and somewhat disappointing.</p>",
        "id": 197995812,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589836166
    },
    {
        "content": "<p>Not sure if this was mentioned above but you can also try the VS Code extension's \"symbol search\" by hitting ctrl+T. It's not very sophisticated since it just does string search, but sometimes that's good enough.</p>",
        "id": 197995917,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589836209
    },
    {
        "content": "<p>Typing <code>#check add</code> and then pressing ctrl-space will list the (first 100) theorems in scope whose name contains <code>add</code></p>",
        "id": 197995947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589836219
    },
    {
        "content": "<p>Although sometimes you have to press escape and try again</p>",
        "id": 197995997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589836248
    },
    {
        "content": "<p><del>I think ctrl+T should in principle return the same results as autocomplete, while being less fiddly.</del></p>",
        "id": 197996044,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589836287
    },
    {
        "content": "<p>Actually, I take that back. They send different commands to the Lean server and I haven't checked that part of the C++ code, so they could differ...</p>",
        "id": 197996143,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589836341
    },
    {
        "content": "<p>There is a pretty rigorous naming convention in Lean and you find after a while that you can have a very good guess at a theorem name from its type. Of course this isn't perfect but I would imagine that listing all the theorems in scope that mention add isn't either</p>",
        "id": 197996450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589836466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Find.20command/near/197996450\">said</a>:</p>\n<blockquote>\n<p>There is a pretty rigorous naming convention in Lean and you find after a while that you can have a very good guess at a theorem name from its type. Of course this isn't perfect but I would imagine that listing all the theorems in scope that mention add isn't either</p>\n</blockquote>\n<p>I recently wrote the following to try to find a certain lemma... and <code>library_search</code> returned exactly the name that I had picked for it. So it's possible to learn the naming conventions by accident.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_le_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_le_g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"err\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"err\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197997021,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589836811
    },
    {
        "content": "<p>For completeness, <a href=\"https://leanprover-community.github.io/contribute/naming.html\">here</a> are the naming conventions. (Do we need #naming?)</p>",
        "id": 197997149,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589836910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/Find.20command/near/197997149\">said</a>:</p>\n<blockquote>\n<p>For completeness, <a href=\"https://leanprover-community.github.io/contribute/naming.html\">here</a> are the naming conventions. (Do we need <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a>?)</p>\n</blockquote>",
        "id": 197999336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589838267
    }
]