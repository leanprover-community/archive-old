[
    {
        "content": "<p>I would like to define a class of homomorphisms from a group <code>G</code> into the fixed group <code>\\Z</code>. Here is what I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n<span class=\"kd\">instance</span> <span class=\"n\">special_group</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n<span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">int.add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">int.add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">int.zero_add</span><span class=\"o\">,</span>\n<span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">int.neg</span><span class=\"o\">,</span>\n<span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">int.add_left_neg</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">my_auto</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_hom</span> <span class=\"n\">G</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">hom_to_triv</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_hom</span> <span class=\"n\">G</span> <span class=\"n\">special_group</span>\n</code></pre></div>\n<p>However I get an error that the type does not match. I agree that the Types don't match, but don't know how to deal with it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">G</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">special_group</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">special_group</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">group</span> <span class=\"n\">ℤ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 287181449,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655987039
    },
    {
        "content": "<p><code>special_group</code> is the paint applied on the object <code>ℤ</code>. <code>mul_hom</code> is asking you about the object, but you're giving it the paint.</p>",
        "id": 287181636,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655987140
    },
    {
        "content": "<p>Probably what you want here is <code>mul_hom G (multiplicative ℤ)</code>, where <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiplicative\">docs#multiplicative</a> turns addition into multiplication, subtraction into division, etc...</p>",
        "id": 287181751,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655987206
    },
    {
        "content": "<p>I see. What do I do, when I defined my group using instance, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">special_group</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 287182234,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655987469
    },
    {
        "content": "<p>Use <code>{a : ℤ | a = 0}</code> instead of writing <code>special_group</code>.</p>",
        "id": 287182982,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655987872
    },
    {
        "content": "<p>In my case <code>{a : ℤ | a = 0}</code> is a long definition that I don't want to write everytime. I was trying to use <code>instance</code> in order to give it a name. Another idea is to use <code>notation</code> instead, but that also does not work since <code>empty notation is not allowed</code>?</p>",
        "id": 287183929,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655988378
    },
    {
        "content": "<p>Using <code>def</code> is the canonical way of giving names to things. The error with <code>notation</code> is strange, you will have to give me more context.</p>",
        "id": 287184211,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655988577
    },
    {
        "content": "<p>If I replace instance by def in the original program I posted, I get the same error as before:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n<span class=\"kd\">def</span> <span class=\"n\">special_group</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n<span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">int.add_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">int.add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">int.zero_add</span><span class=\"o\">,</span>\n<span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">int.neg</span><span class=\"o\">,</span>\n<span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">int.add_left_neg</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">my_auto</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_hom</span> <span class=\"n\">G</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">hom_to_integers</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_hom</span> <span class=\"n\">G</span> <span class=\"n\">special_group</span>\n</code></pre></div>",
        "id": 287184804,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655988876
    },
    {
        "content": "<p>I was talking about \"a long definition that I don't want to write everytime\", not about the <code>group</code> instance.</p>",
        "id": 287184909,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655988932
    },
    {
        "content": "<p>I forgot the ticks ` in <code>notation</code>. This now works and does what I want it to do. Do you think it is better to instead use <code>def</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">naturals</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span>\n<span class=\"kd\">class</span> <span class=\"n\">hom_to_triv</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_hom</span> <span class=\"n\">G</span> <span class=\"n\">naturals</span>\n</code></pre></div>",
        "id": 287185372,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655989119
    },
    {
        "content": "<p>Aha, I did the <code>def</code> all wrong. Thanks! I now figured it out. It should work something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">special_group</span> <span class=\"o\">:=</span> <span class=\"bp\">\\</span><span class=\"n\">Z</span>  <span class=\"c1\">-- actually a long definition that I don't want to write everytime</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">special_group</span> <span class=\"o\">:=</span> <span class=\"c1\">-- here i prove that special_group has a group structure</span>\n<span class=\"kd\">class</span> <span class=\"n\">hom_to_integers</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_hom</span> <span class=\"n\">G</span> <span class=\"n\">special_group</span>\n</code></pre></div>\n<p>Thanks a lot for your help!</p>",
        "id": 287185929,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655989348
    }
]