[
    {
        "content": "<p>Trying to prove <code>int.mod (int.of_nat a_1) ↑p &lt; ↑p</code> in lean, but I wasn't able to unfold int.mod.</p>",
        "id": 136906477,
        "sender_full_name": "petercommand",
        "timestamp": 1541058475
    },
    {
        "content": "<p>there should be a theorem called <code>int.mod_lt</code> for this</p>",
        "id": 136906517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541058522
    },
    {
        "content": "<p>it is <code>int.mod_lt_of_pos</code> and it isn't true when <code>a_1 = 0</code></p>",
        "id": 136906523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541058562
    },
    {
        "content": "<p>I can't find int.mod_lt in C-c C-d</p>",
        "id": 136906589,
        "sender_full_name": "petercommand",
        "timestamp": 1541058698
    },
    {
        "content": "<p>There is nat.mod_lt though</p>",
        "id": 136906637,
        "sender_full_name": "petercommand",
        "timestamp": 1541058747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127883\">@petercommand</span> Welcome! Can you tell if Mario's suggestion works?</p>",
        "id": 136906692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541058896
    },
    {
        "content": "<p>no</p>",
        "id": 136906699,
        "sender_full_name": "petercommand",
        "timestamp": 1541058913
    },
    {
        "content": "<p>Ok, can you give a more detailed version of what you want to prove? A \"minimal working example\" (MWE)</p>",
        "id": 136906705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541058940
    },
    {
        "content": "<p>So something of the form</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"err\">??</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 136906750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541058979
    },
    {
        "content": "<p><code>def test : Π (a b : ℤ) (p : ℕ), (a + b) % p &lt; p := sorry </code></p>",
        "id": 136906810,
        "sender_full_name": "petercommand",
        "timestamp": 1541059127
    },
    {
        "content": "<p>That isn't true if <code>p = 0</code>, right?</p>",
        "id": 136906902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541059310
    },
    {
        "content": "<p>Do you have mathlib? <code>int.mod_lt_of_pos</code> is in <code>data.int.basic</code></p>",
        "id": 136906960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541059341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  ah, it should be <code>def test : Π (a b : ℤ) (p : ℕ) (p &gt;= 2), (a + b) % p &lt; p := sorry</code></p>",
        "id": 136906989,
        "sender_full_name": "petercommand",
        "timestamp": 1541059431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Ah..Thanks! I didn't set up mathlib</p>",
        "id": 136907038,
        "sender_full_name": "petercommand",
        "timestamp": 1541059496
    },
    {
        "content": "<p>why wasn't I able to unfold <code>int.mod</code> though</p>",
        "id": 136907099,
        "sender_full_name": "petercommand",
        "timestamp": 1541059660
    },
    {
        "content": "<p>I guess it is some sort of inductive definition</p>",
        "id": 136907272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541059964
    },
    {
        "content": "<p><code>int</code> is an inductive type with two constructors. <code>int.mod</code> eats an <code>int</code>, and how it unfolds depends on which constructor you use -- <code>int.mod</code> can't unfold unless it knows which it is.</p>",
        "id": 136907273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541059968
    },
    {
        "content": "<p>Which, in <code>int.of_nat a_1</code>, is <code>of_nat</code></p>",
        "id": 136907290,
        "sender_full_name": "petercommand",
        "timestamp": 1541060006
    },
    {
        "content": "<p>But on the other hand you probably don't want to be unfolding <code>int.mod</code>. The devs will have made all the infrastructure you need, at least that's the philosophy.</p>",
        "id": 136907291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541060006
    },
    {
        "content": "<p>True</p>",
        "id": 136907296,
        "sender_full_name": "petercommand",
        "timestamp": 1541060029
    },
    {
        "content": "<p>If you post a MWE I can try to help.</p>",
        "id": 136907297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541060031
    },
    {
        "content": "<p><code>def test : Π (a p : ℕ) (p &gt; 0) , int.mod (int.of_nat a) ↑p &lt; ↑p := sorry </code> something like this</p>",
        "id": 136907354,
        "sender_full_name": "petercommand",
        "timestamp": 1541060111
    },
    {
        "content": "<p>Thanks</p>",
        "id": 136907408,
        "sender_full_name": "petercommand",
        "timestamp": 1541060184
    },
    {
        "content": "<p>My first MWE wasn't clear, this one should be a bit better</p>",
        "id": 136907429,
        "sender_full_name": "petercommand",
        "timestamp": 1541060273
    },
    {
        "content": "<p>the answer appears to be that the exact definition of <code>int.mod</code> uses <code>↑a</code> instead of <code>int.of_nat a</code></p>",
        "id": 136907479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541060314
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">--  unfold int.mod, -- fails</span>\n  <span class=\"n\">change</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 136907498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541060383
    },
    {
        "content": "<p>All the more reason why you shouldn't be unfolding it ;-)</p>",
        "id": 136907500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541060394
    },
    {
        "content": "<p>I just wrote <code>#check int.mod</code> and then right clicked on <code>int.mod</code> and peeked the actual definition.</p>",
        "id": 136907578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541060502
    },
    {
        "content": "<p>Of course the two things are definitionally equal: <code>example (a : ℕ) : int.of_nat a = ↑a := rfl </code></p>",
        "id": 136907650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541060586
    },
    {
        "content": "<p>But under the hood <code>unfold</code> is using <code>simp</code>, and I think <code>simp</code> can be fussy about not changing things to definitionally equal things.</p>",
        "id": 136907654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541060616
    },
    {
        "content": "<p>Well, that's my amateur diagnosis anyway.</p>",
        "id": 136907658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541060628
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">%</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt_coe_nat_of_lt</span>\n    <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">Hp</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"err\">%</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">add_lt_of_le_of_neg</span>\n    <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_succ_lt_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">%</span><span class=\"n\">p</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 136907777,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541060808
    },
    {
        "content": "<p>A side comment -- I think <code>test</code> is not quite what you want to prove (AFK)</p>",
        "id": 136907786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541060833
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">%</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt_coe_nat_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span> <span class=\"bp\">_</span> <span class=\"n\">Hp</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"err\">%</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">add_lt_of_le_of_neg</span>\n    <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_succ_lt_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">%</span><span class=\"n\">p</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>(I just noticed that you changed the condition again)</p>",
        "id": 136907800,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541060866
    },
    {
        "content": "<p>hmm, this is quite annoying..I thought <code>int.mod</code> was directly matching on the constructor</p>",
        "id": 136907877,
        "sender_full_name": "petercommand",
        "timestamp": 1541060978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> thanks</p>",
        "id": 136907942,
        "sender_full_name": "petercommand",
        "timestamp": 1541061049
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">%</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt_coe_nat_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span> <span class=\"bp\">_</span> <span class=\"n\">Hp</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"err\">%</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">neg_add_cancel_right</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">%</span><span class=\"n\">p</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 136907960,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061093
    },
    {
        "content": "<p>it is</p>",
        "id": 136907961,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061099
    },
    {
        "content": "<p>oh, and it isn't <code>def</code></p>",
        "id": 136907966,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061116
    },
    {
        "content": "<p>it's <code>theorem</code></p>",
        "id": 136907967,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061118
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">%</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt_coe_nat_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span> <span class=\"bp\">_</span> <span class=\"n\">Hp</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"err\">%</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">neg_add_cancel_right</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">%</span><span class=\"n\">p</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 136908008,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061124
    },
    {
        "content": "<p>aren't they synonyms?</p>",
        "id": 136908019,
        "sender_full_name": "petercommand",
        "timestamp": 1541061159
    },
    {
        "content": "<p>no</p>",
        "id": 136908020,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061166
    },
    {
        "content": "<p>what's different between def and thoerem?</p>",
        "id": 136908028,
        "sender_full_name": "petercommand",
        "timestamp": 1541061209
    },
    {
        "content": "<p>def is data</p>",
        "id": 136908031,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061218
    },
    {
        "content": "<p>theorem is proof</p>",
        "id": 136908032,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061219
    },
    {
        "content": "<p>I mean, semantically, are they different?</p>",
        "id": 136908082,
        "sender_full_name": "petercommand",
        "timestamp": 1541061254
    },
    {
        "content": "<p>yes</p>",
        "id": 136908095,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061288
    },
    {
        "content": "<p>proof irrelevance?</p>",
        "id": 136908114,
        "sender_full_name": "petercommand",
        "timestamp": 1541061314
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html\">https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html</a><br>\nAh, it says that <br>\n<code>by proof irrelevance, any two proofs of that theorem are definitionally equal.</code></p>",
        "id": 136908179,
        "sender_full_name": "petercommand",
        "timestamp": 1541061381
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 136908184,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061392
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html\">https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html</a><br>\nAh, it says that <br>\n<code>by proof irrelevance, any two proofs of that theorem are definitionally equal.</code></p>\n</blockquote>\n<p>that's irrelevant</p>",
        "id": 136908186,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061406
    },
    {
        "content": "<p>Kenny, independent of that def/theorem business, what's happening below? <span class=\"user-mention\" data-user-id=\"127883\">@petercommand</span> 's original formulation of the MWE has something wrong with it I think:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"c1\">-- ??</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">HP</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ int.mod (int.of_nat a) ↑p &lt; ↑p</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 136908209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061460
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"mi\">5</span><span class=\"bp\">=</span><span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">test</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">test : 5 = 5</span>\n<span class=\"cm\">test.equations._eqn_1 : test = rfl</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"mi\">5</span><span class=\"bp\">=</span><span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">test2</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">test2 : 5 = 5</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 136908253,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> lol the conditions keep changing</p>",
        "id": 136908274,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061552
    },
    {
        "content": "<p>I think the <code>p</code> in <code>forall p</code> isn't the same as the <code>p</code> in <code>p &gt; 0</code>.</p>",
        "id": 136908278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127883\">@petercommand</span> can you make up your mind?</p>",
        "id": 136908282,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061565
    },
    {
        "content": "<p>I never changed anything, I just copied his MWE.</p>",
        "id": 136908284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061569
    },
    {
        "content": "<blockquote>\n<p>I think the <code>p</code> in <code>forall p</code> isn't the same as the <code>p</code> in <code>p &gt; 0</code>.</p>\n</blockquote>\n<p>I think it's the same</p>",
        "id": 136908289,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061593
    },
    {
        "content": "<p>Did you look at my tactic mode post?</p>",
        "id": 136908332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061611
    },
    {
        "content": "<p>There's an extra nat</p>",
        "id": 136908334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061617
    },
    {
        "content": "<p><code>-- ??</code></p>",
        "id": 136908337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061621
    },
    {
        "content": "<p>I don't know why you have 4 <code>intro</code>s</p>",
        "id": 136908349,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061646
    },
    {
        "content": "<p>because Lean is asking for 4. That's the point I'm trying to make</p>",
        "id": 136908354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061657
    },
    {
        "content": "<p>what do you mean Lean is asking for 4</p>",
        "id": 136908359,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061667
    },
    {
        "content": "<p>What do you mean? The function wants 4 inputs</p>",
        "id": 136908366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061705
    },
    {
        "content": "<p>that's spooky</p>",
        "id": 136908367,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061707
    },
    {
        "content": "<p>Must be Halloween.</p>",
        "id": 136908369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061719
    },
    {
        "content": "<p>oh!</p>",
        "id": 136908412,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061736
    },
    {
        "content": "<p>o.o</p>",
        "id": 136908413,
        "sender_full_name": "petercommand",
        "timestamp": 1541061739
    },
    {
        "content": "<p>lol</p>",
        "id": 136908420,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061750
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 136908427,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061763
    },
    {
        "content": "<p><code>&gt;</code> is a binder or something</p>",
        "id": 136908428,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061774
    },
    {
        "content": "<p>right</p>",
        "id": 136908432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127883\">@petercommand</span> this is fine: <code>theorem test : ∀ (a p : ℕ), (p &gt; 0) → int.mod (int.of_nat a) ↑p &lt; ↑p :=</code></p>",
        "id": 136908489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061847
    },
    {
        "content": "<p>but <code>(p &gt; 0)</code> before the comma gets interpreted as \"and there's another variable p, different to the p you just mentioned\"</p>",
        "id": 136908504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061886
    },
    {
        "content": "<p>I don't think <span class=\"user-mention\" data-user-id=\"127883\">@petercommand</span> has tested his \"MWE\" before posting</p>",
        "id": 136908516,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061913
    },
    {
        "content": "<p><code>def test' : Π (a : ℕ) (p &gt; 0) , int.mod (int.of_nat a) ↑p &lt; ↑p := </code> is OK</p>",
        "id": 136908518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061916
    },
    {
        "content": "<p>I just made it a bit more minimal, that's all ;-)</p>",
        "id": 136908521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061937
    },
    {
        "content": "<blockquote>\n<p>I don't think <span class=\"user-mention\" data-user-id=\"127883\">@petercommand</span> has tested his \"MWE\" before posting</p>\n</blockquote>\n<p>Yeah, I should've tested the MWEs o.o Thought that was simple enough</p>",
        "id": 136908569,
        "sender_full_name": "petercommand",
        "timestamp": 1541061973
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt_coe_nat_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 136908575,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061999
    },
    {
        "content": "<p>Hmm, actually, I tested the MWEs, but didn't discover that I got one more variable</p>",
        "id": 136908636,
        "sender_full_name": "petercommand",
        "timestamp": 1541062113
    },
    {
        "content": "<p>anyway</p>",
        "id": 136908637,
        "sender_full_name": "petercommand",
        "timestamp": 1541062125
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_lt_of_pos</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_lt_coe_nat_of_lt</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 136908828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541062466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  About the difference between \"def\" and \"theorem\", why is there test.eqations._eqn_1 appeared in your example<br>\n<code>def test : 5=5 := rfl\n#print prefix test</code></p>",
        "id": 136908830,
        "sender_full_name": "AHan",
        "timestamp": 1541062470
    },
    {
        "content": "<p>because Kenny (intentionally) wrote bad code</p>",
        "id": 136908835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541062492
    },
    {
        "content": "<p>because <code>test</code> is now a definition so it has definitional equations</p>",
        "id": 136908842,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541062509
    },
    {
        "content": "<p>just write any old definition</p>",
        "id": 136908844,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541062513
    },
    {
        "content": "<p>If you use def instead of theorem or theorem instead of def, expect random things</p>",
        "id": 136908846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541062514
    },
    {
        "content": "<p>because they were not designed to be used in these circumstances</p>",
        "id": 136908858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541062545
    },
    {
        "content": "<p>undocumented behaviour... lul</p>",
        "id": 136908901,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541062565
    },
    {
        "content": "<p>I think \"garbage in, garbage out\" is well documented in the literature</p>",
        "id": 136908906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541062592
    },
    {
        "content": "<p>What does the definitional equations refers to here?<br>\nAnd how to use it in a normal def?</p>",
        "id": 136908975,
        "sender_full_name": "AHan",
        "timestamp": 1541062693
    },
    {
        "content": "<p>you don't really use it</p>",
        "id": 136909036,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541062804
    },
    {
        "content": "<p>it's internal mechanism</p>",
        "id": 136909041,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541062813
    },
    {
        "content": "<p>Every time you make a definition (especially a nice complicated one, maybe with pattern matching) Lean creates some secret \"equation lemmas\"</p>",
        "id": 136909042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541062817
    },
    {
        "content": "<p>and when you try and unfold the definition, Lean uses these lemmas</p>",
        "id": 136909043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541062830
    },
    {
        "content": "<p>As Kenny says, this is all done internally and the user is not supposed to have to worry about it. It's basically the trick which makes \"unfold\" work.</p>",
        "id": 136909058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541062860
    },
    {
        "content": "<p><code>unfold X</code> is <code>simp only [equation lemmas for X]</code></p>",
        "id": 136909070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541062874
    },
    {
        "content": "<p>(this is my slightly amateurish understanding of it -- I am a mathematician so shouldn't really be talking about implementation issues)</p>",
        "id": 136909131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541062928
    },
    {
        "content": "<p>Are they the beta reduction rules?</p>",
        "id": 136909163,
        "sender_full_name": "AHan",
        "timestamp": 1541062998
    }
]