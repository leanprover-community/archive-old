[
    {
        "content": "<p>I'm working on defining a structure that extends inner product space and I'm running into a problem where I write the derivative of a function from the field to the vector space and Lean gives an error expecting <code>normed_add_comm_group E</code> but the structure extends <code>inner_product_space</code> which extends <code>normed_add_comm_group</code>. Is there a way to get Lean to recognize is already has <code>normed_add_comm_group E</code>? </p>\n<p>MWE: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">--just a dummy statement so Lean compiles the structure</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">test</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"c1\">--throughs error \"failed to synthesize type class instance for normed_add_comm_group E\"</span>\n</code></pre></div>",
        "id": 291359103,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1659117330
    },
    {
        "content": "<p>You want <code>class</code> not <code>structure</code></p>",
        "id": 291359862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659117649
    },
    {
        "content": "<p>Interesting, I wasn't aware there was a difference. I noticed on the front end of the mathlib website it calls it a structure, but all the backend code I looked at will use class, so I assumed they were interchangable. What is the difference between structure and class if you could give a brief explanation?</p>",
        "id": 291360116,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1659117751
    },
    {
        "content": "<p>I guess <code>class</code> is synonymous to <code>@[class] structure</code>?</p>",
        "id": 291361962,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659118589
    },
    {
        "content": "<p>Thank you, found it in the textbook, reading now!</p>",
        "id": 291367371,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1659121240
    }
]