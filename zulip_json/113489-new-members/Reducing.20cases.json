[
    {
        "content": "<p>I have come across a situation where a proposition <code>X</code> implies a disjunctive <code>A\\or B\\or C</code>. A, B, C are cases, but I can reduce case C to case B, i.e. <code>lemma2: C\\to B</code> holds. I <em>could</em> write this as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">assume</span> <span class=\"n\">hX</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">\\</span><span class=\"n\">or</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"err\">\\</span><span class=\"n\">or</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lemma1</span> <span class=\"n\">hX</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">\\</span><span class=\"n\">or</span> <span class=\"n\">B</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h4</span><span class=\"o\">:</span><span class=\"n\">A</span> <span class=\"err\">\\</span><span class=\"n\">or</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h5</span><span class=\"o\">:</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">lemma2</span> <span class=\"n\">h5</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>However, this seems unnecessarily messy, and it seems I should be able to just \"reduce C to B\" in approximately one command, rather than having to consider the <code>A</code> and <code>B</code> cases as well. Is this possible?</p>",
        "id": 200848526,
        "sender_full_name": "Chris M",
        "timestamp": 1592195061
    },
    {
        "content": "<p>If you group the B and C together with <code>or.assoc</code>, then you can use <code>or.imp_right</code> to map that to <code>B \\or B</code> then collapse it with <code>or_self</code></p>",
        "id": 200850185,
        "sender_full_name": "Chris Wong",
        "timestamp": 1592197687
    },
    {
        "content": "<p>I think in general though we tend to use tactics like <code>cc</code>, which lessen the need to make manual manipulation easy</p>",
        "id": 200850200,
        "sender_full_name": "Chris Wong",
        "timestamp": 1592197735
    },
    {
        "content": "<p>There should be a theorem that says <code>(q -&gt; p) -&gt; (p \\/ q &lt;-&gt; p)</code> that should be usable here</p>",
        "id": 200850220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592197800
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">imp_right</span> <span class=\"o\">(</span><span class=\"n\">or_iff_left_of_imp</span> <span class=\"n\">h2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The advantage of this over using <code>cc</code> is that you don't have to assert the goal statement, it is a purely syntactic transformation so <code>a,b,c</code> can be any expressions and they will not be unduly affected by the tactic</p>",
        "id": 200850483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592198163
    },
    {
        "content": "<p>The fancy tactic version is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200850545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592198301
    },
    {
        "content": "<p>the other advantage of the first method is that the type of <code>h2</code> is already determined by the context here so you can even do this in a way where <code>h2</code> is a subgoal rather than a hypothesis:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">imp_right</span> <span class=\"o\">(</span><span class=\"n\">or_iff_left_of_imp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- this: a ∨ b |- false</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- hb: b |- c</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200850676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592198630
    }
]