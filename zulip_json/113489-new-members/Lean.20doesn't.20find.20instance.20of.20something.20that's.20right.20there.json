[
    {
        "content": "<p>Weird problem -- I have my goal, which is <code>(x ⋆ y) → (y ⋆ z) → (x ⋆ z)</code> (for some operation <code>⋆</code>) and I have a hypothesis <code>Hxy : x = y</code>. But when I try <code>rw Hxy,</code> Lean tells me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">x</span>\n</pre></div>",
        "id": 135863594,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539643136
    },
    {
        "content": "<p>But... it's right there.</p>",
        "id": 135863628,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539643168
    },
    {
        "content": "<p>Post a MWE</p>",
        "id": 135863810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539643398
    },
    {
        "content": "<p>Sometimes it's because you have two variables called <code>x</code>, sometimes it's because something needs to be done by type class inference and type class inference fails but the error mesage is that the rewrite failed, there are all sorts of reasons.</p>",
        "id": 135863871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539643455
    },
    {
        "content": "<p>Another reason it fails is that you can't rewrite under a binder. Does <code>simp only [Hxy]</code> work? As you can see, it's difficult to diagnose without a MWE.</p>",
        "id": 135864347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539644046
    },
    {
        "content": "<p>Ok, I got the problem (it was the \"two variables called <code>x</code>\" thing) -- I had defined a symbol <code>S</code> for <code>fin 2</code> and mid-way through the proof had done <code>rw S at z y x</code>, which caused two sets of variables <code>x y z</code> to be defined.</p>",
        "id": 135864405,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539644147
    },
    {
        "content": "<p><code>rw</code> is a fickle beast.</p>",
        "id": 135864450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539644169
    },
    {
        "content": "<p>(although I'm not sure why that happened -- usually when you do <code>rw something at something</code>, it just changes the statement, not create new ones.)</p>",
        "id": 135864454,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539644183
    },
    {
        "content": "<p>It takes a while to get to know its foibles</p>",
        "id": 135864455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539644183
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- one goal became 2 -- we now need a proof of n &gt; 0</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 135864545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539644294
    },
    {
        "content": "<p>Yeah, I've encountered that before, but that actually makes sense (and is useful!). Treating rewrites differently based on whether they're done on a natural number or a proof is just weird.</p>",
        "id": 135864852,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539644570
    }
]