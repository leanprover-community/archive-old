[
    {
        "content": "<p>Given</p>\n<div class=\"codehilite\" data-code-language=\"inductive\"><pre><span></span><code>  | empty: Vect 0\n  | cons {n:Nat} (a:Nat) (v:Vect n) : Vect (n+1)\n\n\ndef plus (v1:Vect n) (v2:Vect n) : Vect  n:=\n  match (v1,v2) with\n  | (Vect.empty, _) =&gt; Vect.empty\n  | (Vect.cons a v, Vect.cons b w) =&gt; Vect.cons  (a + b) (plus v w)\n\n\ndef fromlist (v: List Nat): Vect (n:Nat):=\n  match v with\n  | [] =&gt; Vect.empty\n  | List.cons x xs =&gt; Vect.cons x xs\n\ndef main : IO Unit :=\n    IO.println \"foo\"\n</code></pre></div>\n<p>I get 2 errors:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>./Test.lean:14:10: error: type mismatch\n  Vect.empty\nhas type\n  Vect 0 : Type ?u.1922\nbut is expected to have type\n  Vect n : Type ?u.1922\n</code></pre></div>\n<p>How would I get this to work?</p>",
        "id": 243004211,
        "sender_full_name": "Alok Singh (S1'17)",
        "timestamp": 1623929550
    },
    {
        "content": "<p>You're not sharing your whole code. Where do you define what n is? Is it a variable or a parameter or what? In any case, your fromlist function won't work because it's not actually recursive. And I'd suggest using the equation compiler on your variables instead of match, if you want to prove things about your definitions later on.</p>",
        "id": 243006979,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623931330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>  As this is lean4 I guess <code>n</code> doesn't need to be defined due to <a href=\"https://leanprover.github.io/lean4/doc/autobound.html\">https://leanprover.github.io/lean4/doc/autobound.html</a></p>",
        "id": 243009179,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1623932613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"337670\">@Alok Singh (S1'17)</span> the first line of your code is chopped off, you need a newline after <code> ``` </code></p>",
        "id": 243009265,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1623932646
    },
    {
        "content": "<p>Ah yes, I should have noticed it was lean 4 from the =&gt;, apologies</p>",
        "id": 243009302,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623932671
    },
    {
        "content": "<p>For plus, matching on <code>n</code> too works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"o\">:</span> <span class=\"n\">Vect</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">Vect</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Vect</span>  <span class=\"n\">n</span><span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Vect.empty</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Vect.cons</span> <span class=\"n\">a</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">Vect.cons</span> <span class=\"n\">b</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Vect.cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 243011064,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1623933703
    },
    {
        "content": "<p>As for the <code>fromlist</code> function, I'm not sure really what the best way to do what you want is, but the following does typecheck at least:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fromlist</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Vect</span> <span class=\"n\">v.length</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Vect.empty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">List.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length_cons</span> <span class=\"n\">_</span> <span class=\"bp\">â–¸</span> <span class=\"n\">Vect.cons</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">fromlist</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>we have to specify in the function definition what the length of the vector is (the length of the input list).<br>\nThen we are forced to use the triangle to make the Vector length line up right.<br>\nSo I'm not sure how convenient it will be to prove things about this definition tbh.</p>",
        "id": 243020334,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1623937933
    },
    {
        "content": "<p>what does the triangle do?</p>",
        "id": 243106013,
        "sender_full_name": "Alok Singh (S1'17)",
        "timestamp": 1623978480
    },
    {
        "content": "<p>it's basically term mode <code>rw</code></p>",
        "id": 243106720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623979235
    }
]