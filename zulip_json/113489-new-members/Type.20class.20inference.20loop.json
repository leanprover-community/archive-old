[
    {
        "content": "<p>What is going wrong in this simple <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">B'</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">total_space</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[priority 90, nolint unused_arguments]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">pullback.total_space.topological_space</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">B'</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">total_space</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"c1\">--TYPE CLASS SEARCHES TIMED OUT</span>\n</code></pre></div>",
        "id": 275587516,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647471293
    },
    {
        "content": "<p>Cross posted from <a href=\"#narrow/stream/144837-PR-reviews/topic/.238545\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.238545</a></p>",
        "id": 275587563,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647471344
    },
    {
        "content": "<p>Is that the entire lint message?</p>",
        "id": 275589250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647472493
    },
    {
        "content": "<p>No the entire message is very long:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `fails_quickly` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> TYPE CLASS SEARCHES TIMED OUT.</span>\n<span class=\"cm\">The following instances are part of a loop, or an excessively long search.</span>\n<span class=\"cm\">It is common that the loop occurs in a different class than the one flagged below,</span>\n<span class=\"cm\">but usually an instance that is part of the loop is also flagged.</span>\n<span class=\"cm\">To debug:</span>\n<span class=\"cm\">(1) run `scripts/mk_all.sh` and create a file with `import all` and</span>\n<span class=\"cm\">`set_option trace.class_instances true`</span>\n<span class=\"cm\">(2) Recreate the state shown in the error message. You can do this easily by copying the type of</span>\n<span class=\"cm\">the instance (the output of `#check @my_instance`), turning this into an example and removing the</span>\n<span class=\"cm\">last argument in square brackets. Prove the example using `by apply_instance`.</span>\n<span class=\"cm\">For example, if `additive.topological_add_group` raises an error, run</span>\n<span class=\"cm\">``</span>\n<span class=\"cm\">example {G : Type*} [topological_space G] [group G] : topological_add_group (additive G) :=</span>\n<span class=\"cm\">by apply_instance</span>\n<span class=\"cm\">``</span>\n<span class=\"cm\">(3) What error do you get?</span>\n<span class=\"cm\">(3a) If the error is \"tactic.mk_instance failed to generate instance\",</span>\n<span class=\"cm\">there might be nothing wrong. But it might take unreasonably long for the type-class inference to</span>\n<span class=\"cm\">fail. Check the trace to see if type-class inference takes any unnecessary long unexpected turns.</span>\n<span class=\"cm\">If not, feel free to increase the value in the definition of the linter `fails_quickly`.</span>\n<span class=\"cm\">(3b) If the error is \"maximum class-instance resolution depth has been reached\" there is almost</span>\n<span class=\"cm\">certainly a loop in the type-class inference. Find which instance causes the type-class inference to</span>\n<span class=\"cm\">go astray, and fix that instance. -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">pullback.total_space.topological_space</span> <span class=\"c\">/-</span><span class=\"cm\"> maximum class-instance resolution depth has been reached (the limit can be increased by setting option 'class.instance_max_depth') (the class-instance resolution trace can be visualized by setting option 'trace.class_instances')</span>\n<span class=\"cm\">State:</span>\n<span class=\"cm\">B : Type u_1,</span>\n<span class=\"cm\">E : B → Type u_2,</span>\n<span class=\"cm\">B' : Type u_3,</span>\n<span class=\"cm\">_inst_1 : topological_space B',</span>\n<span class=\"cm\">f : B' → B</span>\n<span class=\"cm\">⊢ topological_space (total_space (E ∘ f)) -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `has_inhabited_instance` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> TYPES ARE MISSING INHABITED INSTANCES: -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">total_space</span> <span class=\"c\">/-</span><span class=\"cm\"> inhabited instance missing -/</span>\n</code></pre></div>",
        "id": 275589426,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647472627
    },
    {
        "content": "<p>I was hoping someone could tell me the reason without me having to follow these long instructions</p>",
        "id": 275589543,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647472698
    },
    {
        "content": "<p>You can skip the <code>mk_all</code> step since you got this error from <code>#lint</code> and not CI</p>",
        "id": 275589633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647472795
    },
    {
        "content": "<p>I guess it's trying to find everything using <code>id</code></p>",
        "id": 275589718,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647472836
    },
    {
        "content": "<p>Yes, that is indeed the problem - ∘ is <em>very</em> transparent to lean, so whenever you ask for <code>topological_space (total_space E)</code> lean will try your instance with <code>f = id</code> and look for <code>topological_space (total_space (E ∘ id))</code></p>",
        "id": 275589874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647472940
    },
    {
        "content": "<p>Then what is going wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.constructions</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">B'</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">total_space</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[priority 90, nolint unused_arguments]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">test</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">)]{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">B'</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">total_space</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"bp\">×</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>",
        "id": 275589972,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647473043
    },
    {
        "content": "<p>Have you tried following the instructions to find out?</p>",
        "id": 275590036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647473082
    },
    {
        "content": "<p>You only need to add a few lines to your mwe</p>",
        "id": 275590062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647473093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20loop/near/275590062\">said</a>:</p>\n<blockquote>\n<p>You only need to add a few lines to your mwe</p>\n</blockquote>\n<p>Yes in both cases it leads me to option 3a which apparently means that there's nothing wrong</p>",
        "id": 275590161,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647473171
    },
    {
        "content": "<p>(Also <code>f</code> is unused there)</p>",
        "id": 275590165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647473176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20loop/near/275590165\">said</a>:</p>\n<blockquote>\n<p>(Also <code>f</code> is unused there)</p>\n</blockquote>\n<p>Oh I see this was the problem, ops!</p>",
        "id": 275590224,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647473230
    },
    {
        "content": "<p>You turned off the linter that would have warned you of that!</p>",
        "id": 275590340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647473298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20loop/near/275589874\">said</a>:</p>\n<blockquote>\n<p>Yes, that is indeed the problem - ∘ is <em>very</em> transparent to lean, so whenever you ask for <code>topological_space (total_space E)</code> lean will try your instance with <code>f = id</code> and look for <code>topological_space (total_space (E ∘ id))</code></p>\n</blockquote>\n<p>What is the best solution to this? Having a type synonym for the composition? Plus why is this triggered now but it was not triggered last fall? (The proof that is was not triggered is in the linked PR)</p>",
        "id": 275590538,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647473489
    },
    {
        "content": "<p>I'm not certain the linter existed then</p>",
        "id": 275591187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647474071
    },
    {
        "content": "<p>WRT avoiding this issue; can you un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> the problem a little? For what <code>E</code> do you expect lean to find a <code>topological_space (total_space E)</code> instance?</p>",
        "id": 275591471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647474334
    },
    {
        "content": "<p>For the composition<br>\n<span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20loop/near/275591471\">said</a>:</p>\n<blockquote>\n<p>WRT avoiding this issue; can you un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> the problem a little? For what <code>E</code> do you expect lean to find a <code>topological_space (total_space E)</code> instance?</p>\n</blockquote>\n<p>For any <code>E</code> which is the composition of a another <code>E'</code> with that instance and a function</p>",
        "id": 275593005,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647475542
    },
    {
        "content": "<p>Ok, but if that's the only instance then no instances exist</p>",
        "id": 275595341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647477752
    },
    {
        "content": "<p>What other instances do you intend to have?</p>",
        "id": 275595349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647477767
    },
    {
        "content": "<p>(context: what you're trying to do sounds a bit like trying to teach lean <code>[algebra R S] [algebra S A] : algebra R A</code>which while mathematically obvious isn't appropriate for Lean's typeclasses)</p>",
        "id": 275595448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647477881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20loop/near/275595448\">said</a>:</p>\n<blockquote>\n<p>(context: what you're trying to do sounds a bit like trying to teach lean <code>[algebra R S] [algebra S A] : algebra R A</code>which while mathematically obvious isn't appropriate for Lean's typeclasses)</p>\n</blockquote>\n<p>I agree: what puzzles me here is that if I use a type synonym for composition of if I silentiate the linter everything works smoothly</p>",
        "id": 275595707,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647478150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20loop/near/275595349\">said</a>:</p>\n<blockquote>\n<p>What other instances do you intend to have?</p>\n</blockquote>\n<p>Any standard vector bundle, for example the product topological space on constant sigma types</p>",
        "id": 275595726,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647478183
    },
    {
        "content": "<p>If you follow the instruction in the linter message, you'll find the example that does not work smoothly</p>",
        "id": 275596651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647479030
    },
    {
        "content": "<p>The instance on constant sigma types you're talking about is the one on <code>total_space (λ i, E')</code>, right?</p>",
        "id": 275596757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647479142
    },
    {
        "content": "<p>If so, that instance will already match <code>total_space ((λ i, E') ∘ f)</code></p>",
        "id": 275596822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647479189
    },
    {
        "content": "<p>My guess : if you have a typeclass <code>foo (f ∘ g)</code> depending on <code>foo f</code>, like in your examples, then this can lead to an infinite recursion as follows. When looking for <code>foo f</code> then Lean will try to write <code>f</code> as <code>f ∘ id</code>, then apply the above instance and try to find a <code>foo f</code> for this, and loop. So you should use some kind of type synonym to hide the composition from typeclass inference. (This is one of the reasons we switched from unbundled morphisms, as typeclass inference was not working properly on compositions).</p>",
        "id": 275612604,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1647499486
    },
    {
        "content": "<p>Ok sure let's introduce a type synonym: it is very natural anyways</p>",
        "id": 275636389,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647515480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20loop/near/275595726\">said</a>:</p>\n<blockquote>\n<p>Any standard vector bundle, for example the product topological space on constant sigma types</p>\n</blockquote>\n<p>Can you give another example, since as I remark above you don't need a compositional instance for this</p>",
        "id": 275638200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647516580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20loop/near/275638200\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20loop/near/275595726\">said</a>:</p>\n<blockquote>\n<p>Any standard vector bundle, for example the product topological space on constant sigma types</p>\n</blockquote>\n<p>Can you give another example, since as I remark above you don't need a compositional instance for this</p>\n</blockquote>\n<p>I am not sure if you are asking me for examples of bundles defined through composition or not since from your question above I thought you wanted examples other than the composition!</p>",
        "id": 275641549,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647518582
    },
    {
        "content": "<p>I want an example of a bundle not defined through composition <code>X</code>, such that there is also a bundled defined through composition with <code>X</code>, <code>Y</code>, that is not the same form as <code>X</code></p>",
        "id": 275641711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647518670
    },
    {
        "content": "<p>The constant bundle is not such an example, because the compositions with a constant sigma type remains a constant sigma type</p>",
        "id": 275641781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647518717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20loop/near/275641711\">said</a>:</p>\n<blockquote>\n<p>I want an example of a bundle not defined through composition <code>X</code>, such that there is also a bundled defined through composition with <code>X</code>, <code>Y</code>, that is not the same form as <code>X</code></p>\n</blockquote>\n<p>Like the pullback of a Mobius bundle on a segment of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">S^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 275643020,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647519476
    },
    {
        "content": "<p>Can you write the statement of that in lean, or do we not have the pieces yet to do so?</p>",
        "id": 275643737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647519874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20loop/near/275612604\">said</a>:</p>\n<blockquote>\n<p>My guess : if you have a typeclass <code>foo (f ∘ g)</code> depending on <code>foo f</code>, like in your examples, then this can lead to an infinite recursion as follows. When looking for <code>foo f</code> then Lean will try to write <code>f</code> as <code>f ∘ id</code>, then apply the above instance and try to find a <code>foo f</code> for this, and loop. So you should use some kind of type synonym to hide the composition from typeclass inference. (This is one of the reasons we switched from unbundled morphisms, as typeclass inference was not working properly on compositions).</p>\n</blockquote>\n<p>Type synonym has the disadvantage that if <code>E (f x)</code> is a topological space then <code>(pullback f E) x</code> will not be recognized anymore as a topological space, but one has to use the local attribut trick and redeclare instances... a bit annoying but ok. Other suggestions are welcome though</p>",
        "id": 275644215,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647520146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20loop/near/275643737\">said</a>:</p>\n<blockquote>\n<p>Can you write the statement of that in lean, or do we not have the pieces yet to do so?</p>\n</blockquote>\n<p>We do not have the Mobius bundle yet, by now we only have the trivial one :(</p>",
        "id": 275644264,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647520183
    },
    {
        "content": "<p>And tangent bundles of course which is the source of our nontrivial examples</p>",
        "id": 275644365,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647520219
    }
]