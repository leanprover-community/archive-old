[
    {
        "content": "<p>hello,<br>\nin the last few weeks i have learnd lean and now i want to start proving thing in Modular arithmetic up to Chinese remainder theorem, and hopefully to prove the whole rsa system, is there any libraries already written about that? <br>\nthank you very much</p>",
        "id": 221454183,
        "sender_full_name": "Nerya",
        "timestamp": 1609685560
    },
    {
        "content": "<p>well we have the ring-theoretic version of the Chinese Remainder Theorem (written by yours truly!) if that helps</p>",
        "id": 221454415,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609685827
    },
    {
        "content": "<p>Of course that doesn't stop you proving it again, especially if you want some practice :-) I would recommend working with integers rather than naturals.</p>",
        "id": 221456885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609689106
    },
    {
        "content": "<p>Since you mention RSA, you might be interested in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.modeq.pow_totient\">docs#nat.modeq.pow_totient</a></p>",
        "id": 221457811,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609690285
    },
    {
        "content": "<p>I'm sure we also have the multiplicativity of the totient function, but I can't find it right now...</p>",
        "id": 221457911,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609690425
    },
    {
        "content": "<p>Perhaps a place to start is that <code>totient</code> is multiplicative? Do we have that? I can't immediately spot it. How will one prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mi>q</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi(pq)=(p-1)(q-1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 221457915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609690433
    },
    {
        "content": "<p>Ok maybe I'm not so sure <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 221457967,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609690496
    },
    {
        "content": "<p>wow i can see you done a lot of fine work already, lets see if i can find myself in there</p>",
        "id": 221457988,
        "sender_full_name": "Nerya",
        "timestamp": 1609690547
    },
    {
        "content": "<p>The maths proof would be to prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi mathvariant=\"double-struck\">Z</mi><msup><mo stretchy=\"false\">)</mo><mo>×</mo></msup><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">\\phi(n)=|(\\mathbb{Z}/n\\mathbb{Z})^\\times|</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span><span class=\"mord\">∣</span></span></span></span> and to use ring CRT</p>",
        "id": 221457990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609690550
    },
    {
        "content": "<p>Oh yeah this should be easy since we have CRT and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.card_units_eq_totient\">docs#zmod.card_units_eq_totient</a></p>",
        "id": 221458562,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609691266
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.modeq.chinese_remainder\">docs#nat.modeq.chinese_remainder</a> the nat version of CRT? Looks like it to me.</p>",
        "id": 221459119,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1609691947
    },
    {
        "content": "<p>This is the actual theorem<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.modeq.modeq_and_modeq_iff_modeq_mul\">docs#nat.modeq.modeq_and_modeq_iff_modeq_mul</a></p>",
        "id": 221459286,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609692138
    },
    {
        "content": "<p>But you need the statements about the cardinality of units for the multiplicativity of totient, and I think it would be annoying to use this version to prove that</p>",
        "id": 221459393,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609692308
    },
    {
        "content": "<p>This is really spooky as I haven't seen this but just proved RSA over the weekend</p>",
        "id": 221518432,
        "sender_full_name": "Arcayn",
        "timestamp": 1609763948
    },
    {
        "content": "<p>I needed to prove multiplicativity for it plus values on prime inputs, I will potentially PR it although the naive number-theoretic approach is possibly less valuable than using the ring theortic version of the CRT</p>",
        "id": 221518567,
        "sender_full_name": "Arcayn",
        "timestamp": 1609764050
    },
    {
        "content": "<p>What exactly did you prove? PS I assume you're the person who told me they'd done this on the Discord earlier ;-)</p>",
        "id": 221518903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609764349
    },
    {
        "content": "<p>Yes I am ! let me just post the theorem statement here - I imagine you could make a more powerful version which doesn't require the private key d to be provided but I didn't really want to mess around with switching between nat and zmod to find modular inverses etc. at the moment as I'm still fairly new :) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">rsa_is_correct</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">m</span> <span class=\"n\">e</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_e</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h_p</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_q</span> <span class=\"o\">:</span> <span class=\"n\">q.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p_neq_q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">totient.modeq</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">modeq</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 221519819,
        "sender_full_name": "Arcayn",
        "timestamp": 1609764964
    },
    {
        "content": "<p>And just for the sake of completeness</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_totient</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.coprime</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">totient</span> <span class=\"bp\">=</span> <span class=\"n\">a.totient</span> <span class=\"bp\">*</span> <span class=\"n\">b.totient</span>\n</code></pre></div>",
        "id": 221520107,
        "sender_full_name": "Arcayn",
        "timestamp": 1609765182
    },
    {
        "content": "<p>Nice! These, and also evaluation of totient function on prime powers, would surely be welcome additions to mathlib.</p>",
        "id": 221520623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609765458
    },
    {
        "content": "<p>(note that this is the version of the proof that does not require m to be coprime to n and doesn't invoke <code>nat.modeq.pow_totient</code> but instead <code>zmod.units_pow_card_sub_one_eq_one</code>. If we base this proof on Euler's theorem, afaik we would not need multiplicativity of phi)</p>",
        "id": 221520685,
        "sender_full_name": "Arcayn",
        "timestamp": 1609765501
    },
    {
        "content": "<p>Yes, I also proved</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prime_totient</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.totient</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Which is trivially extensible to prime powers i think</p>",
        "id": 221520860,
        "sender_full_name": "Arcayn",
        "timestamp": 1609765612
    },
    {
        "content": "<p>It sounds like you should be able to redefine <code>totient</code> as an <code>arithmetic_function</code>, and provide <code>totient_is_multiplicative : totient.is_multiplicative</code></p>",
        "id": 221521346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609765959
    },
    {
        "content": "<p>I am having trouble with modular arithmetic. How can this be proved, and can someone add this (with a better name and proof) to mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">modCongruent1</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"n\">n3</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">):</span> <span class=\"n\">n1</span> <span class=\"bp\">%</span> <span class=\"n\">n3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">n3</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289297593,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1657617744
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.add_mul_mod_self\">docs#int.add_mul_mod_self</a></p>",
        "id": 289297986,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657618019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385848\">@Mark Gerads</span>, did you try <code>library_search</code>?</p>",
        "id": 289298004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657618035
    },
    {
        "content": "<p>Too late, <code>yael_search</code> was triggered <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 289298041,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657618068
    },
    {
        "content": "<p>I tried library_search with 'import all'. I don't know why it wasn't found; maybe because the equation was backward?</p>",
        "id": 289298503,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1657618362
    },
    {
        "content": "<p>My instinct is to write it the other way from the way you wrote it; simplification lemmas <code>h : A = B</code> are often used with <code>rw h</code> so to make it easier to use it's nicer to have A the more complicated thing and B the simpler thing.</p>",
        "id": 289337089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657638013
    }
]