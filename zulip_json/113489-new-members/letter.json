[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> <code>rfl</code> doesn't mean \"it's obvious\", it means \"equality is reflexive\" ie it proves X=X. Your goal is something like <code>true or P or Q or R</code></p>",
        "id": 206908928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597394346
    },
    {
        "content": "<p>Got most of the way through it. How to fill the  <code>sorry</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n    <span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n    <span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n    <span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n    <span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n    <span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n\n\n    <span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span> <span class=\"n\">measure_theory</span>\n\n    <span class=\"kn\">section</span> <span class=\"n\">e2_7_1</span>\n\n\n    <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n    <span class=\"kn\">inductive</span> <span class=\"n\">letter</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n    <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n    <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n    <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">letter</span>\n\n    <span class=\"kn\">namespace</span> <span class=\"n\">letter</span>\n\n\n\n    <span class=\"kn\">instance</span> <span class=\"n\">fintype</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span><span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">},</span> <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">}</span>\n\n    <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n    <span class=\"kn\">lemma</span> <span class=\"n\">univ_letter</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">letter</span> <span class=\"n\">letter</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n\n\n\n\n\n    <span class=\"n\">def</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">letter</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{{},</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">}}</span>\n\n    <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">is_measurable</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">f1</span><span class=\"o\">),</span>\n    <span class=\"n\">is_measurable_empty</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">f1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mem_insert_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">is_measurable_compl</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">rw</span> <span class=\"n\">f1</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span><span class=\"o\">,</span>\n            <span class=\"n\">right</span><span class=\"o\">,</span>\n            <span class=\"n\">right</span><span class=\"o\">,</span>\n            <span class=\"n\">right</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n            <span class=\"n\">ext1</span><span class=\"o\">,</span>\n            <span class=\"n\">split</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">unfold</span> <span class=\"n\">univ</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n                <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n            <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">finish</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">rw</span> <span class=\"n\">f1</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n            <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n              <span class=\"n\">right</span><span class=\"o\">,</span>\n              <span class=\"n\">right</span><span class=\"o\">,</span>\n              <span class=\"n\">left</span><span class=\"o\">,</span>\n              <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n                <span class=\"n\">ext1</span><span class=\"o\">,</span>\n                <span class=\"n\">split</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n                    <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n                    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n                    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n            <span class=\"o\">},</span>\n            <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">right</span><span class=\"o\">,</span>\n                <span class=\"n\">left</span><span class=\"o\">,</span>\n                <span class=\"n\">ext1</span><span class=\"o\">,</span>\n                <span class=\"n\">split</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">finish</span><span class=\"o\">,</span>   <span class=\"o\">},</span>\n                <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n                    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">left</span><span class=\"o\">,</span>\n                <span class=\"n\">ext1</span><span class=\"o\">,</span>\n                <span class=\"n\">split</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n                    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n                    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">},</span>\n\n        <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">is_measurable_Union</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">f1</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">s : ℕ → set letter,</span>\n<span class=\"cm\">h : ∀ (i : ℕ), s i ∈ {∅, {a, b}, {c, d}, {a, b, c, d}}</span>\n<span class=\"cm\">⊢ Union s ∈ {∅, {a, b}, {c, d}, {a, b, c, d}}</span>\n<span class=\"cm\">-/</span>\n\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n\n\n    <span class=\"o\">}</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"kn\">end</span> <span class=\"n\">letter</span>\n\n\n    <span class=\"kn\">end</span> <span class=\"n\">e2_7_1</span>\n</code></pre></div>",
        "id": 206909481,
        "sender_full_name": "Iocta",
        "timestamp": 1597394924
    },
    {
        "content": "<p>I'm never sure when I need to be thinking about how to do the math vs knowing about tactics/lemmas in mathlib. I guess this will come with experience.</p>",
        "id": 206909746,
        "sender_full_name": "Iocta",
        "timestamp": 1597395225
    },
    {
        "content": "<p><code>suggest</code> or <code>library_search</code> might help here</p>",
        "id": 206909836,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597395332
    },
    {
        "content": "<p>Those don't give me anything; for some reason my computer seems to be struggling with this example, maybe they timed out sooner than they shouldve</p>",
        "id": 206909952,
        "sender_full_name": "Iocta",
        "timestamp": 1597395456
    },
    {
        "content": "<p>What would your maths argument be? Maybe write it out here in gory detail. A possible hint would be to look at the <code>fin_cases</code> tactic, but you'll need to do some preparatory work before it's useful.</p>",
        "id": 206910867,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597396369
    },
    {
        "content": "<p>Yeah I echo Scott's comment. You might think this is \"obvious\" -- but what is the actual proof?</p>",
        "id": 206912663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597397912
    },
    {
        "content": "<p>Ooh, I see. So I guess we have to iterate over every possible union, and check that it's valid? That would explain why it isn't just a <code>library_search</code> away.</p>",
        "id": 206912814,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597398031
    },
    {
        "content": "<p>And these are arbitrary possibly infinite unions</p>",
        "id": 206914098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597399175
    },
    {
        "content": "<p>Since each <code>s i</code> lives in some finite set, you might make an argument about the image of <code>s</code> (which is some set of sets of letters).</p>",
        "id": 206915334,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597400300
    },
    {
        "content": "<p>Then do a case bash</p>",
        "id": 206915336,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597400306
    },
    {
        "content": "<p>(possibly with <code>fin_cases</code>)</p>",
        "id": 206915347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597400324
    },
    {
        "content": "<p>I think this is in the direction described, but dunno how to fill it.</p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">letter</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">f1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">f1</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">f1</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">im_f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">letter</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">letter</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">},</span>\n    <span class=\"k\">let</span> <span class=\"n\">sets</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">letter</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">}},</span>\n    <span class=\"k\">have</span> <span class=\"n\">imf2sets</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">letter</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">im_f</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">sets</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n        <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">suffices</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">uclosed_imf</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">im_f</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n\n    <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">imf2sets</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">uclosed_imf</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 207001669,
        "sender_full_name": "Iocta",
        "timestamp": 1597459620
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">alg</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">univ_mem</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_complements</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_finite_unions</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>this restricts the last line of <code>measurable_space</code> to only finite unions. Is that the right expression for closed finite unions?</p>",
        "id": 207007214,
        "sender_full_name": "Iocta",
        "timestamp": 1597470468
    },
    {
        "content": "<p>Your <code>closed_countable_unions</code> seems to be about finite unions, not countable ones?</p>",
        "id": 207007419,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597470962
    },
    {
        "content": "<p>heh yeah that's what I meant</p>",
        "id": 207007448,
        "sender_full_name": "Iocta",
        "timestamp": 1597471007
    },
    {
        "content": "<p>[edited it to avoid confusion]</p>",
        "id": 207007502,
        "sender_full_name": "Iocta",
        "timestamp": 1597471118
    },
    {
        "content": "<p>If you only care about finite unions, then I think the statement can be simplified to <code>union</code> (small u) of two sets</p>",
        "id": 207007563,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597471235
    },
    {
        "content": "<p>oh that sounds true</p>",
        "id": 207007680,
        "sender_full_name": "Iocta",
        "timestamp": 1597471485
    },
    {
        "content": "<p>How to interpret the definition of <code>hr</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">algebra&#39;</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">univ_mem</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_complements</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_finite_unions</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span> <span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">univ_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">closed_complements</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n<span class=\"c1\">-- α: Type u</span>\n<span class=\"c1\">-- s: set (set α)</span>\n<span class=\"c1\">-- ab: set α</span>\n<span class=\"c1\">-- ha: a ∈ s</span>\n<span class=\"c1\">-- hb: b ∈ s</span>\n<span class=\"c1\">-- h: a ∩ bᶜ ∈ s</span>\n<span class=\"c1\">-- r: set α</span>\n<span class=\"c1\">-- hr: r ∈ λ (x : set α), x ∈ s</span>\n<span class=\"c1\">-- ⊢ rᶜ ∈ λ (x : set α), x ∈ s</span>\n\n  <span class=\"o\">},</span>\n  <span class=\"n\">closed_finite_unions</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207011071,
        "sender_full_name": "Iocta",
        "timestamp": 1597479073
    },
    {
        "content": "<p><code>set X</code> is implemented as <code>X \\r Prop</code></p>",
        "id": 207011117,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479131
    },
    {
        "content": "<p>is that \"proof that r is in the set of functions from sets x of alpha to proof that x is in s\"?</p>",
        "id": 207011118,
        "sender_full_name": "Iocta",
        "timestamp": 1597479133
    },
    {
        "content": "<p>so <code>\\lambda x : x \\in s</code> is really <code>{ x | x \\in s }</code></p>",
        "id": 207011124,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479155
    },
    {
        "content": "<p>so <code>hr</code> is really saying <code>r \\in s</code></p>",
        "id": 207011126,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479165
    },
    {
        "content": "<p>that's what happens if you use the <code>X \\r Prop</code> implementation to write <code>\\sigma</code></p>",
        "id": 207011135,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479191
    },
    {
        "content": "<p><code>σ := (λx, x ∈ s)</code></p>",
        "id": 207011137,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479200
    },
    {
        "content": "<p>instead of <code>σ := { x | x ∈ s }</code></p>",
        "id": 207011141,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479213
    },
    {
        "content": "<p>I don't think your hypothesis is saying what you want it to say either</p>",
        "id": 207011184,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479244
    },
    {
        "content": "<p>you want to say that for all <code>a b \\in s</code> we have <code>a \\cap b\\^c \\in s</code></p>",
        "id": 207011190,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479264
    },
    {
        "content": "<p>I have a feeling there's something wrong with the quantifiers</p>",
        "id": 207011191,
        "sender_full_name": "Iocta",
        "timestamp": 1597479265
    },
    {
        "content": "<p>not just for a specific <code>a</code> and <code>b</code></p>",
        "id": 207011193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479269
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 207011194,
        "sender_full_name": "Iocta",
        "timestamp": 1597479274
    },
    {
        "content": "<p>and instead of <code>σ := { x | x ∈ s }</code> you should just write <code>σ := s</code></p>",
        "id": 207011203,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479305
    },
    {
        "content": "<p>but I thought I could always put hypotheses on the left of the : instead of \\foralling them</p>",
        "id": 207011208,
        "sender_full_name": "Iocta",
        "timestamp": 1597479320
    },
    {
        "content": "<p>you're bracketing wrong</p>",
        "id": 207011212,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479334
    },
    {
        "content": "<p>okay I'll start over</p>",
        "id": 207011216,
        "sender_full_name": "Iocta",
        "timestamp": 1597479353
    },
    {
        "content": "<p><code>\\forall a, a = a</code> is the same as <code>(a) : a = a</code></p>",
        "id": 207011218,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479361
    },
    {
        "content": "<p>but <code>(\\forall a, a = a) \\to b</code> is not the same as <code>(a) (h : a = a) : b</code></p>",
        "id": 207011260,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479377
    },
    {
        "content": "<p>that's what it means that forall can be replaced with colon</p>",
        "id": 207011262,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597479390
    },
    {
        "content": "<p>This seems to work.  I have some questions about improvements. Can I use <code>closed_complements</code> in <code>closed_finite_unions</code>? Currently I'm proving the same thing twice. Or can I pull it into an internal lemma to be used in both places?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">algebra&#39;</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">univ_mem</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_complements</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_finite_unions</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span> <span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">compl_iff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"err\">ᶜ</span>  <span class=\"bp\">↔</span> <span class=\"n\">x</span><span class=\"err\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">ext1</span><span class=\"o\">,</span>\n        <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">compl_inter_compl_eq_union</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">ᶜ</span> <span class=\"err\">∩</span> <span class=\"n\">y</span><span class=\"err\">ᶜ</span><span class=\"o\">)</span><span class=\"err\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">∪</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">ᶜ</span> <span class=\"err\">∩</span> <span class=\"n\">y</span><span class=\"err\">ᶜ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∪</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">ᶜ</span><span class=\"o\">,</span> <span class=\"o\">{</span>     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">compl_union</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">compl_iff</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">ᶜ</span> <span class=\"err\">∩</span> <span class=\"n\">y</span><span class=\"err\">ᶜ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∪</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n\n\n\n<span class=\"kn\">example</span>  <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hs</span><span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">univ_mem</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">closed_complements</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">z</span> <span class=\"n\">hs</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">univ_inter</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">closed_finite_unions</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">cc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n        <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">z</span> <span class=\"n\">hs</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">univ_inter</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hxc</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">cc</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>  <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hyc</span><span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">cc</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">ᶜ</span> <span class=\"err\">∩</span> <span class=\"n\">y</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"err\">ᶜ</span> <span class=\"n\">y</span> <span class=\"n\">hxc</span> <span class=\"n\">hy</span> <span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">ᶜ</span> <span class=\"err\">∩</span> <span class=\"n\">y</span><span class=\"err\">ᶜ</span><span class=\"o\">)</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">cc</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">ᶜ</span> <span class=\"err\">∩</span> <span class=\"n\">y</span><span class=\"err\">ᶜ</span> <span class=\"o\">)</span>  <span class=\"n\">this</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">ᶜ</span> <span class=\"err\">∩</span> <span class=\"n\">y</span><span class=\"err\">ᶜ</span><span class=\"o\">)</span><span class=\"err\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">∪</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">compl_inter_compl_eq_union</span>  <span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207014288,
        "sender_full_name": "Iocta",
        "timestamp": 1597484935
    },
    {
        "content": "<p>Also, there's gotta be an easier way to do those De Morgan-like lemmas, right?</p>",
        "id": 207014731,
        "sender_full_name": "Iocta",
        "timestamp": 1597485646
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">compl_inter_compl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">ᶜ</span> <span class=\"err\">∩</span> <span class=\"n\">y</span><span class=\"err\">ᶜ</span><span class=\"o\">)</span><span class=\"err\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">∪</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">compl_inter</span><span class=\"o\">,</span> <span class=\"n\">compl_compl</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 207018993,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597493300
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">closed_complements</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">z</span> <span class=\"n\">hs</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">univ_inter</span> <span class=\"n\">z</span><span class=\"err\">ᶜ</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">univ_mem</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">closed_complements</span> <span class=\"o\">:=</span> <span class=\"n\">closed_complements</span><span class=\"o\">,</span>\n  <span class=\"n\">closed_finite_unions</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"err\">ᶜ</span> <span class=\"err\">∩</span> <span class=\"n\">b</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">closed_complements</span> <span class=\"bp\">_</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">compl_union</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">compl_compl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">closed_complements</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207021481,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597497242
    },
    {
        "content": "<p>I'm using <code>have</code> to share the <code>closed_complements</code> proof – I haven't worked with structures much yet so I don't know if there's a better way</p>",
        "id": 207022257,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597498533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> <a href=\"#narrow/stream/113489-new-members/topic/letter/near/207014731\">said</a>:</p>\n<blockquote>\n<p>Also, there's gotta be an easier way to do those De Morgan-like lemmas, right?</p>\n</blockquote>\n<p>the canonical way to solve any 0th order logic (i.e. propositional logic) goal is <code>finish</code></p>",
        "id": 207030629,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597511785
    },
    {
        "content": "<p>Why doesn't <code>lemma compl_inter_compl_eq_union' (x y : set α ): (xᶜ ∩ yᶜ)ᶜ = x ∪ y := by finish</code> work?</p>",
        "id": 207032640,
        "sender_full_name": "Iocta",
        "timestamp": 1597515065
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">ᶜ</span> <span class=\"err\">∩</span> <span class=\"n\">y</span><span class=\"err\">ᶜ</span><span class=\"o\">)</span><span class=\"err\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">∪</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207032811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597515348
    },
    {
        "content": "<p>because it isn't a 0th order logic goal</p>",
        "id": 207033150,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597515917
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hs</span><span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">structure</span> <span class=\"n\">algebra&#39;</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">univ_mem</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_complements</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_finite_unions</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span> <span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>How do I use the <code>univ_mem</code> from the structure definition?</p>",
        "id": 207041120,
        "sender_full_name": "Iocta",
        "timestamp": 1597528387
    },
    {
        "content": "<p><code>h.univ_mem</code></p>",
        "id": 207041250,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597528584
    },
    {
        "content": "<p>again I think that isn't what you meant</p>",
        "id": 207041259,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597528606
    },
    {
        "content": "<p><code>h</code> is some algebra structure on <code>\\alpha</code> that has nothing to do with <code>s</code></p>",
        "id": 207041271,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597528628
    },
    {
        "content": "<p>the underlying set of <code>h</code> is <code>h.\\sigma</code></p>",
        "id": 207041278,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597528649
    },
    {
        "content": "<p>Like this I guess </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">univ_mem</span>\n</code></pre></div>",
        "id": 207041847,
        "sender_full_name": "Iocta",
        "timestamp": 1597529313
    },
    {
        "content": "<p>yes that's right</p>",
        "id": 207042010,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597529556
    },
    {
        "content": "<p>I don't totally get it. What do I mean here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">semialgebra</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">univ_mem</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">empty_mem</span> <span class=\"o\">:</span> <span class=\"o\">{}</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semi_closed_complements</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">,</span>  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">semialgebra</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">univ_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">empty_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">semi_closed_complements</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207042496,
        "sender_full_name": "Iocta",
        "timestamp": 1597530329
    },
    {
        "content": "<p>Oh maybe this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">semialgebra</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">,</span>\n  <span class=\"n\">univ_mem</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">univ_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">empty_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">semi_closed_complements</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207042813,
        "sender_full_name": "Iocta",
        "timestamp": 1597530866
    },
    {
        "content": "<p>How can I use <code>algebra'.univ_mem</code> to fill this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">all_algebras</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">algebra&#39;</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span>  <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">Union</span> <span class=\"n\">ss</span><span class=\"o\">,</span>\n  <span class=\"n\">univ_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Union</span><span class=\"o\">],</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">all_algebras</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">ss0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">ss0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n<span class=\"c1\">-- α: Type u</span>\n<span class=\"c1\">-- ss: ℕ → set (set α)</span>\n<span class=\"c1\">-- all_algebras: algebra&#39; ↥(ss 0)</span>\n<span class=\"c1\">-- ss0: set (set α) := ss 0</span>\n<span class=\"c1\">-- ⊢ univ ∈ ss0</span>\n    <span class=\"o\">}</span>\n\n\n  <span class=\"o\">},</span>\n  <span class=\"n\">closed_complements</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">closed_finite_unions</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207056186,
        "sender_full_name": "Iocta",
        "timestamp": 1597555776
    },
    {
        "content": "<p>there's a sequence of <code>set (set alpha)</code>, each of which contains <code>univ</code>. So I should be able to pick the first one, show it has <code>univ</code>, and then unioning it with the others should still have <code>univ</code>.</p>",
        "id": 207056668,
        "sender_full_name": "Iocta",
        "timestamp": 1597556733
    },
    {
        "content": "<p>but I'm stuck at showing the first one has <code>univ</code></p>",
        "id": 207056677,
        "sender_full_name": "Iocta",
        "timestamp": 1597556754
    },
    {
        "content": "<p>I figured it'd be <code>algebra'.univ_mem</code> or something like that but no dice</p>",
        "id": 207056789,
        "sender_full_name": "Iocta",
        "timestamp": 1597556942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> <code>algebra' (ss n)</code> means an algebra structure on <code>ss n</code> (coerced to a type), not an algebra structure on <code>\\alpha</code> whose underlying set is <code>ss n</code></p>",
        "id": 207064446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597572173
    },
    {
        "content": "<p>this should be what you mean:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">algebra&#39;</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">univ_mem</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_complements</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_finite_unions</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span> <span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ss_increasing</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"err\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">,</span>\n  <span class=\"n\">univ_mem</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Union</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">univ_mem</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">closed_complements</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">closed_finite_unions</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207064551,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597572374
    },
    {
        "content": "<p>Yes, thank you.</p>",
        "id": 207096973,
        "sender_full_name": "Iocta",
        "timestamp": 1597623837
    },
    {
        "content": "<p>I guess it's complaining that <code>a &lt;= </code> might not be decidable? What is the normal way to handle this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n\n<span class=\"kn\">structure</span> <span class=\"n\">algebra&#39;</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">univ_mem</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_complements</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_finite_unions</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span> <span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ss_subset_of_ss_succ</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"n\">include</span> <span class=\"n\">ss_subset_of_ss_succ</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ss_increasing</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"o\">,</span>\n    <span class=\"o\">{</span>        <span class=\"n\">exact</span> <span class=\"n\">hs</span><span class=\"o\">,</span>    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">specialize</span> <span class=\"n\">ss_subset_of_ss_succ</span> <span class=\"n\">h_b</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">ss_subset_of_ss_succ</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h_ih</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"err\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">,</span>\n  <span class=\"n\">univ_mem</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Union</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">univ_mem</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">closed_complements</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">exists_ssn</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">let</span> <span class=\"n\">sn</span><span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span>  <span class=\"o\">},</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">exists_ssn</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">closed_complements</span> <span class=\"n\">s</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n <span class=\"o\">},</span>\n  <span class=\"n\">closed_finite_unions</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">na</span> <span class=\"n\">hna</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">nb</span> <span class=\"n\">hnb</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">nab</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"n\">na</span> <span class=\"n\">nb</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">na_subset</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">na</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">nab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">ss_increasing</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_max_left</span><span class=\"o\">,</span>\n<span class=\"c1\">-- invalid apply tactic, failed to unify</span>\n<span class=\"c1\">--   ∀ (n : ℕ), (ss n).σ ⊆ (ss (n + 1)).σ</span>\n<span class=\"c1\">-- with</span>\n<span class=\"c1\">--   ∀ [_inst_1 : decidable_linear_order ?m_1] (a b : ?m_1), a ≤ max a b</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">nb_subset</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">nb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">nab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">ss_increasing</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_max_right</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">use</span> <span class=\"n\">nab</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">nab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">closed_finite_unions</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">na_subset</span> <span class=\"n\">hna</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nb_subset</span> <span class=\"n\">hnb</span><span class=\"o\">),</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207228802,
        "sender_full_name": "Iocta",
        "timestamp": 1597733947
    },
    {
        "content": "<p>the error says you applied something that looks different than what lean wants</p>",
        "id": 207228926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597734110
    },
    {
        "content": "<p>I don't think it's a decidability problem, it's just a completely different theorem. <code>ss</code> has no definition in your problem, it's just a variable</p>",
        "id": 207228995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597734151
    },
    {
        "content": "<p>it looks like when you did <code>apply ss_increasing</code>, the first subgoal you got is <code>(ss_subset_of_ss_succ: ∀ n : ℕ, (ss n).σ ⊆ (ss (n + 1)).σ)</code>, which should be a variable in your context</p>",
        "id": 207229084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597734246
    },
    {
        "content": "<p>Alright this works</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n\n<span class=\"kn\">structure</span> <span class=\"n\">algebra&#39;</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">univ_mem</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_complements</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_finite_unions</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span> <span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ss_subset_of_ss_succ</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"n\">include</span> <span class=\"n\">ss_subset_of_ss_succ</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ss_increasing</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"o\">,</span>\n    <span class=\"o\">{</span>        <span class=\"n\">exact</span> <span class=\"n\">hs</span><span class=\"o\">,</span>    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">specialize</span> <span class=\"n\">ss_subset_of_ss_succ</span> <span class=\"n\">h_b</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">ss_subset_of_ss_succ</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h_ih</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"err\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">,</span>\n  <span class=\"n\">univ_mem</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Union</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">univ_mem</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">closed_complements</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">exists_ssn</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">let</span> <span class=\"n\">sn</span><span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span>  <span class=\"o\">},</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">exists_ssn</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">closed_complements</span> <span class=\"n\">s</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n <span class=\"o\">},</span>\n  <span class=\"n\">closed_finite_unions</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">na</span> <span class=\"n\">hna</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">nb</span> <span class=\"n\">hnb</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">na</span> <span class=\"n\">nb</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">na</span> <span class=\"n\">nb</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">closed_finite_unions</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n    <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">na</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">na</span> <span class=\"n\">nb</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">ss_increasing</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">ss_subset_of_ss_succ</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_max_left</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span> <span class=\"n\">hna</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">nb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">na</span> <span class=\"n\">nb</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">apply</span> <span class=\"n\">ss_increasing</span><span class=\"o\">,</span>\n            <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n            <span class=\"n\">apply</span> <span class=\"n\">ss_subset_of_ss_succ</span><span class=\"o\">,</span>\n            <span class=\"n\">apply</span> <span class=\"n\">le_max_right</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"n\">apply</span> <span class=\"n\">this</span> <span class=\"n\">hnb</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207230416,
        "sender_full_name": "Iocta",
        "timestamp": 1597735681
    },
    {
        "content": "<p>Those <code>have</code>s are a little awkward, can I avoid?</p>",
        "id": 207230465,
        "sender_full_name": "Iocta",
        "timestamp": 1597735710
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    <span class=\"o\">{</span>\n      <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_of_mem_of_subset</span> <span class=\"n\">hna</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ss_increasing</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ss_subset_of_ss_succ</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_max_left</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_of_mem_of_subset</span> <span class=\"n\">hnb</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ss_increasing</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ss_subset_of_ss_succ</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_max_right</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 207231116,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1597736268
    },
    {
        "content": "<p>nice. Did you happen to know that one or was there a trick to figuring it out?</p>",
        "id": 207231331,
        "sender_full_name": "Iocta",
        "timestamp": 1597736426
    },
    {
        "content": "<p>Looks like I did the same transformation as <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> there, but there are some other simplifications, too, elsewhere:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n\n<span class=\"kn\">structure</span> <span class=\"n\">algebra&#39;</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">univ_mem</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_complements</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_finite_unions</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span> <span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ss_subset_of_ss_succ</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"n\">include</span> <span class=\"n\">ss_subset_of_ss_succ</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ss_increasing</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ss_subset_of_ss_succ</span> <span class=\"n\">h_b</span> <span class=\"n\">h_ih</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">algebra&#39;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"err\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">,</span>\n  <span class=\"n\">univ_mem</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Union</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">univ_mem</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">closed_complements</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Union</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">closed_complements</span> <span class=\"n\">s</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n <span class=\"o\">},</span>\n  <span class=\"n\">closed_finite_unions</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Union</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">na</span> <span class=\"n\">hna</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">nb</span> <span class=\"n\">hnb</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">na</span> <span class=\"n\">nb</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">na</span> <span class=\"n\">nb</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">closed_finite_unions</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_of_mem_of_subset</span> <span class=\"n\">hna</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ss_increasing</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ss_subset_of_ss_succ</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_max_left</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_of_mem_of_subset</span> <span class=\"n\">hnb</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ss_increasing</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ss_subset_of_ss_succ</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_max_right</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207231372,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597736448
    },
    {
        "content": "<p>That's much prettier!</p>",
        "id": 207231567,
        "sender_full_name": "Iocta",
        "timestamp": 1597736579
    },
    {
        "content": "<p>I first tried <code>apply (_ : (ss nb).σ ⊆ (ss (max na nb)).σ) hna</code>, but that didn't look great either, so I scrolled through <a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/basic.html\">https://leanprover-community.github.io/mathlib_docs/data/set/basic.html</a> and there it was :)</p>",
        "id": 207231607,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1597736619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> <a href=\"#narrow/stream/113489-new-members/topic/letter/near/207231331\">said</a>:</p>\n<blockquote>\n<p>nice. Did you happen to know that one or was there a trick to figuring it out?</p>\n</blockquote>\n<p>Usually you're not supposed to take advantage of the way things are defined, so I looked for the lemma that takes <code>x ∈ s</code> and <code>s ⊆ t</code> to get <code>x ∈ t</code> figuring it must exist for that reason.  I guessed it was in <code>data.set.basic</code>, and found it with a quick search for <code>⊆</code>.  You could also use <code>library_search</code> to find this kind of theorem.  The trick then is that applying <code>mem_of_mem_of_subset hna</code> replaces the goal with the subset relation you want to prove.</p>",
        "id": 207231610,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597736620
    },
    {
        "content": "<p>And don't forget about <code>squeeze_simp</code> to figure out what your <code>simp</code> is doing.  This is where <code>set.mem_Union</code> came from.</p>",
        "id": 207231769,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597736737
    },
    {
        "content": "<p>Cool, thanks :-)</p>",
        "id": 207232040,
        "sender_full_name": "Iocta",
        "timestamp": 1597736895
    },
    {
        "content": "<p>just learned about rw at \\entails too</p>",
        "id": 207232066,
        "sender_full_name": "Iocta",
        "timestamp": 1597736913
    },
    {
        "content": "<p>One thing I'm confused about is that <code>set.mem_of_mem_of_subset</code> is marked with the <code>@[trans]</code> attribute, but you can't use the <code>transitivity</code> tactic in its place.  I'm not sure how this is supposed to work.</p>",
        "id": 207232323,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597737103
    }
]