[
    {
        "content": "<p>Hi,</p>\n<p>I have a function <code>pnat -&gt; pnat</code> and I need to perform an induction to prove a prop on it, however pnat is not an inductive type so I figured I should use a variable in N, and cast it to pnat using  <code>nat.to_pnat'</code> but it is actually not easy to work with that function everywhere.</p>\n<p>So is there a better way to perform an induction on <code>pnat</code> ?</p>",
        "id": 246312287,
        "sender_full_name": "Maxime Darrin",
        "timestamp": 1626509126
    },
    {
        "content": "<p>Someone's proved induction principles for <code>pnat</code>, so you don't have cast to<code>nat</code> here.  Check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pnat.strong_induction_on\">docs#pnat.strong_induction_on</a> and the next few lemmas.</p>",
        "id": 246312509,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626509425
    },
    {
        "content": "<p>Pnat <em>is</em> an inductive type, and if you do induction on it you'll get a nat you can then do normal nat induction on</p>",
        "id": 246312537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626509441
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>'s suggestion does those messy bits for you</p>",
        "id": 246312548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626509483
    },
    {
        "content": "<p>Inductive type definitions are a way to get a bunch of useful axioms and constructors automatically, but you can construct your own types out of other inductive types then define your own 'axioms' and constructors, where the 'axioms' are actually theorems you prove.  For <code>pnat</code>, you can think of <code>1 : pnat</code> and <code>(+1) : pnat -&gt; pnat</code> as being the constructors, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pnat.rec_on\">docs#pnat.rec_on</a> as being the recursion/induction principle.  This lets you forget how exactly <code>pnat</code> is defined.</p>",
        "id": 246312895,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626510009
    },
    {
        "content": "<p>I'd personally just avoid pnat if possible and use either (n+1) everywhere, or a hypothesis that n &gt; 0</p>",
        "id": 246312909,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626510067
    },
    {
        "content": "<p>It's usually not worth the hassle</p>",
        "id": 246312910,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626510074
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> said, <code>pnat</code> is actually an inductive type (as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype\">docs#subtype</a>), but I think you're meant to not take advantage of this fact -- it's an implementation detail. (But never taking advantage of it seems like a hassle...)</p>",
        "id": 246312924,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626510120
    },
    {
        "content": "<p>if you want the standard induction, there's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pnat.rec_on\">docs#pnat.rec_on</a></p>",
        "id": 246314561,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626512707
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 246314640,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626512857
    }
]