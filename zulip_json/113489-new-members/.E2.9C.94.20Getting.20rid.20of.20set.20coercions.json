[
    {
        "content": "<p>Good day every one,<br>\nI'd like to know the right way of solving this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- incomplete</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I understand coercions are needed since I'm thinking <code>y</code> to be of type <code>z</code>. But then I do not know how to get rid of them, nor to prove the generated <code>has_lift_t</code>goal.</p>",
        "id": 309597754,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1668432481
    },
    {
        "content": "<p>Ah, this was confusing me for a while because I couldn't see how this coercion worked. Notice that it's creating a new goal for a <code>has_lift_t</code> instance. Lean's not able to figure out for itself  how to turn <code>y</code> into a term of <code>z</code>.</p>",
        "id": 309598814,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668432818
    },
    {
        "content": "<p>If you for example change the <code>existsi</code> line to <code>existsi (λn : ℕ, (⟨y, H⟩ : z)),</code> then you're giving Lean the information it needs to produce this term of <code>z</code></p>",
        "id": 309598949,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668432863
    },
    {
        "content": "<p>This actually ends up being a full proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"o\">)),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Union_const</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 309599038,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668432914
    },
    {
        "content": "<p>Lean is able to see through all the coercions in that <code>exact</code> line. But, you can also add <code>simp</code> before it if you want.</p>\n<p>Or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"o\">)),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Union_const</span> <span class=\"n\">y</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 309599130,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668432951
    },
    {
        "content": "<p>Note that the <code>(y \\in z)</code> is introducing a new set called <code>y</code>, so you might have two <code>y</code> in context.</p>",
        "id": 309599315,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668433007
    },
    {
        "content": "<p>That doesn't happen here since the new <code>y</code> shadows the old one, so the variable rules make it not include the \"outer\" <code>y</code></p>",
        "id": 309599405,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668433046
    },
    {
        "content": "<p>but it's worth being aware that there's shadowing!</p>",
        "id": 309599447,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668433067
    },
    {
        "content": "<p>You probably meant to write <code>(hy : y ∈ z)</code></p>",
        "id": 309599477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668433081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Getting.20rid.20of.20set.20coercions/near/309599477\">said</a>:</p>\n<blockquote>\n<p>You probably meant to write <code>(hy : y ∈ z)</code></p>\n</blockquote>\n<p>Oh, indeed</p>",
        "id": 309599582,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1668433112
    },
    {
        "content": "<p>Also, rather than using <code>.val</code>, we try to use a coercion arrow or type ascription, like in <code>(⋃ (n : ℕ), (f n : set β)) = y</code>. That saves the need for the first <code>simp</code></p>",
        "id": 309599634,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668433125
    },
    {
        "content": "<p>(type ascriptions insert a coercion arrow automatically if needed)</p>",
        "id": 309599680,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668433144
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is how I'd write it</p>",
        "id": 309599748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668433178
    },
    {
        "content": "<blockquote>\n<p>(type ascriptions insert a coercion arrow automatically if needed)</p>\n</blockquote>\n<p>Often not where you expect them to though!</p>",
        "id": 309599797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668433193
    },
    {
        "content": "<p>So, the form without the hypothesis name <code>hy</code> works as a variable declaration, as in <code>(y : ...)</code>?</p>",
        "id": 309599861,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1668433205
    },
    {
        "content": "<p><code>(y ∈ z)</code> is shorthand for <code>(y) (H : y ∈ z)</code> (where <code>(y)</code> is short for <code>(y : _)</code> and  lean works out the <code>_</code> for you)</p>",
        "id": 309599904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668433225
    },
    {
        "content": "<p>I wish there were a way to name the hypothesis...</p>",
        "id": 309600011,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668433272
    },
    {
        "content": "<p>\"cute binders\" work for every binary operator by the way.</p>\n<p>Here's a perverse example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">H.symm</span>\n</code></pre></div>",
        "id": 309600276,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668433365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Getting.20rid.20of.20set.20coercions/near/309598949\">said</a>:</p>\n<blockquote>\n<p>If you for example change the <code>existsi</code> line to <code>existsi (λn : ℕ, (⟨y, H⟩ : z)),</code> then you're giving Lean the information it needs to produce this term of <code>z</code></p>\n</blockquote>\n<p>One final question, the <code>H</code>in the anonymous constructor, is also a placeholder?</p>",
        "id": 309600382,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1668433403
    },
    {
        "content": "<p>The <code>H</code> is the same <code>H</code> in the context.</p>",
        "id": 309600412,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668433420
    },
    {
        "content": "<p>It is equivalent to writing <code>existsi (λn : ℕ, subtype.mk y H),</code></p>",
        "id": 309600499,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668433444
    },
    {
        "content": "<p>but angle bracket notation uses the expected type to figure out which constructor(s) to use</p>",
        "id": 309600538,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668433459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Getting.20rid.20of.20set.20coercions/near/309600412\">said</a>:</p>\n<blockquote>\n<p>The <code>H</code> is the same <code>H</code> in the context.</p>\n</blockquote>\n<p>Great, the <code>H</code>in Eric's comment was <strong>literally <code>H</code></strong>... It seems I still have to get used to automatic naming. Thanks a lot.</p>",
        "id": 309601009,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1668433571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327749\">Pedro Sánchez Terraf</span> has marked this topic as resolved.</p>",
        "id": 309601040,
        "sender_full_name": "Notification Bot",
        "timestamp": 1668433583
    },
    {
        "content": "<p>I guess <code>existsi</code> doesn't know the expected type, hence the need for the type ascription.</p>\n<p>But, to add yet another way, you can use the <code>exists</code> constructor directly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">exists.intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩)</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- or refine ⟨(λ n, ⟨y, H⟩), _⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Union_const</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 309601089,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668433614
    },
    {
        "content": "<p>which leads to this one-liner</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩),</span> <span class=\"n\">Union_const</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 309601152,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668433648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327749\">Pedro Sánchez Terraf</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Getting.20rid.20of.20set.20coercions/near/309601009\">said</a>:</p>\n<blockquote>\n<p>It seems I still have to get used to automatic naming. Thanks a lot.</p>\n</blockquote>\n<p>No, much better to avoid it altogether and give everything explicit names!</p>",
        "id": 309606195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668435290
    },
    {
        "content": "<p>Indeed in Lean 4 if you don't name something then it names it something which you literally cannot explicitly refer to, because the auto-gen name is evil</p>",
        "id": 309623289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668438257
    }
]