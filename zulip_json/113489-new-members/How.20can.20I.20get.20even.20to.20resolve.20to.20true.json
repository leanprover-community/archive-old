[
    {
        "content": "<p>The following expressions do not resolve down to <code>true</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">even</span> <span class=\"mi\">2</span> <span class=\"c1\">-- results in \"even 2 : Prop\"</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">even</span> <span class=\"mi\">2</span> <span class=\"c1\">-- results in \"∃ (k : ℕ), 2 = 2.mul k\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">even</span> <span class=\"mi\">2</span> <span class=\"c1\">-- results in \"result type does not have an instance of type class 'has_repr', dumping internal representation, eval result #0\"</span>\n</code></pre></div>\n<p>What needs to be changed in the definition of <code>even</code> so that <code>#eval</code> will produce <code>true</code>?  Or is there another # command which will produce <code>true</code> from <code>even 2</code>?</p>\n<p>The definition of <code>even</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span>\n</code></pre></div>",
        "id": 218221982,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606672078
    },
    {
        "content": "<p><code>even 2</code> will not reduce to <code>true</code> because you need to input an idea, namely a value of <code>k</code> such that <code>2 = 2 * k</code> (plus a proof that 2 = 2 * k for your choice of k).</p>",
        "id": 218222047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606672160
    },
    {
        "content": "<p>It is a proposition, it doesn't come with an algorithm to evaluate it on its own, and it is not definitionally equal to <code>true</code></p>",
        "id": 218222049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672161
    },
    {
        "content": "<p>If we had algorithms which could figure out which propositions were true, we'd have something which contradicted Goedel's theorem.</p>",
        "id": 218222115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606672211
    },
    {
        "content": "<p>But don't we have <code>decidable_pred even</code>?</p>",
        "id": 218222124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606672243
    },
    {
        "content": "<p>however, lean does have a mechanism for associating algorithms to propositions to decide them, and since you found this in mathlib I will wager it already exists</p>",
        "id": 218222128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672254
    },
    {
        "content": "<p>to use it, try <code>#eval to_bool (even 2)</code></p>",
        "id": 218222132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672271
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.even.decidable_pred\">docs#nat.even.decidable_pred</a> (which I guess is found by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable.to_bool\">docs#decidable.to_bool</a>)</p>",
        "id": 218222135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606672285
    },
    {
        "content": "<p>which should evaluate to <code>tt</code></p>",
        "id": 218222141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672298
    },
    {
        "content": "<p>Where is <code>to_bool</code>?</p>",
        "id": 218222195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606672355
    },
    {
        "content": "<p>a more common way to exploit this decidability algorithm is something like <code>example : even 2 := dec_trivial</code>, where we don't prove it is equal to <code>true</code> per se but rather that it is provable</p>",
        "id": 218222203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672381
    },
    {
        "content": "<p><code>to_bool</code> is in core</p>",
        "id": 218222213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672399
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable.to_bool/src\">src#decidable.to_bool</a></p>",
        "id": 218222223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672426
    },
    {
        "content": "<p>Looks like doc-gen can't find things exported from other namespaces - I assume <code>decidable.to_bool</code> is re-exported as <code>to_bool</code> somewhere?</p>",
        "id": 218222264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606672447
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/ed6accfb611bbd28ef5b7e34361d2b58a366e2c9/library/init/logic.lean#L606\">https://github.com/leanprover-community/lean/blob/ed6accfb611bbd28ef5b7e34361d2b58a366e2c9/library/init/logic.lean#L606</a></p>",
        "id": 218222270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672463
    },
    {
        "content": "<p><code>export</code> is used very rarely, but it's basically a permanent <code>open</code> for everybody</p>",
        "id": 218222280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672500
    },
    {
        "content": "<p>it is used for <code>some</code> and <code>none</code> as well</p>",
        "id": 218222287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672511
    },
    {
        "content": "<p>fun fact: every olean file starts with a list of every export that has been done by any upstream file</p>",
        "id": 218222347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672575
    },
    {
        "content": "<p>Thanks. I'm trying to get a sense  of the bridge in Lean from theorem proving to \"correct programming\", that is, starting with a specification like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span>\n</code></pre></div>\n<p>and elaborating it into an algorithm.  So the answer is to look at <code>decidable.to_bool</code>.</p>\n<p>Since one of the goals of the Lean project is to program Lean in Lean, with the resulting implementation being provably correct in some sense, this transition from specification to algorithm has to happen when you have Lean in Lean.</p>",
        "id": 218222356,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606672591
    },
    {
        "content": "<blockquote>\n<p>with the resulting implementation being provably correct in some sense</p>\n</blockquote>\n<p>eh, that's not on the agenda</p>",
        "id": 218222376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672628
    },
    {
        "content": "<p>I would be very happy if that were the case but I don't think lean 4 will make much of an attempt in this direction</p>",
        "id": 218222395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672667
    },
    {
        "content": "<p><code>decidable.to_bool</code> is a boring function, it won't tell you much</p>",
        "id": 218222453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672703
    },
    {
        "content": "<p>the real meat is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.even.decidable_pred/src\">src#nat.even.decidable_pred</a></p>",
        "id": 218222467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606672729
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I guess that was just a <a href=\"https://leanprover.github.io/presentations/20181012_MSR/#/\">nice-to-have</a>  from <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> .</p>",
        "id": 218222474,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606672740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> where does that mention proving the correctness of lean 4?</p>",
        "id": 218222608,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606672908
    },
    {
        "content": "<p>I will say that writing a verifier that can prove its own implementation correctness is the stated goal of the <a href=\"https://github.com/digama0/mm0\">MM0 project</a>, but it's not lean, that would be way too hard mode</p>",
        "id": 218222696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606673007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> it's a  <a href=\"http://adam.chlipala.net/cpdt/\">possible application</a>.</p>",
        "id": 218224245,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606675212
    },
    {
        "content": "<p>yes it's possible, anything is possible, but it's not designed to be feasible</p>",
        "id": 218224266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606675246
    },
    {
        "content": "<p>In any case, it's certainly not <em>required</em></p>",
        "id": 218224295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606675292
    },
    {
        "content": "<p>Lean lets you write both algorithms and specifications, and you can have either one without the other, or both together</p>",
        "id": 218224380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606675367
    },
    {
        "content": "<p>Developing correct programs by correctly elaborating specifications is a goal.   The link I gave to is to doing that is for  Coq, but Lean is not too far from Coq.   I guess you have to assume the correctness of the verifier, if it is not feasible to verify the verifier in other than an informal sense.   </p>\n<p>Certainly it is the case that decision procedures for many sublanguages of logic are intractable.  That doesn't stop people from wanting to try.  For example, Microsoft managers in funding Lean may have this objective in mind.</p>",
        "id": 218224588,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606675570
    },
    {
        "content": "<p>I think you misunderstand. There is no theoretical difficulty, but both lean and coq are gigantic programs that have had years of effort put into them (without concern for verification). Verifying software is much harder than writing it, especially if it wasn't part of the plan originally. It's an engineering problem.</p>",
        "id": 218225634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606677067
    },
    {
        "content": "<p>Of course you can use lean and coq to verify <em>other</em> programs, particularly toy programs, without too much effort; in a sense that's what they are good at</p>",
        "id": 218225648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606677117
    },
    {
        "content": "<p>Unverified Lean in Lean would still be nice.  It's a good way to stress-test the whole language design.  You'd have to bootstrap a little from a prior non-pure-Lean version but it should be doable.  For example, Haskell is written in Haskell except for the runtime system: <a href=\"https://en.wikipedia.org/wiki/Glasgow_Haskell_Compiler#Architecture\">https://en.wikipedia.org/wiki/Glasgow_Haskell_Compiler#Architecture</a></p>",
        "id": 218233889,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606688828
    }
]