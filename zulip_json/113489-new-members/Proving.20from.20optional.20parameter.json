[
    {
        "content": "<p>How do I fill in the sorry?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Presumably I need to intro and input an <code>x</code> into <code>g</code> somehow -- but how? I know the specific example can be rewritten in a way that makes the proof <code>by assumption</code>, but this situation cropped up in another proof.</p>",
        "id": 147601867,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1542126079
    },
    {
        "content": "<p>I don't think this is true. The <code>:=</code> notation for <code>g</code>, just assigns a default value to <code>g</code>, if the user doesn't specify one when using the lemma, but you still have to prove for any <code>g</code>, since the user can override the default and use whatever value for <code>g</code> they like when using the lemma.</p>",
        "id": 147602168,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542126348
    },
    {
        "content": "<p>Maybe you want <code>let g := ... in ...</code>?</p>",
        "id": 147608991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542129681
    },
    {
        "content": "<p>If you have <code>let g := something</code> in some proof, you can prove <code>g = something</code>   with <code>rfl</code>.</p>",
        "id": 147610158,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542130421
    }
]