[
    {
        "content": "<p>Given the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">ty_bool</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_abs</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_true</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_false</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">t_true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upshift_cutoff</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">&lt;</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"bp\">$</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">t_false</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">cond</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upshift</span> <span class=\"o\">(</span><span class=\"n\">amt</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">amt</span> <span class=\"mi\">0</span> <span class=\"n\">t1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sizeof_upshift_cutoff</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t</span><span class=\"o\">}:</span> <span class=\"n\">sizeof</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">sizeof</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t</span><span class=\"o\">):=</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sizeof_upshift</span> <span class=\"o\">{</span><span class=\"n\">amt</span> <span class=\"n\">t</span><span class=\"o\">}:</span> <span class=\"n\">sizeof</span> <span class=\"o\">(</span><span class=\"n\">upshift</span> <span class=\"n\">amt</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sizeof</span> <span class=\"n\">t</span> <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">replacement</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">idx</span> <span class=\"k\">then</span> <span class=\"n\">replacement</span> <span class=\"k\">else</span> <span class=\"n\">t_var</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift</span> <span class=\"mi\">1</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">t_false</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">cond</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"c1\">--using_well_founded {rel_tac := λ _ _, `[exact ⟨_, measure_wf (sizeof psigma.snd)⟩]}</span>\n</code></pre></div>\n<p>I'm trying to indicate that the size of the third argument (the term) decreases. My attempt at using_well_founded is commented at the bottom.</p>\n<p>Thanks.</p>",
        "id": 230705446,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615993670
    },
    {
        "content": "<p>Eventually changing the definition slightly allowed the recursion without a manual well_founded.</p>\n<p>However, in a slightly different version, I am getting this issue again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">recordmap</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">r_nil</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span>\n<span class=\"bp\">|</span> <span class=\"n\">r_cons</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map_vals</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"bp\">→</span><span class=\"n\">T</span><span class=\"o\">):</span> <span class=\"n\">recordmap</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">recordmap</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">recordmap.r_nil</span> <span class=\"o\">:=</span> <span class=\"n\">recordmap.r_nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">recordmap.r_cons</span> <span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">recordmap.r_cons</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_vals</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_record</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">recordmap</span> <span class=\"n\">ttype</span><span class=\"o\">)):</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ttype</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">ty_bool</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_abs</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_true</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_false</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_record</span> <span class=\"o\">(</span><span class=\"n\">vals</span><span class=\"o\">:</span> <span class=\"n\">recordmap</span> <span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_projection</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">term</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">t1</span> <span class=\"bp\">`</span> <span class=\"bp\">∙</span> <span class=\"bp\">`</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`λ</span><span class=\"o\">:</span><span class=\"bp\">`</span> <span class=\"n\">T</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"n\">t</span>\n\n\n\n<span class=\"kd\">def</span> <span class=\"n\">is_value</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">t_true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upshift_cutoff</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">&lt;</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"n\">int.to_nat</span><span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"bp\">$</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">t_false</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">cond</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_record</span> <span class=\"n\">vals</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_record</span> <span class=\"o\">(</span><span class=\"n\">map_vals</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">vals</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_projection</span> <span class=\"n\">t</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_projection</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>In upshift_cutoff, the size of the third argument (term) always decreases, and as such, this recursion is well founded. I'm just not sure how to tell lean that.</p>",
        "id": 231455713,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616499420
    },
    {
        "content": "<p>In case anyone else looks for this:</p>\n<p>Assuming a def with 3 params, and you want to indicate that a property <code>sizeof</code> decreases on the third param, the correct invocation is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span> <span class=\"n\">arg1</span><span class=\"o\">,</span> <span class=\"n\">arg2</span><span class=\"o\">,</span> <span class=\"n\">arg3</span><span class=\"o\">⟩</span> <span class=\"o\">,</span> <span class=\"n\">sizeof</span> <span class=\"n\">arg3</span><span class=\"o\">)⟩],</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231516774,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616522946
    },
    {
        "content": "<p>We could probably use some more examples like this on our <a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">well-founded doc page</a>.</p>",
        "id": 231518233,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616523564
    },
    {
        "content": "<p>In the following minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">recordmap</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">map_vals</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"bp\">→</span><span class=\"n\">T</span><span class=\"o\">):</span> <span class=\"n\">recordmap</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">recordmap</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">pair</span><span class=\"o\">,(</span><span class=\"n\">prod.fst</span> <span class=\"n\">pair</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"bp\">$</span> <span class=\"n\">prod.snd</span> <span class=\"n\">pair</span><span class=\"o\">)))</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_record</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">recordmap</span> <span class=\"n\">ttype</span><span class=\"o\">)):</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_true</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_record</span> <span class=\"o\">(</span><span class=\"n\">vals</span><span class=\"o\">:</span> <span class=\"n\">recordmap</span> <span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">term</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_value</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upshift_cutoff</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_record</span> <span class=\"n\">vals</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- What is the correct have statement here, to make this well founded?</span>\n  <span class=\"n\">t_record</span> <span class=\"o\">(</span><span class=\"n\">map_vals</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">vals</span><span class=\"o\">)</span>\n\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">⟩</span> <span class=\"o\">,</span> <span class=\"n\">sizeof</span> <span class=\"n\">t</span><span class=\"o\">)⟩],</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>How can I prove the t_record case? I tried <code>have  (∀(x:term),((sizeof x) &lt; (sizeof (t_record vals)))), from sorry,</code>,  but lean didn't accept it.</p>",
        "id": 231602897,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616577466
    },
    {
        "content": "<p>I agree <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> , I'm finding it somewhat difficult to figure all this out</p>",
        "id": 231603865,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616577984
    },
    {
        "content": "<p>Figured it out: you have to put the have statement inside of the lambda, as such: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">upshift_cutoff</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_record</span> <span class=\"n\">vals</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- What is the correct have statement here, to make this well founded?</span>\n  <span class=\"n\">t_record</span> <span class=\"o\">(</span><span class=\"n\">map_vals</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">sizeof</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">sizeof</span> <span class=\"o\">(</span><span class=\"n\">t_record</span> <span class=\"n\">vals</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">vals</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231617250,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616584662
    }
]