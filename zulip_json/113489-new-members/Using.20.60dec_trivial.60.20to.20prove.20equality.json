[
    {
        "content": "<p>I have two complex terms that via <code>#eval</code> are equal. I'm trying to prove that these terms are equal via <code>... = ... := dec_trivial</code>. Yet I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deep</span> <span class=\"n\">recursion</span> <span class=\"n\">was</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">replace'</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">stack</span> <span class=\"n\">space</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">system</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is that really the case, or am I down a forsaken path?</p>",
        "id": 221161694,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609271582
    },
    {
        "content": "<p>in case you didn't try it, I'm pretty sure I've seen that exact error message once and restarting lean made it go away somehow</p>",
        "id": 221167399,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609276313
    },
    {
        "content": "<p>This occurs even with <code>leanproject build</code> which is a wrapper for <code>lean --make src</code>, and I got the same error.</p>",
        "id": 221168090,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609276815
    },
    {
        "content": "<p>What happens if you try <code>rfl</code> or <code>by refl</code>?</p>",
        "id": 221168298,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609276941
    },
    {
        "content": "<p>It might help to say a little more about what the terms are?</p>",
        "id": 221168331,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609276955
    },
    {
        "content": "<p><code>rfl</code> has  the same issue. You can see the files and output at <a href=\"https://github.com/Julian/lean-across-the-board/blob/list/src/guarini.lean\">https://github.com/Julian/lean-across-the-board/blob/list/src/guarini.lean</a>. The <code>list</code> branch compiles cleanly except for that one statement, so you can clone and try it out!</p>",
        "id": 221169528,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609277913
    },
    {
        "content": "<p>Kernel evaluation doesn't scale very well; it can't handle numbers larger than ~20. You should use <code>norm_num</code> for better evaluation</p>",
        "id": 221170048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609278268
    },
    {
        "content": "<p>I see you've used strings. Case closed.</p>",
        "id": 221170056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609278278
    },
    {
        "content": "<p>Oh I see, this is what all that verified parser stuff was about</p>",
        "id": 221170174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609278376
    },
    {
        "content": "<p><code>board.reduce</code> is equality of finite matrices</p>",
        "id": 221170195,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609278396
    },
    {
        "content": "<p>the <code>#eval</code> part just uses a <code>has_repr</code></p>",
        "id": 221170214,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609278412
    },
    {
        "content": "<p>The final statement makes reference to <code>guarini_algebraic</code> which is a list of strings</p>",
        "id": 221170273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609278454
    },
    {
        "content": "<p>The proofs above show that doing moves exactly specified by <code>(start_square, end_square)</code> provably give the <code>ending_position</code>.</p>",
        "id": 221170280,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609278458
    },
    {
        "content": "<p>Ah I see what you mean</p>",
        "id": 221170283,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609278464
    },
    {
        "content": "<p>the kernel can't handle string equality evaluation at all</p>",
        "id": 221170370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609278505
    },
    {
        "content": "<p>I'm not sure exactly how the parser is implemented but I would assume it eventually boils down to a string and/or character equality test</p>",
        "id": 221170399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609278536
    },
    {
        "content": "<p>You might have some luck with the reverse: constructing the string and proving it is equal to a given string literal</p>",
        "id": 221170445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609278573
    },
    {
        "content": "<p>so if your parser is invertible that might be an alternative way to get the kernel to believe that the parser would evaluate to X without actually running it</p>",
        "id": 221170533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609278617
    },
    {
        "content": "<p>Aha, I had hoped the parser part itself wasn't a necessary part of the proof, that somehow the <code>string -&gt; description structure</code> would just work.</p>",
        "id": 221170568,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609278653
    },
    {
        "content": "<p>It's not invertible because chess notation is fuzzy, it's many to one dependent on board state unfortunately.</p>",
        "id": 221170580,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609278678
    },
    {
        "content": "<p>If you can prove that part separately, you might be able to remove it from the dec_trivial</p>",
        "id": 221170585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609278685
    },
    {
        "content": "<p>Here we only need the chess notation to evaluate to \"parsed chess notation\" in some reasonable inductive type</p>",
        "id": 221170624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609278715
    },
    {
        "content": "<p>the kernel can probably handle working with the latter (it may sweat a bit but it shouldn't timeout)</p>",
        "id": 221170696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609278753
    },
    {
        "content": "<p>So two proofs, that each thing in the list of strings parses to a valid <code>description</code>, and that a different one that the list of <code>description</code> does the correct sequence?</p>",
        "id": 221170814,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609278846
    },
    {
        "content": "<p>right</p>",
        "id": 221170964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609278977
    },
    {
        "content": "<p>the first one you can prove by <code>simp</code> or so, and the second with <code>rfl</code></p>",
        "id": 221170987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609278996
    },
    {
        "content": "<p>It's also an option to pre-evaluate the parser to build the list of descriptions, and insert that directly into the theorem statement using a tactic, if you don't care about proving that the parsing goes to plan</p>",
        "id": 221171798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609279626
    },
    {
        "content": "<p>Yes, I'd have to write that tactic though, and I've kept delaying learning about how to do that</p>",
        "id": 221172766,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609280383
    },
    {
        "content": "<p>That's actually the easier option. You just call <code>eval_expr</code> to evaluate the expression as you would with <code>#eval</code>, then <code>reflect</code> to insert it into the theorem statement. The option using <code>simp</code> is likely to be more complicated because you will have to simplify a ton of things and even then you will probably get stuck at some decision procedure or other</p>",
        "id": 221176809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609284934
    }
]