[
    {
        "content": "<p>Is there a more efficient way to do this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">hb</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206080769,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596663007
    },
    {
        "content": "<p><code>tauto</code> can do the first implication.</p>",
        "id": 206081562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596663529
    },
    {
        "content": "<p>I was hoping for something that doesn't involve a <code>split</code> ...</p>",
        "id": 206081586,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596663550
    },
    {
        "content": "<p>I was hoping <code>equiv_rw</code> would help, but it doesn't.</p>",
        "id": 206081777,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596663681
    },
    {
        "content": "<p>There should be a lemma in data.equiv.basic</p>",
        "id": 206081821,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596663713
    },
    {
        "content": "<p>And there should be a lemma in the namespace function.surjective</p>",
        "id": 206081991,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596663808
    },
    {
        "content": "<p>Let's try <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.surjective.exists\">docs#function.surjective.exists</a></p>",
        "id": 206082107,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596663862
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 206082226,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596663959
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.forall_congr\">docs#equiv.forall_congr</a> but not <code>equiv.exists_congr</code>.</p>",
        "id": 206082635,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596664223
    },
    {
        "content": "<p>I guess that's ok?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">surjective</span><span class=\"bp\">.</span><span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>is pretty short!</p>",
        "id": 206082791,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596664338
    },
    {
        "content": "<p>Or even shorter, <code>f.surjective.exists</code>?</p>",
        "id": 206085204,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1596666167
    },
    {
        "content": "<p>Oops, yes!</p>",
        "id": 206086496,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596667073
    },
    {
        "content": "<p>Dot notation is awesome</p>",
        "id": 206086572,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596667120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113489-new-members/topic/iff.20with.20.E2.88.83.20on.20both.20sides/near/206085204\">said</a>:</p>\n<blockquote>\n<p>Or even shorter, <code>f.surjective.exists</code>?</p>\n</blockquote>\n<p>That's why the lemma is called <code>function.surjective.exists</code> instead of <code>exists_congr_of_surjective</code>.</p>",
        "id": 206095803,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596676504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/iff.20with.20.E2.88.83.20on.20both.20sides/near/206095803\">said</a>:</p>\n<blockquote>\n<p>That's why the lemma is called <code>function.surjective.exists</code> instead of <code>exists_congr_of_surjective</code>.</p>\n</blockquote>\n<p>Yeah, proofs like that really show off all the work you put into renaming and refactoring!</p>",
        "id": 206113349,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1596700626
    }
]