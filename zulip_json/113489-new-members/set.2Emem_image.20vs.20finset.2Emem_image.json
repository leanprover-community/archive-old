[
    {
        "content": "<p>Here is the definition of  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_image\">docs#set.mem_image</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">set.mem_image</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>and of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.mem_image\">docs#finset.mem_image</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">finset.mem_image</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.image</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Besides the specific notation <code>''</code> for set images, you see that the right hand sides have different forms, which (it seems to me) makes the automatic translation from one to the other a bit awkward. (I noticed that while trying to pass a proof from <code>set</code>s to <code>finset</code>s.)<br>\nShould “one” wish to unify them ? and which form would be the preferred one?</p>",
        "id": 265412519,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639825739
    },
    {
        "content": "<p>I think we should definitely unify them to have the same form on the RHS</p>",
        "id": 265412844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826190
    },
    {
        "content": "<p>I'd lean towards the second one, since them <code>simp</code> can be used to take it into the first one if desired</p>",
        "id": 265412865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826250
    },
    {
        "content": "<p>But it doesn't matter much</p>",
        "id": 265412870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826263
    },
    {
        "content": "<p>You mean that <code>simp</code> can create an <code>and</code> but tailord not to destruct it?<br>\nIf I wish to do this unification, do I have to proceed as <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> proposed me to do for commutators?</p>",
        "id": 265412996,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639826408
    },
    {
        "content": "<p>Simp knows about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_prop\">docs#exists_prop</a> which rewrites the second lemma into the first</p>",
        "id": 265413322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826822
    },
    {
        "content": "<p>I'd wait for a second opinion on which is the better choice before embarking on the refactor</p>",
        "id": 265413340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826876
    },
    {
        "content": "<p>You could do a <code>/poll</code></p>",
        "id": 265413395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826898
    },
    {
        "content": "<p>In fact, I fell on this question while writing the following lemmas :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">function.left_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hb_fa</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">function.left_inverse.id</span> <span class=\"n\">hfg</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hb_fa</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">function.left_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hb_fs</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.image</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset.mem_image.mp</span> <span class=\"n\">hb_fs</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">function.left_inverse.id</span> <span class=\"n\">hfg</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test3</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">function.right_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hb_fs</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">finset.image</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">hga_s</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hb_fs</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.mem_image.mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">and.intro</span> <span class=\"n\">hga_s</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">function.right_inverse.id</span> <span class=\"n\">hfg</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Three more questions :</p>\n<p>1) Should it exist explicitly in the library, as well as the analogues for sets. <br>\n(In the context of mul_action, <code>f</code> and <code>g</code> are actually an element of a group and its inverse, acting on a <code>finset</code>.  For <code>set</code>, here is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mem_smul_set_iff_inv_smul_mem\">docs#mem_smul_set_iff_inv_smul_mem</a>, but this is kind of the analogues for <code>finset</code>.)</p>\n<p>2) Certainly you can do it quicker, using some existing suff (which I couldn't find)</p>\n<p>3) If the two variants (for sets and finsets) have to coexist, should the proof of that for finsets reduce to the one for sets, using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.mem_coe\">docs#finset.mem_coe</a> or should they both be done directly ?</p>",
        "id": 265413502,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639827086
    },
    {
        "content": "<p>It might be worth editing the topic of that message so that the original question doesn't get lost</p>",
        "id": 265414006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639827801
    },
    {
        "content": "<p>Those lemmas look like they might be related to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.preimage\">docs#finset.preimage</a></p>",
        "id": 265414013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639827841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/set.2Emem_image.20vs.20finset.2Emem_image/near/265414006\">said</a>:</p>\n<blockquote>\n<p>It might be worth editing the topic of that message so that the original question doesn't get lost</p>\n</blockquote>\n<p>Do you have a suggestion? (In fact, I'm not sure of what you mean…)</p>",
        "id": 265414124,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639827974
    },
    {
        "content": "<p>You can edit a message and change its title.</p>",
        "id": 265414290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639828320
    },
    {
        "content": "<p>I personally like <code>∃ x : α, x ∈ s ∧ f x = y</code> better. It looks more like what one would write on paper.</p>",
        "id": 265414575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639828719
    },
    {
        "content": "<p>The advantage of the other proposition is that you only ever need to write <code>∃ x ∈ s, f x = y</code>, which looks ever more like what you would write on paper.</p>",
        "id": 265414745,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639828901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/set.2Emem_image.20vs.20finset.2Emem_image/near/265414290\">said</a>:</p>\n<blockquote>\n<p>You can edit a message and change its title.</p>\n</blockquote>\n<p>I found that but it is unclear what title you wish me to write. (I can change the title of what follows my second question, or change the title of the initial one…)</p>",
        "id": 265415736,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639830367
    },
    {
        "content": "<p>I copy here links to a thread with answers of <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> : <br>\n<a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Questions.20about.20lemmas.20regarding.20images.20of.20sets.2Ffinsets\">#new members &gt; Questions about lemmas regarding images of sets/finsets</a></p>",
        "id": 265420166,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639836279
    }
]