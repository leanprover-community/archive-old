[
    {
        "content": "<p>Hello, I'm new here and have been playing around with matrices in Lean. First of all, sorry if this is not the correct stream to ask this in.</p>\n<p>My problems are essentially with matrix coercion.  I’ve seen that we there is the following notation for matrices and I would like to know how to use it for special_linear_group. Specifically, how do I take</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n        <span class=\"kd\">def</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span>  <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]]</span>\n</code></pre></div>\n<p>and turn it into an element of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.special_linear_group</span>\n        <span class=\"kd\">def</span> <span class=\"n\">SL2Z</span> <span class=\"o\">:=</span> <span class=\"n\">special_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span>\n</code></pre></div>\n<p>I assume this wont be automatic as one has prove N has determinant 1, but I dont know how to get lean to take a 2x2 matrix of determinant 1 and think of it as an element of SL2Z. </p>\n<p>Thank you</p>",
        "id": 233293654,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1617702991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> Welcome! This stream is fine (-;</p>",
        "id": 233294090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617703214
    },
    {
        "content": "<p>You can turn a matrix into an element of <code>SL2Z</code> using <code>\\&lt; _, _ \\&gt;</code>. If you type that into VScode, the <code>\\&lt;</code> and <code>\\&gt;</code> will turn into funny unicode brackets.</p>",
        "id": 233294190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617703256
    },
    {
        "content": "<p>The end result will be <code>\\&lt;your_matrix, proof_that_det_eq_1\\&gt;</code></p>",
        "id": 233294228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617703273
    },
    {
        "content": "<p>Ah that's what I needed. Thank you very much!</p>",
        "id": 233295205,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1617703823
    },
    {
        "content": "<p>I guess the following also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_matrix</span> <span class=\"o\">:</span> <span class=\"n\">SL2Z</span> <span class=\"o\">:=</span>\n<span class=\"n\">_</span>\n</code></pre></div>\n<p>Now put your cursor on the <code>_</code>, and wait till a little <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span> appears.</p>",
        "id": 233295462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617703992
    },
    {
        "content": "<p>Then you can click it, or type <code>Ctrl</code>-<code>.</code>.</p>",
        "id": 233295486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617704004
    },
    {
        "content": "<p>Now choose <code>generate skeleton</code> (almost at the bottom of hte menu)</p>",
        "id": 233295579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617704048
    },
    {
        "content": "<p>Thats really useful, thank you. Now, say I wanted to use this notation. I was trying to prove that N^2 is 1. I end up with something that looks like </p>\n<p><code>⟨N, proof⟩ * ⟨N, proof⟩ = 1</code></p>\n<p>Now, I can't seem to figure out how to simplify this. I guess I'm confused how one splits this into working with the matrices and proofs separetely (but maybe one doesnt want to do this and there is something better?).</p>",
        "id": 233317723,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1617715514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> So now there is hopefully an <code>ext</code>-lemma for <code>SL2Z</code> that says that for proving equalities it suffices to check equality of the matrices.</p>",
        "id": 233317917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617715592
    },
    {
        "content": "<p>If it doesn't exist <code>apply subtype.coe_injective</code> hopefully works. (I'm just guessing.)</p>",
        "id": 233317976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617715614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> You might want to just work with <code>special_linear_group</code>, instead of making your <code>SL2Z</code> definition on top of it.</p>",
        "id": 233318289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617715733
    },
    {
        "content": "<p>Then the <code>ext</code> tactic will help you further.</p>",
        "id": 233318323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617715746
    },
    {
        "content": "<p>It will apply this lemma: <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/special_linear_group.html#matrix.special_linear_group.ext\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/special_linear_group.html#matrix.special_linear_group.ext</a></p>",
        "id": 233318365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617715771
    },
    {
        "content": "<p>Which says that if all coefficients are equal, then you are done.</p>",
        "id": 233318387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617715782
    },
    {
        "content": "<p>After <code>ext</code>, you do <code>intros i j</code>, and then <code>fin_cases i; fin_cases j</code> should give you 4 goals, one for each coefficient.</p>",
        "id": 233318516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617715823
    },
    {
        "content": "<p>With a bit of luck, each of them can be closed with <code>simp</code>.</p>",
        "id": 233318535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617715834
    }
]