[
    {
        "content": "<p>Hello, I'm pretty new to Lean and struggling with hypothesis declarations in a theorem. </p>\n<p>I'm working with a <code>finset</code> of <code>finset ℕ</code> and I need to extract the minimal element of each (let's say, to sum them).<br>\nI know (by construction) that my sets are not empty, but I don't know how to tell that to <a href=\"https://leanprover-community.github.io/mathlib_docs/data/finset/lattice.html#finset.min'\"><code>finset.min'</code></a>:</p>\n<p>The code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">sets</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span> <span class=\"bp\">→</span> <span class=\"n\">finset.nonempty</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"n\">s.min'</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span><span class=\"o\">))</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>produces</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch at application\n  h1 s (s ∈ sets)\nterm\n  s ∈ sets\nhas type\n  Prop : Type\nbut is expected to have type\n  s ∈ sets : Prop\n</code></pre></div>\n<p>So I don't really know how to express <code>s ∈ sets</code> in this context; if I put it in another hypothesis I'll have the same issue.<br>\nI tried different things without success, this is the closer I got (I think).</p>\n<p>Thanks!</p>",
        "id": 264139041,
        "sender_full_name": "Loïc Simon",
        "timestamp": 1638960942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462567\">@Loïc Simon</span> This is unfortunately not possible with <code>∑ s in sets, f s</code>, because <code>f</code> will be a total function, defined on all of <code>finset ℕ</code>.<br>\nWhat you <em>can</em> do is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span><span class=\"o\">},</span> <span class=\"n\">s.1.min'</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">s</span> <span class=\"n\">s.2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 264139303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638961097
    },
    {
        "content": "<p>That way you are summing a total function over the subtype of stuff <code>∈ sets</code>, and hence you will have that property ready when you need it.</p>",
        "id": 264139377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638961159
    }
]