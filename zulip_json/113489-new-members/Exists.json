[
    {
        "content": "<p>Hi, I'm working through the documentation and exercises and I'm stuck on 4.4 (existential quantifier). I thought I could use exists.elim to go from <code>\\exists (x: \\alpha), p x</code> to <code>x</code> but I get a type error since <code>x</code> is not a Prop. I seem to need this to prove the reverse direction of the exercise <code>example : (∃ x, p x ∧ r) ↔ (∃ x, p x) ∧ r</code>. Any guidance? My full attempt is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n    <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n            <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n                <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpxr</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">hx</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n                    <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n                        <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n                            <span class=\"n\">hx</span>\n                            <span class=\"n\">hpxr</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span>\n                        <span class=\"n\">hpxr</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n            <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n                <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n                    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpx</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n                        <span class=\"n\">hx</span><span class=\"o\">))</span> <span class=\"c1\">-- Problem here!! has type Π (hx : α), p hx → α : Type</span>\n                <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n                    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpx</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n                        <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"n\">hx</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hpx</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 202894094,
        "sender_full_name": "Thomas Brooks",
        "timestamp": 1593901740
    },
    {
        "content": "<p>You should use <code>exists.elim</code> while your goal is still a Prop.</p>",
        "id": 202894143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593901820
    },
    {
        "content": "<p>This is much easier in tactic mode</p>",
        "id": 202894152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593901901
    },
    {
        "content": "<p>I haven't gotten to tactics yet!</p>",
        "id": 202894204,
        "sender_full_name": "Thomas Brooks",
        "timestamp": 1593902004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I'm not sure what you mean. Is <code>exists.elim</code> not appropriate here? Is there an alternative?</p>",
        "id": 202894250,
        "sender_full_name": "Thomas Brooks",
        "timestamp": 1593902068
    },
    {
        "content": "<p>And on this topic, how can I view everything in a namespace? Like to look at all everything that is exists.something to see if something fits my needs.</p>",
        "id": 202894297,
        "sender_full_name": "Thomas Brooks",
        "timestamp": 1593902166
    },
    {
        "content": "<p>Oh wait, I think I understand now. I should use exist.elim outside of the exists.intro....</p>",
        "id": 202894303,
        "sender_full_name": "Thomas Brooks",
        "timestamp": 1593902214
    },
    {
        "content": "<p>That fixed it, thanks for the help. So is there no way to get <code>(\\exists x: \\alpha, p x) -&gt; \\alpha</code>? I would have assumed that could be done</p>",
        "id": 202894511,
        "sender_full_name": "Thomas Brooks",
        "timestamp": 1593902700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"318650\">@Thomas Brooks</span> It's sort of a coherence issue.  You need to choose an term of <code>\\alpha</code> in a consistent way so that substitution/rewriting works.  One thing to think about is that, since every pair of proofs of a <code>Prop</code> are equal, you can't just take a proof <code>⟨x, h⟩</code> of existence and map it to <code>x</code>.  What would you do for <code>⟨x', h'⟩</code>?  You'd need to ensure that whatever you did wouldn't give you the absurd conclusion that <code>x = x'</code>.</p>\n<p>The library has <code>classical.some</code> to \"give\" you such a term (noncomputably).  It uses Lean's version of the axiom of choice.</p>",
        "id": 202895039,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1593903733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> That makes sense, thanks for the explanation!</p>",
        "id": 202895572,
        "sender_full_name": "Thomas Brooks",
        "timestamp": 1593904878
    },
    {
        "content": "<p><code>#print prefix exists</code></p>",
        "id": 202896333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593906315
    },
    {
        "content": "<p><code>#print prefix</code> is so darn useful, it should be mentioned earlier in the book</p>",
        "id": 202896334,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1593906328
    }
]