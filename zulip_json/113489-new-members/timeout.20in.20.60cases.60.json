[
    {
        "content": "<p>I'm trying to expand an existence clause in a hypothesis and Lean is timing out for some reason I can't figure out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">in_range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1981</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">problem_predicate</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">in_range</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">in_range</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">specified_set</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">problem_predicate</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">solution_bound</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">specified_set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">3524578</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">problem_predicate</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"c1\">-- this line times out</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>I thought I wasn't doing anything fancy here - <code>h2</code> is a hypothesis starting with ∃, so I use a <code>cases</code> tactic, but this times out. What's going on here?</p>",
        "id": 213120185,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602574628
    },
    {
        "content": "<p>This is really strange. Changing the bound in the goal from <code>3524578</code> to something small makes the problem go away. I don't see why a complicated goal should change something to casing on an hypothesis... Same thing with <code>rcases</code> or <code>obtain</code>.</p>",
        "id": 213120884,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1602575205
    },
    {
        "content": "<p>I'm going to guess it's the large number in the goal.  This times out, too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">3524578</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"c1\">-- times out</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213120902,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602575229
    },
    {
        "content": "<p>hmm. well at least I was justified in finding it strange</p>",
        "id": 213121011,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602575317
    },
    {
        "content": "<p>(By the way, rather than your <code>have h2</code> line, you can do <code>simp only [specified_set, set.mem_set_of_eq] at h1,</code> to put it into the same form.)</p>",
        "id": 213121135,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602575454
    },
    {
        "content": "<p>yeah, I just stuck that in to make it clear</p>",
        "id": 213121152,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602575470
    },
    {
        "content": "<p>Yes, I have no clue about what is going on.</p>",
        "id": 213121160,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1602575481
    },
    {
        "content": "<p>You don't even need the <code>h2</code> line, you can case on <code>h1</code>.</p>",
        "id": 213121162,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1602575484
    },
    {
        "content": "<p>I was wondering if there was some problem with converting between the set-membership and the other form of the statement</p>",
        "id": 213121164,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602575486
    },
    {
        "content": "<p>yeah, well casing on h1 also times out</p>",
        "id": 213121179,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602575497
    },
    {
        "content": "<p>Yes, I was just saying that casing on <code>h1</code> or <code>h2</code> is the same. If one fails, the other one will fail similarly.</p>",
        "id": 213121244,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1602575529
    },
    {
        "content": "<p>I guess at some place it goes back from the binary expansion of the constant in the goal to the unary expansion, which is too large. But I really don't see why it should do something like that!</p>",
        "id": 213121294,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1602575580
    },
    {
        "content": "<p>Minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">solution_bound</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">3524578</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"c1\">-- times out with the simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Without the <code>simp</code> call, it doesn't time out.</p>",
        "id": 213122540,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1602576143
    },
    {
        "content": "<p>A workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">solution_bound</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">specified_set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">3524578</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">specified_set</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213122915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602576476
    },
    {
        "content": "<p>It's the same issue that was remarked on in the <code>norm_num</code> thread, I think. Inequality on <code>int</code> is defined to be either <code>true</code> or <code>false</code>, so it's easy to get into a situation where <code>whnf</code> on the goal causes divergence</p>",
        "id": 213122967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602576490
    },
    {
        "content": "<p>this one -&gt; <a href=\"#narrow/stream/113489-new-members/topic/deep.20recursion.20was.20detected.20at.20'replace'/near/212360087\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/deep.20recursion.20was.20detected.20at.20'replace'/near/212360087</a></p>",
        "id": 213123069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602576578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Testing what you said, indeed this does not time out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">3524578</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"c1\">-- does not time out</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>(I'm assuming whnf of <code>k - 3524578</code> involves a nontrivial amount of computation, but <code>-(-3524578) - (-k)</code> does not.)</p>",
        "id": 213123304,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602576731
    },
    {
        "content": "<p>aha, it's probably when the numeral is on the right</p>",
        "id": 213123355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602576783
    },
    {
        "content": "<p>And the workaround from before has a coercion to block the whnf.</p>",
        "id": 213123365,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602576788
    },
    {
        "content": "<p>from the prelude:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">int.cases_on</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">nonneg</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 213123442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602576842
    },
    {
        "content": "<p>I wonder if it would be better to make <code>nonneg</code> a structure to prevent this unfolding</p>",
        "id": 213123773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602577075
    },
    {
        "content": "<p>I thought that <code>int.le</code> has been made irreducible in <a href=\"https://github.com/leanprover-community/mathlib/issues/4474\">#4474</a>? Apparently this is not the case...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">int.le</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">solution_bound</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">3257648</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"c1\">-- times out without the irreducible attribute</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213124028,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1602577238
    },
    {
        "content": "<p>It's only <code>int.lt</code> that was marked irreducible...</p>",
        "id": 213124254,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1602577395
    },
    {
        "content": "<p>Aha:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">contradiction</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">try</span> <span class=\"n\">intro1</span><span class=\"o\">,</span>\n   <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n   <span class=\"o\">(</span><span class=\"n\">contra_false</span> <span class=\"n\">ctx</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">contra_not_a_refl_rel_a</span> <span class=\"n\">ctx</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">contra_p_not_p</span> <span class=\"n\">ctx</span> <span class=\"n\">ctx</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">contra_constructor_eq</span> <span class=\"n\">ctx</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">fail</span> <span class=\"s2\">\"contradiction tactic failed\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">exfalso</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">fail_if_no_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">assert</span> <span class=\"bp\">`</span><span class=\"n\">Hfalse</span> <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"bp\">`</span><span class=\"n\">false</span> <span class=\"o\">[]),</span>\n   <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n\n<p><code>exfalso</code> calls <code>contradiction</code>, which fails at the first line, <code>try intro1</code>, because the state at that point is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">Hfalse</span> <span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">3524578</span>\n\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n\n<p>so <code>intro1</code> is going to try to check if the goal is an implication, which will involve a whnf</p>",
        "id": 213124660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602577656
    },
    {
        "content": "<p>I mean for all lean knows at the bottom of the stack of definitions <code>nonneg</code> might unfold to <code>true -&gt; true</code> instead of <code>true</code></p>",
        "id": 213124806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602577736
    },
    {
        "content": "<p>for something like <code>try intro1</code> at the beginning of a more complicated tactic, it seems pretty obvious that lean wasn't supposed to try this hard, though. Probably <code>intro1</code> should have a transparency parameter</p>",
        "id": 213124965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602577830
    },
    {
        "content": "<p>well, I got around it by making one lemma just not use any tactics</p>",
        "id": 213125109,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602577924
    },
    {
        "content": "<p>eventual proof in <a href=\"https://github.com/leanprover-community/mathlib/pull/4599\">https://github.com/leanprover-community/mathlib/pull/4599</a></p>",
        "id": 213125116,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602577929
    },
    {
        "content": "<p>It's not specific to <code>exfalso</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"mi\">1543678</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>fails in the same way.</p>",
        "id": 213125203,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1602578036
    },
    {
        "content": "<p>You could just generalize the number...?</p>",
        "id": 213125234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578042
    },
    {
        "content": "<p>there is no need to have big numbers in your goal, just generalize them after establishing the requisite facts with <code>norm_num</code></p>",
        "id": 213125286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578072
    },
    {
        "content": "<p>hmm, well as it happens I am proving several lemmas about 3524578</p>",
        "id": 213125324,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602578109
    },
    {
        "content": "<p>I don't see how that changes anything</p>",
        "id": 213125346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578130
    },
    {
        "content": "<p>I guess I'm not sure what your suggestion is, exactly</p>",
        "id": 213125357,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602578141
    },
    {
        "content": "<p>rather than proving things about the number 2019 because the test writers think they are being clever, prove the theorem for all numbers satisfying a property</p>",
        "id": 213125443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578186
    },
    {
        "content": "<p>The Metamath library developed for over a decade without needing any numbers bigger than 12</p>",
        "id": 213125504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578243
    },
    {
        "content": "<p>numbers bigger than 12 are useful for a lot of things</p>",
        "id": 213125526,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602578258
    },
    {
        "content": "<p>It's not like the library didn't talk about natural numbers bigger than 12</p>",
        "id": 213125609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578301
    },
    {
        "content": "<p>it talks about the whole infinite family</p>",
        "id": 213125620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578312
    },
    {
        "content": "<p>sometimes you just want to know whether a particular fact is true about 3524578</p>",
        "id": 213125643,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602578330
    },
    {
        "content": "<p>it's almost always a better idea to generalize to the relevant fact about that number</p>",
        "id": 213125673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578369
    },
    {
        "content": "<p>true, this number is special because it's the sum of the squares of the two largest fibonacci numbers smaller than 1981</p>",
        "id": 213125681,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602578381
    },
    {
        "content": "<p>and why is 1981 special?</p>",
        "id": 213125698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578392
    },
    {
        "content": "<p>because it's in the problem statement</p>",
        "id": 213125707,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602578397
    },
    {
        "content": "<p>...because the test writers were being clever</p>",
        "id": 213125754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578405
    },
    {
        "content": "<p>yes</p>",
        "id": 213125759,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602578408
    },
    {
        "content": "<p>so now, generalize 1981 to n and tell me whether the theorem still holds</p>",
        "id": 213125776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578422
    },
    {
        "content": "<p>that's why when you are practicing for the IMO, you make sure to note any interesting properties of the current year</p>",
        "id": 213125786,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602578427
    },
    {
        "content": "<p>yes I know</p>",
        "id": 213125795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578436
    },
    {
        "content": "<p>Looking at the PR, it looks like the problem has the form determine M(n) where n = 1981. How about defining M(n) instead of M(1981) then?</p>",
        "id": 213125926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578528
    },
    {
        "content": "<p>I just don't understand why I would do that</p>",
        "id": 213125955,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602578556
    },
    {
        "content": "<p>I mean, as a workaround to avoid mentioning large numbers, it works, but there are easier workarounds</p>",
        "id": 213125989,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602578592
    },
    {
        "content": "<p>because it will make the file compile much faster, and it will also make the file actually prove something useful instead of just being a cute and useless fact</p>",
        "id": 213125998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578598
    },
    {
        "content": "<p>it's still not useful at all when you replace 1981 with n</p>",
        "id": 213126017,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602578617
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Determine</span> <span class=\"n\">the</span> <span class=\"n\">maximum</span> <span class=\"n\">value</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">where</span> <span class=\"bp\">`</span><span class=\"n\">m</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"bp\">`</span> <span class=\"n\">are</span> <span class=\"n\">integers</span> <span class=\"k\">in</span>\n<span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"mi\">1981</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">`.</span>\n<span class=\"n\">The</span> <span class=\"n\">trick</span> <span class=\"n\">to</span> <span class=\"n\">this</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">that</span> <span class=\"bp\">`</span><span class=\"n\">m</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"bp\">`</span> <span class=\"k\">have</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">consecutive</span> <span class=\"n\">Fibonacci</span> <span class=\"n\">numbers</span><span class=\"o\">,</span>\n<span class=\"n\">because</span> <span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">reduce</span> <span class=\"n\">any</span> <span class=\"n\">solution</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">smaller</span> <span class=\"n\">one</span> <span class=\"n\">using</span> <span class=\"n\">the</span> <span class=\"n\">Fibonacci</span> <span class=\"n\">recurrence.</span>\n</code></pre></div>\n\n<p>this looks like a useful observation. Why not extract it as a lemma?</p>",
        "id": 213126301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578788
    },
    {
        "content": "<p>that basically is the <code>pp_reduction</code> lemma</p>",
        "id": 213126336,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602578828
    },
    {
        "content": "<p>I'm not understanding why to generalize this IMO problem -- I know why as a mathematician, but it seems like this IMO folder is for formalizations of solutions to IMO problems.  You wouldn't expect a test-taker to give a full solution to the generalized problem.</p>",
        "id": 213126361,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602578852
    },
    {
        "content": "<p>I know that this number abstraction method is very useful in physics problems. You are given a problem statement with a bunch of numbers, and rather than doing intermediate calculations the first thing you do is replace all the numbers in the input with variables, solve the whole problem, then plug and chug at the end</p>",
        "id": 213126459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578920
    },
    {
        "content": "<p>the thing is that if you generalize this problem, you have to define a bunch of awkward functions like \"the largest fibonacci number less than x\". and then prove things about them. but if you just stick with 1981 then you can skip a bunch of that</p>",
        "id": 213126555,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602578989
    },
    {
        "content": "<p>It's not even about getting a more general result, although that often happens as a side effect. It's about localizing the calculator stuff to one small part and doing algebra with letters</p>",
        "id": 213126568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602578993
    },
    {
        "content": "<p>No, you just need a number <code>m</code> (the answer) that relates to <code>n</code> (the year) in some way</p>",
        "id": 213126658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602579033
    },
    {
        "content": "<p>that way <em>is</em> the largest pair of fibonacci numbers less than the current year</p>",
        "id": 213126689,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602579057
    },
    {
        "content": "<p>it's not a function, it's a relation, the collection of all numerical properties between the numbers that you need a calculator for</p>",
        "id": 213126699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602579063
    },
    {
        "content": "<p>If you can write it as <code>m = f(n)</code> then that's even better but it's not a necessity</p>",
        "id": 213126753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602579107
    },
    {
        "content": "<p>In fact, it looks like you are using a property of monotone functions that <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> pointed out in the question about <code>n ^ 3 != 2</code>, where the <code>fib</code> function sandwiches <code>1981</code> at <code>fib 17</code> and <code>fib 18</code></p>",
        "id": 213127093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602579297
    },
    {
        "content": "<p>That would be <code>ne_of_monotone_of_lt_of_lt</code> from <a href=\"https://github.com/leanprover-community/mathlib/issues/4482\">#4482</a></p>",
        "id": 213128686,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1602580286
    },
    {
        "content": "<p><code>int.le</code> is made irreducible in <a href=\"https://github.com/leanprover-community/mathlib/issues/4601\">#4601</a></p>",
        "id": 213132083,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1602582452
    },
    {
        "content": "<p>I pushed a commit to the IMO 1981-Q3 PR that implements the <code>N = 1981</code> generalization, without rewriting too much of the rest of the formalization.</p>",
        "id": 213132641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602582816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/timeout.20in.20.60cases.60/near/213126361\">said</a>:</p>\n<blockquote>\n<p>I'm not understanding why to generalize this IMO problem -- I know why as a mathematician, but it seems like this IMO folder is for formalizations of solutions to IMO problems.  You wouldn't expect a test-taker to give a full solution to the generalized problem.</p>\n</blockquote>\n<p>I think the idea is that, for whatever reason, formalizing a more general result can end up being easier than formalizing a more specific result, even if no-one is going to have any use for the general result beyond proving the specific one (because the general one is still only relevant to this one problem, so isn't going in the main part of mathlib). That is, \"prove the most general result that your argument gives, and then apply it to the specific case\" is a formalization trick just like \"use this tactic\" or \"write lots of small lemmas rather than one big proof\"; a way in which the things that work best in formalization differ from what's convenient in informal mathematics. (Note that \"the most general result that your argument gives\" may well be less general than the most general version of the problem that's actually true.)</p>",
        "id": 213234011,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1602635160
    },
    {
        "content": "<p>The discussion reminds me of <a href=\"https://mathoverflow.net/questions/40005/generalizing-a-problem-to-make-it-easier\">this classic MathOverflow post</a>.</p>",
        "id": 213234285,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602635382
    },
    {
        "content": "<p>Yes, it's a useful trick in informal mathematics, it just seems more often useful in formalization.</p>",
        "id": 213234379,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1602635458
    }
]