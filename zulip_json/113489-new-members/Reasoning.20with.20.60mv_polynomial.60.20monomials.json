[
    {
        "content": "<p>Hi, are there any lemmas that can finish this problem easily?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.rename</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.comm_ring</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">perm</span><span class=\"o\">)</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mv_polynomial</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The `n`th elementary symmetric `mv_polynomial σ R`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">esymm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∑</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">powerset_len</span> <span class=\"n\">n</span> <span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">esymm_eq_sum_monomial</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">esymm</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">powerset_len</span> <span class=\"n\">n</span> <span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"n\">monomial</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">finsupp.single</span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"c1\">-- is there anything that tells Lean the goal here is obvious?</span>\n  <span class=\"n\">rw</span> <span class=\"n\">monic_monomial_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finsupp.prod</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mv_polynomial</span>\n</code></pre></div>\n<p>I found similar lemmas in mathlib, but none that really give me what I'm looking for.</p>",
        "id": 223417335,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1611168638
    },
    {
        "content": "<p>Sorry for leading you into that trap!</p>",
        "id": 223421731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611170460
    },
    {
        "content": "<p>I can make some progress with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">esymm_eq_sum_monomial</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">esymm</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">powerset_len</span> <span class=\"n\">n</span> <span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"n\">monomial</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">finsupp.single</span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"c1\">-- is there anything that tells Lean the goal here is obvious?</span>\n  <span class=\"n\">rw</span> <span class=\"n\">monic_monomial_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finsupp.prod_pow</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">prod_subset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_univ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">_</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">prod_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x'</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">pow_one</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">pow_zero</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223422971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611171044
    },
    {
        "content": "<p>This type of problem embodies everything I hate about finset / finsupp - there are just too many ways to express sums over things, and a huge pile of the NxM lemmas for N different ways to sum over M types are missing</p>",
        "id": 223424518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611171766
    },
    {
        "content": "<p>Here's a full but ugly proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">esymm_eq_sum_monomial</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">esymm</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">powerset_len</span> <span class=\"n\">n</span> <span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"n\">monomial</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">finsupp.single</span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"c1\">-- is there anything that tells Lean the goal here is obvious?</span>\n  <span class=\"n\">rw</span> <span class=\"n\">monic_monomial_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finsupp.prod_pow</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">prod_subset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_univ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">_</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">prod_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x'</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">pow_one</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">finsupp.apply_add_hom</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">classical</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finsupp.single_apply</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_eq'</span><span class=\"o\">,</span> <span class=\"n\">apply_ite</span><span class=\"o\">,</span> <span class=\"n\">apply_ite</span> <span class=\"n\">finset.card</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">if_pos</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">pow_zero</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">finsupp.apply_add_hom</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">classical</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finsupp.single_apply</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_eq'</span><span class=\"o\">,</span> <span class=\"n\">apply_ite</span><span class=\"o\">,</span> <span class=\"n\">apply_ite</span> <span class=\"n\">finset.card</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">if_neg</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223424794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611171882
    },
    {
        "content": "<p>Don't worry about it, thanks for the proof! This seems generally useful, so I'll be reworking it into a more general lemma for converting between <code>finsupp</code> and <code>finset</code>, if you don't mind.</p>\n<p>And I do agree that sums are not very fun in Lean. The more I work the more I just want to drop everything and start proving \"trivial\" conversions like <code>powerset_len univ n</code> to <code>{s : s.card = n}</code>, etc, etc.</p>",
        "id": 223433042,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1611175731
    }
]