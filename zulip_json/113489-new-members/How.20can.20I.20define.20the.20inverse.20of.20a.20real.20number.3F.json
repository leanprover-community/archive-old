[
    {
        "content": "<p>I am implementing a home-brew version of the real numbers as the equivalence classes of Cauchy sequence of rational numbers.  I need to define real number (non-zero) inversion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>:</mo><mi mathvariant=\"double-struck\">R</mi><mo>↦</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x:\\mathbb{R} \\mapsto 1/x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6999em;vertical-align:-0.011em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">x</span></span></span></span>.  I am having trouble figuring out how to implement this.  What follows is a Minimal (non) Working example.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">--import data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.rat.order</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">seqQ</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">seqQ</span>\n\n<span class=\"c1\">--inversion</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">seqQ</span> <span class=\"bp\">→</span> <span class=\"n\">seqQ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u0</span> <span class=\"o\">:</span> <span class=\"n\">seqQ</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">u0</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"n\">seqQ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">seqQ.inv</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_def</span> <span class=\"o\">(</span><span class=\"n\">u0</span> <span class=\"o\">:</span> <span class=\"n\">seqQ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u0</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u0</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_def_at</span> <span class=\"o\">(</span><span class=\"n\">u0</span> <span class=\"o\">:</span><span class=\"n\">seqQ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u0</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">u0</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>  <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">seqQ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isCauchy</span> <span class=\"o\">:</span> <span class=\"n\">seqQ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">isCauchy_def</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">seqQ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">isCauchy</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">cauchyQ</span>\n<span class=\"kn\">open</span> <span class=\"n\">seqQ</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">cauchyQ</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">seqQ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">isCauchy</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">q0</span> <span class=\"o\">:</span> <span class=\"n\">cauchyQ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">cauchyQ</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n\n  <span class=\"c1\">--I can only define this for a cauchy sequence that doesn't converge to zero,</span>\n<span class=\"c1\">-- i.e. if have the following hypothesis.</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">q0.z</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">≥</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">--But, of course, some cauchy sequences of rationals do converge to zero</span>\n <span class=\"c1\">-- so I think the correct thing to do is follow convention that 0^{-1} = 0.</span>\n\n  <span class=\"c1\">--What do I need here?  I suspect I need something about</span>\n  <span class=\"c1\">--the non-computabilty or non-decidability of  equivalence relation r,</span>\n\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"n\">cauchyQ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">cauchyQ.inv</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">cauchyQ</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">R</span>\n<span class=\"kn\">open</span> <span class=\"n\">cauchyQ</span>\n<span class=\"kn\">open</span> <span class=\"n\">seqQ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">cauchyQ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">u.z</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">v.z</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">r_def</span> <span class=\"o\">(</span><span class=\"n\">u0</span> <span class=\"n\">u1</span> <span class=\"o\">:</span> <span class=\"n\">cauchyQ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"n\">u0</span> <span class=\"n\">u1</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">u0.z</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">u1.z</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">r_refl</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">r_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">r_trans</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"n\">mysetoidR</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">cauchyQ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">r_refl</span><span class=\"o\">,</span><span class=\"n\">r_symm</span><span class=\"o\">,</span><span class=\"n\">r_trans</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">equiv_def</span> <span class=\"o\">(</span><span class=\"n\">u0</span> <span class=\"n\">u1</span> <span class=\"o\">:</span> <span class=\"n\">cauchyQ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u0</span> <span class=\"bp\">≈</span> <span class=\"n\">u1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"n\">u0</span> <span class=\"n\">u1</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">R.mysetoidR</span>\n\n\n\n<span class=\"kd\">def</span> <span class=\"n\">inv_aux</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">cauchyQ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟦</span><span class=\"n\">z</span><span class=\"bp\">⁻¹⟧</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.lift</span> <span class=\"n\">inv_aux</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--I am pretty sure I know what to do here.</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Any help and direction is appreciated.</p>",
        "id": 298666161,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1663102615
    },
    {
        "content": "<p>I should mention that I tried to use a <code>dite</code>  on the eqiovalamce/non-equivalence to zero of a Cauchy sequence and I got an an error about missing <code>decidable_le</code> or <code>decidable_nonneg</code>.</p>\n<p>I stripped out this attempt in my MWE.</p>",
        "id": 298669347,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1663104104
    },
    {
        "content": "<p>You can just case split on your needed hypothesis and its negation with <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases\">tactic#by_cases</a> (this uses excluded middle under the hood when necessary, which is where the noncomputability will creep in).</p>",
        "id": 298669500,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663104177
    },
    {
        "content": "<p>You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#classical\">tactic#classical</a> to make everything decidable within a proof, or else <code>open classical</code> at some point earlier in the file.</p>",
        "id": 298669584,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663104218
    },
    {
        "content": "<p>Ok I will attempt to use by_cases.  I will write again if I have more questions.  Thank you.</p>",
        "id": 298669834,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1663104333
    },
    {
        "content": "<p>Thanks, I think I got it to work.</p>",
        "id": 298670669,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1663104714
    },
    {
        "content": "<p>If you want to see how it's done in mathlib:</p>\n<ul>\n<li>a <code>lim_zero</code> predicate was introduced for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cau_seq.inv\">docs#cau_seq.inv</a>.</li>\n<li><code>open_locale classical</code> is called before the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cau_seq.completion.Cauchy.has_inv/src\">src#cau_seq.completion.Cauchy.has_inv</a>.</li>\n</ul>",
        "id": 298673692,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663106116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>   Thanks.  I have been looking at the mathlib docs but I couldn't make sense of much without exploring a bunch of other things.  I appreciate the insight and the suggestion.  I will take another look.  Thanks.</p>",
        "id": 298687810,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1663116825
    }
]