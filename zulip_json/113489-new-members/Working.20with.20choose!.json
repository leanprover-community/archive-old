[
    {
        "content": "<p>Hi there, I'm struggling to get my proof to work, I'm working on this topology question:</p>\n<p><a href=\"/user_uploads/3121/h-bGDrhEMNSzCGTfdrnRCbsw/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/h-bGDrhEMNSzCGTfdrnRCbsw/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/h-bGDrhEMNSzCGTfdrnRCbsw/image.png\"></a></div><p>The outline of the proof is that you can write A as a union of x in A, U_x (where U_x) is open wrt X, then we know that as a union of open sets A itself must be open as well.</p>\n<p>I'm still having some difficulties in the first half, which would just be showing that A is the union. To start my proof I'm trying to use <code>choose</code> or <code>choose!</code> but either one seems to lead to an error later on in the proof, here's what I have as of yet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">munkres_13_1</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">A</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">choose</span> <span class=\"n\">f</span> <span class=\"n\">h_f</span> <span class=\"n\">using</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a_equals</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">set.Union</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h_A</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set.mem_Union</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h_f</span> <span class=\"n\">x</span> <span class=\"n\">h_A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h_u</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set.mem_Union</span> <span class=\"n\">at</span> <span class=\"n\">h_u</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h_u</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">h_a</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h_f_a_sbs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h_f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"n\">set.mem_of_subset_of_mem</span> <span class=\"n\">h_f_a_sbs</span> <span class=\"n\">h_a</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In this state, we have the problem that <code>set.Union f</code> won't work because <code>f</code> has the type <code>f: Π (x : X), x ∈ A → set X</code> instead of <code>f: A -&gt; X</code>.</p>\n<p>Thanks for taking a look.</p>",
        "id": 299866894,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663719606
    },
    {
        "content": "<p>I think what you need here is <code>Union₂</code>... instead of <code>A = set.Union f</code>, try <code>A = ⋃ x h, f x h</code></p>",
        "id": 299870088,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663722149
    },
    {
        "content": "<p>and you can use <code>set.mem_Union₂</code> instead of <code>set.mem_Union</code></p>",
        "id": 299870703,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663722696
    },
    {
        "content": "<p>though there doesn't seem to be an <code>is_open_Union₂</code> lemma, so the end of the proof might be a little inelegant... perhaps there's a better solution</p>",
        "id": 299872400,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663724203
    },
    {
        "content": "<p>you should just be able to use union lemmas twice</p>",
        "id": 299872498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663724292
    },
    {
        "content": "<p>but also, in case you weren't aware <span class=\"user-mention\" data-user-id=\"367659\">@Callum Cassidy-Nolan</span> you can prove this one without choice by just taking the union of all open subsets of A</p>",
        "id": 299872543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663724333
    },
    {
        "content": "<p>alternatively, since you have <code>topology.basic</code> imported you can just use this theorem itself, which is of course proved (as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open_iff_forall_mem_open\">docs#is_open_iff_forall_mem_open</a>)</p>",
        "id": 299872780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663724504
    },
    {
        "content": "<p>Ah, I see what you are saying! Thanks for the tips. I managed to get this part of the proof: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">munkres_13_1</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">A</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">choose</span> <span class=\"n\">f</span> <span class=\"n\">h_f</span> <span class=\"n\">using</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a_equals</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h_A</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set.mem_Union₂</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">h_A</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h_f</span> <span class=\"n\">x</span> <span class=\"n\">h_A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h_u</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set.mem_Union₂</span> <span class=\"n\">at</span> <span class=\"n\">h_u</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h_u</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">h_a</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h_a</span> <span class=\"k\">with</span> <span class=\"n\">h_a</span> <span class=\"n\">h_x_mem</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h_f_a_sbs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h_f</span> <span class=\"n\">a</span> <span class=\"n\">h_a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">set.mem_of_subset_of_mem</span> <span class=\"n\">h_f_a_sbs</span> <span class=\"n\">h_x_mem</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 299875613,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663727245
    },
    {
        "content": "<p>a couple syntax tips, in case you don't know:</p>\n<p>1) instead of two <code>use</code> statements, you can write <code>use [x, h_A]</code> on one line<br>\n2) instead of two <code>cases</code> statements, you can write <code>rcases h_u with ⟨a, h_a, h_x_mem⟩</code> to deconstruct everything at once</p>",
        "id": 299876118,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663727829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20choose!/near/299876118\">said</a>:</p>\n<blockquote>\n<p>a couple syntax tips, in case you don't know:</p>\n<p>1) instead of two <code>use</code> statements, you can write <code>use [x, h_A]</code> on one line<br>\n2) instead of two <code>cases</code> statements, you can write <code>rcases h_u with ⟨a, h_a, h_x_mem⟩</code> to deconstruct everything at once</p>\n</blockquote>\n<p>Thanks, that helps  me ! I also just think I realized that proving what I just did doesn't quite match the topology definition for union since it requires a set of subsets of the topological space: <a href=\"/user_uploads/3121/eScNmwRvB0C3xA-xtZD1PVw4/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/eScNmwRvB0C3xA-xtZD1PVw4/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/eScNmwRvB0C3xA-xtZD1PVw4/image.png\"></a></div>",
        "id": 299877293,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663729127
    },
    {
        "content": "<p>hmm</p>",
        "id": 299877892,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663729721
    },
    {
        "content": "<p>I mean I think you defined it correctly according to the problem text you posted originally</p>",
        "id": 299878022,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663729860
    },
    {
        "content": "<p>the set of subsets is the range of your choice function <code>f</code>, and you took the union of that</p>",
        "id": 299878137,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663729980
    },
    {
        "content": "<p>So in order to satisfy the definition of topology in mathlib I need to create something like this right: <code>  let s : set (set X) = {f x (h : x ∈ A) | x ∈ A},</code>?</p>",
        "id": 299878275,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663730134
    },
    {
        "content": "<p>I'm probably not the best person to answer this (I'm better with basic questions <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>) but I'm curious what you mean by \"satisfy the definition of topology in mathlib\"... your proof correctly proved that <code>A</code> is an open set in the topology on <code>X</code></p>",
        "id": 299878496,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663730352
    },
    {
        "content": "<p>So far in my proof I've shown that<code> A = ⋃ x h, f x h</code>, but in order to show that A is open, I need to use the fact that arbitrary unions of open sets are open, which comes from this part of the definition of topology: <a href=\"/user_uploads/3121/cCXCvj8h3yQoDjNMNLG2b32O/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cCXCvj8h3yQoDjNMNLG2b32O/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/cCXCvj8h3yQoDjNMNLG2b32O/image.png\"></a></div>",
        "id": 299878719,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663730577
    },
    {
        "content": "<p>So to use that fact I would have to write something like <code>exact is_open_sUnion s ...</code> which would finish the proof of showing <code>A</code> is open.</p>",
        "id": 299878798,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663730651
    },
    {
        "content": "<p>oh yeah, you can still do that with the way you've written it out, there's no need to go back and fix things</p>",
        "id": 299878954,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663730878
    },
    {
        "content": "<p>one way to go about it, once you rewrite the goal using your equality, is to do <code>apply is_open_Union</code> and <code>intro</code> a couple of times</p>",
        "id": 299879038,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663730944
    },
    {
        "content": "<p>Since <code>is_open_Union</code> requires a function like this: <a href=\"/user_uploads/3121/QkfU09Q1IZDSDpRSI5ol1qpJ/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QkfU09Q1IZDSDpRSI5ol1qpJ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/QkfU09Q1IZDSDpRSI5ol1qpJ/image.png\"></a></div><p>But the function I have is <code>f: Π (x : X), x ∈ A → set X</code> I would have to define a new function which matches this type right?</p>\n<p>How do you go about defining a function mid way through a proof like this?</p>",
        "id": 299879272,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663731156
    },
    {
        "content": "<p>it's not too difficult to define a function, but I don't think you necessarily need to do that... take a look at this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">munkres_13_1</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">A</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">choose</span> <span class=\"n\">f</span> <span class=\"n\">h_f</span> <span class=\"n\">using</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a_equals</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h_A</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set.mem_Union₂</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h_A</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h_f</span> <span class=\"n\">x</span> <span class=\"n\">h_A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h_u</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set.mem_Union₂</span> <span class=\"n\">at</span> <span class=\"n\">h_u</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">h_u</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h_a</span><span class=\"o\">,</span> <span class=\"n\">h_x_mem</span><span class=\"o\">⟩,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h_f_a_sbs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h_f</span> <span class=\"n\">a</span> <span class=\"n\">h_a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">set.mem_of_subset_of_mem</span> <span class=\"n\">h_f_a_sbs</span> <span class=\"n\">h_x_mem</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">a_equals</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_open_Union</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 299879374,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663731271
    },
    {
        "content": "<p>I didn't complete the proof, but you can see the strategy at the end</p>",
        "id": 299879384,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663731299
    },
    {
        "content": "<p>by using <code>apply</code>, Lean will switch the goal to the function you need to prove, at which point you can <code>intro</code> the argument and apply the lemma again</p>",
        "id": 299879476,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663731415
    },
    {
        "content": "<p>the idea is to work in reverse</p>",
        "id": 299879504,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663731457
    },
    {
        "content": "<p>Ah I see what you're doing</p>",
        "id": 299879506,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663731469
    },
    {
        "content": "<p>This finishes it off: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">munkres_13_1</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">A</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">choose</span> <span class=\"n\">f</span> <span class=\"n\">h_f</span> <span class=\"n\">using</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a_equals</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h_A</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set.mem_Union₂</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h_A</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h_f</span> <span class=\"n\">x</span> <span class=\"n\">h_A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h_u</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set.mem_Union₂</span> <span class=\"n\">at</span> <span class=\"n\">h_u</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">h_u</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h_a</span><span class=\"o\">,</span> <span class=\"n\">h_x_mem</span><span class=\"o\">⟩,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h_f_a_sbs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h_f</span> <span class=\"n\">a</span> <span class=\"n\">h_a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">set.mem_of_subset_of_mem</span> <span class=\"n\">h_f_a_sbs</span> <span class=\"n\">h_x_mem</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">a_equals</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_open_Union</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_open_Union</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_x</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h_f</span> <span class=\"n\">x</span> <span class=\"n\">h_x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 299879592,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663731577
    },
    {
        "content": "<p>Thanks a lot Matt!</p>",
        "id": 299879678,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663731630
    },
    {
        "content": "<p>I'm still a little curious about defining helper variables and stuff mid way through proof though, do you usually use <code>let</code> or <code>have</code>?</p>",
        "id": 299879705,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1663731661
    },
    {
        "content": "<p>it depends on what you're defining... <code>have</code> only retains the type of the variable, so if you're defining something where the actual definition matters, like a specific function or set, use <code>let</code>, but if you're just defining and proving a proposition, use <code>have</code></p>",
        "id": 299879784,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663731741
    },
    {
        "content": "<p><code>let</code> for things in the Type universe, <code>have</code> for things in the Prop universe</p>",
        "id": 299879786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663731746
    },
    {
        "content": "<p>yep, what Kevin said</p>",
        "id": 299879800,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663731770
    }
]