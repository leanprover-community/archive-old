[
    {
        "content": "<p>Is the <code>if ... then .... else</code> pattern in Lean a primitive pattern, or is it translated to something else somehow before the kernel deals with it? And what type of object is it? afaik, it's not part of simple lambda calculus. TPIL and the reference manual don't seem to answer my question. <br>\nE.g. I'm curious how the compiler deals with <code>if h : 0 &lt; y ∧ y ≤ x then  f (x - y) (div_rec_lemma h) y + 1 else  zero</code> in the following code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">div_rec_lemma</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sub_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n\n<span class=\"n\">def</span> <span class=\"n\">div</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">div_rec_lemma</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">zero</span>\n\n<span class=\"n\">def</span> <span class=\"n\">div</span> <span class=\"o\">:=</span> <span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">fix</span> <span class=\"n\">lt_wf</span> <span class=\"n\">div</span><span class=\"bp\">.</span><span class=\"n\">F</span>\n</code></pre></div>",
        "id": 205315958,
        "sender_full_name": "Chris M",
        "timestamp": 1595994849
    },
    {
        "content": "<p><code>if ... then ... else</code> is notation for either <code>ite</code> or <code>dite</code>, which are both functions defined on <code>p : Prop</code> with a <code>decidable p</code> type class. See <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions\">10.5 of TPiL</a>.</p>",
        "id": 205316206,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595995240
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 205316226,
        "sender_full_name": "Chris M",
        "timestamp": 1595995309
    }
]