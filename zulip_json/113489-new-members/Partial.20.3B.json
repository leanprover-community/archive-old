[
    {
        "content": "<p>I have a proof that splits into two paths, which differ only in their very last statement. This last statement is a <code>rw</code> that needs to go in different directions, depending on the subgoal. </p>\n<p>Is there a way to solve both subgoals using a single <code>rw</code> that magically knows which direction to go?<br>\nOr is there a way to apply the same sequence of tactics to two subgoals and then dive in, once they require different statements?</p>",
        "id": 228569971,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614767604
    },
    {
        "content": "<p><code>all_goals { tac1, tac2 }</code> is probably what you want</p>",
        "id": 228570093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614767645
    },
    {
        "content": "<p>Another option is to see if you can postpone the <code>split</code> to a later point in your proof</p>",
        "id": 228570205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614767692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <code>all_goals</code> worked like a charm. Thanks :)</p>",
        "id": 228570327,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614767757
    },
    {
        "content": "<p>you can also use <code>id</code> after <code>;</code> to avoid trying to close the goal as <code>{ tacs }</code> would do. That is, <code>split; id { tac1, tac2 }; [rw th1, rw th2]</code> will first split, then apply <code>tac1</code> then <code>tac2</code> on each goal, and then apply <code>rw th1</code> to the first goal and <code>rw th2</code> on the second</p>",
        "id": 228570968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614768040
    },
    {
        "content": "<p>this differs slightly from <code>all_goals</code> because that applies to all goals while <code>tac; id { tacs }</code> applies <code>tacs</code> only to the goals produced by <code>tac</code></p>",
        "id": 228571176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614768147
    },
    {
        "content": "<p><code>tac; all_goals {tacs}</code> would work too, but is misleading, right?</p>",
        "id": 228571547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614768337
    },
    {
        "content": "<p>There are actually lots of things that can be used instead of <code>id</code>; I used to use <code>try</code> a lot for this</p>",
        "id": 228576694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614771243
    },
    {
        "content": "<p>I like <code>id</code> because it is explicitly intended to do nothing other than negate the <code>, done</code> behavior that <code>{ tacs }</code> has</p>",
        "id": 228576779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614771282
    },
    {
        "content": "<p>Is that literally just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/id\">docs#id</a>, or is it some <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.id\">docs#tactic.interactive.id</a>?</p>",
        "id": 228577356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614771623
    },
    {
        "content": "<p>It's the latter</p>",
        "id": 228577721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614771816
    },
    {
        "content": "<p>It's really just a carrier for the itactic parser aka <code>tac_name { ... }</code></p>",
        "id": 228577791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614771846
    },
    {
        "content": "<p>as you can see from the source it is really the identity function</p>",
        "id": 228577848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614771888
    },
    {
        "content": "<p>but it has to be in the tactic.interactive namespace to cooperate with other interactive tactics</p>",
        "id": 228577925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614771928
    }
]