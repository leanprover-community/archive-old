[
    {
        "content": "<p>Any idea of how to prove: <code>def list_at: Π {a: Type}, Π l: list a, Π i: ℕ, i &lt; l.length → a</code>?</p>\n<p>Here's one of my WIP version, I don't know prove some property of natural number arithmetic... Basically how to split a case of <code>i &lt; tl.length + 1</code> into two cases of <code>i &lt; tl.length</code> and <code>i = tl.length</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list_at</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"bp\">Π</span> <span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">htl</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">nh</span> <span class=\"o\">:=</span> <span class=\"n\">nat.not_lt_zero</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">list.length_cons</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">tl.length</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">htl</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219160600,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607390175
    },
    {
        "content": "<p>This is in core as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le\">docs#list.nth_le</a></p>",
        "id": 219160645,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607390243
    },
    {
        "content": "<p>If you look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le/src\">src#list.nth_le</a> you can see its defined using the equation compiler, which is normally easier for these inductive definitions. In fact its really not recommended to use tactic mode to make <code>def</code>s as tactics can introduce a lot of unwanted clutter in your definitions.</p>",
        "id": 219160739,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607390346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Why is it not recommended to use tactic mode to make <code>def</code>? Is it purely because the resulting definition is more complicated? Or is there more reasons to it?</p>",
        "id": 219215452,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607439296
    },
    {
        "content": "<p>Because you're likely in for a bad time if you try and unfold the definition in a proof</p>",
        "id": 219216278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607439664
    },
    {
        "content": "<p>Assuming you intend to prove something about the <code>def</code> later, the form of the proof will depend on exactly what term makes up the definition anyways, and so life is easier if you just write down that term explicitly in the first place</p>",
        "id": 219216317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607439678
    },
    {
        "content": "<p>or in this case, using the equation compiler</p>",
        "id": 219216488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607439736
    }
]