[
    {
        "content": "<p>Hi! I'm trying to define syntax trees and prove some properties about them. I tried to illustrate my problem with a smaller example but it is still some lines, sorry about that. My problem is in the last definition.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ops</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">arity</span><span class=\"o\">:</span> <span class=\"n\">symbol</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">ops</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span><span class=\"o\">:</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">sym</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">o.symbol</span><span class=\"o\">)(</span><span class=\"n\">sub</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">o.arity</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span><span class=\"o\">):</span> <span class=\"n\">tree</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">exops</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_red</span><span class=\"o\">:</span> <span class=\"n\">exops</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_blu</span><span class=\"o\">:</span> <span class=\"n\">exops</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg_blu</span><span class=\"o\">:</span> <span class=\"n\">exops</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">exops</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">arity</span> <span class=\"o\">:</span> <span class=\"n\">exops</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_red</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_blu</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg_blu</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exopstree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">ops.mk</span> <span class=\"n\">exops</span> <span class=\"n\">arity</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">red_head</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">exopstree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.var</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.sym</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_red</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_blu</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg_blu</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">blu_head</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">exopstree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.var</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.sym</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_blu</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg_blu</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_red</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_wellformed</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">exopstree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">sub</span> <span class=\"n\">is_wf_H</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">true</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">arity</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">is_wf_H</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mul_blu</span> <span class=\"o\">:=</span> <span class=\"n\">red_head</span><span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">red_head</span><span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mul_red</span> <span class=\"o\">:=</span> <span class=\"n\">blu_head</span><span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">blu_head</span><span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">neg_blu</span> <span class=\"o\">:=</span> <span class=\"n\">red_head</span><span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"kd\">end</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>As you can see, I am trying to define what it means for a tree/expression to be well formed. I want to require, in addition that its arguments are well formed, certain things of certain arguments of the expression. For sake of illustration, I want to require that the blue symbols ought to take red arguments and vice versa. Where I run into trouble is inside the very last match expression.</p>\n<p>Lean does not seem to realize that inside the first clause, <code>s</code> actually is <code>mul_blu</code>, so it doesn't seem to compute <code>arity s</code> to 2 and it doesn't realize that <code>0</code> is a valid argument to <code>sub</code>, which (essentially) has type <code>fin (arity s) → exopstree</code>. </p>\n<p>Does anyone know how to solve this? Many thanks!</p>",
        "id": 221135829,
        "sender_full_name": "Oskar Berndal",
        "timestamp": 1609250208
    },
    {
        "content": "<p>Lean is complaining because <code>fin 0</code> is empty, and doesn't have <code>0</code>. In this specific case, you're trying to pattern match for <code>0 : fin (arity s)</code>, and Lean does not know that <code>arity s</code> is not <code>0</code>.</p>",
        "id": 221137016,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1609251407
    },
    {
        "content": "<p>Yes. But I am inside the clause where <code>s</code> has matched as <code>mul_blu</code>, therefore <code>arity s</code> ought to compute to <code>2</code>, in my humble opinion. Can I get Lean to recognize that <code>arity s</code> is <code>arity mul_blue</code>? Only inside the clause, of course.</p>\n<p>A suggestion for another approach is also welcome.</p>",
        "id": 221137286,
        "sender_full_name": "Oskar Berndal",
        "timestamp": 1609251704
    },
    {
        "content": "<p>I think this is what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ops</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">arity</span><span class=\"o\">:</span> <span class=\"n\">symbol</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">ops</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span><span class=\"o\">:</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">sym</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">o.symbol</span><span class=\"o\">)(</span><span class=\"n\">sub</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">o.arity</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span><span class=\"o\">):</span> <span class=\"n\">tree</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">exops</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_red</span><span class=\"o\">:</span> <span class=\"n\">exops</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_blu</span><span class=\"o\">:</span> <span class=\"n\">exops</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg_blu</span><span class=\"o\">:</span> <span class=\"n\">exops</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">exops</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">arity</span> <span class=\"o\">:</span> <span class=\"n\">exops</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_red</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_blu</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg_blu</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exopstree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">ops.mk</span> <span class=\"n\">exops</span> <span class=\"n\">arity</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">red_head</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">exopstree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.var</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.sym</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_red</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_blu</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg_blu</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">blu_head</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">exopstree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.var</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.sym</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_blu</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg_blu</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_red</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_wellformed</span> <span class=\"o\">:</span> <span class=\"n\">exopstree</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.var</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.sym</span> <span class=\"n\">mul_blu</span> <span class=\"n\">sub</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">red_head</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">red_head</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.sym</span> <span class=\"n\">mul_red</span> <span class=\"n\">sub</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">blu_head</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">blu_head</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.sym</span> <span class=\"n\">neg_blu</span> <span class=\"n\">sub</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">red_head</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Changes - I marked <code>arity</code> as <code>reducible</code> and I used pattern matching and not <code>induction</code> for the definition of <code>is_wellformed</code></p>",
        "id": 221138442,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1609252734
    },
    {
        "content": "<p>Would these non-equation compiler Prop defns also work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">red_head</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">exopstree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">tree.var</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">tree.sym</span> <span class=\"n\">exops.mul_red</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">blu_head</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">exopstree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">tree.var</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">tree.sym</span> <span class=\"n\">exops.mul_blu</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">tree.sym</span> <span class=\"n\">exops.neg_blu</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 221138596,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609252908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/113489-new-members/topic/Detecting.20case.20inside.20pattern.20match/near/221138442\">said</a>:</p>\n<blockquote>\n<p>I think this is what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ops</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">arity</span><span class=\"o\">:</span> <span class=\"n\">symbol</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">ops</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span><span class=\"o\">:</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">sym</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">o.symbol</span><span class=\"o\">)(</span><span class=\"n\">sub</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">o.arity</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span><span class=\"o\">):</span> <span class=\"n\">tree</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">exops</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_red</span><span class=\"o\">:</span> <span class=\"n\">exops</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_blu</span><span class=\"o\">:</span> <span class=\"n\">exops</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg_blu</span><span class=\"o\">:</span> <span class=\"n\">exops</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">exops</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">arity</span> <span class=\"o\">:</span> <span class=\"n\">exops</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_red</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul_blu</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg_blu</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exopstree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">ops.mk</span> <span class=\"n\">exops</span> <span class=\"n\">arity</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">red_head</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">exopstree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.var</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.sym</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_red</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_blu</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg_blu</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">blu_head</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">exopstree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.var</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.sym</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_blu</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg_blu</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_red</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_wellformed</span> <span class=\"o\">:</span> <span class=\"n\">exopstree</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.var</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.sym</span> <span class=\"n\">mul_blu</span> <span class=\"n\">sub</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">red_head</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">red_head</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.sym</span> <span class=\"n\">mul_red</span> <span class=\"n\">sub</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">blu_head</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">blu_head</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.sym</span> <span class=\"n\">neg_blu</span> <span class=\"n\">sub</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">red_head</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Changes - I marked <code>arity</code> as <code>reducible</code> and I used pattern matching and not <code>induction</code> for the definition of <code>is_wellformed</code></p>\n</blockquote>\n<p>Oh, interesting! What does <code>reducible</code> do? Or perhaps a better question is, where can I learn about how such glyphs work, without having to bug anyone about it?</p>\n<p>I also want the sub expressions to be well formed. I will give it a spin and come back, thank you for the suggestion!! ^_^</p>",
        "id": 221138863,
        "sender_full_name": "Oskar Berndal",
        "timestamp": 1609253139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Detecting.20case.20inside.20pattern.20match/near/221138596\">said</a>:</p>\n<blockquote>\n<p>Would these non-equation compiler Prop defns also work?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">red_head</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">exopstree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">tree.var</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">tree.sym</span> <span class=\"n\">exops.mul_red</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">blu_head</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">exopstree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">tree.var</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">tree.sym</span> <span class=\"n\">exops.mul_blu</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">tree.sym</span> <span class=\"n\">exops.neg_blu</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don't think that's as nice to use? Since every time you want to prove something you'll need to provide the value for the <code>exists</code>. Although using the equation compiler some golfing is possible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">red_head</span> <span class=\"o\">:</span> <span class=\"n\">exopstree</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.var</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.sym</span> <span class=\"n\">mul_red</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.sym</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">blu_head</span> <span class=\"o\">:</span> <span class=\"n\">exopstree</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">tree.var</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.sym</span> <span class=\"n\">mul_red</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree.sym</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 221139111,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1609253345
    },
    {
        "content": "<p>Ah bugger I wasn't able to refactor my working code so that that approach worked, it seems that I inject too many 'intermediary abstractions'. Thanks anyways.</p>",
        "id": 221144416,
        "sender_full_name": "Oskar Berndal",
        "timestamp": 1609258108
    },
    {
        "content": "<p>Thanks to your help <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> , I was able to solve my problem, following your suggestion of just flat pattern matching. I also had to use the change tactic, approximately <code>change [fin (actual arity of sub) → tree] at [sub]</code>. It sure would be a neat thing if I could do that inside a match expression as well but I couldn't get it to work. At least I have a path forward now!!! =)</p>",
        "id": 221245044,
        "sender_full_name": "Oskar Berndal",
        "timestamp": 1609361092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360337\">Oskar Berndal</span> <a href=\"#narrow/stream/113489-new-members/topic/Detecting.20case.20inside.20pattern.20match/near/221245044\">said</a>:</p>\n<blockquote>\n<p>Thanks to your help <span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> , I was able to solve my problem, following your suggestion of just flat pattern matching. I also had to use the change tactic, approximately <code>change [fin (actual arity of sub) → tree] at [sub]</code>. It sure would be a neat thing if I could do that inside a match expression as well but I couldn't get it to work. At least I have a path forward now!!! =)</p>\n</blockquote>\n<p>You might be able to get rid of the <code>change</code> by adding some casts and/or type annotations, but I'm not sure without having seen your code.</p>",
        "id": 221274738,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1609399562
    }
]