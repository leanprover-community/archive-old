[
    {
        "content": "<p>I'm trying to prove that the intersection of two subfields is a subfield -- the problem with using <code>subfield.mk</code>, or just using <code>{...}</code> directly, is that <code>subfield</code> is defined using <code>extends</code>, so I need to prove that it's a subring -- and by extension that it is an additive subgroup and a submonoid. What's the notation for this?</p>",
        "id": 154872747,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547155265
    },
    {
        "content": "<p>This is what I have:</p>",
        "id": 154872763,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547155273
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">field_intersect</span> <span class=\"o\">(</span><span class=\"n\">F1</span> <span class=\"n\">F2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">F1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">F2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">F1</span> <span class=\"err\">∩</span> <span class=\"n\">F2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>   <span class=\"c1\">--do I need to put something here?</span>\n    <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hx1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hx2</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 154872773,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547155284
    },
    {
        "content": "<p>Got it, it's <code>to_is_subring</code>.</p>",
        "id": 154874067,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547156234
    },
    {
        "content": "<p>Ok, I suppose one could do without that, too.</p>",
        "id": 154876299,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547158247
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">field_intersect</span> <span class=\"o\">(</span><span class=\"n\">F1</span> <span class=\"n\">F2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">F1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">F2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">F1</span> <span class=\"err\">∩</span> <span class=\"n\">F2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n        <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha1</span> <span class=\"n\">hb1</span><span class=\"o\">})</span>\n        <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha2</span> <span class=\"n\">hb2</span><span class=\"o\">}),</span>\n    <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n        <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha1</span> <span class=\"n\">hb1</span><span class=\"o\">})</span>\n        <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha2</span> <span class=\"n\">hb2</span><span class=\"o\">}),</span>\n    <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n        <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">ha1</span><span class=\"o\">})</span>\n        <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">ha2</span><span class=\"o\">}),</span>\n    <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hx1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hx2</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 154876309,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547158257
    },
    {
        "content": "<p>I got confused because Lean doesn't point out which fields are to be provided when something extends something.</p>",
        "id": 154876361,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547158310
    },
    {
        "content": "<p>On a related note, why doesn't this work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">field_intersect</span> <span class=\"o\">(</span><span class=\"n\">F1</span> <span class=\"n\">F2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">F1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">F2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">F1</span> <span class=\"err\">∩</span> <span class=\"n\">F2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">ha1</span> <span class=\"n\">hb1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">ha2</span> <span class=\"n\">hb2</span><span class=\"o\">),</span>\n    <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">ha1</span> <span class=\"n\">hb1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">ha2</span> <span class=\"n\">hb2</span><span class=\"o\">),</span>\n    <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"n\">ha1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"n\">ha2</span><span class=\"o\">),</span>\n    <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hx1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hx2</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Or even this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">field_intersect</span> <span class=\"o\">(</span><span class=\"n\">F1</span> <span class=\"n\">F2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">F1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">F2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">F1</span> <span class=\"err\">∩</span> <span class=\"n\">F2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha1</span> <span class=\"n\">hb1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha2</span> <span class=\"n\">hb2</span><span class=\"o\">),</span>\n    <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">ha1</span> <span class=\"n\">hb1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha2</span> <span class=\"n\">hb2</span><span class=\"o\">),</span>\n    <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"n\">a</span> <span class=\"n\">ha1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"n\">a</span> <span class=\"n\">ha2</span><span class=\"o\">),</span>\n    <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hx1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hx2</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>One has to do a <code>have</code> statement and then construct the statement with the local instance of <code>neg_mem</code>, etc. Why?</p>",
        "id": 154876596,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547158478
    },
    {
        "content": "<p>What exactly did you write the first time? with <code>to_is_subring</code></p>",
        "id": 154876635,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547158513
    },
    {
        "content": "<p>Oh, I just nested them all in:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">field_intersect</span> <span class=\"o\">(</span><span class=\"n\">F1</span> <span class=\"n\">F2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">F1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">F2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">F1</span> <span class=\"err\">∩</span> <span class=\"n\">F2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_is_subring</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">to_is_add_subgroup</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n            <span class=\"n\">to_is_add_submonoid</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n                <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span>\n                <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n                    <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha1</span> <span class=\"n\">hb1</span><span class=\"o\">})</span>\n                    <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha2</span> <span class=\"n\">hb2</span><span class=\"o\">}),</span>\n            <span class=\"o\">},</span>\n            <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n                <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">ha1</span><span class=\"o\">})</span>\n                <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">ha2</span><span class=\"o\">}),</span>\n            <span class=\"o\">},</span>\n        <span class=\"n\">to_is_submonoid</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n            <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span><span class=\"o\">,</span>\n            <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n                <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha1</span> <span class=\"n\">hb1</span><span class=\"o\">})</span>\n                <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha2</span> <span class=\"n\">hb2</span><span class=\"o\">}),</span>\n        <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hx1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hx2</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 154876664,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547158543
    },
    {
        "content": "<p><code>@h1.neg_mem</code> doesn't work because you can't mix field notation and <code>@</code> notation</p>",
        "id": 154877108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547158932
    },
    {
        "content": "<p>you have to write <code>@neg_mem h1</code></p>",
        "id": 154877121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547158957
    },
    {
        "content": "<p>also you shouldn't project out of a typeclass argument, because it's implicit</p>",
        "id": 154877252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159083
    },
    {
        "content": "<p>Re:(@,.) -- I thought so, but I tried that and it doesn't work either -- it just doesn't find <code>is_subfield.neg_mem</code></p>",
        "id": 154877259,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547159094
    },
    {
        "content": "<blockquote>\n<p>also you shouldn't project out of a typeclass argument, because it's implicit</p>\n</blockquote>\n<p>What do you mean?</p>",
        "id": 154877297,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547159138
    },
    {
        "content": "<p>what do you get when you try it?</p>",
        "id": 154877317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159145
    },
    {
        "content": "<p><code>unknown identifier 'is_subfield.add_mem'</code></p>",
        "id": 154877398,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547159195
    },
    {
        "content": "<p>that means it's not called that</p>",
        "id": 154877407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159212
    },
    {
        "content": "<p>what is the def of <code>is_subfield</code>?</p>",
        "id": 154877424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159225
    },
    {
        "content": "<p>I tried with <code>is_add_submonoid</code> too.</p>",
        "id": 154877432,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547159233
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">is_subfield</span> <span class=\"n\">F1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 154877442,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547159249
    },
    {
        "content": "<p>you don't pass in <code>h1</code> at all</p>",
        "id": 154877453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159263
    },
    {
        "content": "<p>I did.</p>",
        "id": 154877513,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547159293
    },
    {
        "content": "<p>This is what I'm trying:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">field_intersect</span> <span class=\"o\">(</span><span class=\"n\">F1</span> <span class=\"n\">F2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">F1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">F2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">F1</span> <span class=\"err\">∩</span> <span class=\"n\">F2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha1</span> <span class=\"n\">hb1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha2</span> <span class=\"n\">hb2</span><span class=\"o\">),</span>\n    <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">ha1</span> <span class=\"n\">hb1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha2</span> <span class=\"n\">hb2</span><span class=\"o\">),</span>\n    <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"n\">a</span> <span class=\"n\">ha1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"n\">a</span> <span class=\"n\">ha2</span><span class=\"o\">),</span>\n    <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hx1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hx2</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 154877517,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547159299
    },
    {
        "content": "<p>i know, stop</p>",
        "id": 154877518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159303
    },
    {
        "content": "<p>just call it without passing in <code>h1</code></p>",
        "id": 154877523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159327
    },
    {
        "content": "<p>Ah.</p>",
        "id": 154877543,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547159348
    },
    {
        "content": "<p>like <code>is_add_submonoid.add_mem ha1 hb1</code></p>",
        "id": 154877546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159351
    },
    {
        "content": "<p>I see, yes this works.</p>",
        "id": 154877642,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547159416
    },
    {
        "content": "<p>But why? What's wrong with trying to feed Lean the class?</p>",
        "id": 154877652,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547159429
    },
    {
        "content": "<p>the class is implicit, you aren't supposed to give it, lean finds it by typeclass inference</p>",
        "id": 154877684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159482
    },
    {
        "content": "<p>you can give it if you use <code>@</code></p>",
        "id": 154877696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159497
    },
    {
        "content": "<p>Yes, why wasn't that working?</p>",
        "id": 154877758,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547159527
    },
    {
        "content": "<p>Using <code>@</code> and feeding the class?</p>",
        "id": 154877771,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547159544
    },
    {
        "content": "<p>that should work, you just need a few more arguments that way, like the types</p>",
        "id": 154877782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159570
    },
    {
        "content": "<p>I guess it looks something like <code>@is_add_submonoid.add_mem F1 h1 a b ha1 hb1</code></p>",
        "id": 154877802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159614
    },
    {
        "content": "<p>oh wait, no it should be something more complicated than just <code>h1</code> there</p>",
        "id": 154877891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159678
    },
    {
        "content": "<p>because <code>h1</code> is a <code>is_subfield</code> and it needs a <code>is_add_monoid</code>, it does some typeclass inference to fill the gap</p>",
        "id": 154877921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547159728
    },
    {
        "content": "<p>Oh ok. I think I see why it's best to leave things to Lean's class inference.</p>",
        "id": 154878002,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547159785
    },
    {
        "content": "<p>I'm proving a similar theorem and having the same problem again, except this time just leaving Lean to do its type class inference doesn't work (only <code>zero_mem</code> and <code>one_mem</code> work):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">field_intersect&#39;</span> <span class=\"o\">(</span><span class=\"n\">PL</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">J</span> <span class=\"err\">∈</span> <span class=\"n\">PL</span><span class=\"o\">,</span> <span class=\"n\">is_subfield</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sInter</span> <span class=\"n\">PL</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>   <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"o\">},</span>\n    <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"o\">},</span>\n    <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"n\">is_add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>It worked with <code>set.Inter</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">field_intersect</span> <span class=\"o\">(</span><span class=\"n\">Fi</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Inter</span> <span class=\"n\">Fi</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>   <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"o\">},</span>\n    <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"o\">},</span>\n    <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 155280441,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547666899
    },
    {
        "content": "<p>Can you post working code so I can cut and paste?</p>",
        "id": 155281908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547668019
    },
    {
        "content": "<p>PS this \"simp, ...\" style is discouraged. There are always ways around it.</p>",
        "id": 155281909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547668019
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">field_intersect&#39;</span> <span class=\"o\">(</span><span class=\"n\">PL</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">J</span> <span class=\"err\">∈</span> <span class=\"n\">PL</span><span class=\"o\">,</span> <span class=\"n\">is_subfield</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sInter</span> <span class=\"n\">PL</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>   <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"o\">},</span>\n    <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"o\">},</span>\n    <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"n\">is_add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">neg_mem</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 155282381,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547668406
    },
    {
        "content": "<p>Doesn't that work (for copy-pasting, I mean)?</p>",
        "id": 155282401,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547668425
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">field_intersect&#39;</span> <span class=\"o\">(</span><span class=\"n\">PL</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">J</span> <span class=\"err\">∈</span> <span class=\"n\">PL</span><span class=\"o\">,</span> <span class=\"n\">is_subfield</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sInter</span> <span class=\"n\">PL</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>   <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"k\">in</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span><span class=\"o\">),</span>\n    <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>You don't need <code>simp</code> for stuff like this, you can just spell it out. Although I struggled with <code>add_mem</code> and I don't know why, it's something to do with classes that I don't understand properly.</p>",
        "id": 155283329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547669065
    },
    {
        "content": "<p>Yeah, the <code>simp</code> was a legacy from my code for <code>field_intersect</code> with indexed subsets.</p>",
        "id": 155283540,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547669220
    },
    {
        "content": "<p>Interesting that the <code>let ... in</code> thing works, though -- I did notice that going <code>have</code> the <code>add_mem</code> statement (without feeding it any parameters) in tactic mode worked.</p>",
        "id": 155283598,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547669268
    },
    {
        "content": "<p>This is pretty weird. A more understandable solution would be <code>λ a b ha hb J HJ, by haveI := H J HJ ; exact is_add_submonoid.add_mem (ha J HJ) (hb J HJ),</code></p>",
        "id": 155285644,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547670633
    },
    {
        "content": "<p>Of course you can also use the ugly direct term <code>@is_add_submonoid.add_mem _ _ _ (H J HJ).to_is_add_submonoid _ _ (ha J HJ) (hb J HJ)</code></p>",
        "id": 155285877,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547670829
    }
]