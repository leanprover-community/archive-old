[
    {
        "content": "<p>How can I apply a function to an assumption? Suppose I have <code>h₁ : p</code> and <code>f : p → q</code>, I want to end with a hypothesis of type <code>q</code> <em>without</em> using <code>have h₂ : q, ...</code>.</p>",
        "id": 197821454,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589673794
    },
    {
        "content": "<p><code>specialize f h\\_1</code></p>",
        "id": 197821633,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589674008
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#replace\"><code>replace</code></a> is also sometimes useful.</p>",
        "id": 197821762,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589674287
    },
    {
        "content": "<p>Another tip: you can use <code>h\\1</code> instead of <code>h\\_1</code>. It was a long time before I realized that.</p>",
        "id": 197822028,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589674812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> wow, thanks for the tip! I am sure I would go a long time without noticing that myself!</p>",
        "id": 197822097,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589674935
    },
    {
        "content": "<p>In general I am having a very frustrating time trying to apply tactics to assumptions. Is the a \"general\" way of doing it? Or a cheat-sheet with many such instances?</p>",
        "id": 197822104,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589674982
    },
    {
        "content": "<p>Can you say a little more what you mean by this? Tactics like <code>simp at h</code>, <code>rw at h</code>, <code>ring at h</code> or something else?</p>",
        "id": 197822155,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589675062
    },
    {
        "content": "<p>Not being able to <code>apply at</code> is particularly annoying. Other than that I guess most of my frustration is coming from now being familiar with simplification in Lean yet.</p>",
        "id": 197822388,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589675591
    },
    {
        "content": "<p>Computer scientists would rather you applied their tactics to the goal, which means you have to learn how to explain your proofs backwards. \"It suffices to prove this, so it suffices to prove that, so...and so it suffices to prove something which is already an assumption\".</p>",
        "id": 197822465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589675762
    },
    {
        "content": "<p>If you think you want to argue forwards, they tell you that the forwards step should be split off as a separate lemma</p>",
        "id": 197822510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589675797
    },
    {
        "content": "<p>I guess normally I use <code>have := f h</code> quite a bit which is pretty short (and then <code>rw blah at this</code> later) if I want to keep the old hypothesis (otherwise specialize or replace). Often I then notice that I only use <code>f h</code> once so giving it a name isn't needed, you can just do <code>cases f h</code> for example.</p>",
        "id": 197822512,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589675802
    },
    {
        "content": "<p>Yes sometimes the trick is not to make <code>h</code> at all. Beginner mathematicians are very good at generating lots and lots of intermediate hypotheses in their proofs, that is the sort of thing that happens if you argue forwards and go slowly and carefully.</p>",
        "id": 197822563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589675889
    },
    {
        "content": "<p>Once you learn how to use lean a bit better then you start taking shortcuts</p>",
        "id": 197822565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589675918
    },
    {
        "content": "<p>I think instead of <code>apply at</code> we have to write <code>apply_fun at</code>. Maybe this will be changed.</p>",
        "id": 197822621,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589676041
    },
    {
        "content": "<p>I think we should add <code>apply at</code> though</p>",
        "id": 197823015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589676901
    },
    {
        "content": "<p><code>apply_fun at</code> is not the same</p>",
        "id": 197823022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589676907
    },
    {
        "content": "<p>the equivalent of <code>apply f at h</code> is <code>replace h := f h</code></p>",
        "id": 197823024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589676924
    },
    {
        "content": "<p>I made an issue to track doing this: <a href=\"https://github.com/leanprover-community/lean/issues/247\">https://github.com/leanprover-community/lean/issues/247</a>.</p>",
        "id": 197829817,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589689728
    },
    {
        "content": "<p>(This has to happen in community lean, not mathlib.)</p>",
        "id": 197829820,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589689739
    },
    {
        "content": "<p>Why does it need to be in lean? EDIT oh because you're redefining apply</p>",
        "id": 197829881,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589689865
    },
    {
        "content": "<p>If that sounds intimidating, it would be great for someone to write an <code>apply'</code> tactic that allowed the <code>at</code> syntax, and then someone who felt braver about community lean could migrate it once it had been tested/reviewed in mathlib.</p>",
        "id": 197829939,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589690001
    },
    {
        "content": "<p>This is a really nice way to do it. Beginner mathematician users who think forwards often want to apply functions to hypotheses</p>",
        "id": 197837697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589704279
    },
    {
        "content": "<p>And stuff like <code>rw</code> works on hypotheses and goals even though in some sense it's doing different things in each case</p>",
        "id": 197837746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589704328
    },
    {
        "content": "<p>Yes, the difference in behavior would be more glaring on <code>apply</code>, but still a far cry from intimidating I would say.</p>",
        "id": 197878190,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589762990
    },
    {
        "content": "<p>so the behavior of <code>apply f at h</code> is supposed to be something like <code>replace h := f _* h</code> where by <code>_*</code> i mean \"some nonnegative number of underscores\"?</p>\n<p>or is it already enough for it to be an alias for <code>replace h := f h</code>?</p>",
        "id": 197882139,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589767845
    },
    {
        "content": "<p>I was wondering the same thing. I suppose it wouldn't be hard to support the described behavior - just revert <code>h</code> and then <code>apply f</code></p>",
        "id": 197882394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589768104
    },
    {
        "content": "<p>Actually, I don't think my suggestion will work, because the expected type is not known. I think, in order to make it predictable, the <code>h</code> should go in as the <em>first</em> explicit argument. That way you can write <code>apply @f _ _ _ at h</code> if it gets the wrong argument</p>",
        "id": 197883628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589770351
    },
    {
        "content": "<p>in other words, <code>replace h := f h _*</code></p>",
        "id": 197883642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589770402
    },
    {
        "content": "<p>but even here it seems like the <code>_*</code> could end up being problematic because you have no control</p>",
        "id": 197883702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589770465
    },
    {
        "content": "<p>maybe it should just literally be <code>replace h := f h</code></p>",
        "id": 197883703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589770491
    },
    {
        "content": "<p>Once you have <code>f h : ∀ ..., ...</code> you can't guess how many arguments the user wants to be gone, so I think that <code>replace h := f h</code> is the only \"predictable\" option.</p>",
        "id": 197883819,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589770775
    },
    {
        "content": "<p>I mean, if after <code>apply f at h</code> one gets <code>h : ∀ ..., ...</code>, then <code>specialize</code> can help with getting rid of <code>∀</code>.</p>",
        "id": 197883884,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589770864
    },
    {
        "content": "<p>how is <code>apply f h _*</code> different from <code>apply f h</code>?</p>",
        "id": 197885043,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589772164
    },
    {
        "content": "<p>i guess the first one will infer whatever arguments it can, and the second one will infer exactly the arguments marked as optional with <code>{}</code></p>",
        "id": 197885161,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589772244
    },
    {
        "content": "<p>it's not, <code>apply f h</code> is the same as <code>refine f h _*</code></p>",
        "id": 197885169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589772250
    },
    {
        "content": "<p>or did you mean something else?</p>",
        "id": 197885179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589772258
    },
    {
        "content": "<p>oh okay, thanks</p>",
        "id": 197885195,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589772271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Apply.20in.20an.20assumption.3F/near/197883642\">said</a>:</p>\n<blockquote>\n<p>in other words, <code>replace h := f h _*</code></p>\n</blockquote>\n<p>oh, right, the question was here, how is <code>f h _*</code> different from <code>f h</code>?</p>",
        "id": 197885230,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589772330
    },
    {
        "content": "<p>(also, just to check, <code>_*</code> is not literally Lean code, right?)</p>",
        "id": 197885233,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589772359
    },
    {
        "content": "<p>in <code>apply</code> (no <code>at</code>), the goal type is known so you can match pis</p>",
        "id": 197885268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589772363
    },
    {
        "content": "<p>with <code>apply at</code> you don't know what the target type is, so there isn't anything to determine how many <code>_</code> to put</p>",
        "id": 197885278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589772392
    },
    {
        "content": "<p>so the only reasonable option is to be conservative and not introduce any <code>_</code> as Yury says</p>",
        "id": 197885283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589772415
    },
    {
        "content": "<p><code>_*</code> is not lean code</p>",
        "id": 197885289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589772430
    },
    {
        "content": "<p>okay, thanks, I think I am de-confused</p>",
        "id": 197885329,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589772466
    },
    {
        "content": "<p>Should the semantics instead be <code>replace h := f _* h</code>? That way <code>apply f _ _ at h</code> is similar to <code>apply f at h</code> in the same way that <code>apply f _ _</code> is similar to <code>apply f</code>.</p>",
        "id": 307221790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667259066
    }
]