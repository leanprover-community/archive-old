[
    {
        "content": "<p>For the purposes of illustrations I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"k\">#reduce</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span>\n</code></pre></div>\n\n<p>while <code>¬ P</code> reduces to <code>P → false</code>, <code>P ↔ Q</code> is not unfolded to <code>(P → Q) ∧ (Q → P)</code> as I hope. Why is this?</p>",
        "id": 211901650,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1601555408
    },
    {
        "content": "<p>I guess it is an inductive definition?</p>",
        "id": 211901739,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1601555459
    },
    {
        "content": "<p>Indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">↔</span>\n<span class=\"c1\">-- _ `↔`:20 _:20 := iff #1 #0</span>\n<span class=\"k\">#print</span> <span class=\"n\">iff</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">structure iff : Prop → Prop → Prop</span>\n<span class=\"cm\">fields:</span>\n<span class=\"cm\">iff.mp : ∀ {a b : Prop}, (a ↔ b) → a → b</span>\n<span class=\"cm\">iff.mpr : ∀ {a b : Prop}, (a ↔ b) → b → a</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 211902151,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601555685
    },
    {
        "content": "<p>You can do cases on it though :-)</p>",
        "id": 211915637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601561328
    }
]