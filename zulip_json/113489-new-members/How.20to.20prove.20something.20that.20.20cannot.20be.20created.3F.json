[
    {
        "content": "<p>How to prove that something cannot be created? I Asked something similar today because of a problem with <code>by cases x</code> that could not solve the equation <code> x :: xs = List.append a✝ a'✝</code> and even trying to find another ways to do it, I don't think I understand it enough. There are ways to prove this thing? How should I prove something that I cant construct? I was tried to prove something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ex</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ex</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Ex</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ex</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ex</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Wot</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">σ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ex</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">be</span>  <span class=\"o\">:</span> <span class=\"n\">Wot</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Wot</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Wot</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ex.c</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">σ</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">Wot</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">Ex.a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span>\n</code></pre></div>",
        "id": 279953473,
        "sender_full_name": "Chiyoku",
        "timestamp": 1650760495
    },
    {
        "content": "<p>Can you just generalize over the list?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">σ</span><span class=\"o\">},</span> <span class=\"n\">Wot</span> <span class=\"n\">xs</span> <span class=\"n\">Ex.a</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">w</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 279954482,
        "sender_full_name": "Chris B",
        "timestamp": 1650762281
    },
    {
        "content": "<p>The general problem of \"proving something that can't be created\" isn't that hard, but having these detailed type indices raises the stakes.</p>",
        "id": 279954577,
        "sender_full_name": "Chris B",
        "timestamp": 1650762480
    },
    {
        "content": "<p>Similar to what I mentioned in the other thread, you can also use an additional equality hypothesis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hL</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">Ex.a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Wot</span> <span class=\"n\">L</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"n\">Wot.be</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"n\">Ex.noConfusion</span> <span class=\"n\">hE</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 279954978,
        "sender_full_name": "Chris B",
        "timestamp": 1650763096
    }
]