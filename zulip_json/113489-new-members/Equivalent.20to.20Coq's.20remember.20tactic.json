[
    {
        "content": "<p>Does Lean have something like Coq's <code>remeber</code> tactic or a way to retain information lost when doing induction? For context, I'm trying to prove a deduction theorem for a logical system, normally done by induction on derivations. A minimal example would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">atomic</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">implication</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">derivable</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">},</span> <span class=\"n\">derivable</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">formula.implication</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">},</span> <span class=\"n\">derivable</span> <span class=\"bp\">Γ</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">derivable</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">formula.implication</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">derivable</span> <span class=\"bp\">Γ</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">premise</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">},</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">derivable</span> <span class=\"bp\">Γ</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">deduction_theorem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">},</span> <span class=\"n\">derivable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">derivable</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">formula.implication</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"bp\">Γ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">deriv</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">deriv</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">premise</span><span class=\"o\">:</span> <span class=\"bp\">Γ'</span> <span class=\"n\">q'</span> <span class=\"n\">mem_q'_</span><span class=\"bp\">Γ'</span><span class=\"o\">{</span>\n    <span class=\"c1\">-- Γ: list formula</span>\n    <span class=\"c1\">-- p q: formula</span>\n    <span class=\"c1\">-- Γ': list formula</span>\n    <span class=\"c1\">-- q': formula</span>\n    <span class=\"c1\">-- mem_q'_Γ': q' ∈ Γ'</span>\n    <span class=\"c1\">-- ⊢ derivable Γ (p.implication q')</span>\n    <span class=\"c1\">-- We need to retain the information that Γ' = p :: Γ</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I am stuck at the <code>premise</code> case, because Lean replaces <code>p :: Γ</code> with a new term <code>Γ'</code>, with no relation between them. In Coq I would use <code>remeber</code> to add the hypothesis <code>Γ' = p :: Γ</code> in order to solve this. Is there a way to do that in Lean?</p>",
        "id": 219812377,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1607935162
    },
    {
        "content": "<p>For <code>cases</code>, you can use <code>cases e : term</code> to add the assumption <code>e : term = constructor ...</code> in the subcases, but for induction you have to use <code>generalize e : term = x</code> first followed by <code>induction x</code></p>",
        "id": 219812532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607935256
    },
    {
        "content": "<p>it is also often useful to use <code>induction x; cases e</code> in the latter case to immediately case on the equality, which may eliminate some of the inductive cases</p>",
        "id": 219812678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607935374
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">atomic</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">implication</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">derivable</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">},</span> <span class=\"n\">derivable</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">formula.implication</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">},</span> <span class=\"n\">derivable</span> <span class=\"bp\">Γ</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">derivable</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">formula.implication</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">derivable</span> <span class=\"bp\">Γ</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">premise</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">},</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">derivable</span> <span class=\"bp\">Γ</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">deduction_theorem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">},</span> <span class=\"n\">derivable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">derivable</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">formula.implication</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"bp\">Γ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">deriv</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize_hyp</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span> <span class=\"bp\">=</span> <span class=\"bp\">Γ₁</span> <span class=\"n\">at</span> <span class=\"n\">deriv</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">deriv</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">premise</span><span class=\"o\">:</span> <span class=\"bp\">Γ'</span> <span class=\"n\">q'</span> <span class=\"n\">mem_q'_</span><span class=\"bp\">Γ'</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">mem</span> <span class=\"o\">:=</span> <span class=\"n\">mem_q'_</span><span class=\"bp\">Γ'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219813442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607935873
    },
    {
        "content": "<p>That worked, thank you!</p>",
        "id": 219815159,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1607937022
    }
]