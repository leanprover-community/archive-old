[
    {
        "content": "<p>Hi!</p>\n<p>This is my zeroth post, so I'll introduce myself. I'm graduate in computing science, I'm interested in sound type systems, and one day, I'd like to create a programming language with one expressive enough to serve as a convenient theorem prover for general mathematics.</p>\n<p>I decided to try to use Lean 4 to make sure I don't have mistakes in my proofs (since I discovered some pretty embarrassing, although easily fixable ones, in my <a href=\"https://is.muni.cz/th/xr8vu/Well-founded-type-semantics.pdf\">magister thesis</a>.)</p>\n<p>Question -- I have code like this (simplified):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"c1\">-- An opaque proposition</span>\n<span class=\"kd\">def</span> <span class=\"n\">someComplexProp</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\">-- An if-then-else defined on the proposition</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">someComplexProp</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span>\n\n<span class=\"c1\">-- A value satisfying the prop, along with a proof</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">10</span>\n<span class=\"kd\">def</span> <span class=\"n\">proofOfSomeComplexProp</span><span class=\"o\">:</span> <span class=\"n\">someComplexProp</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- I'd like to prove this without simp or ▸.</span>\n<span class=\"kd\">def</span> <span class=\"n\">fxEqTrue</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">proofOfSomeComplexProp</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>How can I find out what magic <code>simp</code> uses under the hood and<br>\nuse it directly? I'd be fine with using simp, but because of<br>\n<a href=\"https://github.com/leanprover/lean4/issues/1694\">this issue</a>,<br>\nI can't. What step can I use in conversion mode to eliminate the<br>\nif-then-else?</p>\n<p>Thank you.</p>",
        "id": 302930190,
        "sender_full_name": "Jozef Mikušinec",
        "timestamp": 1665174770
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fxEqTrue</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">proofOfSomeComplexProp</span>\n</code></pre></div>",
        "id": 302930673,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665175009
    },
    {
        "content": "<p>if you wanted the negative case of the if-then-else, then you could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=if_neg#doc\">docs4#if_neg</a> instead</p>",
        "id": 302930960,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665175152
    },
    {
        "content": "<p>In general, the tactic <code>show_term</code> will give you the (usually unreadable) term produced by a tactic proof. I think <code>show_term</code> has alreaedy been implemented in <code>mathlib4</code>, but I'm not 100% sure.</p>",
        "id": 302931136,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665175239
    },
    {
        "content": "<p>Also, <code>simp?</code> or <code>squeeze_simp</code> are mathlib(3) tactics that will show you what lemmas an invocation of <code>simp</code> uses. I don't know if these have been implemented in mathlib4 yet.</p>",
        "id": 302931262,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665175314
    },
    {
        "content": "<p>Thank you! I think that should work for me. However, I'm afraid I simplified my example too much - my <code>def</code>s are actually local definitions, and it seems <code>unfold</code> does not actually unfold <code>let</code> declarations, so the unfolding was also handled by <code>simp</code>. (Indeed if I delete it it still compiles.) So can you also show me how to unfold a particular let binding?</p>\n<p>The modified example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">wat</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- An opaque proposition</span>\n  <span class=\"k\">let</span> <span class=\"n\">someComplexProp</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n\n  <span class=\"c1\">-- An if-then-else defined on the proposition</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">someComplexProp</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span>\n\n  <span class=\"c1\">-- A value satisfying the prop, along with a proof</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">10</span>\n  <span class=\"k\">let</span> <span class=\"n\">proofOfSomeComplexProp</span><span class=\"o\">:</span> <span class=\"n\">someComplexProp</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n  <span class=\"c1\">-- I'd like to prove this without simp or ▸.</span>\n  <span class=\"k\">let</span> <span class=\"n\">fxEq10</span><span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">proofOfSomeComplexProp</span>\n\n  <span class=\"mi\">42</span>\n</code></pre></div>",
        "id": 302937961,
        "sender_full_name": "Jozef Mikušinec",
        "timestamp": 1665178499
    },
    {
        "content": "<p>let bindings are definitionally equal to their definitions, so you can just apply a theorem that would apply if the definition was already unfolded</p>",
        "id": 302938328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665178702
    },
    {
        "content": "<p>here's a tactic-free proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">fxEq10</span><span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">if_pos</span> <span class=\"n\">proofOfSomeComplexProp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 302938480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665178802
    },
    {
        "content": "<p>you can also be more explicit about the unfolding by using <code>show</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">show</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">someComplexProp</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"k\">from</span>\n    <span class=\"o\">(</span><span class=\"n\">if_pos</span> <span class=\"n\">proofOfSomeComplexProp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 302938953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665179036
    },
    {
        "content": "<p>Yes, the tactic-free proof worked for me, thank you very much!</p>",
        "id": 302939006,
        "sender_full_name": "Jozef Mikušinec",
        "timestamp": 1665179046
    },
    {
        "content": "<p><code>show</code> is just syntax for an application of the identity function <code>id</code> with the specified type in order to force a definitional unfolding</p>",
        "id": 302939037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665179072
    },
    {
        "content": "<p>tactics like <code>unfold f</code> or <code>dsimp only [f]</code> amount to a use of <code>show</code> / <code>@id T</code> in the generated term</p>",
        "id": 302939085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665179105
    },
    {
        "content": "<p>Also, <code>dsimp</code> by itself will unfold all of the local let bindings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">wat</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- An opaque proposition</span>\n  <span class=\"k\">let</span> <span class=\"n\">someComplexProp</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n\n  <span class=\"c1\">-- An if-then-else defined on the proposition</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">someComplexProp</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span>\n\n  <span class=\"c1\">-- A value satisfying the prop, along with a proof</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">10</span>\n  <span class=\"k\">let</span> <span class=\"n\">proofOfSomeComplexProp</span><span class=\"o\">:</span> <span class=\"n\">someComplexProp</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n  <span class=\"c1\">-- I'd like to prove this without simp or ▸.</span>\n  <span class=\"k\">let</span> <span class=\"n\">fxEq10</span><span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">dsimp</span>\n    <span class=\"c1\">-- Goal is now `⊢ true = if Nat → ∃ m, 10 = m then true else false`</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">proofOfSomeComplexProp</span>\n\n  <span class=\"mi\">42</span>\n</code></pre></div>",
        "id": 302939425,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665179301
    },
    {
        "content": "<p>By the way, I'm not sure why you insist on <code>conv</code>.</p>",
        "id": 302939490,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665179350
    },
    {
        "content": "<p>By the way, <code>dsimp</code> doesn't generate any proof term, it just uses rewriting with definitional equalities in order to come up with the new goal and then applies <code>show</code> with the final goal to assert, and the type theory does the hard work of checking that this is well typed by proving that the new goal is defeq to the original one</p>",
        "id": 302939792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665179516
    }
]