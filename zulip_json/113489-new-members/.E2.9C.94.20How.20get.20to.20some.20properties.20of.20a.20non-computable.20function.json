[
    {
        "content": "<p>Hi, I'm trying to solve a problem in xena project. When I don't know what to use I type 'suggest' tactic. And now I get some code like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Tmp</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">Hnonempty</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcover</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hdisjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">|</span> <span class=\"n\">equivalence</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">partition</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">equiv.of_bijective</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">sy</span> <span class=\"n\">v</span> <span class=\"n\">using</span> <span class=\"n\">p_Hcover</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">sy</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">reflexive</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span> <span class=\"o\">{</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Tmp</span>\n</code></pre></div>\n<p>I know that there's a better way to do this. But now I'm wondering how can I get access to some properties of the function R I defined. <br>\nThanks!</p>",
        "id": 276107867,
        "sender_full_name": "T.X. Xia",
        "timestamp": 1647893948
    },
    {
        "content": "<p>A few things, if you are defining a function inline, you should use <code>let</code> instead of <code>have</code> so that you can access its definition later.<br>\nYour function is defined using choice (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some\">docs#classical.some</a>) so to get the defining property you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some_spec\">docs#classical.some_spec</a>.<br>\nThe <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#generalize_proofs\">tactic#generalize_proofs</a> makes this sort of thing easier to write by giving a nice name to a proof in the goal.<br>\nSee how I do one of your goals here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Tmp</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">Hnonempty</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcover</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hdisjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">|</span> <span class=\"n\">equivalence</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">partition</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">equiv.of_bijective</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">sy</span> <span class=\"n\">v</span> <span class=\"n\">using</span> <span class=\"n\">p_Hcover</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">sy</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">reflexive</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">],</span>\n      <span class=\"n\">generalize_proofs</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some_spec</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this.2</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Tmp</span>\n</code></pre></div>",
        "id": 276108920,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1647894499
    },
    {
        "content": "<p>Thanks, <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I should use 'let'. After simp[R], I see '⊢ x ∈ classical.some _' in the goal, I don't understand the underscore here.</p>",
        "id": 276110325,
        "sender_full_name": "T.X. Xia",
        "timestamp": 1647895243
    },
    {
        "content": "<p>It's a proof, namely the proof that \"there exists such a something\". It's not printed because proofs are irrelevant.</p>",
        "id": 276110530,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647895372
    },
    {
        "content": "<p>The underscore is  a proof, which by default lean doesn't print, if you add <code>set_option pp.proofs true</code> before your example you should be able to see it. but using <code>generalize_proofs</code> will just give it a nice name instead, which is normally just as good if not better than seeing the original one.</p>",
        "id": 276110531,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1647895375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"478462\">T.X. Xia</span> has marked this topic as resolved.</p>",
        "id": 276110689,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647895450
    }
]