[
    {
        "content": "<p>Is there an easy way to extract the underlying set from a group? I have looked at the mathlib source code defining the group structure, but it is not clear to me how to extract the base set.</p>",
        "id": 205702650,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1596324678
    },
    {
        "content": "<p>the mathematical statement \"<code>G</code> is a group\" translates to <code>(G : Type*) [group G]</code> in Lean</p>",
        "id": 205702699,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596324745
    },
    {
        "content": "<p><code>G</code> itself is the \"underlying set\"</p>",
        "id": 205702704,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596324750
    },
    {
        "content": "<p><code>group G</code> means \"we have a group structure on <code>G</code>\"</p>",
        "id": 205702711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596324783
    },
    {
        "content": "<p>first thing first, \"set\" means type</p>",
        "id": 205702714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596324798
    },
    {
        "content": "<p>If you want the functorial part too, i.e. the function underlying a morphism of groups, you can use <code>\\u= f</code> (a coercion to function) where f is the morphism</p>",
        "id": 205704184,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596327933
    },
    {
        "content": "<p>don't actually type out the arrow</p>",
        "id": 205704187,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596327950
    },
    {
        "content": "<p>use type ascription instead</p>",
        "id": 205704193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596327956
    },
    {
        "content": "<p>i.e. <code>(f : G \\to H)</code></p>",
        "id": 205704195,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596327961
    },
    {
        "content": "<p>I agree with Kenny, but sometimes it's faster to type something like <code>\\lam f, \\u= f</code> instead of the full type ascription. Anyway, it's good to be familiar with both.</p>",
        "id": 205704417,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596328394
    },
    {
        "content": "<p>There are bundled groups in <code>mathlib</code>, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Group\">docs#Group</a> but they are not widely used.</p>",
        "id": 205877941,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596523799
    },
    {
        "content": "<p>If you do use them, then you just want <code>forget Group</code>, which is a functor from <code>Group</code> to <code>Type</code>.</p>",
        "id": 205879093,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596525357
    }
]