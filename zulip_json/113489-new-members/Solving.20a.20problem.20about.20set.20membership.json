[
    {
        "content": "<p>Is there a tactic in mathlib for solving set membership problems? I'm interested in proving some theorems about whether or not a set includes members from a superset. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">set_trivia</span> <span class=\"o\">[</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">∉</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">Γ</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">φ</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">Γ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks in advance!</p>",
        "id": 227115028,
        "sender_full_name": "Dillon Huff",
        "timestamp": 1613852023
    },
    {
        "content": "<p>I don't think there's a tactic; your example can be solved with</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">set_trivia</span> <span class=\"o\">[</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">∉</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">Γ</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">φ</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">Γ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H'</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.mem_union</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">this.resolve_right</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 227118207,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1613855548
    },
    {
        "content": "<p>I think we've had this conversation before. What happens if you turn everything into propositions and then use <code>cc</code>?</p>",
        "id": 227118546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613855966
    },
    {
        "content": "<p>Unfortunately I'm a newb so I don't know enough about lean to say.</p>\n<p>I had thought there might be tactic for this because in this video on formalizing matroids in lean: <a href=\"https://www.youtube.com/watch?v=FzJuoXy5cG0\">https://www.youtube.com/watch?v=FzJuoXy5cG0</a> they seem to have a related tactic they call <code>timed_simplify_sets</code>, though at 37:14 the presenter says something about how its not efficient, and that the correspondence between some of the problems they wanted to solve and propositional logic was more complicated than they thought. Maybe that comment is relevant here?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"FzJuoXy5cG0\" href=\"https://www.youtube.com/watch?v=FzJuoXy5cG0\"><img src=\"https://i.ytimg.com/vi/FzJuoXy5cG0/default.jpg\"></a></div>",
        "id": 227119119,
        "sender_full_name": "Dillon Huff",
        "timestamp": 1613856716
    },
    {
        "content": "<p>Once you put in the <code>have</code> from Ruben's proof, <code>finish</code> can do the rest of the job:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">set_trivia</span> <span class=\"o\">[</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">∉</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">Γ</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">φ</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">Γ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H'</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 227119325,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613856943
    }
]