[
    {
        "content": "<p>Hi everyone,<br>\nMy name is Maxwell and I'm in my senior year of undergrad for math. I'm thinking of formalizing some discrete differential geometry (<a href=\"https://www.cs.cmu.edu/~kmcrane/Projects/DDG/\">https://www.cs.cmu.edu/~kmcrane/Projects/DDG/</a>) in Lean as part of my senior thesis. For instance, I'm imagining defining things like combinatorial surfaces, abstract simplicial complexes (it looks like <span class=\"user-mention\" data-user-id=\"388925\">@Floris Cnossen</span>  has already formalized simplicial sets), and discrete differential forms.</p>\n<p>As far as I can tell, nobody has done any DDG in Matlib or Lean. I have not learned any Lean yet, so I'm not sure exactly what I would be getting into. Does this sound at all feasible?  Would this contribution be welcome?</p>",
        "id": 314169812,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1670302596
    },
    {
        "content": "<p>Do you consider Sperner's lemma to fit in DDG? If so, we gave it a try <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 314179996,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670310074
    },
    {
        "content": "<p>I have no idea what discrete differential geometry is; I always think of combinatorial surfaces and simplicial complexes as algebraic topology and I don't know what a discrete differential form is but maybe I can guess. All of this sounds very doable in lean though.</p>",
        "id": 314180060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670310110
    },
    {
        "content": "<p>I've been keeping an eye on Crane's work there for a while; it's cool to see a desire to formalize it!</p>",
        "id": 314184162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670312507
    },
    {
        "content": "<p>I'm developing Lean 4 <a href=\"https://github.com/lecopivo/SciLean\">library</a> for numerical methods and I would be very much interested in getting some parts of DDG in there. My focus is more on computation then on proofs, I'm thinking about attempting to solve all the course homeworks in Lean. What is our main interest?</p>\n<p>The main job would be to get a simplicial set/complex and the corresponding chain complex with boundary operator. Discrete differential forms and differential are just the dual notions, so they should fall out immediately by considering the cochain complex i.e. transposing all the boundary maps.</p>\n<p>Do you want to formalize the notion of the dual mesh? And use it to define Hodge dual? Maybe a nice goal would be to prove the cotan formula for Laplacian.</p>",
        "id": 314236293,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670333122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Maxwell.20Thum.20.28Formalizing.20Discrete.20Differential.20Geometry.3F.29/near/314179996\">said</a>:</p>\n<blockquote>\n<p>Do you consider Sperner's lemma to fit in DDG? If so, we gave it a try <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Maybe, but it doesn't seem like something I would do in this project. (I'm also fairly new to DDG, so I think I'll also be learning the subject by formalizing it; pardon my ignorance)</p>",
        "id": 314302635,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1670352903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/113489-new-members/topic/Maxwell.20Thum.20.28Formalizing.20Discrete.20Differential.20Geometry.3F.29/near/314236293\">said</a>:</p>\n<blockquote>\n<p>I'm developing Lean 4 <a href=\"https://github.com/lecopivo/SciLean\">library</a> for numerical methods and I would be very much interested in getting some parts of DDG in there. My focus is more on computation then on proofs, I'm thinking about attempting to solve all the course homeworks in Lean. What is our main interest?</p>\n<p>The main job would be to get a simplicial set/complex and the corresponding chain complex with boundary operator. Discrete differential forms and differential are just the dual notions, so they should fall out immediately by considering the cochain complex i.e. transposing all the boundary maps.</p>\n<p>Do you want to formalize the notion of the dual mesh? And use it to define Hodge dual? Maybe a nice goal would be to prove the cotan formula for Laplacian.</p>\n</blockquote>\n<p>Sure, that all sounds great! What would be a good place for us to talk about this more extensively?</p>",
        "id": 314303071,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1670353047
    },
    {
        "content": "<p>I think a good start would be for you to decide what are you really interested in.</p>\n<p>Do you want to properly prove stuff and make a contribution to mathlib? Or are you ok doing more computational stuff that might not be fully formalized and probably make a contribution to my library?</p>\n<p>Whare to start? I think the main question is on top of what to build the (co)chain complex. Use simplicial complex, simplicial set or some combinatorial surface?</p>",
        "id": 314311976,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670355631
    },
    {
        "content": "<p>My library has an experimental structure <a href=\"https://github.com/lecopivo/SciLean/blob/a05f52b612b4486698c347ec18dec9fb72faa244/SciLean/Data/Mesh/PrismaticSet.lean#L19\"><code>PrismaticSet</code></a> that might be of an interest. It is generalization of simplicial set that is not limited to simplices but in 2d it has triangles and squares, in 3d it has tets, cubes, prisms and pyramids and so on.</p>",
        "id": 314313070,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670356035
    },
    {
        "content": "<p>But I think that is unnecessarily complicated. As you have mentioned that you are fairly new to Lean and DDG, I think the best thing would be to write down some simple structure representing closed(no boundary) triangular surfaces and work with that.</p>",
        "id": 314314693,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670356645
    },
    {
        "content": "<p>I think I'm more interested in properly proving stuff and formalizing the theory than computational stuff. I was also imagining trying to solve every written exercise in the textbook in Lean, if not doing the coding exercises as well.</p>",
        "id": 314336147,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1670364693
    },
    {
        "content": "<p>I would check what is already in mathlib. I'm not very familiar with it so input from someone more familiar with it, in particular algebraic topology, what would be nice. </p>\n<p>What you need is the corresponding chain complex for a given simplicial complex or semi-simplicial set, and it should be a complex of real vector spaces. </p>\n<p>To define discrete differential forms you just take the dual complex and you get \"Stokes theorem\" immediately from the definition of coboundary.</p>\n<p>To get Laplacian, you need to define the dual cochain complex and the map(Hodge star) between the original(called primal) cochain complex and the dual cochain complex. There are few things necessary:</p>\n<ol>\n<li>Usually you do this only for closed triangular surfaces, such a subset of simplicial complexes needs to be defined.</li>\n<li>You need distance information on your original simplicial complex, either vertex embeddings or edge lengths.</li>\n<li>If I remember correctly, the Hodge star is just a diagonal matrix with ratios of primal and dual cells sizes. For example you will need to know all the neighbouring triangles of a vertex.</li>\n</ol>",
        "id": 314445994,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670416841
    },
    {
        "content": "<p>One neat thing would be to show that the discrete differential/coboundary is not doing any approximation.</p>\n<p>First establish the connection 'differential form -&gt; discrete differential form'. </p>\n<p>Take a manifold and draw triangulation on it(probably quite hard to formalize). Discrete differential form is just a cochain i.e. map from a chain to a number. So for a differential form <code>w</code> the corresponding discrete differential form is the map taking a chain and integrating <code>w</code> over it.<br>\nThe fact that the two paths:</p>\n<ol>\n<li>differential form -&gt; apply differential -&gt; map to discrete differential form</li>\n<li>differential form -&gt; map to discrete differential form -&gt; apply discrete differential</li>\n</ol>\n<p>give the same answer falls \"almost\" immediately out of the definition. You need to use normal Stokes theorem, that is why \"almost\".</p>",
        "id": 314451253,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670418429
    },
    {
        "content": "<p>The discrete Hodge star is just an approximation to the smooth counter part and honestly I have very little idea how to make the connection precise. Maybe through finite element method, Whitney forms, ... definitely beyond an undergrad project.</p>",
        "id": 314451953,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670418648
    },
    {
        "content": "<p>Okay, thank you very much!</p>",
        "id": 314598262,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1670471265
    },
    {
        "content": "<p>This isn't discrete differential geometry, but I think I might try and prove the polyhedron formula and that there are five platonic solids. Does anyone have any advice on this?</p>",
        "id": 314825754,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1670566187
    },
    {
        "content": "<p>Take a look at how it was done in one of the HOL systems (I forget which one but there are links on Freek's page)</p>",
        "id": 314832106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670570418
    },
    {
        "content": "<p>I know <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> added <a href=\"https://leanprover-community.github.io/mathlib_docs/number_theory/ADE_inequality.html\">https://leanprover-community.github.io/mathlib_docs/number_theory/ADE_inequality.html</a> at some point, not sure what he had in mind but this is a key part of the \"topological proof\" of the platonic solid classification on wikipedia (<a href=\"https://en.wikipedia.org/wiki/Platonic_solid#Topological_proof\">https://en.wikipedia.org/wiki/Platonic_solid#Topological_proof</a>), which I guess is the one you would do with the polyhedron formula!</p>",
        "id": 314841905,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1670574740
    },
    {
        "content": "<p>Ooh, thanks! I know he's a big part of this project anyway, but I noticed that <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  authored 3 of the 7 posts I found when searching \"streams:public platonic solids\", so I suppose it's possible he had this in mind.</p>",
        "id": 314863026,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1670582048
    },
    {
        "content": "<p>This looks very hard, if you ask me. We're quite far from proving Euler's formula.</p>",
        "id": 314865365,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670582874
    },
    {
        "content": "<p>Euler's formula in full generality pertains to algebraic topology. For polyhedra, there are simplifications (because your paths are nicely behaved), but that's still far from what I would deem \"a nice first project\".</p>",
        "id": 314865580,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670582949
    },
    {
        "content": "<p>In fact I am interested in Euler's formula myself because it is a big part of the Cambridge Graph Theory course, which I'm formalising over at <a href=\"http://github.com/YaelDillies/LeanCamCombi\">http://github.com/YaelDillies/LeanCamCombi</a>.</p>",
        "id": 314865873,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670583038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Maxwell.20Thum.20.28Formalizing.20Discrete.20Differential.20Geometry.3F.29/near/314865580\">said</a>:</p>\n<blockquote>\n<p>Euler's formula in full generality pertains to algebraic topology. For polyhedra, there are simplifications (because your paths are nicely behaved), but that's still far from what I would deem \"a nice first project\".</p>\n</blockquote>\n<p>Okay, thank you for the insight. I think I'm starting to see what you mean.</p>",
        "id": 314873544,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1670585423
    },
    {
        "content": "<p>I suggested in <a href=\"#narrow/stream/116395-maths/topic/convex.20polytopes\">a previous discussion</a> that Platonic solids might be considered a special case of classifying regular polytopes (not necessarily convex) in any Euclidean dimension, and that it might (in line with usual mathlib principles of generality) be appropriate to set up definitions for abstract polytopes before working on flag-transitive realizations thereof in Euclidean space. It seems Yaël has <a href=\"https://github.com/leanprover-community/mathlib/tree/polytopes\">branch#polytopes</a> for abstract polytopes but I don't know its status. And this may well be one of the cases where there's a choice between doing something for a specific case in the mathlib archive and checking the entry off the 100-theorems list, or doing the larger project to get the general definitions and results into mathlib proper.</p>",
        "id": 314883436,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1670588711
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/polytopes\">branch#polytopes</a> has a bunch of material that's ready to be put in mathlib. The status is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/grade_order\">docs#grade_order</a> took the longest time to hit mathlib, so when it finally did I had moved onto something else.</p>",
        "id": 314885190,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670589339
    },
    {
        "content": "<p>It's been on my todo list to empty this branch ever since, but I haven't yet come round to it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 314885369,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670589396
    },
    {
        "content": "<p>Any advice on what to do from here (cleanly)? Anything I could clean up?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">abstr_simpl_complex</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">σ</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">τ</span> <span class=\"bp\">⊆</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">τ</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">}})</span> <span class=\"o\">:</span> <span class=\"n\">abstr_simpl_complex</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">σ</span> <span class=\"n\">hσ</span> <span class=\"n\">τ</span> <span class=\"n\">hτ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hK</span> <span class=\"n\">at</span> <span class=\"n\">hσ</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hσ</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">σ</span><span class=\"o\">⟩,</span>\n  <span class=\"c1\">--repeat {cases hσ},</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 315762267,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1671007397
    },
    {
        "content": "<p>Lean 3 was not really designed to do examples, it's much better at proving abstract theorems. Move to lean 4? Or grit your teeth...</p>",
        "id": 315763643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671007912
    },
    {
        "content": "<p>If you're lucky we have lemmas of the form \"A \\subset {x} iff A = {x} \\or A = \\empty` and analogous for sets with two elements.</p>",
        "id": 315766795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671008891
    },
    {
        "content": "<p>Ok, thanks.</p>",
        "id": 315767919,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1671009252
    },
    {
        "content": "<p>Is there something analogous to <code>cases</code> that will break <code>h\\sigma</code> into 5 cases at once though? I thought <code>rcases</code> might but I guess I still don't have a great handle on it. I get something weird when I try <code>rcases hσ with ⟨σ, rfl⟩,</code> or <code>repeat {cases h\\sigma}</code>.</p>",
        "id": 315768260,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1671009376
    },
    {
        "content": "<p>If your <code>h\\sigma</code> is <code>\\sigma \\in { ... }</code>, then I'd try <code>simp only [set.mem_insert, set.mem_singleton] at h\\sigma</code>, hoping that would turn it into <code>\\sigma = ... \\or ... \\or \\sigma = ...</code> and then <code>obtain rfl|rfl|rfl|rfl|rfl := h\\sigma</code></p>",
        "id": 315771626,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671010361
    },
    {
        "content": "<p><code>simp only [set.mem_insert, set.mem_singleton] at h\\sigma</code> didn't work, but <code>simp at h\\sigma</code> did! Thanks!</p>",
        "id": 315773655,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1671010954
    },
    {
        "content": "<p>Here is how you can do something similar, by letting Lean run a decision procedure. <br>\nTo make sure that a decision procedure exists, I had to change the statement to use finsets only:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.powerset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">abstr_simpl_complex</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">σ</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">τ</span> <span class=\"bp\">⊆</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">τ</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">}})</span> <span class=\"o\">:</span> <span class=\"n\">abstr_simpl_complex</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hK</span><span class=\"o\">,</span> <span class=\"n\">abstr_simpl_complex</span><span class=\"o\">],</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 315788889,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671015514
    },
    {
        "content": "<p>I think after rewriting with <code>hK</code>, it should also be possible to handle this in the decidability framework with <code>set</code>.</p>",
        "id": 315789118,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671015599
    },
    {
        "content": "<p>hmm... maybe you're right. We would need instances like <code>set.decidable_forall_mem_insert</code> and <code>set.decidable.forall_mem_empty</code></p>",
        "id": 315789455,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671015694
    },
    {
        "content": "<p>It at least works out of the box with <code>finset</code>.</p>",
        "id": 315789509,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671015711
    },
    {
        "content": "<p>Oh, wow, <code>dec_trivial</code> seems powerful.</p>",
        "id": 315790794,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1671016133
    },
    {
        "content": "<p>I guess finsets are plenty for my purposes, but I wanted to do things in as full generality as possible since I've heard that's what you're supposed to do in Mathlib.<br>\nOn the other hand, I'm slightly worried that the set definition isn't general enough since mathlib has <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sSet\">docs#sSet</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.simplicial_object\">docs#category_theory.simplicial_object</a>.</p>",
        "id": 315793262,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1671016868
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/geometry.simplicial_complex\">docs#geometry.simplicial_complex</a> and <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> adapted my API to ASC on a branch.</p>",
        "id": 315793583,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671016967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Maxwell.20Thum.20.28Formalizing.20Discrete.20Differential.20Geometry.3F.29/near/315793583\">said</a>:</p>\n<blockquote>\n<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/geometry.simplicial_complex\">docs#geometry.simplicial_complex</a> and <span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> adapted my API to ASC on a branch.</p>\n</blockquote>\n<p>Would this be on github?</p>",
        "id": 315795022,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1671017321
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/shing-asc\">branch#shing-asc</a>. I don't know whether he has more somewhere else.</p>",
        "id": 315796664,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671017812
    }
]