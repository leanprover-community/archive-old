[
    {
        "content": "<p>What does putting @ before something do?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine_struct</span> <span class=\"o\">{</span>\n    <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n    <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n    <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">has_neg.neg</span><span class=\"o\">,</span>\n    <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"n\">has_sub.sub</span><span class=\"o\">,</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n    <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">nsmul_rec</span> <span class=\"n\">_</span> <span class=\"o\">⟨(</span><span class=\"mi\">0</span><span class=\"o\">)⟩</span> <span class=\"o\">⟨(</span><span class=\"bp\">+</span><span class=\"o\">)⟩,</span>\n    <span class=\"n\">npow</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">npow_rec</span> <span class=\"n\">_</span> <span class=\"o\">⟨(</span><span class=\"mi\">1</span><span class=\"o\">)⟩</span> <span class=\"o\">⟨(</span><span class=\"bp\">*</span><span class=\"o\">)⟩,</span>\n    <span class=\"n\">gsmul</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">gsmul_rec</span> <span class=\"n\">_</span> <span class=\"o\">⟨(</span><span class=\"mi\">0</span><span class=\"o\">)⟩</span> <span class=\"o\">⟨(</span><span class=\"bp\">+</span><span class=\"o\">)⟩</span> <span class=\"o\">⟨</span><span class=\"n\">has_neg.neg</span><span class=\"o\">⟩</span>\n  <span class=\"o\">}</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>When I tried messing around with it earlier it seemed to change it somehow but I don't really understand what it did still. So I'm wondering what the difference and the point of it is.</p>",
        "id": 236546537,
        "sender_full_name": "Anh Luong",
        "timestamp": 1619630806
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span>   <span class=\"c1\">-- foo : ?M_1 → ?M_1</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">foo</span>  <span class=\"c1\">-- foo : Π {α : Type u_1}, α → α</span>\n\n<span class=\"c1\">-- `@` makes the {} arguments explicit</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>   <span class=\"c1\">-- foo 1 : ℕ</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>   <span class=\"c1\">-- foo 1 : ℕ</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">ℕ</span>        <span class=\"c1\">-- foo : ℕ → ℕ</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"c1\">-- #check @foo ℕ  -- foo : ℕ → ℕ</span>\n</code></pre></div>",
        "id": 236547583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619631241
    },
    {
        "content": "<p>See also the end of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\">Section 2.9 in TPiL</a>.</p>",
        "id": 236547726,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619631278
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  and <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>! I should read through that book sometime.</p>",
        "id": 236548502,
        "sender_full_name": "Anh Luong",
        "timestamp": 1619631601
    },
    {
        "content": "<p>I just learnt something new about <code>@</code> - it's \"reset\" by <code>(... : _)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">many</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- argument names here match the names in `many` above</span>\n<span class=\"c1\">-- the obvious ways to call it</span>\n<span class=\"k\">#check</span> <span class=\"n\">many</span> <span class=\"n\">c</span> <span class=\"n\">f</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">many</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span>\n<span class=\"c1\">-- a surprising way!</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">many</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 236549297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619631923
    },
    {
        "content": "<p>Puzzle: is there a way of writing <code>@many a _ c d _ f</code> without having to pass either underscore?</p>",
        "id": 236549430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619631964
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">many</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">this</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 236607087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619661065
    },
    {
        "content": "<p>I think I prefer the lean 4 solution :-)</p>",
        "id": 236630127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619680925
    },
    {
        "content": "<p>Would it make sense to allow <code>@(...)</code> as syntax, rather than requiring <code>@</code> to precede an identifier?</p>",
        "id": 236630639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619681200
    },
    {
        "content": "<p><code>(@((@many a : _) c) d : _) f</code> would then work</p>",
        "id": 236630718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619681272
    },
    {
        "content": "<p>I mean, on the one hand you probably don't want to have to write that</p>",
        "id": 236631024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619681448
    },
    {
        "content": "<p>But on the other, restricting the operator to only work on identifiers feels like allowing <code>-x</code> but forbidding   <code>-(sin x)</code></p>",
        "id": 236631092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619681511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20does.20.40.20work.3F/near/236630639\">said</a>:</p>\n<blockquote>\n<p>Would it make sense to allow <code>@(...)</code> as syntax, rather than requiring <code>@</code> to precede an identifier?</p>\n</blockquote>\n<p>Yes, I've wanted that for years and lean 4 made it happen</p>",
        "id": 236654020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619693982
    },
    {
        "content": "<p>In fact, the lean 3 pretty printer actually gets confused when printing expressions like that one because it requires <code>@(...)</code> but no such syntax exists</p>",
        "id": 236654250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619694074
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">this</span> <span class=\"mi\">0</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span> <span class=\"c1\">-- def foo : ℕ := λ {x : ℕ}, x       &lt;- wrong!</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span> <span class=\"c1\">-- def foo : ℕ := @(λ {x : ℕ}, x) 0  &lt;- can't type!</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 236654509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619694209
    },
    {
        "content": "<p>In the documentation data.finset.basic, I saw <a href=\"/user_uploads/3121/13UBCzFGFLJNpSv14Ji0aAf-/image.png\">image.png</a> <br>\nWhat does <code>@[simp]</code> mean here? In particular, what is the function of <code>@</code>here?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/13UBCzFGFLJNpSv14Ji0aAf-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/13UBCzFGFLJNpSv14Ji0aAf-/image.png\"></a></div>",
        "id": 240146013,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621922972
    },
    {
        "content": "<p>The <code>@</code>here has a different meaning than the <code>@</code> previously discussed in this thread. <br>\nThis usage is for tagging theorems, definitions, inductives etc. with attributes. <br>\nHere <code>finset.val_inj</code> is tagged with the attribute <code>simp</code>, making it a simplification lemma, i.e. a lemma which will now be tried by the <code>simp</code> tactic.</p>",
        "id": 240146515,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1621923496
    },
    {
        "content": "<p>You can find more information on attributes <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html\">here</a></p>",
        "id": 240146656,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1621923682
    }
]