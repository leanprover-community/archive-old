[
    {
        "content": "<p>Can I somehow define a field of a structure to have particular type class(es)?</p>",
        "id": 219737263,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607821780
    },
    {
        "content": "<p>Can you give an example of what you want? I'm not sure what you mean</p>",
        "id": 219739178,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607825354
    },
    {
        "content": "<p>Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n    <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">t.b</span> <span class=\"bp\">=</span> <span class=\"n\">t.b</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span>\n</code></pre></div>\n<p>This code fails to compile and we need to explicitly decorate with type class <code>decidable_eq</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n    <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">t.a</span><span class=\"o\">]:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">t.b</span> <span class=\"bp\">=</span> <span class=\"n\">t.b</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span>\n</code></pre></div>\n<p>This is a lot of boilerplate if you have a lot of functions and you need to decorate all of them. What I want is something like this that decorates the field <code>a</code> as a type with <code>decidable_eq</code> class globally:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n    <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">t.b</span> <span class=\"bp\">=</span> <span class=\"n\">t.b</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span>\n</code></pre></div>\n<p>However this doesn't compile, so what's the correct way to do it?</p>",
        "id": 219760456,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607864090
    },
    {
        "content": "<p>Add the missing instance after the definition of the structure</p>",
        "id": 219765131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607871756
    },
    {
        "content": "<p>Unrelated -- it's hard to imagine the unifier ever being able to figure out t -- maybe round brackets would be better</p>",
        "id": 219765160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607871810
    },
    {
        "content": "<p>That works!</p>",
        "id": 219780230,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607891995
    },
    {
        "content": "<p>Shorter to write <code>attribute [instance] T.h</code>, which I think also works</p>",
        "id": 219780998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607893129
    }
]