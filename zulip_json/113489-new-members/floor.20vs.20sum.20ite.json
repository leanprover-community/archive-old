[
    {
        "content": "<p>Help with this please?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"bp\">⌊</span><span class=\"n\">x</span><span class=\"bp\">⌋₊</span><span class=\"o\">):</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"bp\">⌊</span><span class=\"n\">x</span><span class=\"bp\">⌋₊</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span>  <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>That is, the number of multiples of <code>d</code> up to <code>x</code> (assuming <code>d≤x</code>) is the floor of <code>x/d</code>...? Thank you!</p>",
        "id": 270567769,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1643902526
    },
    {
        "content": "<p>(The assumption <code>d≤x</code> isn't necessary, as then both sides are zero... But in case it helps...)</p>",
        "id": 270568621,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1643902833
    },
    {
        "content": "<p>What's the maths proof?</p>",
        "id": 270569322,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1643903100
    },
    {
        "content": "<p>Well, that's the problem I'm having. The math proof is \"obvious\"... How many multiples of <code>d</code> are there up to <code>x</code>? Well, it's just <code>x/d</code>... But Lean won't accept \"duh\" as a proof. Do I need to set up a bijection between the integers less than <code>x/d</code> and multiples of <code>d</code> up to <code>x</code> or some god-awful nonsense like that? Or is there a slicker way?</p>",
        "id": 270569744,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1643903256
    },
    {
        "content": "<p>What are the imports/open_locales?</p>",
        "id": 270570733,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643903585
    },
    {
        "content": "<p>I'd probably try to reduce it to a statement that doesn't include reals - does that work?</p>",
        "id": 270570756,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1643903595
    },
    {
        "content": "<p>This is surely overkill, but here's the full list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.integrals</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.arithmetic_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.function.floor</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.integral_eq_improper</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">nnreal</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span> <span class=\"n\">arithmetic_function</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">asymptotics</span> <span class=\"n\">real</span> <span class=\"n\">set</span>\n</code></pre></div>",
        "id": 270570975,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1643903681
    },
    {
        "content": "<p>Sure, make <code>x</code> a natural; can you get it to work then?</p>",
        "id": 270571086,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1643903724
    },
    {
        "content": "<p>I think this is nearly there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.intervals</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_lemma</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset.filter</span> <span class=\"o\">(</span><span class=\"n\">has_dvd.dvd</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">k.succ</span> <span class=\"bp\">=</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">k</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">k.succ</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_union</span><span class=\"o\">,</span> <span class=\"n\">finset.filter_singleton</span><span class=\"o\">],</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">k.succ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">],</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"bp\">⌊</span><span class=\"n\">x</span><span class=\"bp\">⌋₊</span><span class=\"o\">):</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"bp\">⌊</span><span class=\"n\">x</span><span class=\"bp\">⌋₊</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span>  <span class=\"bp\">⌊</span><span class=\"n\">x</span><span class=\"bp\">⌋₊</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.sum_ite</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">my_lemma</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>there's some lemmas about <code>nat.div</code> and division and <code>succ</code> that need to be added, but apart from that I think it should work...</p>",
        "id": 270571507,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643903875
    },
    {
        "content": "<p>(precisely that <code>n + 1 / k = n / k + ite (k | n + 1) 1 0</code>)</p>",
        "id": 270571653,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643903910
    },
    {
        "content": "<p>I'm also not sure if your original floor that you wrote is right, but probably it is</p>",
        "id": 270571722,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643903939
    },
    {
        "content": "<p>Great, thanks! I'll try to get that to work...</p>",
        "id": 270572498,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1643904171
    },
    {
        "content": "<p>ahh, I was looking in the wrong order - the lemma you'll want is <code>nat.succ_div</code></p>",
        "id": 270572775,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643904279
    },
    {
        "content": "<p>You don't need the floor function in <code>my_lemma</code>? Is <code>n/d</code> defined to be the floor or something? Good to know...</p>",
        "id": 270573153,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1643904415
    },
    {
        "content": "<p>ℕ-division is truncating division, yea</p>",
        "id": 270573394,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643904496
    }
]