[
    {
        "content": "<p>I'm beginning to (try to) build a small library of tactics for a project I'm working on, but I'm still learning the ins and outs of translating interactive proofs to single-tactic proofs, although the tutorial on the community site was very helpful! I was hoping I can use this topic for asking basic questions I find myself with, and thought it would be best to start in this stream, but if I should move  to the tactic stream then apologies.</p>\n<p>First, I realize that using <code>simp</code> in the middle of a proof is discouraged, but is there a simple way to invoke <code>simp</code> in a tactic? The tactic source files have a bunch of simp-related stuff but I'm still a bit too green to really know what they are doing.</p>",
        "id": 211551452,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1601327688
    },
    {
        "content": "<p>If I want to run simp in the middle of a tactic proof then I used to run it, copy paste the output to X, delete simp and replace with <code>suffices : X, by simpa</code></p>",
        "id": 211551764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601327896
    },
    {
        "content": "<p>But now I run squeeze_simp instead and then click on the output</p>",
        "id": 211551804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601327921
    },
    {
        "content": "<p>Oh I see you're asking something else maybe. Why not just run simp in the middle of your tactic? Tidy does this and I think norm_num too</p>",
        "id": 211551878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601327979
    },
    {
        "content": "<p>I couldn't seem to be able invoke <code>simp</code> in a meta-def tactic like in an interactive proof, but i can do so with <code>tidy</code>, thanks Kevin!</p>",
        "id": 211556489,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1601330724
    },
    {
        "content": "<p>You can use <code> `[simp]</code> to create a <code>tactic unit</code> object which calls the interactive <code>simp</code> tactic</p>",
        "id": 211556922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601331013
    },
    {
        "content": "<p>i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">bla</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 211556946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601331031
    },
    {
        "content": "<p>ah, good to know.</p>",
        "id": 211557028,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1601331088
    },
    {
        "content": "<p>you can also call <code>tactic.interactive.simp</code> directly, or one of the more basic non-interactive tactics used by simp, but then you have to get all the arguments right which is a bit of a pain</p>",
        "id": 211557049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601331106
    },
    {
        "content": "<p>Now trying something a  bit more involved.  I have a basic relation between a predicate and a vector of predicates I'm trying to reason about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">justified</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Ps</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">Xs</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Ps.nth</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n<span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Xs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>\n\n<p>A trivial example of its use is given here, simply splitting up the definition of <code>nat.prime</code> into simpler predicates </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n<span class=\"n\">justified</span>\n<span class=\"n\">nat.prime</span>\n<span class=\"o\">⟨</span> <span class=\"o\">[(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)],</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">:=</span>\n    <span class=\"n\">H</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n    <span class=\"n\">H</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">):=</span>\n    <span class=\"n\">H</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">omega</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>  <span class=\"c1\">-- omega for now just to shorten proof</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>what I am trying to do is to automate the above proof.  At the moment, I'm trying to tactic-ify the <code>have H1 : n ≠ 0:</code> line. I tried applying some of the techniques from the Tactic writing tutorial, something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mytac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">justified</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n    <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">get_unused_name</span> <span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">H</span> <span class=\"bp\">←</span> <span class=\"n\">get_unused_name</span> <span class=\"bp\">`</span><span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">expr_n</span> <span class=\"bp\">←</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">],</span>\n    <span class=\"n\">expr_H</span> <span class=\"bp\">←</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">H1</span> <span class=\"bp\">←</span> <span class=\"n\">get_unused_name</span> <span class=\"bp\">`</span><span class=\"n\">H1</span><span class=\"o\">,</span>\n    <span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span> <span class=\"n\">H1</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ne</span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">expr_H</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩),</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>\n\n<p>I'm having trouble using the constant <code>0</code> in the second last line of the tactic. I think I'm missing some knowledge of handling names and the backtick-notation. Any pointers?</p>",
        "id": 211623066,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1601387396
    },
    {
        "content": "<p>I'm trying to get some I/O from a tactic, specifically one that iterates/repeats a tactic. Given a simple example like the following, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mytactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">split</span><span class=\"o\">}],</span>\n  <span class=\"o\">(</span><span class=\"n\">iterate</span>\n  <span class=\"bp\">`</span><span class=\"o\">[{</span><span class=\"n\">assumption</span><span class=\"o\">}])</span>\n  <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">fail</span> <span class=\"s2\">\"this  failed\"</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>\n\n<p>I'd like to modify the tactic such that if <code>iterate [assumption]</code> clears all goals, it will <code>tactic.trace</code> something like <code>success!</code>, while if there are goals left after the <code>iterate</code> it will <code>tactic.trace</code> <code>this  failed</code>. How could I go about doing this?</p>",
        "id": 211994207,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1601600601
    },
    {
        "content": "<p>There is a <code>done</code> tactic, which fails if there are any goals.</p>",
        "id": 212001773,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601610271
    },
    {
        "content": "<p>So <code>(done &gt;&gt; X) &lt;|&gt; Y</code> branches on whether you've succeeded or not</p>",
        "id": 212001784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601610305
    },
    {
        "content": "<p>Also, if you are not familiar with it, <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">Tutorial: tactic writing in Lean</a> is a pretty good resource which discusses some of this stuff.</p>",
        "id": 212062096,
        "sender_full_name": "Jason Rute",
        "timestamp": 1601638213
    }
]