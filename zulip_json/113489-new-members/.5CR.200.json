[
    {
        "content": "<p>Apologies for a possibly dumb question. I understand that literals like 0 default to nat if not otherwise specified. So how do I specify, say, that I want something like a \"<a href=\"http://real.zero\">real.zero</a>\", in the same way that I can refer to <a href=\"http://nat.zero\">nat.zero</a>.</p>\n<p>Please compare:</p>\n<p>theorem nat0_plus_0 : <a href=\"http://nat.zero\">nat.zero</a> + <a href=\"http://nat.zero\">nat.zero</a> = <a href=\"http://nat.zero\">nat.zero</a> := rfl    -- this type checks</p>\n<p>theorem real0_plus_0 : <a href=\"http://real.zero\">real.zero</a> + <a href=\"http://real.zero\">real.zero</a> = <a href=\"http://real.zero\">real.zero</a> := sorry   --this doesn't know what I mean at all</p>\n<p>Further, if I do: </p>\n<p>#check nat0_plus_0  it gives me:   nat0_plus_0 : 0 + 0 = 0, and seems to have lost the information that these are nats.</p>\n<p>How can I pin all this precisely?</p>",
        "id": 270759638,
        "sender_full_name": "Robert Watson",
        "timestamp": 1644001902
    },
    {
        "content": "<p>You can type <code>(0 : ℝ)</code>.</p>",
        "id": 270760125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644002129
    },
    {
        "content": "<p>You can use type ascriptions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">real0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where you put the intended type after the term in brackets.</p>\n<p>The information isn't lost, its just not printed by default (to save your eyes!) if you add <code>set_option pp.all true</code> before your lemmas you'll see pleanty of references  to nat</p>",
        "id": 270760160,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644002145
    },
    {
        "content": "<p>Also, you can use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to format your code on zulip</p>",
        "id": 270760165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644002147
    },
    {
        "content": "<p>(I've been thinking about making a patch for Lean for an option to pretty print type ascriptions for numerals, since I've been running into confusing cases like <code>x ^ 2</code> and <code>x ^ 2</code> not being the same because the first <code>2</code> is real and the second <code>2</code> is a natural.)</p>",
        "id": 270760703,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644002434
    },
    {
        "content": "<p>Awesome. Thanks.</p>",
        "id": 270764834,
        "sender_full_name": "Robert Watson",
        "timestamp": 1644004606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.5CR.200/near/270760703\">said</a>:</p>\n<blockquote>\n<p>(I've been thinking about making a patch for Lean for an option to pretty print type ascriptions for numerals, since I've been running into confusing cases like <code>x ^ 2</code> and <code>x ^ 2</code> not being the same because the first <code>2</code> is real and the second <code>2</code> is a natural.)</p>\n</blockquote>\n<p>if you do have time for this, I'd certainly be in favour of this change!</p>",
        "id": 270779931,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1644012702
    },
    {
        "content": "<p>Here's that patch: <a href=\"https://github.com/leanprover-community/lean/pull/691\">lean#691</a></p>\n<p>With it, you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pp_numeral_type</span><span class=\"o\">]</span> <span class=\"n\">real</span> <span class=\"n\">fin</span>\n</code></pre></div>\n<p>to enable it for specific types or do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.numeral_types</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>to enable it indiscriminately.</p>",
        "id": 273762120,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646202814
    },
    {
        "content": "<p>Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pp_numeral_type</span><span class=\"o\">]</span> <span class=\"n\">fin</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- ⊢ (2 : fin 5) + (1 : fin 5) = (3 : fin 5)</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273762233,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646202931
    }
]