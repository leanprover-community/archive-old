[
    {
        "content": "<p>Hi guys! I wanted to understand the code of high level tactics such as linarith, simp etc. at a very basic level. I am facing a lot of difficulty as I am new to functional paradigm and there seems to be a lot of dependencies (or various functions) pertaining to a single tactic. Can someone please guide me through this? by taking example of a linarith tactic?</p>",
        "id": 257310705,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634100840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439607\">@Ayush Agrawal</span>, have you read <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/linarith/frontend.html\">https://leanprover-community.github.io/mathlib_docs/tactic/linarith/frontend.html</a> yet?</p>",
        "id": 257311073,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634101182
    },
    {
        "content": "<p>Oh thanks for the resource! I didn't read this.</p>",
        "id": 257311212,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634101245
    },
    {
        "content": "<p>You accidentally picked one of the better documented tactics. :-) If you want to know what <code>linarith</code> is actually doing (rather than just how it is implemented) you'll need to read up on Fourier-Motzkin elimination. But there are many good sources. (From memory wikipedia is okay. :-)</p>",
        "id": 257314019,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634103732
    },
    {
        "content": "<p>I saw that the <code>linarith</code> basically looks for the 0 &lt; 0 contradiction for observing the unsatisfiability.  Is it the case that it is not able to check for the unsatisfiability when all the inequalities (including the one formed by negation ) are <code>\\&lt; =</code> ? Because I think that if it does not contain atleast one inequality as <code>&lt;</code> , it cannot conclude that the linear combination of these hypotheses ( search for 0) should be <code>&lt; 0</code>. I hope I was able to explain my doubt, please let me know if I am wrong..</p>",
        "id": 257570368,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634231224
    },
    {
        "content": "<p>Well, it can generate some. Typically, you get <code>a &lt; b</code> from <code>a + 1 ≤ b</code></p>",
        "id": 257570682,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634231353
    },
    {
        "content": "<p>And if it not able to generate such kind? Is there some other treatment it uses?</p>",
        "id": 257571177,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634231549
    },
    {
        "content": "<p>If it can't generate any contradiction, it fails. I don't know much more unfortunately... but you should really look up Fourier-Motzkin.</p>",
        "id": 257573228,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634232414
    },
    {
        "content": "<p>I was reading the mathlib documentation of the <code>linarith</code> tactic <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/linarith/elimination.html\">https://leanprover-community.github.io/mathlib_docs/tactic/linarith/elimination.html</a>  (after understanding the FM elimination). Although I am not understanding a lot of stuff going on (which I'll post gradually), I wanted to understand this line - \"<strong>Any comparison whose history is not minimal is redundant, and need not be included in the new set of comparisons</strong>. elimed_ge : ℕ is a natural number such that all variables with index ≥ elimed_ge have been removed from the system.\" mentioned under a meta function <code>meta def linarith.pcomp.maybe_minimal (c : linarith.pcomp) (elimed_ge : ℕ) : bool</code>. I think this is related to some maths concept I am not familiar with. Can anyone please help in this?</p>",
        "id": 257819940,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634379096
    },
    {
        "content": "<p>The <code>maybe_minimal</code> function references theorem 7 of  <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.51.493&amp;rep=rep1&amp;type=pdf\">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.51.493&amp;rep=rep1&amp;type=pdf</a> ; I would guess that the \"minimal history\" terminology is coming from that paper</p>",
        "id": 257822133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634381422
    },
    {
        "content": "<p>Although you should read the paper (and possibly its citations...) to see the whole story, I believe the basic idea is that a non-minimal inequality is dominated by a combination of minimal inequalities, so it can be removed from the system without sacrificing completeness. From an implementation standpoint it's just a heuristic, and dropping hypotheses is easy to do and obviously correct (which is the only thing that matters for a tactic implementation, completeness is just icing on the cake)</p>",
        "id": 257822513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634381853
    },
    {
        "content": "<p>I see, thanks for pointing out the paper <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> . what do u mean by non-minimal inequality ( &lt; , &lt;= ?)</p>",
        "id": 257822791,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634382088
    },
    {
        "content": "<p>I think it is something like, if you know <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">a \\le 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">b \\le 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>≤</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">a + b \\le 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span> is not helpful</p>",
        "id": 257823905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634383214
    },
    {
        "content": "<p>But the terminology is from the paper. There are lots of examples in the paper that talk about what it means for a constraint to be minimal, and I don't have that much insight into the notion</p>",
        "id": 257824053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634383356
    },
    {
        "content": "<p>Thanks Mario! I'll look into it :)</p>",
        "id": 257825172,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634384499
    }
]