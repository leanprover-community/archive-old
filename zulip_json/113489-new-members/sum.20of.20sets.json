[
    {
        "content": "<p>I am trying to understand why this fails and how to fix it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">set_sum</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 204751852,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595466911
    },
    {
        "content": "<p>It fails because lean's set notation doesn't support this, specifically the thing left of the <code>|</code> must just be an identifier like <code>x</code>.<br>\nThis definition already exists in <code>algebra/pointwise.lean</code></p>",
        "id": 204752107,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595467265
    },
    {
        "content": "<p>The definition there is as:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">image2</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 204752175,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595467342
    },
    {
        "content": "<p>And image2 is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">image2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 204752179,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595467359
    },
    {
        "content": "<p>There were some interesting related threads to do with changing this notation earlier today btw, <a href=\"#narrow/stream/144837-PR-reviews/topic/lean.23402.3A.20set.20builder.20notation/near/204661344\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/lean.23402.3A.20set.20builder.20notation/near/204661344</a></p>",
        "id": 204752206,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595467439
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 204752347,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595467620
    },
    {
        "content": "<p>So I need to do this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">set_sum</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 204752598,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595467979
    },
    {
        "content": "<p>Yeah that looks like it should work, does it?</p>",
        "id": 204752715,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595468108
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 204752783,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595468183
    },
    {
        "content": "<p>Does the existing definition allow for writing something like X + Y?</p>",
        "id": 204752868,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595468303
    },
    {
        "content": "<p>I tried that, but no luck. Not sure if I have it right though.</p>",
        "id": 204752881,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595468341
    },
    {
        "content": "<p>For example:<br>\ndef set_sum : set ℝ → set ℝ → set ℝ<br>\n| (X : set ℝ) (Y : set ℝ) := X + Y</p>",
        "id": 204752891,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595468366
    },
    {
        "content": "<p>Not sure how to read the definition exactly.</p>",
        "id": 204752906,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595468401
    },
    {
        "content": "<p>Yes, because it is registered as a has_add instance. It works for me, are you importing <code>algebra.pointwise</code></p>",
        "id": 204752950,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595468411
    },
    {
        "content": "<p>Do you have it imported?</p>",
        "id": 204752951,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595468412
    },
    {
        "content": "<p>Ah. Right. Sorry.</p>",
        "id": 204752959,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595468430
    },
    {
        "content": "<p>Hmm. No, this does not work for me.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pointwise</span>\n\n<span class=\"n\">def</span> <span class=\"n\">set_sum</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">Y</span>\n</code></pre></div>",
        "id": 204753064,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595468574
    },
    {
        "content": "<p>I get:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">set_sum</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204753128,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595468648
    },
    {
        "content": "<p>What version of mathlib are you using? Try <code>leanproject up</code> to get a more recent version.</p>",
        "id": 204753507,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595469212
    },
    {
        "content": "<p>Also note that you can get nice syntax highlighting on Zulip using <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>.</p>",
        "id": 204753516,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595469233
    },
    {
        "content": "<p>I'm not sure I have the command <code>leanproject</code>.</p>",
        "id": 204753656,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595469409
    },
    {
        "content": "<p>The community Lean tooling has been revamped in the past few months: try going through the <a href=\"https://leanprover-community.github.io/get_started.html#regular-install\">#install</a> instructions for your OS again. There's even tutorial videos!</p>",
        "id": 204753729,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595469545
    },
    {
        "content": "<p>It has been a while since I used it. I'll give it a try. Thank you.</p>",
        "id": 204753827,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1595469665
    }
]