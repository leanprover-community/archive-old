[
    {
        "content": "<p>What's wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">semialgebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">semialgebra'</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">semialgebra'</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s1</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">s2</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∩</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_difference</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">finset.bUnion</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- type mismatch at application</span>\n<span class=\"c1\">--   has_sdiff.sdiff s</span>\n<span class=\"c1\">-- term</span>\n<span class=\"c1\">--   s</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   set (set α) : Type ?</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   (set α → finset ?m_1) → finset ?m_1 : Type (max ? ?)</span>\n</code></pre></div>",
        "id": 230585444,
        "sender_full_name": "Iocta",
        "timestamp": 1615926478
    },
    {
        "content": "<p>I think your definition has too many levels of nested sets,  <code>set X</code> is the power set <code>set (set X)</code> is subsets of the power set but <code>set (set X)) \\to Prop</code> is another condition on those, so a further power set.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">semialgebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_semialgebra</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">in_semialgebra</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∩</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_difference</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">s'</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s'</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">sUnion</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>looks more like what I read on <a href=\"https://en.wikibooks.org/wiki/Measure_Theory/Basic_Structures_And_Definitions/Semialgebras,_Algebras_and_%CF%83-algebras\">https://en.wikibooks.org/wiki/Measure_Theory/Basic_Structures_And_Definitions/Semialgebras,_Algebras_and_%CF%83-algebras</a> if that's what youre trying.</p>",
        "id": 230588040,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1615927500
    },
    {
        "content": "<p>I had to cast the finset to a set to take the set <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.sUnion\">docs#set.sUnion</a> and also deleted the repeated introduction of alpha.</p>",
        "id": 230588120,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1615927538
    },
    {
        "content": "<p>I guess that page also includes a pairwise disjoint condition which is missing from what I wrote</p>",
        "id": 230589174,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1615927946
    },
    {
        "content": "<p>I see. That <code>in_</code> naming scheme is very clarifying. I was confused thinking the first component's argument was the semialgebra instead of a member of it.</p>",
        "id": 230591214,
        "sender_full_name": "Iocta",
        "timestamp": 1615928724
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/cVZ6MAxOJy0zVmrTiVWYqC3u/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cVZ6MAxOJy0zVmrTiVWYqC3u/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/cVZ6MAxOJy0zVmrTiVWYqC3u/image.png\"></a></div><p>is the \"disjoint\" condition actually doing any work or can I just delete it?</p>",
        "id": 230599628,
        "sender_full_name": "Iocta",
        "timestamp": 1615932366
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">semialgebra'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_semialgebra</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">in_semialgebra</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∩</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">sUnion</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230599893,
        "sender_full_name": "Iocta",
        "timestamp": 1615932457
    },
    {
        "content": "<p>(Also, why is that definition so different from the one on wikibooks)</p>",
        "id": 230601067,
        "sender_full_name": "Iocta",
        "timestamp": 1615932785
    },
    {
        "content": "<p>I thought it was gonna ask me to show that empty is <em>in</em> <code>I</code>, but it's asking for nullset <em>equals</em> <code>I</code>. I guess I've made the same mistake again, but I don't see how.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.measure_space</span> <span class=\"n\">classical</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">semialgebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_semialgebra</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">in_semialgebra</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∩</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">sUnion</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">semialgebra</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">in_semialgebra</span> <span class=\"o\">:=</span> <span class=\"n\">heq</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_empty</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_inter</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_compl</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">-- don't know how to synthesize placeholder</span>\n<span class=\"c1\">-- context:</span>\n<span class=\"c1\">-- I : {s // ∃ (a b : ℝ), s = Icc a b}</span>\n<span class=\"c1\">-- ⊢ I == ∅</span>\n</code></pre></div>",
        "id": 230782024,
        "sender_full_name": "Iocta",
        "timestamp": 1616021191
    },
    {
        "content": "<p>Are you sure you want <code>heq I</code> as your <code>in_semi_algebra</code>?</p>",
        "id": 230783343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616021945
    },
    {
        "content": "<p>It's very rare to want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/heq\">docs#heq</a> unless you're really running into dependently-typed trouble</p>",
        "id": 230783391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616021981
    },
    {
        "content": "<p>Is it possible you wanted this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">semialgebra</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- the semialgebra contains closed intervals of ℝ</span>\n  <span class=\"n\">in_semialgebra</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_empty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">semialgebra_inter</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_compl</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230783605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616022080
    },
    {
        "content": "<p>That looks more right, I'll try that</p>",
        "id": 230783872,
        "sender_full_name": "Iocta",
        "timestamp": 1616022231
    },
    {
        "content": "<p>I guess that's actually asking me to show <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">[0,0] = \\emptyset</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span> which probably isn't true. So maybe my statement of the problem is broken in the first place.</p>",
        "id": 230784060,
        "sender_full_name": "Iocta",
        "timestamp": 1616022356
    },
    {
        "content": "<p>Oh yeah, I forgot what closed meant!</p>",
        "id": 230788168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616025097
    },
    {
        "content": "<p>What is this error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.measure_space</span> <span class=\"n\">classical</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">semialgebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_semialgebra</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">in_semialgebra</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∩</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">sUnion</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">semialgebra</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">in_semialgebra</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"n\">semialgebra_empty</span> <span class=\"o\">:=</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_inter</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">empty_inter</span><span class=\"o\">],</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">empty_inter</span><span class=\"o\">],</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">inter_empty</span><span class=\"o\">],</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">right</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">a1</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">b1</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">a2</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">b2</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">use</span> <span class=\"n\">a1</span> <span class=\"bp\">⊔</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n          <span class=\"n\">use</span> <span class=\"n\">b1</span> <span class=\"bp\">⊓</span> <span class=\"n\">b2</span><span class=\"o\">,</span>\n          <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">Ioc_inter_Ioc</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">classical.em</span> <span class=\"o\">(</span><span class=\"n\">a2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b2</span><span class=\"o\">)),</span>\n          <span class=\"c1\">-- invalid apply tactic, failed to unify</span>\n          <span class=\"c1\">--   a2 &lt; b2</span>\n          <span class=\"c1\">-- with</span>\n          <span class=\"c1\">--   a2 &lt; b2 ∨ ¬a2 &lt; b2</span>\n          <span class=\"c1\">-- state:</span>\n          <span class=\"c1\">-- s1 s2 : set ℝ,</span>\n          <span class=\"c1\">-- a1 b1 : ℝ,</span>\n          <span class=\"c1\">-- h1 : a1 &lt; b1 → s1 = Ioc a1 b1,</span>\n          <span class=\"c1\">-- a2 b2 : ℝ,</span>\n          <span class=\"c1\">-- h2 : a2 &lt; b2 → s2 = Ioc a2 b2</span>\n          <span class=\"c1\">-- ⊢ a2 &lt; b2</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n          <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_compl</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230925159,
        "sender_full_name": "Iocta",
        "timestamp": 1616096173
    },
    {
        "content": "<p>Do you understand what the <code>apply</code> tactic does? It changes a goal of the form <code>Q</code> to a goal of the form <code>P</code> if you <code>apply f : P -&gt; Q</code>.</p>",
        "id": 230925264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616096225
    },
    {
        "content": "<p>Where is your function of the form P -&gt; Q which you're applying?</p>",
        "id": 230925298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616096240
    },
    {
        "content": "<p>It's in h2</p>",
        "id": 230926876,
        "sender_full_name": "Iocta",
        "timestamp": 1616096947
    },
    {
        "content": "<p>if <code>h2</code> is of the form <code>P -&gt; Q</code> then you should apply <code>h2</code> instead, and it will work as long as your goal is <code>Q</code>. You are applying a theorem of the form \"P or Q is true\" and this isn't a function so you can't apply it.</p>",
        "id": 230926977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616096999
    },
    {
        "content": "<p>Er that's not right. h2 is P -&gt; Q and I have P in goal. I think I should be able to say P is either true or it isn't. In case it's true, that's sufficient; in case it isn't I'm gonna try to find a contradiction.</p>",
        "id": 230927395,
        "sender_full_name": "Iocta",
        "timestamp": 1616097171
    },
    {
        "content": "<p>Sure you can do that but <code>apply</code> doesn't do that. Maybe you want the <code>by_cases</code> tactic?</p>",
        "id": 230927473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616097207
    },
    {
        "content": "<p>Oh if <code>P</code> is your goal then maybe <code>by_contra</code> is a quicker way to get where you want to go</p>",
        "id": 230927583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616097247
    },
    {
        "content": "<p>Aah -- you use <code>cases</code> to split <code>P or Q</code> into a <code>P</code> line and a <code>Q</code> line so maybe another approach is to just change your <code>apply</code> to a <code>cases</code>. But <code>by_contra</code> will get you there more quickly.</p>",
        "id": 230927672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616097296
    },
    {
        "content": "<p>That goal looks untrue to me</p>",
        "id": 230928193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616097514
    },
    {
        "content": "<p><code>∃ (a b : ℝ),  (a &lt; b → s = (Ioc a b))</code> should surely be \"a &lt; b and s = ...\". Otherwise such a and b always exist, just take a=1 and b=0.</p>",
        "id": 230928428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616097604
    },
    {
        "content": "<p>Like this? <code>in_semialgebra := λ s, s = ∅ ∨ ∀ (a b : ℝ),  (a &lt; b ∧ s = (Ioc a b)),</code></p>",
        "id": 230928998,
        "sender_full_name": "Iocta",
        "timestamp": 1616097837
    },
    {
        "content": "<p>That looks right, but why not just drop a &lt; b and the s = emptyset as well, because when a&gt;=b <code>Ioc a b</code> is just the empty set anyway.</p>",
        "id": 230929184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616097923
    },
    {
        "content": "<p>Oh that's much nicer</p>",
        "id": 230929562,
        "sender_full_name": "Iocta",
        "timestamp": 1616098117
    },
    {
        "content": "<p>It's crazy how these things sometimes come out really super-nicely sometimes.</p>",
        "id": 230929711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616098198
    },
    {
        "content": "<p>I think I missed something. If the statement is just <code>  in_semialgebra := λ s, ∀ (a b : ℝ), s = (Ioc a b),</code> then <code>semialgebra_empty</code> will ask me to show that forall a b, Ioc a b = emptyset, which doesn't seem true.</p>",
        "id": 230930008,
        "sender_full_name": "Iocta",
        "timestamp": 1616098323
    },
    {
        "content": "<p>There's something wrong with compl as well. Right now you can just let c = {s^compl}. If you restrict to all the elements of c being in your semialgebra then you can't make the complement of [0,1) because every set in your semialgebra has finite measure and so a finite union will do too. I think you might need the infinity versions of Ioc. I've forgotten what they're called though.</p>",
        "id": 230930144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616098391
    },
    {
        "content": "<p>Iic?</p>",
        "id": 230930340,
        "sender_full_name": "Iocta",
        "timestamp": 1616098476
    },
    {
        "content": "<p>yes it could well be that</p>",
        "id": 230930389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616098498
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Iic\">docs#set.Iic</a></p>",
        "id": 230930416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616098510
    },
    {
        "content": "<p>Yes, that. But I don't want to tell you what your semialgebra is -- it's your definition.</p>",
        "id": 230930486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616098541
    },
    {
        "content": "<p>I'm trying to copy <a href=\"/user_uploads/3121/Z1Q0JWtyIRuCOldrbwW9sFSj/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Z1Q0JWtyIRuCOldrbwW9sFSj/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Z1Q0JWtyIRuCOldrbwW9sFSj/image.png\"></a></div>",
        "id": 230930715,
        "sender_full_name": "Iocta",
        "timestamp": 1616098651
    },
    {
        "content": "<p>But one dimensional for now</p>",
        "id": 230930809,
        "sender_full_name": "Iocta",
        "timestamp": 1616098686
    },
    {
        "content": "<p>note the possibility that a and b can be infinity.</p>",
        "id": 230930935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616098740
    },
    {
        "content": "<p>Well I guess I was sorta mixing that with <a href=\"/user_uploads/3121/vQQzgVt4Q6mLg9KQrjwbqkca/image.png\">image.png</a> from <a href=\"https://en.wikibooks.org/wiki/Measure_Theory/Basic_Structures_And_Definitions/Semialgebras,_Algebras_and_%CF%83-algebras\">https://en.wikibooks.org/wiki/Measure_Theory/Basic_Structures_And_Definitions/Semialgebras,_Algebras_and_%CF%83-algebras</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vQQzgVt4Q6mLg9KQrjwbqkca/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/vQQzgVt4Q6mLg9KQrjwbqkca/image.png\"></a></div>",
        "id": 230930974,
        "sender_full_name": "Iocta",
        "timestamp": 1616098758
    },
    {
        "content": "<p>But maybe those definitions are actually not talking about the same object</p>",
        "id": 230931034,
        "sender_full_name": "Iocta",
        "timestamp": 1616098790
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 230931317,
        "sender_full_name": "Iocta",
        "timestamp": 1616098894
    },
    {
        "content": "<p>Yeah this can't be right</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.ereal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.measure_space</span> <span class=\"n\">classical</span> <span class=\"n\">set</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">semialgebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_semialgebra</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">in_semialgebra</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∩</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">sUnion</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">semialgebra</span> <span class=\"n\">ereal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">in_semialgebra</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">semialgebra_empty</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- a b: ereal</span>\n  <span class=\"c1\">-- ⊢ ∅ = Ioc a b</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_inter</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_compl</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230931948,
        "sender_full_name": "Iocta",
        "timestamp": 1616099168
    },
    {
        "content": "<p>Gotta be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">semialgebra</span> <span class=\"n\">ereal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">in_semialgebra</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">semialgebra_empty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">semialgebra_inter</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_compl</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230932818,
        "sender_full_name": "Iocta",
        "timestamp": 1616099554
    },
    {
        "content": "<p>Isn't that what I posted earlier?</p>",
        "id": 230934572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616100286
    },
    {
        "content": "<p>Ah, Ioc instead of Icc</p>",
        "id": 230934680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616100327
    },
    {
        "content": "<p>It's very close, also changed real to ereal</p>",
        "id": 230935250,
        "sender_full_name": "Iocta",
        "timestamp": 1616100578
    },
    {
        "content": "<p>I'm trying to make a finset with this these two elements but Lean doesn't know how to put the elements in the finset.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.ereal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.measure_space</span> <span class=\"n\">classical</span> <span class=\"n\">set</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">semialgebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_semialgebra</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">in_semialgebra</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∩</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">sUnion</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">semialgebra</span> <span class=\"n\">ereal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">in_semialgebra</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">semialgebra_empty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">semialgebra_inter</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">a1</span> <span class=\"n\">ha1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">ha1</span> <span class=\"k\">with</span> <span class=\"n\">b1</span> <span class=\"n\">hb1</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">a2</span> <span class=\"n\">ha2</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">cases</span> <span class=\"n\">ha2</span> <span class=\"k\">with</span> <span class=\"n\">b2</span> <span class=\"n\">hb2</span><span class=\"o\">,</span>\n          <span class=\"n\">use</span> <span class=\"n\">a1</span> <span class=\"bp\">⊔</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n          <span class=\"n\">use</span> <span class=\"n\">b1</span> <span class=\"bp\">⊓</span> <span class=\"n\">b2</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"o\">,</span> <span class=\"n\">Ioc_inter_Ioc</span><span class=\"o\">],</span>\n        <span class=\"o\">},</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_compl</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">ereal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"n\">Iic</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">b</span><span class=\"o\">)},</span>\n<span class=\"c1\">-- failed to synthesize type class instance for</span>\n<span class=\"c1\">-- s : set ereal,</span>\n<span class=\"c1\">-- a b : ereal,</span>\n<span class=\"c1\">-- h : s = Ioc a b</span>\n<span class=\"c1\">-- ⊢ has_insert ?m_1 (finset (set ereal))</span>\n<span class=\"c1\">-- state:</span>\n<span class=\"c1\">-- s : set ereal,</span>\n<span class=\"c1\">-- a b : ereal,</span>\n<span class=\"c1\">-- h : s = Ioc a b</span>\n<span class=\"c1\">-- ⊢ ∃ (c : finset (set ereal)), ⋃₀↑c = (Ioc a b)ᶜ</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230957650,
        "sender_full_name": "Iocta",
        "timestamp": 1616113896
    },
    {
        "content": "<p>Are you just missing <code>decidable</code> instances? What happens if you <code>open_locale classical</code>, or use <code>classical</code> at the beginning of the proof?</p>",
        "id": 230958521,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616114535
    },
    {
        "content": "<p>Yeah that was it</p>",
        "id": 230958769,
        "sender_full_name": "Iocta",
        "timestamp": 1616114749
    },
    {
        "content": "<p>How can I solve this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.ereal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.measure_space</span> <span class=\"n\">classical</span> <span class=\"n\">set</span> <span class=\"n\">real</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">compl_Ioc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span>  <span class=\"bp\">=</span> <span class=\"n\">Iic</span> <span class=\"n\">a</span> <span class=\"bp\">∪</span> <span class=\"n\">Ioi</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230990966,
        "sender_full_name": "Iocta",
        "timestamp": 1616143462
    },
    {
        "content": "<p>I <em>think</em> it's true</p>",
        "id": 230991693,
        "sender_full_name": "Iocta",
        "timestamp": 1616143894
    },
    {
        "content": "<p>Does <code>ext</code> get you started?</p>",
        "id": 230992078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616144130
    },
    {
        "content": "<p><code>rw [mem_union_eq, mem_Ioi, mem_Iic, mem_compl_eq, mem_Ioc]</code> will then get you most of the way to finished</p>",
        "id": 231005748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616151692
    },
    {
        "content": "<p>I think it might be worth PRing that lemma, once golfed to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">compl_Ioc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">Iic</span> <span class=\"n\">a</span> <span class=\"bp\">∪</span> <span class=\"n\">Ioi</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">not_and_distrib.trans</span> <span class=\"o\">(</span><span class=\"n\">or_congr</span> <span class=\"n\">not_lt</span> <span class=\"n\">not_le</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231006093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616151879
    },
    {
        "content": "<p>Along with the other three variants of <code>o</code> and <code>c</code></p>",
        "id": 231006118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616151898
    },
    {
        "content": "<p>This works now. How can I make it shorter?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.ereal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.measure_space</span> <span class=\"n\">classical</span> <span class=\"n\">set</span> <span class=\"n\">real</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">semialgebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_semialgebra</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">in_semialgebra</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∩</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">sUnion</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">compl_Ioc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">Iic</span> <span class=\"n\">a</span> <span class=\"bp\">∪</span> <span class=\"n\">Ioi</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">not_and_distrib.trans</span> <span class=\"o\">(</span><span class=\"n\">or_congr</span> <span class=\"n\">not_lt</span> <span class=\"n\">not_le</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">semialgebra</span> <span class=\"n\">ereal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">in_semialgebra</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">semialgebra_empty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_empty_eq</span><span class=\"o\">,</span> <span class=\"n\">forall_const</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">Ioc_self</span><span class=\"o\">],⟩,</span>\n  <span class=\"n\">semialgebra_inter</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">a1</span> <span class=\"n\">ha1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">ha1</span> <span class=\"k\">with</span> <span class=\"n\">b1</span> <span class=\"n\">hb1</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">a2</span> <span class=\"n\">ha2</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">cases</span> <span class=\"n\">ha2</span> <span class=\"k\">with</span> <span class=\"n\">b2</span> <span class=\"n\">hb2</span><span class=\"o\">,</span>\n          <span class=\"n\">use</span> <span class=\"n\">a1</span> <span class=\"bp\">⊔</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n          <span class=\"n\">use</span> <span class=\"n\">b1</span> <span class=\"bp\">⊓</span> <span class=\"n\">b2</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span><span class=\"o\">,</span> <span class=\"n\">Ioc_inter_Ioc</span><span class=\"o\">],</span>\n        <span class=\"o\">},</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_compl</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">ereal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"n\">Iic</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">b</span><span class=\"o\">)},</span>\n    <span class=\"n\">use</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">⋃₀↑</span><span class=\"n\">t</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">Iic</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.coe_insert</span><span class=\"o\">,</span> <span class=\"n\">sUnion_singleton</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_singleton</span><span class=\"o\">,</span> <span class=\"n\">sUnion_insert</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">compl_Ioc</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231094778,
        "sender_full_name": "Iocta",
        "timestamp": 1616190754
    },
    {
        "content": "<p>Yours intros and four cases tactics can be combined into a single <code>rintros</code></p>",
        "id": 231095400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616191140
    },
    {
        "content": "<p><code>rintros s1 s2 ⟨a1, b1, rfl⟩ ⟨a2, b2, rfl⟩</code></p>",
        "id": 231095610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616191241
    },
    {
        "content": "<p>Here's how I'd golf the whole thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">semialgebra</span> <span class=\"n\">ereal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">in_semialgebra</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_empty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Ioc_self</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">semialgebra_inter</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">⟨</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a1</span> <span class=\"bp\">⊔</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">b1</span> <span class=\"bp\">⊓</span> <span class=\"n\">b2</span><span class=\"o\">,</span> <span class=\"n\">Ioc_inter_Ioc</span><span class=\"o\">⟩,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">semialgebra_compl</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨{</span><span class=\"n\">Iic</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Ioi</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">eq.trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">compl_Ioc</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.coe_insert</span><span class=\"o\">,</span> <span class=\"n\">sUnion_singleton</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_singleton</span><span class=\"o\">,</span> <span class=\"n\">sUnion_insert</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231137277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616235287
    },
    {
        "content": "<p><code>rintros s1 s2 ⟨a1, b1, rfl⟩ ⟨a2, b2, rfl⟩,</code> works but if I replace it with <code>rintros s1 s2 ⟨a1, b1, _⟩ ⟨a2, b2, _⟩,</code> then it doesn't work. What is the difference?</p>",
        "id": 231170299,
        "sender_full_name": "Iocta",
        "timestamp": 1616272997
    },
    {
        "content": "<p><code>rfl</code> is like introducing <code>h</code> then immediately doing <code>rw h</code></p>",
        "id": 231170709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616273425
    },
    {
        "content": "<p>Although that's a bit of a simplification</p>",
        "id": 231170735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616273455
    },
    {
        "content": "<p>Whereas the <code>_</code> is just introducing <code>h</code>?</p>",
        "id": 231170758,
        "sender_full_name": "Iocta",
        "timestamp": 1616273493
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rintros</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">⟨</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>does work</p>",
        "id": 231171250,
        "sender_full_name": "Iocta",
        "timestamp": 1616274029
    },
    {
        "content": "<p>Yeah, <code>_</code> just tells lean to pick a name for you</p>",
        "id": 231173178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616276241
    },
    {
        "content": "<p>This works, what does a shorter version look like?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.ereal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.measure_space</span> <span class=\"n\">classical</span> <span class=\"n\">set</span> <span class=\"n\">real</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">noncomputable theory</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">algebra'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_algebra</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">algebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">in_algebra</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">algebra_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">algebra_union</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">in_algebra</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∪</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_compl_of_compl_eq</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s1</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">ext</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"bp\">;</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_compl_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">algebra'</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">in_algebra</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"n\">algebra_empty</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">finset.empty</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">algebra_compl</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ht</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">compl_compl</span><span class=\"o\">],</span>\n      <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">algebra_union</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">⟨</span><span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">use</span> <span class=\"n\">t1</span> <span class=\"bp\">∪</span> <span class=\"n\">t2</span><span class=\"o\">,</span>\n        <span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.coe_union</span><span class=\"o\">],</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">],</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">use</span> <span class=\"n\">t2.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s1</span><span class=\"o\">),</span>\n        <span class=\"n\">right</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">compl_union</span><span class=\"o\">],</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_sep_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_eq</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_eq</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_filter</span><span class=\"o\">],</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n          <span class=\"n\">split</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span>\n            <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">s2</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n            <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n              <span class=\"n\">apply</span> <span class=\"n\">eq_compl_of_compl_eq</span><span class=\"o\">,</span>\n              <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n          <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">split</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h.2</span><span class=\"o\">,</span>  <span class=\"o\">},</span>\n          <span class=\"o\">{</span>\n            <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mem_compl_eq</span><span class=\"o\">],</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n          <span class=\"o\">},</span>\n        <span class=\"o\">},</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">use</span> <span class=\"n\">t1.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s2</span><span class=\"o\">),</span>\n        <span class=\"n\">right</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">compl_union</span><span class=\"o\">],</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">mem_sep_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_eq</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_eq</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"bp\">=</span> <span class=\"n\">t1</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n          <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n            <span class=\"n\">apply</span> <span class=\"n\">eq_compl_of_compl_eq</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n          <span class=\"o\">},</span>\n          <span class=\"o\">{</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">mem_sep_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_eq</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_eq</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n          <span class=\"o\">},</span>\n        <span class=\"o\">},</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">use</span> <span class=\"n\">t1.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t2</span><span class=\"o\">),</span>\n        <span class=\"k\">have</span> <span class=\"n\">h1'</span><span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"bp\">=</span> <span class=\"n\">t1</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n        <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n          <span class=\"n\">apply</span> <span class=\"n\">eq_compl_of_compl_eq</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">s2</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n        <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n          <span class=\"n\">apply</span> <span class=\"n\">eq_compl_of_compl_eq</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"n\">right</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">mem_sep_eq</span><span class=\"o\">,</span> <span class=\"n\">compl_union</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_eq</span><span class=\"o\">,</span> <span class=\"n\">iff_self</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231193000,
        "sender_full_name": "Iocta",
        "timestamp": 1616302007
    },
    {
        "content": "<p>\"have, from by apply exact\" can all be done in one line, and one has to question whether it's even necessary given that you're about to close the goal with a simp * -- just throw the proof directly into the list of things in the list</p>",
        "id": 231201245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616313857
    },
    {
        "content": "<p>intros, cases can be done with rintro</p>",
        "id": 231201253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616313897
    },
    {
        "content": "<p>Did you try library_search for eq_compl_of_compl_eq?</p>",
        "id": 231201293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616313938
    },
    {
        "content": "<p>What is the <code>rintros</code>-only version of <code>rintros s ⟨t, ht⟩, cases ht with h,</code>?</p>",
        "id": 231201741,
        "sender_full_name": "Iocta",
        "timestamp": 1616314573
    },
    {
        "content": "<p><code>library_search</code> didn't work for <code>eq_compl_of_compl_eq</code> (\"excessive memory consumption\")</p>",
        "id": 231201776,
        "sender_full_name": "Iocta",
        "timestamp": 1616314674
    },
    {
        "content": "<p>Try looking for the iff version? The rintros version probably replaces <code>ht</code> with (h1 | h2)</p>",
        "id": 231201940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616314916
    },
    {
        "content": "<p>I tried replacing the have/from like <code>simp only [*, not_not, finset.mem_coe, mem_compl_eq, eq_compl_of_compl_eq, h2] at *,</code> but it said <code>invalid simplification lemma 'eq_compl_of_compl_eq'</code></p>",
        "id": 231202095,
        "sender_full_name": "Iocta",
        "timestamp": 1616315135
    },
    {
        "content": "<p>Indeed that is a useless simp lemma by itself. I'm suggesting you add the full proof ie eq_compl_of_compl_eq h1</p>",
        "id": 231202171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616315275
    },
    {
        "content": "<p>Replacing <code>rintros s ⟨t, ht⟩, cases ht with h,</code> with <code>rintros s ⟨t, ⟨h1 | h2⟩⟩, </code> leaves me with <a href=\"/user_uploads/3121/G3VfJ5JMd0bvk98JR1320ZR1/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/G3VfJ5JMd0bvk98JR1320ZR1/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/G3VfJ5JMd0bvk98JR1320ZR1/image.png\"></a></div>",
        "id": 231202223,
        "sender_full_name": "Iocta",
        "timestamp": 1616315325
    },
    {
        "content": "<p>You can just use <code>simp</code> to close goals, you don't need all this simp only stuff</p>",
        "id": 231202224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616315334
    },
    {
        "content": "<p>I read somewhere that it's bad style to just use simp because the simp rules change over time, so I normally write squeeze_simp and just use whatever it says</p>",
        "id": 231202240,
        "sender_full_name": "Iocta",
        "timestamp": 1616315379
    },
    {
        "content": "<p>You need round brackets like I used, not pointy ones. Sorry I can't help more, I'm not at lean right now.</p>",
        "id": 231202245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616315391
    },
    {
        "content": "<p>It's bad style to use simp <em>to not close a goal</em>. If it's solving the goal it's fine.</p>",
        "id": 231202298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616315416
    },
    {
        "content": "<blockquote>\n<p>can all be done in one line</p>\n</blockquote>\n<p>what are the rules for what's done in a single line?</p>",
        "id": 231202406,
        "sender_full_name": "Iocta",
        "timestamp": 1616315585
    },
    {
        "content": "<p>btw dunno what's wrong with those <code>()</code>in the screenshot but it always wraps weird like that when there's a <code>\\compl</code></p>",
        "id": 231202508,
        "sender_full_name": "Iocta",
        "timestamp": 1616315667
    },
    {
        "content": "<blockquote>\n<p>Try looking for the iff version?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_compl_of_compl_eq</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s1</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s2</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>didn't work either</p>",
        "id": 231202591,
        "sender_full_name": "Iocta",
        "timestamp": 1616315786
    },
    {
        "content": "<p>I think Kevin is describing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_compl_iff_compl_eq</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s1</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">↔</span> <span class=\"n\">s1</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>does that work?</p>",
        "id": 231204111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616318029
    },
    {
        "content": "<p>No</p>",
        "id": 231233770,
        "sender_full_name": "Iocta",
        "timestamp": 1616352540
    },
    {
        "content": "<p>How about the statement <code>function.involutive (has_compl.compl : set X \\to set X)</code>?</p>",
        "id": 231233954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616352734
    },
    {
        "content": "<p>If you mean </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.involutive</span> <span class=\"o\">(</span><span class=\"n\">has_compl.compl</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>then no</p>",
        "id": 231234337,
        "sender_full_name": "Iocta",
        "timestamp": 1616353138
    },
    {
        "content": "<p>It's in there somewhere. Why not just read data.set.basic? Find the section on compl.</p>",
        "id": 231234960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616353728
    },
    {
        "content": "<p>Maybe it's in a form I don't recognize, but I don't see it. <a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/basic.html#lemmas-about-complement\">https://leanprover-community.github.io/mathlib_docs/data/set/basic.html#lemmas-about-complement</a></p>",
        "id": 231237916,
        "sender_full_name": "Iocta",
        "timestamp": 1616357095
    },
    {
        "content": "<p>There's also a bunch of stuff in order/boolean_algebra but I can't see it there either. Here are some shorter proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_compl_of_compl_eq</span> <span class=\"o\">{</span><span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s1</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">s1</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">compl_compl</span> <span class=\"n\">s1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_compl_iff_compl_eq</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s1</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span> <span class=\"bp\">↔</span> <span class=\"n\">s1</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">eq_compl_of_compl_eq</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">eq_compl_of_compl_eq</span> <span class=\"n\">h.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">set</span>\n</code></pre></div>",
        "id": 231239734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616359262
    },
    {
        "content": "<p>These should definitely be added to mathlib (in <code>order/boolean_algebra</code>).</p>",
        "id": 231240115,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616359719
    },
    {
        "content": "<p>Why is the <code>have</code> necessary?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.ereal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.measure_space</span> <span class=\"n\">classical</span> <span class=\"n\">set</span> <span class=\"n\">real</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">noncomputable theory</span>\n\n\n\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">algebra'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_algebra</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">algebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">in_algebra</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">algebra_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">algebra_union</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">in_algebra</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∪</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_compl_of_compl_eq</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s1</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">ext</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"bp\">;</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_compl_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">algebra'</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">in_algebra</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"n\">algebra_empty</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">finset.empty</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">algebra_compl</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩,</span> <span class=\"n\">cases</span> <span class=\"n\">ht</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">compl_compl</span><span class=\"o\">],</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">algebra_union</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">⟨</span><span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h11</span> <span class=\"bp\">|</span><span class=\"n\">h12</span><span class=\"o\">)⟩</span> <span class=\"o\">⟨</span><span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h21</span> <span class=\"bp\">|</span> <span class=\"n\">h22</span><span class=\"o\">)⟩,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">t1</span> <span class=\"bp\">∪</span> <span class=\"n\">t2</span><span class=\"o\">,</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.coe_union</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">t2.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s1</span><span class=\"o\">),</span>\n      <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">compl_union</span><span class=\"o\">],</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_sep_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_eq</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_eq</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_filter</span><span class=\"o\">],</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"c1\">-- have: s2 = t2ᶜ, from by {  apply eq_compl_of_compl_eq, exact h22, },</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">eq_compl_of_compl_eq</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">eq_compl_of_compl_eq</span> <span class=\"n\">t2</span><span class=\"bp\">ᶜ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>  <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h.2</span><span class=\"o\">,</span>  <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mem_compl_eq</span><span class=\"o\">],</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>   <span class=\"o\">},</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">use</span> <span class=\"n\">t1.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s2</span><span class=\"o\">),</span>\n        <span class=\"n\">right</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">compl_union</span><span class=\"o\">],</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">eq_compl_of_compl_eq</span> <span class=\"n\">s1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,},</span> <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">use</span> <span class=\"n\">t1.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t2</span><span class=\"o\">),</span>\n        <span class=\"n\">right</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">eq_compl_of_compl_eq</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">eq_compl_of_compl_eq</span> <span class=\"n\">s2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">}</span>\n\n\n<span class=\"n\">simp_all</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">simplify</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">h11</span> <span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">t1</span><span class=\"o\">,</span>\n<span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">h22</span> <span class=\"o\">:</span> <span class=\"n\">s2</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">t2</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">t1</span><span class=\"o\">,</span>\n<span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t2</span>\n</code></pre></div>",
        "id": 231241420,
        "sender_full_name": "Iocta",
        "timestamp": 1616361070
    },
    {
        "content": "<p>Anyway that's a good reduction in verbosity, but still pretty large</p>",
        "id": 231241540,
        "sender_full_name": "Iocta",
        "timestamp": 1616361229
    },
    {
        "content": "<p>You may want to double-check, but I think that this is a simplified version of what you had:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">compl_eq_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s1</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">s2</span> <span class=\"bp\">↔</span> <span class=\"n\">s2</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rintros</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">compl_compl</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">algebra'</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">in_algebra</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"n\">algebra_empty</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">finset.empty</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">algebra_compl</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">compl_compl</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">)⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">algebra_union</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">⟨</span><span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">t1</span> <span class=\"bp\">∪</span> <span class=\"n\">t2</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">finset.coe_union</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">compl_eq_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">t2.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">t1</span><span class=\"o\">),</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]))⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">compl_eq_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">t1.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">t2</span><span class=\"o\">),</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]))⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">compl_eq_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">t1.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s2</span><span class=\"o\">),</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]))⟩</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231316855,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616422585
    },
    {
        "content": "<p>Also, while I have not worked with it, it might be better to make implicit some of the inputs in your definition of <code>algebra'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">algebra'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_algebra</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">algebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">in_algebra</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">algebra_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>  <span class=\"c1\">-- made `s` implicit</span>\n<span class=\"o\">(</span><span class=\"n\">algebra_union</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">in_algebra</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∪</span> <span class=\"n\">s2</span><span class=\"o\">))</span>  <span class=\"c1\">-- made `s1 s2` implicit</span>\n</code></pre></div>",
        "id": 231320068,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616423735
    },
    {
        "content": "<p>That's quite an improvement! Thanks <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span></p>",
        "id": 231375208,
        "sender_full_name": "Iocta",
        "timestamp": 1616443114
    },
    {
        "content": "<p>How can I express \"the set of finite disjoint unions of sets in S\"?<br>\n<a href=\"/user_uploads/3121/BWRWr7oHJP9nwk6VxmzAh5SN/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BWRWr7oHJP9nwk6VxmzAh5SN/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/BWRWr7oHJP9nwk6VxmzAh5SN/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.ereal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.measure_space</span> <span class=\"n\">classical</span> <span class=\"n\">set</span> <span class=\"n\">real</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">algebra'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_algebra</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">algebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">in_algebra</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">algebra_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">algebra_union</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">in_algebra</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">in_algebra</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∪</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">semialgebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_semialgebra</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">in_semialgebra</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∩</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">sUnion</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231692224,
        "sender_full_name": "Iocta",
        "timestamp": 1616613255
    },
    {
        "content": "<p>You could define it recursively. Or you might want to check that the finite disjoint unions are just the same as the finite unions, which would be easier to define and work with -- I think they are.</p>",
        "id": 231692921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616613556
    },
    {
        "content": "<p>by 'check that ...' do you mean check that this result holds for finite unions in general?</p>",
        "id": 231694163,
        "sender_full_name": "Iocta",
        "timestamp": 1616613964
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 231694383,
        "sender_full_name": "Iocta",
        "timestamp": 1616614023
    },
    {
        "content": "<p>I can't make sense of your lemma 1.1.3. How does one see that \"the definition of S implies S_i^c \\in S-bar\"? I can't immediately see how to deduce it from your formal definition of semialgebra -- you know that the complement is a union of things in the semialgebra but you don't know the union is disjoint, right?</p>",
        "id": 231697802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616615417
    },
    {
        "content": "<p>For me, the algebra generated by the semialgebra seems to naturally be the finite union of elements of the semialgebra and then the proof that it's an algebra goes through; moreover it's clearly the smallest algebra containing the semialgebra, at least if we go via the definitions you have formalised.</p>",
        "id": 231697914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616615471
    },
    {
        "content": "<p>This text does use 'disjoint' in the definition of semialgebra <a href=\"/user_uploads/3121/bEhvOTqrivq5rscWL4OcpJub/image.png\">image.png</a> <br>\nso maybe I should try to include that in my lean semialgebra definition</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bEhvOTqrivq5rscWL4OcpJub/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/bEhvOTqrivq5rscWL4OcpJub/image.png\"></a></div>",
        "id": 231706243,
        "sender_full_name": "Iocta",
        "timestamp": 1616619082
    },
    {
        "content": "<p>Or maybe that's unnecessary complication</p>",
        "id": 231706311,
        "sender_full_name": "Iocta",
        "timestamp": 1616619116
    },
    {
        "content": "<p>Is that like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">semialgebra'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_semialgebra</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_empty</span> <span class=\"o\">:</span> <span class=\"n\">in_semialgebra</span> <span class=\"bp\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">in_semialgebra</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">∩</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">semialgebra_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">in_semialgebra</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span>  <span class=\"bp\">∈</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span><span class=\"o\">),</span>  <span class=\"n\">x</span> <span class=\"bp\">∩</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">sUnion</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231708426,
        "sender_full_name": "Iocta",
        "timestamp": 1616619980
    },
    {
        "content": "<p>If you change the definition from the book then you'll have a different definition. Your definition of pairwise disjoint above is incorrect because you can have x=y. There might already be a way of saying \"pairwise disjoint\" in mathlib but I don't personally know it</p>",
        "id": 231761060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616659928
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice.independent\">docs#complete_lattice.independent</a> I think is equivalent for sets?</p>",
        "id": 231763264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616661231
    }
]