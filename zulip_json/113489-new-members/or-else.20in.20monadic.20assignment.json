[
    {
        "content": "<p>If I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n  <span class=\"n\">bar</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>this means \"set t to foo, or set it to none if foo fails, then run bar then baz\". I can understand why it means this, but it's not the behavior I'm looking for.</p>\n<p>How do I write \"set t to foo. If this fails,  then exit the monad and produce none. Otherwise, continue with <code>bar</code> then <code>baz</code>\"</p>",
        "id": 228147468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614536824
    },
    {
        "content": "<p>That is, I'm looking for how to translate this python:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">()</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span>\n<span class=\"n\">bar</span><span class=\"p\">()</span>\n<span class=\"k\">return</span> <span class=\"n\">some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>but only know how to write</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">()</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">bar</span><span class=\"p\">()</span>\n<span class=\"k\">return</span> <span class=\"n\">some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 228147559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614536904
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">bar</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>?</p>",
        "id": 228147669,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614537022
    },
    {
        "content": "<p>What's the type of <code>foo</code>? How many such exits do you expect to have in your control flow?</p>",
        "id": 228147902,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614537275
    },
    {
        "content": "<p>Right, but that code is</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">()</span>\n    <span class=\"n\">bar</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>which also squashes errors from bar, which I don't want to do</p>",
        "id": 228148045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614537468
    },
    {
        "content": "<p>Let's say that <code>foo</code> is <code>tactic nat</code></p>",
        "id": 228148110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614537508
    },
    {
        "content": "<p>Do you want a different error value if <code>bar</code> fails?</p>",
        "id": 228148286,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614537718
    },
    {
        "content": "<p>I want the error from bar to propagate</p>",
        "id": 228148353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614537785
    },
    {
        "content": "<p>I think you are looking for <code>  t ← foo | return none,</code></p>",
        "id": 228194873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614587073
    },
    {
        "content": "<p>Actually I think that only works on failed pattern matches, so you might have to rewrite it to <code>some t &lt;- try_core foo | return none,</code> if you want to catch errors in <code>foo</code></p>",
        "id": 228195142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614587201
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.try_core\">docs#tactic.try_core</a> sounds like what I was looking for</p>",
        "id": 228195530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614587470
    },
    {
        "content": "<p>What does pattern matching desugar to in <code>←</code> assignment?</p>",
        "id": 228196137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614587923
    },
    {
        "content": "<p>It's a pattern match with a wildcard case</p>",
        "id": 228196682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614588267
    },
    {
        "content": "<p>i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">o</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">try_core</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"bp\">&lt;</span><span class=\"n\">rest</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"k\">do</span> <span class=\"n\">block</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228196696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614588282
    },
    {
        "content": "<p>In the case of an alternative monad (like <code>tactic</code>) you can also leave off the <code>| ...</code> part, and it will use <code>failure</code> as the else case</p>",
        "id": 228196905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614588381
    },
    {
        "content": "<p>Can you pattern match with multiple non-wildcard cases?</p>",
        "id": 228198405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614589272
    },
    {
        "content": "<p>Or is the <code>|</code> syntax exclusively for \"one case + default\"?</p>",
        "id": 228198438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614589294
    },
    {
        "content": "<p>And I guess my other question - where is this syntax documented?</p>",
        "id": 228199403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614589887
    },
    {
        "content": "<p>I would have guessed <a href=\"https://leanprover.github.io/reference/programming.html#monads\">https://leanprover.github.io/reference/programming.html#monads</a></p>",
        "id": 228200330,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1614590503
    },
    {
        "content": "<p>There is no syntax for binding anything, so I would guess it's only for one pattern plus \"anything else\"</p>",
        "id": 228216582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614599278
    },
    {
        "content": "<p>yeah, such syntax from idris/agda will be great</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span> <span class=\"n\">pattern1</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">a</span>\n     <span class=\"bp\">|</span> <span class=\"n\">pattern2</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n     <span class=\"bp\">|</span> <span class=\"n\">pattern3</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"c1\">-- should be total</span>\n   <span class=\"n\">e</span>\n</code></pre></div>\n<p>=</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pattern1</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pattern2</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pattern3</span> <span class=\"o\">:=</span> <span class=\"n\">c</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">get_name</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">get_name</span> <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">io.put_str_ln</span> <span class=\"s2\">\"fail on first name\"</span><span class=\"o\">,</span>\n  <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">get_name</span> <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">io.put_str_ln</span> <span class=\"s2\">\"fail on second name\"</span><span class=\"o\">,</span>\n  <span class=\"n\">io.put_str_ln</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 228223635,
        "sender_full_name": "kana",
        "timestamp": 1614602787
    },
    {
        "content": "<p>I think some of the <code>-&gt;</code>s in your example were intended to be <code>:=</code>?</p>",
        "id": 228224115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614603012
    },
    {
        "content": "<p>Yes, fixed</p>",
        "id": 228224249,
        "sender_full_name": "kana",
        "timestamp": 1614603079
    },
    {
        "content": "<p>I don't think this is worth investigating in lean 3, and lean 4 do blocks are so different that it's not clear to me whether this even applies anymore</p>",
        "id": 228237840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614608582
    },
    {
        "content": "<p>Agreed, the only thing that might be worth doing is documenting that this syntax exists somewhere</p>",
        "id": 228238149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614608677
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/174\">https://github.com/leanprover-community/leanprover-community.github.io/pull/174</a></p>",
        "id": 228252425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614613545
    },
    {
        "content": "<p>Oh, there are no way to match in else clause? Why the feature is so specialized?</p>",
        "id": 228272794,
        "sender_full_name": "kana",
        "timestamp": 1614620313
    },
    {
        "content": "<p>If you want a match, use <code>match</code>. I think of this feature as more like rust's <code>if let</code>, which gives you two branches, one if a given pattern matches and one for everything else</p>",
        "id": 228344936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614653658
    }
]