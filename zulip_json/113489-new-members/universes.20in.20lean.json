[
    {
        "content": "<p>I have tried to represent graphs and paths using inductive data type in lean.<br>\n<a href=\"https://github.com/enharsha/Graphs-in-Lean/blob/master/graph.lean\" target=\"_blank\" title=\"https://github.com/enharsha/Graphs-in-Lean/blob/master/graph.lean\">https://github.com/enharsha/Graphs-in-Lean/blob/master/graph.lean</a><br>\nHowever, while compiling definition of path, it shows the following error - \"universe level of type_of(arg <a href=\"https://github.com/leanprover-community/mathlib/issues/3\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/3\">#3</a>) of 'path.addedge' is too big for the corresponding inductive datatype\". Could anyone help me out? I have referred to inductive types section in Theorem Proving in Lean, where vectors have been defined in a similar fashion.</p>",
        "id": 184152732,
        "sender_full_name": "Harsha Nyapathi",
        "timestamp": 1577166940
    },
    {
        "content": "<p>Well, your edges live in some universe <code>v</code>, and paths must live (by your definition) in universe <code>u</code>. That doesn't fit...</p>",
        "id": 184152900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577167247
    },
    {
        "content": "<p>So, either you just use one universe, or paths should live in <code>Type (max u v)</code></p>",
        "id": 184152908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577167272
    },
    {
        "content": "<p>Also, when you write <code>g : graph</code>, I feat that Lean can't figure out the universes by itself. So maybe you need to write <code>g : graph.{u v}</code></p>",
        "id": 184152914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577167318
    },
    {
        "content": "<p>Another approach is to define</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">structure</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>This is similar to the approach taken by <code>category_theory.category</code>. Not sure which approach is better.</p>",
        "id": 184153703,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577168909
    },
    {
        "content": "<p>this compiles for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">path</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">vertex</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">vertex</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">fix</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">start</span>\n<span class=\"bp\">|</span> <span class=\"n\">addedge</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">edge</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">vertex</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">last</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pr</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">φ1</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">φ2</span> <span class=\"n\">add</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 184154105,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1577169684
    },
    {
        "content": "<p>I know it's sacreligious to suggest this here but you could just put vertices in edges in the same universe (something mathematicians have been doing for 100 years) and then you can just forget all about them</p>",
        "id": 184160996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577181467
    },
    {
        "content": "<p>Yes, mismatch of the universes seems to be the issue. It compiles now. Thanks a lot!</p>",
        "id": 184256613,
        "sender_full_name": "Harsha Nyapathi",
        "timestamp": 1577358767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249638\">@Harsha Nyapathi</span> It seems to me that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">structure</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>requires fewer equality assumptions in various lemmas. E.g., paths can be defined as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">path</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">fix</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">start</span>\n<span class=\"bp\">|</span> <span class=\"n\">addedge</span> <span class=\"o\">{</span><span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">last</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">last&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">edge</span> <span class=\"n\">last</span> <span class=\"n\">last&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">last&#39;</span>\n</pre></div>\n\n\n<p>Of course, a downside of this approach is that you need to write <code>{v₁ v₂ : α} (e : g.edge v₁ v₂)</code> instead of <code>e : g.edge</code>.<br>\nAnother bonus of this definition is that it makes easier to define, e.g., the graph corresponding to a category (no need to bundle homs with domain/codomain).</p>",
        "id": 184304841,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577430901
    }
]