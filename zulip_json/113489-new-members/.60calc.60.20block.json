[
    {
        "content": "<p>It seems that when I get something wrong inside a <code>calc</code> block, I get incomprehensible error messages. Is there a way around it? The example I am working on is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">algebra.tensor_product</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- noncomputable def counit : K[X] →ₐ[K] K := polynomial.aeval 0</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">comul</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">aeval</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebra.tensor_product.assoc</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">symm.to_alg_hom.comp</span> <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n<span class=\"bp\">.</span> <span class=\"c1\">-- this tells Lean not to recompile definitions</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coassoc</span> <span class=\"o\">:</span> <span class=\"n\">map1</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">map2</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">P2</span> <span class=\"o\">:</span> <span class=\"n\">map2</span> <span class=\"n\">K</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">map2</span> <span class=\"n\">K</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">map2</span><span class=\"o\">,</span>\n           <span class=\"bp\">...</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">aeval_X</span><span class=\"o\">]</span> <span class=\"c1\">-- GET \"don't know how to synthesize placeholder\" HERE</span>\n           <span class=\"bp\">...</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279482999,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650412204
    },
    {
        "content": "<p>Yeah it can be tricky to deal with the syntax. You have an extra comma at the end of the line starting <code>calc</code>.</p>",
        "id": 279483283,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650412488
    },
    {
        "content": "<p>I usually set up all the framework and populate everything with <code>sorry</code> before starting to do anything. I also found this very frustrating when I was learning</p>",
        "id": 279513071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650443514
    },
    {
        "content": "<p>Yeah, a friend of mine has started to play with Lean recently and he complained to me about the syntax of calc, and I remember hating it too at first. Is it better in Lean 4 ?</p>",
        "id": 279513642,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1650443878
    },
    {
        "content": "<p>I think the specific mistake I used to make was, like above, the comma at the end of the line, because in almost every other situation in tactic mode you end a line with a comma</p>",
        "id": 279514252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650444266
    },
    {
        "content": "<p>I wonder if it would hurt anything to allow an optional comma there</p>",
        "id": 279515065,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650444772
    },
    {
        "content": "<p>What I normally do, as Kevin suggests, is two split the strategy in two. Say that you want to prove that an expression <code>A</code> is less or equal than another expression <code>B</code> through three steps passing via <code>C1,C2,C3</code>. Then you can<br>\n1) First write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">C3</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Here it is important to remember that (i) the dots are crucial; (ii) you need a comma only at the end.<br>\n2) You prove separate goals, forgetting the <code>calc</code> and pasting the result: for instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">C1</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">bla</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">mickey</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>that you convert to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">C1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">bla</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mickey</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>And so on, until</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">C3</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Then you pick these things up and you insert them in the <code>calc</code> block, to get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">bla</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mickey</span><span class=\"o\">}</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"bp\">???</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"bp\">???</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">C3</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"bp\">???</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">},</span>\n</code></pre></div>\n<p>It normally works quite smoothly, but at the beginning I found it painful too.</p>",
        "id": 279515139,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650444834
    },
    {
        "content": "<p>I wonder if this should go into the tips and tricks page, since everyone seems to have struggled with <code>calc</code> (I certainly also did!).</p>",
        "id": 279519318,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650447283
    },
    {
        "content": "<p>Seems a good idea.</p>",
        "id": 279519414,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650447351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/.60calc.60.20block/near/279515139\">said</a>:</p>\n<blockquote>\n<p>1) First write</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">C3</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is enough.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">C3</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 279519589,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650447432
    },
    {
        "content": "<p>Personally, I would also try to align the first <code>=</code> with the chain of relations below.</p>",
        "id": 279519765,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650447520
    },
    {
        "content": "<p>I even went as far as considering implementing some VS Code shortcut to make this boilerplate happen automatically, but I never got around to it</p>",
        "id": 279522831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650449318
    },
    {
        "content": "<p>On a related note, I was thinking that calc proofs would be a lot easier to read if somehow the syntax highlighting were different for the proof and for the statements</p>",
        "id": 279523903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650450102
    },
    {
        "content": "<p>Adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"s2\">\"Calc template\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n        <span class=\"s2\">\"prefix\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"s2\">\"_calc\"</span><span class=\"o\">],</span>\n        <span class=\"s2\">\"body\"</span><span class=\"o\">:</span> <span class=\"o\">[</span>\n    <span class=\"s2\">\"calc  $0A = C1 : sorry\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"    ... ≤ C2 : sorry\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"    ... ≤ C2 : sorry\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"    ... ≤ C3 : sorry\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"    ... = B  : sorry,\"</span><span class=\"o\">],</span>\n    <span class=\"s2\">\"description\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Template for a calc-block\"</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>as a User snippet in VSCode allows you to type <code>_calc + [Enter]</code> and produces the template.<br>\nEDIT: I had missed the <em>very important</em> comma at the end (if you are using this in tactic mode)!</p>\n<p>Arguably, the cursor should end up on <code>A</code>, though.  I'll edit!</p>",
        "id": 279524139,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650450277
    },
    {
        "content": "<p>And don't you have too many commas at the end of the intermediate steps?</p>",
        "id": 279525230,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650451141
    },
    {
        "content": "<p>Oh, those commas are needed by the snippet syntax.  The stuff that gets printed in VSCode is what is inside the quotations <code>\"...\"</code>.</p>",
        "id": 279525364,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650451255
    },
    {
        "content": "<p>I initially tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"s2\">\"Calc template\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n        <span class=\"s2\">\"prefix\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"s2\">\"_calc\"</span><span class=\"o\">],</span>\n        <span class=\"s2\">\"body\"</span><span class=\"o\">:</span> <span class=\"o\">[</span>\n    <span class=\"s2\">\"calc  $0A = C1 : sorry</span>\n<span class=\"s2\">         ... ≤ C2 : sorry</span>\n<span class=\"s2\">         ... ≤ C2 : sorry</span>\n<span class=\"s2\">         ... ≤ C3 : sorry</span>\n<span class=\"s2\">         ... = B  : sorry,\"</span><span class=\"o\">],</span>\n    <span class=\"s2\">\"description\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Template for a calc-block\"</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>but was told off by VSCode.</p>\n<p>For some reason, snippets that span more than one line, need to have each line encased in quotations and with a comma at the end.</p>",
        "id": 279525495,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650451344
    },
    {
        "content": "<p>Very useful snippet, thanks!</p>",
        "id": 279528862,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650453654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/.60calc.60.20block/near/279519318\">said</a>:</p>\n<blockquote>\n<p>I wonder if this should go into the tips and tricks page, since everyone seems to have struggled with <code>calc</code> (I certainly also did!).</p>\n</blockquote>\n<p>We've also got <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/templates/extras/calc.md\">a page on <code>calc</code> mode</a> on our website which could be a good fit for these helpful explanations!</p>",
        "id": 279547898,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1650463711
    },
    {
        "content": "<p>I am following the advice of putting <code>sorry</code>s everywhere first, and then populating them, but running into a strange <code>tactic failed, result contains meta-variables</code> error. I don't know what a meta-variable is, and why this happens here. Any suggestions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">algebra.tensor_product</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">comul</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">aeval</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebra.tensor_product.assoc</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">symm.to_alg_hom.comp</span> <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n<span class=\"bp\">.</span> <span class=\"c1\">-- this tells Lean not to recompile definitions</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coassoc</span> <span class=\"o\">:</span> <span class=\"n\">map1</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">map2</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">P2</span> <span class=\"o\">:</span> <span class=\"n\">map2</span> <span class=\"n\">K</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">map2</span> <span class=\"n\">K</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">map2</span>\n      <span class=\"bp\">...</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"o\">((</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">...</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"o\">((</span><span class=\"n\">aeval</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">)))</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- GET tactic failed, result contains meta-variables HERE</span>\n      <span class=\"bp\">...</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">--rw aeval_X</span>\n      <span class=\"bp\">...</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- rw map_add (map (comul K : K[X] →ₐ[K] K[X] ⊗[K] K[X]) (alg_hom.id K K[X])) _ _</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">⊗ₜ</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279572930,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650474228
    },
    {
        "content": "<p>Is it something to do with universes? This (<a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#equality\">https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#equality</a>) suggests so</p>",
        "id": 279574419,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650474862
    },
    {
        "content": "<p>It's complaining that it doesn't know a missing variable of type <code>Type</code>; the following fixes it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 279578723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650476753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.60calc.60.20block/near/279578723\">said</a>:</p>\n<blockquote>\n<p>It's complaining that it doesn't know a missing variable of type <code>Type</code>; the following fixes it:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>How do I tell Lean that X is in K[X] for the rest of the file? I thought that it already knew it because X is <code>polynomial.X</code>. Do I need to somehow put X in a universe?</p>",
        "id": 279581828,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650478019
    },
    {
        "content": "<p>X isn't in K[X], X is polynomial.X so it's in R[X] for whatever you choose R to be. Lean will usually figure things out and if it doesn't you can just give it the hint like I did above.</p>",
        "id": 279582017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650478089
    },
    {
        "content": "<p>You might be able to use some <code>local notation</code> trick</p>",
        "id": 279582136,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650478147
    },
    {
        "content": "<p>A somewhat related question: I have an algebra map <code>comult</code> from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">K[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mo>⊗</mo><mi>K</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">K[X] \\otimes K[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span>. I want to show that comult takes 1 to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>⊗</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1\\otimes 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>. My attempt below does not work for some reason.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">algebra.tensor_product</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- noncomputable def counit : K[X] →ₐ[K] K := polynomial.aeval 0</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">comul</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">aeval</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comul_1</span> <span class=\"o\">:</span> <span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">comul</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ ⇑(aeval (X ⊗ₜ[K] 1 + 1 ⊗ₜ[K] X)) 1 = 1 ⊗ₜ[K] 1</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">aeval_C</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"c1\">-- did not find instance of the pattern in the target expression ⇑(aeval (X ⊗ₜ[K] 1 + 1 ⊗ₜ[K] X)) (⇑C 1)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279582581,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650478331
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 279583729,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650478856
    }
]