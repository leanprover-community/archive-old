[
    {
        "content": "<p>Lean reports:<br>\n\"non-exhaustive match, the following cases are missing:<br>\nis_literal _ {val := _, nodup := _} 1 (CBlockList._mut_.CId_3 _ {val := _, nodup := _} {data := _} _)\"</p>\n<p>for the following code:</p>\n<p><a href=\"/user_uploads/3121/Ti0VbDTrR0oxsZUtXx3vswfx/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Ti0VbDTrR0oxsZUtXx3vswfx/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Ti0VbDTrR0oxsZUtXx3vswfx/image.png\"></a></div><p>However, this error disappears if the third line is commented out. I would have expected the final line to catch any possible pattern, is this a bug?</p>",
        "id": 262874110,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638020852
    },
    {
        "content": "<p>Please send us the code as a #MWE rather than an image <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> We need context.</p>",
        "id": 262875687,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638022973
    },
    {
        "content": "<p>Hey! Thanks for your answer! Apologies, I'm very new. What's a #MWE?</p>",
        "id": 262951609,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638138075
    },
    {
        "content": "<p>It's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> :-)</p>",
        "id": 262951616,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1638138103
    },
    {
        "content": "<p>Thank you! :) I'm on it!</p>",
        "id": 262951742,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638138264
    },
    {
        "content": "<p>Here is my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">UInt256_max</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">256</span>\n<span class=\"kd\">def</span> <span class=\"n\">UInt256</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">UInt256_max</span>\n<span class=\"kd\">def</span> <span class=\"n\">Literal</span> <span class=\"o\">:=</span> <span class=\"n\">UInt256</span>\n<span class=\"kd\">def</span> <span class=\"n\">Identifier</span> <span class=\"o\">:=</span> <span class=\"n\">string</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FTContext</span> <span class=\"o\">:=</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">CExpr</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">CId</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">id</span> <span class=\"bp\">∈</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span>\n <span class=\"bp\">|</span> <span class=\"n\">CLit</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_literal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CExpr.CLit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"c1\">-- | _ _ _ (CExpr.CId _ _ _ _)  := false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>                  <span class=\"o\">:=</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>Once again, lean reports \"non-exhaustive match, the following cases are missing:<br>\nis_literal _ {val := _, nodup := _} 1 (CExpr.CId _ {val := _, nodup := _} {data := _} _)\", but is happy if I comment back in the before last line. It seems to me however that this pattern should be caught by the last line.</p>",
        "id": 262989649,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638181506
    },
    {
        "content": "<p>If you can in your real example I'd recommend simplifying your type to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">CExpr</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">CId</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">id</span> <span class=\"bp\">∈</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">CExpr</span> <span class=\"mi\">1</span>\n <span class=\"bp\">|</span> <span class=\"n\">CLit</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">CExpr</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>That might even help the pattern matching, but I haven't tried it</p>",
        "id": 262990248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638181877
    },
    {
        "content": "<p>Doesn't seem to, thank you none the less! Also, this is a minimum working example, in the full code  Γ and vars  are not constant.</p>",
        "id": 262991024,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638182334
    },
    {
        "content": "<p>I think you're running into this issue: <a href=\"https://github.com/leanprover/lean/issues/1594\">https://github.com/leanprover/lean/issues/1594</a><br>\nI'm afraid that the workaround is to not use catch-all patterns when working with inductive families.</p>",
        "id": 263043837,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638208315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Thank you very much! It seems that this is the only solution yes, at least knowing exactly what the problem is allows me to infer a minimal set of matches required to get the behaviour that I would like, which is still very helpful!</p>",
        "id": 263139457,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638276899
    }
]