[
    {
        "content": "<p>hello, I have just installed lean + mathlib + vs code. I am working through 00_first_proof.lean in tutorial. There is an example lemma \"unique_max\" that invokes tactic \"linarith\". Is there a way to get vs code to show me what the tactic is actually doing? When I move my cursor past \"linarith\", it goes straight to \"goals accomplished\". In the source comments it suggests that linarith is using the lemma \"le_antisymm\", how can I see that lean decided to do this?</p>",
        "id": 294534535,
        "sender_full_name": "David Harvey",
        "timestamp": 1661082067
    },
    {
        "content": "<p>You can use <code>show_term {linarith}</code></p>",
        "id": 294535642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661082911
    },
    {
        "content": "<p>But you will likely get more than you bargained for</p>",
        "id": 294535658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661082923
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.show_term\">docs#tactic.interactive.show_term</a>)</p>",
        "id": 294535690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661082939
    },
    {
        "content": "<p>Tactics like <code>linarith</code> typically generate huge proof terms which are not human-comprehensible. Why do you want to see what Lean did? Do you actually mean \"how do I give a low-level proof\"?</p>",
        "id": 294535826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661083049
    },
    {
        "content": "<p>yes, I guess I want to understand how the proof was actually carried out</p>",
        "id": 294535973,
        "sender_full_name": "David Harvey",
        "timestamp": 1661083131
    },
    {
        "content": "<p>I tried putting <code>show_term {linarith},</code> in a line before <code>linarith,</code> is that correct?</p>",
        "id": 294536022,
        "sender_full_name": "David Harvey",
        "timestamp": 1661083168
    },
    {
        "content": "<p>indeed I get unreadable output</p>",
        "id": 294536134,
        "sender_full_name": "David Harvey",
        "timestamp": 1661083216
    },
    {
        "content": "<p>or another to put my question: how did the author of the comments know that <code>linarith</code> invoked <code>le_antisymm</code>?</p>",
        "id": 294536195,
        "sender_full_name": "David Harvey",
        "timestamp": 1661083259
    },
    {
        "content": "<p>the text <code>le_antisymm</code> does not appear in that long output. Hmmm.</p>",
        "id": 294536309,
        "sender_full_name": "David Harvey",
        "timestamp": 1661083328
    },
    {
        "content": "<p>maybe this will all make sense to me after I play around a bit more...</p>",
        "id": 294537009,
        "sender_full_name": "David Harvey",
        "timestamp": 1661083703
    },
    {
        "content": "<p><code>linarith</code> knows a ton of tricks for solving linear inequalities and it's not going to tell you which ones it used. If you want to prove the goal using <code>le_antisymm</code> instead and make a nicer proof term, feel free! If there's a goal of the form a=b and you have hypotheses a&lt;=b and b&lt;=a then you can be pretty sure that a tactic designed to solve a wide class of linear inequalities will use antisymmetry of &lt;= at this point.</p>",
        "id": 294537355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661083976
    },
    {
        "content": "<p>Looking at <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/00_first_proofs.lean#L51\">https://github.com/leanprover-community/tutorials/blob/master/src/exercises/00_first_proofs.lean#L51</a> , it doesn't seem to say anything about <code>le_antisymm</code> in particular, though, does it? It generally doesn't make much sense to claim anything about what specific lemmas are used in the proof generated by a strong tactic, nor does it matter all that much</p>",
        "id": 294539333,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1661085275
    },
    {
        "content": "<p>It's almost certainly a simplification of the author to say that <code>linarith</code> invokes <code>le_antisymm</code>. It does something roughly like that, but there is a whole bunch of other preprocessing that it does that would probably make it hard to find the <code>le_antisymm</code> analogue in the result</p>",
        "id": 294576271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661109164
    },
    {
        "content": "<p>Looking at the result of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>it appears the <code>le_antisymm</code> analogue is the very first theorem application, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linarith.eq_of_not_lt_of_not_gt\">docs#linarith.eq_of_not_lt_of_not_gt</a>, which is basically <code>le_antisymm</code> combined with <code>le_of_not_gt</code></p>",
        "id": 294576581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661109475
    },
    {
        "content": "<p>Mario, as Ruben pointed out, the author didn't say that, it is David's interpretation.</p>",
        "id": 294576740,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661109592
    },
    {
        "content": "<p>The author <a href=\"https://github.com/leanprover-community/tutorials/blob/846f15df6c292d81849937270f6201aa1ebdb571/src/exercises/00_first_proofs.lean#L69-L71\">wrote</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c1\">-- Now we know `x ≤ y` and `y ≤ x`, and Lean shouldn't need more help.</span>\n  <span class=\"c1\">-- `linarith` proves equalities and inequalities that follow linearly from</span>\n  <span class=\"c1\">-- the assumption we have.</span>\n</code></pre></div>",
        "id": 294576826,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661109633
    },
    {
        "content": "<p>In the version I have, it says on line 105: <code>In order to reach this stage, we need to know what \"linarith\" did for us. It invoked the lemma \"le_antisymm\" which says...</code>. Anyway, thanks everyone I think you have clarified for me what is going on. I'm still at the stage that I don't understand what is the relationship between what is going on in the left hand panel and the right hand panel, I'm just trying to understand a bit more what is happening under the hood.</p>",
        "id": 294585786,
        "sender_full_name": "David Harvey",
        "timestamp": 1661118731
    },
    {
        "content": "<p>Oh indeed we weren't looking at the same place.</p>",
        "id": 294585853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661118837
    },
    {
        "content": "<p>That line 105 is indeed a lie (for pedagogical purposes).</p>",
        "id": 294585905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661118874
    },
    {
        "content": "<p>But inspecting what <code>linarith</code> actually did is definitely not the way you're meant to improve your understanding here.</p>",
        "id": 294585929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661118919
    },
    {
        "content": "<p>I think you're trying to understand too much too early.</p>",
        "id": 294585992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661118975
    },
    {
        "content": "<p>When you read in the zeroth file of a tutorial a sentence like </p>\n<blockquote>\n<p><code>linarith</code> proves equalities and inequalities that follow linearly from the assumption we have.</p>\n</blockquote>\n<p>you're certainly not expected to start investigating the inner working of <code>linarith</code>.</p>",
        "id": 294586025,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661119054
    },
    {
        "content": "<p>If it's any help, I have no idea how <code>linarith</code> does what it does but I have a good understanding of which goals I can expect it to close.</p>",
        "id": 294731701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661188301
    }
]