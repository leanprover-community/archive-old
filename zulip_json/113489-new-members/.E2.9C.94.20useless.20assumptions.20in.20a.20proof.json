[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"477460\">@ebp</span> this is Lean 4, but you sure can have useless hypotheses inside your proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add_comm</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 277730757,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649079000
    },
    {
        "content": "<p>You're free to state whatever you want (if Lean accepts it) after the <code>:</code></p>",
        "id": 277730911,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649079068
    },
    {
        "content": "<p><code>bla</code> is only possibly a \"hypothesis\" in the Lean sense of the term though</p>",
        "id": 277731095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649079154
    },
    {
        "content": "<p>considering that you provided a proof of it</p>",
        "id": 277731126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649079174
    },
    {
        "content": "<p>Right, and if you want to have it at your disposal just to move on and then come back at it later, you can momentarily use <code>sorry</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 277731348,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649079293
    },
    {
        "content": "<p>hm, this indeed works in making such a \"local\" assumption, but it does not seem like I can then deduce things from this assumption. For example the following code does not give me hp in my tactic state anywhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hpq.left</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277732621,
        "sender_full_name": "ebp",
        "timestamp": 1649079876
    },
    {
        "content": "<p>You need to write <code>have hpq : p ∧ q := sorry,</code> like in the <a href=\"#narrow/stream/113489-new-members/topic/useless.20assumptions.20in.20a.20proof/near/277731348\">message above</a>.</p>",
        "id": 277732681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649079902
    },
    {
        "content": "<p>When you say <code>have hpq : p ∧ q</code>, Lean creates a new goal and puts it at the top of the queue. If you go <code>have hp : p, by exact hpq.left</code> right away, Lean will try to close the recently created goal with it, which will then fail</p>",
        "id": 277732868,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649079991
    },
    {
        "content": "<p>You might also be looking for <code>suffices</code></p>",
        "id": 277732930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649080031
    },
    {
        "content": "<p><code>suffices hpq : p ∧ q,</code> means \"let me assume that <code>hpq</code> is true for now, but remind me to come back to it at the end\"</p>",
        "id": 277732979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649080061
    },
    {
        "content": "<p>Thanks! Both ways are really helpful!</p>",
        "id": 277733263,
        "sender_full_name": "ebp",
        "timestamp": 1649080199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477460\">ebp</span> has marked this topic as resolved.</p>",
        "id": 277733287,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649080203
    }
]