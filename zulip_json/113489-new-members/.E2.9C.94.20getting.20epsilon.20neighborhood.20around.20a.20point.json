[
    {
        "content": "<p>Hello, I just finished the lean tutorial files and am now trying to formalize a proof that the only nonempty clopen subset of ℝ is ℝ.  I found that it would be useful to have a function that returns the epsilon neighborhood around a point, so I tried this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ε_neighborhood_at_x</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">ε</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>which doesn't work, since {z : ℝ // x-ε &lt; z ∧ z &lt; x + ε} has type \"type\", not set ℝ. What should do instead?</p>",
        "id": 248294306,
        "sender_full_name": "Dudu",
        "timestamp": 1628034218
    },
    {
        "content": "<p><code>{z : RR | x - eps &lt; ...}</code></p>",
        "id": 248294420,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628034350
    },
    {
        "content": "<p><code>{term : YourType // property term}</code> is the syntax for a subtype. A subtype is a separate type, one in which terms carry a value and a condition that they hold some property, like R+ or <code>fin n</code>. <code>{term : YourType | property term}</code> is the syntax for a <code>set YourType</code>, which is a collection of terms of type <code>YourType</code>, which has lemmas about subsets, complements, etc.</p>",
        "id": 248294599,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628034531
    },
    {
        "content": "<p>That was quick, thank you!</p>",
        "id": 248294635,
        "sender_full_name": "Dudu",
        "timestamp": 1628034601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"427414\">Dudu</span> has marked this topic as resolved.</p>",
        "id": 248294684,
        "sender_full_name": "Notification Bot",
        "timestamp": 1628034621
    },
    {
        "content": "<p>I this particular case I think mathlib has this definition as <code>metric.ball x ε</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.ball\">docs#metric.ball</a>)</p>",
        "id": 248330421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628071145
    },
    {
        "content": "<p>Note that your definition does not use <code>h</code>; and indeed, if you run <code>#lint</code> lean will tell you to remove it as it is not used!</p>",
        "id": 248330451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628071171
    },
    {
        "content": "<p>The kind of comment above (made by a non-mathematician) was the sort of thing I used to find completely confusing! Of <em>course</em> we are only interested in open balls around a point which contain the point! Letting the empty set be called an \"open ball\" will surely cause confusion, and perhaps even lead to incorrect proofs, right? Wrong. It turns out that when making <em>definitions</em> the system really wants to be unencumbered by hypotheses which are always true in practice but which are not logically necessary to make the definition get processed (for example our definition of a group ring R[G] does not use groups or rings! It only uses that R has a 0, and it's functions G -&gt; R sending all but finitely many things to 0). The idea is that the assumptions come later on -- in the theorems. For example you will at some point want to prove that x is in <code>metric_ball x e</code> and at that point you need to assume e&gt;0. Lean's philosophy is \"why assume it any earlier? From a practical point of view it just gets in the way\".</p>",
        "id": 248334036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628073850
    }
]