[
    {
        "content": "<p>I am trying to prove that the minimal polynomial of an element <code>x</code> is irreducible, without the assumption that the base ring is a field, but only an integral domain. It's rather annoying (if someone see a quick way to do it all suggestions are welcome...). At some point I need to use that if the minimal polynomial is the product <code>a * b</code> then <code>x</code> is a root of <code>a</code> or of <code>b</code>: this should be easy, and I wanted to use  <code>mul_eq_zero</code> as in the following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.minimal_polynomial</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">minimal_polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>  <span class=\"n\">_root_.irreducible</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">not_unit</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">irreducible_or_factor</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">not_unit</span> <span class=\"k\">with</span> <span class=\"n\">hirr</span> <span class=\"n\">hred</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hirr</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hred</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hred</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hred</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hred</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hzero</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.aeval</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">polynomial.aeval</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">mul_eq_zero.1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">domain.to_no_zero_divisors</span> <span class=\"n\">β</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"c1\">--exact h₂ does not work</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">minimal_polynomial</span>\n</code></pre></div>\n<p>Ignore the <code>sorry</code>, my problem is where the comment is. As you can see  <code>mul_eq_zero</code> asks to prove <code>no_zero_divisors β</code>, that is already strange since there is <code>[integral_domain β]</code> in the assumptions, but even if I try to do it it complains with some errors that I do not understand. Indeed  <code>h₂</code> seems to be exactly what it wants, but <code>exact h₂</code> doesn't work.</p>\n<p>What's going on? Thank you!</p>",
        "id": 216757744,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605398295
    },
    {
        "content": "<p>I get an error at not_is_unit.</p>",
        "id": 216758113,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605398790
    },
    {
        "content": "<p>Could it be becasue you have ring beta and integral domain beta?</p>",
        "id": 216758122,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605398803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Strange.20behavior.20of.20.60mul_eq_zero.60/near/216758122\">said</a>:</p>\n<blockquote>\n<p>Could it be becasue you have ring beta and integral domain beta?</p>\n</blockquote>\n<p>I tried replacing the original <code>[ring beta]</code> with <code>[integral_domain beta]</code> and deleting the second <code>[integral_domain beta]</code>, it fixed this.</p>",
        "id": 216758281,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605399025
    },
    {
        "content": "<p>It might not fix <code>not_is_unit</code>, because <code>not_is_unit</code> currently requires a field, but <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> probably has modified <code>not_is_unit</code> locally.</p>",
        "id": 216758318,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605399113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Ah yes sorry! That's because I have modified <code>not_is_unit</code> in <code>minimal_polynomial</code>, now it should work.</p>",
        "id": 216758371,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605399151
    },
    {
        "content": "<p>Ah ok, I still do not understand clearly what to do to add assumptions like this...</p>",
        "id": 216758410,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605399241
    },
    {
        "content": "<p>integral domain includes a ring structure, so when you have <code>ring X</code> and <code>integral_domain X</code> you have introduced two (independent) ring structures on the same type which confuses lean.</p>",
        "id": 216758495,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605399336
    },
    {
        "content": "<p>But what is the general strategy if I am working with <code>variable [ring R]</code> defined somewhere and in a lemma I need <code>[integral_domain R]</code>?</p>",
        "id": 216758564,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605399433
    },
    {
        "content": "<p>The best way to deal with this is to use the <code>section</code> command to have a section of your file where you start by defining <code>variables [ring beta]</code> and whatever other instances you want, for your general ring theorems, and then a new section starting with <code>variables [integral_domain beta]</code> for your integral domain theorems</p>",
        "id": 216758567,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605399436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> You almost answered my question <em>before</em> I asked it!</p>",
        "id": 216758586,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605399469
    },
    {
        "content": "<p>Another potential strategy is to use <code>[ring R]</code> and then later <code>[is_integral_domain R]</code>, but you won't always have that flexibility, and I'd still recommend going with the multiple sections.</p>",
        "id": 216758627,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605399491
    },
    {
        "content": "<p>I've put the (ugly) proof in quote <a href=\"https://github.com/leanprover-community/mathlib/issues/5006\">#5006</a>.</p>",
        "id": 216760549,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605401712
    },
    {
        "content": "<p>I could help golf this down, but the way this currently works for fields is a sequence of lemmas.</p>",
        "id": 216769592,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605415286
    },
    {
        "content": "<p>Do we know if some of them might work for a wider class of domains?</p>",
        "id": 216769597,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605415298
    },
    {
        "content": "<p>Well, I guess we know that the second-to-last lemma, <code>minimal_polynomial.prime</code>, definitely works for gcd or unique factorization domains, because that's equivalent to irreducible there</p>",
        "id": 216769663,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605415349
    },
    {
        "content": "<p>I think that the whole slew of results for fields should also hold for integrally closed domains - I think I read that minimal polynomials over integrally closed domains equal the minimal polynomial over the fraction field, which is really the key result here</p>",
        "id": 216773830,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605421996
    },
    {
        "content": "<p>I think that at the end everything boils down to en even stronger version of Gauss's lemma than the one I asked yesterday:  If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>∈</mo><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">P \\in R[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> is primitive and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>=</mo><msub><mi>Q</mi><mn>1</mn></msub><mo>⋅</mo><msub><mi>Q</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">P = Q_1 \\cdot Q_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is a non trivial factorization in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">K[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> then essentially <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">Q_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Q</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">Q_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are already in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> (I mean, up to multiplication and division by a scalar). For PID I have a simple proof, I do not know a proof for integrally closed domain (if it is true...) and here <a href=\"http://www-users.math.umn.edu/~garrett/m/algebra/notes/12.pdf\">http://www-users.math.umn.edu/~garrett/m/algebra/notes/12.pdf</a> there is a proof for UFD that seems to be a proof for GCD domains. (Essentially he consider divisibility in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> considering only multiplication by elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> and he proves Gauss's lemma in this context.)</p>",
        "id": 216783809,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605435479
    }
]