[
    {
        "content": "<p>Sometimes, a goal is split into some subgoals, and one would like to be able to use the result of one of them to prove the other ones.<br>\nOne way is to prove it first, but is there a better way ?</p>",
        "id": 266269725,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640706476
    },
    {
        "content": "<p>Not really. There are some hacks, in case you don't want to state the subgoal explicitly. I have sometimes wished that there was better tooling for this.<br>\nFor example, what you <em>can</em> do right now is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- Lean is now confused about the type of `aux`, so there is an open metavariable and there will be two goals</span>\n<span class=\"n\">some_tactic_that_creates_more_goals</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"c1\">-- subproof 1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">aux</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"c1\">-- subproof 2 (aux is now available in the context)</span>\n  <span class=\"n\">tac1</span><span class=\"o\">,</span> <span class=\"n\">tac2</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"c1\">-- we still need to prove aux</span>\n  <span class=\"n\">abacadabra</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 266270053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640706748
    },
    {
        "content": "<p>A sort of special case might be where you replace</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">some_tactic_that_creates_more_goals</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"c1\">-- subproof 1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">aux</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"n\">my_lemma</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">aux</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"c1\">-- now there are N remaining goals, they all have `aux` available in the context</span>\n</code></pre></div>",
        "id": 266270121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640706822
    },
    {
        "content": "<p>you can also write that <code>have</code> line as <code>suffices aux,</code></p>",
        "id": 266270479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640707173
    },
    {
        "content": "<p><code>flt_regular</code> has a tactic <code>may_assume</code> which is also nice for these sorts of things.</p>",
        "id": 266272037,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640708524
    }
]