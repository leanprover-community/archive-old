[
    {
        "content": "<p>Trying to use the matrix.notation to do some calculation, but am having issues doing simple transformations on scalar \\bu matrix. I had to write a new lemma that I think wasn't in data.matrix.notation to get the smul to even partially work. Looks like the current issue is that matrix.vec_empty isn't being inferred as the correct type. Am I misunderstanding something about the notation?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m&#39;</span> <span class=\"n\">n&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n&#39;</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">smul_cons_cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n&#39;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">vec_cons</span> <span class=\"n\">v</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">vec_cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]])</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]])</span> <span class=\"o\">:</span>\n        <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">smul_cons_cons</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">smul_cons</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">smul_empty</span><span class=\"o\">],</span> <span class=\"c1\">-- does not solve goal</span>\n  <span class=\"c1\">-- ⊢ matrix.vec_cons ![2] (2 • matrix.vec_empty) = ![![2]]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201521223,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592723160
    },
    {
        "content": "<p>that's <code>(2 : ℝ) • (@matrix.vec_empty (fin 1 → ℝ) : fin 0 → fin 1 → ℝ)</code></p>",
        "id": 201521611,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592723960
    },
    {
        "content": "<p>Do you mean that I did not notate my matrix properly?</p>",
        "id": 201521669,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592724091
    },
    {
        "content": "<p>I mean, the reason the goal has that <code>2 • matrix.vec_empty</code> term is because that's <code>(2 : ℝ) • (@matrix.vec_empty (fin 1 → ℝ) : fin 0 → fin 1 → ℝ)</code></p>",
        "id": 201521715,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592724134
    },
    {
        "content": "<p>so naturally <code>matrix.smul_empty</code> cannot solve that</p>",
        "id": 201521717,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592724146
    },
    {
        "content": "<p>you would need another simp lemma</p>",
        "id": 201521718,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592724150
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m&#39;</span> <span class=\"n\">n&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n&#39;</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">smul_cons_cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n&#39;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">vec_cons</span> <span class=\"n\">v</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">vec_cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">smul_empty&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"bp\">@</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">vec_empty</span> <span class=\"o\">(</span><span class=\"n\">m&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">vec_empty</span> <span class=\"o\">:=</span>\n<span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">elim0</span> <span class=\"n\">i</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]])</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]])</span> <span class=\"o\">:</span>\n        <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">smul_cons_cons</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">smul_cons</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">smul_empty</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">smul_empty&#39;</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201521789,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592724322
    },
    {
        "content": "<p>like this</p>",
        "id": 201521790,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592724329
    },
    {
        "content": "<p>Gotcha. I guess I can write another for matrices</p>",
        "id": 201521792,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592724338
    },
    {
        "content": "<p>Ah there it is. Would there be  a way to write one single one for n-dim tensors as opposed to just what we have now for 1-  and 2-dim?</p>",
        "id": 201521836,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592724379
    },
    {
        "content": "<p>no.</p>",
        "id": 201521904,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592724518
    },
    {
        "content": "<p>is there any theorem about n-dim tensors?</p>",
        "id": 201521910,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592724556
    },
    {
        "content": "<p>Not at the moment I don't think</p>",
        "id": 201521975,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592724705
    },
    {
        "content": "<p>Thanks for the insights here. I'll PR these two lemmas in, maybe I'll find some more on the way.</p>",
        "id": 201522023,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592724736
    },
    {
        "content": "<p>unless you invent a new notation for n-dim tensors (maybe using <code>list</code>), this wouldn't be possible</p>",
        "id": 201522024,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592724738
    },
    {
        "content": "<p>why wouldn't <code>![ ![ ![1] ] ]</code> indicate a 1x1x1 tensor?</p>",
        "id": 201522046,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592724770
    },
    {
        "content": "<p>it will, but you can't say \"forall n, ![![![... ( n times ) 1]]]\"</p>",
        "id": 201522112,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592724891
    },
    {
        "content": "<p>because \"... (n times)\" isn't Lean</p>",
        "id": 201522114,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592724901
    },
    {
        "content": "<p>Yakov, I haven't been reading that thread, but I see you're doing linear algebra and matrices. If you don't know what to do next, then I suggest defining the determinant of a family of vectors with respect to a basis. This hole in mathlib is annoying for the sphere eversion project.</p>",
        "id": 201522118,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592724907
    },
    {
        "content": "<p>why isn't this just determinant?</p>",
        "id": 201522203,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592725036
    },
    {
        "content": "<p>aha you want to take determinant of a function <code>\\io \\to M</code> w.r.t. some basis <code>\\io \\to M</code></p>",
        "id": 201522217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592725074
    },
    {
        "content": "<p>Do you mean just finite dimensional <code>\\io -&gt; M</code> or functional determinants?</p>",
        "id": 201522272,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592725181
    },
    {
        "content": "<p>Regarding the tensor notation, I just meant a lemma that wasn't just for <code>(x : α) : x • @matrix.vec_empty (m' → α)</code> but for <code>(x : α) : x • @matrix.vec_empty ( ... → ... → ... → α)</code></p>",
        "id": 201522329,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592725286
    },
    {
        "content": "<p>yes, and I'm saying there is no way to state it.</p>",
        "id": 201522398,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592725410
    },
    {
        "content": "<p>Got it.</p>",
        "id": 201522401,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592725425
    },
    {
        "content": "<p>I meant finite dimensional.</p>",
        "id": 201522502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592725569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20matrix.20notation.20and.20calculation/near/201522217\">said</a>:</p>\n<blockquote>\n<p>aha you want to take determinant of a function <code>\\io \\to M</code> w.r.t. some basis <code>\\io \\to M</code></p>\n</blockquote>\n<p>where <code>\\io</code> is a fintype</p>",
        "id": 201522696,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592725962
    },
    {
        "content": "<p>Yes.</p>",
        "id": 201522703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592725987
    },
    {
        "content": "<p>Something like this? Would your family of vectors be a finset? I might have the indices swapped here.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">determinant</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">is_basis</span><span class=\"bp\">.</span><span class=\"n\">repr</span> <span class=\"n\">hv</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 201526993,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592732874
    },
    {
        "content": "<p>Unless I'm misreading, you defined the number 1. You need a second family of vectors. And also note the actual work is to build a nice set of lemmas allowing to use it. For instance say <code>v</code> is your basis and <code>w</code> is your family of vectors, you want to know that <code>w</code> is a basis iff the determinant of <code>w</code> with respect to <code>v</code> is invertible.</p>",
        "id": 201527296,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592733314
    },
    {
        "content": "<p>Also note that I don't know what works over any commutative ring, even if you assume your module has a basis.</p>",
        "id": 201527346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592733373
    },
    {
        "content": "<p>I would need to look it up in Bourbaki.</p>",
        "id": 201527350,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592733387
    },
    {
        "content": "<p>Also, you should think about using Sébastien's multilinear map stuff to get free lemmas.</p>",
        "id": 201527855,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592734350
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/multilinear.html#multilinear_map\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/multilinear.html#multilinear_map</a></p>",
        "id": 201527865,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592734400
    },
    {
        "content": "<p>Here's my guess as to what it looks like. If you have two maps from a fintype \\i of size n to any torsion-free R-module M (R any commutative ring) and the image of the second is contained in the span of the image of the first, then there will be a well defined determinant, because in the nth wedge power of M the wedge power of the second will be a unique R-multiple of the nth wedge power of the first. There will be some id, symm and comp lemmas. If you drop the torsion free assumption then there will be some set of elements of R which work -- a coset of an ideal -- so it will be a predicate on R and there will be analogous symm and comp lemmas.</p>",
        "id": 201528242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592735078
    },
    {
        "content": "<p>I don't think you need anything to be a basis of anything. Maybe a development of wedge powers is what's needed</p>",
        "id": 201528300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592735163
    },
    {
        "content": "<p>Of course the proper way to do determinant would be develop exterior powers. That's why I wrote I was a bit sad to see people working towards an elementary proof of Cayley-Hamilton a couple of weeks ago. But having an elementary theory of determinants is better than nothing.</p>",
        "id": 201530045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592738264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20matrix.20notation.20and.20calculation/near/201521910\">said</a>:</p>\n<blockquote>\n<p>is there any theorem about n-dim tensors?</p>\n</blockquote>\n<p>There is some stuff like this under a non-math name I don't remember.</p>",
        "id": 201538299,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592752414
    },
    {
        "content": "<p>holor</p>",
        "id": 201538301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592752420
    },
    {
        "content": "<p>IIRC Alex originally used the name \"tensor\" and the mathematicians forced him to change it to \"holor.\"</p>",
        "id": 201538584,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592752589
    },
    {
        "content": "<blockquote>\n<p>Etymology<br>\nCoined by Parry Hiram Moon, and ‎Domina Eberle Spencer, from holo- (“whole”).</p>\n<p>Noun<br>\nholor (plural holors)</p>\n<p>(mathematics) A mathematical entity made up of one or more independent quantities, or merates, as distinguished from a tensor.</p>\n</blockquote>",
        "id": 201538595,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592752656
    },
    {
        "content": "<p>Do you think it is worth restating <code>matrix.notation</code> defns and lemmas in terms of holor? Right now, with regards to the questions about arbitrary n-dim structures, I'm experimenting with something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">matrix</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">matrix_notation</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_empty</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">fin_zero_elim</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">ni</span><span class=\"o\">,</span> <span class=\"n\">hni</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">mi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">ni</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">ni</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">mi</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">mi</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`!</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">vec_cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">vec_empty</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_head</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pos&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_tail</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_lt_succ</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">matrix_notation</span>\n</code></pre></div>",
        "id": 201548454,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592766264
    }
]