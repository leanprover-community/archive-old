[
    {
        "content": "<p>This is a tricky one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_1_f</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">pow_two_nonneg</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">pow_two_nonneg</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">pow_succ</span> <span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">pow_succ</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I just found some proofs <a href=\"https://answers.yahoo.com/question/index?qid=20130926104023AAjiVsk\">over here</a>, so I don't actually have a question.  I don't see anything that fits for this in <code>mathlib</code> directly.   I think I can adapt this proof which looks good:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">If</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">so</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"bp\">.</span>\n\n<span class=\"n\">Thus</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">so</span>\n\n<span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"n\">ab</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">Now</span> <span class=\"n\">we</span> <span class=\"n\">know</span> <span class=\"n\">that</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"n\">So</span> <span class=\"k\">if</span> <span class=\"n\">either</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">both</span> <span class=\"n\">a</span> <span class=\"n\">and</span> <span class=\"n\">b</span> <span class=\"n\">are</span> <span class=\"n\">positive</span><span class=\"o\">,</span> <span class=\"n\">or</span>\n\n<span class=\"o\">(</span><span class=\"n\">ii</span><span class=\"o\">)</span> <span class=\"n\">both</span> <span class=\"n\">a</span> <span class=\"n\">and</span> <span class=\"n\">b</span> <span class=\"n\">are</span> <span class=\"n\">negative</span><span class=\"o\">,</span> <span class=\"k\">then</span> <span class=\"mi\">3</span><span class=\"n\">ab</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">so</span>\n\n<span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>  <span class=\"c1\">-----&gt;  a^3 &gt; b^3.</span>\n\n<span class=\"n\">If</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"n\">and</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"n\">and</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"n\">so</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">.</span>\n\n<span class=\"o\">(</span><span class=\"n\">We</span> <span class=\"n\">can't</span> <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"n\">and</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"n\">since</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b.</span><span class=\"o\">)</span>\n\n<span class=\"n\">So</span> <span class=\"k\">in</span> <span class=\"n\">all</span> <span class=\"n\">cases</span> <span class=\"n\">we</span> <span class=\"k\">have</span> <span class=\"n\">that</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"n\">implies</span> <span class=\"n\">that</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 223837794,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611525538
    },
    {
        "content": "<p>A linear ordered ring isn't commutative and it looks like your proof uses commutativity of multiplication to say that <code>(a - b)^3 = (a^3 - 3*a^2*b + 3a*b^2 - b^3)</code></p>",
        "id": 223838433,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611525889
    },
    {
        "content": "<p>That proof looks quite a lot of algebraic manipulations  to me though, I'd be inclined to just use facts like<br>\n<code>0 &lt; b \\to a &lt; b \\to a * b &lt; b *b</code> which should be in the library, and split into cases based on whether <code>a</code> and <code>b</code> are positive or negative and build the proof that way.</p>",
        "id": 223838717,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611526290
    },
    {
        "content": "<p>If your ring is commutative then you can use that a^2+ab+b^2&gt;=0 by completing the square</p>",
        "id": 223839784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611527675
    },
    {
        "content": "<p>The setting is \"ordered domain\" which I've taken up to now to be <code>integral_domain</code> with <code>linear_ordered_ring</code>.  It's described more <a href=\"#narrow/stream/113489-new-members/topic/if.20a.20.3C.200.20and.20a*x.20.3C.200.20then.20x.20.3E.200/near/223821193\">here</a>. </p>\n<p>I just figured out how to prove a polynomial so I think I can grind through this now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">expand_mult</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">):</span>\n   <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">left_distrib</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">right_distrib</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It would be nice if Lean were hybridized a bit with some kind of self-validating pre-theorem-proving-style computer algebra so I could do stuff like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"n\">sympy</span> <span class=\"n\">as</span> <span class=\"n\">sp</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"n\">sp.symbols</span><span class=\"o\">(</span><span class=\"bp\">'</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b'</span><span class=\"o\">)</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">sp.expand</span><span class=\"o\">((</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">**</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">**</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">**</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">**</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">**</span><span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 223848468,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611539628
    },
    {
        "content": "<p>That does not compile for me, because you have two conflicting <code>ring</code> on <code>α</code></p>",
        "id": 223848536,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611539745
    },
    {
        "content": "<p>For me, this works instead: <code>[integral_domain α] [linear_order α]</code>. Perhaps I'm on an old mathlib</p>",
        "id": 223848580,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611539764
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">expand_mult</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ring_exp</span>\n</code></pre></div>",
        "id": 223848592,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611539817
    },
    {
        "content": "<p>No need for the positivity constraint</p>",
        "id": 223848600,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611539845
    },
    {
        "content": "<p>Great, thanks!  <code>ring_exp</code> is nice.  I will update my <code>mathlib</code> now to make sure I am in sync with latest.</p>",
        "id": 223848606,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611539878
    },
    {
        "content": "<p>OK so after doing <code>leanproject upgrade-mathlib</code>, your version works fine.  My version breaks in a weird way on the <code>ring</code> command.  It is both happy and sad.  It says \"goals accomplished\" but also complains about ring horners:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">norm_num.subst_into_mul</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tactic.ring.horner</span> <span class=\"mi\">1</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tactic.ring.horner</span> <span class=\"mi\">1</span> <span class=\"n\">b</span> <span class=\"mi\">2</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">tactic.ring.horner</span> <span class=\"mi\">1</span> <span class=\"n\">b</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">tactic.ring.horner_atom</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">tactic.ring.horner_atom</span> <span class=\"n\">b</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">tactic.ring.horner</span> <span class=\"mi\">1</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">tactic.ring.horner</span> <span class=\"mi\">1</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>on input</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">expand_mult</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">):</span>\n   <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">left_distrib</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">right_distrib</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223849046,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611540493
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/3V0Z-WLb0JlPIHOToMEjLmbr/Screenshot-from-2021-01-24-21-08-38.png\">Screenshot-from-2021-01-24-21-08-38.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3V0Z-WLb0JlPIHOToMEjLmbr/Screenshot-from-2021-01-24-21-08-38.png\" title=\"Screenshot-from-2021-01-24-21-08-38.png\"><img src=\"/user_uploads/3121/3V0Z-WLb0JlPIHOToMEjLmbr/Screenshot-from-2021-01-24-21-08-38.png\"></a></div>",
        "id": 223849064,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611540535
    },
    {
        "content": "<p>You'd have to do a lot of inspection of intermediate terms, but what you'd find is that by saying <code>[integral_domain α] [linear_ordered_ring α]</code>, you're invoking two separate, non-identical <code>[ring α]</code>. That means that <code>ring</code> is trying to bring both sides of the equation to the same terms, but is running into the problem that it doesn't know which of the two (now completely independent) inferred definitions of <code>(+)</code> it should be using. That's my understanding of that error.</p>",
        "id": 223849202,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611540734
    },
    {
        "content": "<p><code>ring</code> should probably throw an error there instead of clearing the goal. cc: <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 223849220,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611540809
    },
    {
        "content": "<p>Oh I see, yeah <code>ring</code> isn't very defensive against weird multiplications on the type. <code>simp</code> I think has the same problem</p>",
        "id": 223849345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611540983
    },
    {
        "content": "<p>I'm not sure it's worth the expense</p>",
        "id": 223849368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611541047
    },
    {
        "content": "<p>This is a bit sad because if I switch from <code>linear_ordered_ring</code> to <code>linear_order</code> I lose <code>sub_pos</code> and probably other stuff in my theorem <code>ex_1_3_1_f </code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">lemma expand_mult (α: Type u) [integral_domain α] [linear_ordered_ring α]</span>\n<span class=\"cm\">   (a b : α) (h: 0 &lt; a):</span>\n<span class=\"cm\">   (b-a)^3 = b^3-3*a*b^2+3*a^2*b-a^3 :=</span>\n<span class=\"cm\">begin</span>\n<span class=\"cm\">  rw pow_succ (b-a) 2,</span>\n<span class=\"cm\">  rw pow_succ (b-a) 1,</span>\n<span class=\"cm\">  simp,</span>\n<span class=\"cm\">  rw sub_eq_add_neg,</span>\n<span class=\"cm\">  repeat { rw left_distrib, rw right_distrib, },</span>\n<span class=\"cm\">  ring,</span>\n<span class=\"cm\">end -/</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">expand_mult</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ring_exp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_1_f</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">sub_pos.2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">pow_pos</span> <span class=\"n\">h1</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">expand_mult</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I haven't actually needed <code>integral_domain</code> up to now,  just <code>ordered_ring</code> or <code>linear_ordered_ring</code> for these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_1_a</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"n\">add_lt_add_right</span> <span class=\"n\">h</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_1_b</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sub_lt_sub_iff_left</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt0_lt_flip</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"c1\">-- Ruben Van de Velde</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pos_of_mul_neg_right</span> <span class=\"n\">hx</span> <span class=\"n\">ha.le</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_1_c</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">a</span><span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">sub_lt_zero.mpr</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sub_lt_zero.1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_sub</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">lt0_lt_flip</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">neg_sub</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">neg_pos.1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sub_lt_zero.1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">sub_pos.2</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_neg_of_neg_of_pos</span> <span class=\"n\">h</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_1_d</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hacbc</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_right</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hacbc</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_1_e</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">bit0_eq_zero.mp</span> <span class=\"o\">(</span><span class=\"n\">bit0_eq_zero.mp</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm not sure at this point exactly what combination of Lean structures equals Birkhoff and Mac Lane's notion of <code>ordered domain</code>.</p>\n<p>It's more confusing because it seems from above I have to make sure my inheritance hierarchy is a tree, not a lattice, i.e. no two classes with a common superclass.</p>",
        "id": 223849417,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611541111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/if.20a.20.3C.20b.20then.20a.5E3.20.3C.20b.5E3/near/223849368\">said</a>:</p>\n<blockquote>\n<p>I'm not sure it's worth the expense</p>\n</blockquote>\n<p>Fair enough. Might be worth documenting these cases somewhere.</p>",
        "id": 223849474,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611541209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> The theorem should hold for a <code>linear_ordered_ring</code> without the integral domain part</p>",
        "id": 223849551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611541341
    },
    {
        "content": "<p>actually <code>linear_ordered_comm_ring</code></p>",
        "id": 223849571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611541385
    },
    {
        "content": "<p>which is implied by the conjunction of <code>linear_ordered_ring</code> and <code>integral_domain</code></p>",
        "id": 223849577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611541417
    },
    {
        "content": "<p>Thanks Mario, all of the exercises are happy with <code>linear_ordered_comm_ring</code>.</p>",
        "id": 223854098,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611548683
    },
    {
        "content": "<p>Done, finally.  I found this to be incredibly hard.  I expect a one-line version from Mario soon:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">together</span>  <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sub_eq_zero.mp</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">factor_expr</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">together</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">))),</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">move_cubes_left</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n   <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">negneg</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">this_is_negative</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">hha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">hhb</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">negneg</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">zero_lt_three</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">mul_pos</span> <span class=\"n\">h3</span> <span class=\"n\">hha</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">mul_pos</span> <span class=\"n\">h4</span> <span class=\"n\">hhb</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">neg_lt_zero.mpr</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:=</span> <span class=\"n\">neg_sub</span> <span class=\"n\">b</span>  <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h7</span> <span class=\"n\">at</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">linarith.mul_neg</span> <span class=\"n\">h6</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nontrivial_of_lt</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">this_is_positive</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alt0</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">zero_lt_three</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">mul_neg_of_pos_of_neg</span> <span class=\"n\">h3</span> <span class=\"n\">alt0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">mul_neg_of_neg_of_pos</span> <span class=\"n\">h4</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">neg_lt_zero.mpr</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:=</span> <span class=\"n\">mul_pos_of_neg_of_neg</span> <span class=\"n\">h5</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:=</span> <span class=\"n\">neg_sub</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h8</span> <span class=\"n\">at</span> <span class=\"n\">h7</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h7</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nontrivial_of_lt</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">simp_pow</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">tactic.ring_exp.pow_p_pf_zero</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_lt_0</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb0</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">ne.le_iff_lt</span> <span class=\"n\">hb0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">not_lt.mp</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">odd_pos_neg_neg</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pow_bit1_neg_iff.mpr</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">this_be_negative</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">halt0</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">hblt0</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">zero_lt_three</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">sub_lt_zero.mpr</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">mul_pos_of_neg_of_neg</span>  <span class=\"n\">halt0</span> <span class=\"n\">hblt0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">mul_pos</span> <span class=\"n\">h3</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:=</span> <span class=\"n\">sub_lt_zero.mpr</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:=</span> <span class=\"n\">linarith.mul_neg</span> <span class=\"n\">h7</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nontrivial_of_lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_1_f</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">sub_pos.2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">pow_pos</span> <span class=\"n\">h1</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">pow_succ'</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_eq_neg_add</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">right_distrib</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">left_distrib</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">ring_exp</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">move_cubes_left</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">factor_expr</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">this_is_negative</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h1</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trans</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">sub_lt_zero.1</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"n\">ha</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ha0</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ha0</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">halt0</span> <span class=\"o\">:=</span> <span class=\"n\">is_lt_0</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">ha0</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3alt0</span> <span class=\"o\">:=</span> <span class=\"n\">odd_pos_neg_neg</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">halt0</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3bgt0</span> <span class=\"o\">:=</span> <span class=\"n\">pow_pos</span> <span class=\"n\">hb</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">h3alt0</span> <span class=\"n\">h3bgt0</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hb0</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hb0</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">simp_pow</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">hblt0</span> <span class=\"o\">:=</span> <span class=\"n\">is_lt_0</span> <span class=\"n\">α</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"n\">hb0</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"n\">this_be_negative</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"n\">halt0</span> <span class=\"n\">hblt0</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hf1</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trans</span> <span class=\"n\">h3</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n      <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224424329,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611887508
    },
    {
        "content": "<p>On the other hand, this one took 30 seconds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_1_g</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">):</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mul_mono_nonneg</span> <span class=\"n\">hc</span> <span class=\"n\">ha</span>\n</code></pre></div>",
        "id": 224424714,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611887937
    },
    {
        "content": "<p>This one also pretty easy except I have no idea what just happened at the end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_ring</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_2</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">pow_two</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224425077,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611888368
    },
    {
        "content": "<p>This one is also free out of the box:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_4</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">):</span>\n  <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">abs</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">abs_abs_sub_abs_le_abs_sub</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 224425299,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611888688
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex_1_3_1_f</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"n\">strict_mono_pow_bit1</span> <span class=\"mi\">1</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>one line version delivered</p>",
        "id": 224516939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611946230
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> that's great!  What's a <code>bit0</code> and a <code>bit1</code>?  I've seen these around but I don't know what to make of this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s</span>  <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span>  <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>                 <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n<span class=\"kd\">def</span> <span class=\"n\">bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 224828361,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1612240871
    },
    {
        "content": "<p>it is what it says. <code>bit0 n</code> is the function <code>2*n</code> and <code>bit1 n</code> is <code>2*n+1</code></p>",
        "id": 224829589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612242364
    },
    {
        "content": "<p>and 37 is the number <code>bit1 (bit0 (bit1 (bit0 (bit0 has_one.one))))</code></p>",
        "id": 224829725,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612242555
    },
    {
        "content": "<p>Thanks. I get it now.  It's a way of spelling out natural numbers in base 2.  There are 18 <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bit0\">docs#bit0</a> theorems and 19 <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bit1\">docs#bit1</a> theorems in mathlib.   I didn't find any commentary.  The application above was powerful.  It would be nice to have an article on <a href=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a> exploring the power of <code>bit</code> and how those 37 theorems relate.</p>",
        "id": 224865333,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1612269809
    }
]