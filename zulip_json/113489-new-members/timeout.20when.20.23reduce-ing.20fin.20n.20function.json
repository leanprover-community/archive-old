[
    {
        "content": "<p>Hi, Whenever I try to #reduce a function defined recursively on fin n, I get a timeout. However using #eval works just fine. The minimal example is the factorial function in the documentation for fin.has_well_founded:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">factorial</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">factorial</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i.lt_succ_self.trans</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">factorial</span> <span class=\"mi\">2</span> <span class=\"c1\">--timeout</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">@</span><span class=\"n\">factorial</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"c1\">--works fine</span>\n</code></pre></div>\n<p>Am I missing something or doing something wrong?</p>",
        "id": 241538085,
        "sender_full_name": "Alex Reynaldi",
        "timestamp": 1622814923
    },
    {
        "content": "<p>Kernel computation is slow :(</p>",
        "id": 241538410,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622815045
    },
    {
        "content": "<p>Is it really just that slow though? because even #reduce factorial 0 seems to timeout</p>",
        "id": 241538738,
        "sender_full_name": "Alex Reynaldi",
        "timestamp": 1622815184
    },
    {
        "content": "<p>It can't figure out which fin n you mean.</p>",
        "id": 241539639,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622815504
    },
    {
        "content": "<p>Because 2 is 0 in fin 0, 1, or 2</p>",
        "id": 241539717,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622815536
    },
    {
        "content": "<p>What happens if you say #reduce factorial (2 : fin 3)?</p>",
        "id": 241539964,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622815627
    },
    {
        "content": "<p>Can you make this a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? I just tried this and your code doesn't compile -- you're missing imports or opens or something (you can just edit the original message, no need to repost).</p>",
        "id": 241540068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622815675
    },
    {
        "content": "<p>sorry about that, I just forgot to import data.fin</p>",
        "id": 241540351,
        "sender_full_name": "Alex Reynaldi",
        "timestamp": 1622815780
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"bp\">@</span><span class=\"n\">factorial</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"c1\">-- 1</span>\n<span class=\"k\">#reduce</span> <span class=\"bp\">@</span><span class=\"n\">factorial</span> <span class=\"mi\">2</span> <span class=\"mi\">0</span> <span class=\"c1\">-- 1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">factorial</span> <span class=\"n\">one</span> <span class=\"c1\">-- nope</span>\n</code></pre></div>",
        "id": 241540778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622815924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> , #reduce factorial (2 : fin 3) also timeouts for me. I can reproduce what <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> put up though.</p>",
        "id": 241542055,
        "sender_full_name": "Alex Reynaldi",
        "timestamp": 1622816395
    },
    {
        "content": "<p><code>#reduce @factorial 3 1</code> also timeouts on my end</p>",
        "id": 241542634,
        "sender_full_name": "Alex Reynaldi",
        "timestamp": 1622816640
    },
    {
        "content": "<p>I think the issue is with the code produced by the equation compiler, maybe something to do with the fact that <code>has_well_founded</code> is involved? Anyway, the following works fine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">factorial</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">subtype.rec_on</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">nat.rec_on</span> <span class=\"n\">m</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">ih</span><span class=\"o\">))</span>\n\n<span class=\"k\">#reduce</span> <span class=\"bp\">@</span><span class=\"n\">factorial</span> <span class=\"mi\">3</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">factorial</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 241550435,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1622819712
    },
    {
        "content": "<p>Yes this works, thank you!</p>",
        "id": 241552532,
        "sender_full_name": "Alex Reynaldi",
        "timestamp": 1622820677
    }
]