[
    {
        "content": "<p>Tips on how I can try to simply down a goal like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">option.rec</span> <span class=\"mi\">1</span> <span class=\"n\">non_id.val</span>\n<span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">some</span> <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">not_one</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">}))</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>when I have <code>h : a=1</code> in local context? I want to beta-reduce that lambda</p>",
        "id": 257749146,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634325072
    },
    {
        "content": "<p>Does <code>split_ifs</code> do something?</p>",
        "id": 257749300,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634325144
    },
    {
        "content": "<p>No, it says \"no if-then-else expressions to split\". I'm guessing because it's inside the lambda.</p>",
        "id": 257749584,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634325277
    },
    {
        "content": "<p>This boils down to something of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">option.rec</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>and I'm not clear on why the <code>((λ (a : M), f a) a)</code> isn't turning itself into <code>f a</code></p>",
        "id": 257749671,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634325324
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 257749828,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634325382
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h1.one</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257751723,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634326212
    },
    {
        "content": "<p>Think that pretty much captures it</p>",
        "id": 257751786,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634326241
    },
    {
        "content": "<p>To process <code>option.rec X Y ((λ (a : M), f a) a) = 1</code> I tried <code>conv</code> mode. First <code>to_lhs</code> and then <code>congr</code>. But the <code>congr</code> only gave me two goals, the <code>X</code> and the <code>Y</code>, and didn't leave me with a goal for the third argument to <code>option.rec</code> (the <code>((λ (a : M), f a) a)</code>).</p>",
        "id": 257751913,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634326310
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.split_ifs</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h1.one</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257752150,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634326412
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h1.one</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257752322,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634326483
    },
    {
        "content": "<p>Ah, right, those do work on my \"mwe\". I guess that means it's not a very good mwe. :c<br>\nWell I would like to directly set up a goal of the form <code>option.rec X Y ((λ (a : M), f a) a) = 1</code> for a \"true\" mwe, but then I get an error that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"n\">option.rec'</span> <span class=\"n\">application</span><span class=\"o\">,</span> <span class=\"n\">elaborator</span> <span class=\"n\">has</span> <span class=\"n\">special</span> <span class=\"n\">support</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">application</span> <span class=\"o\">(</span><span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">handled</span> <span class=\"n\">as</span> <span class=\"n\">an</span> <span class=\"s2\">\"eliminator\"</span><span class=\"o\">),</span> <span class=\"n\">but</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">must</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"n\">metavariables</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 257752617,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634326627
    },
    {
        "content": "<p>Lemme try to set it up better... sorry, and thank you for the help...</p>",
        "id": 257752638,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634326639
    },
    {
        "content": "<p>Don't make defs using tactics (to first order). The f def can be \"fun a, if a = 1 then none else some a\".</p>",
        "id": 257754389,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634327401
    },
    {
        "content": "<p>Good to know <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> , why? Don't tactics get 'compiled down' to a proof term anyway?</p>",
        "id": 257776486,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634337891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> , okay here is an <em>actual</em> functional mwe that gives the same error that I'm actually getting: <a href=\"https://gist.github.com/Timeroot/8fd43e5b58a4f910ad05b098383c788f\">https://gist.github.com/Timeroot/8fd43e5b58a4f910ad05b098383c788f</a></p>",
        "id": 257779389,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634339581
    },
    {
        "content": "<p>I have <code>option.rec ...</code> on the left. Given a <code>rec</code> on the left side of the equation, I expected to be able to reduce this to a separate goal for each of the inductive types. But I don't know how to do that.</p>\n<p>Alternately, it's <code>option.rec 0 X Y</code>, and 0 is definitionally equal to none, I expect to be able to just reduce that to X. But I don't know how to get <code>option.rec</code> to \"evaluate\".</p>\n<p>Alternately, given that given that Y is of the form <code>(\\lambda a, foo a) a</code>, it would be good to beta-reduce that lambda, but I can't get that to happen either.</p>",
        "id": 257779901,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634339921
    },
    {
        "content": "<p><code>split</code> and <code>split_ifs</code> don't do anything, and I can't seem to force it to turn the <code>0</code> into <code>none</code> (but as I understand, I shouldn't have to if it's equivalent underneath?)</p>",
        "id": 257779942,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634339953
    },
    {
        "content": "<p>Tactics produce proof terms, but not necessarily very minimal ones so often there is a lot of extra junk in the term generated that makes proving things about a def harder. For lemmas it doesn't matter what the term is however so using tactics isnt ever really a problem there</p>",
        "id": 257780049,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634340024
    },
    {
        "content": "<p>I see, makes sense</p>",
        "id": 257780200,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634340169
    }
]