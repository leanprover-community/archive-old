[
    {
        "content": "<p>Lean should do more automatic unfolding by default. It is rather unreasonable (imho) for the following to fail:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hl</span> <span class=\"n\">hl&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">l&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">l&#39;</span><span class=\"bp\">|</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">abs_pos_of_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sub_ne_zero_of_ne</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">l&#39;</span><span class=\"bp\">|</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hl</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hl&#39;</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N&#39;</span> <span class=\"n\">hN&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198593472,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590343628
    },
    {
        "content": "<p>Could you include your imports?</p>",
        "id": 198593593,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590343804
    },
    {
        "content": "<p>Which imports affect this and how exactly?</p>",
        "id": 198593650,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590343927
    },
    {
        "content": "<p>If we copy paste your code it doesn't know what <code>|</code> is for instance</p>",
        "id": 198593655,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590343952
    },
    {
        "content": "<p>Just make it so that other people can cut and paste</p>",
        "id": 198593722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590344075
    },
    {
        "content": "<p>It's <code>notation `|`x`|` := abs x</code> from <code>tuto_lib</code>. Just fixed it.</p>",
        "id": 198593727,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590344091
    },
    {
        "content": "<p>If I cut and paste it doesn't work. Please just make it work</p>",
        "id": 198593739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590344156
    },
    {
        "content": "<p>Now i get an invalid expression at the le</p>",
        "id": 198593753,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590344162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> Which part is failing, and what would you expect? If you change <code>def</code> to <code>abbreviation</code>, lean will be more eagerly unfolding.</p>",
        "id": 198593794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590344239
    },
    {
        "content": "<p>But usually <code>def</code> should be fine.</p>",
        "id": 198593797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590344247
    },
    {
        "content": "<p><code>(by linarith)</code> fails. I'd expect it to be able to \"see through\" <code>let ε := ...</code>.</p>",
        "id": 198593845,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590344319
    },
    {
        "content": "<p>Uncommenting <code>have ε_pos : ...</code> and chancing <code>(by linarith)</code> to <code>ε_pos</code> works. Which is frustrating considering that it is pretty much the same thing.</p>",
        "id": 198593884,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590344380
    },
    {
        "content": "<p>I'd expect Lean to automatically unfold those.</p>",
        "id": 198593946,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590344456
    },
    {
        "content": "<p>On another note, I found the use of lemmas like <code>one_eq_succ_zero</code> weird in the Natural Number Game, I'd expect those to unfold naturally. It could be something to do with the Natural Number Game in particular (like <code>rw</code> not solving reflexivity) or something to do how Lean has <code>has_one</code> among many other such type classes, probably the latter.</p>",
        "id": 198594012,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590344544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> Does it help to use <code>set</code> instead of <code>let</code>?</p>",
        "id": 198594020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590344572
    },
    {
        "content": "<p><code>one_eq_succ_zero</code> can be proved by <code>refl</code> but I don't tell people that, because I am trying to teach mathematicians and mathematicians don't understand the concept of definitional equality because their concept of a definition is more fluid than the computer science definition</p>",
        "id": 198594035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590344612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I see, indeed that makes perfect sense.</p>",
        "id": 198594085,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590344654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> No, <code>set</code> is appears so behave exactly like <code>let</code> in this situation.</p>",
        "id": 198594099,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590344697
    },
    {
        "content": "<p><code>  set ε := |l - l'| / 4 with hε,</code> is what you want</p>",
        "id": 198594170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590344811
    },
    {
        "content": "<p>I haven't encountered many situation like <code>one_eq_succ_zero</code> outside the Natural Number Game. Lean automatically unfold (or replace by definitional equality, I don't know which expression is more appropriate) definitions in these (definitional equality) cases, I'd hope.</p>",
        "id": 198594175,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590344822
    },
    {
        "content": "<p>The point of <code>set</code> is that if you use it with <code>with</code> then it adds the hypothesis which is stopping <code>linarith</code> from working into the context.</p>",
        "id": 198594179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590344835
    },
    {
        "content": "<p>I see! Thank you!</p>",
        "id": 198594183,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590344850
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">set</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">l&#39;</span><span class=\"bp\">|</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"k\">with</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hl</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hl&#39;</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N&#39;</span> <span class=\"n\">hN&#39;</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 198594185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590344851
    },
    {
        "content": "<p>Any particular reason why tactics can't \"see through\" <code>:=</code> definitions? I'd imagine it may be a performance concern.</p>",
        "id": 198594230,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590344886
    },
    {
        "content": "<p>But then, making theorems and lemmas short and opaque should solve the deal while letting local let definitions be transparent.</p>",
        "id": 198594243,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590344933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/More.20automatic.20unfolding/near/198594185\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">set</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">l&#39;</span><span class=\"bp\">|</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"k\">with</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hl</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hl&#39;</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N&#39;</span> <span class=\"n\">hN&#39;</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Doesn't work for me <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 198594251,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590344937
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hl</span> <span class=\"n\">hl&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">l&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">l&#39;</span><span class=\"bp\">|</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">abs_pos_of_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sub_ne_zero_of_ne</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">set</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">l&#39;</span><span class=\"bp\">|</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"k\">with</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hl</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hl&#39;</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N&#39;</span> <span class=\"n\">hN&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198594264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590344958
    },
    {
        "content": "<p>As far as I have seen mathlib already mostly tends to the \"short lemmas\" side.</p>",
        "id": 198594265,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590344961
    },
    {
        "content": "<p>Some tactics seem to see through local <code>let</code> bindings while others don't, I never figured out why.</p>",
        "id": 198594672,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590345700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Could you list such tactics? I'd be interested to see them.</p>",
        "id": 198595897,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590347811
    },
    {
        "content": "<p>I think <code>rw</code> does for example</p>",
        "id": 198595970,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590347923
    },
    {
        "content": "<p>Oddly enough I just needed this exact combination (<code>linarith</code> with the equality hypothesis generated by <code>set</code>)</p>",
        "id": 198680156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590420609
    }
]