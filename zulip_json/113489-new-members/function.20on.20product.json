[
    {
        "content": "<p>Is there somewhere in Mathlib where I can find very primitive results on functions such that fxg \\comp hxe = (f \\comp h) x (g \\comp e) where all functions have different domains and codomains exept from the obvious ones which need to be equal to make the equation work? It's not hard to prove it by myself but it would be cool to know if all these results are in Mathlib as I cannot really locate them. (I know the product function is written in Lean with λ abstraction but it was too long to write it with lean notation)</p>",
        "id": 201258059,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592481738
    },
    {
        "content": "<p>Do you know how to use <code>library_search</code>?</p>",
        "id": 201258568,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592482102
    },
    {
        "content": "<p>There are four strategies for finding statements in mathlib:</p>\n<ol>\n<li>learn the <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> scheme</li>\n<li>use <code>library_search</code> (sometime it helps to write a separate <code>example</code> with the statement you're after)</li>\n<li>ask here</li>\n<li>meander around in the source code!</li>\n</ol>",
        "id": 201258671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592482203
    },
    {
        "content": "<p>I think following those more-or-less in order is good. In particular, by the time, you get to 3, you'll have an <code>example</code> that you can post with your question.</p>",
        "id": 201267835,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592487178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> I would encourage you to formalise your questions (i.e. actually post a piece of working code with a <code>sorry</code> and say \"what is this precise function called\"). If you do that, you get much more efficient answers, and often, using <code>library_search</code>, you can even find out the answers yourself.</p>",
        "id": 201268074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592487280
    },
    {
        "content": "<p>I am looking in Mathlib for lemmas of the kind:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">comp_of_prod_eq_prod_of_comp</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>library_search suggests refine rfl, but that is a tactic and does not point anywhere in mathlib. I am also wondering if there is a convenient notation for product of functions such as <code>(λ x : A × C, (f x.fst, g x.snd))</code></p>",
        "id": 201276921,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592491214
    },
    {
        "content": "<p><code>rfl</code> means \"this is true by definition\"</p>",
        "id": 201277210,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592491371
    },
    {
        "content": "<p>Not everything which is true by definition has a name in mathlib</p>",
        "id": 201277669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592491600
    },
    {
        "content": "<p>Product function -- good question!</p>",
        "id": 201277783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592491668
    },
    {
        "content": "<p>Does also <code>refine rfl</code> mean it is true by definition? The point is that if the goal is the rhs of = in the above lemma, exact lhs seems not to work, even if this is a simplification of my lemma so I am not entirely sure. That is why I needed to write the lemma separately</p>",
        "id": 201278307,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592491886
    },
    {
        "content": "<p>You should be able to replace <code>by refine rfl</code> with just <code>rfl</code>. <code>refine</code> without any underscores just does the same thing as <code>exact</code>.</p>",
        "id": 201278470,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592491951
    },
    {
        "content": "<p>This probably counts as a bug in<code>library_search</code> that it doesn't just print <code>rfl</code> here...</p>",
        "id": 201278538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592491983
    },
    {
        "content": "<p>I should also have <code>library_search</code> defer the <code>solve_by_elim</code> round until after the \"only unfold <code>reducible</code> stuff\" round...</p>",
        "id": 201278675,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592492045
    },
    {
        "content": "<p>Sometimes you have to use <code>change</code> to change the goal into something defeq before Lean will accept a proof of that via <code>exact</code>.</p>",
        "id": 201278737,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592492074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/function.20on.20product/near/201278538\">said</a>:</p>\n<blockquote>\n<p>This probably counts as a bug in<code>library_search</code> that it doesn't just print <code>rfl</code> here...</p>\n</blockquote>\n<p>Well... then \"Try this\" would also have to replace the <code>by</code>...</p>",
        "id": 201278748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592492078
    },
    {
        "content": "<p>What if I wanted to define <code>(λ x : A × C, (f x.fst, g x.snd))</code> to be <code>f.prod g</code>? I think I could probably do it but  I am a bit lost on what would be the standard way to do it</p>",
        "id": 201298633,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592500413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> This is \"difficult\" to achieve, because functions are such a basic notion that there is no good dot notation for them at the moment.</p>",
        "id": 201299320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592500747
    },
    {
        "content": "<p>You could get <code>function.prod f g</code> though</p>",
        "id": 201299354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592500760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/function.20on.20product/near/201299354\">said</a>:</p>\n<blockquote>\n<p>You could get <code>function.prod f g</code> though</p>\n</blockquote>\n<p>Are you suggesting to define <code>function.prod</code>? Or does it exist already? (In case my Lean says it does not exist!)</p>",
        "id": 201299774,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592500978
    },
    {
        "content": "<p>This is <code>prod.map</code>.</p>",
        "id": 201301453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592501787
    },
    {
        "content": "<p>Aah, I didn't pay attention to the maths...</p>",
        "id": 201301860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592501976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> <code>function.prod</code> (following current [informal?] naming conventions) would mean <code>f : A → B</code>, <code>g : A → C</code>, and then <code>function.prod f g : A → B × C</code>, the natural map <code>\\lam x, (f x, g x)</code>.</p>",
        "id": 201302032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592502072
    },
    {
        "content": "<p>I think <code>prod.map</code>, which is what you want, already exists in mathlib.</p>",
        "id": 201302076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592502098
    }
]