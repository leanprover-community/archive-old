[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"mi\">ùüò</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>  <span class=\"c1\">--Church zero</span>\n</code></pre></div>\n<p>\"unexpected token\" .  It doesn't like blackboard-bold zero.   Similarly boldface S  is \"unexpected token\".   On the other hand <br>\n\\bbN   is  refused presumably because it's already defined (but I thought I could still have it for a member of my class, but no).  <br>\nI don't know the rules for what symbols I may use and I don't know the rules for typing things in different fonts.   I'd like to make my <br>\nLean correspond as well as possible to my TeX.</p>",
        "id": 232363758,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1617070863
    },
    {
        "content": "<p>I think the tool you want is <code>notation</code>. Here's an example from src/category_theory/category/default.lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">category_struct</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kd\">extends</span> <span class=\"n\">has_hom.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">id</span>       <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">comp</span>     <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"mi\">ùüô</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">category_struct.id</span> <span class=\"c1\">-- type as \\b1</span>\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">‚â´</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"n\">category_struct.comp</span> <span class=\"c1\">-- type as \\gg</span>\n</code></pre></div>",
        "id": 232364420,
        "sender_full_name": "Greg Price",
        "timestamp": 1617071462
    },
    {
        "content": "<p>OK,  it likes</p>\n<p>(ùîΩ:M)      -- finite Frege cardinals, least class closed under inhabited successor<br>\n(‚Ñï‚Ñï:M)      -- Church numbers<br>\n(‚Ñç:M)      -- least class closed under nonempty successor</p>\n<p>without 'notation',  but I need</p>\n<p>(ChurchZero:M)  --Church zero<br>\n(notation: <code>ùüò</code>:= ChurchZero)</p>\n<p>Fine.  I can do that.   I won't worry about why it needs notation in one case and not in the others.</p>\n<p>Curiously the backquotes after 'notation' don't show up here on Zulip.  They are there when I click the Edit button...<br>\nand I'm not allowed to use just one N for the Church numbers.</p>",
        "id": 232365731,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1617072699
    },
    {
        "content": "<p>Those backquotes are getting interpreted as part of the markup of the message itself. You can put triple-backticks around the whole code block, and then it'll get formatted as Lean code.</p>",
        "id": 232365928,
        "sender_full_name": "Greg Price",
        "timestamp": 1617072861
    },
    {
        "content": "<p>Next to the edit button, there's a menu which has a \"View source\" option on anyone's messages (not only your own). So you can use that to see exactly what the markup other people are using looks like.</p>",
        "id": 232366063,
        "sender_full_name": "Greg Price",
        "timestamp": 1617072982
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">reserve</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">‚Ñï‚Ñï</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>      <span class=\"c1\">-- Church numbers</span>\n<span class=\"o\">(</span><span class=\"n\">ChurchZero</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>  <span class=\"c1\">--Church zero</span>\n<span class=\"o\">(</span><span class=\"kd\">notation</span><span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"mi\">ùüò</span><span class=\"bp\">`</span><span class=\"o\">:=</span> <span class=\"n\">ChurchZero</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kd\">infix</span>  <span class=\"bp\">‚àà</span> <span class=\"o\">:=</span>  <span class=\"n\">mem</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M</span><span class=\"o\">)</span>  <span class=\"c1\">--Church successor</span>\n<span class=\"o\">(</span><span class=\"n\">N_members</span><span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">‚Ñï‚Ñï</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">w</span><span class=\"o\">,(</span><span class=\"mi\">ùüò</span> <span class=\"bp\">‚àà</span> <span class=\"n\">w</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">‚àà</span> <span class=\"n\">w</span> <span class=\"bp\">‚Üí</span><span class=\"n\">S</span> <span class=\"n\">u</span> <span class=\"bp\">‚àà</span> <span class=\"n\">w</span><span class=\"o\">))</span><span class=\"bp\">‚Üí</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>It still doesn't like the zero in the last line,  I wonder why?</p>",
        "id": 232370315,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1617076639
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? That will make it easier for someone to answer your question.</p>",
        "id": 232372816,
        "sender_full_name": "Greg Price",
        "timestamp": 1617078900
    },
    {
        "content": "<p>(and what's the error you're seeing?)</p>",
        "id": 232372870,
        "sender_full_name": "Greg Price",
        "timestamp": 1617078941
    },
    {
        "content": "<p>It's not related to your question, but I'm curious for what <code>T</code> you instantiate <code>instance : model T := sorry</code> for that definition</p>",
        "id": 232386688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617090427
    },
    {
        "content": "<p>Normally (take a look at for example the definition of a group in mathlib) the way to do this would be to define a notation class <code>has_fancy_zero</code> and then let Model extend this.</p>",
        "id": 232392593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617093967
    },
    {
        "content": "<p>That example (I think)  IS a MWE,  or at least it is a minimal non-working example,  and if you change the bb zero in the last line to \"ChurchZero\",  then it works,  so that shows the problem is with that one character.    What I don't understand is that some non-ascii characters, such as bbF and bbS  are accepted without complaint,  while others (as in this example) need further work  before they can be used.   So,  which characters/fonts can I use and have them \"just work\"?    As opposed to the related questions about which I care less,  \"why do some work and some not?\" and \"how can I make the others work?\".</p>",
        "id": 232448039,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1617119118
    },
    {
        "content": "<p>To answer Eric,   I never instantiate that class,  I just say open Model   and develop a theory in which every theorem has parameter M.  Of course there are a lot more members of the class than extracted for this example.</p>",
        "id": 232448598,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1617119313
    },
    {
        "content": "<p>The problem is that bb0 is not an identifier character. If you really want to use it as an identifier and not just a notation you can put it in \"french quotes\" like <code>\\f&lt;&lt;\\bb0\\f&gt;&gt;</code></p>",
        "id": 232453189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617120907
    },
    {
        "content": "<p>The set of identifier characters contains some unicode but not all (not most)</p>",
        "id": 232453407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617120972
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">bool</span> <span class=\"nf\">is_letter_like_unicode</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x3b1</span>  <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x3c9</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">!=</span> <span class=\"mh\">0x3bb</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"c1\">// Lower greek, but lambda</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x391</span>  <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x3A9</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">!=</span> <span class=\"mh\">0x3A0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">!=</span> <span class=\"mh\">0x3A3</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"c1\">// Upper greek, but Pi and Sigma</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x3ca</span>  <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x3fb</span><span class=\"p\">)</span> <span class=\"o\">||</span>               <span class=\"c1\">// Coptic letters</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x1f00</span> <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x1ffe</span><span class=\"p\">)</span> <span class=\"o\">||</span>              <span class=\"c1\">// Polytonic Greek Extended Character Set</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x2100</span> <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x214f</span><span class=\"p\">)</span> <span class=\"o\">||</span>              <span class=\"c1\">// Letter like block</span>\n            <span class=\"p\">(</span><span class=\"mh\">0x1d49c</span> <span class=\"o\">&lt;=</span> <span class=\"n\">u</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mh\">0x1d59f</span><span class=\"p\">);</span>              <span class=\"c1\">// Latin letters, Script, Double-struck, Fractur</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>double struck letters are identifier characters, but double struck numbers are not</p>",
        "id": 232453607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617121057
    },
    {
        "content": "<p>I'm not sure exactly what the origin of this list of characters is TBH. It is a bit of a hodge-podge; I always just search lean for \"coptic\" to find it</p>",
        "id": 232453824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617121151
    },
    {
        "content": "<p>However, in mathlib we generally stick to using ascii alphanumerics in identifiers, and only use unicode in notations</p>",
        "id": 232454071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617121240
    },
    {
        "content": "<p>(Aside: should there be a linter for this? Is this desirable? I think there are a few fields named <code>Œ±</code> but I can't think of many other exceptions.)</p>",
        "id": 232454307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617121324
    },
    {
        "content": "<p><code>Œπ</code> also shows up in some names in category theory like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.fork.Œπ_of_Œπ\">docs#category_theory.limits.fork.Œπ_of_Œπ</a></p>",
        "id": 232454695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617121486
    },
    {
        "content": "<p>I figured out how to determine what symbols Lean can use.   Here's how:</p>\n<ol>\n<li>Find the symbol you want printed somewhere in Unicode, e.g. in the \"symbol tables\" in TeXshop.</li>\n<li>Paste the desired symbol into Lean.</li>\n<li>Hover over it.  If Lean can use it,  it will pop up instructions how to type it.    If those instructions don't pop up,<br>\nthen Lean can't cope with that symbol.</li>\n</ol>",
        "id": 234058698,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1618158795
    },
    {
        "content": "<p>Does this also apply to notation? For example if you have a symbol you want to use and the instructions don't pop up, can you still define notation for the symbol and then you can use it anyway?</p>",
        "id": 234064694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618164617
    },
    {
        "content": "<p>Michael, that isn't a very good heuristic - it relies on the contents of the json file in vscode-lean, which probably contains symbols not used by lean, and frequently needs updating when someone invents new notation</p>",
        "id": 234070652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618170409
    },
    {
        "content": "<p><code>#check (\\lam is_this_token_legal_in_a_name, 0)</code> is the reliable way to check if a token is legal in a name.</p>",
        "id": 234070782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618170539
    }
]