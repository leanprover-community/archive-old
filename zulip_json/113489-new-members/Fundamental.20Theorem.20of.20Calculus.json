[
    {
        "content": "<p>Out of curiosity, what work remains to be done in Lean to prove the second FTC? Is it something a Lean beginner could help with? I'm also curious about related calculus theorems like Taylor's theorem.</p>",
        "id": 215353354,
        "sender_full_name": "Benjamin",
        "timestamp": 1604339157
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> recently said that it was not too hard. But I guess it helps if you have some experience with the library.</p>",
        "id": 215354683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604339727
    },
    {
        "content": "<p>It's not too hard if you put enough assumptions. If you assume that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">f'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is continuous then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><msup><mi>f</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>d</mi><mi>t</mi><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\int_a^b f'(t)\\,dt = f(b) - f(a)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.399828em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.044008em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span> can be deduced from what we already have.</p>",
        "id": 215361525,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604343094
    },
    {
        "content": "<p>Here is a sketch of the proof of the \"easy\" version from <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> :</p>",
        "id": 215396940,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604362662
    },
    {
        "content": "<p>The easy version of FTC-2 would go like this, right?</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_image_sub_le_of_norm_deriv_le_segment'\">docs#norm_image_sub_le_of_norm_deriv_le_segment'</a> to prove, under appropriate hypotheses,</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">constant_of_deriv_zero</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_within_at</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_of_deriv_eq</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hF₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_within_at</span> <span class=\"n\">F₁</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hF₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_within_at</span> <span class=\"n\">F₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_init</span> <span class=\"o\">:</span> <span class=\"n\">F₁</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">F₂</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">F₁</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">F₂</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<ul>\n<li>given <code>F₁</code> which is 1x continuously differentiable, let <code>f</code> be its derivative, introduce <code>F₂</code> satisfying</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F₂</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">F₁</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">a..u</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/integral_has_deriv_at_right\">docs#integral_has_deriv_at_right</a> to prove that <code>F₂</code> has derivative <code>f</code></p>\n<ul>\n<li>conclude that <code>F₁ = F₂</code>, i.e., <code>F₁ a - F₁ u = ∫ x in a..u, f x</code>.</li>\n</ul>",
        "id": 215396943,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604362668
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 215397066,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604362747
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 215397068,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604362750
    },
    {
        "content": "<p>Feel free to implement this plan.</p>",
        "id": 215397613,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604363239
    },
    {
        "content": "<p>It's important to assume only right differentiability and right continuity if we want this theorem to work without modifications for piecewise smooth functions (e.g., for contour integrals along polygonal curves).</p>",
        "id": 215397692,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604363294
    },
    {
        "content": "<p>Possible collaborators -- <span class=\"user-mention\" data-user-id=\"314430\">@Benjamin Davidson</span> was asking me about this the other day, and <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> might be interested too.</p>",
        "id": 215397772,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604363382
    },
    {
        "content": "<p>When you say weak version, does that mean the strongest version is out of reach for now?</p>",
        "id": 215398300,
        "sender_full_name": "Benjamin",
        "timestamp": 1604363839
    },
    {
        "content": "<p>I think that the weak version can be done in 1-2 evenings. The strongest version can be done but it will require much more time.</p>",
        "id": 215400214,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604365366
    },
    {
        "content": "<p>Also I think that we should have <code>constant_of_right_deriv_zero</code> and <code>eq_of_right_deriv_eq</code> in <code>mathlib</code> anyway.</p>",
        "id": 215400345,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604365487
    },
    {
        "content": "<p>(together with <code>deriv_within (Icc a b)</code> versions)</p>",
        "id": 215400382,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604365526
    },
    {
        "content": "<p>I was just working on this the other day!  I'd be up to  collaborating with anyone else who is interested in this</p>",
        "id": 215400476,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1604365565
    },
    {
        "content": "<p>And once you have these theorems, FTC-2 a few lines of code away.</p>",
        "id": 215400519,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604365599
    },
    {
        "content": "<p>I modified what I had already done to follow Heather's sketch. Note that the proof depends on <code>constant_of_right_deriv_zero</code>, which remains unproven , and which I modified so that its goal is now for <code>x ∈ Ico a b</code>, not <code>Icc</code>. I copied and pasted all the variables declared throughout <code>measure_theory.interval_integral</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.interval_integral</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">second_countable_topology</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">set</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">continuous_linear_map</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"n\">smul_right</span> <span class=\"n\">sub_apply</span> <span class=\"n\">smul_right_apply</span> <span class=\"n\">coe_fst'</span> <span class=\"n\">coe_snd'</span> <span class=\"n\">map_sub</span><span class=\"o\">)</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interval_integral</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">second_countable_topology</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">ca</span> <span class=\"n\">cb</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"n\">la</span> <span class=\"n\">la'</span> <span class=\"n\">lb</span> <span class=\"n\">lb'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">ua</span> <span class=\"n\">ub</span> <span class=\"n\">va</span> <span class=\"n\">vb</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">constant_of_right_deriv_zero</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_within_at</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_of_right_deriv_eq</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_within_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span>  <span class=\"n\">has_deriv_within_at</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_init</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">has_deriv_at_right_integrable</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FTC_filter</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">Ioi</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">Ioi</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hderiv</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_within_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hcont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_within_at</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hintg</span> <span class=\"o\">:</span> <span class=\"n\">interval_integrable</span> <span class=\"n\">f'</span> <span class=\"n\">volume</span> <span class=\"n\">a</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">a..y</span><span class=\"o\">,</span> <span class=\"n\">f'</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_of_right_deriv_eq</span> <span class=\"n\">y</span> <span class=\"n\">H</span> <span class=\"n\">hderiv</span>\n        <span class=\"o\">((</span><span class=\"n\">integral_has_deriv_within_at_right</span> <span class=\"n\">hintg</span> <span class=\"n\">hcont</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">const_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n      <span class=\"n\">add_sub_cancel'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interval_integral</span>\n</code></pre></div>",
        "id": 215413136,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1604379969
    },
    {
        "content": "<p>You shouldn't assume <code>[FTC_filter ...]</code>. You should use one of the available instances instead.</p>",
        "id": 215415948,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604383979
    },
    {
        "content": "<p>I suggest that you start with <code>constant_of_right_deriv_zero</code> and <code>eq_of_right_deriv_eq</code> because right now their declared types are unprovable.</p>",
        "id": 215416036,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604384137
    },
    {
        "content": "<p>The types miss some quantifiers and possibly more assumptions.</p>",
        "id": 215416086,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604384176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/Fundamental.20Theorem.20of.20Calculus/near/215415948\">said</a>:</p>\n<blockquote>\n<p>You shouldn't assume <code>[FTC_filter ...]</code>. You should use one of the available instances instead.</p>\n</blockquote>\n<p>What are the available instances?</p>",
        "id": 215417595,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1604385995
    },
    {
        "content": "<p>I think I figured out what you meant about <code>constant_of_right_deriv_zero</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">constant_of_right_deriv_zero</span> <span class=\"o\">(</span><span class=\"n\">hcont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hderiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_within_at</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_le_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">using</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">norm_image_sub_le_of_norm_deriv_right_le_segment</span>\n    <span class=\"n\">hcont</span> <span class=\"n\">hderiv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">norm_le_zero_iff</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n</code></pre></div>",
        "id": 215424079,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1604392477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"314430\">Benjamin Davidson</span> <a href=\"#narrow/stream/113489-new-members/topic/Fundamental.20Theorem.20of.20Calculus/near/215417595\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/Fundamental.20Theorem.20of.20Calculus/near/215415948\">said</a>:</p>\n<blockquote>\n<p>You shouldn't assume <code>[FTC_filter ...]</code>. You should use one of the available instances instead.</p>\n</blockquote>\n<p>What are the available instances?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/interval_integral.FTC_filter\">docs#interval_integral.FTC_filter</a></p>",
        "id": 215443902,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604404808
    },
    {
        "content": "<p>There are four instances: <code>(a, pure a, ⊥)</code>, <code>(a, 𝓝[Ici a], 𝓝[Ioi a])</code>, <code>(a, 𝓝[Iic a], 𝓝[Iic a])</code>, and <code>(a, 𝓝 a, 𝓝 a)</code>.</p>",
        "id": 215443950,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604404855
    },
    {
        "content": "<p>Hmm... I'm not totally sure how to do that but I'll try to see if I can figure it out. </p>\n<p>Does the proof for <code>constant_of_right_deriv_zero</code> look okay?</p>",
        "id": 215502325,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1604433183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"314430\">Benjamin Davidson</span> <a href=\"#narrow/stream/113489-new-members/topic/Fundamental.20Theorem.20of.20Calculus/near/215502325\">said</a>:</p>\n<blockquote>\n<p>Hmm... I'm not totally sure how to do that but I'll try to see if I can figure it out. </p>\n<p>Does the proof for <code>constant_of_right_deriv_zero</code> look okay?</p>\n</blockquote>\n<ol>\n<li>\n<p>If you <code>apply interval_integral.integral_has_deriv_within_at_right</code> then it should figure out <code>t</code> based on <code>s</code> automatically.</p>\n</li>\n<li>\n<p>Yes, the proof of <code>constant_of_right_deriv_zero</code> looks okay.</p>\n</li>\n</ol>",
        "id": 215530344,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604451499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Update: Right now I can get it to work if I swap <code>Ioi</code> for <code>Ici</code> in a couple of places. I'm not sure if that's permissible, but regardless I'm trying to assess if I can do it without making those changes.</p>",
        "id": 215611831,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1604509683
    },
    {
        "content": "<p>It's OK</p>",
        "id": 215644384,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604525703
    },
    {
        "content": "<p>In many cases statements with <code>Ioi</code> and <code>Ici</code> are equivalent.</p>",
        "id": 215644445,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604525741
    },
    {
        "content": "<p>Okay, that's what I figured. I was trying to see if I could derive (for example) <code>has_deriv_within_at f (f' y) t y</code> from <code>has_deriv_within_at f (f' y) s y</code> given <code>s ⊆ t</code> but have not been successful.</p>",
        "id": 215648064,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1604528047
    },
    {
        "content": "<p>The implication goes in the other direction.</p>",
        "id": 215667139,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604545817
    },
    {
        "content": "<p>However, <code>has_deriv_within_at f f' (Ici x) x</code> is equivalent to <code>has_deriv_within_at f f' (Ioi x) x</code>.</p>",
        "id": 215667233,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604545944
    },
    {
        "content": "<p>I added those <code>Ioi x</code> theorems to <code>mean_value.lean</code> but now I think that I was wrong, and we should use <code>Ici x</code>. I don't expect that you will do the migration. Just use <code>Ici x</code> whenever it's more convenient for you.</p>",
        "id": 215667269,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604546017
    },
    {
        "content": "<p>If you need this equivalence, then you can leave <code>sorry</code> in your PR, and I'll fill it in.</p>",
        "id": 215667481,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604546273
    },
    {
        "content": "<p>Got it, thanks!!</p>",
        "id": 215673662,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1604555618
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4945\">#4945</a> (work in progress)</p>",
        "id": 215996301,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1604824696
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"314430\">@Benjamin Davidson</span>  and <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> .  Are you currently working on the second part of FTC? I saw that there's a branch with some progress. I realised that I needed it to prove something else and I ended up stuck in the same place! Namely showing something along the lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ⊢ continuous_on (λ (x : ℝ), (∫ (y : ℝ) in a..x, f' y) + f a) (Icc a b)</span>\n</code></pre></div>\n<p>I believe it should more or less follow from <code>is_compact.exists_forall_ge</code> and a few lemmas about <code>interval_integral</code>. In any case, I'd be happy to help so let me know if you have a plan :-)</p>",
        "id": 219237912,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1607449438
    },
    {
        "content": "<p>Actually, we know that the integral of a continuous function is differentiable, not only continuous.</p>",
        "id": 219248382,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607454486
    },
    {
        "content": "<p>My plan was to give new users another week or two to make a PR, then do it myself if it will not be done yet.</p>",
        "id": 219248544,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607454573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Sorry it's been taking me so long, I've gotten stuck on a couple of parts of it and have been trying to figure them out but to no avail as of yet. I did manage to fix some of it, though, so I'll push those changes now so that you can see them. I would definitely appreciate some assistance with the remaining pieces.</p>",
        "id": 219304912,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1607499581
    },
    {
        "content": "<p>If you have some specific questions, ask them here, please.</p>",
        "id": 219347641,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607526085
    }
]