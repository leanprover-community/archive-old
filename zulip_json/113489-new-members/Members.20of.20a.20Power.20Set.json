[
    {
        "content": "<p>Hello, I have been trying to state and prove some theorems in Lean, in order to build up my comfort level in the system.</p>\n<p>What I would like to prove is that there is no set X, for which (powerset X \\subseteq X). <br>\nThe issue I have been having is if I let X have type set U, then the powerset of X is of the type set set U. So I cannot use the subset relation.</p>\n<p>For anyone who can help me I'll put how I wanted to state the theorem so that we can work out which parts to replace.</p>\n<p>variable U : Type*<br>\nvariable X : set U<br>\ntheorem powerset_not_subset_set  :  \\neq(\\powerset X \\subseteq X) :=<br>\nbegin<br>\nend</p>",
        "id": 300592826,
        "sender_full_name": "Brandon Sisler",
        "timestamp": 1664062578
    },
    {
        "content": "<p>hello! if you don't mind, could you wrap the code in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>? it helps with formatting and makes it easier to open the code in the web editor</p>",
        "id": 300593125,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664062934
    },
    {
        "content": "<p>also, you might want to check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set\">docs#Set</a> (which is a ZFC set)</p>",
        "id": 300593437,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664063304
    },
    {
        "content": "<p>One way to state this using type theory is to say that there is no injective map from <code>set X</code> to <code>X</code>. But to properly formulate the assertion you mentioned is actually quite non-trivial in type theory (we do have <code>zfc</code> somewhere in mathlib).</p>",
        "id": 300593439,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664063316
    },
    {
        "content": "<p>Oh yes, sure thing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kd\">variable</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">powerset_not_subset_set</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">neq</span><span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">powerset</span> <span class=\"n\">X</span> <span class=\"bp\">\\</span><span class=\"n\">subseteq</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300593537,
        "sender_full_name": "Brandon Sisler",
        "timestamp": 1664063417
    },
    {
        "content": "<p>on a side note, I think you may have meant <code>\\ne</code> instead of <code>\\neq</code> (<strong>edit:</strong> <code>\\not</code>, rather)</p>",
        "id": 300593590,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664063489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <br>\nAhh, that's pretty nifty, thanks!</p>",
        "id": 300593742,
        "sender_full_name": "Brandon Sisler",
        "timestamp": 1664063652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> <br>\nYes, I think you are right</p>",
        "id": 300593752,
        "sender_full_name": "Brandon Sisler",
        "timestamp": 1664063681
    },
    {
        "content": "<p><code>\\not</code>  rather?</p>",
        "id": 300593871,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664063824
    },
    {
        "content": "<p>oh whoops</p>",
        "id": 300593879,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664063836
    },
    {
        "content": "<p>yeah, that</p>",
        "id": 300593886,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664063848
    },
    {
        "content": "<p>In set theory it is straightforward:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.zfc.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">),</span> <span class=\"n\">a.powerset</span> <span class=\"bp\">⊆</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Set.mem_irrefl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Set.mem_powerset</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300606087,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1664079355
    },
    {
        "content": "<p>on a side note, does anyone think we should err on the side of not posting complete proofs unless the person specifically asks for one? I'm just thinking about how it can be educational to work things out for yourself, even if it's a bit difficult... but then again, it can also be educational to see how someone else proves it, especially if they're more knowledgeable</p>\n<p>(not trying to single Patrick out! his answer just got me thinking about the issue)</p>",
        "id": 300607271,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664080949
    },
    {
        "content": "<p>I'm sorry for posting the proof without a <code>spoiler</code>. I assumed Brandon wants the proof in type theory, so I posted a set-theoretic analogy.</p>",
        "id": 300611817,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1664086517
    }
]