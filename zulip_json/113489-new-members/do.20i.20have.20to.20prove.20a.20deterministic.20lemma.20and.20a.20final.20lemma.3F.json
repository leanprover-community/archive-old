[
    {
        "content": "<p>the LoVe repository states that i should prove these two lemmas to make sure that my machine model is sane—why?</p>",
        "id": 242159469,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623300870
    },
    {
        "content": "<p><a href=\"https://github.com/blanchette/logical_verification_2020/blob/master/lean/love08_operational_semantics_demo.lean#L475\">https://github.com/blanchette/logical_verification_2020/blob/master/lean/love08_operational_semantics_demo.lean#L475</a> <a href=\"https://github.com/blanchette/logical_verification_2020/blob/master/lean/love08_operational_semantics_demo.lean#L429\">https://github.com/blanchette/logical_verification_2020/blob/master/lean/love08_operational_semantics_demo.lean#L429</a></p>",
        "id": 242159485,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623300898
    },
    {
        "content": "<p>alright off for lunch! i'll read your responses later</p>",
        "id": 242159606,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623301054
    },
    {
        "content": "<p>You don't have to prove a determinism lemma, but it is good to do so if your semantics is deterministic because it is easier to reason with a deterministic semantics</p>",
        "id": 242164873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623307121
    },
    {
        "content": "<p>you can conceptualize a deterministic state function as a sequence of steps in a line</p>",
        "id": 242164887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623307140
    },
    {
        "content": "<p>a nondeterministic state function has a tree of steps, so when you talk about eventually reaching some state you have to be careful about whether you mean that all paths through the tree end in a terminal state, or just one does, or for every node in the tree there exists a path to some terminal state</p>",
        "id": 242164941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623307202
    },
    {
        "content": "<p>the second theorem is often not true; a state which does not step but is also not a final state is called a stuck state and usually indicates some kind of error condition. The normal way this theorem is stated is that <em>if</em> some typing condition on the program holds, <em>then</em> the corresponding machine state is not stuck, and it is called the \"progress lemma\"</p>",
        "id": 242165102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623307338
    }
]