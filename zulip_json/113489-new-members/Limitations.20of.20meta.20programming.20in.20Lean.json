[
    {
        "content": "<p>Hello, <br>\nI have been reading about meta programming in Lean and I am under the impression that one can only generate expressions as described by the type <code>expr</code>. <br>\nIs that true? Is it possible to generate inductive types or structures?</p>",
        "id": 218506935,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1606874166
    },
    {
        "content": "<p>Hi! I don't know a thing about metaprogramming in Lean but I just tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n</code></pre></div>\n<p>and it worked fine. I would thoroughly recommend Rob Lewis' videos on metaprogramming, hang on, I'll dig out the link.</p>",
        "id": 218507053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606874295
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/playlist?list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2\">https://www.youtube.com/playlist?list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2</a></p>",
        "id": 218507087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606874349
    },
    {
        "content": "<p>Thanks for answering.. I actually meant writing a program that generates the inductive type based on some input. <br>\nAn example is: given a type class describing monoid, generate the monoid term language as an inductive type. This requires some introspection of a given type class.</p>",
        "id": 218507258,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1606874531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Limitations.20of.20meta.20programming.20in.20Lean/near/218507087\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://www.youtube.com/playlist?list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2\">https://www.youtube.com/playlist?list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2</a></p>\n</blockquote>\n<p>Those are really good tutorials.. I have just been watching them and found them very useful.</p>",
        "id": 218507304,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1606874595
    },
    {
        "content": "<p>You can always use <code>emit_code_here</code> and construct whatever you want as if it was just lean code. But I don't know if this is what you're looking for. </p>\n<p>Am I correct in guessing that when an inductive type is defined, that it's equivalent to a bunch of constants being defined?</p>",
        "id": 218509641,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606877368
    },
    {
        "content": "<p>By constant I mean writing <code>constant a : ...</code></p>",
        "id": 218509701,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606877413
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.add_inductive\">docs#environment.add_inductive</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.add_ginductive\">docs#environment.add_ginductive</a></p>",
        "id": 218509740,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606877514
    },
    {
        "content": "<p>TIL <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 218509887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606877667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Limitations.20of.20meta.20programming.20in.20Lean/near/218509740\">said</a>:</p>\n<blockquote>\n<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.add_inductive\">docs#environment.add_inductive</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.add_ginductive\">docs#environment.add_ginductive</a></p>\n</blockquote>\n<p>that's the closest to what I am looking for. Thank you <br>\nI have more questions: </p>\n<ul>\n<li>what is the difference between context, accessed using local_context, and the environment?  </li>\n<li>how can one access the current environment?</li>\n</ul>",
        "id": 218512084,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1606880199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Limitations.20of.20meta.20programming.20in.20Lean/near/218509641\">said</a>:</p>\n<blockquote>\n<p>You can always use <code>emit_code_here</code> and construct whatever you want as if it was just lean code. But I don't know if this is what you're looking for. </p>\n<p>Am I correct in guessing that when an inductive type is defined, that it's equivalent to a bunch of constants being defined?</p>\n</blockquote>\n<p>Thanks for the insights. <br>\nWhat I really need is a meta program to manipulate lean definitions and generate inductive types. The output is determined based on the input, so emitting code won't be useful. <br>\nAn inductive type can be seen as a bunch of constants, but for my purpose I need the \"packaging\".</p>",
        "id": 218512164,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1606880337
    },
    {
        "content": "<p>Oh, I meant something silly like this:<br>\n<a href=\"#narrow/stream/113488-general/topic/universes/near/214247264\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/universes/near/214247264</a></p>",
        "id": 218513242,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606881830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Limitations.20of.20meta.20programming.20in.20Lean/near/218513242\">said</a>:</p>\n<blockquote>\n<p>Oh, I meant something silly like this:<br>\n<a href=\"#narrow/stream/113488-general/topic/universes/near/214247264\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/universes/near/214247264</a></p>\n</blockquote>\n<p>That is a string-based version of what I am trying to do.. I actually want to be able to be given any algebraic structure (a la universal algebra) and generate (among other things) its raw version. So I need to be able to be able to talk in the meta program about the \"components\" of the structure.</p>",
        "id": 218513890,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1606882727
    },
    {
        "content": "<p>Yes, I understand, and agree that writing proper meta code with <code>expr</code> is the right approach. It would be really cool to have some automation to generate the \"raw\" version of classes by stripping out the Prop-valued fields.</p>",
        "id": 218514038,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606883001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"358884\">Yasmine Sharoda</span> <a href=\"#narrow/stream/113489-new-members/topic/Limitations.20of.20meta.20programming.20in.20Lean/near/218512084\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Limitations.20of.20meta.20programming.20in.20Lean/near/218509740\">said</a>:</p>\n<blockquote>\n<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.add_inductive\">docs#environment.add_inductive</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.add_ginductive\">docs#environment.add_ginductive</a></p>\n</blockquote>\n<p>that's the closest to what I am looking for. Thank you <br>\nI have more questions: </p>\n<ul>\n<li>what is the difference between context, accessed using local_context, and the environment?  </li>\n<li>how can one access the current environment?</li>\n</ul>\n</blockquote>\n<p>In brief,</p>\n<ul>\n<li>the environment contains everything defined \"at top level\", like <code>def</code>s and <code>axiom</code>s, while the local context contains the hypotheses in the proof state, like function arguments and variables bound by <code>have</code>,</li>\n<li><code>tactic.get_env</code>.</li>\n</ul>",
        "id": 218533549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606902033
    },
    {
        "content": "<p>This is really helpful, thank you. <br>\nI still have one more problem trying to define a unit type <code>U</code> with a constructor <code>u</code>. Here is the code: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mk_const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n <span class=\"n\">expr.const</span> <span class=\"n\">n</span> <span class=\"o\">[</span><span class=\"n\">level.zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">uType</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">environment</span> <span class=\"o\">:=</span>\n <span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n    <span class=\"n\">new_env</span> <span class=\"bp\">←</span> <span class=\"n\">environment.add_inductive</span> <span class=\"n\">e</span> <span class=\"bp\">`</span><span class=\"n\">U</span> <span class=\"o\">[]</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">expr.sort</span> <span class=\"n\">level.zero</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">mk_const</span> <span class=\"bp\">`</span><span class=\"n\">U</span><span class=\"o\">)]</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"n\">new_env</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">uType</span>\n</code></pre></div>\n<p>and I get the following error at <code>#eval uType</code>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">incorrect</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"kd\">universe</span> <span class=\"n\">levels</span> <span class=\"kd\">parameters</span> <span class=\"n\">for</span> <span class=\"sc\">'U'</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"n\">expected</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">provided</span>\n</code></pre></div>",
        "id": 218580390,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1606926028
    },
    {
        "content": "<p>You don't need to give <code>level.zero</code> as an argument to <code>expr.const</code> in <code>mk_const</code>. <code>U</code> doesn't take any universe arguments, so you don't need to provide any.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mk_const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n <span class=\"n\">expr.const</span> <span class=\"n\">n</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">uType</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">environment</span> <span class=\"o\">:=</span>\n <span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n    <span class=\"n\">new_env</span> <span class=\"bp\">←</span> <span class=\"n\">environment.add_inductive</span> <span class=\"n\">e</span> <span class=\"bp\">`</span><span class=\"n\">U</span> <span class=\"o\">[]</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">expr.sort</span> <span class=\"n\">level.zero</span><span class=\"o\">)</span>\n     <span class=\"o\">[(</span><span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">mk_const</span> <span class=\"bp\">`</span><span class=\"n\">U</span><span class=\"o\">)]</span>\n    <span class=\"n\">ff</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"n\">new_env</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">uType</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">set_env</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">U</span>\n<span class=\"k\">#check</span> <span class=\"n\">u</span>\n</code></pre></div>",
        "id": 218581620,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606926493
    },
    {
        "content": "<p>that solves the problem. thank you</p>",
        "id": 218583244,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1606927160
    }
]