[
    {
        "content": "<p>I'm quite new to Lean (day 3 of learning) and I was wondering if there was a function (if that's the correct term) that's like the \"opposite\" of <code>by_contradiction</code>? <code>by_contradiction</code> is described as <code>{p : Prop} : (¬p → false) → p</code> and I'm looking for something similar but with <code>{p : Prop} : (p → false) → ¬p</code> instead. I suppose I could make a theorem that does this for me, but I'm just wondering if something like this exists already or there's an easier/straight-forward solution.</p>\n<p>I need this because of the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_not</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">not_all_p_α_is_false</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contradiction</span>\n        <span class=\"o\">(</span>\n            <span class=\"k\">assume</span> <span class=\"n\">no_p_α_is_true</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">all_p_α_is_false</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n            <span class=\"k\">from</span>\n                <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n                <span class=\"n\">by_contradiction</span>\n                    <span class=\"o\">(</span>\n                        <span class=\"k\">assume</span> <span class=\"n\">hnnpx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- Ew!</span>\n                        <span class=\"k\">have</span> <span class=\"n\">hpx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                        <span class=\"k\">from</span> <span class=\"n\">not_not</span> <span class=\"n\">hnnpx</span><span class=\"o\">,</span>\n\n                        <span class=\"k\">have</span> <span class=\"n\">some_p_α_is_true</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                        <span class=\"k\">from</span> <span class=\"n\">exists.intro</span> <span class=\"n\">x</span> <span class=\"n\">hpx</span><span class=\"o\">,</span>\n\n                        <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n                        <span class=\"k\">from</span> <span class=\"n\">no_p_α_is_true</span> <span class=\"n\">some_p_α_is_true</span>\n                    <span class=\"o\">),</span>\n            <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n            <span class=\"k\">from</span> <span class=\"n\">not_all_p_α_is_false</span> <span class=\"n\">all_p_α_is_false</span>\n        <span class=\"o\">)</span>\n</code></pre></div>\n<p>(I'm aware the above code isn't very terse and is quite verbose, but I'm still learning the language. I want to be confident on the foundations first before applying a bunch of abstractions and obscure syntax that'll otherwise make me think it's all magic.)</p>\n<p>In the second <code>by_contradiction</code>, I assume <code>hnnpx : ¬ ¬ p x</code> and after that I then make the statement <code>hpx : p x</code>, all of which isn't very convenient. Any way to avoid this redundency? Apologies if there's something I'm not getting! Nonetheless, I'm happy to learn such a difficult language.</p>",
        "id": 250572337,
        "sender_full_name": "Kitty Gorey",
        "timestamp": 1629856466
    },
    {
        "content": "<p>the function <code>(p -&gt; false) -&gt; not p</code> is called <code>id</code>, because <code>not p</code> is defined to be <code>p -&gt; false</code></p>",
        "id": 250572368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629856519
    },
    {
        "content": "<p>in other words, you can just pretend that any <code>not p</code> you see is written <code>p -&gt; false</code> and just use it like a function</p>",
        "id": 250572379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629856552
    },
    {
        "content": "<p>that's very wacky to think about, i'll see how i can apply it and improvise the code! thank you</p>",
        "id": 250572449,
        "sender_full_name": "Kitty Gorey",
        "timestamp": 1629856612
    },
    {
        "content": "<p>In your case, at the second <code>by_contradiction</code>, you should instead just <code>assume hpx : p x</code></p>",
        "id": 250572450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629856620
    },
    {
        "content": "<p>that said, I think this is also a function, called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not.intro\">docs#not.intro</a></p>",
        "id": 250572561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629856784
    },
    {
        "content": "<p>yeah that's what the book does where instead of <code>by_contradiction</code> again, it's something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">not_all_p_α_is_false</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contradiction</span>\n        <span class=\"o\">(</span>\n            <span class=\"k\">assume</span> <span class=\"n\">no_p_α_is_true</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">all_p_α_is_false</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n            <span class=\"k\">from</span>\n                <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n                <span class=\"k\">assume</span> <span class=\"n\">hpx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n\n                <span class=\"k\">have</span> <span class=\"n\">some_p_α_is_true</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                <span class=\"k\">from</span> <span class=\"n\">exists.intro</span> <span class=\"n\">x</span> <span class=\"n\">hpx</span><span class=\"o\">,</span>\n\n                <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n                <span class=\"k\">from</span> <span class=\"n\">no_p_α_is_true</span> <span class=\"n\">some_p_α_is_true</span><span class=\"o\">,</span>\n            <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n            <span class=\"k\">from</span> <span class=\"n\">not_all_p_α_is_false</span> <span class=\"n\">all_p_α_is_false</span>\n        <span class=\"o\">)</span>\n</code></pre></div>\n<p>instead. I didn't like that very much because I'm not entirely too confident with the <code>assume hpx : px</code> part. If I'm correct, <code>assume x : α</code> comes from the <code>∀ (x : α)</code> part. With the second <code>assume</code> statement however, it kinda trips me up</p>",
        "id": 250572838,
        "sender_full_name": "Kitty Gorey",
        "timestamp": 1629857029
    },
    {
        "content": "<p>just think of <code>assume</code> as playing the role of not-introduction here. If your goal is <code>¬ P</code>, then <code>assume hp : P</code> will change the goal to <code>false</code></p>",
        "id": 250572931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629857111
    },
    {
        "content": "<p><code>assume</code> is also used for forall-introduction, which is what the <code>assume x : α,</code> is about</p>",
        "id": 250573020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629857169
    },
    {
        "content": "<p>as well as implication introduction</p>",
        "id": 250573038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629857190
    },
    {
        "content": "<p>and the dirty secret is that in type theory these are three different names for the same thing, which is why they all use the same keyword</p>",
        "id": 250573063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629857220
    },
    {
        "content": "<p>curry howard isomorphism right? it was quite stunning once i realize that a function's type-signature <code>a -&gt; b</code> is, in some sense, analogous to the implication <code>p -&gt; q</code>, if i worded it correctly</p>",
        "id": 250573167,
        "sender_full_name": "Kitty Gorey",
        "timestamp": 1629857338
    },
    {
        "content": "<p>yes, this is the curry-howard isomorphism. In lean both arrows are the same thing</p>",
        "id": 250573192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629857379
    },
    {
        "content": "<p>and foralls correspond to dependent function types</p>",
        "id": 250573241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629857409
    },
    {
        "content": "<p>which can be written <code>Π (x : α), A x</code></p>",
        "id": 250573264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629857442
    },
    {
        "content": "<p>and to lean, <code>Π</code> and <code>∀</code> (or <code>Pi</code> and <code>forall</code> if you don't like unicode) are just two spellings for the same operator</p>",
        "id": 250573288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629857483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435369\">Kitty Gorey</span> has marked this topic as resolved.</p>",
        "id": 250573367,
        "sender_full_name": "Notification Bot",
        "timestamp": 1629857578
    },
    {
        "content": "<p>i think i understood it better now, thanks. the experience went better here than over at StackOverflow</p>",
        "id": 250573394,
        "sender_full_name": "Kitty Gorey",
        "timestamp": 1629857620
    },
    {
        "content": "<p>this is where all the cool kids are :D</p>",
        "id": 250573404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629857640
    },
    {
        "content": "<p>ive gone eureka and finally understood what you meant now. if im correct, <code>not p</code> is really just <code>p -&gt; false</code>. so when i do <code>assume hp : p</code>, i take the left side of the implication arrow and must prove the right side (i guess in this case it's contradict). i guess my mistake was seeing the <code>¬</code> as just some negation symbol. i mightve described it wrong but i think i finally got it now!</p>",
        "id": 250574032,
        "sender_full_name": "Kitty Gorey",
        "timestamp": 1629858369
    },
    {
        "content": "<p>Not sure if you followed the definition for the <code>¬</code> operator already, but a fun thing is that it's defined in Lean code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">prefix</span> <span class=\"bp\">`¬`</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"o\">:=</span> <span class=\"n\">not</span>\n</code></pre></div>",
        "id": 250575583,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629860529
    }
]