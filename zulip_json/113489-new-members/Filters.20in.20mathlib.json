[
    {
        "content": "<p>Is there any particular reason why <a href=\"https://leanprover-community.github.io/mathlib_docs/order/filter/basic.html#filter.has_top\">filter.has_top</a> is <code>{s : set α | ∀ (x : α), x ∈ s}</code> and not <code>{set.univ}</code>. I strongly believe both are equivalent, except that the latter is clearer.</p>",
        "id": 211780847,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601481031
    },
    {
        "content": "<p>Also, any reason why the preorder on filter is <code>f ≤ g := g ⊆ f</code> and not <code>f ⊆ g</code>?</p>",
        "id": 211781724,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601481386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/Filters.20in.20mathlib/near/211780847\">said</a>:</p>\n<blockquote>\n<p>Is there any particular reason why <a href=\"https://leanprover-community.github.io/mathlib_docs/order/filter/basic.html#filter.has_top\">filter.has_top</a> is <code>{s : set α | ∀ (x : α), x ∈ s}</code> and not <code>{set.univ}</code>. I strongly believe both are equivalent, except that the latter is clearer.</p>\n</blockquote>\n<p>This and some other definitions are optimized for better definitional equalities. E.g., for <code>top</code> with the current definition <code>s \\in \\top</code> can be applied to <code>x</code> to get <code>x \\in s</code>.</p>",
        "id": 211782343,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601481612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/Filters.20in.20mathlib/near/211781724\">said</a>:</p>\n<blockquote>\n<p>Also, any reason why the preorder on filter is <code>f ≤ g := g ⊆ f</code> and not <code>f ⊆ g</code>?</p>\n</blockquote>\n<p>This way <code>principal</code> is monotone.</p>",
        "id": 211782413,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601481637
    }
]