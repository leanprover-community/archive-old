[
    {
        "content": "<p>Hola, in expr.lean there is the <code>instantiate_vars</code> meta constant. The docs say</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- ``instantiate_vars `(#0 #1 #2) [x,y,z] = `(%%x %%y %%z)`` -/</span>\n</code></pre></div>\n\n\n<p>However, when I try</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">instantiate_vars</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>I get a red squiggle under the <code>#0</code> and the error, \"don't know how to synthesize placeholder<br>\ncontext\". How do I get this to work?</p>",
        "id": 208930132,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599118470
    },
    {
        "content": "<p>If I try</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">instantiate_vars</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>I get the error \"cannot evaluate function: 0 arguments given but expected 2.\" I don't understand what's happening.</p>",
        "id": 208930912,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599119073
    },
    {
        "content": "<p>What exactly are you trying to do? Something like your last example?</p>",
        "id": 208934269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599121106
    },
    {
        "content": "<p><code>`(∀ {a b : Prop}, (a → b) → (b → a) → (a ↔ b))</code> is an <code>expr.pi</code>, whose body is another <code>expr.pi</code>, whose body is some other expression we'll call <code>e</code>. If you called <code>instantiate_vars e [x,y]</code> then you'd get an expression with <code>x</code> and <code>y</code> substituted for <code>a</code> and <code>b</code>, not sure in what order.</p>",
        "id": 208934455,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599121221
    },
    {
        "content": "<p>Yeah, basically given an expr I want to determine whether one of the leading <code>expr.pi</code>'s is a proposition. So for the example <code>`(∀ {a b : Prop}, (a → b) → (b → a) → (a ↔ b))</code> I'd want false for the first two <code>expr.pi</code>'s and true for the last two. But when I try <code>infer_type</code> it tells me to replace the variables with local constants.</p>",
        "id": 208935144,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599121632
    },
    {
        "content": "<p>I tried</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">remove_pis</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">αₙ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">remove_pis</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">remove_pis</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>Which gives me \"<a href=\"https://github.com/leanprover-community/mathlib/issues/3\">#3</a> ↔ <a href=\"https://github.com/leanprover-community/mathlib/issues/2\">#2</a>\", then </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">instantiate_vars</span> <span class=\"o\">(</span><span class=\"n\">remove_pis</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>gives me a red squiggle under the <code>#eval</code> and the error \"cannot evaluate function: 0 arguments given but expected 2\". I don't understand what this means and how to fix it.</p>",
        "id": 208935314,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599121748
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 208935463,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599121825
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">remove_pis</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">αₙ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">remove_pis</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">remove_pis</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">instantiate_vars</span> <span class=\"o\">(</span><span class=\"n\">remove_pis</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 208935515,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599121857
    },
    {
        "content": "<p>You're probably looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/binder_matching.html\">https://leanprover-community.github.io/mathlib_docs/tactic/binder_matching.html</a></p>",
        "id": 208936150,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599122187
    },
    {
        "content": "<p><code>open_pis</code> might be what I want.</p>",
        "id": 208936546,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599122405
    },
    {
        "content": "<p>I'll check it out. Thanks.</p>",
        "id": 208936574,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599122420
    },
    {
        "content": "<p>The notation <code>#0</code> is sometimes used in the documentation to denote <code>expr.var 0</code>, but there is no concrete syntax for this that the parser will accept</p>",
        "id": 208968583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599140667
    },
    {
        "content": "<p>I think I forgot the variables in the MWE.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">remove_pis</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">var_name</span> <span class=\"n\">bi</span> <span class=\"n\">αₙ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">remove_pis</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">remove_pis</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">instantiate_vars</span> <span class=\"o\">(</span><span class=\"n\">remove_pis</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>I feel bad about that.</p>",
        "id": 209032173,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599168738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20does.20.60instantiate_vars.60.20work.3F/near/208968583\">said</a>:</p>\n<blockquote>\n<p>The notation <code>#0</code> is sometimes used in the documentation to denote <code>expr.var 0</code>, but there is no concrete syntax for this that the parser will accept</p>\n</blockquote>\n<p>Ok, so it's not possible to get the example in the docs to work.</p>",
        "id": 209032258,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599168822
    }
]