[
    {
        "content": "<p>I am trying to understand tatics, how to prove the second lemma below? How to introduce a term <code>f a</code>? Does anyone have any additional tutorial about tatics? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lx1</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lx2</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176424597,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569288179
    },
    {
        "content": "<p>The second lemma is false: the assumption is weaker than the conclusion.</p>",
        "id": 176424694,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569288337
    },
    {
        "content": "<p>For some basics on tactics, you can take a look at the reference manual: <a href=\"https://leanprover.github.io/reference/tactics.html\" target=\"_blank\" title=\"https://leanprover.github.io/reference/tactics.html\">https://leanprover.github.io/reference/tactics.html</a></p>",
        "id": 176424802,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569288485
    },
    {
        "content": "<p>if you also knew that <code>f</code> was surjective, then you could case on that hypothesis to \"introduce\" a term of the form <code>f a</code></p>\n<p>(as it is, you could apply <code>lx2</code> to the constant function to zero)</p>",
        "id": 176424814,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1569288528
    },
    {
        "content": "<p>Yep, this is the one I am reading. I was wondering if someone have any additional material.</p>",
        "id": 176424818,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569288532
    },
    {
        "content": "<p>There is a list of all tactics defined in mathlib here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md</a><br>\nBut that is not at all a tutorial, more like a reference guide (and most tactics in it are very specialized).</p>",
        "id": 176424900,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569288670
    },
    {
        "content": "<p>You've presumably read the chapter in Theorem Proving In Lean on tactics?</p>",
        "id": 176425143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289006
    },
    {
        "content": "<p>Yes, as I said above this is the one I am reading now.</p>",
        "id": 176425309,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569289239
    },
    {
        "content": "<p>My crappy notes from last year: <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html\">http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html</a> <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_sheet_1/M1F_sheet_1_part_1.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_sheet_1/M1F_sheet_1_part_1.html\">http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_sheet_1/M1F_sheet_1_part_1.html</a></p>",
        "id": 176425325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289296
    },
    {
        "content": "<p>I will hopefully get something better written this year; I have some time later on in the week.</p>",
        "id": 176425329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289312
    },
    {
        "content": "<p>My real goal is to prove</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>proving lemma <code>lx1</code> was just one exercise. But yes, you are right, <code>lx2</code> is not a theorem without assuming more about f.</p>",
        "id": 176425331,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569289313
    },
    {
        "content": "<p>Do all of the exercises in TPIL and then discover your own exercises (e.g. work through a book). Just practice and keep asking here. That's my advice.</p>",
        "id": 176425381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289386
    },
    {
        "content": "<blockquote>\n<p>My real goal is to prove</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n</blockquote>\n<p><code>h</code> is a proof, but it's a proof of something quite messy. Do you know what the \"head symbol\" of h is? Is it called that? The \"head term\" or something? What tactic can you do to change <code>h</code>?</p>",
        "id": 176425449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289526
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 176425451,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569289533
    },
    {
        "content": "<p>the head symbol of h is the conjunction.</p>",
        "id": 176425502,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569289567
    },
    {
        "content": "<p>And do you know the tactic which will replace h by its two parts?</p>",
        "id": 176425514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289596
    },
    {
        "content": "<p>could you be more explicit of the precedence of the first conjunct of h? I'm not sure if it's the one you want</p>",
        "id": 176425526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569289636
    },
    {
        "content": "<p>From the left of the conjunction of h, we can obtain <code>forall x : nat, p f x</code> and using MP I hope to obtain the conclusion,</p>",
        "id": 176425537,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569289675
    },
    {
        "content": "<p>yep, that's not the precedence you wrote</p>",
        "id": 176425579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569289691
    },
    {
        "content": "<p>Looking at the tactic state I am inclined to agree with Mario. My tactic state looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\np q : ℕ → Prop,\nf : ℕ → ℕ,\nh1 : ∀ (x : ℕ), p (f x) → ∀ (x : ℕ), q (f x),\nh2 : ∀ (x : ℕ), p x\n⊢ ∃ (x : ℕ), q x\n</pre></div>",
        "id": 176425582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289697
    },
    {
        "content": "<p>you need parentheses around <code>(∀ (x : ℕ), p (f x))</code></p>",
        "id": 176425586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569289712
    },
    {
        "content": "<p>That first \"forall x : nat\" stretches a long way otherwise</p>",
        "id": 176425599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289777
    },
    {
        "content": "<p>I have this parenthesis. My state after the intro is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 176425603,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569289794
    },
    {
        "content": "<p><code>h1 : ∀ (x : ℕ), (p (f x) → ∀ (y : ℕ), q (f y))</code></p>",
        "id": 176425652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289807
    },
    {
        "content": "<p>split your <code>h</code> with the <code>split</code> tactic so you can see what's going on a bit better.</p>",
        "id": 176425658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289824
    },
    {
        "content": "<p>We have an operator precedence issue.</p>",
        "id": 176425663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289833
    },
    {
        "content": "<p>not split, that splits the goal</p>",
        "id": 176425665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569289843
    },
    {
        "content": "<p><code>cases h with h1 h2</code> should do</p>",
        "id": 176425667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569289850
    },
    {
        "content": "<p>yeah, <code>cases h</code></p>",
        "id": 176425668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289851
    },
    {
        "content": "<p>sorry</p>",
        "id": 176425669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289855
    },
    {
        "content": "<p>I'm rubbish at Lean</p>",
        "id": 176425676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289865
    },
    {
        "content": "<p>maybe <code>split at h</code> should mean <code>cases h</code></p>",
        "id": 176425681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569289877
    },
    {
        "content": "<p>Your problem is that your <code>h</code> is of this type: <code>(∀ (x : ℕ), (p (f x) → ∀ (x : ℕ), q (f x))) ∧ ∀ (x : ℕ), p x</code></p>",
        "id": 176425690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289921
    },
    {
        "content": "<p>and this is independent of the fact that half of us don't know how to use basic tactics.</p>",
        "id": 176425731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569289936
    },
    {
        "content": "<p>Hum, cases worked somehow. Now I have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 176425751,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569290023
    },
    {
        "content": "<p>that looks better</p>",
        "id": 176425752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569290033
    },
    {
        "content": "<p>now what's the maths proof?</p>",
        "id": 176425797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569290049
    },
    {
        "content": "<p>I'm on steadier ground there.</p>",
        "id": 176425801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569290057
    },
    {
        "content": "<p>Now I need to work with h2 to obtain the premisse of h1 to apply MP. With that result, I can obtain the conclusion.</p>",
        "id": 176425819,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569290091
    },
    {
        "content": "<p>You can try working from the end, or <code>have</code>ing an intermediate state</p>",
        "id": 176425841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569290121
    },
    {
        "content": "<p>That's right. In Lean many tactics work backwords from the goal. Do you think you could write the entire argument backwards?</p>",
        "id": 176425844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569290127
    },
    {
        "content": "<p>working from the end, what's the existential witness here?</p>",
        "id": 176425846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569290138
    },
    {
        "content": "<p>And then what's the tactic you can use to proceed?</p>",
        "id": 176425897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569290163
    },
    {
        "content": "<p>I like to think that every head symbol has a \"tactic-constructor\" and a \"tactic-eliminator\" -- the first is the tactic you use if you want to move on <code>blah</code> and <code>blah</code> is in the goal, and the second is the tactic you use if you want to use <code>blah</code> and <code>blah</code> is in a hypothesis.</p>",
        "id": 176425943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569290239
    },
    {
        "content": "<p>Hum, almost there... </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 176426357,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569290900
    },
    {
        "content": "<p>Try using the <code>existsi</code> tactic (I think it's deprecated in favor of <code>use</code> now though).</p>",
        "id": 176426847,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569291675
    },
    {
        "content": "<p>can you post precisely what you are now trying to prove?</p>",
        "id": 176428734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569294639
    },
    {
        "content": "<p>It would be interesting to see your proof.</p>",
        "id": 176428735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569294654
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , my current state is the following. I am just trying to complete this proof. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h3</span><span class=\"o\">),</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176447920,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569318458
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> , if I try <code>existsi (f a)</code> it says that <code>a</code> is unknow.</p>",
        "id": 176448156,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569318693
    },
    {
        "content": "<p>There's no variable called <code>a</code> in your context. Try <code>existsi (f 0)</code></p>",
        "id": 176448281,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1569318806
    },
    {
        "content": "<p>Wow! It worked!! So happy!! ;-) It looks like I have a proof. But why I can't use a generic term of type <code>nat</code> instead of <code>0</code> in the last step? It should be possible to prove <code>∀ (x : ℕ), q (f x) ⊢ ∃ (x : ℕ), q x</code> for any nat, right?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h3</span><span class=\"o\">),</span>\n <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176449311,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569319757
    },
    {
        "content": "<p>You could use any <code>nat</code> other than <code>0</code> for the proof. Using an arbitrary <code>nat</code> when there isn't one in your context could cause problems if the type <code>nat</code> was empty. Your example is actually false with <code>nat</code> substituted for <code>empty</code> in the statement.</p>",
        "id": 176449657,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1569320068
    },
    {
        "content": "<p>Sorry, I didn’t understand. The reason for my question is that it should be possible to replace the type <code>nat</code> with a generic type <code>U : Type</code>, right?</p>",
        "id": 176449940,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569320357
    },
    {
        "content": "<p>Only if <code>U</code> is nonempty</p>",
        "id": 176450897,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1569321243
    },
    {
        "content": "<p>....</p>",
        "id": 176450962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569321336
    },
    {
        "content": "<p>Yes, if U is nonempty, an usual assumption for domains in first order logic. In that case, how can I replace nat by U saying that U is nonempty?</p>",
        "id": 176451196,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569321570
    },
    {
        "content": "<p>To minimally change your existing proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h3</span><span class=\"o\">),</span>\n\n <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">hne</span><span class=\"o\">,</span>\n <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176451384,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569321746
    },
    {
        "content": "<p>If you would like a witness to the nonemptiness of the type <code>α</code> to actually be provided, use <code>inhabited</code> instead of <code>nonempty</code></p>",
        "id": 176451454,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569321826
    },
    {
        "content": "<p>Wow! Too many new things! I am curious why this discussion of nonempty types didn't appear in the <a href=\"https://leanprover.github.io/logic_and_proof/first_order_logic_in_lean.html#using-the-universal-quantifier\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/first_order_logic_in_lean.html#using-the-universal-quantifier\">chapter 9 of Logic and Proof</a>!</p>\n<p>Thank you <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> ! Now I have to understand why the <code>{ ...}</code>, the use of <code>[...]</code>  in the declaration instead of <code>(...)</code> and the <code>classical.choice</code> operator.</p>",
        "id": 176451682,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569322019
    },
    {
        "content": "<p>What I've done is just replaced each use of nat with an arbitrary type <code>α</code>, but have required that a proof that <code>α</code> is <code>nonempty</code> is also provided.</p>",
        "id": 176451720,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569322077
    },
    {
        "content": "<p>To obtain an actual element <code>a</code> of <code>α</code> based on the proof of nonemptiness <code>hne</code>, we appeal to the axiom of choice.</p>",
        "id": 176451774,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569322104
    },
    {
        "content": "<p>nonempty is also introduced here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#choice\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#choice\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#choice</a></p>",
        "id": 176451868,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1569322207
    },
    {
        "content": "<p>The curly and square brackets aren't necessary. They would be instructions to lean for anyone trying to use your proof, if it was a <code>def</code>, and not an <code>example</code>. The curly braces instruct lean to always guess <code>α</code> and never ask for it to be provided. The square brackets are trickier, and ask lean to perform so-called typeclass inference to obtain the proof of nonemptiness. You can read more about both of these in the book.</p>",
        "id": 176451921,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569322306
    },
    {
        "content": "<p>So, they just make it easier to use. There are no implications for your actual proof.</p>",
        "id": 176451926,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569322319
    },
    {
        "content": "<p>I didn't understand the difference between nonempty and inhabited! hne isn't a witness?</p>",
        "id": 176451981,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569322342
    },
    {
        "content": "<p>No. It is a proof that it is nonempty. The witness has been forgotten.</p>",
        "id": 176451989,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569322358
    },
    {
        "content": "<p>It's because <code>nonempty</code> is defined to live in the universe <code>Prop</code>, but <code>inhabited</code> lives in <code>Type</code> (roughly speaking).</p>",
        "id": 176451997,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569322382
    },
    {
        "content": "<p>So <code>inhabited</code> instances can be deconstructed, but <code>nonempty</code> instances cannot be deconstructed once built.</p>",
        "id": 176452016,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569322404
    },
    {
        "content": "<p>Otherwise, they have the same definition exactly.</p>",
        "id": 176452020,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569322413
    },
    {
        "content": "<p>{...} and [...] are also explained here: <br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\">https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments</a><br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html</a></p>",
        "id": 176452034,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1569322440
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> for the links.</p>",
        "id": 176452267,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569322501
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> for the solution and detailed explanation.</p>",
        "id": 176454532,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569324988
    },
    {
        "content": "<p>Since it wasn't mentioned: it is not necessary to use choice to extract a witness here, because the theorem being proved is itself a prop, so you can use <code>cases hne with a</code> in place of <code>have a : α := classical.choice hne</code> in Keeley's proof.</p>",
        "id": 176488804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569347820
    },
    {
        "content": "<p>You probably have to do <code>have := hne, cases this with a</code> (or <code>unfreezeI, cases hne with a</code>) for technical reasons.</p>",
        "id": 176488957,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569347911
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> , the final proof is below. I prefer explicit identifiers, that is why I used y. I am not sure if I understood the intuition behind this <code>have ... cases ... with ...</code>! The <code>unfreezeI</code> is probably from the mathlib, right? I didn't find it in my system.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h3</span><span class=\"o\">),</span>\n\n <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">hne</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176522198,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569371340
    },
    {
        "content": "<p>you can also use <code>cases id hne with a</code></p>",
        "id": 176522270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569371415
    },
    {
        "content": "<p>The technical reason is that <code>nonempty A</code> is a class, which means that that argument is \"frozen\" in the local context in order to cache and speed up typeclass searches. There are several mathlib tactics ending in <code>*I</code> that unfreeze these instances so that you can remove them from the context (which is what <code>cases hne</code> wants to do)</p>",
        "id": 176522367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569371553
    },
    {
        "content": "<p>they are available via <code>import tactic.cache</code></p>",
        "id": 176522396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569371628
    },
    {
        "content": "<p>If you don't have mathlib, you can also use <code>tactic.unfreeze_local_instances</code> for which <code>unfreezeI</code> is a synonym</p>",
        "id": 176522466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569371701
    },
    {
        "content": "<p>Hum, <code>case id hne with a</code> is simpler than <code>have y := hne, cases y with a</code>, but I am still trying to understand the rationality of this tactic <code>case</code>. The docstring of <code>case</code> if not very informative! To close this thread, I need to make one additional question. I started the proof using the type <code>nat</code>, when we moved to the arbitrary <code>α</code> type above, we had to say that it is nonempty and we used <code>hne</code> (the proof of its nonemptiness) to obtain an arbitrary element. If we go back to the <code>nat</code>, how could I use an arbitrary natural number instead of <code>0</code> or any other magically available number already defined in the Lean environment? In the proof using <code>nat</code> below, I didn't need to introduce <code>[hne : nonempty ℕ]</code>, this type is probably already defined elsewhere as nonempty, right?  That is, it works with any already defined number but I would like to have a more 'general' proof in <code>nat</code>, saying that ANY number (like an <code>a</code>) would work.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h3</span><span class=\"o\">),</span>\n <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"mi\">10</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Does it make sense?</p>",
        "id": 176622350,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569463419
    },
    {
        "content": "<p>You can use <code>apply_instance</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h3</span><span class=\"o\">),</span>\n\n <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>(assuming I understood what you want)</p>",
        "id": 176623042,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569464454
    },
    {
        "content": "<p>It doesn't really make sense. The proof requires you to use <em>some</em> natural number to do the cut, and if you want to quantify over different witnesses you have to change the theorem statement</p>",
        "id": 176623044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569464461
    },
    {
        "content": "<p>One way to express this is to add an argument <code>n</code> to the theorem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h3</span><span class=\"o\">),</span>\n <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But no one would want to use this theorem because the argument <code>n</code> is useless (has no bearing on the fact to be proven)</p>",
        "id": 176623124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569464566
    },
    {
        "content": "<p>This sort of thing is often done for functions, where we actually care about dependence of the definition on the argument even if the type is fixed, but for proofs we want to minimize assumptions because proofs are irrelevant</p>",
        "id": 176623149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569464634
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> , nice I learned one more thing! The <code>apply_instance</code> tactic seems to use the previous definition of <code>nat</code> as non empty right? Trying it with the type <code>α</code> didn't work. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h3</span><span class=\"o\">),</span>\n\n <span class=\"k\">have</span> <span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">hne</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>causes the error:</p>\n<div class=\"codehilite\"><pre><span></span>tactic.mk_instance failed to generate instance for\n  nonempty α\n</pre></div>\n\n\n<p>In other words, the line <code>have hne : nonempty α := by apply_instance, cases hne with a,</code> is not a replacement of <code>[hne : nonempty α]</code> in the lemma declaration.  Sorry for so many questions. I am just trying to understand what is going on.</p>",
        "id": 176670625,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569513381
    },
    {
        "content": "<p>Yes, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I got your point. I am just trying to use the example to understand what is going on. But you are right about the example itself. It would not make sense to depend on an additional parameter.</p>",
        "id": 176670693,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569513456
    },
    {
        "content": "<p>If alpha is empty (which is fine in Lean) then the goal is false, right? Lean's type class inference system knows that nat is non-empty, but it won't know that alpha is non-empty unless you prove it first.</p>",
        "id": 176670993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569513699
    },
    {
        "content": "<p><code>[hne : nonempty α]</code> is an assumption; <code>have hne : nonempty α := ...</code> is an unjustified claim.</p>",
        "id": 176671054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569513729
    },
    {
        "content": "<p>PS in case I misunderstood -- it's very hard to debug your code if you just post random error messages. Can you post complete minimal working examples which other people can just cut and paste?</p>",
        "id": 176671118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569513796
    },
    {
        "content": "<p>In addition to what Kevin said, you can also see <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\">this chapter of TPiL</a> for some more info about instances.</p>",
        "id": 176671254,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569513881
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , it edited my previous message. I thought it was clear from the rest of the thread what I am trying to do. Interesting, I thought that <code>apply_instance, cases hne with a</code> is proving/justifying the <code>hne : nonempty α</code> claim, but it would be introducing some circularity...</p>",
        "id": 176673014,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569515240
    },
    {
        "content": "<p>I am too lazy to refresh my memory of the thread by reading it all through again, and too forgetful to remember what its main points are :-)</p>",
        "id": 176673268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569515424
    },
    {
        "content": "<p>it can't prove that claim, because it isn't true in general</p>",
        "id": 176673303,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1569515469
    },
    {
        "content": "<p>not every α is nonempty</p>",
        "id": 176673309,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1569515479
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">empty_type</span> <span class=\"bp\">.</span> <span class=\"c1\">-- no constructors, so no terms.</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"n\">empty_type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176673532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569515676
    },
    {
        "content": "<p>The first <code>cases</code> uses the fact that there is only one constructor for <code>nonempty X</code>, which needs a term of type <code>X</code>; this is <code>h2</code>. And then <code>cases h2</code> breaks up into one case per constructor; there are no constructors, so the proof is over.</p>",
        "id": 176673577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569515749
    },
    {
        "content": "<p>You mean \"here is only ONE constructor for <code>nonempty X</code>\"? I found in <code>logic.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"kn\">inductive</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span>\n</pre></div>\n\n\n<p>Thank you for the example! I am learning a lot here.</p>",
        "id": 176674100,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569516181
    },
    {
        "content": "<p>Yes, sorry! I edited. The <code>cases</code> tactic takes a term of type <code>I</code>, with <code>I</code> an inductive type, and then creates one goal per constructor.</p>",
        "id": 176674212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569516248
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> for the link. Yes, I need to finish to read the TPiL.</p>",
        "id": 176674939,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569516730
    },
    {
        "content": "<p>I must admit, tactics is a complicate stuff! No clue how to prove using tactics the following two theorems:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">constants</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n <span class=\"k\">assume</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n <span class=\"k\">assume</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n <span class=\"n\">by_contradiction</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n   <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n      <span class=\"n\">by_contradiction</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">h₂</span><span class=\"o\">))))</span>\n</pre></div>\n\n\n<p>It is not clear how to deal with exists.intro and negation in the hypothesis...</p>",
        "id": 176845507,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569711706
    },
    {
        "content": "<p>There's <code>use</code>, <code>rintro</code>, <code>rcases</code>, <code>push_neg</code>, <code>contrapose!</code></p>",
        "id": 176845731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569712178
    },
    {
        "content": "<p>nice and powerful tactics (-;</p>",
        "id": 176845734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569712190
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"c1\">-- mathlib, so I can use &quot;use&quot;</span>\n<span class=\"kn\">variable</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">variable</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>If you don't like <code>use</code>, you can use <code>existsi</code> in core.</p>",
        "id": 176845785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569712208
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">constant</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">constants</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₂</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₂</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176845790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569712253
    },
    {
        "content": "<p>I probably would not have used tactics for some of these, but this is a pure-tactic style</p>",
        "id": 176845803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569712301
    },
    {
        "content": "<p>for example the existsi, exact is easier to write as <code>refine ⟨b, h₂⟩</code></p>",
        "id": 176845846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569712333
    },
    {
        "content": "<p>I use the <code>classical</code> tactic (in mathlib) when lean complains about this and that not being decidable</p>",
        "id": 176845855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569712373
    },
    {
        "content": "<p>here's a more hybrid approach:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176845919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569712520
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ! <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , is there any alternative to the classical mathlib tactic? I am trying to avoid introduce mathlib before get things more clear.</p>",
        "id": 176846767,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569714351
    },
    {
        "content": "<p><code>classical</code> is the same as <code>haveI := classical.prop_decidable</code></p>",
        "id": 176846810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569714377
    },
    {
        "content": "<p>but <code>haveI</code> is another mathlib tactic</p>",
        "id": 176846814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569714390
    },
    {
        "content": "<p>What's <code>not not P -&gt; P</code> called in Lean? For some reason I can't find it with library_search</p>",
        "id": 176846817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569714417
    },
    {
        "content": "<p>you can use <code>local attribute [instance] classical.prop_decidable</code> outside the proof instead</p>",
        "id": 176846820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569714418
    },
    {
        "content": "<p><code>classical.by_contradiction</code></p>",
        "id": 176846828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569714426
    },
    {
        "content": "<p>I like the compact notation of <code>⟨y, h₂⟩</code> but it is confusing since the same par of symbols is used to the <code>and.intro</code>.</p>",
        "id": 176846837,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569714478
    },
    {
        "content": "<p>it works with any inductive type with one constructor</p>",
        "id": 176846879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569714497
    },
    {
        "content": "<p>That's not confusing -- those are two instances of the same phenomenon. It's unifying :-)</p>",
        "id": 176846882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569714502
    },
    {
        "content": "<p>or any <code>structure</code></p>",
        "id": 176846884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569714521
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>There's a mathlib-free proof of the second one in tactic mode.</p>",
        "id": 176846898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569714601
    },
    {
        "content": "<p>(with thanks to Mario for <code>classical.by_contradiction</code>)</p>",
        "id": 176846946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569714614
    },
    {
        "content": "<p>Hum, but the signatures returned by the check command are quite different. In the type theory level both are constructors, I see.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n</pre></div>",
        "id": 176846971,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569714711
    },
    {
        "content": "<p>This isn't notation overloading - the parser has special support for constructing tuple-like inductives</p>",
        "id": 176847014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569714752
    },
    {
        "content": "<p>You can also use the <code>{foo := ... , bar := ...}</code> notation, although I've never used it with exists or and before</p>",
        "id": 176847030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569714794
    },
    {
        "content": "<p><code>not not P -&gt; P</code> is the <code>by_contradiction</code>, right?</p>",
        "id": 176847041,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569714819
    },
    {
        "content": "<p>yes</p>",
        "id": 176847042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569714822
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">erm</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 176847085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569714855
    },
    {
        "content": "<p>oh, my mistake, apparently <code>{}</code> structure notation only works with actual <code>structure</code>s, so <code>exists</code> doesn't permit it, although <code>and</code> does</p>",
        "id": 176847091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569714877
    },
    {
        "content": "<p><code>exists</code> is so horrible for beginners. <code>#print notation ∃</code> gives garbage, and <code>#check exists</code> fails -- Lean wants another term so just looks at the next token and gives a confusing error.</p>",
        "id": 176847159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569715014
    },
    {
        "content": "<p>You're best off just finding the definitions in core (if you can figure out how to get to them)</p>",
        "id": 176847171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569715059
    },
    {
        "content": "<p>Now I am starting to make sense with negation and exists in tactics!! Tomorrow more exercises!! After months in the 'term-mode', it is taking time to flip my mind to the tactic-mode.</p>",
        "id": 176847220,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569715127
    },
    {
        "content": "<p>Try <code>#check Exists</code></p>",
        "id": 176847221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569715129
    },
    {
        "content": "<p>Why is <code>Exists</code> an inductive type with one constructor and not a structure?</p>\n<p>Wooah, and what does</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n</pre></div>\n\n\n<p>mean?</p>",
        "id": 176847224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569715140
    },
    {
        "content": "<p>I know that <code>[intro]</code> (and <code>[intro!]</code>) exist, but I'm not sure what they do</p>",
        "id": 176847235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569715186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what does <code>local attribute [instance] classical.prop_decidable</code> make?</p>",
        "id": 176847371,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569715369
    },
    {
        "content": "<p>it causes all instances of the form <code>[decidable p]</code> to be solvable</p>",
        "id": 176847381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569715398
    },
    {
        "content": "<p>using the law of excluded middle</p>",
        "id": 176847384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569715409
    },
    {
        "content": "<p>It just adds the <code>instance</code> tag to <code>classical.prop_decidable</code> meaning that the type class inference system can see it.</p>",
        "id": 176847390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569715422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <code>[intro]</code> is used as part of the <code>back_chaining</code> tactic infrastructure</p>",
        "id": 176847500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569715571
    },
    {
        "content": "<p>This was in core, right? So this is nothing to do with Scott's fancy tactics I guess. What is <code>back_chaining</code>?</p>",
        "id": 176847513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569715645
    },
    {
        "content": "<p>That's a good question, I'm looking through tests and things to find out what it's for</p>",
        "id": 176847563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569715753
    },
    {
        "content": "<p>well there you go, core has a file called <code>backward.lean</code>. Not one I'd ever looked at before.</p>",
        "id": 176847564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569715754
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> Lean has a backward chaining tactic that can be configured using</span>\n<span class=\"cm\">   attributes. -/</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"kn\">variable</span> <span class=\"n\">u</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">in_tail</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span>        <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"bp\">::</span><span class=\"n\">l</span>   <span class=\"o\">:=</span> <span class=\"n\">mem_cons_of_mem</span> <span class=\"bp\">_</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">in_head</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>                <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span>           <span class=\"o\">:=</span> <span class=\"n\">mem_cons_self</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">in_left</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>   <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">mem_append_left</span> <span class=\"bp\">_</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">in_right</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>   <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">mem_append_right</span> <span class=\"bp\">_</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> It is trivial to define mk_mem_list using backward chaining -/</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">]</span> <span class=\"n\">in_tail</span> <span class=\"n\">in_head</span> <span class=\"n\">in_left</span> <span class=\"n\">in_right</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">mk_mem_list</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">solve1</span> <span class=\"o\">(</span><span class=\"n\">back_chaining</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">mk_mem_list</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">back_chaining</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">mk_mem_list</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">mk_mem_list</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"bp\">::</span><span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">mk_mem_list</span> <span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"bp\">::</span><span class=\"n\">b</span><span class=\"bp\">::</span><span class=\"n\">c</span><span class=\"bp\">::</span><span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"bp\">::</span><span class=\"n\">c</span><span class=\"bp\">::</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">mk_mem_list</span> <span class=\"kn\">end</span>\n</pre></div>",
        "id": 176847565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569715762
    },
    {
        "content": "<p>it looks a lot like <code>solve_by_elim</code></p>",
        "id": 176847572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569715799
    },
    {
        "content": "<p>Interestingly it doesn't do definitional unfolding (the <code>a ∈ [b, c] ++ [b, a, b]</code> example fails without the <code>in_left</code> and <code>in_right</code> examples), which is probably a good thing</p>",
        "id": 176847681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569715979
    },
    {
        "content": "<p>it actually works in some cases where one expects <code>solve_by_elim</code> to work, but doesn't</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₃</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">solve_by_elim</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₃</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">back_chaining_using_hs</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 176847732,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1569716059
    },
    {
        "content": "<p>it has a lot of examples in the tests that look like that - lots of implication chains</p>",
        "id": 176847748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569716122
    }
]