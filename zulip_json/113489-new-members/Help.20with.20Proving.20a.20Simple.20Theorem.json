[
    {
        "content": "<p>Here is the lemma I am trying to prove (along with my definitions)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">dvd</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n<span class=\"n\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dvd</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n<span class=\"n\">def</span> <span class=\"n\">composite</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span><span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dvd_n_less_than_n</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">dvd</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">≠</span><span class=\"mi\">1</span> <span class=\"o\">)(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">dvd</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Here is my tactic state after <code>rw hk</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n<span class=\"err\">⊢</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n</pre></div>\n\n\n<p>I have tried proving this with <code>linarith</code> but that hasn't worked. Can anyone help me prove this lemma?</p>",
        "id": 195260349,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1587776402
    },
    {
        "content": "<p>You haven't got strong enough assumptions in your lemma statement. You also need that <code>n ≠ 0</code>.</p>",
        "id": 195261620,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587778392
    },
    {
        "content": "<p>Here's the first thing I could get to work with that hypothesis:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dvd</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dvd_n_less_than_n</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">dvd</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lt_mul_iff_one_lt_right</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_lt_succ</span><span class=\"o\">],</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This can probably be simplified greatly.</p>",
        "id": 195261630,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587778439
    },
    {
        "content": "<p>(Wrong thread sorry)</p>",
        "id": 195261777,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587778672
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">dvd_n_less_than_n</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">dvd</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"bp\">_</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_left</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"bp\">≤_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_iff_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"bp\">_</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195261875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587778806
    },
    {
        "content": "<p>Ah, this is a custom <code>dvd</code>. Otherwise the last four lines are in the library already.</p>",
        "id": 195261946,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587778954
    },
    {
        "content": "<p>For completeness:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">dvd_n_less_than_n&#39;</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"err\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"bp\">_</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195262415,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587779851
    }
]