[
    {
        "content": "<p>i encounter that error quite often and yeah i know there are like 998244353 ways to get around the error but I don't know what the error REALLY means</p>",
        "id": 232853317,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1617331711
    },
    {
        "content": "<p>thanks in advance lol</p>",
        "id": 232853340,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1617331762
    },
    {
        "content": "<p>I remember liking this discussion of the error and how to work around it in <a href=\"#narrow/stream/113488-general/topic/How.20to.20work.20with.20nth_le.3F/near/216451081\">this older thread</a>.</p>",
        "id": 232853452,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617331904
    },
    {
        "content": "<p>My impression is that the error is just because the rewrite tactic is not powerful enough rather than there being any profound reason for its failure. Prove me wrong!</p>",
        "id": 232879781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617356189
    },
    {
        "content": "<p>I would say it fails for a fundamental reason, but there are more clever ways to do <em>different</em> things that may not encounter this issue and instead suffer from different problems</p>",
        "id": 232879894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617356311
    },
    {
        "content": "<p>We have <code>congr_arg</code> (is it that one? The one that says if a=b then f(a)=f(b) ) so I don't see why this can't just be recursively applied everywhere until the motive is type correct. What am I missing?</p>",
        "id": 232881810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617357670
    },
    {
        "content": "<p>The issue is when <code>f</code> has a dependent type like <code>\\all a : X, P a -&gt; B</code> and you want to rewrite <code>f a x = f b y</code> using <code>a = b</code></p>",
        "id": 232881953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617357783
    },
    {
        "content": "<p>you can't use <code>x = y</code> as a hypothesis because it is not type correct</p>",
        "id": 232881998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617357803
    },
    {
        "content": "<p>You can use <code>x == y</code> and this is what the <code>congr</code> tactic does in practice, but <code>==</code> lacks a lot of properties of <code>=</code> that you would like here and in particular you can't rewrite with it or use <code>congr</code> on it to traverse further into subterms</p>",
        "id": 232882090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617357873
    },
    {
        "content": "<p><code>x : P a</code> and <code>a=b</code> so <code>P a = P b</code> by <code>congr_arg</code> so <code>x : P b</code>. What is the problem here? I don't get it. I say again that a more powerful rewrite tactic could do this and that this whole motive not type correct thing is just a myth</p>",
        "id": 232882634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617358238
    },
    {
        "content": "<blockquote>\n<p>so <code>x : P b</code></p>\n</blockquote>\n<p>This is the problem. <code>x : P a</code> and <code>P a = P b</code> does not imply <code>x : P b</code> in intensional type theories</p>",
        "id": 232882759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617358343
    },
    {
        "content": "<p>You can just rewrite the proof of P a = P b at x</p>",
        "id": 232882792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617358366
    },
    {
        "content": "<p>What am I missing?</p>",
        "id": 232882829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617358404
    },
    {
        "content": "<p>That won't prove <code>x : P b</code>, it will construct a new value of type <code>P b</code> which is not <code>x</code> but rather <code>eq.rec h x</code></p>",
        "id": 232882832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617358408
    },
    {
        "content": "<p>The tactic state does some smoke and mirrors so that you don't notice this</p>",
        "id": 232882857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617358434
    },
    {
        "content": "<p>but this trick doesn't work when you are rewriting inside a term</p>",
        "id": 232882925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617358464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/what.20does.20motive.20is.20not.20type.20correct.20mean/near/232882759\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>so <code>x : P b</code></p>\n</blockquote>\n<p>This is the problem. <code>x : P a</code> and <code>P a = P b</code> does not imply <code>x : P b</code> in intensional type theories</p>\n</blockquote>\n<p>This is not an issue that set theory, or extensional type theory, have</p>",
        "id": 232883019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617358541
    },
    {
        "content": "<p>extensional type theory is where you add a rule that says that from <code>x = y</code> conclude that <code>x</code> is defeq to <code>y</code></p>",
        "id": 232883098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617358587
    },
    {
        "content": "<p>I see. But then we could still have a tactic which does the rewrite rather than bailing out. We'd get <code>f b (h.rec x) = f b y</code></p>",
        "id": 232883142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617358634
    },
    {
        "content": "<p>yep, that's <code>simp</code></p>",
        "id": 232883154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617358642
    },
    {
        "content": "<p>I see!</p>",
        "id": 232883187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617358673
    },
    {
        "content": "<p>The drawback is that some subterms are not accessible to <code>simp</code></p>",
        "id": 232883240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617358694
    },
    {
        "content": "<p>I don't get this bit. You've still not given an example where the rewrite can't happen</p>",
        "id": 232883282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617358726
    },
    {
        "content": "<p>Or are you just saying that we could have a better tactic?</p>",
        "id": 232883312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617358754
    },
    {
        "content": "<p><code>congr</code> doesn't actually rewrite in all subterms, it will hold some things fixed when it thinks that it would be a bad idea to rewrite them because the recs upon recs get out of hand</p>",
        "id": 232883347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617358784
    },
    {
        "content": "<p>for example, when rewriting <code>add A x y</code>, it will not rewrite at <code>A</code></p>",
        "id": 232883378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617358804
    },
    {
        "content": "<p>because you would end up with <code>add B (h.rec x) (h.rec y)</code>, and now rewriting at <code>x</code> will only make things worse</p>",
        "id": 232883500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617358862
    },
    {
        "content": "<p>let's say <code>x</code> is <code>a + b</code>, now associativity doesn't fire because you have <code>h.rec (a + b) + h.rec y</code> instead of <code>(a + b) + y</code></p>",
        "id": 232883551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617358921
    },
    {
        "content": "<p>I would imagine that in the HoTT provers they are having to deal with recs upon recs all the time. We've been jumping through all sorts of hoops to define cohomology of a complex because of this. Should we just be much less scared of eq.rec and have an API for it making it something we can deal with more easily?</p>",
        "id": 232883630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617358957
    },
    {
        "content": "<p>plus, <code>h</code> has some occurrences of <code>x</code> too, so you want to rewrite that too</p>",
        "id": 232883637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617358963
    },
    {
        "content": "<p>yeah, this is a nightmare in HoTT, half the library has to be lemmas about how <code>h.rec</code> commutes with everything</p>",
        "id": 232883687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617359023
    },
    {
        "content": "<p>We have an API for eq.rec in category theory, that's <code>eq_to_hom</code></p>",
        "id": 232883774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617359077
    },
    {
        "content": "<p>For example I assume it's a theorem that h.rec (a+b) = h.rec a + h.rec b? Oh -- the point is that this isn't formal, right? If I have P : X -&gt; Type and then an add_group structure on P x then in practice I will know that the equality P a = P b is an isomorphism of groups, but am I right in thinking that this is not forced upon us by the type theory?</p>",
        "id": 232883838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617359132
    },
    {
        "content": "<p>but it makes things only slightly less painful, by making it more explicit (instead of making it completely invisible like we would like)</p>",
        "id": 232883842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617359135
    },
    {
        "content": "<blockquote>\n<p>For example I assume it's a theorem that h.rec (a+b) = h.rec a + h.rec b?</p>\n</blockquote>\n<p>This is true, but not automatic. This is essentially saying that <code>+</code> is parametric in a certain way (keep in mind that the implicit args there are different in the two occurrences)</p>",
        "id": 232883957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617359195
    },
    {
        "content": "<p>Oh so it is true??</p>",
        "id": 232883996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617359226
    },
    {
        "content": "<p>Equality is an isomorphism of groups</p>",
        "id": 232884004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617359234
    },
    {
        "content": "<p>I think the issues come up when you can't just commute the <code>h.rec</code> because of the form of the function. For example if <code>f : A -&gt; T A</code>, and you have <code>h.rec (f a)</code> where <code>h : T A = T B</code>, you can't commute that to <code>f (h'.rec a)</code> where <code>h' : A = B</code> because you need <code>h'</code> to come from somewhere, and it isn't necessarily the case that <code>T</code> is injective</p>",
        "id": 232884360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617359492
    },
    {
        "content": "<p>In ETT you wouldn't have any <code>h.rec</code> term so the commutation is trivial, <code>f a = f a</code></p>",
        "id": 232884462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617359553
    },
    {
        "content": "<p>Right now in the homology2 branch Scott is trying the n'th iteration of this crazy idea of Johan to define a complex (which in a mathematician's mind is a bunch of groups <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> equipped with group homomorphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>:</mo><msub><mi>A</mi><mi>i</mi></msub><mo>→</mo><msub><mi>A</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">d:A_i\\to A_{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> satisfying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>d</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">d^2=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>) by letting there be maps from <code>A i</code> to <code>A j</code> for all <code>i j : int</code> just to get around this motive nonsense. In some sense this is mathematicians giving up because they're scared of <code>eq_to_hom</code> but what really seems to be going on is that the decision to allow junk d's has just been deemed by the community to be the lesser of two evils.</p>",
        "id": 232884537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617359604
    },
    {
        "content": "<p>I daren't ask what ETT is, I'm assuming it's not Lean</p>",
        "id": 232884681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617359682
    },
    {
        "content": "<p>extensional type theory</p>",
        "id": 232884694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617359690
    },
    {
        "content": "<p>like I said, make defeq just plain equality</p>",
        "id": 232884712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617359702
    },
    {
        "content": "<p>aka \"set theory with types\"</p>",
        "id": 232884761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617359737
    },
    {
        "content": "<p>Going back to this <code>T</code> example above, it looks spurious to me.  If you have <code>h : T A = T B</code> and if <code>T</code> isn't injective, a mathematician wouldn't expect to be able to turn <code>h.rec (f a)</code> into <code>f (h'.rec  a)</code> in general because maybe <code>A</code> doesn't equal <code>B</code>. However if <code>A</code> <em>does</em> equal <code>B</code> then we have <code>h' : A = B</code> and now one can prove that <code>h = congr_arg T h'</code> because they're terms of a proposition, and now <code>h.rec (f a) =  (h'.rec a)</code> is I guess unproblematic.</p>",
        "id": 232885414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617360312
    },
    {
        "content": "<blockquote>\n<p>then we have <code>h' : A = B</code></p>\n</blockquote>\n<p>Who is \"we\" here? Somehow the tactic needs to know or discover this</p>",
        "id": 232886142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617360941
    },
    {
        "content": "<p>You could have a lemma that says <code>(congr_arg T h').rec (f a) = f (h'.rec a)</code> but that won't fire as a simp lemma</p>",
        "id": 232886210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617360987
    },
    {
        "content": "<p>Right -- I guess what I am trying to understand right now is what things would look like if we just defined complexes the way mathematicians would like to define them and then instead of just giving up with the first eq.rec we instead learn how to battle it.</p>",
        "id": 232888403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617362752
    },
    {
        "content": "<p>I don't think I can say anything in particular without a more concrete setting - there will be battles to be had, and they can be overcome by various application-specific techniques</p>",
        "id": 232888671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617362976
    },
    {
        "content": "<p>please feel free to try</p>",
        "id": 232888685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617362987
    },
    {
        "content": "<p>Basically I think I am saying that now I actually understand what's going on a bit better I should try the cdga game again but in a different way -- battling the recs head on. Or maybe I'll just play the homology game. Maybe it will just be horrible!</p>",
        "id": 232889529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617363671
    },
    {
        "content": "<p>I played around with some lemmas about eq.rec in <a href=\"https://github.com/leanprover-community/mathlib/issues/6837\">#6837</a></p>",
        "id": 232958475,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617401943
    },
    {
        "content": "<p>The rest of the PR is junk, but those lemmas may be worth salvaging</p>",
        "id": 232958497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617401968
    },
    {
        "content": "<p>Notably this one covered some versions of <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span>'s addition example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">rec_apply₂</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">h.rec</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">h.rec</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h.rec</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 232958625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617402064
    },
    {
        "content": "<p>I'm not sure whether in pushing for more eq.rec or less. I was talking to Amelia recently who has been avoiding == in her MSc thesis but then Chris Hughes told her that it wasn't that hard to work with really; on the other hand it gets a lot of bad press around here.</p>",
        "id": 232960835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617403795
    },
    {
        "content": "<p>If you are in DTT hell then heq is certainly going to be one of the tools in your tool belt. There are a couple different things like <code>subst</code> and <code>eq.rec</code> and <code>==</code> and pattern matching on <code>rfl</code> and <code>congr_arg</code> that get used in these kinds of proofs, and they are all problematic in entirely different ways. If you are lucky you can navigate between them and avoid the pitfalls</p>",
        "id": 232962541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617405031
    },
    {
        "content": "<p>For example, notice that theorems like <code>rec_apply</code> are always very easy to prove, they are always just \"case on rfl, rfl\"</p>",
        "id": 232962575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617405076
    },
    {
        "content": "<p>however, the stating the theorem is complex, and it's difficult to create these theorems on the fly in the middle of a proof, you have to generalize exactly the right things</p>",
        "id": 232962605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617405114
    },
    {
        "content": "<p>For example, take a look at this file from the lean 2 hott library: <a href=\"https://github.com/leanprover/lean2/blob/master/hott/init/path.hlean\">https://github.com/leanprover/lean2/blob/master/hott/init/path.hlean</a> and notice how many theorems are proved <code>by induction p; refl</code></p>",
        "id": 232962803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617405264
    },
    {
        "content": "<p>but it's also believed that the (first order) theory of equality is not \"finitely axiomatizable\" with a fixed number of theorems like the ones in that file, you get associators that commute with inverses, and these operators are themselves objects that cohere in some complicated way in the next level up, and all the proofs are <code>by induction p; refl</code> but the library is forever incomplete, so you can't just write <code>rec_apply</code> once and be done with it because you will need <code>rec_apply3</code> or <code>rec_rec_apply</code> and so on</p>",
        "id": 232963118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617405511
    },
    {
        "content": "<p>By the way, <code>==</code> is basically equivalent to a theorem about <code>eq.rec</code>. For example that theorem above can also be stated as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">rec_apply₂</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">h.rec</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h.rec</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The main difference is that <code>==</code> forgets the proof that <code>i = j</code> or <code>C i = C j</code> (it existentially quantifies over a proof of <code>C i = C j</code>), so you have to supply the proof when you want to get back to a regular equality</p>",
        "id": 232963372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617405697
    },
    {
        "content": "<p>Thanks for this. I was trying to turn it all into a blog post yesterday but I'm now thinking of writing two -- one on induction and then one on this stuff</p>",
        "id": 232992565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617440146
    }
]